[
  {
    "objectID": "Spatial_Information_Analysis.html",
    "href": "Spatial_Information_Analysis.html",
    "title": "Spatial Information Analysis",
    "section": "",
    "text": "Geocomputation with R\n\n\n\n\n\n\n\n\n공간정보란 ? 사람들이 생활하고 있는 공간 상에서 사건이나 사물에 대한 위치를 나타내는 정보\n\n위치를 나타내는 정보는 (1) 위치를 표현하는 정보 (2) 해당 위치에 나타나는 특성에 대한 정보\n\n위치를 표현하는 정보 : 공간 상에서 사건이나 사물의 위치가 어디에 있는지를 나타내는 정보\n\nex) 주소, 위경도, x,y 좌표 등\n\n해당 위치에 나타나는 특성에 대한 정보 : 특정 위치에 있는 사건이나 사물을 설명하는 정보\n\nex) 학교, 회사, 학생 수 , 교사 수, 사고 건 수, 사고 유형 등\n\n\n\n지리정보 시스템(Geographic Information System) : 공간정보데이터를 처리, 가공하여 새로운 정보를 도출하는 일련의 과정 또는 기법\n\nex) 교통사고 데이터 분석 (TIMS)\n\n공간정보를 이용하여 GIS 분석을 수행하기 위한 소프트웨어\n\n전용 소프트웨어\n\nArcGIS : 전문적인 공간정보의 처리와 분석 가능, 고가(유료)\nQGIS : 오픈소스 GIS 소프트웨어, 최근 많은 분야에서 GIS 소프트웨어로 활용\n\n오픈소스 소프트웨어\n\nR 소프트웨어 : 오픈소스 기반의 통계 프로그램, 공간정보의 처리와 븐석에도 강력한 기능\nPython 소프트웨어 : 배우기 쉽고, 강력한 프로그래밍 언어, 공간정보를 다루는데 유용한 라이브러리가 개발\n\n\n\n\n\n\n\n위치정보와 속성정보로 구분\n\n위치정보\n\n좌표체계를 이용한 위치정보\n\n지리좌표계에서 이용하는 경도와 위도로 표현 ex) 경위도좌표\n수학적으로 X좌표와 Y좌표로 위치 정보를 표현 ex) 평면직각좌표(지도좌표)\n\n공간정보 데이터의 위치정보 표현 방식\n\n벡터 (점, 선, 면)\n래스터 (일정한 격자 또는 화소)\n\n\n속성정보\n\n주어진 위치에 있는 사건이나 사물에 대한 자료\n\n\n\n\n\n\n\n지리좌표체계 : 경도와 위도로 위치를 표현하는 지리좌표체계\n투영좌표체계 : 지도투영법을 적용하여 둥근 지구를 평면으로 변환한 후, 직각좌표체계를 이용하여 x좌표와 y좌표의 직각좌표체계로 위치를 표현\n\n원통도법, 원추도법, 평면도법이 있음.\nUTM 좌표체계, TM 좌표계, UTM-K 좌표계\n우리나라는 ITRF2000 지구중심좌표계를 따르고 타원체로는 GRS80 타원체를 적용\n\n\n\n\n\n\nshapefile\n\n.shp : 공간정보(점, 선, 다각형)\n.shx : geometry와 속성 정보 연결\n.dbf : 속성정보\n.drj : 좌표계 정보 저장\n.sbn : 위치 정보 저장\n\ngeojson : json 또는 xml 파일 포맷 필요요\n\n\n\n\n\n\n\n패키지\n\nsf : 지리 공간 벡터 데이터(vector data) 분석을 위한 패키지\nraster : 지리 공간 레스터 데이터(raster data)를 처리 및 분석하는데 사용\nspData : 37개의 지리 공간 데이터셋이 내장\nspDataLarge : 지리공간 데이터 샘플을 내장\n\nvignetee(package = \" \") : 설치된 모든 패키지에 대한 이용가능한 모든 목록을 출력\nst_as_sf() : st 데이터를 sf로 변환하는 함수\nst_centroid : 폴리곤의 중심점을 계산하는 함수\nplot 함수 위에 다른 지도 층을 추가 : plot() 함수 안에 add = TRUE 사용\n\n\n\n\nst_point() : A point\nst_linestring() : A linestring\nst_polygon() : A polygon\nst_multipoint() : A multipoint\nst_multilinestring() : A multilinestring\nst_multipolygon() : A multipolygon\nst_geometrycollection() : A geometry collection\n\n\n\n\n\nst_sfc() : 두 개의 지리특성(feature)을 하나의 칼럼 객체로 합치는 함수\nst_geometry_type() : 기하유형을 확인\nst_crs() : 특정 CRS를 지정\n\n특정 CRS를 지정하기 위해 epsg(SRID) 또는 proj4string 속성을 사용\n\nepsg 코드\n\n장점 : 짧아서 기억하기 쉬움\nsfc 객체 내의 모든 geometries는 동일한 CRS를 가져야 함.\nEPSG : 4326 : GPS가 사용하는 좌표계\n\nproj4string 정의\n\n장점 : 투사 유형이나 datum, 타원체 등의 다른 모수들을 구체화할 수 있는 유연성이 있음\n단점 : 사용자가 구체화를 해야하므로 길고 복잡하며 기억하기 어려움\n\nst_sf() : sfc와 class sf의 객체들을 하나로 통합\n\n\nlibrary(raster)\nlibrary(rgdal)\n\nraster_filepath &lt;- system.file(\"raster/srtm.tif\", package = \"spDataLarge\")\nnew_raster &lt;- raster(raster_filepath)\nnew_raster\n# class      : RasterLayer\n# dimensions : 457, 465, 212505  (nrow, ncol, ncell)\n# resolution : 0.0008333333, 0.0008333333  (x, y)\n# extent     : -113.2396, -112.8521, 37.13208, 37.51292  (xmin, xmax, ymin, ymax)\n# crs        : +proj=longlat +datum=WGS84 +no_defs\n# source     : srtm.tif\n# names      : srtm\n# values     : 1024, 2892  (min, max)\n\n\ndim() : 행, 열, 층의 수\nncell() : 셀의 수\nres() : 해상도\nextent() : 경계값\ncrs() : 좌표계\ninMemory() : 래스터 데이터가 메모리에 저장되어 있는지(논리값 출력)\n\n\n\n\n\nRasterLayer class\nRasterBrick Class\nRasterStack class\n\n\nRasterLayer : 한 개의 층으로 구성되어 있는 래스터\nRasterBrick : 여러개의 층으로 구성되어 있는 래스터\n\n단일 다중 스펙트럼 위성 파일, 메모리의 단일 다층 객체의 형태\nbrick() 함수를 사용하여 다층 래스터 파일을 로드\n\nRasterStack : 여러개의 층으로 구성되어 있는 래스터\nnlayers() : 래스터 데이터의 층의 수\n\n\n\n\nRasterBrick : 동일한 복수 개의 RasterLayer 층으로 구성\nRasterStack : 여러 개의 RasterLayer과 RasterBrick 객체가 혼합\n\n\n\n\n\nRasterBrick : 하나의 다층 래스터 파일이나 객체를 처리\nRasterStack : 여러 개의 래스터 파일들이나 여러 종류의 래스터 클래스를 한꺼번에 연걸해서 연산하고 처리\n\n\n\n\n\n\n지리 좌표계\n\n위도와 경도를 이용해 지구 표면의 위치를 정의\n미터가 아니라, 각도로 거리 측정\n타원 표면, 구면 표면\nWGS84\n\n투영(투사) 좌표계\n\n암묵적으로 “평평한 표면” 위의 데카르트 좌표 기반 -&gt; 왜곡 발생\n원점, x축, y축\n미터와 같은 선형 측정 단위\n평면, 원뿔, 원통의 3가지 투영 유형\n\nst_set_crs() : 좌표계가 비어있거나 잘못 입력되어 있는 경우에 좌표계를 설정\nst_transform() : 투영 데이터 변환\nst_area() : 벡터 데이터의 면적 계산 -&gt; [m^2] 단위가 같이 반환\n좌표계 설정할 때,\n\n벡터 데이터 : epsg코드나 proj4string정의 모두 사용 가능\n래스터 데이터 : proj4string 정의만 사용\n\n\n\n\n\n\n\n\n\n\nsf 객체에서 속성 정보만 가져오기 : st_drop_geometry()\n\n\nBase R 구문으로 벡터 데이터 속성 정보의 행과 열 가져오기\n\n\ndplyr로 벡터 데이터 속성 정보의 행과 열 가져오기\n\n\n한 개 컬럼만 가져온 결과를 벡터로 반환하기\n\n\n\n\n\n지리공간 sf 객체는 항상 점, 선, 면 등의 지리기하 데이터를 리스트로 가지고 있는 geometry 칼럼이 항상 따라다님\nsf 객체로부터 이 geometry 칼럼을 제거하고 나머지 속성 정보만으로 Dataframe을 만들고 싶다면 sf패키지의 st_drop_geometry()를 사용\ngeometry 칼럼의 경우 지리기하 점, 선, 면 등의 리스트 정보를 가지고 있어 메모리 점유가 크기때문에, 사용할 필요가 없다면 geometry 칼럼을 제거하고 속성 정보만으로 Dataframe으로 만들어서 분석을 진행하는게 좋음\n\n\n\n\n\nR Dataframe에서 i행과 j열을 가져올 때 : df[i, j], subset(), $을 사용\n\n\ni행과 j열 위치를 지정 ex) world[1:6, ]\n\n\nj행의 이름을 이용 ex) world[, c(\"name_long\", \"lifeExp\")]\n\n\n논리 벡터를 사용해서 i행의 부분집합 ex) sel_area &lt;- world$area_km2 &lt; 10000\n\n\n\n\n\n\n\ndplyr 패키지에서는 체인(%&gt;%)으로 파이프 연산자를 사용하여 가독성이 좋고, 속도가 빠름\n\n\nselect() 함수를 사용하여 특정 열 선택\n\n\nselect(sf, name)\nselect(sf, name1:name2)\nselect(sf, position) ex) select(world, 2, 7)\nselect(sf, -name)\nselect(sf, name_new = name_old) : 열 선택하여 이름 변경\nselect(sf, contain(string)) : 특정 문자열을 포함한 칼럼을 선택\n\ncontain(), starts_with(), ends_with(), matches(), num_range()\n\n\n\nfilter() 함수를 사용하여 조건을 만족하는 특정 행 추출\n\n\nsubset() 함수와 동일한 기능\n\n\naggregate() 함수를 사용하여 지리 벡터 데이터의 속성 정보를 그룹별로 집계\n\n\naggregate(x ~ group, FUN, data, ...)\ndata.frame을 반환하며, 집계된 결과에 지리 기하(geometry) 정보는 없음\nworld[‘pop’]은 “sf” 객체이기 때문에 집계 결과가 “sf” 객체로 반환\nworld$pop은 숫자형 벡터이므로 aggregate() 함수를 적용하면 집계 결과가 “data.frame”으로 반환\n\n\nsummarize(), group_by() 함수를 이용한 지리벡터 데이터의 속성 정보를 그룹별로 집계\n\n\ngroup_by() : 기준이 되는 그룹을 지정\nsummarize() : 다양한 집계 함수를 사용\n\nsum(), n() : 합계와 개수 집계\ntop_n() : 상위 n개 추출\narrange() : 오름차순 정렬, desc()를 사용하면 내림차순 정렬\nst_drop_geometry() : geometry 열 제거\n\n\n\n\n\n\n\n\nR의 sf클래스 객체인 지리공간 벡터 데이터를 dplyr의 함수를 사용해서 두 테이블을 join하면 속성과 함께 지리공간 geometry 칼럼과 정보도 join된 후의 테이블에 자동으로 그대로 따라감\n\nleft_join()시 key variable이 있어야 함\n\n두 데이터 셋에 같은 이름을 가지는 변수가 없는 경우\n\n\n하나의 key variable의 이름을 바꿔서 통일시켜줌\n\n\nby를 사용하여 결합변수를 지정\n\n\n\n\n\n\n# coffee_data의 name_long변수 이름을 nm으로 변경\ncoffee_renamed &lt;- rename(coffee_data, nm = name_long)\n# by 사용하여 결합 변수를 지정하여 다른이름변수를 기준으로 조인하기\nworld_coffee1 &lt;- left_join(world, coffee_renamed, by = c(name_long = \"nm\"))\n\n\ninner_join() 함수를 사용하면 겹치는 행만 추출\n\nsetdiff() : 일치하지 않는 행 추출\ngrepl() : 텍스트 찾는 함수 (논리값으로 출력)\ngrep() : 텍스트 찾는 함수 (행 번호 출력)\n\n\n\n\n\n\ndplyr로 지리 벡터 데이터에 새로운 속성 만들기\n\nmutate() : 기존 데이터 셋에 새로 만든 변수(열) 추가\ntransmute() : 기존의 열은 모두 제거하고 새로 만든 열과 지리기하 geometry열만을 반환\n\ntidyr로 지리 벡터 데이터의 기존 속성을 합치거나 분리하기\n\nunite(data, 병합 열, sep = \"_\", remove = TRUE) : 기존 속성 열을 합쳐서 새로운 속성 열을 만듦\n\nremove = TRUE를 설정해주면 기존의 합치려는 두 개의 열은 제거되고, 새로 만들어진 열만 남음\n\nseparate() : 기존에 존재하는 열을 구분자를 기준으로 두 개의 열로 분리\n\n\n\nworld_unite &lt;- world %&gt;%\n  unite(\"con_reg\", continent:region_un, sep = \":\", remove = TRUE)\nnames(world_unite)\n# \"iso_a2\"    \"name_long\" \"con_reg\"   \"subregion\" \"type\"\n# \"area_km2\"  \"pop\"       \"lifeExp\"   \"gdpPercap\" \"geom\"\n\nworld_separate &lt;- world_unite %&gt;%\n  separate(con_reg, c(\"continent\", \"region_un\"), sep = \":\")\nnames(world_separate)\n# \"iso_a2\"    \"name_long\" \"continent\" \"region_un\" \"subregion\" \"type\"\n# \"area_km2\"  \"pop\"       \"lifeExp\"   \"gdpPercap\" \"geom\" \n\n\ndplyr로 지리 벡터 데이터의 속성 이름 바꾸기\n\nrename(data, new_name = old_name) : 특정 속성 변수 이름 변경\nsetNames(object = nm, nm) : 여러개의 속성 칼럼을 한꺼번에 변경 또는 부여\n\n\n\nworld %&gt;% rename(name = name_long)\n\nnew_names &lt;- c(\"i\", \"n\", \"c\", \"r\", \"s\", \"t\", \"a\", \"p\", \"l\", \"gP\", \"geom\")\nworld %&gt;% setNames(new_names)\n\n\n\n\n\n\n래스터 객체의 데이터 속성은 숫자형(numeric), 정수형(integer), 논리형(logical), 요인형(factor) 데이터를 지원하며, 문자형(character)은 지원하지 않음\n문자형으로 이루어진 범주형 변수 값을 가지고 래스터 객체의 속성을 만들고 싶으면\n\n\n문자형을 요인형으로 변환(또는 논리형으로 변환) -&gt; factor() 함수 사용\n\n\n요인형 값을 속성 값으로 하여 래스터 객체를 만듦\n\n\n래스터 객체의 모든 값을 추출하거나 전체 행을 추출 : values(), getValues()\n\n\n\n\n\n\n\n\n\n\nst_intersects() : 공간 부분집합 추출(교집합)\n\n\n\n\n\n\n\n\n\n\nst_intersects() : 공간적으로 관련이 있는 객체를 출력\nst_disjoint() : 공간적으로 관련되지 않은 객체만 반환\nst_within() : 공간적으로 완전히 객체 내부에 있는 객체들만 출력\nst_touches() : 공간적으로 테두리에 있는 객체들만 출력\nst_is_within_distance() : 공간적으로 주어진 거리보다 가까운 객체들을 반환\nsparse = FALSE 매개변수를 설정하면 논리값으로 출력\n\n\nst_intersects(p, a)\n#&gt; Sparse geometry binary predicate list of length 4, where the predicate\n#&gt; was `intersects'\n#&gt;  1: 1\n#&gt;  2: 1\n#&gt;  3: (empty)\n#&gt;  4: (empty)\n\nst_intersects(p, a, sparse = FALSE)\n#&gt;       [,1]\n#&gt; [1,]  TRUE\n#&gt; [2,]  TRUE\n#&gt; [3,] FALSE\n#&gt; [4,] FALSE\n\nst_disjoint(p, a, sparse = FALSE)[, 1]\n#&gt; [1] FALSE FALSE  TRUE  TRUE\n\nst_within(p, a, sparse = FALSE )[, 1]\n#&gt; [1]  TRUE FALSE FALSE FALSE\n\nst_touches(p, a, sparse = FALSE)[, 1]\n#&gt; [1] FALSE  TRUE FALSE FALSE\n\nsel &lt;- st_is_within_distance(p, a, dist = 0.9) # can only return a sparse matrix\nlengths(sel) &gt; 0\n#&gt; [1]  TRUE  TRUE FALSE  TRUE\n\n\n\n\n\nst_join() : 공간 결합 함수\n\n\nrandom_joined = st_join(random_points, world[\"name_long\"]) ; random_joined\n#&gt; Simple feature collection with 10 features and 1 field\n#&gt; Geometry type: POINT\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: -158.1893 ymin: -42.91501 xmax: 165.1157 ymax: 80.5408\n#&gt; Geodetic CRS:  WGS 84\n#&gt; # A tibble: 10 × 2\n#&gt;                 geometry name_long\n#&gt;  *           &lt;POINT [°]&gt; &lt;chr&gt;    \n#&gt;  1 (-58.98475 -21.24278) Paraguay \n#&gt;  2  (-13.05963 25.42744) Morocco  \n#&gt;  3   (-158.1893 80.5408) &lt;NA&gt;     \n#&gt;  4  (-108.9239 27.80098) Mexico   \n#&gt;  5   (-9.246895 49.9822) &lt;NA&gt;     \n#&gt;  6  (-71.62251 20.15883) &lt;NA&gt;     \n#&gt;  7  (38.43318 -42.91501) &lt;NA&gt;     \n#&gt;  8  (-133.1956 6.053818) &lt;NA&gt;     \n#&gt;  9   (165.1157 38.16862) &lt;NA&gt;     \n#&gt; 10   (16.86581 53.86485) Poland\n\n\n\n\n\n\n기호(plotting symbols, characters) : pch\n기호의 크기 : cex\n선 두께 : lwd\n선 유형 : lty\n\n\n\n\nany() : 특정 값이 포함되어 있는지 확인할 때 유용, 여기서 TRUE가 있는지 확인 가능\n\n\nany(st_touches(cycle_hire, cycle_hire_osm, sparse = FALSE))\n#&gt; [1] FALSE\n\n\nlibrary(mapview)\nlibrary(tmap)\ntmap_mode(\"view\")\ntm_basemap(\"Stamen.Terrain\") +\n  tm_shape(cycle_hire) +\n  tm_symbols(col = \"red\", shape = 16, size = 0.5, alpha = .5) +\n  tm_shape(cycle_hire_osm) +\n  tm_symbols(col = \"blue\", shape = 16, size = 0.5, alpha = .5) +\n  tm_tiles(\"Stamen.TonerLabels\")\n\n\n\n\n\n\n\nst_transform() : 투영데이터로 변환을 위한 함수\nst_is_within_distance() : 임계 거리보다 가까운 객체들을 반환\n\n\ncycle_hire_P &lt;- st_transform(cycle_hire, 27700)\ncycle_hire_osm_P &lt;- st_transform(cycle_hire_osm, 27700)\nsel &lt;- st_is_within_distance(cycle_hire_P, cycle_hire_osm_P, dist = 20)\nsummary(lengths(sel) &gt; 0)\n#&gt;    Mode   FALSE    TRUE \n#&gt; logical     304     438\n\n\nst_join()을 사용하여 dist 인수를 추가하여 구할 수도 있음\n\nst_join()을 사용하면 조인된 결과의 행 수가 더 크다.\n이는 cycle_hire_P의 일부 자전거 대여소가 cycle_hire_osm_P와 여러개가 겹치기 때문임\n겹치는 점에 대한 값을 집계하고 평균을 반환하여 문제를 해결 가능\n\n\n\nz = st_join(cycle_hire_P, cycle_hire_osm_P,\n            join = st_is_within_distance, dist = 20)\nnrow(cycle_hire) ; nrow(z)\n#&gt; [1] 742\n#&gt; [1] 762\n\nz = z %&gt;%\n  group_by(id) %&gt;%\n  summarize(capacity = mean(capacity))\nnrow(z) == nrow(cycle_hire)\n#&gt; [1] TRUE\n\n\n\n\n\naggregate()와 group_by() %&gt;% summarize()를 활용하여 그룹별 통계값 계산(평균, 합 등)\n\n\n# aggregate() 사용\nnz_avheight &lt;- aggregate(x = nz_height, by = nz, FUN = mean)\nplot(nz_avheight[2])\n\n\n\n# group_by() %&gt;% summarize() 사용\nnz_avheight2 &lt;- nz %&gt;%\n  st_join(nz_height) %&gt;%\n  group_by(Name) %&gt;%\n  summarize(elevation = mean(elevation, na.rm = TRUE))\nplot(nz_avheight2[2])\n\n\n\n\n\nst_interpolate_aw() : 면적의 크기에 비례하게 계산(면적 가중 공간 보간)\n\n\nsum(incongruent$value)\n#&gt; [1] 45.41184\n\nagg_aw = st_interpolate_aw(incongruent[, \"value\"],\n                           aggregating_zones,\n                           extensive = TRUE)\n#&gt; Warning in st_interpolate_aw.sf(incongruent[, \"value\"], aggregating_zones, :\n#&gt; st_interpolate_aw assumes attributes are constant or uniform over areas of x\nagg_aw$value\n#&gt; [1] 19.61613 25.66872\n\n\n\n\n\n위상 관계는 binary인 반면 거리 관계는 연속적임\nst_distance() : 두 객체 사이의 거리 계산\n\n\nnz_heighest &lt;- nz_height %&gt;% top_n(n = 1, wt = elevation)\ncanterbury_centroid &lt;- st_centroid(canterbury)\n#&gt; Warning: st_centroid assumes attributes are constant over geometries\n\nst_distance(nz_heighest, canterbury_centroid)\n#&gt; Units: [m]\n#&gt;        [,1]\n#&gt; [1,] 115540\n\nco &lt;- filter(nz, grepl(\"Canter|Otag\", Name))\nst_distance(nz_height[1:3, ], co)\n#&gt; Units: [m]\n#&gt;           [,1]     [,2]\n#&gt; [1,] 123537.16 15497.72\n#&gt; [2,]  94282.77     0.00\n#&gt; [3,]  93018.56     0.00\n\nplot(st_geometry(co)[2])\nplot(st_geometry(nz_height)[2:3], add = TRUE)\n\n\n\n\n\n\n\n\n\n\n\ncellFromXY() or raster::extract() : 좌표값을 Cell ID로 변환\n\n\n\n\n\n\n\nid = cellFromXY(elev, xy = matrix(c(0.1, 0.1), ncol = 2))\nelev[id]\n#&gt;   elev\n#&gt; 1   16\nterra::extract(elev, matrix(c(0.1, 0.1), ncol = 2))\n#&gt;   elev\n#&gt; 1   16\n\nclip = rast(xmin = 0.9, xmax = 1.8, ymin = -0.45, ymax = 0.45,\n            res = 0.3, vals = rep(1, 9))\nelev[clip]\n#&gt;   elev\n#&gt; 1   18\n#&gt; 2   24\nterra::extract(elev, ext(clip))\n\n\noperator는 raster의 다양한 inputs을 받고, drop=FALSE로 설정했을 때, raster 객체를 반환\n\n\nelev[1:2]\n#&gt;   elev\n#&gt; 1    1\n#&gt; 2    2\nelev[2, 1:2]\n#&gt;   elev\n#&gt; 1    7\n#&gt; 2    8\nelev[1:2, drop = FALSE] # spatial subsetting with cell IDs\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 1, 2, 1  (nrow, ncol, nlyr)\n#&gt; resolution  : 0.5, 0.5  (x, y)\n#&gt; extent      : -1.5, -0.5, 1, 1.5  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : lon/lat WGS 84 (EPSG:4326) \n#&gt; source(s)   : memory\n#&gt; name        : elev \n#&gt; min value   :    1 \n#&gt; max value   :    2\nelev[2, 1:2, drop = FALSE] # spatial subsetting by row,column indices\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 1, 2, 1  (nrow, ncol, nlyr)\n#&gt; resolution  : 0.5, 0.5  (x, y)\n#&gt; extent      : -1.5, -0.5, 0.5, 1  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : lon/lat WGS 84 (EPSG:4326) \n#&gt; source(s)   : memory\n#&gt; name        : elev \n#&gt; min value   :    7 \n#&gt; max value   :    8\n\n\n\n\n\nelev + elev # 더하기\nelev^2      # 제곱\nlog(elev)   # 로그\nelev &gt; 5    # 논리\n\n\n\n\n\n\n\ntmap을 plot하기 위해서는 우선 tm_shape()로 지정해야하며, + 연산자로 레이어를 추가해야함\n\nex) tm_polygons(), tm_raster(), tm_borders(), tm_symbols() 등\n\nInteractive maps : tmap_mode()를 사용하여 \"plot\",과 \"view\"모드 사용 가능\nFacet : 하나의 창에 여러 맵을 동시에 그리기\n\nFacet 하는 3가지 방법\n\n여러변수 이름 추가\nby argument of tm_facets로 공간 데이터를 나누기\ntmap_arrange() 사용\n\n\n\ntm_basemap() : 지도를 표현할 수 있는 바탕이 되는 지도\n\n\n# 1. 여러 변수 이름 추가\ntmap_mode(\"plot\")\ndata(World)\ntm_shape(World) +\n  tm_polygons(c(\"HPI\", \"economy\")) +\n  tm_facets(sync = TRUE, ncol = 2)\n\n\n\n\n\n# 2. by argument of `tm_facets`로 공간 데이터 나누기\ntmap_mode(\"plot\")\ndata(NLD_muni)\nNLD_muni$perc_men &lt;- NLD_muni$pop_men / NLD_muni$population * 100\ntm_shape(NLD_muni) +\n  tm_polygons(\"perc_men\", palette = \"RdYlBu\") +\n  tm_facets(by = \"province\")\n\n\n\n\n\n# 3. `tmap_arrange` 함수 사용 : 각각 그린다음에 배치\ntmap_mode(\"plot\")\ndata(NLD_muni)\ntm1 &lt;- tm_shape(NLD_muni) + tm_polygons(\"population\", convert2density = TRUE)\ntm2 &lt;- tm_shape(NLD_muni) + tm_bubbles(size = \"population\")\ntmap_arrange(tm1, tm2)\n\n\n\n\n\ntmap_mode(\"view\")\ndata(World, metro, rivers, land)\ntm_basemap(\"Stamen.Watercolor\") +\n  tm_shape(metro) + tm_bubbles(size = \"pop2020\", col = \"red\") +\n  tm_tiles(\"Stamen.TonerLabels\")\n\n\n\n\n\n\n\nOption and styles\n\ntm_layout() : map layout 지정\ntm_options() 내에서 설정\n\ntmap_options_diff() : default tmap options과 차이점 출력\ntmap_options_reset() : default tmap options으로 설정\n\nreset을 해주지 않으면 option이 계속 설정되어있음\n\n\ntmap_style() : 지도 스타일 설정\n\n\n\ntmap_mode(\"plot\")\ntm_shape(World) +\n  tm_polygons(\"HPI\") +\n  tm_layout(bg.color = \"skyblue\", inner.margins = c(0, .02, .02, .02))\n\n\n\n\n\ntmap_options(bg.color = \"black\", legend.text.color = \"white\")\ntm_shape(World) + tm_polygons(\"HPI\", legend.title = \"Happy Planet Index\")\n\n\n\n\n\ntmap_style(\"classic\")\n## tmap style set to \"classic\"\n## other available styles are: \"white\", \"gray\", \"natural\", \"cobalt\",\n## \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\"\n\ntm_shape(World) +\n  tm_polygons(\"HPI\", legend.title = \"Happy Planet Index\")\n\n\n\n\n\nExporting maps\n\n\ntm &lt;- tm_shape(World) +\n  tm_polygons(\"HPI\", legend.title = \"Happy Planet Index\")\n\n## save an image (\"plot\" mode)\ntmap_save(tm, filename = \"./Spatial_Information_Analysis/world_map.png\")\n\n## save as stand-alone HTML file (\"view\" mode)\ntmap_save(tm, filename = \"./Spatial_Information_Analysis/world_map.html\")\n\n\nQuick thematic map\n\n\nqtm(World, fill = \"HPI\", fill.pallete = \"RdYlGn\")\n\n\n\n\n\n\n\n\n\n\n\n\n단순화는 일반적으로 더 작은 축척 지도에서 사용하기 위한 벡터 객체(선, 다각형)의 일반화를 위한 프로세스\nst_simplify() : 정점을 제거하여 선을 단순화시킴\n\ndTolerance : 단위가 m이며 커질수록 더 단순화\n\n\n\nseine_simp &lt;- st_simplify(seine, dTolerance = 2000) # 2000m\nplot(seine)\nplot(seine_simp)\nobject.size(seine) ; object.size(seine_simp)\n#&gt; 18096 bytes  9112 bytes\n\n\n\n\n\n\n\n단순화는 다각형에도 적용 가능\nst_simplify()를 사용하였을 때, 영역이 겹치는 경우도 발생\nrmapshaper 패키지의 ms_simplify() 함수를 사용\nkeep_shapes = TRUE : 개체 수는 그대로 유지\n\n\nus_states\nus_states2163 &lt;- st_transform(us_states, 2163)\nus_states2163\n\nus_states_simp1 &lt;- st_simplify(us_states2163, dTolerance = 100000)\nplot(us_states[1])\nplot(us_states_simp1[1])\n\nus_states2163$AREA &lt;- as.numeric(us_states2163$AREA)\n\nlibrary(rmapshaper)\nus_states_simp2 &lt;- rmapshaper::ms_simplify(us_states2163, keep = 0.01,\n                                           keep_shapes = FALSE)\nplot(us_states_simp2[1])\n\n\n\n\n\n\n\n\n\n\n가장 일반적으로 사용되는 중심 연산은 지리적 중심 : 공간객체의 질량 중심\nst_centroid() : 지리적 중심을 생성하지만, 때때로 지리적 중심이 상위 개체의 경계를 벗어나는 경우가 발생\nst_point_on_surface() : 상위 개체 위에 중심이 생성\n\n\nnz_centroid &lt;- st_centroid(nz)\nseine_centroid &lt;- st_centroid(seine)\n\nnz_pos &lt;- st_point_on_surface(nz)\nseine_pos &lt;- st_point_on_surface(seine)\n\nplot(st_geometry(nz), main = \"nz\")\nplot(nz_centroid ,add=T, col=\"black\")\nplot(nz_pos ,add=T, col=\"red\")\n\nplot(st_geometry(seine), main = \"seine\")\nplot(seine_centroid ,add=T, col=\"black\")\nplot(seine_pos ,add=T, col=\"red\")\n\n\n\n\n\n\n\n\n\n\n버퍼 : 기하학적 특징의 주어진 거리 내 영역을 나타내는 다각형\n지리데이터 분석에 자주 활용됨\nst_buffer() : 버퍼 생성 함수, 최소 두 개의 인수가 필요함\n\n\nseine_buff_5km &lt;- st_buffer(seine, joinStyle = \"ROUND\", dist = 5000)\nseine_buff_20km &lt;- st_buffer(seine, dist = 20000)\n\nplot(seine,col=\"black\", reset = FALSE)\nplot(seine_buff_5km, col=adjustcolor(1:3, alpha = 0.2), add=T)\n\nplot(seine,col=\"black\", reset = FALSE)\ncol1 &lt;- adjustcolor(\"red\", alpha=0.2)\ncol2 &lt;- adjustcolor(\"blue\", alpha=0.2)\ncol3 &lt;- adjustcolor(\"green\", alpha=0.2)\nplot(seine_buff_20km, col=c(col1,col2,col3), add=T)\n\n\n\n\n\n\n\n\n\n\n왜곡되거나 잘못 투영된 지도를 기반으로 생성된 geometry를 재투영하거나 개선할 때 많은 Affine 변환이 적용\n이동 : 맵 단위로 모든 포인트가 동일한 거리만큼 이동\n\n\nnz_sfc &lt;- st_geometry(nz)\nnz_shift &lt;- nz_sfc + c(0, 100000)\nplot(nz_sfc)\nplot(nz_shift,add=T, col=\"Red\")\n\n\n\n\n\n배율 조정 : 개체를 요소만큼 확대하거나 축소\n\n모든 기하 도형의 토폴로지 관계를 그대로 유지하면서 원점 좌표와 관련된 모든 좌표값을 늘리거나 줄일 수 있음\n중심점을 기준으로 기하 도형의 차이 만큼을 늘리고 0.5배 줄인 다음 다시 중심점을 더해줌\n\n\n\nnz_centroid_sfc &lt;- st_centroid(nz_sfc)\nnz_scale &lt;- (nz_sfc - nz_centroid_sfc) * 0.5 + nz_centroid_sfc\n\nplot(nz_sfc)\nplot(nz_scale, add=T, col=\"Red\")\n\n\n\n\n\n회전 : 2차원 좌표의 회전하기 위한 회전변환행렬\n\n\nmatrix(c(cos(30), sin(30), -sin(30), cos(30)), nrow = 2, ncol = 2)\n#&gt;            [,1]      [,2]\n#&gt; [1,]  0.1542514 0.9880316\n#&gt; [2,] -0.9880316 0.1542514\n\nrotation &lt;- function(a){\n  r = a * pi / 180 #degrees to radians\n  matrix(c(cos(r), sin(r), -sin(r), cos(r)), nrow = 2, ncol = 2)\n}\nnz_rotate &lt;- (nz_sfc - nz_centroid_sfc) * rotation(30) + nz_centroid_sfc\n\nplot(nz_sfc)\nplot(nz_rotate, add=T, col=\"red\")\n\n\n\n\n\n\n\n\n공간 클리핑은 영향을 받는 일부 형상의 지오메트리 열의 변경을 수반하는 공간 부분 집합의 한 형태\n\n\nb &lt;- st_sfc(st_point(c(0, 1)), st_point(c(1, 1))) # create 2 points\nb &lt;- st_buffer(b, dist = 1) # convert points to circles\nplot(b, border = \"grey\")\ntext(x = c(-0.5, 1.5), y = 1, labels = c(\"x\", \"y\"), cex = 3) # add text\n\n\n\n\n\nst_intersection() : X∩Y (x와 y의 교집합)\nst_difference() : X-Y (x와 y의 차집합)\nst_union() : X∪Y (x와 y의 합집합)\nst_sym_difference() : (X∩Y)^c (드모르간의 법칙)\n\n\npar(mfrow = c(2,2))\n\nx &lt;- b[1] ; y &lt;- b[2]\n\n# X ∩ Y\nx_and_y &lt;- st_intersection(x, y)\nplot(b, border = \"grey\", main = \"X ∩ Y\")\nplot(x_and_y, col = \"lightgrey\", border = \"grey\", add = TRUE)\ntext(x = c(-0.5, 1.5), y = 1, labels = c(\"x\", \"y\"), cex = 3)\n\n# X - Y\nx_dif_y &lt;- st_difference(x,y)\nplot(b, border = \"grey\", main = \"X - Y\")\nplot(x_dif_y, col = \"lightgrey\", border = \"grey\", add = TRUE)\ntext(x = c(-0.5, 1.5), y = 1, labels = c(\"x\", \"y\"), cex = 3)\n\n# X U Y\nx_union_y &lt;- st_union(x,y)\nplot(b, border = \"grey\", main = \"X U Y\")\nplot(x_union_y, col = \"lightgrey\", border = \"grey\", add = TRUE)\ntext(x = c(-0.5, 1.5), y = 1, labels = c(\"x\", \"y\"), cex = 3)\n\n# (X ∩ Y)^c\nx_sdif_y &lt;- st_sym_difference(x,y)\nplot(b, border = \"grey\", main = \"(X ∩ Y)^c\")\nplot(x_sdif_y, col = \"lightgrey\", border = \"grey\", add = TRUE)\ntext(x = c(-0.5, 1.5), y = 1, labels = c(\"x\", \"y\"), cex = 3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n클리핑 오브젝트는 지오메트리를 변경할 수 있지만 오브젝트의 부분 집합을 지정할 수도 있으며 클리핑/하위 설정 오브젝트와 교차하는 피쳐만 반환할 수도 있음\nst_sample() : x와 y의 범위 내에서 점들의 간단한 무작위 분포를 생성\n\n\nbb = st_bbox(st_union(x, y))\nbox = st_as_sfc(bb)\nset.seed(2017)\n\np = st_sample(x = box, size = 10)\nx_and_y = st_intersection(x, y)\n\nplot(b, border = \"grey\")\nplot(p, add=T)\n\n\n\n\n\nX와 Y 둘 다와 교차하는 점만을 반환하는 방법\n\n\n## 1번째방법\np_xy1 &lt;- p[x_and_y]\nplot(p_xy1, add=T, col=\"red\")\n\n## 2번째방법\np_xy2 &lt;- st_intersection(p, x_and_y)\nplot(p_xy2, add=T, col=\"blue\")\n\n## 3번째방법\nsel_p_xy &lt;- st_intersects(p, x, sparse = FALSE)[, 1] &\n  st_intersects(p, y, sparse = FALSE)[, 1]\np_xy3 &lt;- p[sel_p_xy]\nplot(p_xy3, add=T, col=\"green\")\n\n\n\n\n\n\n\n\n\n\n미국의 49개 주의 정보를 4개 지역으로 재구분\n\n\nplot(us_states[6])\n\n\n\n## 1. aggregate함수\nregions &lt;- aggregate(x = us_states[, \"total_pop_15\"], by = list(us_states$REGION),\n                     FUN = sum, na.rm = TRUE)\nplot(regions[2])\n\n\n\n## 2. group_by, summarize함수\nregions2 &lt;- us_states %&gt;% group_by(REGION) %&gt;%\n  summarize(pop = sum(total_pop_15, na.rm = TRUE))\n\nplot(regions2[2])\n\n\n\n\n\n위에서 aggregate()와 summarize()가 모두 지오메트리를 결합하고 st_union()을 사용하면 지오메트리만을 분해\n\n\nus_west &lt;- us_states[us_states$REGION == \"West\", ]\nplot(us_west[6])\n\n\n\nus_west_union &lt;- st_union(us_west)\nplot(us_west_union)\n\n\n\ntexas &lt;- us_states[us_states$NAME == \"Texas\", ]\ntexas_union &lt;- st_union(us_west_union, texas)\nplot(texas_union)\n\n\n\n\n\n\n\n\nst_cast() : 지오메트리 유형을 변환\n\n\nmultipoint &lt;- st_multipoint(matrix(c(1, 3, 5, 1, 3, 1), ncol = 2))\nlinestring &lt;- st_cast(multipoint, \"LINESTRING\")\npolyg &lt;- st_cast(multipoint, \"POLYGON\")\n\nplot(multipoint)\nplot(linestring)\nplot(polyg)\n\nst_length(linestring) # 길이 계산\n# [1] 5.656854\nst_area(polyg) # 면적 계산\n# [1] 4\n\n\n\n\n\n\n\nmultilinestring : 여러 개의 linestring을 하나의 묶음으로 처리\n\n\n\n\n\n\n\nmultilinestring은 각 선 세그먼트에 이름을 추가하거나 단일 선 길이를 계산할 수 없는 등 수행할 수 있는 작업 수가 제한됨\nst_cast() 함수를 사용하여 하나의 multilinestring을 세 개의 linestring로 분리\n\n\nlinestring_sf2 = st_cast(multilinestring_sf, \"LINESTRING\")\nlinestring_sf2\n#&gt; Simple feature collection with 3 features and 0 fields\n#&gt; Geometry type: LINESTRING\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: 1 ymin: 1 xmax: 4 ymax: 5\n#&gt; CRS:           NA\n#&gt;                    geom\n#&gt; 1 LINESTRING (1 5, 4 3)\n#&gt; 2 LINESTRING (4 4, 4 1)\n#&gt; 3 LINESTRING (2 2, 4 2)\n\n\nname과 length 추가\n\n\nlinestring_sf2$name &lt;- c(\"Riddle Rd\", \"Marshall Ave\", \"Foulke St\")\nlinestring_sf2$length &lt;- st_length(linestring_sf2)\nlinestring_sf2\n#&gt; Simple feature collection with 3 features and 2 fields\n#&gt; Geometry type: LINESTRING\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: 1 ymin: 1 xmax: 4 ymax: 5\n#&gt; CRS:           NA\n#&gt;                    geom         name   length\n#&gt; 1 LINESTRING (1 5, 4 3)    Riddle Rd 3.605551\n#&gt; 2 LINESTRING (4 4, 4 1) Marshall Ave 3.000000\n#&gt; 3 LINESTRING (2 2, 4 2)    Foulke St 2.000000\nplot(linestring_sf2[2])\n\n\n\n\n\n\n\n\n\n\n\n다른 공간 객체에 의해 중첩된 래스터에서 값을 추출하는 방법\n공간 출력을 검색하기 위해 거의 동일한 부분 집합 구문(많이 겹치는 부분)을 사용\ndrop = FALSE를 설정하여 행렬 구조를 유지\ncell 중간점이 clip과 겹치는 셀을 포함하는 래스터 개체를 반환\n\n\nelev &lt;- rast(system.file(\"raster/elev.tif\", package = \"spData\"))\nclip &lt;- rast(xmin = 0.9, xmax = 1.8, ymin = -0.45, ymax = 0.45,\n             resolution = 0.3, vals = rep(1, 9))\nplot(elev)\nplot(clip, add=T)\n\n\n\nelve_clip &lt;- elev[clip, drop = FALSE]\nplot(elve_clip)\n\n\n\nelev_raster &lt;- rast(system.file(\"raster/elev.tif\", package = \"spData\"))\nrcc &lt;- vect(xyFromCell(elev_raster, cell = 1:ncell(elev_raster))) # 셀의 중앙점 표시\nxyFromCell(elev_raster,1) # 1번 셀의 중앙점 좌표\n#&gt;          x    y\n#&gt; [1,] -1.25 1.25\nplot(elev)\nplot(rcc,add=T)\nplot(clip, add=T)\n\n\n\n\n\n\n\n\n다른 투사 및 해상도를 가진 두 이미지를 병합하려할 때 사용\nextend() : 래스터 범위 확장\n\n새로 추가된 행과 열은 값 매개변수의 기본값(예 : NA)를 가짐\n\norigin() : 래스터의 원점 좌표를 반환\n\n래스터의 원점은 좌표(0,0)에 가장 가까운 셀 모서리\n\n\n\nelev &lt;- rast(system.file(\"raster/elev.tif\", package = \"spData\"))\nelev_2 &lt;- extend(elev, c(1,2), snap=\"near\") # 아래/위 1행, 좌/우 2열 확장\nplot(elev)\n\n\n\nplot(elev_2, colNA=\"gray\")\n\nelev_3 &lt;- elev + elev_2\n#&gt; Error: [+] extents do not match\n\nelev_4 &lt;- extend(elev, elev_2)\nplot(elev_4, colNA=\"gray\")\n\norigin(elev_4)\n#&gt; [1] 0 0\n\norigin(elev_4) &lt;- c(0.25, 0.25)\nplot(elev_4, colNA=\"black\", add=T)\n\n\n\n\n\n\n\n\n래스터 데이터 셋은 해상도가 서로 다를 수 있음\n해상도를 match 시키기 위해 하나의 래스터 해상도를 감소(aggregate())시키거나 증가(disagg()) 시켜야 함\n\n\n# devtools::install_github(\"geocompr/geocompkg\")\ndem &lt;- rast(system.file(\"raster/dem.tif\", package = \"spDataLarge\"))\ndem_agg &lt;- aggregate(dem, fact = 5, fun = mean)\ndem_disagg &lt;- disagg(dem_agg, fact = 5, method = \"bilinear\")\nplot(dem)\n\n\n\nplot(dem_agg)\n\n\n\nplot(dem_disagg)\n\n\n\nidentical(dem, dem_disagg)\n#&gt; [1] FALSE\n\n\n새롭게 만들어지는 cell의 값을 만드는 두가지 방법\n\nDefault method(method = “near”) : 입력 셀의 값을 모든 출력 셀에 제공\nbilinear method : 입력 이미지의 가장 가까운 4개의 픽셀 중심을 사용하여 거리에 의해 가중된 평균을 계산\n\n\n\n\n\n\nResampling : 원래 그리드에서 다른 그리드로 래스터 값을 전송하는 프로세스\n이 프로세스는 원래 래스터의 값을 가지고, 사용자 지정 해상도와 원점을 가지고 대상 래스터의 새 값을 다시 계산함\n해상도/원점이 다른 래스터의 값을 재계산(추정)하는 방법\n\nNearest neighbor : 원래 래스터의 가장 가까운 셀 값을 대상 래스터의 셀에 할당. 속도가 빠르고 일반적으로 범주형 래스터에 적합\nBilinear interpolation(이중선형보간) : 원래 래스터에서 가장 가까운 4개의 셀의 가중 평균을 대상 1개의 셀에 할당. 연속 래스터를 위한 가장 빠른 방법\nCubic interpolation(큐빅 보간) : 본 래스터의 가장 가까운 16개 셀의 값을 사용하여 출력 셀 값을 결정하고 3차 다항식 함수를 적용. 연속 래스터에 사용. 2선형 보간보다 더 매끄러운 표면을 만들지만, 계산적으로 까다로움\nCubic spline interpolation(큐빅 스플라인 보간) : 원래 래스터의 가장 가까운 16개의 셀의 값을 사용하여 출력 셀 값을 결정하지만 큐빅 스플라인(3차 다항식 함수)을 적용\nLanczos windowed sinc resampling(Lanczos 윈도우 재샘플링) : 원래 래스터의 가장 가까운 셀 36개의 값을 사용하여 출력 셀 값을 결정\nsum\nmin, q1, med, q3, max, average, mode, rms\n\nNearest neighbor은 범주형 래스터에 적합한 반면, 모든 방법은 연속형 래스터에 사용\nresample(x, y, method = \"bilinear\", filename = \"\", ...) : 리샘플링 함수\n\n\nlibrary(terra)\n\ntarget_rast &lt;- rast(xmin = 794600, xmax = 798200,\n                    ymin = 8931800, ymax = 8935400,\n                    resolution = 150, crs = \"EPSG:32717\")\ntarget_rast\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 24, 24, 1  (nrow, ncol, nlyr)\n#&gt; resolution  : 150, 150  (x, y)\n#&gt; extent      : 794600, 798200, 8931800, 8935400  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : WGS 84 / UTM zone 17S (EPSG:32717)\n\nplot(dem)\n\n\n\nplot(target_rast)\n\n\n\n\n\n\"near\" : 셀에 가장 가까운 픽셀에서 값을 가져옴\n\n\ndem_resampl_1 &lt;- resample(dem, y = target_rast, method = \"near\")\nplot(dem_resampl_1)\n\n\n\n\n\n\"bilinear\" : 네 개의 가장 가까운 셀의 가중 평균\n\n\ndem_resampl_2 &lt;- resample(dem, y = target_rast, method = \"bilinear\")\nplot(dem_resampl_2)\n\n\n\n\n\n\"average\" : 각각의 새로운 셀이 중복되는 모든 입력 셀의 가중 평균\n\n\ndem_resampl_3 &lt;- resample(dem, y = target_rast, method = \"average\")\nplot(dem_resampl_3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n입력 래스터 데이터 세트의 범위가 관심 영역보다 클 경우 래스터 자르기(Cropping) 및 마스킹(Masking)은 입력 데이터의 공간 범위를 통합하는 데 유용함\n두 작업 모두 후속 분석 단계에 대한 객체 메모리 사용 및 관련 계산 리소스를 줄이고 래스터 데이터를 포함하는 매력적인 맵을 만들기 전에 필요한 전처리 단계임\n대상 개체와 자르기 개체는 모두 동일한 투영을 가져야 함\ncrop() : 두 번째 인수에 대한 래스터를 잘라냄\nmask() : 두 번째 인수에 전달된 개체의 경계를 벗어나는 값을 NA로 설정\n\n대부분의 경우 crop()과 mask()를 함께 사용\n\n\n\nsrtm &lt;- rast(system.file(\"raster/srtm.tif\", package = \"spDataLarge\"))\nzion &lt;- read_sf(system.file(\"vector/zion.gpkg\", package = \"spDataLarge\"))\nzion &lt;- st_transform(zion, crs(srtm)) # zion을 srtm 좌표계랑 동일하게\nplot(srtm)\nplot(vect(zion),add=T)\n\n\n\nsrtm_cropped &lt;- crop(srtm, vect(zion))\nplot(srtm_cropped)\n\n\n\nsrtm_masked &lt;- mask(srtm, vect(zion))\nplot(srtm_masked)\n\n\n\nsrtm_cropped &lt;- crop(srtm, vect(zion))\nsrtm_final &lt;- mask(srtm_cropped, vect(zion))\nplot(srtm_final)\n\n\n\n\n\nupdatevalue = 0 : 외부의 모든 픽셀이 0으로 설정\ninverse = TRUE : 경계 내에 있는 것들이 마스킹\n\n\nsrtm_update0 &lt;- mask(srtm, vect(zion), updatevalue = 0)\nplot(srtm_update0)\n\n\n\nsrtm_inv_masked &lt;- mask(srtm, vect(zion), inverse = TRUE)\nplot(srtm_inv_masked)\n\n\n\n\n\n\n\n## Original / Crop / Mask / Inverse Map\nlibrary(tmap)\nlibrary(rcartocolor)\n\nterrain_colors = carto_pal(7, \"Geyser\")\n\npz1 = tm_shape(srtm) +\n  tm_raster(palette = terrain_colors, legend.show = FALSE, style = \"cont\") +\n  tm_shape(zion) +\n  tm_borders(lwd = 2) +\n  tm_layout(main.title = \"A. Original\", inner.margins = 0)\n\npz2 = tm_shape(srtm_cropped) +\n  tm_raster(palette = terrain_colors, legend.show = FALSE, style = \"cont\") +\n  tm_shape(zion) +\n  tm_borders(lwd = 2) +\n  tm_layout(main.title = \"B. Crop\", inner.margins = 0)\n\npz3 = tm_shape(srtm_masked) +\n  tm_raster(palette = terrain_colors, legend.show = FALSE, style = \"cont\") +\n  tm_shape(zion) +\n  tm_borders(lwd = 2) +\n  tm_layout(main.title = \"C. Mask\", inner.margins = 0)\n\npz4 = tm_shape(srtm_inv_masked) +\n  tm_raster(palette = terrain_colors, legend.show = FALSE, style = \"cont\") +\n  tm_shape(zion) +\n  tm_borders(lwd = 2) +\n  tm_layout(main.title = \"D. Inverse mask\", inner.margins = 0)\n\ntmap_arrange(pz1, pz2, pz3, pz4, ncol = 4, asp = NA)\n\n\n\n\n\n\n\n\n\n특정 위치에 있는 대상 래스터와 관련된 값을 식별하여 반환\n\n\ndata(\"zion_points\", package = \"spDataLarge\")\nelevation &lt;-terra::extract(srtm, vect(zion_points))\nzion_points &lt;- cbind(zion_points, elevation)\nplot(srtm)\nplot(vect(zion),add=T)\nplot(zion_points,col=\"black\", pch = 19, cex = 0.5, add=T)\n#&gt; Warning in plot.sf(zion_points, col = \"black\", pch = 19, cex = 0.5, add = T):\n#&gt; ignoring all but the first attribute\n\n\n\n\n\nst_segmentize() : 제공된 density로 line을 따라 point를 추가\n\ndfMaxLength : 최대 점의 개수\n\nst_cast() : 추가된 point를 “POINT” 형식으로 변환\n\n\nzion_transect &lt;- cbind(c(-113.2, -112.9), c(37.45, 37.2)) %&gt;%\n  st_linestring() %&gt;%\n  st_sfc(crs = crs(srtm)) %&gt;%\n  st_sf()\nzion_transect$id &lt;- 1:nrow(zion_transect)\nzion_transect &lt;- st_segmentize(zion_transect, dfMaxLength = 250)\nzion_transect &lt;- st_cast(zion_transect, \"POINT\")\n#&gt; Warning in st_cast.sf(zion_transect, \"POINT\"): repeating attributes for all\n#&gt; sub-geometries for which they may not be constant\n\n\nzion_transect &lt;- zion_transect %&gt;%\n  group_by(id) %&gt;%\n  mutate(dist = st_distance(geometry)[, 1])\n\nzion_elev &lt;- terra::extract(srtm, vect(zion_transect))\nzion_transect &lt;- cbind(zion_transect, zion_elev)\n\n\n많은 Point들 간의 거리를 산출 : 첫번째 점들과 이후의 각각의 점들 사이의 거리 계산하기\n횡단면의 각 점에 대한 고도값을 추출하고 이 정보를 주요 객체와 결합\n\n\n\n\nlibrary(tmap)\nlibrary(grid)\nlibrary(ggplot2)\nzion_transect_line &lt;- cbind(c(-113.2, -112.9), c(37.45, 37.2)) %&gt;%\n  st_linestring() %&gt;%\n  st_sfc(crs = crs(srtm)) %&gt;%\n  st_sf()\nzion_transect_points &lt;- st_cast(zion_transect, \"POINT\")[c(1, nrow(zion_transect)), ]\nzion_transect_points$name &lt;- c(\"start\", \"end\")\nrast_poly_line &lt;- tm_shape(srtm) +\n  tm_raster(palette = terrain_colors, title = \"Elevation (m)\",\n            legend.show = TRUE, style = \"cont\") +\n  tm_shape(zion) +\n  tm_borders(lwd = 2) +\n  tm_shape(zion_transect_line) +\n  tm_lines(col = \"black\", lwd = 4) +\n  tm_shape(zion_transect_points) +\n  tm_text(\"name\", bg.color = \"white\", bg.alpha = 0.75, auto.placement = TRUE) +\n  tm_layout(legend.frame = TRUE, legend.position = c(\"right\", \"top\"))\nrast_poly_line\n\n\n\nplot_transect &lt;- ggplot(zion_transect, aes(as.numeric(dist), srtm)) +\n  geom_line() +\n  labs(x = \"Distance (m)\", y = \"Elevation (m a.s.l.)\") +\n  theme_bw() +\n  # facet_wrap(~id) +\n  theme(plot.margin = unit(c(5.5, 15.5, 5.5, 5.5), \"pt\"))\nplot_transect\n\n\n\n\n## grid 그리기\ngrid.newpage() #This function erases the current device or moves to a new page.\npushViewport(viewport(layout = grid.layout(2, 2, heights = unit(c(0.25, 5), \"null\"))))\ngrid.text(\"A. Line extraction\", vp = viewport(layout.pos.row = 1, layout.pos.col = 1))\ngrid.text(\"B. Elevation along the line\", vp = viewport(layout.pos.row = 1, layout.pos.col = 2))\nprint(rast_poly_line, vp = viewport(layout.pos.row = 2, layout.pos.col = 1))\nprint(plot_transect, vp = viewport(layout.pos.row = 2, layout.pos.col = 2))\n\n\n\n\n\nzion_srtm_values &lt;- terra::extract(x = srtm, y = vect(zion))\ngroup_by(zion_srtm_values, ID) %&gt;%\n  summarize(across(srtm, list(min = min, mean = mean, max = max)))\n#&gt; # A tibble: 1 × 4\n#&gt;      ID srtm_min srtm_mean srtm_max\n#&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n#&gt; 1     1     1122     1818.     2661\n\n\n단일 영역을 특성화하거나 여러 영역을 비교하기 위해 폴리곤 당 래스터 값에 대한 요약 통계 생성\n\n\n\n\n\n\n벡터 객체를 래스터 객체의 표현으로 변환\n\n\ncycle_hire_osm &lt;- spData::cycle_hire_osm\ncycle_hire_osm_projected &lt;- st_transform(cycle_hire_osm, \"EPSG:27700\")\nraster_template &lt;- rast(ext(cycle_hire_osm_projected), resolution = 1000,\n                        crs = st_crs(cycle_hire_osm_projected)$wkt) # ext : 경계값\nch_raster1 &lt;- rasterize(vect(cycle_hire_osm_projected), raster_template,\n                        field = 1)\nch_raster2 &lt;- rasterize(vect(cycle_hire_osm_projected), raster_template,\n                        fun = \"length\")\nch_raster3 &lt;- rasterize(vect(cycle_hire_osm_projected), raster_template,\n                        field = \"capacity\", fun = sum)\n\n\n\n\n\n\n\n폴리곤 객체를 여러 줄 문자열로 casting한 후 0.5도의 해상도로 탬플릿 래스터 생성\n\ntouches = TRUE : 경계에 해당되는 래스터만 색칠(FALSE이면 경계 내부까지)\n\n\n\ncalifornia &lt;- dplyr::filter(us_states, NAME == \"California\")\ncalifornia_borders &lt;- st_cast(california, \"MULTILINESTRING\")\nraster_template2 &lt;- rast(ext(california),\n                         resolution = 0.5,\n                         crs = st_crs(california)$wkt)\ncalifornia_raster1 &lt;-\n  rasterize(vect(california_borders), raster_template2,\n            touches = TRUE) # touches = TRUE : 경계값만\ncalifornia_raster2 &lt;-\n  rasterize(vect(california), raster_template2)\n# with `touches = FALSE` by default, which selects only cell\n\n\n\n\n\n\n\n\n\n\n공간적으로 연속적인 래스터 데이터를 점, 선 또는 다각형과 같은 공간적으로 분리된 벡터 데이터로 변환\n벡터화의 가장 간단한 형태는 래스터 셀의 중심부를 점으로 변환하는 것\nas.points() : 모든 raster grid 셀에 대해 중심점으로 반환\n\n\nelev &lt;- rast(system.file(\"raster/elev.tif\", package = \"spData\"))\nelev_point &lt;- as.points(elev) %&gt;%\n  st_as_sf()\nplot(elev)\n\n\n\nplot(elev_point)\n\n\n\n\n\ncontour() : 선에 해당하는 수치 표현\n등고선의 생성 : 공간 벡터화의 또 다른 일반적인 유형은 연속적인 높이 또는 온도(등온선)의 선을 나타내는 등고선 생성\n\n\ndem = rast(system.file(\"raster/dem.tif\", package = \"spDataLarge\"))\ncl = as.contour(dem)\nplot(dem, axes = FALSE)\nplot(cl, add = TRUE)\n\n\n\nplot(dem, axes = FALSE)\ncontour(dem, add = T) # 수치까지 표현\n\n\n\n\n\nas.polygons() : 래스터를 다각형으로 변환하는 것\n\n\ngrain &lt;- rast(system.file(\"raster/grain.tif\", package = \"spData\"))\ngrain_poly &lt;- as.polygons(grain) %&gt;%\n  st_as_sf()\nplot(grain)\n\n\n\nplot(grain_poly)\n\n\n\n\n\n\n\n\n\n\n\nCRS를 설명할 수 있는 여러가지 방법\n\n단순하지만 “lon/lat 좌표”와 같이 모호할 수 있는 문장\n\n\n공식화되었지만 지금은 구식인 proj4 strings\n\n\nproj=lonlat +ellps=WGS84 +datum=WGS84 +no_defs\n\n\nEPSG:4326과 같이 식별되는 authority:code 텍스트 문자열\n\n-&gt; 3번째 방법이 가장 정확(짧고 기억하기 쉬우며 온라인에서 찾기 쉬움)\n\n\nst_crs(\"EPSG:4326\")\n\n\n\n\n\n벡터 지리 데이터 객체에서 CRS를 가져오고 설정\n\n\nvector_filepath &lt;- system.file(\"shapes/world.gpkg\", package = \"spData\")\nnew_vector &lt;- read_sf(vector_filepath)\n\nst_crs(new_vector)\n#&gt; Coordinate Reference System:\n#&gt;   User input: WGS 84 \n#&gt;   wkt:\n#&gt; GEOGCRS[\"WGS 84\",\n#&gt;     ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n#&gt;         MEMBER[\"World Geodetic System 1984 (Transit)\"],\n#&gt;         MEMBER[\"World Geodetic System 1984 (G730)\"],\n#&gt;         MEMBER[\"World Geodetic System 1984 (G873)\"],\n#&gt;         MEMBER[\"World Geodetic System 1984 (G1150)\"],\n#&gt;         MEMBER[\"World Geodetic System 1984 (G1674)\"],\n#&gt;         MEMBER[\"World Geodetic System 1984 (G1762)\"],\n#&gt;         MEMBER[\"World Geodetic System 1984 (G2139)\"],\n#&gt;         ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n#&gt;             LENGTHUNIT[\"metre\",1]],\n#&gt;         ENSEMBLEACCURACY[2.0]],\n#&gt;     PRIMEM[\"Greenwich\",0,\n#&gt;         ANGLEUNIT[\"degree\",0.0174532925199433]],\n#&gt;     CS[ellipsoidal,2],\n#&gt;         AXIS[\"geodetic latitude (Lat)\",north,\n#&gt;             ORDER[1],\n#&gt;             ANGLEUNIT[\"degree\",0.0174532925199433]],\n#&gt;         AXIS[\"geodetic longitude (Lon)\",east,\n#&gt;             ORDER[2],\n#&gt;             ANGLEUNIT[\"degree\",0.0174532925199433]],\n#&gt;     USAGE[\n#&gt;         SCOPE[\"Horizontal component of 3D system.\"],\n#&gt;         AREA[\"World.\"],\n#&gt;         BBOX[-90,-180,90,180]],\n#&gt;     ID[\"EPSG\",4326]]\n\n\nUser input : CRS식별자 (WGS 84, 입력 파일에서 가져온 EPSG:4326의 동의어)\nwkt : CRS에 대한 모든 관련 정보와 함께 전체 WKT 문자열을 포함\ninput 요소는 유연함(AUTHORITY:CODE (ex. EPSG:4326), CRS 이름(ex. WGS84), proj4string 정의)\nwkt 요소는 객체를 파일에 저장하거나 좌표 연산을 수행할 때 사용되는 WKT 표현을 저장\nnew_vector 객체가 WGS84 타원체를 가지며, 그리니치 프라임 자오선을 사용하고, 위도와 경도의 축 순서를 사용하는 것을 볼 수 있음\n이 경우 이 CRS 사용에 적합한 영역을 설명하는 USAGE와 CRS 식별자 EPSG:4326을 가리키는 ID와 같은 추가 요소도 있음\n\n\nst_crs(new_vector)$IsGeographic\n#&gt; [1] TRUE\nst_crs(new_vector)$units_gdal\n#&gt; [1] \"degree\"\nst_crs(new_vector)$srid\n#&gt; [1] \"EPSG:4326\"\nst_crs(new_vector)$proj4string\n#&gt; [1] \"+proj=longlat +datum=WGS84 +no_defs\"\n\n\nst_crs 함수에는 유용한 기능이 하나 있는데, 사용된 CRS에 대한 추가 정보를 검색할 수 있음.\n\nst_crs(new_vector)$IsGeographic : CRS가 지리적 상태인지 확인\nst_crs(new_vector)$units_gdal : CRS 단위\nst_crs(new_vector)$srid : 해당 ‘SRID’ 식별자를 추출(사용 가능한 경우)\nst_crs(new_vector)$proj4string : proj4string 표현을 추출\n\nst_set_crs() : CRS가 없거나 잘못 설정되어 있는 경우 CRS 설정\n\n\nnew_vector &lt;- st_set_crs(new_vector, \"EPSG:4326\") # set CRS\n\n\nterra::crs() : 래스터 객체에 대한 CRS를 설정\n하지만, crs() 함수를 사용하면 좌표계는 바뀌지만 값이 바뀌지는 않음.\n\n\nraster_filepath &lt;- system.file(\"raster/srtm.tif\", package = \"spDataLarge\")\nmy_rast &lt;- rast(raster_filepath)\ncrs(my_rast)\n#&gt; [1] \"GEOGCRS[\\\"WGS 84\\\",\\n    ENSEMBLE[\\\"World Geodetic System 1984 ensemble\\\",\\n        MEMBER[\\\"World Geodetic System 1984 (Transit)\\\"],\\n        MEMBER[\\\"World Geodetic System 1984 (G730)\\\"],\\n        MEMBER[\\\"World Geodetic System 1984 (G873)\\\"],\\n        MEMBER[\\\"World Geodetic System 1984 (G1150)\\\"],\\n        MEMBER[\\\"World Geodetic System 1984 (G1674)\\\"],\\n        MEMBER[\\\"World Geodetic System 1984 (G1762)\\\"],\\n        MEMBER[\\\"World Geodetic System 1984 (G2139)\\\"],\\n        ELLIPSOID[\\\"WGS 84\\\",6378137,298.257223563,\\n            LENGTHUNIT[\\\"metre\\\",1]],\\n        ENSEMBLEACCURACY[2.0]],\\n    PRIMEM[\\\"Greenwich\\\",0,\\n        ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n    CS[ellipsoidal,2],\\n        AXIS[\\\"geodetic latitude (Lat)\\\",north,\\n            ORDER[1],\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n        AXIS[\\\"geodetic longitude (Lon)\\\",east,\\n            ORDER[2],\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n    USAGE[\\n        SCOPE[\\\"Horizontal component of 3D system.\\\"],\\n        AREA[\\\"World.\\\"],\\n        BBOX[-90,-180,90,180]],\\n    ID[\\\"EPSG\\\",4326]]\"\ncat(crs(my_rast)) # get CRS\n#&gt; GEOGCRS[\"WGS 84\",\n#&gt;     ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n#&gt;         MEMBER[\"World Geodetic System 1984 (Transit)\"],\n#&gt;         MEMBER[\"World Geodetic System 1984 (G730)\"],\n#&gt;         MEMBER[\"World Geodetic System 1984 (G873)\"],\n#&gt;         MEMBER[\"World Geodetic System 1984 (G1150)\"],\n#&gt;         MEMBER[\"World Geodetic System 1984 (G1674)\"],\n#&gt;         MEMBER[\"World Geodetic System 1984 (G1762)\"],\n#&gt;         MEMBER[\"World Geodetic System 1984 (G2139)\"],\n#&gt;         ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n#&gt;             LENGTHUNIT[\"metre\",1]],\n#&gt;         ENSEMBLEACCURACY[2.0]],\n#&gt;     PRIMEM[\"Greenwich\",0,\n#&gt;         ANGLEUNIT[\"degree\",0.0174532925199433]],\n#&gt;     CS[ellipsoidal,2],\n#&gt;         AXIS[\"geodetic latitude (Lat)\",north,\n#&gt;             ORDER[1],\n#&gt;             ANGLEUNIT[\"degree\",0.0174532925199433]],\n#&gt;         AXIS[\"geodetic longitude (Lon)\",east,\n#&gt;             ORDER[2],\n#&gt;             ANGLEUNIT[\"degree\",0.0174532925199433]],\n#&gt;     USAGE[\n#&gt;         SCOPE[\"Horizontal component of 3D system.\"],\n#&gt;         AREA[\"World.\"],\n#&gt;         BBOX[-90,-180,90,180]],\n#&gt;     ID[\"EPSG\",4326]]\ncrs(my_rast) &lt;- \"EPSG:26912\" # set CRS\n\nlondon &lt;- data.frame(lon = -0.1, lat = 51.5) %&gt;%\n  st_as_sf(coords = c(\"lon\", \"lat\"))\nst_is_longlat(london)\n#&gt; [1] NA\n\nlondon_geo &lt;- st_set_crs(london, \"EPSG:4326\")\nst_is_longlat(london_geo)\n#&gt; [1] TRUE\n\n\n\n\n\n\nsf는 지리 벡터 데이터에 대한 클래스와 지리 계산을 위한 중요한 하위 수준 라이브러리에 대한 일관된 명령줄 인터페이스 제공\n\n구면 geometry 연산을 sf:sf_use_sf(FALSE) 명령으로 끄면 버퍼는 미터와 같은 적절한 거리 단위를 대체하지 못하는 위도와 경도의 단위를 사용하기 때문에 쓸모없는 출력이 됨.\n공간 및 기하학적 연산을 수행하는 것은 경우에 따라 거의 또는 전혀 차이가 없음. (ex: 공간 부분 집합) 그러나 버퍼링과 같은 거리가 포함된 연산의 경우 (구면 지오메트리 엔진을 사용하지 않고) 좋은 결과를 보장하는 유일한 방법은 데이터의 투영된 복사본을 만들고 그에 대한 연산을 실행하는 것임.\n그 결과 런던과 동일하지만 미터 단위의 EPSG 코드를 가진 적절한 CRS(영국 국가 그리드)에 재투사된 새로운 물체가 되었음.\nCRS의 단위가 (도가 아닌) 미터라는 사실은 이것이 투영된 CRS임을 알려줌\n\n\n\nlondon_buff_no_crs &lt;-\n  st_buffer(london, dist = 1) # incorrect: no CRS\nlondon_buff_no_crs\n#&gt; Simple feature collection with 1 feature and 0 fields\n#&gt; Geometry type: POLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: -1.1 ymin: 50.5 xmax: 0.9 ymax: 52.5\n#&gt; CRS:           NA\n#&gt;                         geometry\n#&gt; 1 POLYGON ((0.9 51.5, 0.89862...\nlondon_buff_s2 &lt;-\n  st_buffer(london_geo, dist = 1e5) # silent use of s2 (1e5 : 10^5m = 100,000m)\nlondon_buff_s2\n#&gt; Simple feature collection with 1 feature and 0 fields\n#&gt; Geometry type: POLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: -1.552818 ymin: 50.59609 xmax: 1.356603 ymax: 52.40393\n#&gt; Geodetic CRS:  WGS 84\n#&gt;                         geometry\n#&gt; 1 POLYGON ((-0.3523255 52.392...\nlondon_buff_s2_100_cells &lt;-\n  st_buffer(london_geo, dist = 1e5, max_cells = 100)\nlondon_buff_s2_100_cells\n#&gt; Simple feature collection with 1 feature and 0 fields\n#&gt; Geometry type: POLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: -1.718303 ymin: 50.51128 xmax: 1.524546 ymax: 52.53186\n#&gt; Geodetic CRS:  WGS 84\n#&gt;                         geometry\n#&gt; 1 POLYGON ((-0.3908656 52.531...\n\nsf::sf_use_s2(FALSE)\n#&gt; Spherical geometry (s2) switched off\n\nlondon_buff_lonlat &lt;-\n  st_buffer(london_geo, dist = 1) # incorrect result\n#&gt; Warning in st_buffer.sfc(st_geometry(x), dist, nQuadSegs, endCapStyle =\n#&gt; endCapStyle, : st_buffer does not correctly buffer longitude/latitude data\n#&gt; dist is assumed to be in decimal degrees (arc_degrees).\n\nsf::sf_use_s2(TRUE)\n#&gt; Spherical geometry (s2) switched on\n\nlondon_proj &lt;- data.frame(x = 530000, y = 180000) %&gt;%\n  st_as_sf(coords = 1:2, crs = \"EPSG:27700\")\n\nst_crs(london_proj)\n#&gt; Coordinate Reference System:\n#&gt;   User input: EPSG:27700 \n#&gt;   wkt:\n#&gt; PROJCRS[\"OSGB36 / British National Grid\",\n#&gt;     BASEGEOGCRS[\"OSGB36\",\n#&gt;         DATUM[\"Ordnance Survey of Great Britain 1936\",\n#&gt;             ELLIPSOID[\"Airy 1830\",6377563.396,299.3249646,\n#&gt;                 LENGTHUNIT[\"metre\",1]]],\n#&gt;         PRIMEM[\"Greenwich\",0,\n#&gt;             ANGLEUNIT[\"degree\",0.0174532925199433]],\n#&gt;         ID[\"EPSG\",4277]],\n#&gt;     CONVERSION[\"British National Grid\",\n#&gt;         METHOD[\"Transverse Mercator\",\n#&gt;             ID[\"EPSG\",9807]],\n#&gt;         PARAMETER[\"Latitude of natural origin\",49,\n#&gt;             ANGLEUNIT[\"degree\",0.0174532925199433],\n#&gt;             ID[\"EPSG\",8801]],\n#&gt;         PARAMETER[\"Longitude of natural origin\",-2,\n#&gt;             ANGLEUNIT[\"degree\",0.0174532925199433],\n#&gt;             ID[\"EPSG\",8802]],\n#&gt;         PARAMETER[\"Scale factor at natural origin\",0.9996012717,\n#&gt;             SCALEUNIT[\"unity\",1],\n#&gt;             ID[\"EPSG\",8805]],\n#&gt;         PARAMETER[\"False easting\",400000,\n#&gt;             LENGTHUNIT[\"metre\",1],\n#&gt;             ID[\"EPSG\",8806]],\n#&gt;         PARAMETER[\"False northing\",-100000,\n#&gt;             LENGTHUNIT[\"metre\",1],\n#&gt;             ID[\"EPSG\",8807]]],\n#&gt;     CS[Cartesian,2],\n#&gt;         AXIS[\"(E)\",east,\n#&gt;             ORDER[1],\n#&gt;             LENGTHUNIT[\"metre\",1]],\n#&gt;         AXIS[\"(N)\",north,\n#&gt;             ORDER[2],\n#&gt;             LENGTHUNIT[\"metre\",1]],\n#&gt;     USAGE[\n#&gt;         SCOPE[\"Engineering survey, topographic mapping.\"],\n#&gt;         AREA[\"United Kingdom (UK) - offshore to boundary of UKCS within 49°45'N to 61°N and 9°W to 2°E; onshore Great Britain (England, Wales and Scotland). Isle of Man onshore.\"],\n#&gt;         BBOX[49.75,-9.01,61.01,2.01]],\n#&gt;     ID[\"EPSG\",27700]]\n\n\n\n\n\n\n\ndownload.file(url = \"https://irma.nps.gov/DataStore/DownloadFile/666527\",\n              destfile = \"nps_boundary.zip\")\nunzip(zipfile = \"nps_boundary.zip\")\nusa_parks = read_sf(dsn = \"nps_boundary.shp\")\n\n\n해외여서 접속이 막혀있음\n공공데이터포털에서 shape 파일 다운받아 불러오기\n\n공공데이터포털에서 데이터를 작업 공간에 다운 받기\n\n\n\n# unzip(zipfile=\"C:/202201/GIS/data/부산광역시_교통정보서비스센터 보유 ITS CCTV 현황(SHP)_20210601.zip\")\nbusan &lt;- read_sf(dsn = \"./Spatial_Information_Analysis/tl_tracffic_cctv_info.shp\", options = \"ENCODING:CP949\")\nbusan\n#&gt; Simple feature collection with 199 features and 5 fields\n#&gt; Geometry type: POINT\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: 128.8334 ymin: 35.04753 xmax: 129.24 ymax: 35.35762\n#&gt; Geodetic CRS:  WGS 84\n#&gt; # A tibble: 199 × 6\n#&gt;    name                   id url             lng   lat            geometry\n#&gt;    &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt; &lt;dbl&gt;         &lt;POINT [°]&gt;\n#&gt;  1 센텀중                 79 https://its.…  129.  35.2  (129.124 35.17363)\n#&gt;  2 수영1호교사거리        53 https://its.…  129.  35.2 (129.1256 35.16539)\n#&gt;  3 수영2호교입구(민락)    54 https://its.…  129.  35.2 (129.1281 35.15991)\n#&gt;  4 하마정교차로           47 https://its.…  129.  35.2 (129.0678 35.17477)\n#&gt;  5 송공(광장)             14 https://its.…  129.  35.2 (129.0688 35.16923)\n#&gt;  6 삼전교차로             13 https://its.…  129.  35.2 (129.0638 35.16385)\n#&gt;  7 연지삼거리             80 https://its.…  129.  35.2  (129.0553 35.1708)\n#&gt;  8 부암교차로             81 https://its.…  129.  35.2 (129.0504 35.16848)\n#&gt;  9 동천삼거리             46 https://its.…  129.  35.1 (129.0667 35.13002)\n#&gt; 10 진양사거리             82 https://its.…  129.  35.2   (129.05 35.16164)\n#&gt; # ℹ 189 more rows\nplot(busan)\n\n\n\n\n# unzip(zipfile = \"C:/202201/GIS/data/CTPRVN_20220324.zip\")\nsido &lt;- read_sf(dsn = \"./Spatial_Information_Analysis/ctp_rvn.shp\", options = \"ENCODING:CP949\")\nsido\n#&gt; Simple feature collection with 17 features and 3 fields\n#&gt; Geometry type: MULTIPOLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: 746110.3 ymin: 1458754 xmax: 1387950 ymax: 2068444\n#&gt; Projected CRS: PCS_ITRF2000_TM\n#&gt; # A tibble: 17 × 4\n#&gt;    CTPRVN_CD CTP_ENG_NM        CTP_KOR_NM                               geometry\n#&gt;    &lt;chr&gt;     &lt;chr&gt;             &lt;chr&gt;                          &lt;MULTIPOLYGON [m]&gt;\n#&gt;  1 11        Seoul             서울특별시     (((966987.2 1941111, 966987.1 194…\n#&gt;  2 26        Busan             부산광역시     (((1146778 1679624, 1146922 16794…\n#&gt;  3 27        Daegu             대구광역시     (((1087860 1760097, 1087860 17600…\n#&gt;  4 28        Incheon           인천광역시     (((897904 1961082, 897886.1 19610…\n#&gt;  5 29        Gwangju           광주광역시     (((932712.7 1696169, 932781.7 169…\n#&gt;  6 30        Daejeon           대전광역시     (((990946.7 1832389, 991057.7 183…\n#&gt;  7 31        Ulsan             울산광역시     (((1167950 1710285, 1167950 17102…\n#&gt;  8 36        Sejong-si         세종특별자치시 (((971235.9 1844387, 971234.1 184…\n#&gt;  9 41        Gyeonggi-do       경기도         (((931607.5 1894480, 931653.8 189…\n#&gt; 10 42        Gangwon-do        강원도         (((1163759 1909653, 1163760 19096…\n#&gt; 11 43        Chungcheongbuk-do 충청북도       (((1042689 1917663, 1042731 19176…\n#&gt; 12 44        Chungcheongnam-do 충청남도       (((862386.1 1805283, 862296.9 180…\n#&gt; 13 45        Jeollabuk-do      전라북도       (((902676.5 1717492, 902679.8 171…\n#&gt; 14 46        Jellanam-do       전라남도       (((946598.4 1555246, 946595.7 155…\n#&gt; 15 47        Gyeongsangbuk-do  경상북도       (((1179681 1750939, 1179685 17509…\n#&gt; 16 48        Gyeongsangnam-do  경상남도       (((1053643 1612344, 1053663 16122…\n#&gt; 17 50        Jeju-do           제주특별자치도 (((885004.6 1458756, 884996.7 145…\nplot(sido)\n\n\n\n\n\n\n\n\nrnaturalearth 패키지의 ne_countries() 기능을 사용하면 국가 경계 기능을 사용할 수 있음\nosmdata 패키지는 속도가 제한되어 있다는 단점이 있음\n\n이러한 한계를 극복하기 위해 osmextract 패키지가 개발\n\n\n\nlibrary(rnaturalearth)\n#&gt; Support for Spatial objects (`sp`) will be deprecated in {rnaturalearth} and will be removed in a future release of the package. Please use `sf` objects with {rnaturalearth}. For example: `ne_download(returnclass = 'sf')`\nusa &lt;- ne_countries(country = \"United States of America\") # United States borders\n#&gt; Warning: The `returnclass` argument of `ne_download()` sp as of rnaturalearth 1.0.0.\n#&gt; ℹ Please use `sf` objects with {rnaturalearth}, support for Spatial objects\n#&gt;   (sp) will be removed in a future release of the package.\nclass(usa)\n#&gt; [1] \"SpatialPolygonsDataFrame\"\n#&gt; attr(,\"package\")\n#&gt; [1] \"sp\"\n\nusa_sf &lt;- st_as_sf(usa)\nplot(usa_sf[1])\n\n\n\nkorea &lt;- ne_countries(country = \"South Korea\") # United States borders\nclass(korea)\n#&gt; [1] \"SpatialPolygonsDataFrame\"\n#&gt; attr(,\"package\")\n#&gt; [1] \"sp\"\nkorea_sf &lt;- st_as_sf(korea)\nplot(korea_sf[1])\n\n\n\n\n\n\n\n\nhttps://r.geocompx.org/read-write.html#file-formats\n\n\n\n\n\ngpkg 형식 불러오기\n\n\nf &lt;- system.file(\"shapes/world.gpkg\", package = \"spData\")\nworld = read_sf(f, quiet = TRUE)\ntanzania = read_sf(f, query = 'SELECT * FROM world WHERE name_long = \"Tanzania\"')\ntanzania_buf = st_buffer(tanzania, 50000)\ntanzania_buf_geom = st_geometry(tanzania_buf)\ntanzania_buf_wkt = st_as_text(tanzania_buf_geom)\ntanzania_neigh = read_sf(f, wkt_filter = tanzania_buf_wkt)\n\n\ncsv 형식 불러오기\n\n\ncycle_hire_txt = system.file(\"misc/cycle_hire_xy.csv\", package = \"spData\")\ncycle_hire_xy = read_sf(cycle_hire_txt,\n                        options = c(\"X_POSSIBLE_NAMES=X\", \"Y_POSSIBLE_NAMES=Y\"))\n\n\nWell-known text(WKT), Well-known binary(WKB), and the GeoJSON formats\n\n\nworld_txt = system.file(\"misc/world_wkt.csv\", package = \"spData\")\nworld_wkt = read_sf(world_txt, options = \"GEOM_POSSIBLE_NAMES=WKT\")\n# the same as\nworld_wkt2 = st_read(world_txt, options = \"GEOM_POSSIBLE_NAMES=WKT\",\n                     quiet = TRUE, stringsAsFactors = FALSE, as_tibble = TRUE)\n\n\nKML file stores geographic information in XML format\n\n\nu = \"https://developers.google.com/kml/documentation/KML_Samples.kml\"\ndownload.file(u, \"./Spatial_Information_Analysis/KML_Samples.kml\")\nst_layers(\"./Spatial_Information_Analysis/KML_Samples.kml\")\n#&gt; Driver: KML \n#&gt; Available layers:\n#&gt;              layer_name  geometry_type features fields crs_name\n#&gt; 1            Placemarks       3D Point        3      2   WGS 84\n#&gt; 2      Highlighted Icon       3D Point        1      2   WGS 84\n#&gt; 3                 Paths 3D Line String        6      2   WGS 84\n#&gt; 4         Google Campus     3D Polygon        4      2   WGS 84\n#&gt; 5      Extruded Polygon     3D Polygon        1      2   WGS 84\n#&gt; 6 Absolute and Relative     3D Polygon        4      2   WGS 84\nkml = read_sf(\"./Spatial_Information_Analysis/KML_Samples.kml\", layer = \"Placemarks\")\n\n\n\n\n\n\n\n\n정적인 지도는 지리 계산의 가장 일반적인 시각적 출력 유형\nplot() 또는 tmap_mode(plot)\n\n\n\n\n# Add fill layer to nz shape\ntm_shape(nz) +\n  tm_fill()\n# Add border layer to nz shape\ntm_shape(nz) +\n  tm_borders()\n# Add fill and border layers to nz shape\ntm_shape(nz) +\n  tm_fill() +\n  tm_borders()\n\n\n\n\n\n\n\n\n\n\nmap_nz &lt;- tm_shape(nz) + tm_polygons()\nclass(map_nz)\n#&gt; [1] \"tmap\"\nmap_nz\n\n\n\n\nmap_nz1 &lt;- map_nz +\n  tm_shape(nz_elev) + tm_raster(alpha = 0.7)\n\nnz_water &lt;- st_union(nz) %&gt;% st_buffer(22200) %&gt;%\n  st_cast(to = \"LINESTRING\")\n\nmap_nz2 &lt;- map_nz1 +\n  tm_shape(nz_water) + tm_lines()\n\nmap_nz3 &lt;- map_nz2 +\n  tm_shape(nz_height) + tm_dots()\n\ntmap_arrange(map_nz1, map_nz2, map_nz3)\n\n\n\n\n\nalpha : 레이어를 반투명하게 만들기 위해 설정\n\n\n\n\n\nma1 &lt;- tm_shape(nz) + tm_fill(col = \"red\")\nma2 &lt;- tm_shape(nz) + tm_fill(col = \"red\", alpha = 0.3)\nma3 &lt;- tm_shape(nz) + tm_borders(col = \"blue\")\nma4 &lt;- tm_shape(nz) + tm_borders(lwd = 3)\nma5 &lt;- tm_shape(nz) + tm_borders(lty = 2)\nma6 &lt;- tm_shape(nz) + tm_fill(col = \"red\", alpha = 0.3) +\n  tm_borders(col = \"blue\", lwd = 3, lty = 2)\n\ntmap_arrange(ma1, ma2, ma3, ma4, ma5, ma6)\n\n\n\n\n\ntm_fill()과 tm_bubbles()에서 레이어는 기본적으로 회색으로 채워지고 tm_lines()은 검은선으로 그려짐\ntmap의 인수는 숫자 벡터를 허용하지 않음\n\n\nplot(st_geometry(nz), col = nz$Land_area) # works\ntm_shape(nz) + tm_fill(col = nz$Land_area) # fails\n#&gt; Error: Fill argument neither colors nor valid variable name(s)\ntm_shape(nz) + tm_fill(col = \"Land_area\")\n\n\n\n\n\n\n\n범례의 제목 설정\n\n\nlegend_title &lt;- expression(\"Area (km\"^2*\")\")\nmap_nza &lt;- tm_shape(nz) +\n  tm_fill(col = \"Land_area\", title = legend_title) + tm_borders()\nmap_nza\n\n\n\n\n\n\n\n\nbreaks : 색상의 표현 값 범위를 수동으로 설정\nn : 숫자 변수가 범주화되는 Bin의 수 설정\npalette : 색 구성표를 정의 (ex. BuGn)\n\n\ntm1 &lt;- tm_shape(nz) + tm_polygons(col = \"Median_income\")\nbreaks = c(0, 3, 4, 5) * 10000\ntm2 &lt;- tm_shape(nz) + tm_polygons(col = \"Median_income\", breaks = breaks)\ntm3 &lt;- tm_shape(nz) + tm_polygons(col = \"Median_income\", n = 10)\ntm4 &lt;- tm_shape(nz) + tm_polygons(col = \"Median_income\", palette = \"BuGn\")\n\ntmap_arrange(tm1, tm2, tm3, tm4)\n\n\n\n\n\ntm_shape(nz) + tm_polygons(col = \"Median_income\", style = \"pretty\")\ntm_shape(nz) + tm_polygons(col = \"Median_income\", style = \"equal\")\ntm_shape(nz) + tm_polygons(col = \"Median_income\", style = \"quantile\")\ntm_shape(nz) + tm_polygons(col = \"Median_income\", style = \"jenks\")\ntm_shape(nz) + tm_polygons(col = \"Median_income\", style = \"cont\")\ntm_shape(nz) + tm_polygons(col = \"Median_income\", style = \"cat\")\n\n\n\n\n\n\n\nstyle = \"pretty\" : 기본 설정은 가능한 경우 정수로 반올림하고 간격을 균등하게 유지\nstyle = \"equal\" : 입력 값을 동일한 범위의 빈으로 나누고 균일한 분포의 변수에 적합(결과 맵이 색상 다양성이 거의 없을 수 있으므로 분포가 치우친 변수에는 권장하지 않음)\nstyle = \"quantile\" : 동일한 수의 관찰이 각 범주에 포함되도록 함(빈 범위가 크게 다를 수 있다는 잠재적인 단점이 있음).\nstyle = \"jenks\" : 데이터에서 유사한 값의 그룹을 식별하고 범주 간의 차이를 최대화\nstyle = \"cont\" : 연속 색상 필드에 많은 색상을 표시하고 연속 래스터에 특히 적합\nstyle = \"cat\" : 범주 값을 나타내도록 설계되었으며 각 범주가 고유한 색상을 받도록 함\n\n\ntm_p1 &lt;- tm_shape(nz) + tm_polygons(\"Population\", palette = \"Blues\")\ntm_p2 &lt;- tm_shape(nz) + tm_polygons(\"Population\", palette = \"YlOrBr\")\n\ntmap_arrange(tm_p1, tm_p2)\n\n\n\n\n\n순차 팔레트는 단일(ex. Blues : 밝은 파란색에서 진한 파란색으로 이동) 또는 다중 색상/색조(ex. YlOrBr : 주황색을 통해 밝은 노란색에서 갈색으로 그라데이션)\n\n\n\n\n\nmap_nz +\n  tm_compass(type = \"8star\", position = c(\"left\", \"top\")) +\n  tm_scale_bar(breaks = c(0, 100, 200), text.size = 1)\n\n\n\n\ntm_l1 &lt;- map_nz + tm_layout(title = \"New Zealand\")\ntm_l2 &lt;- map_nz + tm_layout(scale = 5)\ntm_l3 &lt;- map_nz + tm_layout(bg.color = \"lightblue\")\ntm_l4 &lt;- map_nz + tm_layout(frame = FALSE)\n\ntmap_arrange(tm_l1, tm_l2, tm_l3, tm_l4)\n\n\n\n\n\ntm_layout()의 다양한 옵션\n\nframe.lwd : 프레임 너비\nframe.double.line : 이중선 허용 옵션\nouter.margin, inner.margin : 여백 설정\nfontface, fontfamily : 글꼴 설정\nlegend.show : 범례 표시 여부\nlegend.position : 범례 위치 변경\n\n\n\n\n\n\n\n\ntm_s1 &lt;- map_nza + tm_style(\"bw\")\ntm_s2 &lt;- map_nza + tm_style(\"classic\")\ntm_s3 &lt;- map_nza + tm_style(\"cobalt\")\ntm_s4 &lt;- map_nza + tm_style(\"col_blind\")\n\ntmap_arrange(tm_s1, tm_s2, tm_s3, tm_s4)\n\n\n\n\n\n\n\n\nurb_1970_2030 &lt;- urban_agglomerations %&gt;%\n  filter(year %in% c(1970, 1990, 2010, 2030))\ntm_shape(world) +\n  tm_polygons() +\n  tm_shape(urb_1970_2030) +\n  tm_symbols(col = \"black\", border.col = \"white\", size = \"population_millions\") +\n  tm_facets(by = \"year\", nrow = 2, free.coords = TRUE)\n\n\n\n#free.coords : 지도에 자체 경계 상자가 있는지 여부를 지정\n\n\n\n\n\nnz_region &lt;- st_bbox(c(xmin = 1340000, xmax = 1450000,\n                       ymin = 5130000, ymax = 5210000),\n                     crs = st_crs(nz_height)) %&gt;% st_as_sfc()\n\nnz_height_map &lt;- tm_shape(nz_elev, bbox = nz_region) +\n  tm_raster(style = \"cont\", palette = \"YlGn\", legend.show = TRUE) +\n  tm_shape(nz_height) + tm_symbols(shape = 2, col = \"red\", size = 1) +\n  tm_scale_bar(position = c(\"left\", \"bottom\"))\n\nnz_map &lt;- tm_shape(nz) + tm_polygons() +\n  tm_shape(nz_height) + tm_symbols(shape = 2, col = \"red\", size = 0.1) +\n  tm_shape(nz_region) + tm_borders(lwd = 3)\n\nlibrary(grid)\nnz_height_map\nprint(nz_map, vp = viewport(0.8, 0.27, width = 0.5, height = 0.5))\n\n\n\n\n\nviewport() : 두개의 맵을 결합\n\n\n\n\n\n\nurb_anim &lt;- tm_shape(world) + tm_polygons() +\n  tm_shape(urban_agglomerations) + tm_dots(size = \"population_millions\") +\n  tm_facets(along = \"year\", free.coords = FALSE)\n\ntmap_animation(urb_anim, filename = \"./Spatial_Information_Analysis/urb_anim.gif\", delay = 25)\n#&gt; Creating frames\n#&gt; =========\n#&gt; ====\n#&gt; =====\n#&gt; ====\n#&gt; =====\n#&gt; ====\n#&gt; =====\n#&gt; ====\n#&gt; ====\n#&gt; =====\n#&gt; ====\n#&gt; =====\n#&gt; ====\n#&gt; =====\n#&gt; ====\n#&gt; =====\n#&gt; ====\n#&gt; \n#&gt; Creating animation\n#&gt; Animation saved to D:\\Study-Blog\\Spatial_Information_Analysis\\urb_anim.gif\n\n\nby = year대신 along = year을 사용\nfree.coords = FALSE : 각 맵 반복에 대한 맵 범위 유지\ntmap_animation()을 사용하여 .gif로 저장\n\n\n\n\n\n대화형 지도는 데이터 세트를 새로운 차원으로 끌어올릴 수 있음\n지도를 기울이고 회전하는 기능과 사용자가 이동 및 확대/축소 할 때 자동으로 업데이트\ntmap, mapview, mapdeck, leaflet으로 표현 가능\n\n\n\n\ntmap_mode(\"view\") #interactive mode\n#&gt; tmap mode set to interactive viewing\nmap_nz\n\n\n\n\n\n\nmap_nz + tm_basemap(server = \"OpenTopoMap\")\n\n\n\n\n\n\nworld_coffee = left_join(world, coffee_data, by = \"name_long\")\nfacets = c(\"coffee_production_2016\", \"coffee_production_2017\")\ntm_shape(world_coffee) + tm_polygons(facets) +\n  tm_facets(nrow = 1, sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntm_basemap() 또는 tm_options()로 basemap 지정 가능\ntm_facets()에서 sync옵션을 TRUE로 선택하면 여러개의 맵을 동시에 확대/축소할 수 있음\n\n\n\n\n\nmapview::mapview(nz)\n\ntrails %&gt;%\n  st_transform(st_crs(franconia)) %&gt;%\n  st_intersection(franconia[franconia$district == \"Oberfranken\", ][1]) %&gt;%\n  st_collection_extract(\"LINE\") %&gt;%\n  mapview(color = \"red\", lwd = 3, layer.name = \"trails\") +\n  mapview(franconiWa, zcol = \"district\", burst = TRUE) +\n  breweries\n\n\n\n\n\nset_token(Sys.getenv(\"pk.eyJ1IjoiancwMTEyIiwiYSI6ImNsM2ppbzYzNzBrbjQzZHBjMmlocnY2dDUifQ.58-gXpPtvcCGmMt2xEW-ig\"))\ncrash_data = read.csv(\"https://git.io/geocompr-mapdeck\")\ncrash_data = na.omit(crash_data)\nms = mapdeck_style(\"dark\")\nmapdeck(style = ms, pitch = 45, location = c(0, 52), zoom = 4) %&gt;%\n  add_grid(data = crash_data, lat = \"lat\", lon = \"lng\", cell_size = 1000,\n           elevation_scale = 50, layer_id = \"grid_layer\",\n           colour_range = viridisLite::plasma(6))\n#&gt; Registered S3 method overwritten by 'jsonify':\n#&gt;   method     from    \n#&gt;   print.json jsonlite\n\n\n\n\n\n\n\n\n\nadd_arc() 함수\n\n\nurl &lt;- 'https://raw.githubusercontent.com/plotly/datasets/master/2011_february_aa_flight_paths.csv'\nflights &lt;- read.csv(url)\nflights$id &lt;- seq_len(nrow(flights))\nflights$stroke &lt;- sample(1:3, size = nrow(flights), replace = T)\nkey = \"pk.eyJ1IjoiancwMTEyIiwiYSI6ImNsM2ppbzYzNzBrbjQzZHBjMmlocnY2dDUifQ.58-gXpPtvcCGmMt2xEW-ig\"\n\nmapdeck(token = key, style = mapdeck_style(\"dark\"), pitch = 45 ) %&gt;%\n  add_arc(\n    data = flights\n    , layer_id = \"arc_layer\"\n    , origin = c(\"start_lon\", \"start_lat\")\n    , destination = c(\"end_lon\", \"end_lat\")\n    , stroke_from = \"airport1\"\n    , stroke_to = \"airport2\"\n    , stroke_width = \"stroke\"\n  )\n\n\nadd_animated_arc() 함수\n\n\nmapdeck(token = key, style = 'mapbox://styles/mapbox/dark-v9', pitch = 45 ) %&gt;%\n  add_animated_arc(\n    data = flights\n    , layer_id = \"arc_layer\"\n    , origin = c(\"start_lon\", \"start_lat\")\n    , destination = c(\"end_lon\", \"end_lat\")\n    , stroke_from = \"airport1\"\n    , stroke_to = \"airport2\"\n    , stroke_width = \"stroke\"\n  )\n\n\nadd_heatmap() 함수\n\n\nmapdeck(token = key, style = mapdeck_style('dark'), pitch = 45 ) %&gt;%\n  add_heatmap(\n    data = df[1:30000, ]\n    , lat = \"lat\"\n    , lon = \"lng\"\n    , weight = \"weight\"\n    , colour_range = colourvalues::colour_values(1:6, palette = \"inferno\")\n  )\n\n\nadd_path() 함수\n\n\nmapdeck(\n  token = key\n  , style = mapdeck_style(\"dark\")\n  , zoom = 10) %&gt;%\n  add_path(\n    data = roads\n    , stroke_colour = \"RIGHT_LOC\"\n    , layer_id = \"path_layer\"\n  )\n\n\nadd_geojson(), add_scatterplot(), add_text() 등이 있음\n\n\n\n\n\npal = colorNumeric(\"RdYlBu\", domain = cycle_hire$nbikes)\nleaflet(data = cycle_hire) %&gt;%\n  addProviderTiles(providers$CartoDB.Positron) %&gt;%       # Background Map\n  addCircles(col = ~pal(nbikes), opacity = 0.9) %&gt;%      # nbikes의 값으로 색이 다르게 circle 생성\n  addPolygons(data = lnd, fill = FALSE) %&gt;%              # land에 따라 Polygon 생성\n  addLegend(pal = pal, values = ~nbikes) %&gt;%             # 범례 생성\n  setView(lng = -0.1, 51.5, zoom = 12) %&gt;%               # zoom\n  addMiniMap()                                           # minimap 생성\n\n\n\n\n\n\n# create a basic map\n\nleaflet() %&gt;%\n  addTiles() %&gt;% # add default OpenStreetMap map tiles\n  setView(lng=127.063, lat=37.513, zoom = 6) # korea, zoom 6\n\n\n\n\n\n# map style: NASA\n\nleaflet() %&gt;%\n  addTiles() %&gt;%\n  setView(lng=127.063, lat=37.513, zoom = 6) %&gt;%\n  addProviderTiles(\"NASAGIBS.ViirsEarthAtNight2012\")\n\n\n\n\n\n# map style: Esri.WorldImagery\n\nleaflet() %&gt;%\n  addTiles() %&gt;%\n  setView(lng=127.063, lat=37.513, zoom = 16) %&gt;%\n  addProviderTiles(\"Esri.WorldImagery\")\n\n\n\n\n\n# adding Popup\n\npopup = c(\"한남대학교 빅데이터응용학과\")\nleaflet() %&gt;%\n  addTiles() %&gt;%\n  addMarkers(lng = c(127.4219), # longitude\n             lat = c(36.3548), # latitude\n             popup = popup)\n\n\n\n\n\n\nzoom : 확대/축소 비율 설정\naddProviderTiles() : 외부 지도 타일 추가\naddMarkers() : 커서를 클릭했을 때 팝업으로 나타나는 설명을 추가\n\n\n\n\n\n\n\n\nR을 사용하여 한걸음 더 나아가 웹 어플리케이션을 제작할 수 있게 해주는 패키지\nui 라고 말하는 화면은 실제로 사용자가 보는 화면\nshiny에서는 크게 titlePanel과 sidebarPanel, mainPanal의 세 가지로 구성\n\n\nui = fluidPage(\n  sliderInput(inputId = \"life\", \"Life expectancy\", 49, 84, value = 80),\n  leafletOutput(outputId = \"map\")\n)\nserver = function(input, output) {\n  output$map = renderLeaflet({\n    leaflet() %&gt;%\n      # addProviderTiles(\"OpenStreetMap.BlackAndWhite\") %&gt;%\n      addPolygons(data = world[world$lifeExp &lt; input$life,])\n  })\n}\nshinyApp(ui, server)\n#&gt; PhantomJS not found. You can install it with webshot::install_phantomjs(). If it is installed, please make sure the phantomjs executable can be found via the PATH variable.\n\nShiny applications not supported in static R Markdown documents\n\n\n\nui &lt;- fluidPage(#Application title\n  titlePanel(\"Hello Shiny!\"),\n  #Sidebar with a slider input for the number of bins\n  sidebarLayout(sidebarPanel(\n    sliderInput(\n      \"bins\",\n      \"Number of bins:\",\n      min = 1,\n      max = 50,\n      value = 30\n    )\n  ),\n  #Show a plot of the generated distribution\n  mainPanel(plotOutput(\"distPlot\"))))\nserver &lt;- function(input, output) {\n  output$distPlot &lt;- renderPlot({\n    x &lt;- faithful[, 2]\n    bins &lt;- seq(min(x), max(x), length.out = input$bins + 1)\n    hist(x,\n         breaks = bins,\n         col = 'darkgray',\n         border = 'white')\n  })\n}\nshinyApp(ui, server)\n\nShiny applications not supported in static R Markdown documents\n\n\n\n\n\n\n\n\n지도 공간 기법으로 시각화하는 ggmap 패키지는 Google Maps, Stamen Maps, 네이버 맵, 등의 다양한 온라인 소스로부터 가져온 정적인 지도 위에 특별한 데이터나 모형을 시각화하는 함수들을 제공함\nggmap()의 주요 함수\n\ngeocode() : 거리주소 또는 장소 이름을 이용하여 이용 지도 정보(위도, 경도) 획득\nget_googlemap() : 구글 지도 서비스 API에 접근하여 정적 지도 다운로드 지원과 지도에 marker 등을 삽입하고 자신이 원하는 줌 레벨과 center를 지정하여 지도 정보 생성\nget_map() : 지도 서비스 관련 서버에 관련 질의어를 지능형으로 인식하여 지도 정보 생성\nget_navermap() : 네이버 지도 서비스 API에 접근하여 정적 지도 다운로드 지원\nggimage() : ggplot2 패키지의 이미지와 동등한 수준으로 지도 이미지 생성\nggmap(), ggmapplot() : get_map() 함수에 의해서 생성된 픽셀 객체를 지도 이미지로 시각화\nqmap() : ggmap()함수와 get_map() 함수의 통합기능\nqmplot() : ggplot2 패키지의 qplot()와 동등한 수준으로 빠르게 지도 이미지 시각화\n\n\n\n\n\nget_googlemap() 함수를 통해 불러오고 싶은 곳의 장소를 문자열 값으로 첫 번째 인자에 넣어 실행해 이를 객체화 함\nggmap() 함수 안에 방금 만든 객체를 입력시킨 후 실행하면 원하는 장소를 중심으로 구글 지도가 plotting 됨\n\n\n# install.packages(\"ggmap\")\nlibrary(ggmap)\nregister_google(key = 'AIzaSyB4jjrVVAzb9fl8FQrQqUONAsaRBppWuSA')\n\n# 우리나라 지도 호출\ngetmap &lt;- get_googlemap(\"seoul\")\nggmap(getmap)\n\n\n\n\n\nggmap() 으로 반환되는 결과물은 ggplot2 패키지의 함수와 조합해 지도 위에 새로운 정보들을 추가할 수 있음\n\n\n\n\ndaejeon_map &lt;- get_googlemap(\"daejeon\") %&gt;% ggmap\nlocation &lt;- data.frame(\n  Name = c(\"한남대학교\", \"대전신세계\"),\n  lon = c(127.4219, 127.3821), #경도\n  lat = c(36.3548, 36.3752)    #위도\n)\n\ndaejeon_map + geom_point(data = location, aes(x = lon, y = lat))\n\ndaejeon_map &lt;- get_googlemap(\"daejeon\", zoom = 13) %&gt;% ggmap\nlocation &lt;- data.frame(\n  Name = c(\"한남대학교\", \"대전신세계\"),\n  lon = c(127.4219, 127.3821),\n  lat = c(36.3548, 36.3752)\n)\n\ndaejeon_map + geom_point(data = location, aes(x = lon, y = lat)) +\n  geom_text(data = location,\n            aes(label = Name),\n            size = 5,   # text 크기\n            vjust = -1) # text 위치\n\n\ngeom_point() 내의 옵션을 선택하여 점의 크기, 색깔, 모양 등 변경 가능\n\n\ndaejeon_map + geom_point(data = location, aes(x = lon, y = lat),\n                         size = 5, color = \"red\", alpha = 0.4) +\ngeom_text(data = location, aes(label = Name), size = 5, vjust = -1)\n\n\n한남대학교를 중심으로 그리기(center)\n\nenc2utf8 : UTF-8로 인코딩\nmaptype : “terrain”, “satellite”, “roadmap”, “hybrid”\ncenter : 맵의 중심\n\n\n\n# 한남대학교를 중심으로 그리기\ngc &lt;- geocode(enc2utf8(\"한남대학교\"))\n\nmap &lt;- get_googlemap(\n  center = as.numeric(gc),\n  maptype = \"roadmap\",\n  zoom = 13,\n  size = c(640, 640),\n  markers = gc) %&gt;% ggmap\n\nmap + geom_point(data = location, aes(x = lon, y = lat)) +\ngeom_text(data = location, aes(label = Name), size = 5, vjust = -1)\n\n\nPath(경로)\n\n\nmap + geom_path(data = location, aes(x = lon, y = lat), color = \"blue\", alpha = .5, lwd = 1)\n\n\n두 지역 사이의 경로 좌표 추출\n\nggmap::route : find a route from Google using different possible modes (\"driving\", \"walking\", \"bicycling\", \"transit\")\n\n\n\nlibrary(sf)\nlibrary(ggplot2)\nlibrary(tmap)\nlibrary(stplanr)\n\ngc_st &lt;- geocode(enc2utf8(\"한남대학교\"))\ngc_ed &lt;- geocode(enc2utf8(\"신세계백화점 대전신세계아트앤사이언스\"))\ngc_od &lt;- st_linestring(rbind(as.numeric(gc_st), as.numeric(gc_ed)))\n\nst_sfc(gc_od) # Linestring, CRS 없음\nst_crs(gc_od)\ngc_od &lt;- st_sfc(gc_od, crs = 4326)\n# st_sfc() : 좌표계가 비어있는 경우에 좌표계 지정\nst_crs(gc_od)\n\nqtm(gc_od)\ngc_od &lt;- st_sf(gc_od)\n# st_sf() : sfc와 sf class의 객체들을 하나로 통합\ngc_od$distance &lt;- as.numeric(st_length(gc_od))\n\nroute_od = route(l = gc_od,             # l : linestring\n                 route_fun = route_osrm,\n                 osrm.profile = \"car\")  # foot, bike, car\nqtm(route_od)\n\nmap &lt;- get_googlemap(\n  center = c(127.41, 36.37),\n  maptype = \"roadmap\",\n  zoom = 14,\n  size = c(640, 640),\n  markers = gc\n) %&gt;% ggmap(extent = \"device\")\n\nmap\n\nmap + geom_sf(data = route_od, inherit.aes = F)\n# inherit.aes = F : sf형식의 데이터를 그릴 때 필수 옵션\n\n\n지도를 꽉 채워서 출력(x, y축 삭제하고 그림만 출력)\n\nextent = \"device\"\n+ theme_void()\n\n\n\nmap &lt;- get_googlemap(\n  center = as.numeric(gc),\n  maptype = \"roadmap\",\n  zoom = 13,\n  size = c(640, 640),\n  markers = gc\n) %&gt;% ggmap(extent = \"device\")\nmap\n\nmap &lt;- get_googlemap(\n  center = as.numeric(gc),\n  maptype = \"roadmap\",\n  zoom = 13,\n  size = c(640, 640),\n  markers = gc\n) %&gt;% ggmap() + theme_void()\nmap\n\n\n\n\n\n# Houston 범죄 데이터\nstr(crime)\nHoustonmap &lt;- get_map(\"Houston\")\nggmap(Houstonmap)\nggmap(Houstonmap) + geom_point(data = crime, aes(x = lon, y = lat))\nggmap(Houstonmap) + geom_point(data = crime, aes(x = lon, y = lat), size = 0.1, alpha = 0.1) # 점의 크기, 점의 투명도 조절\n\n#지도 확대 & 특정 지역 데이터만 추출하기\nHoustonmap &lt;- get_map(\"Houston\", zoom = 14)\ncrime1 &lt;- crime[(crime$lon &lt; -95.344 & crime$lon &gt; -95.395) & (crime$lat &lt; 29.783 & crime$lat &gt; 29.738), ]\ncrime11 &lt;- crime %&gt;% filter((lon &lt; -95.344 & lon &gt; -95.395) & (lat &lt; 29.783 & lat &gt; 29.738))\nnrow(crime1) ; nrow(crime11)\ncrime1 %&gt;% arrange(desc(lon)) %&gt;% nrow()\ncrime11 %&gt;% arrange(desc(lon)) %&gt;% nrow()\n\nggmap(Houstonmap) + geom_point(data = crime1, aes(x = lon, y = lat), alpha = 0.3)\nggmap(Houstonmap) + geom_point(data = crime1, aes(x = lon, y = lat, colour = offense))\n\ncrime2 &lt;- crime1[!duplicated(crime1[, c(\"lon\", \"lat\")]), ] # 위, 경도에 대해 중복되지 않게 하나의 관측치만 선택\n\ncrime2$offense &lt;- as.character(crime2$offense) # 범죄 종류 문자형으로 변경\n\ncrime2$offense[crime2$offense == \"murder\" | crime2$offense == \"rape\"] &lt;- \"4\"\ncrime2$offense[crime2$offense == \"robbery\" | crime2$offense == \"aggravated assault\"] &lt;- \"3\"\ncrime2$offense[crime2$offense == \"burglary\" | crime2$offense == \"auto theft\"] &lt;- \"2\"\ncrime2$offense[crime2$offense == \"theft\"] &lt;- \"1\"\n\ncrime2$offense &lt;- as.numeric(crime2$offense) # 범죄 종류 문자형을 숫자형으로 변경\n\nggmap(Houstonmap) + geom_point(data = crime2, aes(x = lon, y = lat, size = offense), alpha = 0.2)\n\n# 범죄 위험도에 따라 점의 크기 및 색깔로 구별\nggmap(Houstonmap) + geom_point(data = crime2, aes(x = lon, y = lat, size = offense, colour = offense), alpha = 0.5) +\n  scale_colour_gradient(low = \"white\", high = \"red\")\n\ncrime3 &lt;- crime2[crime2$date == \"1/1/2010\", ]\n\ncrime4 &lt;- crime3[!duplicated(crime3[, c(\"hour\")]), ]\n\nnrow(crime3) ; nrow(crime4)\n\nggmap(Houstonmap) + geom_point(data = crime3, aes(x = lon, y = lat)) +\n  geom_text(data = crime4, aes(label = street), vjust = 1.2) +\n  geom_path(data = crime4, aes(x = lon, y = lat), color = \"red\")\n\n\n\n\n\n\n\nnames(bristol_zones) ; names(bristol_od)\n#&gt; [1] \"geo_code\" \"name\"     \"geometry\"\n#&gt; [1] \"o\"          \"d\"          \"all\"        \"bicycle\"    \"foot\"      \n#&gt; [6] \"car_driver\" \"train\"\nnrow(bristol_zones)  ; nrow(bristol_od)\n#&gt; [1] 102\n#&gt; [1] 2910\n\n# O : Zone of the Origin / D : Zone of the Dest\n\nzones_attr = bristol_od %&gt;%\n  group_by(o) %&gt;%\n  summarize_if(is.numeric, sum) %&gt;%\n  dplyr::rename(geo_code = o)\n\nsummary(zones_attr$geo_code %in% bristol_zones$geo_code) # 일치하는지 확인\n#&gt;    Mode    TRUE \n#&gt; logical     102\n\n\nzones_joined = left_join(bristol_zones, zones_attr, by = \"geo_code\")\nnrow(zones_joined)\n#&gt; [1] 102\nsum(zones_joined$all)\n#&gt; [1] 238805\n\nnames(zones_joined)\n#&gt; [1] \"geo_code\"   \"name\"       \"all\"        \"bicycle\"    \"foot\"      \n#&gt; [6] \"car_driver\" \"train\"      \"geometry\"\n#&gt; [1] \"geo_code\" \"name\" \"all\" \"bicycle\" \"foot\" \"car_driver\" \"train\" \"geometry\"\nnames(zones_joined)[3] &lt;- c(\"all_orig\")\nnames(zones_joined)\n#&gt; [1] \"geo_code\"   \"name\"       \"all_orig\"   \"bicycle\"    \"foot\"      \n#&gt; [6] \"car_driver\" \"train\"      \"geometry\"\n\nzones_od = bristol_od %&gt;%\n  group_by(d) %&gt;%\n  summarize_if(is.numeric, sum) %&gt;%\n  dplyr::select(geo_code = d, all_dest = all) %&gt;%\n  inner_join(zones_joined, ., by = \"geo_code\")\n\nzones_od\n#&gt; Simple feature collection with 102 features and 8 fields\n#&gt; Geometry type: MULTIPOLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: -2.845847 ymin: 51.28248 xmax: -2.252388 ymax: 51.73982\n#&gt; Geodetic CRS:  WGS 84\n#&gt; First 10 features:\n#&gt;     geo_code                             name all_orig bicycle foot car_driver\n#&gt; 1  E02002985 Bath and North East Somerset 001      868      30  173        414\n#&gt; 2  E02002987 Bath and North East Somerset 003      898      34  117        523\n#&gt; 3  E02003005 Bath and North East Somerset 021      786      19   91        593\n#&gt; 4  E02003012                      Bristol 001     3312     161  330       2058\n#&gt; 5  E02003013                      Bristol 002     3715     188  615       2021\n#&gt; 6  E02003014                      Bristol 003     2220     126  270       1239\n#&gt; 7  E02003015                      Bristol 004     1633     166  307        786\n#&gt; 8  E02003016                      Bristol 005     2411     218  440       1105\n#&gt; 9  E02003017                      Bristol 006     1590     187  208        898\n#&gt; 10 E02003018                      Bristol 007     1690      96  143       1048\n#&gt;    train all_dest                       geometry\n#&gt; 1     43      744 MULTIPOLYGON (((-2.510462 5...\n#&gt; 2     58      561 MULTIPOLYGON (((-2.476122 5...\n#&gt; 3      8      427 MULTIPOLYGON (((-2.55073 51...\n#&gt; 4     12      701 MULTIPOLYGON (((-2.595763 5...\n#&gt; 5      6      940 MULTIPOLYGON (((-2.593783 5...\n#&gt; 6      5     3469 MULTIPOLYGON (((-2.639581 5...\n#&gt; 7      7     4980 MULTIPOLYGON (((-2.584973 5...\n#&gt; 8     23      297 MULTIPOLYGON (((-2.565948 5...\n#&gt; 9      9     1459 MULTIPOLYGON (((-2.616485 5...\n#&gt; 10    20      128 MULTIPOLYGON (((-2.637681 5...\n\nqtm(zones_od, c(\"all_orig\", \"all_dest\")) +\ntm_layout(panel.labels = c(\"Origin\", \"Destination\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nod_top5 = bristol_od %&gt;%\n  arrange(desc(all)) %&gt;%\n  top_n(5, wt = all)\n\nbristol_od$Active = (bristol_od$bicycle + bristol_od$foot) / bristol_od$all * 100\n\nod_intra = filter(bristol_od, o == d) # 지역 내 이동\nod_inter = filter(bristol_od, o != d) # 지역 외 이동\nod_intra ; od_inter # 102행 / 2808행\n#&gt; # A tibble: 102 × 8\n#&gt;    o         d           all bicycle  foot car_driver train Active\n#&gt;    &lt;chr&gt;     &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n#&gt;  1 E02002985 E02002985   209       5   127         59     0   63.2\n#&gt;  2 E02002987 E02002987   166       8    61         89     2   41.6\n#&gt;  3 E02003005 E02003005   383       8    87        256     1   24.8\n#&gt;  4 E02003012 E02003012   315       5   181        102     0   59.0\n#&gt;  5 E02003013 E02003013   318       7   165        112     0   54.1\n#&gt;  6 E02003014 E02003014   414      35   139        185     0   42.0\n#&gt;  7 E02003015 E02003015   240      18   142         61     0   66.7\n#&gt;  8 E02003016 E02003016   119       7    65         30     2   60.5\n#&gt;  9 E02003017 E02003017   147       8    70         60     1   53.1\n#&gt; 10 E02003018 E02003018    67       0    39         24     1   58.2\n#&gt; # ℹ 92 more rows\n#&gt; # A tibble: 2,808 × 8\n#&gt;    o         d           all bicycle  foot car_driver train Active\n#&gt;    &lt;chr&gt;     &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n#&gt;  1 E02002985 E02002987   121       7    35         62     0  34.7 \n#&gt;  2 E02002985 E02003036    32       2     1         10     1   9.38\n#&gt;  3 E02002985 E02003043   141       1     2         56    17   2.13\n#&gt;  4 E02002985 E02003049    56       2     4         36     0  10.7 \n#&gt;  5 E02002985 E02003054    42       4     0         21     0   9.52\n#&gt;  6 E02002985 E02003100    22       0     0         19     3   0   \n#&gt;  7 E02002985 E02003106    48       3     1         33     8   8.33\n#&gt;  8 E02002985 E02003108    31       0     0         29     1   0   \n#&gt;  9 E02002985 E02003121    42       1     2         34     0   7.14\n#&gt; 10 E02002985 E02006887   103       5     1         36    13   5.83\n#&gt; # ℹ 2,798 more rows\n\ndesire_lines = od2line(od_inter, zones_od)\n#&gt; Creating centroids representing desire line start and end points.\n# od2line : polygon으로 되어있는 두 지역의 중심점을 계산해서 linestring으로 변환\n#&gt; Creating centroids representing desire line start and end points.\nqtm(desire_lines, lines.lwd = \"all\")\n#&gt; Legend for line widths not available in view mode.\n\n\n\n\n\n\n\ndesire_lines$distance = as.numeric(st_length(desire_lines))\ndesire_carshort = dplyr::filter(desire_lines, car_driver &gt; 300 & distance &lt; 5000)\nroute_carshort = route(l = desire_carshort, route_fun = route_osrm, osrm.profile = \"car\")  # foot, bike, car\n#&gt; Most common output is sf\ndesire_carshort$geom_car = st_geometry(route_carshort)\n\nplot(st_geometry(desire_carshort))\nplot(desire_carshort$geom_car, col = \"red\", add = TRUE)\nplot(st_geometry(st_centroid(zones_od)), add = TRUE)\n#&gt; Warning: st_centroid assumes attributes are constant over geometries\n\n\n\n\n\ngetmap &lt;- get_googlemap(\"bristol\", zoom = 11)\nbristol_map &lt;- ggmap(getmap)\n\n# 센터 조정\ngetmap &lt;- get_googlemap(center = c(-2.56, 51.53), zoom = 12)\nbristol_map &lt;- ggmap(getmap)\nbristol_map + geom_sf(data = desire_carshort, inherit.aes = F) +\n  geom_sf(data = desire_carshort$geom_car,\n          inherit.aes = F,\n          col = \"red\") +\n  geom_sf(data = st_geometry(st_centroid(zones_od)), inherit.aes = F)\n\n\n\n\n\n도로교통공단 TAAS에서는 사망교통사고 정보를 공개하고 있음\n\n교통사고 일시 부터 30일이내 사망한 경우를 사망교통사고라 정의하고 사고정보를 선택한 조건에 따라 json/xml형식으로 제공\n사망 교통 사고 정보\n\n사망사고 년, 월, 일, 시, 주야\n사망사고 건수\n사망사고 사망자수, 부상자수, 중상자수, 경상자수, 부상신고자수\n사망사고 위치 좌표 및 지역명\n사망사고 유형, 위반사항, 차량 종류, 도로 형태\n\n\n데이터 불러오기(https://taas.koroad.or.kr/api/selectDeathDataSet.do)\n\n다운받은 데이터를 R로 불러온 뒤 데이터 속성 확인하세요. 어떤 정보가 있는지, 활용할 위치 정보가 있는지 확인하세요\n\n\n\nSys.setlocale(\"LC_ALL\",\"Korean\")\n#&gt; Warning in Sys.setlocale(\"LC_ALL\", \"Korean\"): using locale code page other than\n#&gt; 65001 (\"UTF-8\") may cause problems\n#&gt; [1] \"LC_COLLATE=Korean_Korea.949;LC_CTYPE=Korean_Korea.949;LC_MONETARY=Korean_Korea.949;LC_NUMERIC=C;LC_TIME=Korean_Korea.949\"\ngetwd()\n#&gt; [1] \"D:/Study-Blog\"\nraw.data &lt;- read.csv(\"./Spatial_Information_Analysis/12_20_death.csv\", header = TRUE, fileEncoding = \"EUC-KR\")\n## 구조 확인\nstr(raw.data)\n#&gt; 'data.frame':    37128 obs. of  23 variables:\n#&gt;  $ 발생년               : int  2012 2012 2012 2012 2012 2012 2012 2012 2012 2012 ...\n#&gt;  $ 발생년월일시         : int  2012010101 2012010101 2012010108 2012010110 2012010103 2012010116 2012010210 2012010104 2012010104 2012010102 ...\n#&gt;  $ 주야                 : chr  \"야간\" \"야간\" \"주간\" \"주간\" ...\n#&gt;  $ 요일                 : chr  \"일\" \"일\" \"일\" \"일\" ...\n#&gt;  $ 사망자수             : int  1 1 1 2 1 1 2 1 1 1 ...\n#&gt;  $ 사상자수             : int  1 6 1 2 1 1 2 1 2 4 ...\n#&gt;  $ 중상자수             : int  0 5 0 0 0 0 0 0 1 0 ...\n#&gt;  $ 경상자수             : int  0 0 0 0 0 0 0 0 0 3 ...\n#&gt;  $ 부상신고자수         : int  0 0 0 0 0 0 0 0 0 0 ...\n#&gt;  $ 발생지시도           : chr  \"서울\" \"전북\" \"충남\" \"경남\" ...\n#&gt;  $ 발생지시군구         : chr  \"은평구\" \"정읍시\" \"청양군\" \"합천군\" ...\n#&gt;  $ 사고유형_대분류      : chr  \"차대사람\" \"차대차\" \"차량단독\" \"차대차\" ...\n#&gt;  $ 사고유형_중분류      : chr  \"차도통행중\" \"정면충돌\" \"공작물충돌\" \"측면충돌\" ...\n#&gt;  $ 사고유형             : chr  \"차도통행중\" \"정면충돌\" \"공작물충돌\" \"측면충돌\" ...\n#&gt;  $ 법규위반             : chr  \"안전운전 의무 불이행\" \"중앙선 침범\" \"안전운전 의무 불이행\" \"과속\" ...\n#&gt;  $ 도로형태_대분류      : chr  \"단일로\" \"단일로\" \"단일로\" \"교차로\" ...\n#&gt;  $ 도로형태             : chr  \"기타단일로\" \"기타단일로\" \"기타단일로\" \"교차로내\" ...\n#&gt;  $ 당사자종별_1당_대분류: chr  \"승용차\" \"승용차\" \"승용차\" \"승합차\" ...\n#&gt;  $ 당사자종별_2당_대분류: chr  \"보행자\" \"승용차\" \"없음\" \"승용차\" ...\n#&gt;  $ 발생위치X_UTMK       : int  949860 946537 940016 1059321 1070222 1036880 1079124 1114053 911131 955269 ...\n#&gt;  $ 발생위치Y_UTMK       : int  1957179 1737695 1832833 1748774 1834630 1827821 1708218 1761943 1861851 1952221 ...\n#&gt;  $ 경도                 : num  127 127 127 128 128 ...\n#&gt;  $ 위도                 : num  37.6 35.6 36.5 35.7 36.5 ...\n## 테이블 확인\nView(raw.data)\n\n\n데이터 추출하기\n\n다운받은 데이터는 전국에 대한 사망교통사고 정보이다. 대전지역에 2016년부터 2020년까지의 정보만을 추출하세요.\n\n추출한 데이터의 경도, 위도에 결측값 및 0인 데이터가 있는지 확인하세요.\n\n\n\n\n## 1. 대전 지역 2016 ~ 2020년 데이터 추출\ndaejeon &lt;- filter(raw.data,  발생지시도 == \"대전\" &  발생년 &gt; 2015)\n\n## 2. 사고 발생 시작점 경도/위도 데이터의 범위 살펴보기\nrange(daejeon$경도) ; range(daejeon$위도)\n#&gt; [1] 127.2653 127.5278\n#&gt; [1] 36.22335 36.45634\n\n## 3. 경도/위도 데이터가 NA인 데이터 확인하기\nsum(is.na(daejeon$경도)) ; sum(is.na(daejeon$위도))\n#&gt; [1] 0\n#&gt; [1] 0\n\n## 4. 경도/위도 데이터가 0인 데이터 확인하기\ndaejeon[daejeon$경도 == 0,]\n#&gt;  [1] 발생년                발생년월일시          주야                 \n#&gt;  [4] 요일                  사망자수              사상자수             \n#&gt;  [7] 중상자수              경상자수              부상신고자수         \n#&gt; [10] 발생지시도            발생지시군구          사고유형_대분류      \n#&gt; [13] 사고유형_중분류       사고유형              법규위반             \n#&gt; [16] 도로형태_대분류       도로형태              당사자종별_1당_대분류\n#&gt; [19] 당사자종별_2당_대분류 발생위치X_UTMK        발생위치Y_UTMK       \n#&gt; [22] 경도                  위도                 \n#&gt; &lt;0 행&gt; &lt;또는 row.names의 길이가 0입니다&gt;\ndaejeon[daejeon$위도 == 0,]\n#&gt;  [1] 발생년                발생년월일시          주야                 \n#&gt;  [4] 요일                  사망자수              사상자수             \n#&gt;  [7] 중상자수              경상자수              부상신고자수         \n#&gt; [10] 발생지시도            발생지시군구          사고유형_대분류      \n#&gt; [13] 사고유형_중분류       사고유형              법규위반             \n#&gt; [16] 도로형태_대분류       도로형태              당사자종별_1당_대분류\n#&gt; [19] 당사자종별_2당_대분류 발생위치X_UTMK        발생위치Y_UTMK       \n#&gt; [22] 경도                  위도                 \n#&gt; &lt;0 행&gt; &lt;또는 row.names의 길이가 0입니다&gt;\n\n\n\n\n\n\n\n## 5. 년도별 사고 위치 정보 지도 상에 표출하기\nlibrary(ggmap)\nregister_google(key = 'AIzaSyB4jjrVVAzb9fl8FQrQqUONAsaRBppWuSA')\nmap &lt;- qmap(location = enc2utf8(\"대전\"),\n            zoom = 12,\n            maptype = \"roadmap\")\np &lt;-\n  map + geom_point(\n    data = daejeon,\n    aes(x = 경도, y = 위도, colour = factor(발생년)),\n    size = 2,\n    alpha = 0.7\n  )\np + ggtitle(\"대전시 사망사고 위치(2016-2020)\")\n\n\nstat_bin2d() 함수 활용하여 Grid 내 사고횟수 출력\n\n\n## stat_bin2d() 함수 활용하여 특정 영역 내 사고 횟수 출력\np &lt;- map + stat_bin2d(data = daejeon,\n                      aes(x = 경도, y = 위도),\n                      bins = 30,   # bins : grid의 개수\n                      alpha = 0.5) # binwidth 로도 가능\np\n## stat_bin2d() 함수 활용하여 특정 영역 내 사고 횟수 출력/위성지도/컬러 변경\nmap &lt;- qmap(location = \"Daejeon\",\n            zoom = 12,\n            maptype = \"satellite\")\np &lt;- map + stat_bin2d(data = daejeon,\n                      aes(x = 경도, y = 위도),\n                      bins = 30,\n                      alpha = 0.5) # binwidth 로도 가능\np + scale_fill_gradient(low = \"yellow\", high = \"red\")\n\n\n\n\nGrid 내에 Count된 값 및 위치 확인하기\n\n\np_count &lt;- ggplot_build(p)$data[[4]] # cell의 값 출력\np_count &lt;- arrange(p_count, desc(value))\nhead(p_count)\n\n\nGrid 내(중심)에 Count값 표출\n\n\np + scale_fill_gradient(low = \"yellow\", high = \"red\") +\n  geom_text(data = p_count, aes((xmin + xmax) / 2, (ymin + ymax) / 2,\n                                label = count), col = \"white\")\n\n\n사고 유형 별로 표시하기\n\n\np &lt;-\n  map + stat_bin2d(\n    data = daejeon,\n    aes(\n      x = 경도,\n      y = 위도,\n      colour = factor(사고유형),\n      fill = factor(사고유형)\n    ),\n    bins = 30,\n    alpha = 0.5\n  )\np\n\n\nstat_density2d() 함수 활용하여 등고선으로 지도 위에 출력하기\n\n\nmap &lt;-\n  qmap(\n    location = \"Daejeon\",\n    zoom = 12,\n    maptype = 'roadmap',\n    color = 'bw'\n  )\np &lt;-\n  map + stat_density2d(\n    data = daejeon,\n    aes(x = 경도, y = 위도, fill = ..level..),\n    bins = 5,\n    alpha = 0.45,\n    size = 2,\n    geom = \"polygon\"\n  )\n# level : 레벨이 높을수록 더 진한색, size : 선 굵기, bins: 선 간격\np\n\n\ngeom_hex() 함수 활용하여 벌집 블롯으로 출력하기\n\n\n## 벌집 블롯으로 출력(geom_hex(), scale_fill_gradientn())\nlibrary(hexbin)\nmap &lt;- qmap(location = \"Daejeon\",\n            zoom = 11,\n            maptype = \"roadmap\")\np &lt;-\n  map + coord_cartesian() + # coord_cartesian() : 데카르트 좌표계\n  geom_hex(\n    data = daejeon,\n    aes(x = 경도, y = 위도),\n    bins = 12,\n    alpha = 0.6,\n    color = \"white\"\n  ) # geom_hex() only works with Cartesian coordinates\np\np &lt;- p + scale_fill_gradientn(colours = terrain.colors(15))\np\n\n# binwidth로 출력\np &lt;-\n  map + coord_cartesian() + geom_hex(\n    data = daejeon,\n    binwidth = c(0.05, 0.05), # binwidth : bin의 크기 설정\n    aes(x = 경도, y = 위도),\n    alpha = 0.6,\n    color = \"white\"\n  ) # geom_hex() only works with Cartesian coordinates\np\np &lt;- p + scale_fill_gradientn(colours = terrain.colors(15))\np\n\np_count &lt;- ggplot_build(p)$data[[4]] # cell의 값 출력\np_count &lt;- arrange(p_count, desc(count))\nhead(p_count)\n\n\n\n\n\n\n행정구역시군구 경계를 얻기 위해 데이터로 대전시 구 경계 shape 파일 획득\n\n\nlibrary(raster)\nlibrary(rgdal)\nlibrary(sf)\n\n## 동별 사망사고 추출하기\nmap &lt;-\n  qmap(\n    location = \"Daejeon\",\n    zoom = 11,\n    maptype = 'roadmap',\n    color = 'bw'\n  )\n\ndaejeon_area &lt;- shapefile('./Spatial_Information_Analysis/LARD_ADM_SECT_SGG_30/LARD_ADM_SECT_SGG_30.shp')\ndaejeon_area # 좌표체계 확인\n# str(daejeon_area)\nplot(daejeon_area, axes = T)\n\n\n위 plot의 좌표단위를 보면 평면직각좌표계(Projected Coordinate)를 기준으로 측정할 때 나올 수 있는 단위\n앞에서 사고 데이터의 좌표는 위경도 좌표이므로, 두 자료의 위치 좌표체계를 통일 시켜줄 필요가 있음\nspTransform() 를 통해 좌표변형 가능\n\nto_crs = CRS(\"+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs\")\n\n\n\nto_crs = CRS(\"+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs\")\ndaejeon_area2 &lt;- spTransform(daejeon_area, to_crs)\ndaejeon_area2\ndaejeon_area2@data # SP 데이터 내에서 출력을 하려면 @로 호출해야함\n\nplot(daejeon_area2, axes = T)\nmap + geom_polygon(\n  data = daejeon_area2,\n  aes(x = long, y = lat, group = group),\n  fill = 'white',\n  color = 'black'\n)\n\n\n구를 기준으로 사고 발생 횟수 계산\n\n\ngu_accident &lt;- daejeon %&gt;% group_by(발생지시군구) %&gt;% summarise(n = n())\ngu_accident\n#&gt; # A tibble: 5 x 2\n#&gt;   발생지시군구     n\n#&gt;   &lt;chr&gt;        &lt;int&gt;\n#&gt; 1 대덕구          81\n#&gt; 2 동구            98\n#&gt; 3 서구           100\n#&gt; 4 유성구          73\n#&gt; 5 중구            58\n\n\ndaejeon_area2 객체의 클래스는 SpatitalPloygonsDataFrame임\n이것을 데이터 프레임 형태로 변환해줄 때 사용하는 함수로는 ggplot2 패키지의 fortify() 함수가 있음\n구를 나타내는 SGG_NM 열로 기준\n\n\nclass(daejeon_area2)\ndaejeon_area2 &lt;- fortify(daejeon_area2, region = 'SGG_NM')\nclass(daejeon_area2)\nhead(daejeon_area2)\n\n\ndaejeon_area2의 “id”열과 gu_accident의 “발생지시군구”열을 기준으로 합치기 위해서 열Name을 “id”로 통일\nid열을 기준으로 두 데이터셋을 합쳐줌\n\n\nnames(gu_accident)[1] &lt;- \"id\"\ndaejeon_area3 &lt;- merge(daejeon_area2, gu_accident, by = 'id')\nhead(daejeon_area3)\n\ndaejeon_area3 %&gt;% group_by(id) %&gt;% summarise(n = mean(n))\n\n\ngeom_polygon()을 이용한 시각화\n\n\np &lt;-\n  map + geom_polygon(data = daejeon_area3,\n                     aes(\n                       x = long,\n                       y = lat,\n                       group = group,\n                       fill = n\n                     ),\n                     alpha = .5)\np\np + scale_fill_gradient(low = 'yellow', high = 'red')\nlibrary(viridis)\np + scale_fill_viridis()\n\n\n\n\n\n\n\n\n구경계 데이터(daejeon_area2)를 sf클래스로 변환\nst_as_sf() : sp클래스를 sf클래스로 변환\n\n\ndaejeon_area2 &lt;- spTransform(daejeon_area, to_crs)\ndaejeon_area2\ndaejeon_area_sf &lt;- st_as_sf(daejeon_area2) # sp 클래스를 sf 클래스로 전환하기\ndaejeon_area_sf\nplot(st_geometry(daejeon_area_sf))\n\n\nst_point_on_surface() : 각 구별 지도상 중심점 구한 뒤 지도상에 표출\n\n\n# 각 구별 Center\ndaejeon_area_center &lt;- st_point_on_surface(daejeon_area_sf)\nplot(st_geometry(daejeon_area_sf))\nplot(daejeon_area_center , add = T, col = \"black\")\n\n\n사망사고데이터(point)를 sf클래스로 변환\n\n\ndaejeon_acc_sf &lt;-\n  daejeon %&gt;% st_as_sf(coords = c(\"경도\", \"위도\"),\n                       crs = 4326,\n                       remove = FALSE)\ndaejeon_acc_sf ## CRS : # WGS84\n\n# daejeon_acc &lt;- daejeon %&gt;% st_as_sf(coords = c(\"발생위치X_UTMK\", \"발생위치Y_UTMK\"),\n#                                     crs = 4326,\n#                                     remove = FALSE)\n# daejeon_acc\n\n\nst_intersection을 통해서 폴리곤(구경계)와 포인트(사망사고지점)데이터 합치기\n\n\n## Intersection between polygon and points\nintersection &lt;- st_intersection(daejeon_area_sf, daejeon_acc_sf)\nhead(intersection)\n\n## Plot intersection\nplot(st_geometry(daejeon_area_sf))\nplot(intersection, add = T, pch = 1)\n\n\n구별 사망사고 건수 Count하기\n\n\n## View result\ntable(intersection$SGG_NM)\n\n## Using dplyr\nint_result &lt;- intersection %&gt;%\n  group_by(SGG_NM) %&gt;%\n  count()\nint_result\n\n\nst_join() : 경계 데이터(daejeon_area_sf)에 결과(int_result) 합치기\n\n\nint_result0 &lt;- st_join(daejeon_area_sf, int_result)\nint_result0\n\n\nmap 위에 시각화\n\n\nmap &lt;-\n  qmap(\n    location = \"Daejeon\",\n    zoom = 11,\n    maptype = 'roadmap',\n    color = 'bw'\n  )\np &lt;-\n  map + geom_sf(data = int_result0,\n                inherit.aes = F, # sf형태 data 그릴 때 반드시 필요\n                aes(fill = n),\n                alpha = .5)\np\np + scale_fill_gradient(low = 'yellow', high = 'red')"
  },
  {
    "objectID": "Spatial_Information_Analysis.html#chapter-1-r을-이용한-공간정보-분석",
    "href": "Spatial_Information_Analysis.html#chapter-1-r을-이용한-공간정보-분석",
    "title": "Spatial Information Analysis",
    "section": "",
    "text": "공간정보란 ? 사람들이 생활하고 있는 공간 상에서 사건이나 사물에 대한 위치를 나타내는 정보\n\n위치를 나타내는 정보는 (1) 위치를 표현하는 정보 (2) 해당 위치에 나타나는 특성에 대한 정보\n\n위치를 표현하는 정보 : 공간 상에서 사건이나 사물의 위치가 어디에 있는지를 나타내는 정보\n\nex) 주소, 위경도, x,y 좌표 등\n\n해당 위치에 나타나는 특성에 대한 정보 : 특정 위치에 있는 사건이나 사물을 설명하는 정보\n\nex) 학교, 회사, 학생 수 , 교사 수, 사고 건 수, 사고 유형 등\n\n\n\n지리정보 시스템(Geographic Information System) : 공간정보데이터를 처리, 가공하여 새로운 정보를 도출하는 일련의 과정 또는 기법\n\nex) 교통사고 데이터 분석 (TIMS)\n\n공간정보를 이용하여 GIS 분석을 수행하기 위한 소프트웨어\n\n전용 소프트웨어\n\nArcGIS : 전문적인 공간정보의 처리와 분석 가능, 고가(유료)\nQGIS : 오픈소스 GIS 소프트웨어, 최근 많은 분야에서 GIS 소프트웨어로 활용\n\n오픈소스 소프트웨어\n\nR 소프트웨어 : 오픈소스 기반의 통계 프로그램, 공간정보의 처리와 븐석에도 강력한 기능\nPython 소프트웨어 : 배우기 쉽고, 강력한 프로그래밍 언어, 공간정보를 다루는데 유용한 라이브러리가 개발\n\n\n\n\n\n\n\n위치정보와 속성정보로 구분\n\n위치정보\n\n좌표체계를 이용한 위치정보\n\n지리좌표계에서 이용하는 경도와 위도로 표현 ex) 경위도좌표\n수학적으로 X좌표와 Y좌표로 위치 정보를 표현 ex) 평면직각좌표(지도좌표)\n\n공간정보 데이터의 위치정보 표현 방식\n\n벡터 (점, 선, 면)\n래스터 (일정한 격자 또는 화소)\n\n\n속성정보\n\n주어진 위치에 있는 사건이나 사물에 대한 자료\n\n\n\n\n\n\n\n지리좌표체계 : 경도와 위도로 위치를 표현하는 지리좌표체계\n투영좌표체계 : 지도투영법을 적용하여 둥근 지구를 평면으로 변환한 후, 직각좌표체계를 이용하여 x좌표와 y좌표의 직각좌표체계로 위치를 표현\n\n원통도법, 원추도법, 평면도법이 있음.\nUTM 좌표체계, TM 좌표계, UTM-K 좌표계\n우리나라는 ITRF2000 지구중심좌표계를 따르고 타원체로는 GRS80 타원체를 적용\n\n\n\n\n\n\nshapefile\n\n.shp : 공간정보(점, 선, 다각형)\n.shx : geometry와 속성 정보 연결\n.dbf : 속성정보\n.drj : 좌표계 정보 저장\n.sbn : 위치 정보 저장\n\ngeojson : json 또는 xml 파일 포맷 필요요"
  },
  {
    "objectID": "Spatial_Information_Analysis.html#chapter2-geographic-data-in-r",
    "href": "Spatial_Information_Analysis.html#chapter2-geographic-data-in-r",
    "title": "Spatial Information Analysis",
    "section": "",
    "text": "패키지\n\nsf : 지리 공간 벡터 데이터(vector data) 분석을 위한 패키지\nraster : 지리 공간 레스터 데이터(raster data)를 처리 및 분석하는데 사용\nspData : 37개의 지리 공간 데이터셋이 내장\nspDataLarge : 지리공간 데이터 샘플을 내장\n\nvignetee(package = \" \") : 설치된 모든 패키지에 대한 이용가능한 모든 목록을 출력\nst_as_sf() : st 데이터를 sf로 변환하는 함수\nst_centroid : 폴리곤의 중심점을 계산하는 함수\nplot 함수 위에 다른 지도 층을 추가 : plot() 함수 안에 add = TRUE 사용\n\n\n\n\nst_point() : A point\nst_linestring() : A linestring\nst_polygon() : A polygon\nst_multipoint() : A multipoint\nst_multilinestring() : A multilinestring\nst_multipolygon() : A multipolygon\nst_geometrycollection() : A geometry collection\n\n\n\n\n\nst_sfc() : 두 개의 지리특성(feature)을 하나의 칼럼 객체로 합치는 함수\nst_geometry_type() : 기하유형을 확인\nst_crs() : 특정 CRS를 지정\n\n특정 CRS를 지정하기 위해 epsg(SRID) 또는 proj4string 속성을 사용\n\nepsg 코드\n\n장점 : 짧아서 기억하기 쉬움\nsfc 객체 내의 모든 geometries는 동일한 CRS를 가져야 함.\nEPSG : 4326 : GPS가 사용하는 좌표계\n\nproj4string 정의\n\n장점 : 투사 유형이나 datum, 타원체 등의 다른 모수들을 구체화할 수 있는 유연성이 있음\n단점 : 사용자가 구체화를 해야하므로 길고 복잡하며 기억하기 어려움\n\nst_sf() : sfc와 class sf의 객체들을 하나로 통합\n\n\nlibrary(raster)\nlibrary(rgdal)\n\nraster_filepath &lt;- system.file(\"raster/srtm.tif\", package = \"spDataLarge\")\nnew_raster &lt;- raster(raster_filepath)\nnew_raster\n# class      : RasterLayer\n# dimensions : 457, 465, 212505  (nrow, ncol, ncell)\n# resolution : 0.0008333333, 0.0008333333  (x, y)\n# extent     : -113.2396, -112.8521, 37.13208, 37.51292  (xmin, xmax, ymin, ymax)\n# crs        : +proj=longlat +datum=WGS84 +no_defs\n# source     : srtm.tif\n# names      : srtm\n# values     : 1024, 2892  (min, max)\n\n\ndim() : 행, 열, 층의 수\nncell() : 셀의 수\nres() : 해상도\nextent() : 경계값\ncrs() : 좌표계\ninMemory() : 래스터 데이터가 메모리에 저장되어 있는지(논리값 출력)\n\n\n\n\n\nRasterLayer class\nRasterBrick Class\nRasterStack class\n\n\nRasterLayer : 한 개의 층으로 구성되어 있는 래스터\nRasterBrick : 여러개의 층으로 구성되어 있는 래스터\n\n단일 다중 스펙트럼 위성 파일, 메모리의 단일 다층 객체의 형태\nbrick() 함수를 사용하여 다층 래스터 파일을 로드\n\nRasterStack : 여러개의 층으로 구성되어 있는 래스터\nnlayers() : 래스터 데이터의 층의 수\n\n\n\n\nRasterBrick : 동일한 복수 개의 RasterLayer 층으로 구성\nRasterStack : 여러 개의 RasterLayer과 RasterBrick 객체가 혼합\n\n\n\n\n\nRasterBrick : 하나의 다층 래스터 파일이나 객체를 처리\nRasterStack : 여러 개의 래스터 파일들이나 여러 종류의 래스터 클래스를 한꺼번에 연걸해서 연산하고 처리\n\n\n\n\n\n\n지리 좌표계\n\n위도와 경도를 이용해 지구 표면의 위치를 정의\n미터가 아니라, 각도로 거리 측정\n타원 표면, 구면 표면\nWGS84\n\n투영(투사) 좌표계\n\n암묵적으로 “평평한 표면” 위의 데카르트 좌표 기반 -&gt; 왜곡 발생\n원점, x축, y축\n미터와 같은 선형 측정 단위\n평면, 원뿔, 원통의 3가지 투영 유형\n\nst_set_crs() : 좌표계가 비어있거나 잘못 입력되어 있는 경우에 좌표계를 설정\nst_transform() : 투영 데이터 변환\nst_area() : 벡터 데이터의 면적 계산 -&gt; [m^2] 단위가 같이 반환\n좌표계 설정할 때,\n\n벡터 데이터 : epsg코드나 proj4string정의 모두 사용 가능\n래스터 데이터 : proj4string 정의만 사용"
  },
  {
    "objectID": "Spatial_Information_Analysis.html#chapter3-attribute-data-operations",
    "href": "Spatial_Information_Analysis.html#chapter3-attribute-data-operations",
    "title": "Spatial Information Analysis",
    "section": "",
    "text": "sf 객체에서 속성 정보만 가져오기 : st_drop_geometry()\n\n\nBase R 구문으로 벡터 데이터 속성 정보의 행과 열 가져오기\n\n\ndplyr로 벡터 데이터 속성 정보의 행과 열 가져오기\n\n\n한 개 컬럼만 가져온 결과를 벡터로 반환하기\n\n\n\n\n\n지리공간 sf 객체는 항상 점, 선, 면 등의 지리기하 데이터를 리스트로 가지고 있는 geometry 칼럼이 항상 따라다님\nsf 객체로부터 이 geometry 칼럼을 제거하고 나머지 속성 정보만으로 Dataframe을 만들고 싶다면 sf패키지의 st_drop_geometry()를 사용\ngeometry 칼럼의 경우 지리기하 점, 선, 면 등의 리스트 정보를 가지고 있어 메모리 점유가 크기때문에, 사용할 필요가 없다면 geometry 칼럼을 제거하고 속성 정보만으로 Dataframe으로 만들어서 분석을 진행하는게 좋음\n\n\n\n\n\nR Dataframe에서 i행과 j열을 가져올 때 : df[i, j], subset(), $을 사용\n\n\ni행과 j열 위치를 지정 ex) world[1:6, ]\n\n\nj행의 이름을 이용 ex) world[, c(\"name_long\", \"lifeExp\")]\n\n\n논리 벡터를 사용해서 i행의 부분집합 ex) sel_area &lt;- world$area_km2 &lt; 10000\n\n\n\n\n\n\n\ndplyr 패키지에서는 체인(%&gt;%)으로 파이프 연산자를 사용하여 가독성이 좋고, 속도가 빠름\n\n\nselect() 함수를 사용하여 특정 열 선택\n\n\nselect(sf, name)\nselect(sf, name1:name2)\nselect(sf, position) ex) select(world, 2, 7)\nselect(sf, -name)\nselect(sf, name_new = name_old) : 열 선택하여 이름 변경\nselect(sf, contain(string)) : 특정 문자열을 포함한 칼럼을 선택\n\ncontain(), starts_with(), ends_with(), matches(), num_range()\n\n\n\nfilter() 함수를 사용하여 조건을 만족하는 특정 행 추출\n\n\nsubset() 함수와 동일한 기능\n\n\naggregate() 함수를 사용하여 지리 벡터 데이터의 속성 정보를 그룹별로 집계\n\n\naggregate(x ~ group, FUN, data, ...)\ndata.frame을 반환하며, 집계된 결과에 지리 기하(geometry) 정보는 없음\nworld[‘pop’]은 “sf” 객체이기 때문에 집계 결과가 “sf” 객체로 반환\nworld$pop은 숫자형 벡터이므로 aggregate() 함수를 적용하면 집계 결과가 “data.frame”으로 반환\n\n\nsummarize(), group_by() 함수를 이용한 지리벡터 데이터의 속성 정보를 그룹별로 집계\n\n\ngroup_by() : 기준이 되는 그룹을 지정\nsummarize() : 다양한 집계 함수를 사용\n\nsum(), n() : 합계와 개수 집계\ntop_n() : 상위 n개 추출\narrange() : 오름차순 정렬, desc()를 사용하면 내림차순 정렬\nst_drop_geometry() : geometry 열 제거\n\n\n\n\n\n\n\n\nR의 sf클래스 객체인 지리공간 벡터 데이터를 dplyr의 함수를 사용해서 두 테이블을 join하면 속성과 함께 지리공간 geometry 칼럼과 정보도 join된 후의 테이블에 자동으로 그대로 따라감\n\nleft_join()시 key variable이 있어야 함\n\n두 데이터 셋에 같은 이름을 가지는 변수가 없는 경우\n\n\n하나의 key variable의 이름을 바꿔서 통일시켜줌\n\n\nby를 사용하여 결합변수를 지정\n\n\n\n\n\n\n# coffee_data의 name_long변수 이름을 nm으로 변경\ncoffee_renamed &lt;- rename(coffee_data, nm = name_long)\n# by 사용하여 결합 변수를 지정하여 다른이름변수를 기준으로 조인하기\nworld_coffee1 &lt;- left_join(world, coffee_renamed, by = c(name_long = \"nm\"))\n\n\ninner_join() 함수를 사용하면 겹치는 행만 추출\n\nsetdiff() : 일치하지 않는 행 추출\ngrepl() : 텍스트 찾는 함수 (논리값으로 출력)\ngrep() : 텍스트 찾는 함수 (행 번호 출력)\n\n\n\n\n\n\ndplyr로 지리 벡터 데이터에 새로운 속성 만들기\n\nmutate() : 기존 데이터 셋에 새로 만든 변수(열) 추가\ntransmute() : 기존의 열은 모두 제거하고 새로 만든 열과 지리기하 geometry열만을 반환\n\ntidyr로 지리 벡터 데이터의 기존 속성을 합치거나 분리하기\n\nunite(data, 병합 열, sep = \"_\", remove = TRUE) : 기존 속성 열을 합쳐서 새로운 속성 열을 만듦\n\nremove = TRUE를 설정해주면 기존의 합치려는 두 개의 열은 제거되고, 새로 만들어진 열만 남음\n\nseparate() : 기존에 존재하는 열을 구분자를 기준으로 두 개의 열로 분리\n\n\n\nworld_unite &lt;- world %&gt;%\n  unite(\"con_reg\", continent:region_un, sep = \":\", remove = TRUE)\nnames(world_unite)\n# \"iso_a2\"    \"name_long\" \"con_reg\"   \"subregion\" \"type\"\n# \"area_km2\"  \"pop\"       \"lifeExp\"   \"gdpPercap\" \"geom\"\n\nworld_separate &lt;- world_unite %&gt;%\n  separate(con_reg, c(\"continent\", \"region_un\"), sep = \":\")\nnames(world_separate)\n# \"iso_a2\"    \"name_long\" \"continent\" \"region_un\" \"subregion\" \"type\"\n# \"area_km2\"  \"pop\"       \"lifeExp\"   \"gdpPercap\" \"geom\" \n\n\ndplyr로 지리 벡터 데이터의 속성 이름 바꾸기\n\nrename(data, new_name = old_name) : 특정 속성 변수 이름 변경\nsetNames(object = nm, nm) : 여러개의 속성 칼럼을 한꺼번에 변경 또는 부여\n\n\n\nworld %&gt;% rename(name = name_long)\n\nnew_names &lt;- c(\"i\", \"n\", \"c\", \"r\", \"s\", \"t\", \"a\", \"p\", \"l\", \"gP\", \"geom\")\nworld %&gt;% setNames(new_names)\n\n\n\n\n\n\n래스터 객체의 데이터 속성은 숫자형(numeric), 정수형(integer), 논리형(logical), 요인형(factor) 데이터를 지원하며, 문자형(character)은 지원하지 않음\n문자형으로 이루어진 범주형 변수 값을 가지고 래스터 객체의 속성을 만들고 싶으면\n\n\n문자형을 요인형으로 변환(또는 논리형으로 변환) -&gt; factor() 함수 사용\n\n\n요인형 값을 속성 값으로 하여 래스터 객체를 만듦\n\n\n래스터 객체의 모든 값을 추출하거나 전체 행을 추출 : values(), getValues()"
  },
  {
    "objectID": "Spatial_Information_Analysis.html#chapter4-spatial-data-operations",
    "href": "Spatial_Information_Analysis.html#chapter4-spatial-data-operations",
    "title": "Spatial Information Analysis",
    "section": "",
    "text": "st_intersects() : 공간 부분집합 추출(교집합)\n\n\n\n\n\n\n\n\n\n\nst_intersects() : 공간적으로 관련이 있는 객체를 출력\nst_disjoint() : 공간적으로 관련되지 않은 객체만 반환\nst_within() : 공간적으로 완전히 객체 내부에 있는 객체들만 출력\nst_touches() : 공간적으로 테두리에 있는 객체들만 출력\nst_is_within_distance() : 공간적으로 주어진 거리보다 가까운 객체들을 반환\nsparse = FALSE 매개변수를 설정하면 논리값으로 출력\n\n\nst_intersects(p, a)\n#&gt; Sparse geometry binary predicate list of length 4, where the predicate\n#&gt; was `intersects'\n#&gt;  1: 1\n#&gt;  2: 1\n#&gt;  3: (empty)\n#&gt;  4: (empty)\n\nst_intersects(p, a, sparse = FALSE)\n#&gt;       [,1]\n#&gt; [1,]  TRUE\n#&gt; [2,]  TRUE\n#&gt; [3,] FALSE\n#&gt; [4,] FALSE\n\nst_disjoint(p, a, sparse = FALSE)[, 1]\n#&gt; [1] FALSE FALSE  TRUE  TRUE\n\nst_within(p, a, sparse = FALSE )[, 1]\n#&gt; [1]  TRUE FALSE FALSE FALSE\n\nst_touches(p, a, sparse = FALSE)[, 1]\n#&gt; [1] FALSE  TRUE FALSE FALSE\n\nsel &lt;- st_is_within_distance(p, a, dist = 0.9) # can only return a sparse matrix\nlengths(sel) &gt; 0\n#&gt; [1]  TRUE  TRUE FALSE  TRUE\n\n\n\n\n\nst_join() : 공간 결합 함수\n\n\nrandom_joined = st_join(random_points, world[\"name_long\"]) ; random_joined\n#&gt; Simple feature collection with 10 features and 1 field\n#&gt; Geometry type: POINT\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: -158.1893 ymin: -42.91501 xmax: 165.1157 ymax: 80.5408\n#&gt; Geodetic CRS:  WGS 84\n#&gt; # A tibble: 10 × 2\n#&gt;                 geometry name_long\n#&gt;  *           &lt;POINT [°]&gt; &lt;chr&gt;    \n#&gt;  1 (-58.98475 -21.24278) Paraguay \n#&gt;  2  (-13.05963 25.42744) Morocco  \n#&gt;  3   (-158.1893 80.5408) &lt;NA&gt;     \n#&gt;  4  (-108.9239 27.80098) Mexico   \n#&gt;  5   (-9.246895 49.9822) &lt;NA&gt;     \n#&gt;  6  (-71.62251 20.15883) &lt;NA&gt;     \n#&gt;  7  (38.43318 -42.91501) &lt;NA&gt;     \n#&gt;  8  (-133.1956 6.053818) &lt;NA&gt;     \n#&gt;  9   (165.1157 38.16862) &lt;NA&gt;     \n#&gt; 10   (16.86581 53.86485) Poland\n\n\n\n\n\n\n기호(plotting symbols, characters) : pch\n기호의 크기 : cex\n선 두께 : lwd\n선 유형 : lty\n\n\n\n\nany() : 특정 값이 포함되어 있는지 확인할 때 유용, 여기서 TRUE가 있는지 확인 가능\n\n\nany(st_touches(cycle_hire, cycle_hire_osm, sparse = FALSE))\n#&gt; [1] FALSE\n\n\nlibrary(mapview)\nlibrary(tmap)\ntmap_mode(\"view\")\ntm_basemap(\"Stamen.Terrain\") +\n  tm_shape(cycle_hire) +\n  tm_symbols(col = \"red\", shape = 16, size = 0.5, alpha = .5) +\n  tm_shape(cycle_hire_osm) +\n  tm_symbols(col = \"blue\", shape = 16, size = 0.5, alpha = .5) +\n  tm_tiles(\"Stamen.TonerLabels\")\n\n\n\n\n\n\n\nst_transform() : 투영데이터로 변환을 위한 함수\nst_is_within_distance() : 임계 거리보다 가까운 객체들을 반환\n\n\ncycle_hire_P &lt;- st_transform(cycle_hire, 27700)\ncycle_hire_osm_P &lt;- st_transform(cycle_hire_osm, 27700)\nsel &lt;- st_is_within_distance(cycle_hire_P, cycle_hire_osm_P, dist = 20)\nsummary(lengths(sel) &gt; 0)\n#&gt;    Mode   FALSE    TRUE \n#&gt; logical     304     438\n\n\nst_join()을 사용하여 dist 인수를 추가하여 구할 수도 있음\n\nst_join()을 사용하면 조인된 결과의 행 수가 더 크다.\n이는 cycle_hire_P의 일부 자전거 대여소가 cycle_hire_osm_P와 여러개가 겹치기 때문임\n겹치는 점에 대한 값을 집계하고 평균을 반환하여 문제를 해결 가능\n\n\n\nz = st_join(cycle_hire_P, cycle_hire_osm_P,\n            join = st_is_within_distance, dist = 20)\nnrow(cycle_hire) ; nrow(z)\n#&gt; [1] 742\n#&gt; [1] 762\n\nz = z %&gt;%\n  group_by(id) %&gt;%\n  summarize(capacity = mean(capacity))\nnrow(z) == nrow(cycle_hire)\n#&gt; [1] TRUE\n\n\n\n\n\naggregate()와 group_by() %&gt;% summarize()를 활용하여 그룹별 통계값 계산(평균, 합 등)\n\n\n# aggregate() 사용\nnz_avheight &lt;- aggregate(x = nz_height, by = nz, FUN = mean)\nplot(nz_avheight[2])\n\n\n\n# group_by() %&gt;% summarize() 사용\nnz_avheight2 &lt;- nz %&gt;%\n  st_join(nz_height) %&gt;%\n  group_by(Name) %&gt;%\n  summarize(elevation = mean(elevation, na.rm = TRUE))\nplot(nz_avheight2[2])\n\n\n\n\n\nst_interpolate_aw() : 면적의 크기에 비례하게 계산(면적 가중 공간 보간)\n\n\nsum(incongruent$value)\n#&gt; [1] 45.41184\n\nagg_aw = st_interpolate_aw(incongruent[, \"value\"],\n                           aggregating_zones,\n                           extensive = TRUE)\n#&gt; Warning in st_interpolate_aw.sf(incongruent[, \"value\"], aggregating_zones, :\n#&gt; st_interpolate_aw assumes attributes are constant or uniform over areas of x\nagg_aw$value\n#&gt; [1] 19.61613 25.66872\n\n\n\n\n\n위상 관계는 binary인 반면 거리 관계는 연속적임\nst_distance() : 두 객체 사이의 거리 계산\n\n\nnz_heighest &lt;- nz_height %&gt;% top_n(n = 1, wt = elevation)\ncanterbury_centroid &lt;- st_centroid(canterbury)\n#&gt; Warning: st_centroid assumes attributes are constant over geometries\n\nst_distance(nz_heighest, canterbury_centroid)\n#&gt; Units: [m]\n#&gt;        [,1]\n#&gt; [1,] 115540\n\nco &lt;- filter(nz, grepl(\"Canter|Otag\", Name))\nst_distance(nz_height[1:3, ], co)\n#&gt; Units: [m]\n#&gt;           [,1]     [,2]\n#&gt; [1,] 123537.16 15497.72\n#&gt; [2,]  94282.77     0.00\n#&gt; [3,]  93018.56     0.00\n\nplot(st_geometry(co)[2])\nplot(st_geometry(nz_height)[2:3], add = TRUE)\n\n\n\n\n\n\n\n\n\n\n\ncellFromXY() or raster::extract() : 좌표값을 Cell ID로 변환\n\n\n\n\n\n\n\nid = cellFromXY(elev, xy = matrix(c(0.1, 0.1), ncol = 2))\nelev[id]\n#&gt;   elev\n#&gt; 1   16\nterra::extract(elev, matrix(c(0.1, 0.1), ncol = 2))\n#&gt;   elev\n#&gt; 1   16\n\nclip = rast(xmin = 0.9, xmax = 1.8, ymin = -0.45, ymax = 0.45,\n            res = 0.3, vals = rep(1, 9))\nelev[clip]\n#&gt;   elev\n#&gt; 1   18\n#&gt; 2   24\nterra::extract(elev, ext(clip))\n\n\noperator는 raster의 다양한 inputs을 받고, drop=FALSE로 설정했을 때, raster 객체를 반환\n\n\nelev[1:2]\n#&gt;   elev\n#&gt; 1    1\n#&gt; 2    2\nelev[2, 1:2]\n#&gt;   elev\n#&gt; 1    7\n#&gt; 2    8\nelev[1:2, drop = FALSE] # spatial subsetting with cell IDs\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 1, 2, 1  (nrow, ncol, nlyr)\n#&gt; resolution  : 0.5, 0.5  (x, y)\n#&gt; extent      : -1.5, -0.5, 1, 1.5  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : lon/lat WGS 84 (EPSG:4326) \n#&gt; source(s)   : memory\n#&gt; name        : elev \n#&gt; min value   :    1 \n#&gt; max value   :    2\nelev[2, 1:2, drop = FALSE] # spatial subsetting by row,column indices\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 1, 2, 1  (nrow, ncol, nlyr)\n#&gt; resolution  : 0.5, 0.5  (x, y)\n#&gt; extent      : -1.5, -0.5, 0.5, 1  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : lon/lat WGS 84 (EPSG:4326) \n#&gt; source(s)   : memory\n#&gt; name        : elev \n#&gt; min value   :    7 \n#&gt; max value   :    8\n\n\n\n\n\nelev + elev # 더하기\nelev^2      # 제곱\nlog(elev)   # 로그\nelev &gt; 5    # 논리"
  },
  {
    "objectID": "Spatial_Information_Analysis.html#tmap을-활용한-시각화",
    "href": "Spatial_Information_Analysis.html#tmap을-활용한-시각화",
    "title": "Spatial Information Analysis",
    "section": "",
    "text": "tmap을 plot하기 위해서는 우선 tm_shape()로 지정해야하며, + 연산자로 레이어를 추가해야함\n\nex) tm_polygons(), tm_raster(), tm_borders(), tm_symbols() 등\n\nInteractive maps : tmap_mode()를 사용하여 \"plot\",과 \"view\"모드 사용 가능\nFacet : 하나의 창에 여러 맵을 동시에 그리기\n\nFacet 하는 3가지 방법\n\n여러변수 이름 추가\nby argument of tm_facets로 공간 데이터를 나누기\ntmap_arrange() 사용\n\n\n\ntm_basemap() : 지도를 표현할 수 있는 바탕이 되는 지도\n\n\n# 1. 여러 변수 이름 추가\ntmap_mode(\"plot\")\ndata(World)\ntm_shape(World) +\n  tm_polygons(c(\"HPI\", \"economy\")) +\n  tm_facets(sync = TRUE, ncol = 2)\n\n\n\n\n\n# 2. by argument of `tm_facets`로 공간 데이터 나누기\ntmap_mode(\"plot\")\ndata(NLD_muni)\nNLD_muni$perc_men &lt;- NLD_muni$pop_men / NLD_muni$population * 100\ntm_shape(NLD_muni) +\n  tm_polygons(\"perc_men\", palette = \"RdYlBu\") +\n  tm_facets(by = \"province\")\n\n\n\n\n\n# 3. `tmap_arrange` 함수 사용 : 각각 그린다음에 배치\ntmap_mode(\"plot\")\ndata(NLD_muni)\ntm1 &lt;- tm_shape(NLD_muni) + tm_polygons(\"population\", convert2density = TRUE)\ntm2 &lt;- tm_shape(NLD_muni) + tm_bubbles(size = \"population\")\ntmap_arrange(tm1, tm2)\n\n\n\n\n\ntmap_mode(\"view\")\ndata(World, metro, rivers, land)\ntm_basemap(\"Stamen.Watercolor\") +\n  tm_shape(metro) + tm_bubbles(size = \"pop2020\", col = \"red\") +\n  tm_tiles(\"Stamen.TonerLabels\")\n\n\n\n\n\n\n\nOption and styles\n\ntm_layout() : map layout 지정\ntm_options() 내에서 설정\n\ntmap_options_diff() : default tmap options과 차이점 출력\ntmap_options_reset() : default tmap options으로 설정\n\nreset을 해주지 않으면 option이 계속 설정되어있음\n\n\ntmap_style() : 지도 스타일 설정\n\n\n\ntmap_mode(\"plot\")\ntm_shape(World) +\n  tm_polygons(\"HPI\") +\n  tm_layout(bg.color = \"skyblue\", inner.margins = c(0, .02, .02, .02))\n\n\n\n\n\ntmap_options(bg.color = \"black\", legend.text.color = \"white\")\ntm_shape(World) + tm_polygons(\"HPI\", legend.title = \"Happy Planet Index\")\n\n\n\n\n\ntmap_style(\"classic\")\n## tmap style set to \"classic\"\n## other available styles are: \"white\", \"gray\", \"natural\", \"cobalt\",\n## \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\"\n\ntm_shape(World) +\n  tm_polygons(\"HPI\", legend.title = \"Happy Planet Index\")\n\n\n\n\n\nExporting maps\n\n\ntm &lt;- tm_shape(World) +\n  tm_polygons(\"HPI\", legend.title = \"Happy Planet Index\")\n\n## save an image (\"plot\" mode)\ntmap_save(tm, filename = \"./Spatial_Information_Analysis/world_map.png\")\n\n## save as stand-alone HTML file (\"view\" mode)\ntmap_save(tm, filename = \"./Spatial_Information_Analysis/world_map.html\")\n\n\nQuick thematic map\n\n\nqtm(World, fill = \"HPI\", fill.pallete = \"RdYlGn\")"
  },
  {
    "objectID": "Spatial_Information_Analysis.html#chapter5-geometry-operations",
    "href": "Spatial_Information_Analysis.html#chapter5-geometry-operations",
    "title": "Spatial Information Analysis",
    "section": "",
    "text": "단순화는 일반적으로 더 작은 축척 지도에서 사용하기 위한 벡터 객체(선, 다각형)의 일반화를 위한 프로세스\nst_simplify() : 정점을 제거하여 선을 단순화시킴\n\ndTolerance : 단위가 m이며 커질수록 더 단순화\n\n\n\nseine_simp &lt;- st_simplify(seine, dTolerance = 2000) # 2000m\nplot(seine)\nplot(seine_simp)\nobject.size(seine) ; object.size(seine_simp)\n#&gt; 18096 bytes  9112 bytes\n\n\n\n\n\n\n\n단순화는 다각형에도 적용 가능\nst_simplify()를 사용하였을 때, 영역이 겹치는 경우도 발생\nrmapshaper 패키지의 ms_simplify() 함수를 사용\nkeep_shapes = TRUE : 개체 수는 그대로 유지\n\n\nus_states\nus_states2163 &lt;- st_transform(us_states, 2163)\nus_states2163\n\nus_states_simp1 &lt;- st_simplify(us_states2163, dTolerance = 100000)\nplot(us_states[1])\nplot(us_states_simp1[1])\n\nus_states2163$AREA &lt;- as.numeric(us_states2163$AREA)\n\nlibrary(rmapshaper)\nus_states_simp2 &lt;- rmapshaper::ms_simplify(us_states2163, keep = 0.01,\n                                           keep_shapes = FALSE)\nplot(us_states_simp2[1])\n\n\n\n\n\n\n\n\n\n\n가장 일반적으로 사용되는 중심 연산은 지리적 중심 : 공간객체의 질량 중심\nst_centroid() : 지리적 중심을 생성하지만, 때때로 지리적 중심이 상위 개체의 경계를 벗어나는 경우가 발생\nst_point_on_surface() : 상위 개체 위에 중심이 생성\n\n\nnz_centroid &lt;- st_centroid(nz)\nseine_centroid &lt;- st_centroid(seine)\n\nnz_pos &lt;- st_point_on_surface(nz)\nseine_pos &lt;- st_point_on_surface(seine)\n\nplot(st_geometry(nz), main = \"nz\")\nplot(nz_centroid ,add=T, col=\"black\")\nplot(nz_pos ,add=T, col=\"red\")\n\nplot(st_geometry(seine), main = \"seine\")\nplot(seine_centroid ,add=T, col=\"black\")\nplot(seine_pos ,add=T, col=\"red\")\n\n\n\n\n\n\n\n\n\n\n버퍼 : 기하학적 특징의 주어진 거리 내 영역을 나타내는 다각형\n지리데이터 분석에 자주 활용됨\nst_buffer() : 버퍼 생성 함수, 최소 두 개의 인수가 필요함\n\n\nseine_buff_5km &lt;- st_buffer(seine, joinStyle = \"ROUND\", dist = 5000)\nseine_buff_20km &lt;- st_buffer(seine, dist = 20000)\n\nplot(seine,col=\"black\", reset = FALSE)\nplot(seine_buff_5km, col=adjustcolor(1:3, alpha = 0.2), add=T)\n\nplot(seine,col=\"black\", reset = FALSE)\ncol1 &lt;- adjustcolor(\"red\", alpha=0.2)\ncol2 &lt;- adjustcolor(\"blue\", alpha=0.2)\ncol3 &lt;- adjustcolor(\"green\", alpha=0.2)\nplot(seine_buff_20km, col=c(col1,col2,col3), add=T)\n\n\n\n\n\n\n\n\n\n\n왜곡되거나 잘못 투영된 지도를 기반으로 생성된 geometry를 재투영하거나 개선할 때 많은 Affine 변환이 적용\n이동 : 맵 단위로 모든 포인트가 동일한 거리만큼 이동\n\n\nnz_sfc &lt;- st_geometry(nz)\nnz_shift &lt;- nz_sfc + c(0, 100000)\nplot(nz_sfc)\nplot(nz_shift,add=T, col=\"Red\")\n\n\n\n\n\n배율 조정 : 개체를 요소만큼 확대하거나 축소\n\n모든 기하 도형의 토폴로지 관계를 그대로 유지하면서 원점 좌표와 관련된 모든 좌표값을 늘리거나 줄일 수 있음\n중심점을 기준으로 기하 도형의 차이 만큼을 늘리고 0.5배 줄인 다음 다시 중심점을 더해줌\n\n\n\nnz_centroid_sfc &lt;- st_centroid(nz_sfc)\nnz_scale &lt;- (nz_sfc - nz_centroid_sfc) * 0.5 + nz_centroid_sfc\n\nplot(nz_sfc)\nplot(nz_scale, add=T, col=\"Red\")\n\n\n\n\n\n회전 : 2차원 좌표의 회전하기 위한 회전변환행렬\n\n\nmatrix(c(cos(30), sin(30), -sin(30), cos(30)), nrow = 2, ncol = 2)\n#&gt;            [,1]      [,2]\n#&gt; [1,]  0.1542514 0.9880316\n#&gt; [2,] -0.9880316 0.1542514\n\nrotation &lt;- function(a){\n  r = a * pi / 180 #degrees to radians\n  matrix(c(cos(r), sin(r), -sin(r), cos(r)), nrow = 2, ncol = 2)\n}\nnz_rotate &lt;- (nz_sfc - nz_centroid_sfc) * rotation(30) + nz_centroid_sfc\n\nplot(nz_sfc)\nplot(nz_rotate, add=T, col=\"red\")\n\n\n\n\n\n\n\n\n공간 클리핑은 영향을 받는 일부 형상의 지오메트리 열의 변경을 수반하는 공간 부분 집합의 한 형태\n\n\nb &lt;- st_sfc(st_point(c(0, 1)), st_point(c(1, 1))) # create 2 points\nb &lt;- st_buffer(b, dist = 1) # convert points to circles\nplot(b, border = \"grey\")\ntext(x = c(-0.5, 1.5), y = 1, labels = c(\"x\", \"y\"), cex = 3) # add text\n\n\n\n\n\nst_intersection() : X∩Y (x와 y의 교집합)\nst_difference() : X-Y (x와 y의 차집합)\nst_union() : X∪Y (x와 y의 합집합)\nst_sym_difference() : (X∩Y)^c (드모르간의 법칙)\n\n\npar(mfrow = c(2,2))\n\nx &lt;- b[1] ; y &lt;- b[2]\n\n# X ∩ Y\nx_and_y &lt;- st_intersection(x, y)\nplot(b, border = \"grey\", main = \"X ∩ Y\")\nplot(x_and_y, col = \"lightgrey\", border = \"grey\", add = TRUE)\ntext(x = c(-0.5, 1.5), y = 1, labels = c(\"x\", \"y\"), cex = 3)\n\n# X - Y\nx_dif_y &lt;- st_difference(x,y)\nplot(b, border = \"grey\", main = \"X - Y\")\nplot(x_dif_y, col = \"lightgrey\", border = \"grey\", add = TRUE)\ntext(x = c(-0.5, 1.5), y = 1, labels = c(\"x\", \"y\"), cex = 3)\n\n# X U Y\nx_union_y &lt;- st_union(x,y)\nplot(b, border = \"grey\", main = \"X U Y\")\nplot(x_union_y, col = \"lightgrey\", border = \"grey\", add = TRUE)\ntext(x = c(-0.5, 1.5), y = 1, labels = c(\"x\", \"y\"), cex = 3)\n\n# (X ∩ Y)^c\nx_sdif_y &lt;- st_sym_difference(x,y)\nplot(b, border = \"grey\", main = \"(X ∩ Y)^c\")\nplot(x_sdif_y, col = \"lightgrey\", border = \"grey\", add = TRUE)\ntext(x = c(-0.5, 1.5), y = 1, labels = c(\"x\", \"y\"), cex = 3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n클리핑 오브젝트는 지오메트리를 변경할 수 있지만 오브젝트의 부분 집합을 지정할 수도 있으며 클리핑/하위 설정 오브젝트와 교차하는 피쳐만 반환할 수도 있음\nst_sample() : x와 y의 범위 내에서 점들의 간단한 무작위 분포를 생성\n\n\nbb = st_bbox(st_union(x, y))\nbox = st_as_sfc(bb)\nset.seed(2017)\n\np = st_sample(x = box, size = 10)\nx_and_y = st_intersection(x, y)\n\nplot(b, border = \"grey\")\nplot(p, add=T)\n\n\n\n\n\nX와 Y 둘 다와 교차하는 점만을 반환하는 방법\n\n\n## 1번째방법\np_xy1 &lt;- p[x_and_y]\nplot(p_xy1, add=T, col=\"red\")\n\n## 2번째방법\np_xy2 &lt;- st_intersection(p, x_and_y)\nplot(p_xy2, add=T, col=\"blue\")\n\n## 3번째방법\nsel_p_xy &lt;- st_intersects(p, x, sparse = FALSE)[, 1] &\n  st_intersects(p, y, sparse = FALSE)[, 1]\np_xy3 &lt;- p[sel_p_xy]\nplot(p_xy3, add=T, col=\"green\")\n\n\n\n\n\n\n\n\n\n\n미국의 49개 주의 정보를 4개 지역으로 재구분\n\n\nplot(us_states[6])\n\n\n\n## 1. aggregate함수\nregions &lt;- aggregate(x = us_states[, \"total_pop_15\"], by = list(us_states$REGION),\n                     FUN = sum, na.rm = TRUE)\nplot(regions[2])\n\n\n\n## 2. group_by, summarize함수\nregions2 &lt;- us_states %&gt;% group_by(REGION) %&gt;%\n  summarize(pop = sum(total_pop_15, na.rm = TRUE))\n\nplot(regions2[2])\n\n\n\n\n\n위에서 aggregate()와 summarize()가 모두 지오메트리를 결합하고 st_union()을 사용하면 지오메트리만을 분해\n\n\nus_west &lt;- us_states[us_states$REGION == \"West\", ]\nplot(us_west[6])\n\n\n\nus_west_union &lt;- st_union(us_west)\nplot(us_west_union)\n\n\n\ntexas &lt;- us_states[us_states$NAME == \"Texas\", ]\ntexas_union &lt;- st_union(us_west_union, texas)\nplot(texas_union)\n\n\n\n\n\n\n\n\nst_cast() : 지오메트리 유형을 변환\n\n\nmultipoint &lt;- st_multipoint(matrix(c(1, 3, 5, 1, 3, 1), ncol = 2))\nlinestring &lt;- st_cast(multipoint, \"LINESTRING\")\npolyg &lt;- st_cast(multipoint, \"POLYGON\")\n\nplot(multipoint)\nplot(linestring)\nplot(polyg)\n\nst_length(linestring) # 길이 계산\n# [1] 5.656854\nst_area(polyg) # 면적 계산\n# [1] 4\n\n\n\n\n\n\n\nmultilinestring : 여러 개의 linestring을 하나의 묶음으로 처리\n\n\n\n\n\n\n\nmultilinestring은 각 선 세그먼트에 이름을 추가하거나 단일 선 길이를 계산할 수 없는 등 수행할 수 있는 작업 수가 제한됨\nst_cast() 함수를 사용하여 하나의 multilinestring을 세 개의 linestring로 분리\n\n\nlinestring_sf2 = st_cast(multilinestring_sf, \"LINESTRING\")\nlinestring_sf2\n#&gt; Simple feature collection with 3 features and 0 fields\n#&gt; Geometry type: LINESTRING\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: 1 ymin: 1 xmax: 4 ymax: 5\n#&gt; CRS:           NA\n#&gt;                    geom\n#&gt; 1 LINESTRING (1 5, 4 3)\n#&gt; 2 LINESTRING (4 4, 4 1)\n#&gt; 3 LINESTRING (2 2, 4 2)\n\n\nname과 length 추가\n\n\nlinestring_sf2$name &lt;- c(\"Riddle Rd\", \"Marshall Ave\", \"Foulke St\")\nlinestring_sf2$length &lt;- st_length(linestring_sf2)\nlinestring_sf2\n#&gt; Simple feature collection with 3 features and 2 fields\n#&gt; Geometry type: LINESTRING\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: 1 ymin: 1 xmax: 4 ymax: 5\n#&gt; CRS:           NA\n#&gt;                    geom         name   length\n#&gt; 1 LINESTRING (1 5, 4 3)    Riddle Rd 3.605551\n#&gt; 2 LINESTRING (4 4, 4 1) Marshall Ave 3.000000\n#&gt; 3 LINESTRING (2 2, 4 2)    Foulke St 2.000000\nplot(linestring_sf2[2])\n\n\n\n\n\n\n\n\n\n\n\n다른 공간 객체에 의해 중첩된 래스터에서 값을 추출하는 방법\n공간 출력을 검색하기 위해 거의 동일한 부분 집합 구문(많이 겹치는 부분)을 사용\ndrop = FALSE를 설정하여 행렬 구조를 유지\ncell 중간점이 clip과 겹치는 셀을 포함하는 래스터 개체를 반환\n\n\nelev &lt;- rast(system.file(\"raster/elev.tif\", package = \"spData\"))\nclip &lt;- rast(xmin = 0.9, xmax = 1.8, ymin = -0.45, ymax = 0.45,\n             resolution = 0.3, vals = rep(1, 9))\nplot(elev)\nplot(clip, add=T)\n\n\n\nelve_clip &lt;- elev[clip, drop = FALSE]\nplot(elve_clip)\n\n\n\nelev_raster &lt;- rast(system.file(\"raster/elev.tif\", package = \"spData\"))\nrcc &lt;- vect(xyFromCell(elev_raster, cell = 1:ncell(elev_raster))) # 셀의 중앙점 표시\nxyFromCell(elev_raster,1) # 1번 셀의 중앙점 좌표\n#&gt;          x    y\n#&gt; [1,] -1.25 1.25\nplot(elev)\nplot(rcc,add=T)\nplot(clip, add=T)\n\n\n\n\n\n\n\n\n다른 투사 및 해상도를 가진 두 이미지를 병합하려할 때 사용\nextend() : 래스터 범위 확장\n\n새로 추가된 행과 열은 값 매개변수의 기본값(예 : NA)를 가짐\n\norigin() : 래스터의 원점 좌표를 반환\n\n래스터의 원점은 좌표(0,0)에 가장 가까운 셀 모서리\n\n\n\nelev &lt;- rast(system.file(\"raster/elev.tif\", package = \"spData\"))\nelev_2 &lt;- extend(elev, c(1,2), snap=\"near\") # 아래/위 1행, 좌/우 2열 확장\nplot(elev)\n\n\n\nplot(elev_2, colNA=\"gray\")\n\nelev_3 &lt;- elev + elev_2\n#&gt; Error: [+] extents do not match\n\nelev_4 &lt;- extend(elev, elev_2)\nplot(elev_4, colNA=\"gray\")\n\norigin(elev_4)\n#&gt; [1] 0 0\n\norigin(elev_4) &lt;- c(0.25, 0.25)\nplot(elev_4, colNA=\"black\", add=T)\n\n\n\n\n\n\n\n\n래스터 데이터 셋은 해상도가 서로 다를 수 있음\n해상도를 match 시키기 위해 하나의 래스터 해상도를 감소(aggregate())시키거나 증가(disagg()) 시켜야 함\n\n\n# devtools::install_github(\"geocompr/geocompkg\")\ndem &lt;- rast(system.file(\"raster/dem.tif\", package = \"spDataLarge\"))\ndem_agg &lt;- aggregate(dem, fact = 5, fun = mean)\ndem_disagg &lt;- disagg(dem_agg, fact = 5, method = \"bilinear\")\nplot(dem)\n\n\n\nplot(dem_agg)\n\n\n\nplot(dem_disagg)\n\n\n\nidentical(dem, dem_disagg)\n#&gt; [1] FALSE\n\n\n새롭게 만들어지는 cell의 값을 만드는 두가지 방법\n\nDefault method(method = “near”) : 입력 셀의 값을 모든 출력 셀에 제공\nbilinear method : 입력 이미지의 가장 가까운 4개의 픽셀 중심을 사용하여 거리에 의해 가중된 평균을 계산\n\n\n\n\n\n\nResampling : 원래 그리드에서 다른 그리드로 래스터 값을 전송하는 프로세스\n이 프로세스는 원래 래스터의 값을 가지고, 사용자 지정 해상도와 원점을 가지고 대상 래스터의 새 값을 다시 계산함\n해상도/원점이 다른 래스터의 값을 재계산(추정)하는 방법\n\nNearest neighbor : 원래 래스터의 가장 가까운 셀 값을 대상 래스터의 셀에 할당. 속도가 빠르고 일반적으로 범주형 래스터에 적합\nBilinear interpolation(이중선형보간) : 원래 래스터에서 가장 가까운 4개의 셀의 가중 평균을 대상 1개의 셀에 할당. 연속 래스터를 위한 가장 빠른 방법\nCubic interpolation(큐빅 보간) : 본 래스터의 가장 가까운 16개 셀의 값을 사용하여 출력 셀 값을 결정하고 3차 다항식 함수를 적용. 연속 래스터에 사용. 2선형 보간보다 더 매끄러운 표면을 만들지만, 계산적으로 까다로움\nCubic spline interpolation(큐빅 스플라인 보간) : 원래 래스터의 가장 가까운 16개의 셀의 값을 사용하여 출력 셀 값을 결정하지만 큐빅 스플라인(3차 다항식 함수)을 적용\nLanczos windowed sinc resampling(Lanczos 윈도우 재샘플링) : 원래 래스터의 가장 가까운 셀 36개의 값을 사용하여 출력 셀 값을 결정\nsum\nmin, q1, med, q3, max, average, mode, rms\n\nNearest neighbor은 범주형 래스터에 적합한 반면, 모든 방법은 연속형 래스터에 사용\nresample(x, y, method = \"bilinear\", filename = \"\", ...) : 리샘플링 함수\n\n\nlibrary(terra)\n\ntarget_rast &lt;- rast(xmin = 794600, xmax = 798200,\n                    ymin = 8931800, ymax = 8935400,\n                    resolution = 150, crs = \"EPSG:32717\")\ntarget_rast\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 24, 24, 1  (nrow, ncol, nlyr)\n#&gt; resolution  : 150, 150  (x, y)\n#&gt; extent      : 794600, 798200, 8931800, 8935400  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : WGS 84 / UTM zone 17S (EPSG:32717)\n\nplot(dem)\n\n\n\nplot(target_rast)\n\n\n\n\n\n\"near\" : 셀에 가장 가까운 픽셀에서 값을 가져옴\n\n\ndem_resampl_1 &lt;- resample(dem, y = target_rast, method = \"near\")\nplot(dem_resampl_1)\n\n\n\n\n\n\"bilinear\" : 네 개의 가장 가까운 셀의 가중 평균\n\n\ndem_resampl_2 &lt;- resample(dem, y = target_rast, method = \"bilinear\")\nplot(dem_resampl_2)\n\n\n\n\n\n\"average\" : 각각의 새로운 셀이 중복되는 모든 입력 셀의 가중 평균\n\n\ndem_resampl_3 &lt;- resample(dem, y = target_rast, method = \"average\")\nplot(dem_resampl_3)"
  },
  {
    "objectID": "Spatial_Information_Analysis.html#chapter-6-raster-vector-interactions",
    "href": "Spatial_Information_Analysis.html#chapter-6-raster-vector-interactions",
    "title": "Spatial Information Analysis",
    "section": "",
    "text": "입력 래스터 데이터 세트의 범위가 관심 영역보다 클 경우 래스터 자르기(Cropping) 및 마스킹(Masking)은 입력 데이터의 공간 범위를 통합하는 데 유용함\n두 작업 모두 후속 분석 단계에 대한 객체 메모리 사용 및 관련 계산 리소스를 줄이고 래스터 데이터를 포함하는 매력적인 맵을 만들기 전에 필요한 전처리 단계임\n대상 개체와 자르기 개체는 모두 동일한 투영을 가져야 함\ncrop() : 두 번째 인수에 대한 래스터를 잘라냄\nmask() : 두 번째 인수에 전달된 개체의 경계를 벗어나는 값을 NA로 설정\n\n대부분의 경우 crop()과 mask()를 함께 사용\n\n\n\nsrtm &lt;- rast(system.file(\"raster/srtm.tif\", package = \"spDataLarge\"))\nzion &lt;- read_sf(system.file(\"vector/zion.gpkg\", package = \"spDataLarge\"))\nzion &lt;- st_transform(zion, crs(srtm)) # zion을 srtm 좌표계랑 동일하게\nplot(srtm)\nplot(vect(zion),add=T)\n\n\n\nsrtm_cropped &lt;- crop(srtm, vect(zion))\nplot(srtm_cropped)\n\n\n\nsrtm_masked &lt;- mask(srtm, vect(zion))\nplot(srtm_masked)\n\n\n\nsrtm_cropped &lt;- crop(srtm, vect(zion))\nsrtm_final &lt;- mask(srtm_cropped, vect(zion))\nplot(srtm_final)\n\n\n\n\n\nupdatevalue = 0 : 외부의 모든 픽셀이 0으로 설정\ninverse = TRUE : 경계 내에 있는 것들이 마스킹\n\n\nsrtm_update0 &lt;- mask(srtm, vect(zion), updatevalue = 0)\nplot(srtm_update0)\n\n\n\nsrtm_inv_masked &lt;- mask(srtm, vect(zion), inverse = TRUE)\nplot(srtm_inv_masked)\n\n\n\n\n\n\n\n## Original / Crop / Mask / Inverse Map\nlibrary(tmap)\nlibrary(rcartocolor)\n\nterrain_colors = carto_pal(7, \"Geyser\")\n\npz1 = tm_shape(srtm) +\n  tm_raster(palette = terrain_colors, legend.show = FALSE, style = \"cont\") +\n  tm_shape(zion) +\n  tm_borders(lwd = 2) +\n  tm_layout(main.title = \"A. Original\", inner.margins = 0)\n\npz2 = tm_shape(srtm_cropped) +\n  tm_raster(palette = terrain_colors, legend.show = FALSE, style = \"cont\") +\n  tm_shape(zion) +\n  tm_borders(lwd = 2) +\n  tm_layout(main.title = \"B. Crop\", inner.margins = 0)\n\npz3 = tm_shape(srtm_masked) +\n  tm_raster(palette = terrain_colors, legend.show = FALSE, style = \"cont\") +\n  tm_shape(zion) +\n  tm_borders(lwd = 2) +\n  tm_layout(main.title = \"C. Mask\", inner.margins = 0)\n\npz4 = tm_shape(srtm_inv_masked) +\n  tm_raster(palette = terrain_colors, legend.show = FALSE, style = \"cont\") +\n  tm_shape(zion) +\n  tm_borders(lwd = 2) +\n  tm_layout(main.title = \"D. Inverse mask\", inner.margins = 0)\n\ntmap_arrange(pz1, pz2, pz3, pz4, ncol = 4, asp = NA)\n\n\n\n\n\n\n\n\n\n특정 위치에 있는 대상 래스터와 관련된 값을 식별하여 반환\n\n\ndata(\"zion_points\", package = \"spDataLarge\")\nelevation &lt;-terra::extract(srtm, vect(zion_points))\nzion_points &lt;- cbind(zion_points, elevation)\nplot(srtm)\nplot(vect(zion),add=T)\nplot(zion_points,col=\"black\", pch = 19, cex = 0.5, add=T)\n#&gt; Warning in plot.sf(zion_points, col = \"black\", pch = 19, cex = 0.5, add = T):\n#&gt; ignoring all but the first attribute\n\n\n\n\n\nst_segmentize() : 제공된 density로 line을 따라 point를 추가\n\ndfMaxLength : 최대 점의 개수\n\nst_cast() : 추가된 point를 “POINT” 형식으로 변환\n\n\nzion_transect &lt;- cbind(c(-113.2, -112.9), c(37.45, 37.2)) %&gt;%\n  st_linestring() %&gt;%\n  st_sfc(crs = crs(srtm)) %&gt;%\n  st_sf()\nzion_transect$id &lt;- 1:nrow(zion_transect)\nzion_transect &lt;- st_segmentize(zion_transect, dfMaxLength = 250)\nzion_transect &lt;- st_cast(zion_transect, \"POINT\")\n#&gt; Warning in st_cast.sf(zion_transect, \"POINT\"): repeating attributes for all\n#&gt; sub-geometries for which they may not be constant\n\n\nzion_transect &lt;- zion_transect %&gt;%\n  group_by(id) %&gt;%\n  mutate(dist = st_distance(geometry)[, 1])\n\nzion_elev &lt;- terra::extract(srtm, vect(zion_transect))\nzion_transect &lt;- cbind(zion_transect, zion_elev)\n\n\n많은 Point들 간의 거리를 산출 : 첫번째 점들과 이후의 각각의 점들 사이의 거리 계산하기\n횡단면의 각 점에 대한 고도값을 추출하고 이 정보를 주요 객체와 결합\n\n\n\n\nlibrary(tmap)\nlibrary(grid)\nlibrary(ggplot2)\nzion_transect_line &lt;- cbind(c(-113.2, -112.9), c(37.45, 37.2)) %&gt;%\n  st_linestring() %&gt;%\n  st_sfc(crs = crs(srtm)) %&gt;%\n  st_sf()\nzion_transect_points &lt;- st_cast(zion_transect, \"POINT\")[c(1, nrow(zion_transect)), ]\nzion_transect_points$name &lt;- c(\"start\", \"end\")\nrast_poly_line &lt;- tm_shape(srtm) +\n  tm_raster(palette = terrain_colors, title = \"Elevation (m)\",\n            legend.show = TRUE, style = \"cont\") +\n  tm_shape(zion) +\n  tm_borders(lwd = 2) +\n  tm_shape(zion_transect_line) +\n  tm_lines(col = \"black\", lwd = 4) +\n  tm_shape(zion_transect_points) +\n  tm_text(\"name\", bg.color = \"white\", bg.alpha = 0.75, auto.placement = TRUE) +\n  tm_layout(legend.frame = TRUE, legend.position = c(\"right\", \"top\"))\nrast_poly_line\n\n\n\nplot_transect &lt;- ggplot(zion_transect, aes(as.numeric(dist), srtm)) +\n  geom_line() +\n  labs(x = \"Distance (m)\", y = \"Elevation (m a.s.l.)\") +\n  theme_bw() +\n  # facet_wrap(~id) +\n  theme(plot.margin = unit(c(5.5, 15.5, 5.5, 5.5), \"pt\"))\nplot_transect\n\n\n\n\n## grid 그리기\ngrid.newpage() #This function erases the current device or moves to a new page.\npushViewport(viewport(layout = grid.layout(2, 2, heights = unit(c(0.25, 5), \"null\"))))\ngrid.text(\"A. Line extraction\", vp = viewport(layout.pos.row = 1, layout.pos.col = 1))\ngrid.text(\"B. Elevation along the line\", vp = viewport(layout.pos.row = 1, layout.pos.col = 2))\nprint(rast_poly_line, vp = viewport(layout.pos.row = 2, layout.pos.col = 1))\nprint(plot_transect, vp = viewport(layout.pos.row = 2, layout.pos.col = 2))\n\n\n\n\n\nzion_srtm_values &lt;- terra::extract(x = srtm, y = vect(zion))\ngroup_by(zion_srtm_values, ID) %&gt;%\n  summarize(across(srtm, list(min = min, mean = mean, max = max)))\n#&gt; # A tibble: 1 × 4\n#&gt;      ID srtm_min srtm_mean srtm_max\n#&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n#&gt; 1     1     1122     1818.     2661\n\n\n단일 영역을 특성화하거나 여러 영역을 비교하기 위해 폴리곤 당 래스터 값에 대한 요약 통계 생성\n\n\n\n\n\n\n벡터 객체를 래스터 객체의 표현으로 변환\n\n\ncycle_hire_osm &lt;- spData::cycle_hire_osm\ncycle_hire_osm_projected &lt;- st_transform(cycle_hire_osm, \"EPSG:27700\")\nraster_template &lt;- rast(ext(cycle_hire_osm_projected), resolution = 1000,\n                        crs = st_crs(cycle_hire_osm_projected)$wkt) # ext : 경계값\nch_raster1 &lt;- rasterize(vect(cycle_hire_osm_projected), raster_template,\n                        field = 1)\nch_raster2 &lt;- rasterize(vect(cycle_hire_osm_projected), raster_template,\n                        fun = \"length\")\nch_raster3 &lt;- rasterize(vect(cycle_hire_osm_projected), raster_template,\n                        field = \"capacity\", fun = sum)\n\n\n\n\n\n\n\n폴리곤 객체를 여러 줄 문자열로 casting한 후 0.5도의 해상도로 탬플릿 래스터 생성\n\ntouches = TRUE : 경계에 해당되는 래스터만 색칠(FALSE이면 경계 내부까지)\n\n\n\ncalifornia &lt;- dplyr::filter(us_states, NAME == \"California\")\ncalifornia_borders &lt;- st_cast(california, \"MULTILINESTRING\")\nraster_template2 &lt;- rast(ext(california),\n                         resolution = 0.5,\n                         crs = st_crs(california)$wkt)\ncalifornia_raster1 &lt;-\n  rasterize(vect(california_borders), raster_template2,\n            touches = TRUE) # touches = TRUE : 경계값만\ncalifornia_raster2 &lt;-\n  rasterize(vect(california), raster_template2)\n# with `touches = FALSE` by default, which selects only cell\n\n\n\n\n\n\n\n\n\n\n공간적으로 연속적인 래스터 데이터를 점, 선 또는 다각형과 같은 공간적으로 분리된 벡터 데이터로 변환\n벡터화의 가장 간단한 형태는 래스터 셀의 중심부를 점으로 변환하는 것\nas.points() : 모든 raster grid 셀에 대해 중심점으로 반환\n\n\nelev &lt;- rast(system.file(\"raster/elev.tif\", package = \"spData\"))\nelev_point &lt;- as.points(elev) %&gt;%\n  st_as_sf()\nplot(elev)\n\n\n\nplot(elev_point)\n\n\n\n\n\ncontour() : 선에 해당하는 수치 표현\n등고선의 생성 : 공간 벡터화의 또 다른 일반적인 유형은 연속적인 높이 또는 온도(등온선)의 선을 나타내는 등고선 생성\n\n\ndem = rast(system.file(\"raster/dem.tif\", package = \"spDataLarge\"))\ncl = as.contour(dem)\nplot(dem, axes = FALSE)\nplot(cl, add = TRUE)\n\n\n\nplot(dem, axes = FALSE)\ncontour(dem, add = T) # 수치까지 표현\n\n\n\n\n\nas.polygons() : 래스터를 다각형으로 변환하는 것\n\n\ngrain &lt;- rast(system.file(\"raster/grain.tif\", package = \"spData\"))\ngrain_poly &lt;- as.polygons(grain) %&gt;%\n  st_as_sf()\nplot(grain)\n\n\n\nplot(grain_poly)"
  },
  {
    "objectID": "Spatial_Information_Analysis.html#chapter-7-reprojecting-geographic-data",
    "href": "Spatial_Information_Analysis.html#chapter-7-reprojecting-geographic-data",
    "title": "Spatial Information Analysis",
    "section": "",
    "text": "CRS를 설명할 수 있는 여러가지 방법\n\n단순하지만 “lon/lat 좌표”와 같이 모호할 수 있는 문장\n\n\n공식화되었지만 지금은 구식인 proj4 strings\n\n\nproj=lonlat +ellps=WGS84 +datum=WGS84 +no_defs\n\n\nEPSG:4326과 같이 식별되는 authority:code 텍스트 문자열\n\n-&gt; 3번째 방법이 가장 정확(짧고 기억하기 쉬우며 온라인에서 찾기 쉬움)\n\n\nst_crs(\"EPSG:4326\")\n\n\n\n\n\n벡터 지리 데이터 객체에서 CRS를 가져오고 설정\n\n\nvector_filepath &lt;- system.file(\"shapes/world.gpkg\", package = \"spData\")\nnew_vector &lt;- read_sf(vector_filepath)\n\nst_crs(new_vector)\n#&gt; Coordinate Reference System:\n#&gt;   User input: WGS 84 \n#&gt;   wkt:\n#&gt; GEOGCRS[\"WGS 84\",\n#&gt;     ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n#&gt;         MEMBER[\"World Geodetic System 1984 (Transit)\"],\n#&gt;         MEMBER[\"World Geodetic System 1984 (G730)\"],\n#&gt;         MEMBER[\"World Geodetic System 1984 (G873)\"],\n#&gt;         MEMBER[\"World Geodetic System 1984 (G1150)\"],\n#&gt;         MEMBER[\"World Geodetic System 1984 (G1674)\"],\n#&gt;         MEMBER[\"World Geodetic System 1984 (G1762)\"],\n#&gt;         MEMBER[\"World Geodetic System 1984 (G2139)\"],\n#&gt;         ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n#&gt;             LENGTHUNIT[\"metre\",1]],\n#&gt;         ENSEMBLEACCURACY[2.0]],\n#&gt;     PRIMEM[\"Greenwich\",0,\n#&gt;         ANGLEUNIT[\"degree\",0.0174532925199433]],\n#&gt;     CS[ellipsoidal,2],\n#&gt;         AXIS[\"geodetic latitude (Lat)\",north,\n#&gt;             ORDER[1],\n#&gt;             ANGLEUNIT[\"degree\",0.0174532925199433]],\n#&gt;         AXIS[\"geodetic longitude (Lon)\",east,\n#&gt;             ORDER[2],\n#&gt;             ANGLEUNIT[\"degree\",0.0174532925199433]],\n#&gt;     USAGE[\n#&gt;         SCOPE[\"Horizontal component of 3D system.\"],\n#&gt;         AREA[\"World.\"],\n#&gt;         BBOX[-90,-180,90,180]],\n#&gt;     ID[\"EPSG\",4326]]\n\n\nUser input : CRS식별자 (WGS 84, 입력 파일에서 가져온 EPSG:4326의 동의어)\nwkt : CRS에 대한 모든 관련 정보와 함께 전체 WKT 문자열을 포함\ninput 요소는 유연함(AUTHORITY:CODE (ex. EPSG:4326), CRS 이름(ex. WGS84), proj4string 정의)\nwkt 요소는 객체를 파일에 저장하거나 좌표 연산을 수행할 때 사용되는 WKT 표현을 저장\nnew_vector 객체가 WGS84 타원체를 가지며, 그리니치 프라임 자오선을 사용하고, 위도와 경도의 축 순서를 사용하는 것을 볼 수 있음\n이 경우 이 CRS 사용에 적합한 영역을 설명하는 USAGE와 CRS 식별자 EPSG:4326을 가리키는 ID와 같은 추가 요소도 있음\n\n\nst_crs(new_vector)$IsGeographic\n#&gt; [1] TRUE\nst_crs(new_vector)$units_gdal\n#&gt; [1] \"degree\"\nst_crs(new_vector)$srid\n#&gt; [1] \"EPSG:4326\"\nst_crs(new_vector)$proj4string\n#&gt; [1] \"+proj=longlat +datum=WGS84 +no_defs\"\n\n\nst_crs 함수에는 유용한 기능이 하나 있는데, 사용된 CRS에 대한 추가 정보를 검색할 수 있음.\n\nst_crs(new_vector)$IsGeographic : CRS가 지리적 상태인지 확인\nst_crs(new_vector)$units_gdal : CRS 단위\nst_crs(new_vector)$srid : 해당 ‘SRID’ 식별자를 추출(사용 가능한 경우)\nst_crs(new_vector)$proj4string : proj4string 표현을 추출\n\nst_set_crs() : CRS가 없거나 잘못 설정되어 있는 경우 CRS 설정\n\n\nnew_vector &lt;- st_set_crs(new_vector, \"EPSG:4326\") # set CRS\n\n\nterra::crs() : 래스터 객체에 대한 CRS를 설정\n하지만, crs() 함수를 사용하면 좌표계는 바뀌지만 값이 바뀌지는 않음.\n\n\nraster_filepath &lt;- system.file(\"raster/srtm.tif\", package = \"spDataLarge\")\nmy_rast &lt;- rast(raster_filepath)\ncrs(my_rast)\n#&gt; [1] \"GEOGCRS[\\\"WGS 84\\\",\\n    ENSEMBLE[\\\"World Geodetic System 1984 ensemble\\\",\\n        MEMBER[\\\"World Geodetic System 1984 (Transit)\\\"],\\n        MEMBER[\\\"World Geodetic System 1984 (G730)\\\"],\\n        MEMBER[\\\"World Geodetic System 1984 (G873)\\\"],\\n        MEMBER[\\\"World Geodetic System 1984 (G1150)\\\"],\\n        MEMBER[\\\"World Geodetic System 1984 (G1674)\\\"],\\n        MEMBER[\\\"World Geodetic System 1984 (G1762)\\\"],\\n        MEMBER[\\\"World Geodetic System 1984 (G2139)\\\"],\\n        ELLIPSOID[\\\"WGS 84\\\",6378137,298.257223563,\\n            LENGTHUNIT[\\\"metre\\\",1]],\\n        ENSEMBLEACCURACY[2.0]],\\n    PRIMEM[\\\"Greenwich\\\",0,\\n        ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n    CS[ellipsoidal,2],\\n        AXIS[\\\"geodetic latitude (Lat)\\\",north,\\n            ORDER[1],\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n        AXIS[\\\"geodetic longitude (Lon)\\\",east,\\n            ORDER[2],\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n    USAGE[\\n        SCOPE[\\\"Horizontal component of 3D system.\\\"],\\n        AREA[\\\"World.\\\"],\\n        BBOX[-90,-180,90,180]],\\n    ID[\\\"EPSG\\\",4326]]\"\ncat(crs(my_rast)) # get CRS\n#&gt; GEOGCRS[\"WGS 84\",\n#&gt;     ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n#&gt;         MEMBER[\"World Geodetic System 1984 (Transit)\"],\n#&gt;         MEMBER[\"World Geodetic System 1984 (G730)\"],\n#&gt;         MEMBER[\"World Geodetic System 1984 (G873)\"],\n#&gt;         MEMBER[\"World Geodetic System 1984 (G1150)\"],\n#&gt;         MEMBER[\"World Geodetic System 1984 (G1674)\"],\n#&gt;         MEMBER[\"World Geodetic System 1984 (G1762)\"],\n#&gt;         MEMBER[\"World Geodetic System 1984 (G2139)\"],\n#&gt;         ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n#&gt;             LENGTHUNIT[\"metre\",1]],\n#&gt;         ENSEMBLEACCURACY[2.0]],\n#&gt;     PRIMEM[\"Greenwich\",0,\n#&gt;         ANGLEUNIT[\"degree\",0.0174532925199433]],\n#&gt;     CS[ellipsoidal,2],\n#&gt;         AXIS[\"geodetic latitude (Lat)\",north,\n#&gt;             ORDER[1],\n#&gt;             ANGLEUNIT[\"degree\",0.0174532925199433]],\n#&gt;         AXIS[\"geodetic longitude (Lon)\",east,\n#&gt;             ORDER[2],\n#&gt;             ANGLEUNIT[\"degree\",0.0174532925199433]],\n#&gt;     USAGE[\n#&gt;         SCOPE[\"Horizontal component of 3D system.\"],\n#&gt;         AREA[\"World.\"],\n#&gt;         BBOX[-90,-180,90,180]],\n#&gt;     ID[\"EPSG\",4326]]\ncrs(my_rast) &lt;- \"EPSG:26912\" # set CRS\n\nlondon &lt;- data.frame(lon = -0.1, lat = 51.5) %&gt;%\n  st_as_sf(coords = c(\"lon\", \"lat\"))\nst_is_longlat(london)\n#&gt; [1] NA\n\nlondon_geo &lt;- st_set_crs(london, \"EPSG:4326\")\nst_is_longlat(london_geo)\n#&gt; [1] TRUE"
  },
  {
    "objectID": "Spatial_Information_Analysis.html#geometry-operations-on-projected-and-unprojected-data",
    "href": "Spatial_Information_Analysis.html#geometry-operations-on-projected-and-unprojected-data",
    "title": "Spatial Information Analysis",
    "section": "",
    "text": "sf는 지리 벡터 데이터에 대한 클래스와 지리 계산을 위한 중요한 하위 수준 라이브러리에 대한 일관된 명령줄 인터페이스 제공\n\n구면 geometry 연산을 sf:sf_use_sf(FALSE) 명령으로 끄면 버퍼는 미터와 같은 적절한 거리 단위를 대체하지 못하는 위도와 경도의 단위를 사용하기 때문에 쓸모없는 출력이 됨.\n공간 및 기하학적 연산을 수행하는 것은 경우에 따라 거의 또는 전혀 차이가 없음. (ex: 공간 부분 집합) 그러나 버퍼링과 같은 거리가 포함된 연산의 경우 (구면 지오메트리 엔진을 사용하지 않고) 좋은 결과를 보장하는 유일한 방법은 데이터의 투영된 복사본을 만들고 그에 대한 연산을 실행하는 것임.\n그 결과 런던과 동일하지만 미터 단위의 EPSG 코드를 가진 적절한 CRS(영국 국가 그리드)에 재투사된 새로운 물체가 되었음.\nCRS의 단위가 (도가 아닌) 미터라는 사실은 이것이 투영된 CRS임을 알려줌\n\n\n\nlondon_buff_no_crs &lt;-\n  st_buffer(london, dist = 1) # incorrect: no CRS\nlondon_buff_no_crs\n#&gt; Simple feature collection with 1 feature and 0 fields\n#&gt; Geometry type: POLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: -1.1 ymin: 50.5 xmax: 0.9 ymax: 52.5\n#&gt; CRS:           NA\n#&gt;                         geometry\n#&gt; 1 POLYGON ((0.9 51.5, 0.89862...\nlondon_buff_s2 &lt;-\n  st_buffer(london_geo, dist = 1e5) # silent use of s2 (1e5 : 10^5m = 100,000m)\nlondon_buff_s2\n#&gt; Simple feature collection with 1 feature and 0 fields\n#&gt; Geometry type: POLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: -1.552818 ymin: 50.59609 xmax: 1.356603 ymax: 52.40393\n#&gt; Geodetic CRS:  WGS 84\n#&gt;                         geometry\n#&gt; 1 POLYGON ((-0.3523255 52.392...\nlondon_buff_s2_100_cells &lt;-\n  st_buffer(london_geo, dist = 1e5, max_cells = 100)\nlondon_buff_s2_100_cells\n#&gt; Simple feature collection with 1 feature and 0 fields\n#&gt; Geometry type: POLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: -1.718303 ymin: 50.51128 xmax: 1.524546 ymax: 52.53186\n#&gt; Geodetic CRS:  WGS 84\n#&gt;                         geometry\n#&gt; 1 POLYGON ((-0.3908656 52.531...\n\nsf::sf_use_s2(FALSE)\n#&gt; Spherical geometry (s2) switched off\n\nlondon_buff_lonlat &lt;-\n  st_buffer(london_geo, dist = 1) # incorrect result\n#&gt; Warning in st_buffer.sfc(st_geometry(x), dist, nQuadSegs, endCapStyle =\n#&gt; endCapStyle, : st_buffer does not correctly buffer longitude/latitude data\n#&gt; dist is assumed to be in decimal degrees (arc_degrees).\n\nsf::sf_use_s2(TRUE)\n#&gt; Spherical geometry (s2) switched on\n\nlondon_proj &lt;- data.frame(x = 530000, y = 180000) %&gt;%\n  st_as_sf(coords = 1:2, crs = \"EPSG:27700\")\n\nst_crs(london_proj)\n#&gt; Coordinate Reference System:\n#&gt;   User input: EPSG:27700 \n#&gt;   wkt:\n#&gt; PROJCRS[\"OSGB36 / British National Grid\",\n#&gt;     BASEGEOGCRS[\"OSGB36\",\n#&gt;         DATUM[\"Ordnance Survey of Great Britain 1936\",\n#&gt;             ELLIPSOID[\"Airy 1830\",6377563.396,299.3249646,\n#&gt;                 LENGTHUNIT[\"metre\",1]]],\n#&gt;         PRIMEM[\"Greenwich\",0,\n#&gt;             ANGLEUNIT[\"degree\",0.0174532925199433]],\n#&gt;         ID[\"EPSG\",4277]],\n#&gt;     CONVERSION[\"British National Grid\",\n#&gt;         METHOD[\"Transverse Mercator\",\n#&gt;             ID[\"EPSG\",9807]],\n#&gt;         PARAMETER[\"Latitude of natural origin\",49,\n#&gt;             ANGLEUNIT[\"degree\",0.0174532925199433],\n#&gt;             ID[\"EPSG\",8801]],\n#&gt;         PARAMETER[\"Longitude of natural origin\",-2,\n#&gt;             ANGLEUNIT[\"degree\",0.0174532925199433],\n#&gt;             ID[\"EPSG\",8802]],\n#&gt;         PARAMETER[\"Scale factor at natural origin\",0.9996012717,\n#&gt;             SCALEUNIT[\"unity\",1],\n#&gt;             ID[\"EPSG\",8805]],\n#&gt;         PARAMETER[\"False easting\",400000,\n#&gt;             LENGTHUNIT[\"metre\",1],\n#&gt;             ID[\"EPSG\",8806]],\n#&gt;         PARAMETER[\"False northing\",-100000,\n#&gt;             LENGTHUNIT[\"metre\",1],\n#&gt;             ID[\"EPSG\",8807]]],\n#&gt;     CS[Cartesian,2],\n#&gt;         AXIS[\"(E)\",east,\n#&gt;             ORDER[1],\n#&gt;             LENGTHUNIT[\"metre\",1]],\n#&gt;         AXIS[\"(N)\",north,\n#&gt;             ORDER[2],\n#&gt;             LENGTHUNIT[\"metre\",1]],\n#&gt;     USAGE[\n#&gt;         SCOPE[\"Engineering survey, topographic mapping.\"],\n#&gt;         AREA[\"United Kingdom (UK) - offshore to boundary of UKCS within 49°45'N to 61°N and 9°W to 2°E; onshore Great Britain (England, Wales and Scotland). Isle of Man onshore.\"],\n#&gt;         BBOX[49.75,-9.01,61.01,2.01]],\n#&gt;     ID[\"EPSG\",27700]]"
  },
  {
    "objectID": "Spatial_Information_Analysis.html#chapter-8-geographic-data-i-and-oinput-and-output",
    "href": "Spatial_Information_Analysis.html#chapter-8-geographic-data-i-and-oinput-and-output",
    "title": "Spatial Information Analysis",
    "section": "",
    "text": "download.file(url = \"https://irma.nps.gov/DataStore/DownloadFile/666527\",\n              destfile = \"nps_boundary.zip\")\nunzip(zipfile = \"nps_boundary.zip\")\nusa_parks = read_sf(dsn = \"nps_boundary.shp\")\n\n\n해외여서 접속이 막혀있음\n공공데이터포털에서 shape 파일 다운받아 불러오기\n\n공공데이터포털에서 데이터를 작업 공간에 다운 받기\n\n\n\n# unzip(zipfile=\"C:/202201/GIS/data/부산광역시_교통정보서비스센터 보유 ITS CCTV 현황(SHP)_20210601.zip\")\nbusan &lt;- read_sf(dsn = \"./Spatial_Information_Analysis/tl_tracffic_cctv_info.shp\", options = \"ENCODING:CP949\")\nbusan\n#&gt; Simple feature collection with 199 features and 5 fields\n#&gt; Geometry type: POINT\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: 128.8334 ymin: 35.04753 xmax: 129.24 ymax: 35.35762\n#&gt; Geodetic CRS:  WGS 84\n#&gt; # A tibble: 199 × 6\n#&gt;    name                   id url             lng   lat            geometry\n#&gt;    &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt; &lt;dbl&gt;         &lt;POINT [°]&gt;\n#&gt;  1 센텀중                 79 https://its.…  129.  35.2  (129.124 35.17363)\n#&gt;  2 수영1호교사거리        53 https://its.…  129.  35.2 (129.1256 35.16539)\n#&gt;  3 수영2호교입구(민락)    54 https://its.…  129.  35.2 (129.1281 35.15991)\n#&gt;  4 하마정교차로           47 https://its.…  129.  35.2 (129.0678 35.17477)\n#&gt;  5 송공(광장)             14 https://its.…  129.  35.2 (129.0688 35.16923)\n#&gt;  6 삼전교차로             13 https://its.…  129.  35.2 (129.0638 35.16385)\n#&gt;  7 연지삼거리             80 https://its.…  129.  35.2  (129.0553 35.1708)\n#&gt;  8 부암교차로             81 https://its.…  129.  35.2 (129.0504 35.16848)\n#&gt;  9 동천삼거리             46 https://its.…  129.  35.1 (129.0667 35.13002)\n#&gt; 10 진양사거리             82 https://its.…  129.  35.2   (129.05 35.16164)\n#&gt; # ℹ 189 more rows\nplot(busan)\n\n\n\n\n# unzip(zipfile = \"C:/202201/GIS/data/CTPRVN_20220324.zip\")\nsido &lt;- read_sf(dsn = \"./Spatial_Information_Analysis/ctp_rvn.shp\", options = \"ENCODING:CP949\")\nsido\n#&gt; Simple feature collection with 17 features and 3 fields\n#&gt; Geometry type: MULTIPOLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: 746110.3 ymin: 1458754 xmax: 1387950 ymax: 2068444\n#&gt; Projected CRS: PCS_ITRF2000_TM\n#&gt; # A tibble: 17 × 4\n#&gt;    CTPRVN_CD CTP_ENG_NM        CTP_KOR_NM                               geometry\n#&gt;    &lt;chr&gt;     &lt;chr&gt;             &lt;chr&gt;                          &lt;MULTIPOLYGON [m]&gt;\n#&gt;  1 11        Seoul             서울특별시     (((966987.2 1941111, 966987.1 194…\n#&gt;  2 26        Busan             부산광역시     (((1146778 1679624, 1146922 16794…\n#&gt;  3 27        Daegu             대구광역시     (((1087860 1760097, 1087860 17600…\n#&gt;  4 28        Incheon           인천광역시     (((897904 1961082, 897886.1 19610…\n#&gt;  5 29        Gwangju           광주광역시     (((932712.7 1696169, 932781.7 169…\n#&gt;  6 30        Daejeon           대전광역시     (((990946.7 1832389, 991057.7 183…\n#&gt;  7 31        Ulsan             울산광역시     (((1167950 1710285, 1167950 17102…\n#&gt;  8 36        Sejong-si         세종특별자치시 (((971235.9 1844387, 971234.1 184…\n#&gt;  9 41        Gyeonggi-do       경기도         (((931607.5 1894480, 931653.8 189…\n#&gt; 10 42        Gangwon-do        강원도         (((1163759 1909653, 1163760 19096…\n#&gt; 11 43        Chungcheongbuk-do 충청북도       (((1042689 1917663, 1042731 19176…\n#&gt; 12 44        Chungcheongnam-do 충청남도       (((862386.1 1805283, 862296.9 180…\n#&gt; 13 45        Jeollabuk-do      전라북도       (((902676.5 1717492, 902679.8 171…\n#&gt; 14 46        Jellanam-do       전라남도       (((946598.4 1555246, 946595.7 155…\n#&gt; 15 47        Gyeongsangbuk-do  경상북도       (((1179681 1750939, 1179685 17509…\n#&gt; 16 48        Gyeongsangnam-do  경상남도       (((1053643 1612344, 1053663 16122…\n#&gt; 17 50        Jeju-do           제주특별자치도 (((885004.6 1458756, 884996.7 145…\nplot(sido)\n\n\n\n\n\n\n\n\nrnaturalearth 패키지의 ne_countries() 기능을 사용하면 국가 경계 기능을 사용할 수 있음\nosmdata 패키지는 속도가 제한되어 있다는 단점이 있음\n\n이러한 한계를 극복하기 위해 osmextract 패키지가 개발\n\n\n\nlibrary(rnaturalearth)\n#&gt; Support for Spatial objects (`sp`) will be deprecated in {rnaturalearth} and will be removed in a future release of the package. Please use `sf` objects with {rnaturalearth}. For example: `ne_download(returnclass = 'sf')`\nusa &lt;- ne_countries(country = \"United States of America\") # United States borders\n#&gt; Warning: The `returnclass` argument of `ne_download()` sp as of rnaturalearth 1.0.0.\n#&gt; ℹ Please use `sf` objects with {rnaturalearth}, support for Spatial objects\n#&gt;   (sp) will be removed in a future release of the package.\nclass(usa)\n#&gt; [1] \"SpatialPolygonsDataFrame\"\n#&gt; attr(,\"package\")\n#&gt; [1] \"sp\"\n\nusa_sf &lt;- st_as_sf(usa)\nplot(usa_sf[1])\n\n\n\nkorea &lt;- ne_countries(country = \"South Korea\") # United States borders\nclass(korea)\n#&gt; [1] \"SpatialPolygonsDataFrame\"\n#&gt; attr(,\"package\")\n#&gt; [1] \"sp\"\nkorea_sf &lt;- st_as_sf(korea)\nplot(korea_sf[1])\n\n\n\n\n\n\n\n\nhttps://r.geocompx.org/read-write.html#file-formats\n\n\n\n\n\ngpkg 형식 불러오기\n\n\nf &lt;- system.file(\"shapes/world.gpkg\", package = \"spData\")\nworld = read_sf(f, quiet = TRUE)\ntanzania = read_sf(f, query = 'SELECT * FROM world WHERE name_long = \"Tanzania\"')\ntanzania_buf = st_buffer(tanzania, 50000)\ntanzania_buf_geom = st_geometry(tanzania_buf)\ntanzania_buf_wkt = st_as_text(tanzania_buf_geom)\ntanzania_neigh = read_sf(f, wkt_filter = tanzania_buf_wkt)\n\n\ncsv 형식 불러오기\n\n\ncycle_hire_txt = system.file(\"misc/cycle_hire_xy.csv\", package = \"spData\")\ncycle_hire_xy = read_sf(cycle_hire_txt,\n                        options = c(\"X_POSSIBLE_NAMES=X\", \"Y_POSSIBLE_NAMES=Y\"))\n\n\nWell-known text(WKT), Well-known binary(WKB), and the GeoJSON formats\n\n\nworld_txt = system.file(\"misc/world_wkt.csv\", package = \"spData\")\nworld_wkt = read_sf(world_txt, options = \"GEOM_POSSIBLE_NAMES=WKT\")\n# the same as\nworld_wkt2 = st_read(world_txt, options = \"GEOM_POSSIBLE_NAMES=WKT\",\n                     quiet = TRUE, stringsAsFactors = FALSE, as_tibble = TRUE)\n\n\nKML file stores geographic information in XML format\n\n\nu = \"https://developers.google.com/kml/documentation/KML_Samples.kml\"\ndownload.file(u, \"./Spatial_Information_Analysis/KML_Samples.kml\")\nst_layers(\"./Spatial_Information_Analysis/KML_Samples.kml\")\n#&gt; Driver: KML \n#&gt; Available layers:\n#&gt;              layer_name  geometry_type features fields crs_name\n#&gt; 1            Placemarks       3D Point        3      2   WGS 84\n#&gt; 2      Highlighted Icon       3D Point        1      2   WGS 84\n#&gt; 3                 Paths 3D Line String        6      2   WGS 84\n#&gt; 4         Google Campus     3D Polygon        4      2   WGS 84\n#&gt; 5      Extruded Polygon     3D Polygon        1      2   WGS 84\n#&gt; 6 Absolute and Relative     3D Polygon        4      2   WGS 84\nkml = read_sf(\"./Spatial_Information_Analysis/KML_Samples.kml\", layer = \"Placemarks\")"
  },
  {
    "objectID": "Spatial_Information_Analysis.html#chapter-9-making-maps-with-r",
    "href": "Spatial_Information_Analysis.html#chapter-9-making-maps-with-r",
    "title": "Spatial Information Analysis",
    "section": "",
    "text": "정적인 지도는 지리 계산의 가장 일반적인 시각적 출력 유형\nplot() 또는 tmap_mode(plot)\n\n\n\n\n# Add fill layer to nz shape\ntm_shape(nz) +\n  tm_fill()\n# Add border layer to nz shape\ntm_shape(nz) +\n  tm_borders()\n# Add fill and border layers to nz shape\ntm_shape(nz) +\n  tm_fill() +\n  tm_borders()\n\n\n\n\n\n\n\n\n\n\nmap_nz &lt;- tm_shape(nz) + tm_polygons()\nclass(map_nz)\n#&gt; [1] \"tmap\"\nmap_nz\n\n\n\n\nmap_nz1 &lt;- map_nz +\n  tm_shape(nz_elev) + tm_raster(alpha = 0.7)\n\nnz_water &lt;- st_union(nz) %&gt;% st_buffer(22200) %&gt;%\n  st_cast(to = \"LINESTRING\")\n\nmap_nz2 &lt;- map_nz1 +\n  tm_shape(nz_water) + tm_lines()\n\nmap_nz3 &lt;- map_nz2 +\n  tm_shape(nz_height) + tm_dots()\n\ntmap_arrange(map_nz1, map_nz2, map_nz3)\n\n\n\n\n\nalpha : 레이어를 반투명하게 만들기 위해 설정\n\n\n\n\n\nma1 &lt;- tm_shape(nz) + tm_fill(col = \"red\")\nma2 &lt;- tm_shape(nz) + tm_fill(col = \"red\", alpha = 0.3)\nma3 &lt;- tm_shape(nz) + tm_borders(col = \"blue\")\nma4 &lt;- tm_shape(nz) + tm_borders(lwd = 3)\nma5 &lt;- tm_shape(nz) + tm_borders(lty = 2)\nma6 &lt;- tm_shape(nz) + tm_fill(col = \"red\", alpha = 0.3) +\n  tm_borders(col = \"blue\", lwd = 3, lty = 2)\n\ntmap_arrange(ma1, ma2, ma3, ma4, ma5, ma6)\n\n\n\n\n\ntm_fill()과 tm_bubbles()에서 레이어는 기본적으로 회색으로 채워지고 tm_lines()은 검은선으로 그려짐\ntmap의 인수는 숫자 벡터를 허용하지 않음\n\n\nplot(st_geometry(nz), col = nz$Land_area) # works\ntm_shape(nz) + tm_fill(col = nz$Land_area) # fails\n#&gt; Error: Fill argument neither colors nor valid variable name(s)\ntm_shape(nz) + tm_fill(col = \"Land_area\")\n\n\n\n\n\n\n\n범례의 제목 설정\n\n\nlegend_title &lt;- expression(\"Area (km\"^2*\")\")\nmap_nza &lt;- tm_shape(nz) +\n  tm_fill(col = \"Land_area\", title = legend_title) + tm_borders()\nmap_nza\n\n\n\n\n\n\n\n\nbreaks : 색상의 표현 값 범위를 수동으로 설정\nn : 숫자 변수가 범주화되는 Bin의 수 설정\npalette : 색 구성표를 정의 (ex. BuGn)\n\n\ntm1 &lt;- tm_shape(nz) + tm_polygons(col = \"Median_income\")\nbreaks = c(0, 3, 4, 5) * 10000\ntm2 &lt;- tm_shape(nz) + tm_polygons(col = \"Median_income\", breaks = breaks)\ntm3 &lt;- tm_shape(nz) + tm_polygons(col = \"Median_income\", n = 10)\ntm4 &lt;- tm_shape(nz) + tm_polygons(col = \"Median_income\", palette = \"BuGn\")\n\ntmap_arrange(tm1, tm2, tm3, tm4)\n\n\n\n\n\ntm_shape(nz) + tm_polygons(col = \"Median_income\", style = \"pretty\")\ntm_shape(nz) + tm_polygons(col = \"Median_income\", style = \"equal\")\ntm_shape(nz) + tm_polygons(col = \"Median_income\", style = \"quantile\")\ntm_shape(nz) + tm_polygons(col = \"Median_income\", style = \"jenks\")\ntm_shape(nz) + tm_polygons(col = \"Median_income\", style = \"cont\")\ntm_shape(nz) + tm_polygons(col = \"Median_income\", style = \"cat\")\n\n\n\n\n\n\n\nstyle = \"pretty\" : 기본 설정은 가능한 경우 정수로 반올림하고 간격을 균등하게 유지\nstyle = \"equal\" : 입력 값을 동일한 범위의 빈으로 나누고 균일한 분포의 변수에 적합(결과 맵이 색상 다양성이 거의 없을 수 있으므로 분포가 치우친 변수에는 권장하지 않음)\nstyle = \"quantile\" : 동일한 수의 관찰이 각 범주에 포함되도록 함(빈 범위가 크게 다를 수 있다는 잠재적인 단점이 있음).\nstyle = \"jenks\" : 데이터에서 유사한 값의 그룹을 식별하고 범주 간의 차이를 최대화\nstyle = \"cont\" : 연속 색상 필드에 많은 색상을 표시하고 연속 래스터에 특히 적합\nstyle = \"cat\" : 범주 값을 나타내도록 설계되었으며 각 범주가 고유한 색상을 받도록 함\n\n\ntm_p1 &lt;- tm_shape(nz) + tm_polygons(\"Population\", palette = \"Blues\")\ntm_p2 &lt;- tm_shape(nz) + tm_polygons(\"Population\", palette = \"YlOrBr\")\n\ntmap_arrange(tm_p1, tm_p2)\n\n\n\n\n\n순차 팔레트는 단일(ex. Blues : 밝은 파란색에서 진한 파란색으로 이동) 또는 다중 색상/색조(ex. YlOrBr : 주황색을 통해 밝은 노란색에서 갈색으로 그라데이션)\n\n\n\n\n\nmap_nz +\n  tm_compass(type = \"8star\", position = c(\"left\", \"top\")) +\n  tm_scale_bar(breaks = c(0, 100, 200), text.size = 1)\n\n\n\n\ntm_l1 &lt;- map_nz + tm_layout(title = \"New Zealand\")\ntm_l2 &lt;- map_nz + tm_layout(scale = 5)\ntm_l3 &lt;- map_nz + tm_layout(bg.color = \"lightblue\")\ntm_l4 &lt;- map_nz + tm_layout(frame = FALSE)\n\ntmap_arrange(tm_l1, tm_l2, tm_l3, tm_l4)\n\n\n\n\n\ntm_layout()의 다양한 옵션\n\nframe.lwd : 프레임 너비\nframe.double.line : 이중선 허용 옵션\nouter.margin, inner.margin : 여백 설정\nfontface, fontfamily : 글꼴 설정\nlegend.show : 범례 표시 여부\nlegend.position : 범례 위치 변경\n\n\n\n\n\n\n\n\ntm_s1 &lt;- map_nza + tm_style(\"bw\")\ntm_s2 &lt;- map_nza + tm_style(\"classic\")\ntm_s3 &lt;- map_nza + tm_style(\"cobalt\")\ntm_s4 &lt;- map_nza + tm_style(\"col_blind\")\n\ntmap_arrange(tm_s1, tm_s2, tm_s3, tm_s4)\n\n\n\n\n\n\n\n\nurb_1970_2030 &lt;- urban_agglomerations %&gt;%\n  filter(year %in% c(1970, 1990, 2010, 2030))\ntm_shape(world) +\n  tm_polygons() +\n  tm_shape(urb_1970_2030) +\n  tm_symbols(col = \"black\", border.col = \"white\", size = \"population_millions\") +\n  tm_facets(by = \"year\", nrow = 2, free.coords = TRUE)\n\n\n\n#free.coords : 지도에 자체 경계 상자가 있는지 여부를 지정\n\n\n\n\n\nnz_region &lt;- st_bbox(c(xmin = 1340000, xmax = 1450000,\n                       ymin = 5130000, ymax = 5210000),\n                     crs = st_crs(nz_height)) %&gt;% st_as_sfc()\n\nnz_height_map &lt;- tm_shape(nz_elev, bbox = nz_region) +\n  tm_raster(style = \"cont\", palette = \"YlGn\", legend.show = TRUE) +\n  tm_shape(nz_height) + tm_symbols(shape = 2, col = \"red\", size = 1) +\n  tm_scale_bar(position = c(\"left\", \"bottom\"))\n\nnz_map &lt;- tm_shape(nz) + tm_polygons() +\n  tm_shape(nz_height) + tm_symbols(shape = 2, col = \"red\", size = 0.1) +\n  tm_shape(nz_region) + tm_borders(lwd = 3)\n\nlibrary(grid)\nnz_height_map\nprint(nz_map, vp = viewport(0.8, 0.27, width = 0.5, height = 0.5))\n\n\n\n\n\nviewport() : 두개의 맵을 결합\n\n\n\n\n\n\nurb_anim &lt;- tm_shape(world) + tm_polygons() +\n  tm_shape(urban_agglomerations) + tm_dots(size = \"population_millions\") +\n  tm_facets(along = \"year\", free.coords = FALSE)\n\ntmap_animation(urb_anim, filename = \"./Spatial_Information_Analysis/urb_anim.gif\", delay = 25)\n#&gt; Creating frames\n#&gt; =========\n#&gt; ====\n#&gt; =====\n#&gt; ====\n#&gt; =====\n#&gt; ====\n#&gt; =====\n#&gt; ====\n#&gt; ====\n#&gt; =====\n#&gt; ====\n#&gt; =====\n#&gt; ====\n#&gt; =====\n#&gt; ====\n#&gt; =====\n#&gt; ====\n#&gt; \n#&gt; Creating animation\n#&gt; Animation saved to D:\\Study-Blog\\Spatial_Information_Analysis\\urb_anim.gif\n\n\nby = year대신 along = year을 사용\nfree.coords = FALSE : 각 맵 반복에 대한 맵 범위 유지\ntmap_animation()을 사용하여 .gif로 저장\n\n\n\n\n\n대화형 지도는 데이터 세트를 새로운 차원으로 끌어올릴 수 있음\n지도를 기울이고 회전하는 기능과 사용자가 이동 및 확대/축소 할 때 자동으로 업데이트\ntmap, mapview, mapdeck, leaflet으로 표현 가능\n\n\n\n\ntmap_mode(\"view\") #interactive mode\n#&gt; tmap mode set to interactive viewing\nmap_nz\n\n\n\n\n\n\nmap_nz + tm_basemap(server = \"OpenTopoMap\")\n\n\n\n\n\n\nworld_coffee = left_join(world, coffee_data, by = \"name_long\")\nfacets = c(\"coffee_production_2016\", \"coffee_production_2017\")\ntm_shape(world_coffee) + tm_polygons(facets) +\n  tm_facets(nrow = 1, sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntm_basemap() 또는 tm_options()로 basemap 지정 가능\ntm_facets()에서 sync옵션을 TRUE로 선택하면 여러개의 맵을 동시에 확대/축소할 수 있음\n\n\n\n\n\nmapview::mapview(nz)\n\ntrails %&gt;%\n  st_transform(st_crs(franconia)) %&gt;%\n  st_intersection(franconia[franconia$district == \"Oberfranken\", ][1]) %&gt;%\n  st_collection_extract(\"LINE\") %&gt;%\n  mapview(color = \"red\", lwd = 3, layer.name = \"trails\") +\n  mapview(franconiWa, zcol = \"district\", burst = TRUE) +\n  breweries\n\n\n\n\n\nset_token(Sys.getenv(\"pk.eyJ1IjoiancwMTEyIiwiYSI6ImNsM2ppbzYzNzBrbjQzZHBjMmlocnY2dDUifQ.58-gXpPtvcCGmMt2xEW-ig\"))\ncrash_data = read.csv(\"https://git.io/geocompr-mapdeck\")\ncrash_data = na.omit(crash_data)\nms = mapdeck_style(\"dark\")\nmapdeck(style = ms, pitch = 45, location = c(0, 52), zoom = 4) %&gt;%\n  add_grid(data = crash_data, lat = \"lat\", lon = \"lng\", cell_size = 1000,\n           elevation_scale = 50, layer_id = \"grid_layer\",\n           colour_range = viridisLite::plasma(6))\n#&gt; Registered S3 method overwritten by 'jsonify':\n#&gt;   method     from    \n#&gt;   print.json jsonlite\n\n\n\n\n\n\n\n\n\nadd_arc() 함수\n\n\nurl &lt;- 'https://raw.githubusercontent.com/plotly/datasets/master/2011_february_aa_flight_paths.csv'\nflights &lt;- read.csv(url)\nflights$id &lt;- seq_len(nrow(flights))\nflights$stroke &lt;- sample(1:3, size = nrow(flights), replace = T)\nkey = \"pk.eyJ1IjoiancwMTEyIiwiYSI6ImNsM2ppbzYzNzBrbjQzZHBjMmlocnY2dDUifQ.58-gXpPtvcCGmMt2xEW-ig\"\n\nmapdeck(token = key, style = mapdeck_style(\"dark\"), pitch = 45 ) %&gt;%\n  add_arc(\n    data = flights\n    , layer_id = \"arc_layer\"\n    , origin = c(\"start_lon\", \"start_lat\")\n    , destination = c(\"end_lon\", \"end_lat\")\n    , stroke_from = \"airport1\"\n    , stroke_to = \"airport2\"\n    , stroke_width = \"stroke\"\n  )\n\n\nadd_animated_arc() 함수\n\n\nmapdeck(token = key, style = 'mapbox://styles/mapbox/dark-v9', pitch = 45 ) %&gt;%\n  add_animated_arc(\n    data = flights\n    , layer_id = \"arc_layer\"\n    , origin = c(\"start_lon\", \"start_lat\")\n    , destination = c(\"end_lon\", \"end_lat\")\n    , stroke_from = \"airport1\"\n    , stroke_to = \"airport2\"\n    , stroke_width = \"stroke\"\n  )\n\n\nadd_heatmap() 함수\n\n\nmapdeck(token = key, style = mapdeck_style('dark'), pitch = 45 ) %&gt;%\n  add_heatmap(\n    data = df[1:30000, ]\n    , lat = \"lat\"\n    , lon = \"lng\"\n    , weight = \"weight\"\n    , colour_range = colourvalues::colour_values(1:6, palette = \"inferno\")\n  )\n\n\nadd_path() 함수\n\n\nmapdeck(\n  token = key\n  , style = mapdeck_style(\"dark\")\n  , zoom = 10) %&gt;%\n  add_path(\n    data = roads\n    , stroke_colour = \"RIGHT_LOC\"\n    , layer_id = \"path_layer\"\n  )\n\n\nadd_geojson(), add_scatterplot(), add_text() 등이 있음\n\n\n\n\n\npal = colorNumeric(\"RdYlBu\", domain = cycle_hire$nbikes)\nleaflet(data = cycle_hire) %&gt;%\n  addProviderTiles(providers$CartoDB.Positron) %&gt;%       # Background Map\n  addCircles(col = ~pal(nbikes), opacity = 0.9) %&gt;%      # nbikes의 값으로 색이 다르게 circle 생성\n  addPolygons(data = lnd, fill = FALSE) %&gt;%              # land에 따라 Polygon 생성\n  addLegend(pal = pal, values = ~nbikes) %&gt;%             # 범례 생성\n  setView(lng = -0.1, 51.5, zoom = 12) %&gt;%               # zoom\n  addMiniMap()                                           # minimap 생성\n\n\n\n\n\n\n# create a basic map\n\nleaflet() %&gt;%\n  addTiles() %&gt;% # add default OpenStreetMap map tiles\n  setView(lng=127.063, lat=37.513, zoom = 6) # korea, zoom 6\n\n\n\n\n\n# map style: NASA\n\nleaflet() %&gt;%\n  addTiles() %&gt;%\n  setView(lng=127.063, lat=37.513, zoom = 6) %&gt;%\n  addProviderTiles(\"NASAGIBS.ViirsEarthAtNight2012\")\n\n\n\n\n\n# map style: Esri.WorldImagery\n\nleaflet() %&gt;%\n  addTiles() %&gt;%\n  setView(lng=127.063, lat=37.513, zoom = 16) %&gt;%\n  addProviderTiles(\"Esri.WorldImagery\")\n\n\n\n\n\n# adding Popup\n\npopup = c(\"한남대학교 빅데이터응용학과\")\nleaflet() %&gt;%\n  addTiles() %&gt;%\n  addMarkers(lng = c(127.4219), # longitude\n             lat = c(36.3548), # latitude\n             popup = popup)\n\n\n\n\n\n\nzoom : 확대/축소 비율 설정\naddProviderTiles() : 외부 지도 타일 추가\naddMarkers() : 커서를 클릭했을 때 팝업으로 나타나는 설명을 추가\n\n\n\n\n\n\n\n\nR을 사용하여 한걸음 더 나아가 웹 어플리케이션을 제작할 수 있게 해주는 패키지\nui 라고 말하는 화면은 실제로 사용자가 보는 화면\nshiny에서는 크게 titlePanel과 sidebarPanel, mainPanal의 세 가지로 구성\n\n\nui = fluidPage(\n  sliderInput(inputId = \"life\", \"Life expectancy\", 49, 84, value = 80),\n  leafletOutput(outputId = \"map\")\n)\nserver = function(input, output) {\n  output$map = renderLeaflet({\n    leaflet() %&gt;%\n      # addProviderTiles(\"OpenStreetMap.BlackAndWhite\") %&gt;%\n      addPolygons(data = world[world$lifeExp &lt; input$life,])\n  })\n}\nshinyApp(ui, server)\n#&gt; PhantomJS not found. You can install it with webshot::install_phantomjs(). If it is installed, please make sure the phantomjs executable can be found via the PATH variable.\n\nShiny applications not supported in static R Markdown documents\n\n\n\nui &lt;- fluidPage(#Application title\n  titlePanel(\"Hello Shiny!\"),\n  #Sidebar with a slider input for the number of bins\n  sidebarLayout(sidebarPanel(\n    sliderInput(\n      \"bins\",\n      \"Number of bins:\",\n      min = 1,\n      max = 50,\n      value = 30\n    )\n  ),\n  #Show a plot of the generated distribution\n  mainPanel(plotOutput(\"distPlot\"))))\nserver &lt;- function(input, output) {\n  output$distPlot &lt;- renderPlot({\n    x &lt;- faithful[, 2]\n    bins &lt;- seq(min(x), max(x), length.out = input$bins + 1)\n    hist(x,\n         breaks = bins,\n         col = 'darkgray',\n         border = 'white')\n  })\n}\nshinyApp(ui, server)\n\nShiny applications not supported in static R Markdown documents"
  },
  {
    "objectID": "Spatial_Information_Analysis.html#ggmap",
    "href": "Spatial_Information_Analysis.html#ggmap",
    "title": "Spatial Information Analysis",
    "section": "",
    "text": "지도 공간 기법으로 시각화하는 ggmap 패키지는 Google Maps, Stamen Maps, 네이버 맵, 등의 다양한 온라인 소스로부터 가져온 정적인 지도 위에 특별한 데이터나 모형을 시각화하는 함수들을 제공함\nggmap()의 주요 함수\n\ngeocode() : 거리주소 또는 장소 이름을 이용하여 이용 지도 정보(위도, 경도) 획득\nget_googlemap() : 구글 지도 서비스 API에 접근하여 정적 지도 다운로드 지원과 지도에 marker 등을 삽입하고 자신이 원하는 줌 레벨과 center를 지정하여 지도 정보 생성\nget_map() : 지도 서비스 관련 서버에 관련 질의어를 지능형으로 인식하여 지도 정보 생성\nget_navermap() : 네이버 지도 서비스 API에 접근하여 정적 지도 다운로드 지원\nggimage() : ggplot2 패키지의 이미지와 동등한 수준으로 지도 이미지 생성\nggmap(), ggmapplot() : get_map() 함수에 의해서 생성된 픽셀 객체를 지도 이미지로 시각화\nqmap() : ggmap()함수와 get_map() 함수의 통합기능\nqmplot() : ggplot2 패키지의 qplot()와 동등한 수준으로 빠르게 지도 이미지 시각화\n\n\n\n\n\nget_googlemap() 함수를 통해 불러오고 싶은 곳의 장소를 문자열 값으로 첫 번째 인자에 넣어 실행해 이를 객체화 함\nggmap() 함수 안에 방금 만든 객체를 입력시킨 후 실행하면 원하는 장소를 중심으로 구글 지도가 plotting 됨\n\n\n# install.packages(\"ggmap\")\nlibrary(ggmap)\nregister_google(key = 'AIzaSyB4jjrVVAzb9fl8FQrQqUONAsaRBppWuSA')\n\n# 우리나라 지도 호출\ngetmap &lt;- get_googlemap(\"seoul\")\nggmap(getmap)\n\n\n\n\n\nggmap() 으로 반환되는 결과물은 ggplot2 패키지의 함수와 조합해 지도 위에 새로운 정보들을 추가할 수 있음\n\n\n\n\ndaejeon_map &lt;- get_googlemap(\"daejeon\") %&gt;% ggmap\nlocation &lt;- data.frame(\n  Name = c(\"한남대학교\", \"대전신세계\"),\n  lon = c(127.4219, 127.3821), #경도\n  lat = c(36.3548, 36.3752)    #위도\n)\n\ndaejeon_map + geom_point(data = location, aes(x = lon, y = lat))\n\ndaejeon_map &lt;- get_googlemap(\"daejeon\", zoom = 13) %&gt;% ggmap\nlocation &lt;- data.frame(\n  Name = c(\"한남대학교\", \"대전신세계\"),\n  lon = c(127.4219, 127.3821),\n  lat = c(36.3548, 36.3752)\n)\n\ndaejeon_map + geom_point(data = location, aes(x = lon, y = lat)) +\n  geom_text(data = location,\n            aes(label = Name),\n            size = 5,   # text 크기\n            vjust = -1) # text 위치\n\n\ngeom_point() 내의 옵션을 선택하여 점의 크기, 색깔, 모양 등 변경 가능\n\n\ndaejeon_map + geom_point(data = location, aes(x = lon, y = lat),\n                         size = 5, color = \"red\", alpha = 0.4) +\ngeom_text(data = location, aes(label = Name), size = 5, vjust = -1)\n\n\n한남대학교를 중심으로 그리기(center)\n\nenc2utf8 : UTF-8로 인코딩\nmaptype : “terrain”, “satellite”, “roadmap”, “hybrid”\ncenter : 맵의 중심\n\n\n\n# 한남대학교를 중심으로 그리기\ngc &lt;- geocode(enc2utf8(\"한남대학교\"))\n\nmap &lt;- get_googlemap(\n  center = as.numeric(gc),\n  maptype = \"roadmap\",\n  zoom = 13,\n  size = c(640, 640),\n  markers = gc) %&gt;% ggmap\n\nmap + geom_point(data = location, aes(x = lon, y = lat)) +\ngeom_text(data = location, aes(label = Name), size = 5, vjust = -1)\n\n\nPath(경로)\n\n\nmap + geom_path(data = location, aes(x = lon, y = lat), color = \"blue\", alpha = .5, lwd = 1)\n\n\n두 지역 사이의 경로 좌표 추출\n\nggmap::route : find a route from Google using different possible modes (\"driving\", \"walking\", \"bicycling\", \"transit\")\n\n\n\nlibrary(sf)\nlibrary(ggplot2)\nlibrary(tmap)\nlibrary(stplanr)\n\ngc_st &lt;- geocode(enc2utf8(\"한남대학교\"))\ngc_ed &lt;- geocode(enc2utf8(\"신세계백화점 대전신세계아트앤사이언스\"))\ngc_od &lt;- st_linestring(rbind(as.numeric(gc_st), as.numeric(gc_ed)))\n\nst_sfc(gc_od) # Linestring, CRS 없음\nst_crs(gc_od)\ngc_od &lt;- st_sfc(gc_od, crs = 4326)\n# st_sfc() : 좌표계가 비어있는 경우에 좌표계 지정\nst_crs(gc_od)\n\nqtm(gc_od)\ngc_od &lt;- st_sf(gc_od)\n# st_sf() : sfc와 sf class의 객체들을 하나로 통합\ngc_od$distance &lt;- as.numeric(st_length(gc_od))\n\nroute_od = route(l = gc_od,             # l : linestring\n                 route_fun = route_osrm,\n                 osrm.profile = \"car\")  # foot, bike, car\nqtm(route_od)\n\nmap &lt;- get_googlemap(\n  center = c(127.41, 36.37),\n  maptype = \"roadmap\",\n  zoom = 14,\n  size = c(640, 640),\n  markers = gc\n) %&gt;% ggmap(extent = \"device\")\n\nmap\n\nmap + geom_sf(data = route_od, inherit.aes = F)\n# inherit.aes = F : sf형식의 데이터를 그릴 때 필수 옵션\n\n\n지도를 꽉 채워서 출력(x, y축 삭제하고 그림만 출력)\n\nextent = \"device\"\n+ theme_void()\n\n\n\nmap &lt;- get_googlemap(\n  center = as.numeric(gc),\n  maptype = \"roadmap\",\n  zoom = 13,\n  size = c(640, 640),\n  markers = gc\n) %&gt;% ggmap(extent = \"device\")\nmap\n\nmap &lt;- get_googlemap(\n  center = as.numeric(gc),\n  maptype = \"roadmap\",\n  zoom = 13,\n  size = c(640, 640),\n  markers = gc\n) %&gt;% ggmap() + theme_void()\nmap\n\n\n\n\n\n# Houston 범죄 데이터\nstr(crime)\nHoustonmap &lt;- get_map(\"Houston\")\nggmap(Houstonmap)\nggmap(Houstonmap) + geom_point(data = crime, aes(x = lon, y = lat))\nggmap(Houstonmap) + geom_point(data = crime, aes(x = lon, y = lat), size = 0.1, alpha = 0.1) # 점의 크기, 점의 투명도 조절\n\n#지도 확대 & 특정 지역 데이터만 추출하기\nHoustonmap &lt;- get_map(\"Houston\", zoom = 14)\ncrime1 &lt;- crime[(crime$lon &lt; -95.344 & crime$lon &gt; -95.395) & (crime$lat &lt; 29.783 & crime$lat &gt; 29.738), ]\ncrime11 &lt;- crime %&gt;% filter((lon &lt; -95.344 & lon &gt; -95.395) & (lat &lt; 29.783 & lat &gt; 29.738))\nnrow(crime1) ; nrow(crime11)\ncrime1 %&gt;% arrange(desc(lon)) %&gt;% nrow()\ncrime11 %&gt;% arrange(desc(lon)) %&gt;% nrow()\n\nggmap(Houstonmap) + geom_point(data = crime1, aes(x = lon, y = lat), alpha = 0.3)\nggmap(Houstonmap) + geom_point(data = crime1, aes(x = lon, y = lat, colour = offense))\n\ncrime2 &lt;- crime1[!duplicated(crime1[, c(\"lon\", \"lat\")]), ] # 위, 경도에 대해 중복되지 않게 하나의 관측치만 선택\n\ncrime2$offense &lt;- as.character(crime2$offense) # 범죄 종류 문자형으로 변경\n\ncrime2$offense[crime2$offense == \"murder\" | crime2$offense == \"rape\"] &lt;- \"4\"\ncrime2$offense[crime2$offense == \"robbery\" | crime2$offense == \"aggravated assault\"] &lt;- \"3\"\ncrime2$offense[crime2$offense == \"burglary\" | crime2$offense == \"auto theft\"] &lt;- \"2\"\ncrime2$offense[crime2$offense == \"theft\"] &lt;- \"1\"\n\ncrime2$offense &lt;- as.numeric(crime2$offense) # 범죄 종류 문자형을 숫자형으로 변경\n\nggmap(Houstonmap) + geom_point(data = crime2, aes(x = lon, y = lat, size = offense), alpha = 0.2)\n\n# 범죄 위험도에 따라 점의 크기 및 색깔로 구별\nggmap(Houstonmap) + geom_point(data = crime2, aes(x = lon, y = lat, size = offense, colour = offense), alpha = 0.5) +\n  scale_colour_gradient(low = \"white\", high = \"red\")\n\ncrime3 &lt;- crime2[crime2$date == \"1/1/2010\", ]\n\ncrime4 &lt;- crime3[!duplicated(crime3[, c(\"hour\")]), ]\n\nnrow(crime3) ; nrow(crime4)\n\nggmap(Houstonmap) + geom_point(data = crime3, aes(x = lon, y = lat)) +\n  geom_text(data = crime4, aes(label = street), vjust = 1.2) +\n  geom_path(data = crime4, aes(x = lon, y = lat), color = \"red\")"
  },
  {
    "objectID": "Spatial_Information_Analysis.html#chapter13-transportation",
    "href": "Spatial_Information_Analysis.html#chapter13-transportation",
    "title": "Spatial Information Analysis",
    "section": "",
    "text": "names(bristol_zones) ; names(bristol_od)\n#&gt; [1] \"geo_code\" \"name\"     \"geometry\"\n#&gt; [1] \"o\"          \"d\"          \"all\"        \"bicycle\"    \"foot\"      \n#&gt; [6] \"car_driver\" \"train\"\nnrow(bristol_zones)  ; nrow(bristol_od)\n#&gt; [1] 102\n#&gt; [1] 2910\n\n# O : Zone of the Origin / D : Zone of the Dest\n\nzones_attr = bristol_od %&gt;%\n  group_by(o) %&gt;%\n  summarize_if(is.numeric, sum) %&gt;%\n  dplyr::rename(geo_code = o)\n\nsummary(zones_attr$geo_code %in% bristol_zones$geo_code) # 일치하는지 확인\n#&gt;    Mode    TRUE \n#&gt; logical     102\n\n\nzones_joined = left_join(bristol_zones, zones_attr, by = \"geo_code\")\nnrow(zones_joined)\n#&gt; [1] 102\nsum(zones_joined$all)\n#&gt; [1] 238805\n\nnames(zones_joined)\n#&gt; [1] \"geo_code\"   \"name\"       \"all\"        \"bicycle\"    \"foot\"      \n#&gt; [6] \"car_driver\" \"train\"      \"geometry\"\n#&gt; [1] \"geo_code\" \"name\" \"all\" \"bicycle\" \"foot\" \"car_driver\" \"train\" \"geometry\"\nnames(zones_joined)[3] &lt;- c(\"all_orig\")\nnames(zones_joined)\n#&gt; [1] \"geo_code\"   \"name\"       \"all_orig\"   \"bicycle\"    \"foot\"      \n#&gt; [6] \"car_driver\" \"train\"      \"geometry\"\n\nzones_od = bristol_od %&gt;%\n  group_by(d) %&gt;%\n  summarize_if(is.numeric, sum) %&gt;%\n  dplyr::select(geo_code = d, all_dest = all) %&gt;%\n  inner_join(zones_joined, ., by = \"geo_code\")\n\nzones_od\n#&gt; Simple feature collection with 102 features and 8 fields\n#&gt; Geometry type: MULTIPOLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: -2.845847 ymin: 51.28248 xmax: -2.252388 ymax: 51.73982\n#&gt; Geodetic CRS:  WGS 84\n#&gt; First 10 features:\n#&gt;     geo_code                             name all_orig bicycle foot car_driver\n#&gt; 1  E02002985 Bath and North East Somerset 001      868      30  173        414\n#&gt; 2  E02002987 Bath and North East Somerset 003      898      34  117        523\n#&gt; 3  E02003005 Bath and North East Somerset 021      786      19   91        593\n#&gt; 4  E02003012                      Bristol 001     3312     161  330       2058\n#&gt; 5  E02003013                      Bristol 002     3715     188  615       2021\n#&gt; 6  E02003014                      Bristol 003     2220     126  270       1239\n#&gt; 7  E02003015                      Bristol 004     1633     166  307        786\n#&gt; 8  E02003016                      Bristol 005     2411     218  440       1105\n#&gt; 9  E02003017                      Bristol 006     1590     187  208        898\n#&gt; 10 E02003018                      Bristol 007     1690      96  143       1048\n#&gt;    train all_dest                       geometry\n#&gt; 1     43      744 MULTIPOLYGON (((-2.510462 5...\n#&gt; 2     58      561 MULTIPOLYGON (((-2.476122 5...\n#&gt; 3      8      427 MULTIPOLYGON (((-2.55073 51...\n#&gt; 4     12      701 MULTIPOLYGON (((-2.595763 5...\n#&gt; 5      6      940 MULTIPOLYGON (((-2.593783 5...\n#&gt; 6      5     3469 MULTIPOLYGON (((-2.639581 5...\n#&gt; 7      7     4980 MULTIPOLYGON (((-2.584973 5...\n#&gt; 8     23      297 MULTIPOLYGON (((-2.565948 5...\n#&gt; 9      9     1459 MULTIPOLYGON (((-2.616485 5...\n#&gt; 10    20      128 MULTIPOLYGON (((-2.637681 5...\n\nqtm(zones_od, c(\"all_orig\", \"all_dest\")) +\ntm_layout(panel.labels = c(\"Origin\", \"Destination\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nod_top5 = bristol_od %&gt;%\n  arrange(desc(all)) %&gt;%\n  top_n(5, wt = all)\n\nbristol_od$Active = (bristol_od$bicycle + bristol_od$foot) / bristol_od$all * 100\n\nod_intra = filter(bristol_od, o == d) # 지역 내 이동\nod_inter = filter(bristol_od, o != d) # 지역 외 이동\nod_intra ; od_inter # 102행 / 2808행\n#&gt; # A tibble: 102 × 8\n#&gt;    o         d           all bicycle  foot car_driver train Active\n#&gt;    &lt;chr&gt;     &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n#&gt;  1 E02002985 E02002985   209       5   127         59     0   63.2\n#&gt;  2 E02002987 E02002987   166       8    61         89     2   41.6\n#&gt;  3 E02003005 E02003005   383       8    87        256     1   24.8\n#&gt;  4 E02003012 E02003012   315       5   181        102     0   59.0\n#&gt;  5 E02003013 E02003013   318       7   165        112     0   54.1\n#&gt;  6 E02003014 E02003014   414      35   139        185     0   42.0\n#&gt;  7 E02003015 E02003015   240      18   142         61     0   66.7\n#&gt;  8 E02003016 E02003016   119       7    65         30     2   60.5\n#&gt;  9 E02003017 E02003017   147       8    70         60     1   53.1\n#&gt; 10 E02003018 E02003018    67       0    39         24     1   58.2\n#&gt; # ℹ 92 more rows\n#&gt; # A tibble: 2,808 × 8\n#&gt;    o         d           all bicycle  foot car_driver train Active\n#&gt;    &lt;chr&gt;     &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n#&gt;  1 E02002985 E02002987   121       7    35         62     0  34.7 \n#&gt;  2 E02002985 E02003036    32       2     1         10     1   9.38\n#&gt;  3 E02002985 E02003043   141       1     2         56    17   2.13\n#&gt;  4 E02002985 E02003049    56       2     4         36     0  10.7 \n#&gt;  5 E02002985 E02003054    42       4     0         21     0   9.52\n#&gt;  6 E02002985 E02003100    22       0     0         19     3   0   \n#&gt;  7 E02002985 E02003106    48       3     1         33     8   8.33\n#&gt;  8 E02002985 E02003108    31       0     0         29     1   0   \n#&gt;  9 E02002985 E02003121    42       1     2         34     0   7.14\n#&gt; 10 E02002985 E02006887   103       5     1         36    13   5.83\n#&gt; # ℹ 2,798 more rows\n\ndesire_lines = od2line(od_inter, zones_od)\n#&gt; Creating centroids representing desire line start and end points.\n# od2line : polygon으로 되어있는 두 지역의 중심점을 계산해서 linestring으로 변환\n#&gt; Creating centroids representing desire line start and end points.\nqtm(desire_lines, lines.lwd = \"all\")\n#&gt; Legend for line widths not available in view mode.\n\n\n\n\n\n\n\ndesire_lines$distance = as.numeric(st_length(desire_lines))\ndesire_carshort = dplyr::filter(desire_lines, car_driver &gt; 300 & distance &lt; 5000)\nroute_carshort = route(l = desire_carshort, route_fun = route_osrm, osrm.profile = \"car\")  # foot, bike, car\n#&gt; Most common output is sf\ndesire_carshort$geom_car = st_geometry(route_carshort)\n\nplot(st_geometry(desire_carshort))\nplot(desire_carshort$geom_car, col = \"red\", add = TRUE)\nplot(st_geometry(st_centroid(zones_od)), add = TRUE)\n#&gt; Warning: st_centroid assumes attributes are constant over geometries\n\n\n\n\n\ngetmap &lt;- get_googlemap(\"bristol\", zoom = 11)\nbristol_map &lt;- ggmap(getmap)\n\n# 센터 조정\ngetmap &lt;- get_googlemap(center = c(-2.56, 51.53), zoom = 12)\nbristol_map &lt;- ggmap(getmap)\nbristol_map + geom_sf(data = desire_carshort, inherit.aes = F) +\n  geom_sf(data = desire_carshort$geom_car,\n          inherit.aes = F,\n          col = \"red\") +\n  geom_sf(data = st_geometry(st_centroid(zones_od)), inherit.aes = F)"
  },
  {
    "objectID": "Spatial_Information_Analysis.html#사망교통사고-정보-분석",
    "href": "Spatial_Information_Analysis.html#사망교통사고-정보-분석",
    "title": "Spatial Information Analysis",
    "section": "",
    "text": "도로교통공단 TAAS에서는 사망교통사고 정보를 공개하고 있음\n\n교통사고 일시 부터 30일이내 사망한 경우를 사망교통사고라 정의하고 사고정보를 선택한 조건에 따라 json/xml형식으로 제공\n사망 교통 사고 정보\n\n사망사고 년, 월, 일, 시, 주야\n사망사고 건수\n사망사고 사망자수, 부상자수, 중상자수, 경상자수, 부상신고자수\n사망사고 위치 좌표 및 지역명\n사망사고 유형, 위반사항, 차량 종류, 도로 형태\n\n\n데이터 불러오기(https://taas.koroad.or.kr/api/selectDeathDataSet.do)\n\n다운받은 데이터를 R로 불러온 뒤 데이터 속성 확인하세요. 어떤 정보가 있는지, 활용할 위치 정보가 있는지 확인하세요\n\n\n\nSys.setlocale(\"LC_ALL\",\"Korean\")\n#&gt; Warning in Sys.setlocale(\"LC_ALL\", \"Korean\"): using locale code page other than\n#&gt; 65001 (\"UTF-8\") may cause problems\n#&gt; [1] \"LC_COLLATE=Korean_Korea.949;LC_CTYPE=Korean_Korea.949;LC_MONETARY=Korean_Korea.949;LC_NUMERIC=C;LC_TIME=Korean_Korea.949\"\ngetwd()\n#&gt; [1] \"D:/Study-Blog\"\nraw.data &lt;- read.csv(\"./Spatial_Information_Analysis/12_20_death.csv\", header = TRUE, fileEncoding = \"EUC-KR\")\n## 구조 확인\nstr(raw.data)\n#&gt; 'data.frame':    37128 obs. of  23 variables:\n#&gt;  $ 발생년               : int  2012 2012 2012 2012 2012 2012 2012 2012 2012 2012 ...\n#&gt;  $ 발생년월일시         : int  2012010101 2012010101 2012010108 2012010110 2012010103 2012010116 2012010210 2012010104 2012010104 2012010102 ...\n#&gt;  $ 주야                 : chr  \"야간\" \"야간\" \"주간\" \"주간\" ...\n#&gt;  $ 요일                 : chr  \"일\" \"일\" \"일\" \"일\" ...\n#&gt;  $ 사망자수             : int  1 1 1 2 1 1 2 1 1 1 ...\n#&gt;  $ 사상자수             : int  1 6 1 2 1 1 2 1 2 4 ...\n#&gt;  $ 중상자수             : int  0 5 0 0 0 0 0 0 1 0 ...\n#&gt;  $ 경상자수             : int  0 0 0 0 0 0 0 0 0 3 ...\n#&gt;  $ 부상신고자수         : int  0 0 0 0 0 0 0 0 0 0 ...\n#&gt;  $ 발생지시도           : chr  \"서울\" \"전북\" \"충남\" \"경남\" ...\n#&gt;  $ 발생지시군구         : chr  \"은평구\" \"정읍시\" \"청양군\" \"합천군\" ...\n#&gt;  $ 사고유형_대분류      : chr  \"차대사람\" \"차대차\" \"차량단독\" \"차대차\" ...\n#&gt;  $ 사고유형_중분류      : chr  \"차도통행중\" \"정면충돌\" \"공작물충돌\" \"측면충돌\" ...\n#&gt;  $ 사고유형             : chr  \"차도통행중\" \"정면충돌\" \"공작물충돌\" \"측면충돌\" ...\n#&gt;  $ 법규위반             : chr  \"안전운전 의무 불이행\" \"중앙선 침범\" \"안전운전 의무 불이행\" \"과속\" ...\n#&gt;  $ 도로형태_대분류      : chr  \"단일로\" \"단일로\" \"단일로\" \"교차로\" ...\n#&gt;  $ 도로형태             : chr  \"기타단일로\" \"기타단일로\" \"기타단일로\" \"교차로내\" ...\n#&gt;  $ 당사자종별_1당_대분류: chr  \"승용차\" \"승용차\" \"승용차\" \"승합차\" ...\n#&gt;  $ 당사자종별_2당_대분류: chr  \"보행자\" \"승용차\" \"없음\" \"승용차\" ...\n#&gt;  $ 발생위치X_UTMK       : int  949860 946537 940016 1059321 1070222 1036880 1079124 1114053 911131 955269 ...\n#&gt;  $ 발생위치Y_UTMK       : int  1957179 1737695 1832833 1748774 1834630 1827821 1708218 1761943 1861851 1952221 ...\n#&gt;  $ 경도                 : num  127 127 127 128 128 ...\n#&gt;  $ 위도                 : num  37.6 35.6 36.5 35.7 36.5 ...\n## 테이블 확인\nView(raw.data)\n\n\n데이터 추출하기\n\n다운받은 데이터는 전국에 대한 사망교통사고 정보이다. 대전지역에 2016년부터 2020년까지의 정보만을 추출하세요.\n\n추출한 데이터의 경도, 위도에 결측값 및 0인 데이터가 있는지 확인하세요.\n\n\n\n\n## 1. 대전 지역 2016 ~ 2020년 데이터 추출\ndaejeon &lt;- filter(raw.data,  발생지시도 == \"대전\" &  발생년 &gt; 2015)\n\n## 2. 사고 발생 시작점 경도/위도 데이터의 범위 살펴보기\nrange(daejeon$경도) ; range(daejeon$위도)\n#&gt; [1] 127.2653 127.5278\n#&gt; [1] 36.22335 36.45634\n\n## 3. 경도/위도 데이터가 NA인 데이터 확인하기\nsum(is.na(daejeon$경도)) ; sum(is.na(daejeon$위도))\n#&gt; [1] 0\n#&gt; [1] 0\n\n## 4. 경도/위도 데이터가 0인 데이터 확인하기\ndaejeon[daejeon$경도 == 0,]\n#&gt;  [1] 발생년                발생년월일시          주야                 \n#&gt;  [4] 요일                  사망자수              사상자수             \n#&gt;  [7] 중상자수              경상자수              부상신고자수         \n#&gt; [10] 발생지시도            발생지시군구          사고유형_대분류      \n#&gt; [13] 사고유형_중분류       사고유형              법규위반             \n#&gt; [16] 도로형태_대분류       도로형태              당사자종별_1당_대분류\n#&gt; [19] 당사자종별_2당_대분류 발생위치X_UTMK        발생위치Y_UTMK       \n#&gt; [22] 경도                  위도                 \n#&gt; &lt;0 행&gt; &lt;또는 row.names의 길이가 0입니다&gt;\ndaejeon[daejeon$위도 == 0,]\n#&gt;  [1] 발생년                발생년월일시          주야                 \n#&gt;  [4] 요일                  사망자수              사상자수             \n#&gt;  [7] 중상자수              경상자수              부상신고자수         \n#&gt; [10] 발생지시도            발생지시군구          사고유형_대분류      \n#&gt; [13] 사고유형_중분류       사고유형              법규위반             \n#&gt; [16] 도로형태_대분류       도로형태              당사자종별_1당_대분류\n#&gt; [19] 당사자종별_2당_대분류 발생위치X_UTMK        발생위치Y_UTMK       \n#&gt; [22] 경도                  위도                 \n#&gt; &lt;0 행&gt; &lt;또는 row.names의 길이가 0입니다&gt;"
  },
  {
    "objectID": "Spatial_Information_Analysis.html#spspatial-objects-객체클래스로-문제-풀기",
    "href": "Spatial_Information_Analysis.html#spspatial-objects-객체클래스로-문제-풀기",
    "title": "Spatial Information Analysis",
    "section": "",
    "text": "## 5. 년도별 사고 위치 정보 지도 상에 표출하기\nlibrary(ggmap)\nregister_google(key = 'AIzaSyB4jjrVVAzb9fl8FQrQqUONAsaRBppWuSA')\nmap &lt;- qmap(location = enc2utf8(\"대전\"),\n            zoom = 12,\n            maptype = \"roadmap\")\np &lt;-\n  map + geom_point(\n    data = daejeon,\n    aes(x = 경도, y = 위도, colour = factor(발생년)),\n    size = 2,\n    alpha = 0.7\n  )\np + ggtitle(\"대전시 사망사고 위치(2016-2020)\")\n\n\nstat_bin2d() 함수 활용하여 Grid 내 사고횟수 출력\n\n\n## stat_bin2d() 함수 활용하여 특정 영역 내 사고 횟수 출력\np &lt;- map + stat_bin2d(data = daejeon,\n                      aes(x = 경도, y = 위도),\n                      bins = 30,   # bins : grid의 개수\n                      alpha = 0.5) # binwidth 로도 가능\np\n## stat_bin2d() 함수 활용하여 특정 영역 내 사고 횟수 출력/위성지도/컬러 변경\nmap &lt;- qmap(location = \"Daejeon\",\n            zoom = 12,\n            maptype = \"satellite\")\np &lt;- map + stat_bin2d(data = daejeon,\n                      aes(x = 경도, y = 위도),\n                      bins = 30,\n                      alpha = 0.5) # binwidth 로도 가능\np + scale_fill_gradient(low = \"yellow\", high = \"red\")\n\n\n\n\nGrid 내에 Count된 값 및 위치 확인하기\n\n\np_count &lt;- ggplot_build(p)$data[[4]] # cell의 값 출력\np_count &lt;- arrange(p_count, desc(value))\nhead(p_count)\n\n\nGrid 내(중심)에 Count값 표출\n\n\np + scale_fill_gradient(low = \"yellow\", high = \"red\") +\n  geom_text(data = p_count, aes((xmin + xmax) / 2, (ymin + ymax) / 2,\n                                label = count), col = \"white\")\n\n\n사고 유형 별로 표시하기\n\n\np &lt;-\n  map + stat_bin2d(\n    data = daejeon,\n    aes(\n      x = 경도,\n      y = 위도,\n      colour = factor(사고유형),\n      fill = factor(사고유형)\n    ),\n    bins = 30,\n    alpha = 0.5\n  )\np\n\n\nstat_density2d() 함수 활용하여 등고선으로 지도 위에 출력하기\n\n\nmap &lt;-\n  qmap(\n    location = \"Daejeon\",\n    zoom = 12,\n    maptype = 'roadmap',\n    color = 'bw'\n  )\np &lt;-\n  map + stat_density2d(\n    data = daejeon,\n    aes(x = 경도, y = 위도, fill = ..level..),\n    bins = 5,\n    alpha = 0.45,\n    size = 2,\n    geom = \"polygon\"\n  )\n# level : 레벨이 높을수록 더 진한색, size : 선 굵기, bins: 선 간격\np\n\n\ngeom_hex() 함수 활용하여 벌집 블롯으로 출력하기\n\n\n## 벌집 블롯으로 출력(geom_hex(), scale_fill_gradientn())\nlibrary(hexbin)\nmap &lt;- qmap(location = \"Daejeon\",\n            zoom = 11,\n            maptype = \"roadmap\")\np &lt;-\n  map + coord_cartesian() + # coord_cartesian() : 데카르트 좌표계\n  geom_hex(\n    data = daejeon,\n    aes(x = 경도, y = 위도),\n    bins = 12,\n    alpha = 0.6,\n    color = \"white\"\n  ) # geom_hex() only works with Cartesian coordinates\np\np &lt;- p + scale_fill_gradientn(colours = terrain.colors(15))\np\n\n# binwidth로 출력\np &lt;-\n  map + coord_cartesian() + geom_hex(\n    data = daejeon,\n    binwidth = c(0.05, 0.05), # binwidth : bin의 크기 설정\n    aes(x = 경도, y = 위도),\n    alpha = 0.6,\n    color = \"white\"\n  ) # geom_hex() only works with Cartesian coordinates\np\np &lt;- p + scale_fill_gradientn(colours = terrain.colors(15))\np\n\np_count &lt;- ggplot_build(p)$data[[4]] # cell의 값 출력\np_count &lt;- arrange(p_count, desc(count))\nhead(p_count)\n\n\n\n\n\n\n행정구역시군구 경계를 얻기 위해 데이터로 대전시 구 경계 shape 파일 획득\n\n\nlibrary(raster)\nlibrary(rgdal)\nlibrary(sf)\n\n## 동별 사망사고 추출하기\nmap &lt;-\n  qmap(\n    location = \"Daejeon\",\n    zoom = 11,\n    maptype = 'roadmap',\n    color = 'bw'\n  )\n\ndaejeon_area &lt;- shapefile('./Spatial_Information_Analysis/LARD_ADM_SECT_SGG_30/LARD_ADM_SECT_SGG_30.shp')\ndaejeon_area # 좌표체계 확인\n# str(daejeon_area)\nplot(daejeon_area, axes = T)\n\n\n위 plot의 좌표단위를 보면 평면직각좌표계(Projected Coordinate)를 기준으로 측정할 때 나올 수 있는 단위\n앞에서 사고 데이터의 좌표는 위경도 좌표이므로, 두 자료의 위치 좌표체계를 통일 시켜줄 필요가 있음\nspTransform() 를 통해 좌표변형 가능\n\nto_crs = CRS(\"+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs\")\n\n\n\nto_crs = CRS(\"+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs\")\ndaejeon_area2 &lt;- spTransform(daejeon_area, to_crs)\ndaejeon_area2\ndaejeon_area2@data # SP 데이터 내에서 출력을 하려면 @로 호출해야함\n\nplot(daejeon_area2, axes = T)\nmap + geom_polygon(\n  data = daejeon_area2,\n  aes(x = long, y = lat, group = group),\n  fill = 'white',\n  color = 'black'\n)\n\n\n구를 기준으로 사고 발생 횟수 계산\n\n\ngu_accident &lt;- daejeon %&gt;% group_by(발생지시군구) %&gt;% summarise(n = n())\ngu_accident\n#&gt; # A tibble: 5 x 2\n#&gt;   발생지시군구     n\n#&gt;   &lt;chr&gt;        &lt;int&gt;\n#&gt; 1 대덕구          81\n#&gt; 2 동구            98\n#&gt; 3 서구           100\n#&gt; 4 유성구          73\n#&gt; 5 중구            58\n\n\ndaejeon_area2 객체의 클래스는 SpatitalPloygonsDataFrame임\n이것을 데이터 프레임 형태로 변환해줄 때 사용하는 함수로는 ggplot2 패키지의 fortify() 함수가 있음\n구를 나타내는 SGG_NM 열로 기준\n\n\nclass(daejeon_area2)\ndaejeon_area2 &lt;- fortify(daejeon_area2, region = 'SGG_NM')\nclass(daejeon_area2)\nhead(daejeon_area2)\n\n\ndaejeon_area2의 “id”열과 gu_accident의 “발생지시군구”열을 기준으로 합치기 위해서 열Name을 “id”로 통일\nid열을 기준으로 두 데이터셋을 합쳐줌\n\n\nnames(gu_accident)[1] &lt;- \"id\"\ndaejeon_area3 &lt;- merge(daejeon_area2, gu_accident, by = 'id')\nhead(daejeon_area3)\n\ndaejeon_area3 %&gt;% group_by(id) %&gt;% summarise(n = mean(n))\n\n\ngeom_polygon()을 이용한 시각화\n\n\np &lt;-\n  map + geom_polygon(data = daejeon_area3,\n                     aes(\n                       x = long,\n                       y = lat,\n                       group = group,\n                       fill = n\n                     ),\n                     alpha = .5)\np\np + scale_fill_gradient(low = 'yellow', high = 'red')\nlibrary(viridis)\np + scale_fill_viridis()"
  },
  {
    "objectID": "Spatial_Information_Analysis.html#sfsimple-features-객체클래스로-문제-풀어보기",
    "href": "Spatial_Information_Analysis.html#sfsimple-features-객체클래스로-문제-풀어보기",
    "title": "Spatial Information Analysis",
    "section": "",
    "text": "구경계 데이터(daejeon_area2)를 sf클래스로 변환\nst_as_sf() : sp클래스를 sf클래스로 변환\n\n\ndaejeon_area2 &lt;- spTransform(daejeon_area, to_crs)\ndaejeon_area2\ndaejeon_area_sf &lt;- st_as_sf(daejeon_area2) # sp 클래스를 sf 클래스로 전환하기\ndaejeon_area_sf\nplot(st_geometry(daejeon_area_sf))\n\n\nst_point_on_surface() : 각 구별 지도상 중심점 구한 뒤 지도상에 표출\n\n\n# 각 구별 Center\ndaejeon_area_center &lt;- st_point_on_surface(daejeon_area_sf)\nplot(st_geometry(daejeon_area_sf))\nplot(daejeon_area_center , add = T, col = \"black\")\n\n\n사망사고데이터(point)를 sf클래스로 변환\n\n\ndaejeon_acc_sf &lt;-\n  daejeon %&gt;% st_as_sf(coords = c(\"경도\", \"위도\"),\n                       crs = 4326,\n                       remove = FALSE)\ndaejeon_acc_sf ## CRS : # WGS84\n\n# daejeon_acc &lt;- daejeon %&gt;% st_as_sf(coords = c(\"발생위치X_UTMK\", \"발생위치Y_UTMK\"),\n#                                     crs = 4326,\n#                                     remove = FALSE)\n# daejeon_acc\n\n\nst_intersection을 통해서 폴리곤(구경계)와 포인트(사망사고지점)데이터 합치기\n\n\n## Intersection between polygon and points\nintersection &lt;- st_intersection(daejeon_area_sf, daejeon_acc_sf)\nhead(intersection)\n\n## Plot intersection\nplot(st_geometry(daejeon_area_sf))\nplot(intersection, add = T, pch = 1)\n\n\n구별 사망사고 건수 Count하기\n\n\n## View result\ntable(intersection$SGG_NM)\n\n## Using dplyr\nint_result &lt;- intersection %&gt;%\n  group_by(SGG_NM) %&gt;%\n  count()\nint_result\n\n\nst_join() : 경계 데이터(daejeon_area_sf)에 결과(int_result) 합치기\n\n\nint_result0 &lt;- st_join(daejeon_area_sf, int_result)\nint_result0\n\n\nmap 위에 시각화\n\n\nmap &lt;-\n  qmap(\n    location = \"Daejeon\",\n    zoom = 11,\n    maptype = 'roadmap',\n    color = 'bw'\n  )\np &lt;-\n  map + geom_sf(data = int_result0,\n                inherit.aes = F, # sf형태 data 그릴 때 반드시 필요\n                aes(fill = n),\n                alpha = .5)\np\np + scale_fill_gradient(low = 'yellow', high = 'red')"
  },
  {
    "objectID": "Project.html",
    "href": "Project.html",
    "title": "Project",
    "section": "",
    "text": "No matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Profile",
    "section": "",
    "text": "한남대학교 비즈니스통계학과 | 2018.03 ~ 2022.02\n한남대학교 빅데이터응용학과 | 2023.03 ~ 2024.02 \n\n\n\n\n\n과학기술정보통신부 장관상 | 2022.09\n한국수자원공사장 사장상    | 2022.10 \n\n\n\n\n\n데이터 분석 준전문가 (ADsP) | 2021.09\n빅데이터분석기사 (BAE)        | 2023.07"
  },
  {
    "objectID": "index.html#jinwon-lee",
    "href": "index.html#jinwon-lee",
    "title": "Profile",
    "section": "",
    "text": "한남대학교 비즈니스통계학과 | 2018.03 ~ 2022.02\n한남대학교 빅데이터응용학과 | 2023.03 ~ 2024.02 \n\n\n\n\n\n과학기술정보통신부 장관상 | 2022.09\n한국수자원공사장 사장상    | 2022.10 \n\n\n\n\n\n데이터 분석 준전문가 (ADsP) | 2021.09\n빅데이터분석기사 (BAE)        | 2023.07"
  },
  {
    "objectID": "Data_Visualization/week9_DensityPlot.html",
    "href": "Data_Visualization/week9_DensityPlot.html",
    "title": "Density Plot",
    "section": "",
    "text": "titanic_all &lt;- read.csv('./data/titanic_all.csv')\n\ntitanic &lt;- titanic_all %&gt;%\n  mutate(sex = factor(sex, levels = c('male', 'female')))\n\ntitanic %&gt;% filter(!is.na(age)) %&gt;%\n  ggplot(aes(x = age)) +\n  geom_histogram(breaks = seq(0, 75, 5),color = 'white', fill = '56B4E9') +\n  scale_y_continuous(expand = c(0, 0),\n                     breaks = (0:5) * 25) +\n  scale_x_continuous(expand = c(0, 0),\n                     limits = c(0, 75),\n                     name = 'Age (years)') +\n  theme_light() +\n  theme(panel.border = element_blank(),\n        axis.line.x = element_blank(),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        plot.margin  = margin(3, 7, 3, 1.5))\n\n\n\n\n\n\n\n\nggplot(titanic, aes(x = age)) +\n  geom_density(fill = '#56B4E9',\n               color = '#01587A',\n               bw = 2, kernel = 'gaussian') +\n  scale_y_continuous(limits = c(0, 0.046),\n                     expand = c(0, 0),\n                     name = 'Density') +\n  scale_x_continuous(name ='Age (years)',\n                     limits = c(0, 75),\n                     expand = c(0, 0)) +\n  theme_light() +\n  theme(panel.border = element_blank(),\n        axis.line.x = element_blank(),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        plot.margin  = margin(3, 7, 3, 1.5))\n#&gt; Warning: Removed 557 rows containing non-finite values (`stat_density()`).\n\n\n\n\n\n\n\n\nggplot(titanic, aes(x = age,\n                    y = after_stat(count),\n                    fill = sex, color = sex)) +\n  geom_density(bw = 2,\n               kernel = 'gaussian',\n               alpha = 0.5) +\n  scale_y_continuous(expand = c(0, 0),\n                     name = 'Scaled Density') +\n  scale_x_continuous(name = 'Age (years)',\n                     limits = c(0, 75),\n                     expand = c(0, 0)) +\n  scale_fill_manual(values = c('#0072B2', '#D55E00'),\n                    name = 'Gender') +\n  scale_color_manual(values = colorspace::darken(c('#0072B2','#D55E00'), 0.5),\n                     name = 'Gender') +\n  theme_light() +\n  theme(panel.border = element_blank(),\n        axis.line.x = element_blank(),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        legend.position = c(.8, .8),\n        plot.margin  = margin(3, 7, 3, 1.5))\n#&gt; Warning: Removed 557 rows containing non-finite values (`stat_density()`).\n\n\n\n\n\n\n\n\nggplot(titanic, aes(x = age, y = after_stat(count))) +\n  geom_density(data = select(titanic, -sex),\n               aes(fill = 'all passengers'),\n                   color = 'transparent') +\n  geom_density(aes(fill = sex), bw = 2, color = 'transparent') +\n  scale_y_continuous(expand = c(0, 0), name = 'Scaled Density') +\n  scale_x_continuous(name = 'Passenger Age (years)',\n                     limits = c(0, 75), expand = c(0, 0)) +\n  scale_fill_manual(values = c('#B3B3B3A0','#D55E00', '#0072B2'),\n                    breaks = c('all passengers', 'male', 'female'),\n                    labels = c('all passengers', 'males', 'females'),\n                    name = NULL,\n                    guide = guide_legend(direction = 'horizontal')) +\n  theme_light() +\n  theme(panel.border = element_blank(),\n        axis.line.x = element_blank(),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        strip.background = element_rect(fill= 'white'),\n        strip.text.x = element_text(colour = 'black'),\n        legend.position = 'bottom')\n#&gt; Warning: Removed 557 rows containing non-finite values (`stat_density()`).\n#&gt; Removed 557 rows containing non-finite values (`stat_density()`).\n\n\n\n\n\n\n\n\ngender_counts &lt;- data.frame(age = (1:25) * 3 -  1.5,\n                            male = hist(filter(titanic, sex == 'male')$age,\n                                        breaks = (0:25) *3 + .01,\n                                        plot = FALSE)$counts,\n                            female = hist(filter(titanic, sex == 'female')$age,\n                                        breaks = (0:25) *3 + .01,\n                                        plot = FALSE)$counts) %&gt;%\n  reshape2::melt('age', variable.name = 'gender', value.name = 'count')\n\nggplot(gender_counts, aes(x = age,\n                          y = ifelse(gender == 'male', -1, 1) * count,\n                          fill = gender)) +\n  geom_col() +\n  scale_x_continuous(name = 'Age (years)',\n                     limits = c(0, 75),\n                     expand = c(0, 0)) +\n  scale_y_continuous(name = 'Count',\n                     breaks = (-2:1) * 20,\n                     labels=c('40', '20', '0', '20')) +\n  scale_fill_manual(values = c('#0072B2', '#D55E00'),\n                    guide = 'none') +\n  cowplot::draw_text(x = 70, y = -39, 'male', hjust = 0) +\n  cowplot::draw_text(x = 70, y = 21, 'female', hjust = 0) +\n  coord_flip() +\n  theme_light() +\n  theme(panel.border = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        axis.title.x = element_text(hjust = 0.61))\n\n\n\n\n\n\n\n\nggplot(iris, aes(x = Sepal.Length, colour = Species, fill = Species)) +\n  geom_density(alpha = .3) +\n  xlab('Petal Length (cm)') +\n  ylab('Density') +\n  ggtitle('Iris Density Plot') +\n  theme_light() +\n  theme(panel.border = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        legend.position = c(.82, .78))"
  },
  {
    "objectID": "Data_Visualization/week9_DensityPlot.html#visualizing-a-single-distribution-단일-분포-상태의-시각화",
    "href": "Data_Visualization/week9_DensityPlot.html#visualizing-a-single-distribution-단일-분포-상태의-시각화",
    "title": "Density Plot",
    "section": "",
    "text": "titanic_all &lt;- read.csv('./data/titanic_all.csv')\n\ntitanic &lt;- titanic_all %&gt;%\n  mutate(sex = factor(sex, levels = c('male', 'female')))\n\ntitanic %&gt;% filter(!is.na(age)) %&gt;%\n  ggplot(aes(x = age)) +\n  geom_histogram(breaks = seq(0, 75, 5),color = 'white', fill = '56B4E9') +\n  scale_y_continuous(expand = c(0, 0),\n                     breaks = (0:5) * 25) +\n  scale_x_continuous(expand = c(0, 0),\n                     limits = c(0, 75),\n                     name = 'Age (years)') +\n  theme_light() +\n  theme(panel.border = element_blank(),\n        axis.line.x = element_blank(),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        plot.margin  = margin(3, 7, 3, 1.5))\n\n\n\n\n\n\n\n\nggplot(titanic, aes(x = age)) +\n  geom_density(fill = '#56B4E9',\n               color = '#01587A',\n               bw = 2, kernel = 'gaussian') +\n  scale_y_continuous(limits = c(0, 0.046),\n                     expand = c(0, 0),\n                     name = 'Density') +\n  scale_x_continuous(name ='Age (years)',\n                     limits = c(0, 75),\n                     expand = c(0, 0)) +\n  theme_light() +\n  theme(panel.border = element_blank(),\n        axis.line.x = element_blank(),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        plot.margin  = margin(3, 7, 3, 1.5))\n#&gt; Warning: Removed 557 rows containing non-finite values (`stat_density()`).\n\n\n\n\n\n\n\n\nggplot(titanic, aes(x = age,\n                    y = after_stat(count),\n                    fill = sex, color = sex)) +\n  geom_density(bw = 2,\n               kernel = 'gaussian',\n               alpha = 0.5) +\n  scale_y_continuous(expand = c(0, 0),\n                     name = 'Scaled Density') +\n  scale_x_continuous(name = 'Age (years)',\n                     limits = c(0, 75),\n                     expand = c(0, 0)) +\n  scale_fill_manual(values = c('#0072B2', '#D55E00'),\n                    name = 'Gender') +\n  scale_color_manual(values = colorspace::darken(c('#0072B2','#D55E00'), 0.5),\n                     name = 'Gender') +\n  theme_light() +\n  theme(panel.border = element_blank(),\n        axis.line.x = element_blank(),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        legend.position = c(.8, .8),\n        plot.margin  = margin(3, 7, 3, 1.5))\n#&gt; Warning: Removed 557 rows containing non-finite values (`stat_density()`).\n\n\n\n\n\n\n\n\nggplot(titanic, aes(x = age, y = after_stat(count))) +\n  geom_density(data = select(titanic, -sex),\n               aes(fill = 'all passengers'),\n                   color = 'transparent') +\n  geom_density(aes(fill = sex), bw = 2, color = 'transparent') +\n  scale_y_continuous(expand = c(0, 0), name = 'Scaled Density') +\n  scale_x_continuous(name = 'Passenger Age (years)',\n                     limits = c(0, 75), expand = c(0, 0)) +\n  scale_fill_manual(values = c('#B3B3B3A0','#D55E00', '#0072B2'),\n                    breaks = c('all passengers', 'male', 'female'),\n                    labels = c('all passengers', 'males', 'females'),\n                    name = NULL,\n                    guide = guide_legend(direction = 'horizontal')) +\n  theme_light() +\n  theme(panel.border = element_blank(),\n        axis.line.x = element_blank(),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        strip.background = element_rect(fill= 'white'),\n        strip.text.x = element_text(colour = 'black'),\n        legend.position = 'bottom')\n#&gt; Warning: Removed 557 rows containing non-finite values (`stat_density()`).\n#&gt; Removed 557 rows containing non-finite values (`stat_density()`).\n\n\n\n\n\n\n\n\ngender_counts &lt;- data.frame(age = (1:25) * 3 -  1.5,\n                            male = hist(filter(titanic, sex == 'male')$age,\n                                        breaks = (0:25) *3 + .01,\n                                        plot = FALSE)$counts,\n                            female = hist(filter(titanic, sex == 'female')$age,\n                                        breaks = (0:25) *3 + .01,\n                                        plot = FALSE)$counts) %&gt;%\n  reshape2::melt('age', variable.name = 'gender', value.name = 'count')\n\nggplot(gender_counts, aes(x = age,\n                          y = ifelse(gender == 'male', -1, 1) * count,\n                          fill = gender)) +\n  geom_col() +\n  scale_x_continuous(name = 'Age (years)',\n                     limits = c(0, 75),\n                     expand = c(0, 0)) +\n  scale_y_continuous(name = 'Count',\n                     breaks = (-2:1) * 20,\n                     labels=c('40', '20', '0', '20')) +\n  scale_fill_manual(values = c('#0072B2', '#D55E00'),\n                    guide = 'none') +\n  cowplot::draw_text(x = 70, y = -39, 'male', hjust = 0) +\n  cowplot::draw_text(x = 70, y = 21, 'female', hjust = 0) +\n  coord_flip() +\n  theme_light() +\n  theme(panel.border = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        axis.title.x = element_text(hjust = 0.61))\n\n\n\n\n\n\n\n\nggplot(iris, aes(x = Sepal.Length, colour = Species, fill = Species)) +\n  geom_density(alpha = .3) +\n  xlab('Petal Length (cm)') +\n  ylab('Density') +\n  ggtitle('Iris Density Plot') +\n  theme_light() +\n  theme(panel.border = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        legend.position = c(.82, .78))"
  },
  {
    "objectID": "Data_Visualization/week9_DensityPlot.html#visualizing-a-single-distribution---단일-분포-상태의-시각화",
    "href": "Data_Visualization/week9_DensityPlot.html#visualizing-a-single-distribution---단일-분포-상태의-시각화",
    "title": "Density Plot",
    "section": "7.1 Visualizing a single distribution - 단일 분포 상태의 시각화",
    "text": "7.1 Visualizing a single distribution - 단일 분포 상태의 시각화\n\n# 공공데이터포털 &gt; 행정안전부_지역별(법정동) 성별 연령별 주민등록 인구수\n# https://www.data.go.kr/data/15099158/fileData.do\ndata_age_raw &lt;- read.csv('./data/행정안전부_지역별(법정동) 성별 연령별 주민등록 인구수_20230430.csv', fileEncoding = 'CP949')\n\n# 자료형 변경\ndata_age_raw$법정동코드 &lt;- data_age_raw$법정동코드 %&gt;% as.character() # numeric -&gt; character\n\n# Reshape\nmeasure_col &lt;- names(data_age_raw)[10 : ncol(data_age_raw)]\n\ndata_age_melt &lt;- data_age_raw %&gt;% \n  select(-기준연월, -(시군구명:여자)) %&gt;%\n  filter(시도명 == '대전광역시') %&gt;% \n  reshape2::melt(id.vars = c('법정동코드', '시도명'),\n                 measure.vars = measure_col,\n                 variable.name = '나이_성별',\n                 value.name = '인구수') %&gt;% \n  mutate(나이_성별 = as.character(나이_성별)) # factor -&gt; character\n\n# 나이 성별 분리\ndata_age_melt &lt;- data_age_melt %&gt;% \n  mutate(age = gsub('\\\\D','', 나이_성별) %&gt;% as.integer(),\n         sex = substring(나이_성별, nchar(나이_성별) - 1, nchar(나이_성별)))\n\n# 연령대\nage_len &lt;- 5\ndata_age_cat &lt;- data_age_melt %&gt;%\n  mutate(age_cat = cut(age + 0.1, breaks = seq(0, 120, age_len), labels = F)) %&gt;%\n  group_by (age_cat) %&gt;%\n  summarise(count = sum (인구수))\n\ndata_age_cat$age_cat &lt;- age_len*(data_age_cat$age_cat - 1) + age_len/2\n\n\nFigure 7.1\n\n# Histogram\nggplot(data_age_cat, aes(x = age_cat, y = count/1000)) +\n  geom_col(fill = '#56B4E9') +\n  scale_y_continuous (expand = c(0, 0), name = '인구(천)') +\n  scale_x_continuous (expand = c(0, 0), name = '연령(세)') +\n  theme_light() +\n  theme(panel.border = element_blank(),\n        axis.line.x = element_blank(),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        plot.margin = margin(3, 7, 3, 1.5))\n\n\n\n\n\n\nFigure 7.3\n\n# Density\nggplot(data_age_cat, aes(x = age_cat, weight = count)) +\n  geom_density (fill = '#56B4E9', bw = 3) +\n  scale_y_continuous(expand = c(0, 0), name = '인구(밀도)') +\n  scale_x_continuous(expand = c(0, 0), name = '연령(세)') +\n  theme_light() +\n  theme(panel.border= element_blank(),\n        axis.line.x = element_blank(),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        plot.margin = margin(3, 7, 3, 1.5))"
  },
  {
    "objectID": "Data_Visualization/week9_DensityPlot.html#visualizing-multiple-distributions-at-the-same-time---여러-분포-상태를-하나의-도표로-시각화",
    "href": "Data_Visualization/week9_DensityPlot.html#visualizing-multiple-distributions-at-the-same-time---여러-분포-상태를-하나의-도표로-시각화",
    "title": "Density Plot",
    "section": "7.2 Visualizing multiple distributions at the same time - 여러 분포 상태를 하나의 도표로 시각화",
    "text": "7.2 Visualizing multiple distributions at the same time - 여러 분포 상태를 하나의 도표로 시각화\n\n# 연령대, 성별\nage_len &lt;- 5\ndata_age_cat &lt;- data_age_melt %&gt;%\n  mutate(age_cat = cut(age + 0.1, breaks = seq(0, 120, age_len), labels = F)) %&gt;%\n  group_by(age_cat, sex) %&gt;%\n  summarise(count = sum(인구수))\n#&gt; `summarise()` has grouped output by 'age_cat'. You can override using the\n#&gt; `.groups` argument.\n\ndata_age_cat$age_cat &lt;- age_len * (data_age_cat$age_cat - 1) + age_len/2\n\n\nFigure 7.8\n\n# Density\nggplot(data_age_cat, aes(x = age_cat, weight = count, fill = sex, color = sex)) +\n  geom_density(bw = 3, alpha = 0.5) +\n  scale_y_continuous(expand = c(0, 0), name = '인구(밀도)') +\n  scale_x_continuous(expand = c(0, 0), name= '연령(세)') +\n  scale_fill_manual(values = c('#0072B2', '#D55E00'), name = '성별') +\n  scale_color_manual(values = c('#003A5E', '#6D2D00'), name = '성별') + \n  theme_light () +\n  theme(panel.border = element_blank(),\n        axis.line.x = element_blank(),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        legend.position = c(.8, .8),\n        plot.margin = margin(3, 7, 3, 1.5))\n\n\n\n\n\n\nFigure 7.10\n\nggplot(data_age_cat, aes(x = age_cat, y = ifelse(sex == '남자', -1, 1) *count, fill = sex)) +\n  geom_col() +\n  scale_x_continuous(name = 'Age (years)', expand = c(0, 0)) +\n  scale_y_continuous(name = 'Count', breaks = (-3:3) * 20000,\n                     labels = format(abs((-3:3) * 20000), big.mark = ',')) +\n  scale_fill_manual(values = c('#0072B2', '#D55E00'), guide = 'none') +\n  draw_text(x = 100, y = -40000, 'male', hjust = 0.5) +\n  draw_text(x = 100, y = 40000, 'female', hjust = 0.5) +\n  coord_flip() +\n  theme_light() +\n  theme(panel.border= element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank())"
  },
  {
    "objectID": "Data_Visualization/week5_Color_Scale.html",
    "href": "Data_Visualization/week5_Color_Scale.html",
    "title": "Color Scales",
    "section": "",
    "text": "# ColorBrewer palettes\nRColorBrewer::display.brewer.all()\n\n\n\n\n\n# Read csv File\nUS_census &lt;- read.csv(\"./data/US_census.csv\")\nUS_regions &lt;- read.csv(\"./data/US_regions.csv\")\n\nUS_census %&gt;% names()\n#&gt;  [1] \"state\"                                    \n#&gt;  [2] \"name\"                                     \n#&gt;  [3] \"FIPS\"                                     \n#&gt;  [4] \"pop2010\"                                  \n#&gt;  [5] \"pop2000\"                                  \n#&gt;  [6] \"age_under_5\"                              \n#&gt;  [7] \"age_under_18\"                             \n#&gt;  [8] \"age_over_65\"                              \n#&gt;  [9] \"female\"                                   \n#&gt; [10] \"white\"                                    \n#&gt; [11] \"black\"                                    \n#&gt; [12] \"native\"                                   \n#&gt; [13] \"asian\"                                    \n#&gt; [14] \"pac_isl\"                                  \n#&gt; [15] \"two_plus_races\"                           \n#&gt; [16] \"hispanic\"                                 \n#&gt; [17] \"white_not_hispanic\"                       \n#&gt; [18] \"no_move_in_one_plus_year\"                 \n#&gt; [19] \"foreign_born\"                             \n#&gt; [20] \"foreign_spoken_at_home\"                   \n#&gt; [21] \"hs_grad\"                                  \n#&gt; [22] \"bachelors\"                                \n#&gt; [23] \"veterans\"                                 \n#&gt; [24] \"mean_work_travel\"                         \n#&gt; [25] \"housing_units\"                            \n#&gt; [26] \"home_ownership\"                           \n#&gt; [27] \"housing_multi_unit\"                       \n#&gt; [28] \"median_val_owner_occupied\"                \n#&gt; [29] \"households\"                               \n#&gt; [30] \"persons_per_household\"                    \n#&gt; [31] \"per_capita_income\"                        \n#&gt; [32] \"median_household_income\"                  \n#&gt; [33] \"poverty\"                                  \n#&gt; [34] \"private_nonfarm_establishments\"           \n#&gt; [35] \"private_nonfarm_employment\"               \n#&gt; [36] \"percent_change_private_nonfarm_employment\"\n#&gt; [37] \"nonemployment_establishments\"             \n#&gt; [38] \"firms\"                                    \n#&gt; [39] \"black_owned_firms\"                        \n#&gt; [40] \"native_owned_firms\"                       \n#&gt; [41] \"asian_owned_firms\"                        \n#&gt; [42] \"pac_isl_owned_firms\"                      \n#&gt; [43] \"hispanic_owned_firms\"                     \n#&gt; [44] \"women_owned_firms\"                        \n#&gt; [45] \"manufacturer_shipments_2007\"              \n#&gt; [46] \"mercent_whole_sales_2007\"                 \n#&gt; [47] \"sales\"                                    \n#&gt; [48] \"sales_per_capita\"                         \n#&gt; [49] \"accommodation_food_service\"               \n#&gt; [50] \"building_permits\"                         \n#&gt; [51] \"fed_spending\"                             \n#&gt; [52] \"area\"                                     \n#&gt; [53] \"density\"\nUS_regions %&gt;% names()\n#&gt; [1] \"state\"     \"state_abr\" \"region\"    \"division\""
  },
  {
    "objectID": "Data_Visualization/week5_Color_Scale.html#make-color-vector-in-order-of-the-state",
    "href": "Data_Visualization/week5_Color_Scale.html#make-color-vector-in-order-of-the-state",
    "title": "Color Scales",
    "section": "Make color vector in order of the state",
    "text": "Make color vector in order of the state\n\n# 4개 지방의 색 지정\nregion_colors &lt;- c(\"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\")\nstate_colors &lt;- region_colors[as.numeric(popgrowth_df$region)]\n\n# 색상을 밝게 또는 어둡게 생성 (음수는 어둡게)\nstate_colors_dark &lt;- colorspace::darken(state_colors, 0.4)\n\nggplot(popgrowth_df, aes(x = state, y = 100 * popgrowth, fill = region)) +\n    geom_col() +\n    scale_y_continuous(\n        name = \"population growth, 2000 to 2010\",\n        labels = scales::percent_format(scale = 1),\n        expand = c(0, 0)\n    ) +\n    scale_fill_manual(values = region_colors) +\n    coord_flip() +\n    theme_light() +\n    theme(\n        panel.border = element_blank(),\n        panel.grid.major.y = element_blank(),\n        axis.title.y = element_blank(),\n        axis.ticks.length = unit(0, \"pt\"),\n        axis.text.y = element_text(size = 10, color = state_colors),\n        legend.position = c(.58, .68),\n        legend.background = element_rect(fill = \"#ffffffb0\")\n    )\n#&gt; Warning: Vectorized input to `element_text()` is not officially supported.\n#&gt; ℹ Results may be unexpected or may change in future versions of ggplot2."
  },
  {
    "objectID": "Data_Visualization/week5_Color_Scale.html#make-color-vector-in-order-of-the-city",
    "href": "Data_Visualization/week5_Color_Scale.html#make-color-vector-in-order-of-the-city",
    "title": "Color Scales",
    "section": "Make color vector in order of the city",
    "text": "Make color vector in order of the city\n\n# 4개 지역의 색 지정\nregion_colors &lt;- c(\"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\")\n\n# ColorBrewer palettes\n# region_colors &lt;- RColorBrewer::brewer.pal(4, 'Set2')\nstate_colors &lt;- region_colors[as.numeric(kor_202202_use$시도)]\nstate_colors_dark &lt;- colorspace::darken(state_colors, 0.4)\n\nggplot(popgrowth_df, aes(x = state, y = 100 * popgrowth, fill = region)) +\n    geom_col() +\n    scale_y_continuous(\n        name = \"총인구수, 2022년 2월\",\n        expand = c(0, 0),\n        labels = scales::comma\n    ) +\n    scale_x_discrete(aes(color = state_colors)) +\n    scale_color_manual(values = state_colors) +\n    scale_fill_manual(values = region_colors) +\n    coord_flip() +\n    theme_light() +\n    theme(\n        panel.border = element_blank(),\n        panel.grid.major.y = element_blank(),\n        axis.title.y = element_blank(),\n        axis.ticks.length = unit(0, \"pt\"),\n        axis.text.y = element_text(size = 10, color = state_colors_dark),\n        legend.position = c(.58, .68),\n        legend.background = element_rect(fill = \"#ffffffb0\")\n    )\n#&gt; Warning: Vectorized input to `element_text()` is not officially supported.\n#&gt; ℹ Results may be unexpected or may change in future versions of ggplot2."
  },
  {
    "objectID": "Data_Visualization/week3_OBS_2021.html",
    "href": "Data_Visualization/week3_OBS_2021.html",
    "title": "OBS with ggplot2",
    "section": "",
    "text": "데이터 출처 : https://data.kma.go.kr/data/grnd/selectAsosRltmList.do?pgmNo=36\n\n\n# Read csv File\ndata_2021 &lt;- read.csv(\"./data/OBS_ASOS_DD_20220308125952.csv\", fileEncoding = \"CP949\")\ndata_2021 %&gt;% dim()\n#&gt; [1] 1460    6\n\ndata_2021 %&gt;% head()\n#&gt;   지점 지점명       일시 평균기온..C. 최저기온..C. 최고기온..C.\n#&gt; 1  108   서울 2021-01-01         -4.2         -9.8          1.6\n#&gt; 2  108   서울 2021-01-02         -5.0         -8.4         -1.4\n#&gt; 3  108   서울 2021-01-03         -5.6         -9.1         -2.0\n#&gt; 4  108   서울 2021-01-04         -3.5         -8.4          0.3\n#&gt; 5  108   서울 2021-01-05         -5.5         -9.9         -2.1\n#&gt; 6  108   서울 2021-01-06         -7.4        -12.0         -1.9\n\n# 자료형 확인\ndata_2021 %&gt;% sapply(class)\n#&gt;         지점       지점명         일시 평균기온..C. 최저기온..C. 최고기온..C. \n#&gt;    \"integer\"  \"character\"  \"character\"    \"numeric\"    \"numeric\"    \"numeric\"\n\n# Date Type Convert : Character -&gt; Date\ndata_2021$일시 &lt;- data_2021$일시 %&gt;% as.Date(\"%Y-%m-%d\")\ndata_2021 %&gt;% sapply(class)\n#&gt;         지점       지점명         일시 평균기온..C. 최저기온..C. 최고기온..C. \n#&gt;    \"integer\"  \"character\"       \"Date\"    \"numeric\"    \"numeric\"    \"numeric\"\n\n# 기초통계량 확인\ndata_2021 %&gt;% summary()\n#&gt;       지점          지점명               일시             평균기온..C.   \n#&gt;  Min.   :108.0   Length:1460        Min.   :2021-01-01   Min.   :-14.90  \n#&gt;  1st Qu.:126.8   Class :character   1st Qu.:2021-04-02   1st Qu.:  7.90  \n#&gt;  Median :158.5   Mode  :character   Median :2021-07-02   Median : 15.00  \n#&gt;  Mean   :166.0                      Mean   :2021-07-02   Mean   : 14.77  \n#&gt;  3rd Qu.:197.8                      3rd Qu.:2021-10-01   3rd Qu.: 23.10  \n#&gt;  Max.   :239.0                      Max.   :2021-12-31   Max.   : 31.70  \n#&gt;   최저기온..C.     최고기온..C.   \n#&gt;  Min.   :-19.10   Min.   :-10.70  \n#&gt;  1st Qu.:  3.10   1st Qu.: 13.18  \n#&gt;  Median : 11.10   Median : 20.15  \n#&gt;  Mean   : 10.69   Mean   : 19.56  \n#&gt;  3rd Qu.: 19.60   3rd Qu.: 27.70  \n#&gt;  Max.   : 28.10   Max.   : 36.50\n\n\n# X축 눈금 지정\ndate_s &lt;- \"2021-01-01\" %&gt;% as.Date(\"%Y-%m-%d\")\ndate_e &lt;- \"2022-01-01\" %&gt;% as.Date(\"%Y-%m-%d\")\nbreak_date &lt;- seq.Date(date_s, date_e, by = \"3 month\") # 3달 간격 Date 생성\nlabel_date &lt;- paste0(c(seq(1, 12, 3), 1), \"월\")\n\n# ggplot + 축 설정\ndata_2021 %&gt;% names() # 열 이름 추출\n#&gt; [1] \"지점\"         \"지점명\"       \"일시\"         \"평균기온..C.\" \"최저기온..C.\"\n#&gt; [6] \"최고기온..C.\"\n\nggplot(data_2021, aes(x = 일시, y = 평균기온..C., color = 지점명)) +\n    geom_line(linewidth = 1) +\n    scale_x_date(name = \"월\", breaks = break_date, labels = label_date) +\n    scale_y_continuous(name = \"평균기온\") +\n    theme_light()\n\n\n\n\n\n# 월 평균\ndata_2021_month &lt;- data_2021 %&gt;%\n    mutate(month = format(일시, \"%B\")) %&gt;% # month열 생성\n    group_by(지점명, month) %&gt;%\n    summarize(mean = mean(평균기온..C., na.rm = TRUE)) %&gt;%\n    ungroup() %&gt;%\n    mutate(month = factor(month, levels = paste0(1:12, \"월\"))) # factor 형으로 변환\n#&gt; `summarise()` has grouped output by '지점명'. You can override using the\n#&gt; `.groups` argument.\ndata_2021_month\n#&gt; # A tibble: 48 × 3\n#&gt;    지점명 month   mean\n#&gt;    &lt;chr&gt;  &lt;fct&gt;  &lt;dbl&gt;\n#&gt;  1 대전   10월  15.7  \n#&gt;  2 대전   11월   8.91 \n#&gt;  3 대전   12월   1.89 \n#&gt;  4 대전   1월   -0.984\n#&gt;  5 대전   2월    3.99 \n#&gt;  6 대전   3월    9.61 \n#&gt;  7 대전   4월   14.7  \n#&gt;  8 대전   5월   17.7  \n#&gt;  9 대전   6월   23.5  \n#&gt; 10 대전   7월   27.8  \n#&gt; # ℹ 38 more rows\n\n# ggplot + geom_tile + fill_color\nggplot(data_2021_month, aes(x = month, y = 지점명, fill = mean)) +\n    geom_tile(width = .95, height = .95) +\n    scale_fill_viridis_c(\n        option = \"B\", begin = 0.15, end = 0.98, # 시작과 끝 색상 지정\n        name = \"temperature\"\n    ) +\n    coord_fixed(expand = FALSE) +\n    ylab(NULL)"
  },
  {
    "objectID": "Data_Visualization/week3_OBS_2021.html#기상청-asos-데이터를-활용한-ggplot2-실습",
    "href": "Data_Visualization/week3_OBS_2021.html#기상청-asos-데이터를-활용한-ggplot2-실습",
    "title": "OBS with ggplot2",
    "section": "",
    "text": "데이터 출처 : https://data.kma.go.kr/data/grnd/selectAsosRltmList.do?pgmNo=36\n\n\n# Read csv File\ndata_2021 &lt;- read.csv(\"./data/OBS_ASOS_DD_20220308125952.csv\", fileEncoding = \"CP949\")\ndata_2021 %&gt;% dim()\n#&gt; [1] 1460    6\n\ndata_2021 %&gt;% head()\n#&gt;   지점 지점명       일시 평균기온..C. 최저기온..C. 최고기온..C.\n#&gt; 1  108   서울 2021-01-01         -4.2         -9.8          1.6\n#&gt; 2  108   서울 2021-01-02         -5.0         -8.4         -1.4\n#&gt; 3  108   서울 2021-01-03         -5.6         -9.1         -2.0\n#&gt; 4  108   서울 2021-01-04         -3.5         -8.4          0.3\n#&gt; 5  108   서울 2021-01-05         -5.5         -9.9         -2.1\n#&gt; 6  108   서울 2021-01-06         -7.4        -12.0         -1.9\n\n# 자료형 확인\ndata_2021 %&gt;% sapply(class)\n#&gt;         지점       지점명         일시 평균기온..C. 최저기온..C. 최고기온..C. \n#&gt;    \"integer\"  \"character\"  \"character\"    \"numeric\"    \"numeric\"    \"numeric\"\n\n# Date Type Convert : Character -&gt; Date\ndata_2021$일시 &lt;- data_2021$일시 %&gt;% as.Date(\"%Y-%m-%d\")\ndata_2021 %&gt;% sapply(class)\n#&gt;         지점       지점명         일시 평균기온..C. 최저기온..C. 최고기온..C. \n#&gt;    \"integer\"  \"character\"       \"Date\"    \"numeric\"    \"numeric\"    \"numeric\"\n\n# 기초통계량 확인\ndata_2021 %&gt;% summary()\n#&gt;       지점          지점명               일시             평균기온..C.   \n#&gt;  Min.   :108.0   Length:1460        Min.   :2021-01-01   Min.   :-14.90  \n#&gt;  1st Qu.:126.8   Class :character   1st Qu.:2021-04-02   1st Qu.:  7.90  \n#&gt;  Median :158.5   Mode  :character   Median :2021-07-02   Median : 15.00  \n#&gt;  Mean   :166.0                      Mean   :2021-07-02   Mean   : 14.77  \n#&gt;  3rd Qu.:197.8                      3rd Qu.:2021-10-01   3rd Qu.: 23.10  \n#&gt;  Max.   :239.0                      Max.   :2021-12-31   Max.   : 31.70  \n#&gt;   최저기온..C.     최고기온..C.   \n#&gt;  Min.   :-19.10   Min.   :-10.70  \n#&gt;  1st Qu.:  3.10   1st Qu.: 13.18  \n#&gt;  Median : 11.10   Median : 20.15  \n#&gt;  Mean   : 10.69   Mean   : 19.56  \n#&gt;  3rd Qu.: 19.60   3rd Qu.: 27.70  \n#&gt;  Max.   : 28.10   Max.   : 36.50\n\n\n# X축 눈금 지정\ndate_s &lt;- \"2021-01-01\" %&gt;% as.Date(\"%Y-%m-%d\")\ndate_e &lt;- \"2022-01-01\" %&gt;% as.Date(\"%Y-%m-%d\")\nbreak_date &lt;- seq.Date(date_s, date_e, by = \"3 month\") # 3달 간격 Date 생성\nlabel_date &lt;- paste0(c(seq(1, 12, 3), 1), \"월\")\n\n# ggplot + 축 설정\ndata_2021 %&gt;% names() # 열 이름 추출\n#&gt; [1] \"지점\"         \"지점명\"       \"일시\"         \"평균기온..C.\" \"최저기온..C.\"\n#&gt; [6] \"최고기온..C.\"\n\nggplot(data_2021, aes(x = 일시, y = 평균기온..C., color = 지점명)) +\n    geom_line(linewidth = 1) +\n    scale_x_date(name = \"월\", breaks = break_date, labels = label_date) +\n    scale_y_continuous(name = \"평균기온\") +\n    theme_light()\n\n\n\n\n\n# 월 평균\ndata_2021_month &lt;- data_2021 %&gt;%\n    mutate(month = format(일시, \"%B\")) %&gt;% # month열 생성\n    group_by(지점명, month) %&gt;%\n    summarize(mean = mean(평균기온..C., na.rm = TRUE)) %&gt;%\n    ungroup() %&gt;%\n    mutate(month = factor(month, levels = paste0(1:12, \"월\"))) # factor 형으로 변환\n#&gt; `summarise()` has grouped output by '지점명'. You can override using the\n#&gt; `.groups` argument.\ndata_2021_month\n#&gt; # A tibble: 48 × 3\n#&gt;    지점명 month   mean\n#&gt;    &lt;chr&gt;  &lt;fct&gt;  &lt;dbl&gt;\n#&gt;  1 대전   10월  15.7  \n#&gt;  2 대전   11월   8.91 \n#&gt;  3 대전   12월   1.89 \n#&gt;  4 대전   1월   -0.984\n#&gt;  5 대전   2월    3.99 \n#&gt;  6 대전   3월    9.61 \n#&gt;  7 대전   4월   14.7  \n#&gt;  8 대전   5월   17.7  \n#&gt;  9 대전   6월   23.5  \n#&gt; 10 대전   7월   27.8  \n#&gt; # ℹ 38 more rows\n\n# ggplot + geom_tile + fill_color\nggplot(data_2021_month, aes(x = month, y = 지점명, fill = mean)) +\n    geom_tile(width = .95, height = .95) +\n    scale_fill_viridis_c(\n        option = \"B\", begin = 0.15, end = 0.98, # 시작과 끝 색상 지정\n        name = \"temperature\"\n    ) +\n    coord_fixed(expand = FALSE) +\n    ylab(NULL)"
  },
  {
    "objectID": "Data_Visualization/week1_ggplot2_tutorial.html",
    "href": "Data_Visualization/week1_ggplot2_tutorial.html",
    "title": "ggplot2 Tutorial",
    "section": "",
    "text": "ggplot2 실습\n\n\n\n데이터 시각화란 데이터를 그래프 등의 시각적 요소로 요약하여 보여주는 것을 의미한다. R에서는 데이터 시각화를 R의 기본 기능에 포함된 graphics 패키지를 사용하여 시각화하는 방법과 ggplot2패키지를 이용하는 방법이 있다. 이 장에서는 ggplot2를 이용하여 데이터를 시각화하는 기본적인 방법을 배운다. 여기서는 통계분석에 필요한 기본적인 그래프를 그리기 위한 기본적인 문법을 소개하는 것이지 ggplot2에 대한 체계적인 설명을 하지 않을 것이다. ggplot2는 자유로운 형식으로 그래프를 그릴 수 있는 그래프 문법을 가지고 있기 때문에, ggplot2에 대한 더 체계적인 이해를 원하는 독자는 졸저 ’R 프로그래밍’의 ggplot2를 이용한 데이터 시각화를 참조하기 바란다.\n\n\nR은 패키지란 단위로 R에서 사용할 수 있는 기능을 제공한다. R을 설치하면 base, stat, dataset, graphics 등의 기본 패키지가 자동으로 설치되고, R을 시작할 때마다 이러한 기본 패키지가 자동으로 적대되어 사용될 수 있도록 준비된다. 만약 R에서 기본으로 제공하는 패키지 말고 다른 패키지를 사용하려면 그 패키지를 R에 설치해야 한다. ggplot2 패키지는 기본 기능에 포함되지 않으므로 먼저 설치를 해야 한다.\nggplot2 패키지를 설치하려면 다음 명령을 실행하면 된다. 패키지의 이름은 문자열이므로 따옴표 안에 기술해야 한다.\n\n# install.packages('ggplot2')\n\n또는 RStudio의 우측 하단의 Packages 탭에서 [Install]을 클릭한 후 ggplot2라고 입력을 하면 된다. 패키지 설치는 한 번만 수행하면 된다.\n패키지를 사용하려면 메모리에 적재를 하여야 한다. 패키지를 메모리에 적재하는 것은 library() 함수를 사용한다. 이 때 주의할 점은 이미 설치된 패키지를 지정할 때는 따옴표 없이 변수처럼 패키지를 기술해야 한다는 것이다.\n\nlibrary(ggplot2)\n\n패키지의 설치는 한 번만 수행하면 되지만, 패키지를 메모리에 적재하는 작업을 패키지를 사용할 때마다 수행하여야 한다. 한번 메모리에 적재된 패키지는 R 세션이 종료되기 전까지 유지된다. 그러므로 하나의 R 세션에서는 다시 library() 함수로 동일한 패키지를 적재하지 않아도 된다. 그러나 R 세션을 종료하고 다시 시작하였다면, 기본 패키지가 아니면 자동 적재되지 않으므로 사용하기 전에 패키지를 다시 적재하여야 한다.\n\n\n\n이 절에서는 ggplot2에서 제공하는 mpg 데이터를 이용하여 ‘배기량이 커지면 연비가 낮아지는가?’ 라는 물음을 그래프를 이용하여 탐색해 보자. mpg는 1999년과 2008년에 미국 EPA에서 조사하여 발표한 자동차 주요 모델별 연비 데이터이다.\n다음 명령을 이용하여 mpg 데이터를 출력해 보자. mpg 데이터는 tibble이라는 데이터 프레임의 일종으로, 사용자의 화면의 크기에 따라 출력 내용을 조정한다. 그러므로 화면의 크기에 따라 출력되는 내용이 책과는 조금 다를 수 있다.\nYou can also embed plots, for example:\n\nmpg\n#&gt; # A tibble: 234 × 11\n#&gt;    manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n#&gt;    &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n#&gt;  1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n#&gt;  2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n#&gt;  3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n#&gt;  4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n#&gt;  5 audi         a4           2.8  1999     6 auto… f        16    26 p     comp…\n#&gt;  6 audi         a4           2.8  1999     6 manu… f        18    26 p     comp…\n#&gt;  7 audi         a4           3.1  2008     6 auto… f        18    27 p     comp…\n#&gt;  8 audi         a4 quattro   1.8  1999     4 manu… 4        18    26 p     comp…\n#&gt;  9 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n#&gt; 10 audi         a4 quattro   2    2008     4 manu… 4        20    28 p     comp…\n#&gt; # ℹ 224 more rows\n\nmpg는 1999년과 2008년에 미국 EPA에서 조사하여 발표한 자동차 주요 모델별 연비 데이터이다. 데이터는 234 개의 행이 있으며, 각 행은 다음과 같은 변수로 구성되어 있다.\n\nmanufacturer : 자동차 제조사\nmodel : 자동차 모델명\ndispl : 자동차 배기량\nyear : 제조년도\ncyl : 엔진 실린더 수\ntrans : 자동차 트랜스미션 종류\ndrv : 자동차 구동 방식. f = 전륜구동, r = 후륜구동, 4 = 사륜구동\ncty : 도심 연비 (마일/갤론)\nhwy : 고속도로 연비 (마일/갤론)\nfl : 연료 종류\nclass : 자동차 분류\nmpg 데이터에 대한 더 자세한 설명은 콘솔에 다음을 입력하여 R 도움말을 참조하기 바란다.\n\n\n?mpg\n\n\n\nmpg 데이터로부터 배기량과 고속도로 연비의 관계를 살펴보기 위해서 배기량(displ)을 x 축으로, 고속도로 연비(hwy)를 y 축으로 하는 산점도를 그려보자. 산점도에서 배기량이 커짐지면 연비가 줄어드는 경향을 관찰할 수 있다.\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point()\n\n\n\n\n그러면 이 산점도 그린 ggplot2 명령어의 문법을 살펴보자.\n\nggplot2의 명령어는 항상 ggplot() 함수로 시작하고, + 연산자를 사용하여 그래프에 추가될 요소를 덧붙여 나간다. 이렇게 함수를 +로 연결하여 사용하는 방식은 ggplot2 패키지의 독특한 문법으로 대부분의 다른 R 명령어에서는 이러한 방식을 사용하지 않는다.\nggplot() 함수는 그래프의 좌표축과 좌표평면을 만드는 함수이다. 그러므로 다음처럼 ggplot() 함수만 사용하고 그래프에 추가할 요소를 지정하지 않으면 좌표축과 좌표평면만 그린다.\n\n\nggplot(mpg, aes(x = displ, y = hwy))\n\n\n\n\n\nggplot() 함수의 첫번째 인수는 그래프를 그릴 때 사용할 데이터를 지정하고, 두번째 인수는 그래프 속성과 데이터 열의 관계를 지정한다. 그래프 속성과 데이터 열의 관계는 항상 aes() 함수 내에 기술되고, 다음처럼 &lt;그래프 속성&gt;=&lt;데이터 열&gt;의 형식으로 기술된다.\n\n\nggplot(데이터, aes(속성1=열1, 속성2=열2, ...)) + geom함수()\n\n앞의 산점도에서는 x라는 그래프의 가로축 속성에 mpg 데이터의 배기량 열 displ이 매핑되었고, y라는 그래프의 세로축 속성에 고속도로 연비 열 hwy가 매핑되었다. 다음은 그래프의 가로축에 데이터의 도심 연비 열인 cty을 매핑하여 산점도를 그린 예이다. 도심 연비가 좋은 차가 고속도로 연비도 좋다는 것을 알 수 있다.\n\nggplot(mpg, aes(x = cty, y = hwy)) + geom_point()\n\n\n\n\n\nggplot() 함수에 +로 연결되는 geom 함수는 그래프에 그릴 도형을 지정한다. geom_point() 함수는 ggplot() 함수에 정의된 그래프 속성과 열의 관계를 이용하여 그래프에 점(points)이라는 도형을 그린다. ggplot2에는 점을 그리는 geom_point() 함수뿐 아니라 다양한 도형을 그리는 geom 함수들이 있다. 만약 다음처럼 geom_point() 함수가 아니라 geom_smooth() 함수를 연결하면 점이 아니라 데이터의 추세선을 ggplot() 함수에 정의된 그래프 속성과 열의 관계를 이용하여 그래프에 그린다.\n\n\nggplot(mpg, aes(x = displ, y = hwy)) + geom_smooth()\n#&gt; `geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\nggplot() 함수에 여러 개의 geom 함수를 연결하여 두 개 이상의 그래픽적 도형을 그래프에 그릴 수 있다. 이 경우 먼저 기술된 geom 함수의 도형이 아래 층에 그려지고 뒤에 기술된 geom 함수의 도형이 윗 층에 그려진다.\n\n\n\n\n\n앞의 산점도에서 배기량에 따라 연비가 줄어드는 관계를 조금 벗어나는 관측치들이 있다.\n\nggplot(mpg, aes(x = displ, y = hwy)) + geom_point()\n\n\n\n\n이 예외적인 관측치들이 자동차 종류의 차이 때문에 발생했다, 라고 가설을 세웠다 하자. 이 가설을 확인해 보려면 자동차 종류별로 관측치를 시각화할 필요가 있다. 앞서 본 geom_point() 함수는 ’점’이라는 도형을 좌표평면 상에서 그린다. 점이라는 도형은 x-축의 위치(x)와 y-축의 위치(y)뿐 아니라 색상(color), 모양(shape), 크기(size), 투명도(alpha) 등의 다른 시각적 속성을 가지고 있다. 우리는 이러한 속성 중 하나에 mpg 데이터의 class 열을 대응시켜 자동차 종류 별로 좌표평면에서 시각적으로 구분되는 점으로 표현할 수 있다.\n\n\n다음은 관측치의 종류(class)에 따라 점을 서로 다른 색상(color)으로 표현한 예이다. 자동차의 종류에 따라 점이 다른 색상으로 표현되고, 어떤 색상이 어떤 자동차 종류에 대응되었는지에 대한 범례가 자동 생성된다.\n\nggplot(mpg, aes(x = displ, y = hwy, color = class)) + geom_point()\n\n\n\n\n앞선 그래프에서 이상치로 표현되었던 점들 중 한 점만 제외하고 모두 2seater 자동차의 관측치였음을 알 수 있다. 이 종류의 차는 스포츠카로 배기량에 비해 가벼운 몸체를 가지고 있어 예외적인 연비가 관측된 것으로 보인다.\n다음으로 class 열을 shape, size, alpha 등의 속성에 대응시켜 어떤 결과가 나오는지 살펴보자.\n\n\n\nshape 속성은 점의 모양을 결정한다. 다음은 앞의 산점도를 구동 방식(drv)에 따라 점의 모양이 다르게 표시한 예이다.\n\nggplot(mpg, aes(x = displ, y = hwy, shape = drv)) + geom_point()\n\n\n\n\n점의 모양과 색상을 하나의 데이터 열에 매핑하여 좀 더 데이터가 뚜렷이 구분되게 그래프를 그리기도 한다.\n\nggplot(mpg, aes(x = displ, y = hwy, shape = drv, color = drv)) +\n  geom_point()\n\n\n\n\n물론 다음처럼 점의 색상과 모양을 각각 데이터의 다른 열에 매핑할 수도 있다. 다음은 점의 색은 자동차의 종류(class)에 모양은 자동차의 구동방식(drv)에 매핑한 결과이다.\n\nggplot(mpg, aes(x = displ, y = hwy, shape = drv, color = class)) +\n  geom_point()\n\n\n\n\nshape을 사용할 때 주의할 점은 shape은 최대 6개의 모양으로만 점을 구분하기 때문에 class 열처럼 6개보 많은 종류가 있는 열에 매핑되면 데이터가 제대로 표시가 되지 않는다. 다음 예처럼 shape 속성에 class 열을 매핑하니 경고가 나타나고 suv 데이터를 표시하지 못한 것을 확인할 수 있다.\n\nggplot(mpg, aes(x = displ, y = hwy, shape = class)) + geom_point()\n#&gt; Warning: The shape palette can deal with a maximum of 6 discrete values because\n#&gt; more than 6 becomes difficult to discriminate; you have 7. Consider\n#&gt; specifying shapes manually if you must have them.\n#&gt; Warning: Removed 62 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n모양(shape) 속성은 소수의 구분되는 값으로 표현되는 범주형 변수를 표현하기 좋다. 데이터의 열이 연속형 변수이면 연속적인 값을 표현하기 좋은 가로축(x), 세로축(y), 크기(size), 투명도(alpha) 등을 이용하는 것이 좋다. 색상(color)은 범주형 변수와 연속형 변수에 모두 매핑될 수 있다. 범주형 변수로 매핑되면 구분되는 색상으로, 연속형 변수로 매핑되면 색상의 그라데이션으로 값을 표시한다.\n다음은 도심 연비와 고속도로 연비를 가로축과 세로축으로 하는 그래프에서 점의 크기 속성을 배기량 열에 매핑한 결과이다. 도심 연비와 고속도로 연비가 좋은 차들은 배기량이 작은 차임을 알 수 있다.\n\nggplot(mpg, aes(x = cty, y = hwy, size = displ)) + geom_point()\n\n\n\n\n다음은 동일한 도심 연비와 고속도로 연비 산점도에서 그래프에서 점의 색상을 배기량 열에 매핑한 결과이다. 범주형 변수가 매핑될 때와는 달리 색상의 연속적인 변화인 그라데이션을 사용하여 배기량을 표현하고 있음을 볼 수 있다.\n\nggplot(mpg, aes(x = cty, y = hwy, color = displ)) + geom_point()\n\n\n\n\n다음은 동일한 도심 연비와 고속도로 연비 산점도에서 그래프에서 점의 투명도를 실린더 수 열에 매핑한 결과이다.\n\nggplot(mpg, aes(x = cty, y = hwy, alpha = cyl)) + geom_point()\n\n\n\n\n\n\n\n\nggplot은 매우 강력한 기능을 가지고 있지만 Excel 등의 GUI 프로그램에만 익숙한 사람은 문자 기반 명령어를 입력하는 것에 어려움을 느낄 수 있다. 컴퓨터는 사람만큼의 유연성을 발휘하지 못하므로 컴퓨터는 자신이 실행해야 할 명령문의 문법에 매우 까다롭게 반응한다. ggplot 명령어 입력시 흔히 발생하는 문제들은 다음과 같다.\n\nR 명령문은 대소문자를 구분한다. 따라서 Color와 color는 ggplot에서 서로 다른 인수로 인식되어 오류가 발생한다.\nggplot 명령문의 키워드의 철자가 틀리면 다른 키워드로 간주하기 때문에 오류가 발생할 수 있다. 이를 방지하려면 키워드의 일부만 입력한 후 Tab 키를 눌러 자동완성 기능을 사용하여 입력하는 것을 권장한다.\nggplot2의 명령문을 입력할 때 여러 함수를 합쳐서 실행하기 위하여 + 연산자를 이용한다. ggplot2의 명령문이 길어지면 명령문을 여러 줄로 쓰는 것이 필요한데, 보통 +로 연결되는 곳에서 줄바꿈하는 것이 읽기에 좋다. 이 때 주의할 점이, 줄바꿈을 + 앞이 아니라 뒤에서 해야 한다는 것이다. + 앞에서 하면 R은 명령문의 입력이 완성된 것으로 간주하기 때문이다.\n\n다음은 산점도와 추세선을 한 그래프에 그린 예이다.\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) + geom_point() + geom_smooth()\n#&gt; `geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n그런데 위의 명령어는 길기 때문에 스크립트 파일을 작성할 때 보기에 불편하다. 이러한 경우에 위의 명령은 다음처럼 세 줄로 나누어 기술될 수 있다. 세 함수를 연결하는 + 위치가 어디에 있는지 살펴보라. (다음 예에서 왼쪽의 &gt; 프롬프트 아래 있는 +는 R 콘솔에서 명령문이 계속되고 있음을 나타내는 표시이다. 이 표시와 사용자가 입력한 +를 혼동하면 안 된다.)\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point() +\n  geom_smooth()\n#&gt; `geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n만약 다음처럼 + 위치가 잘못되면 오류가 발생한다. 왜 이런 결과가 나왔고 오류 메시지의 의미는 무엇일까? R은 Enter로 명령문을 구분한다. 그러므로 첫번째 줄은 +가 없으므로 완벽한 명령문이기 입력된 것으로 간주하고 실행이되어 좌표평면만 그린 것이다. 그러고 나서 두번째 줄을 새로운 명령문으로 실행을 한다. 그런데 갑자기 명령문이 +로 시작하니 R은 명령문에 오류가 있다고 판단한다. 왜냐하면 + 연산은 왼편과 오른편에 더할 요소가 있어야 하는데, 왼편의 요소가 기술되지 않았기 때문이다.\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv))\n+ geom_point()\n\n\nR 명령문이 조금 길어지면 가장 흔하게 발생하는 실수가 ( )와 \" \"을 짝을 맞추어 제대로 입력하지 못하는 것이다. ggplot2의 명령문도 많은 함수를 사용하다 보니 이를 주의하여야 한다. 이러한 실수를 하게 되면면 R 콘솔은 명령이 계속 입력 중이라고 생각하여 &gt;가 아니라 +를 콘솔의 프롬프트로 표시한다. 이 경우 가장 간단한 해결책은 Esc 키를 눌러 명령 입력에서 빠져나와 다시 명령문을 입력하는 것이다.\n\n\n\n\nggplot2의 장점은 필요에 따라 다양한 형식의 그래프를 쉽게 만들 수 있고, 만들 수 있는 형식도 무궁무진하다는데 있다. 그리고 ggplot2 그래프의 계층적 구조가 이러한 무궁무진한 그래프 형식을 만들어 내는 핵심 요소라 할 수 있다. ggplot2는 좌표평면 위에 여러 계층으로 그래프를 겹쳐 그려서 하나의 좌표평면에 나타냄으로써 복잡한 형식의 그래프를 만들어 낼 수 있다.\n다음 그래프는 배기량과 고속도로 연비의 산점도와 추세선을 한 그래프에 그렸다. ggplot() 함수에 지정한 데이터와 그래프 속성과 데이터 열 매핑이 산점도(geom_point())와 추세선(geom_smooth())에 모두 동일하게 정의되었음을 볼 수 있다.\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point() +\n  geom_smooth()\n#&gt; `geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\nggplot() 함수가 여러 개의 geom 함수와 연결되면, 하나의 좌표평면에 각각의 geom() 함수의 결과를 층층이 그린다. 이 때, 명령문에 나타나는 순서에 따라 첫번째 나온 geom 함수의 도형이 가장 아래 계층에, 다음에 나오는 geom 함수의 도형이 차례로 그 윗 계층에 그려진다.\n\n\n앞의 배기량과 고속도로 연비의 산점도와 추세선을 그린 그래프에서 추세선을 선 종류(linttype)가 구동 방식(drv)에 따라 다르게 표현하고 싶다. 그런데 산점도는 점이라는 도형으로 그래프를 그리므로 선 종류라는 속성을 가지고 있지 않다. 그리고 산점도도 점의 모양(shape)이 구동 방식에 따라 다르게 표현하고 싶다고 하자. 마찬가지로 추세선은 선이라는 도형으로 그래프를 그리므로 점의 모양이라는 속성을 가지고 있지 않다.\n이렇듯 여러 geom 함수를 연결하여 그래프를 그릴 때, 특정 geom 함수에만 해당하는 속성은 해당 geom 함수에서 속성과 데이터 열을 매핑하는 것이 좋다. geom 함수도 ggplot() 함수처럼 aes() 함수를 이용하여 그래프 속성과 데이터 열을 매핑하는데, 이 매핑이 geom 함수의 첫 번째 인수로 기술된다는 점만 다르다.\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point(aes(shape = drv)) +\n  geom_smooth(aes(linetype = drv))\n#&gt; `geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n따라서 지금까지 배운 내용으로 ggplot2 그래프를 그리는 문법을 확장하면 다음과 같다.\n\nggplot(데이터, aes(공통속성1=열1, 공통속성2=열2, ...)) + \n  geom함수1(aes(geom함수1의 속성1=열1, geom함수1의 속성2=열2, ...)) + \n  geom함수2(aes(geom함수2의 속성1=열1, geom함수2의 속성2=열2, ...)) +\n  ....\n\n확장된 문법으로 맨처음 그린 배기량과 고속도로 연비의 산점도와 추세선 그래프에서, 산점도의 점은 구동 방식에 따라 다른 색으로 표시하지만, 추세선은 모든 데이터에 대하여 하나만 그리려면 어떻게 해야 할까? 답은 다음처럼 색상 속성을 공통 속성으로 ggplot()에 매핑하지 않고 산점도만의 속성 매핑이 되도록 geom_point()에 기술하는 것이다.\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point(aes(color = drv)) +\n  geom_smooth()\n#&gt; `geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n마찬가지로 추세선을 구동 방식에 따라 다른 색상으로 표시하나 점은 모두 동일한 색으로 표시하고 싶으면 다음처럼 색상이 추세선만의 속성 매핑이 되도록 geom_smooth()에 기술하는 것이다.\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point() +\n  geom_smooth(aes(color = drv))\n#&gt; `geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n또한 ggplot() 함수에 데이터와 도형 속성에 대한 매핑이 되어 있어도, geom 함수에서 데이터와 도형 속성의 매핑을 재지정할 수도 있다. 이 경우 각 geom 함수에서 사용하는 data와 mapping은 다음 규칙에 의해 결정된다.\n\ngeom 함수는 ggplot() 함수에 설정된 data와 mapping을 상속받아 그래프를 그린다.\n만약 geom 함수에 data 인수가 설정되면 ggplot() 함수에 설정된 data는 무시된다.\n만약 geom 함수에 mapping 인수가 설정되면 ggplot() 함수에 설정된 mapping에 geom 함수에 설정된 mapping이 추가된다. 만약 동일한 도형 속성에 대한 정의가 두 군데 나타나면 geom 함수의 설정이 사용된다. 자세한 내용은 R 프로그래밍의 그래프 계층(layers)과 도형(geoms) 절을 참조하기 바란다.\n\n\n\n\n\n다음 그래프는 배기량과 고속도로 연비의 관계를 살펴보기 위하여 이 두 변수의 관계를 산점도로 살펴보고 나서, 이 두 변수의 관계가 자동차 종류에 따라 어떻게 달라지는지를 살펴보기 위해 그래프의 색상 속성을 자동차 종류를 나타내는 열에 매핑하여 다르게 표시되도록 하였다.\n\nggplot(mpg, aes(x = displ, y = hwy)) + geom_point()\n\n\n\nggplot(mpg, aes(x = displ, y = hwy, color = class)) + geom_point() \n\n\n\n\n이렇듯 두 변수의 관계를 제삼의 변수 관점에서 세분화하여 살펴보는 방법으로 제삼의 변수를 그래프 속성에 매핑하는 방법 말고도 제삼의 변수의 변수값에 따라 데이터를 별도의 그래프로 나누어 그려보는 방법이 있다. ggplot2에서는 이러한 방식을 측면(facets)으로 나누어 그래프를 그린다고 한다.\n\n\n다음은 facet_wrap() 함수의 사용법을 보여준다. ~ 은 R에서 수식을 표현할 때 사용되는데, facet_wrap() 함수는 수식을 첫 번재 인수로 입력받는다. facet_wrap() 함수는 ~ 우변에 서술된 변수의 변수값 별로 데이터를 나누어 그래프를 각각 그린다. 이 때 측면(facets)을 지정하는데 사용되는 변수는 범주형 데이터이어야 한다. facet_wrap()은 측면 그래프가 많아지면 줄바꿈하여 그래프를 표시한다. nrow나 ncol을 설정하면 그래프의 행과 열의 수를 지정하여 줄바꿈 처리를 제어할 수 있다.\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point() +\n  facet_wrap( ~ class, nrow = 2)\n\n\n\n\n측면으로 나누어 그려진 그래프는 서로 비교가 용이하도록 동일한 좌표축으로 그려진다. 측면 그래프의 상단에는 어떤 측면의 데이터에 대한 그래프인지를 표시한다. 맨 처음 측면 그래프는 2seater 측면에서 배기량과 고속도로 연비의 산점도를 보여주고, 맨 마지막 측면 그래프는 SUV 측면에서 배기량과 고속도로 연비의 산점도를 보여준다.\n두 개 이상의 변수를 조합하여 측면 그래프을 만드려면 다음처럼 수식의 우변에 두 개의 변수를 +로 연결하여 기술하면 된다. 다음은 구동 방식(drv)와 조사 년도(year)의 값에 따라 그래프를 나누어 그린 예이다. 역시 모든 그래프의 좌표축은 동일하고 그래프 상단에 어떤 측면의 그래프인지를 표시하고 있는데 윗줄에 표시된 내용은 구동 방식의 값이고 아랫줄은 조사년도의 값이다. 따라서 첫 번째 측면 그래프는 4륜 구동이고 1999년도 조사한 데이터 측면에서 배기량과 고속도로 연비의 산점도를 보여준다.\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point() +\n  facet_wrap(~drv + year, nrow = 2)\n\n\n\n\n\n\n\n그래프를 두 변수의 측면에서 나누어 그릴 때는 face_wrap() 보다는 facet_grid()를 사용하는 것이 좋다. facet_grid()도 수식을 첫 번재 인수로 입력 받는데, 수식의 좌변과 우변에 측면으로 나누는데 사용할 변수를 지정할 수 있다. 수식의 좌변에 기술된 변수를 기준으로 측면 그래프를 행으로 배열하고, 우변에 기술된 변수를 기준으로 측면 그래프를 열로 배열한다. 다음 그래프는 행은 구동 방식으로, 열은 실린더 수를 기준으로 나누어 측면 그래프를 그린 예이다. 그러므로 두 번째 행-세 번째 열의 그래프는 전륜 구동(f)이고 실린더가 6자동차의 산점도를 나타낸다.\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point() +\n  facet_grid(drv ~ cyl)\n\n\n\n\nfacet_wrap() 함수와 마찬가지로 수식의 좌변과 우변에 +로 하나 이상의 변수를 지정할 수도 있다.\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point() +\n  facet_grid(drv + year ~ cyl)\n\n\n\n\n\n\n\n\nggplot2에는 지금까지 설명한 문법 요소 외에도 통계 변환(stat), 위치 조정(position), 스케일 변환(scale), 좌표축 변환(coord), 테마(theme) 등의 요소가 있다. ggplot2를 사용하여 복잡한 시각화를 수행하려면 이러한 문법 요소에 대한 체계적 이해와 습득이 필요하다. 그러나 이 책은 데이터 시각화 전반을 소개하는 것이 목적이 아니기 때문에, 통계데이터 분석을 위한 그래프를 그릴 때 이러한 문법 요소가 필요하면 그 요소를 단편적으로 설명할 예정이다. 그러므로 좀 더 ggplot2 그래프에 대한 체계적인 이해를 원하는 독자는 R 프로그래밍의 ggplot2를 이용한 데이터 시각화를 참조하기 바란다.\n이 절의 나머지 부분에서는 나머지 문법 요소 중 그래프의 외양을 변경하는 매우 간단한 한 가지 문법 요소만 살펴보도록 한다.\n\n\nggplot2 패키지의 labs() 함수는 그래프의 제목, 좌표축 이름, 범례의 이름을 쉽게 바꿀 수 있게 해준다. 다음은 mpg 데이터의 배기량과 고속도로 연비의 산점도를 자동차 종류 별로 다른 색상으로 그린 예이다. 그런데 ggplot2에서는 기본적으로 좌표축 레이블과 색상의 범례 레이블로, 좌표축과 색상에 매핑된 열의 이름을 사용한다. 그리고 그래프에 제목은 달지 않는다.\n\nggplot(mpg, aes(x = displ, y = hwy, color = class)) + geom_point()\n\n\n\n\n만약 자동으로 부여된 레이블이 마음에 들지 않으면 이를 labs() 함수로 변경할 수 있다. 위 그래프에서 다음처럼 범례 이름, 축의 이름 한글로 바꾸고, 그래프의 제목도 달아 보자.\n\nggplot(mpg, aes(x = displ, y = hwy, color = class)) +\n  geom_point() +\n  labs(title = '배기량과 고속도로 연비 산점도',\n       x = '배기량(리터)',\n       y = '고속도로 연비',\n       color = '자동차 종류')\n\n\n\n\nlabs() 함수는 ggplot2 그래프에 + 연산으로 결합하여 사용되면, 그래픽 속성 매핑에 사용된 x, y, color 인수에 사용할 이름을 지정하면 된다. 그래프의 제목을 지정하려면 title이라는 인수를 사용한다."
  },
  {
    "objectID": "Data_Visualization/week1_ggplot2_tutorial.html#chapter-5-r-데이터-시각화-기초",
    "href": "Data_Visualization/week1_ggplot2_tutorial.html#chapter-5-r-데이터-시각화-기초",
    "title": "ggplot2 Tutorial",
    "section": "",
    "text": "데이터 시각화란 데이터를 그래프 등의 시각적 요소로 요약하여 보여주는 것을 의미한다. R에서는 데이터 시각화를 R의 기본 기능에 포함된 graphics 패키지를 사용하여 시각화하는 방법과 ggplot2패키지를 이용하는 방법이 있다. 이 장에서는 ggplot2를 이용하여 데이터를 시각화하는 기본적인 방법을 배운다. 여기서는 통계분석에 필요한 기본적인 그래프를 그리기 위한 기본적인 문법을 소개하는 것이지 ggplot2에 대한 체계적인 설명을 하지 않을 것이다. ggplot2는 자유로운 형식으로 그래프를 그릴 수 있는 그래프 문법을 가지고 있기 때문에, ggplot2에 대한 더 체계적인 이해를 원하는 독자는 졸저 ’R 프로그래밍’의 ggplot2를 이용한 데이터 시각화를 참조하기 바란다.\n\n\nR은 패키지란 단위로 R에서 사용할 수 있는 기능을 제공한다. R을 설치하면 base, stat, dataset, graphics 등의 기본 패키지가 자동으로 설치되고, R을 시작할 때마다 이러한 기본 패키지가 자동으로 적대되어 사용될 수 있도록 준비된다. 만약 R에서 기본으로 제공하는 패키지 말고 다른 패키지를 사용하려면 그 패키지를 R에 설치해야 한다. ggplot2 패키지는 기본 기능에 포함되지 않으므로 먼저 설치를 해야 한다.\nggplot2 패키지를 설치하려면 다음 명령을 실행하면 된다. 패키지의 이름은 문자열이므로 따옴표 안에 기술해야 한다.\n\n# install.packages('ggplot2')\n\n또는 RStudio의 우측 하단의 Packages 탭에서 [Install]을 클릭한 후 ggplot2라고 입력을 하면 된다. 패키지 설치는 한 번만 수행하면 된다.\n패키지를 사용하려면 메모리에 적재를 하여야 한다. 패키지를 메모리에 적재하는 것은 library() 함수를 사용한다. 이 때 주의할 점은 이미 설치된 패키지를 지정할 때는 따옴표 없이 변수처럼 패키지를 기술해야 한다는 것이다.\n\nlibrary(ggplot2)\n\n패키지의 설치는 한 번만 수행하면 되지만, 패키지를 메모리에 적재하는 작업을 패키지를 사용할 때마다 수행하여야 한다. 한번 메모리에 적재된 패키지는 R 세션이 종료되기 전까지 유지된다. 그러므로 하나의 R 세션에서는 다시 library() 함수로 동일한 패키지를 적재하지 않아도 된다. 그러나 R 세션을 종료하고 다시 시작하였다면, 기본 패키지가 아니면 자동 적재되지 않으므로 사용하기 전에 패키지를 다시 적재하여야 한다.\n\n\n\n이 절에서는 ggplot2에서 제공하는 mpg 데이터를 이용하여 ‘배기량이 커지면 연비가 낮아지는가?’ 라는 물음을 그래프를 이용하여 탐색해 보자. mpg는 1999년과 2008년에 미국 EPA에서 조사하여 발표한 자동차 주요 모델별 연비 데이터이다.\n다음 명령을 이용하여 mpg 데이터를 출력해 보자. mpg 데이터는 tibble이라는 데이터 프레임의 일종으로, 사용자의 화면의 크기에 따라 출력 내용을 조정한다. 그러므로 화면의 크기에 따라 출력되는 내용이 책과는 조금 다를 수 있다.\nYou can also embed plots, for example:\n\nmpg\n#&gt; # A tibble: 234 × 11\n#&gt;    manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n#&gt;    &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n#&gt;  1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n#&gt;  2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n#&gt;  3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n#&gt;  4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n#&gt;  5 audi         a4           2.8  1999     6 auto… f        16    26 p     comp…\n#&gt;  6 audi         a4           2.8  1999     6 manu… f        18    26 p     comp…\n#&gt;  7 audi         a4           3.1  2008     6 auto… f        18    27 p     comp…\n#&gt;  8 audi         a4 quattro   1.8  1999     4 manu… 4        18    26 p     comp…\n#&gt;  9 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n#&gt; 10 audi         a4 quattro   2    2008     4 manu… 4        20    28 p     comp…\n#&gt; # ℹ 224 more rows\n\nmpg는 1999년과 2008년에 미국 EPA에서 조사하여 발표한 자동차 주요 모델별 연비 데이터이다. 데이터는 234 개의 행이 있으며, 각 행은 다음과 같은 변수로 구성되어 있다.\n\nmanufacturer : 자동차 제조사\nmodel : 자동차 모델명\ndispl : 자동차 배기량\nyear : 제조년도\ncyl : 엔진 실린더 수\ntrans : 자동차 트랜스미션 종류\ndrv : 자동차 구동 방식. f = 전륜구동, r = 후륜구동, 4 = 사륜구동\ncty : 도심 연비 (마일/갤론)\nhwy : 고속도로 연비 (마일/갤론)\nfl : 연료 종류\nclass : 자동차 분류\nmpg 데이터에 대한 더 자세한 설명은 콘솔에 다음을 입력하여 R 도움말을 참조하기 바란다.\n\n\n?mpg\n\n\n\nmpg 데이터로부터 배기량과 고속도로 연비의 관계를 살펴보기 위해서 배기량(displ)을 x 축으로, 고속도로 연비(hwy)를 y 축으로 하는 산점도를 그려보자. 산점도에서 배기량이 커짐지면 연비가 줄어드는 경향을 관찰할 수 있다.\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point()\n\n\n\n\n그러면 이 산점도 그린 ggplot2 명령어의 문법을 살펴보자.\n\nggplot2의 명령어는 항상 ggplot() 함수로 시작하고, + 연산자를 사용하여 그래프에 추가될 요소를 덧붙여 나간다. 이렇게 함수를 +로 연결하여 사용하는 방식은 ggplot2 패키지의 독특한 문법으로 대부분의 다른 R 명령어에서는 이러한 방식을 사용하지 않는다.\nggplot() 함수는 그래프의 좌표축과 좌표평면을 만드는 함수이다. 그러므로 다음처럼 ggplot() 함수만 사용하고 그래프에 추가할 요소를 지정하지 않으면 좌표축과 좌표평면만 그린다.\n\n\nggplot(mpg, aes(x = displ, y = hwy))\n\n\n\n\n\nggplot() 함수의 첫번째 인수는 그래프를 그릴 때 사용할 데이터를 지정하고, 두번째 인수는 그래프 속성과 데이터 열의 관계를 지정한다. 그래프 속성과 데이터 열의 관계는 항상 aes() 함수 내에 기술되고, 다음처럼 &lt;그래프 속성&gt;=&lt;데이터 열&gt;의 형식으로 기술된다.\n\n\nggplot(데이터, aes(속성1=열1, 속성2=열2, ...)) + geom함수()\n\n앞의 산점도에서는 x라는 그래프의 가로축 속성에 mpg 데이터의 배기량 열 displ이 매핑되었고, y라는 그래프의 세로축 속성에 고속도로 연비 열 hwy가 매핑되었다. 다음은 그래프의 가로축에 데이터의 도심 연비 열인 cty을 매핑하여 산점도를 그린 예이다. 도심 연비가 좋은 차가 고속도로 연비도 좋다는 것을 알 수 있다.\n\nggplot(mpg, aes(x = cty, y = hwy)) + geom_point()\n\n\n\n\n\nggplot() 함수에 +로 연결되는 geom 함수는 그래프에 그릴 도형을 지정한다. geom_point() 함수는 ggplot() 함수에 정의된 그래프 속성과 열의 관계를 이용하여 그래프에 점(points)이라는 도형을 그린다. ggplot2에는 점을 그리는 geom_point() 함수뿐 아니라 다양한 도형을 그리는 geom 함수들이 있다. 만약 다음처럼 geom_point() 함수가 아니라 geom_smooth() 함수를 연결하면 점이 아니라 데이터의 추세선을 ggplot() 함수에 정의된 그래프 속성과 열의 관계를 이용하여 그래프에 그린다.\n\n\nggplot(mpg, aes(x = displ, y = hwy)) + geom_smooth()\n#&gt; `geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\nggplot() 함수에 여러 개의 geom 함수를 연결하여 두 개 이상의 그래픽적 도형을 그래프에 그릴 수 있다. 이 경우 먼저 기술된 geom 함수의 도형이 아래 층에 그려지고 뒤에 기술된 geom 함수의 도형이 윗 층에 그려진다.\n\n\n\n\n\n앞의 산점도에서 배기량에 따라 연비가 줄어드는 관계를 조금 벗어나는 관측치들이 있다.\n\nggplot(mpg, aes(x = displ, y = hwy)) + geom_point()\n\n\n\n\n이 예외적인 관측치들이 자동차 종류의 차이 때문에 발생했다, 라고 가설을 세웠다 하자. 이 가설을 확인해 보려면 자동차 종류별로 관측치를 시각화할 필요가 있다. 앞서 본 geom_point() 함수는 ’점’이라는 도형을 좌표평면 상에서 그린다. 점이라는 도형은 x-축의 위치(x)와 y-축의 위치(y)뿐 아니라 색상(color), 모양(shape), 크기(size), 투명도(alpha) 등의 다른 시각적 속성을 가지고 있다. 우리는 이러한 속성 중 하나에 mpg 데이터의 class 열을 대응시켜 자동차 종류 별로 좌표평면에서 시각적으로 구분되는 점으로 표현할 수 있다.\n\n\n다음은 관측치의 종류(class)에 따라 점을 서로 다른 색상(color)으로 표현한 예이다. 자동차의 종류에 따라 점이 다른 색상으로 표현되고, 어떤 색상이 어떤 자동차 종류에 대응되었는지에 대한 범례가 자동 생성된다.\n\nggplot(mpg, aes(x = displ, y = hwy, color = class)) + geom_point()\n\n\n\n\n앞선 그래프에서 이상치로 표현되었던 점들 중 한 점만 제외하고 모두 2seater 자동차의 관측치였음을 알 수 있다. 이 종류의 차는 스포츠카로 배기량에 비해 가벼운 몸체를 가지고 있어 예외적인 연비가 관측된 것으로 보인다.\n다음으로 class 열을 shape, size, alpha 등의 속성에 대응시켜 어떤 결과가 나오는지 살펴보자.\n\n\n\nshape 속성은 점의 모양을 결정한다. 다음은 앞의 산점도를 구동 방식(drv)에 따라 점의 모양이 다르게 표시한 예이다.\n\nggplot(mpg, aes(x = displ, y = hwy, shape = drv)) + geom_point()\n\n\n\n\n점의 모양과 색상을 하나의 데이터 열에 매핑하여 좀 더 데이터가 뚜렷이 구분되게 그래프를 그리기도 한다.\n\nggplot(mpg, aes(x = displ, y = hwy, shape = drv, color = drv)) +\n  geom_point()\n\n\n\n\n물론 다음처럼 점의 색상과 모양을 각각 데이터의 다른 열에 매핑할 수도 있다. 다음은 점의 색은 자동차의 종류(class)에 모양은 자동차의 구동방식(drv)에 매핑한 결과이다.\n\nggplot(mpg, aes(x = displ, y = hwy, shape = drv, color = class)) +\n  geom_point()\n\n\n\n\nshape을 사용할 때 주의할 점은 shape은 최대 6개의 모양으로만 점을 구분하기 때문에 class 열처럼 6개보 많은 종류가 있는 열에 매핑되면 데이터가 제대로 표시가 되지 않는다. 다음 예처럼 shape 속성에 class 열을 매핑하니 경고가 나타나고 suv 데이터를 표시하지 못한 것을 확인할 수 있다.\n\nggplot(mpg, aes(x = displ, y = hwy, shape = class)) + geom_point()\n#&gt; Warning: The shape palette can deal with a maximum of 6 discrete values because\n#&gt; more than 6 becomes difficult to discriminate; you have 7. Consider\n#&gt; specifying shapes manually if you must have them.\n#&gt; Warning: Removed 62 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n모양(shape) 속성은 소수의 구분되는 값으로 표현되는 범주형 변수를 표현하기 좋다. 데이터의 열이 연속형 변수이면 연속적인 값을 표현하기 좋은 가로축(x), 세로축(y), 크기(size), 투명도(alpha) 등을 이용하는 것이 좋다. 색상(color)은 범주형 변수와 연속형 변수에 모두 매핑될 수 있다. 범주형 변수로 매핑되면 구분되는 색상으로, 연속형 변수로 매핑되면 색상의 그라데이션으로 값을 표시한다.\n다음은 도심 연비와 고속도로 연비를 가로축과 세로축으로 하는 그래프에서 점의 크기 속성을 배기량 열에 매핑한 결과이다. 도심 연비와 고속도로 연비가 좋은 차들은 배기량이 작은 차임을 알 수 있다.\n\nggplot(mpg, aes(x = cty, y = hwy, size = displ)) + geom_point()\n\n\n\n\n다음은 동일한 도심 연비와 고속도로 연비 산점도에서 그래프에서 점의 색상을 배기량 열에 매핑한 결과이다. 범주형 변수가 매핑될 때와는 달리 색상의 연속적인 변화인 그라데이션을 사용하여 배기량을 표현하고 있음을 볼 수 있다.\n\nggplot(mpg, aes(x = cty, y = hwy, color = displ)) + geom_point()\n\n\n\n\n다음은 동일한 도심 연비와 고속도로 연비 산점도에서 그래프에서 점의 투명도를 실린더 수 열에 매핑한 결과이다.\n\nggplot(mpg, aes(x = cty, y = hwy, alpha = cyl)) + geom_point()\n\n\n\n\n\n\n\n\nggplot은 매우 강력한 기능을 가지고 있지만 Excel 등의 GUI 프로그램에만 익숙한 사람은 문자 기반 명령어를 입력하는 것에 어려움을 느낄 수 있다. 컴퓨터는 사람만큼의 유연성을 발휘하지 못하므로 컴퓨터는 자신이 실행해야 할 명령문의 문법에 매우 까다롭게 반응한다. ggplot 명령어 입력시 흔히 발생하는 문제들은 다음과 같다.\n\nR 명령문은 대소문자를 구분한다. 따라서 Color와 color는 ggplot에서 서로 다른 인수로 인식되어 오류가 발생한다.\nggplot 명령문의 키워드의 철자가 틀리면 다른 키워드로 간주하기 때문에 오류가 발생할 수 있다. 이를 방지하려면 키워드의 일부만 입력한 후 Tab 키를 눌러 자동완성 기능을 사용하여 입력하는 것을 권장한다.\nggplot2의 명령문을 입력할 때 여러 함수를 합쳐서 실행하기 위하여 + 연산자를 이용한다. ggplot2의 명령문이 길어지면 명령문을 여러 줄로 쓰는 것이 필요한데, 보통 +로 연결되는 곳에서 줄바꿈하는 것이 읽기에 좋다. 이 때 주의할 점이, 줄바꿈을 + 앞이 아니라 뒤에서 해야 한다는 것이다. + 앞에서 하면 R은 명령문의 입력이 완성된 것으로 간주하기 때문이다.\n\n다음은 산점도와 추세선을 한 그래프에 그린 예이다.\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) + geom_point() + geom_smooth()\n#&gt; `geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n그런데 위의 명령어는 길기 때문에 스크립트 파일을 작성할 때 보기에 불편하다. 이러한 경우에 위의 명령은 다음처럼 세 줄로 나누어 기술될 수 있다. 세 함수를 연결하는 + 위치가 어디에 있는지 살펴보라. (다음 예에서 왼쪽의 &gt; 프롬프트 아래 있는 +는 R 콘솔에서 명령문이 계속되고 있음을 나타내는 표시이다. 이 표시와 사용자가 입력한 +를 혼동하면 안 된다.)\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point() +\n  geom_smooth()\n#&gt; `geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n만약 다음처럼 + 위치가 잘못되면 오류가 발생한다. 왜 이런 결과가 나왔고 오류 메시지의 의미는 무엇일까? R은 Enter로 명령문을 구분한다. 그러므로 첫번째 줄은 +가 없으므로 완벽한 명령문이기 입력된 것으로 간주하고 실행이되어 좌표평면만 그린 것이다. 그러고 나서 두번째 줄을 새로운 명령문으로 실행을 한다. 그런데 갑자기 명령문이 +로 시작하니 R은 명령문에 오류가 있다고 판단한다. 왜냐하면 + 연산은 왼편과 오른편에 더할 요소가 있어야 하는데, 왼편의 요소가 기술되지 않았기 때문이다.\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv))\n+ geom_point()\n\n\nR 명령문이 조금 길어지면 가장 흔하게 발생하는 실수가 ( )와 \" \"을 짝을 맞추어 제대로 입력하지 못하는 것이다. ggplot2의 명령문도 많은 함수를 사용하다 보니 이를 주의하여야 한다. 이러한 실수를 하게 되면면 R 콘솔은 명령이 계속 입력 중이라고 생각하여 &gt;가 아니라 +를 콘솔의 프롬프트로 표시한다. 이 경우 가장 간단한 해결책은 Esc 키를 눌러 명령 입력에서 빠져나와 다시 명령문을 입력하는 것이다.\n\n\n\n\nggplot2의 장점은 필요에 따라 다양한 형식의 그래프를 쉽게 만들 수 있고, 만들 수 있는 형식도 무궁무진하다는데 있다. 그리고 ggplot2 그래프의 계층적 구조가 이러한 무궁무진한 그래프 형식을 만들어 내는 핵심 요소라 할 수 있다. ggplot2는 좌표평면 위에 여러 계층으로 그래프를 겹쳐 그려서 하나의 좌표평면에 나타냄으로써 복잡한 형식의 그래프를 만들어 낼 수 있다.\n다음 그래프는 배기량과 고속도로 연비의 산점도와 추세선을 한 그래프에 그렸다. ggplot() 함수에 지정한 데이터와 그래프 속성과 데이터 열 매핑이 산점도(geom_point())와 추세선(geom_smooth())에 모두 동일하게 정의되었음을 볼 수 있다.\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point() +\n  geom_smooth()\n#&gt; `geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\nggplot() 함수가 여러 개의 geom 함수와 연결되면, 하나의 좌표평면에 각각의 geom() 함수의 결과를 층층이 그린다. 이 때, 명령문에 나타나는 순서에 따라 첫번째 나온 geom 함수의 도형이 가장 아래 계층에, 다음에 나오는 geom 함수의 도형이 차례로 그 윗 계층에 그려진다.\n\n\n앞의 배기량과 고속도로 연비의 산점도와 추세선을 그린 그래프에서 추세선을 선 종류(linttype)가 구동 방식(drv)에 따라 다르게 표현하고 싶다. 그런데 산점도는 점이라는 도형으로 그래프를 그리므로 선 종류라는 속성을 가지고 있지 않다. 그리고 산점도도 점의 모양(shape)이 구동 방식에 따라 다르게 표현하고 싶다고 하자. 마찬가지로 추세선은 선이라는 도형으로 그래프를 그리므로 점의 모양이라는 속성을 가지고 있지 않다.\n이렇듯 여러 geom 함수를 연결하여 그래프를 그릴 때, 특정 geom 함수에만 해당하는 속성은 해당 geom 함수에서 속성과 데이터 열을 매핑하는 것이 좋다. geom 함수도 ggplot() 함수처럼 aes() 함수를 이용하여 그래프 속성과 데이터 열을 매핑하는데, 이 매핑이 geom 함수의 첫 번째 인수로 기술된다는 점만 다르다.\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point(aes(shape = drv)) +\n  geom_smooth(aes(linetype = drv))\n#&gt; `geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n따라서 지금까지 배운 내용으로 ggplot2 그래프를 그리는 문법을 확장하면 다음과 같다.\n\nggplot(데이터, aes(공통속성1=열1, 공통속성2=열2, ...)) + \n  geom함수1(aes(geom함수1의 속성1=열1, geom함수1의 속성2=열2, ...)) + \n  geom함수2(aes(geom함수2의 속성1=열1, geom함수2의 속성2=열2, ...)) +\n  ....\n\n확장된 문법으로 맨처음 그린 배기량과 고속도로 연비의 산점도와 추세선 그래프에서, 산점도의 점은 구동 방식에 따라 다른 색으로 표시하지만, 추세선은 모든 데이터에 대하여 하나만 그리려면 어떻게 해야 할까? 답은 다음처럼 색상 속성을 공통 속성으로 ggplot()에 매핑하지 않고 산점도만의 속성 매핑이 되도록 geom_point()에 기술하는 것이다.\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point(aes(color = drv)) +\n  geom_smooth()\n#&gt; `geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n마찬가지로 추세선을 구동 방식에 따라 다른 색상으로 표시하나 점은 모두 동일한 색으로 표시하고 싶으면 다음처럼 색상이 추세선만의 속성 매핑이 되도록 geom_smooth()에 기술하는 것이다.\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point() +\n  geom_smooth(aes(color = drv))\n#&gt; `geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n또한 ggplot() 함수에 데이터와 도형 속성에 대한 매핑이 되어 있어도, geom 함수에서 데이터와 도형 속성의 매핑을 재지정할 수도 있다. 이 경우 각 geom 함수에서 사용하는 data와 mapping은 다음 규칙에 의해 결정된다.\n\ngeom 함수는 ggplot() 함수에 설정된 data와 mapping을 상속받아 그래프를 그린다.\n만약 geom 함수에 data 인수가 설정되면 ggplot() 함수에 설정된 data는 무시된다.\n만약 geom 함수에 mapping 인수가 설정되면 ggplot() 함수에 설정된 mapping에 geom 함수에 설정된 mapping이 추가된다. 만약 동일한 도형 속성에 대한 정의가 두 군데 나타나면 geom 함수의 설정이 사용된다. 자세한 내용은 R 프로그래밍의 그래프 계층(layers)과 도형(geoms) 절을 참조하기 바란다.\n\n\n\n\n\n다음 그래프는 배기량과 고속도로 연비의 관계를 살펴보기 위하여 이 두 변수의 관계를 산점도로 살펴보고 나서, 이 두 변수의 관계가 자동차 종류에 따라 어떻게 달라지는지를 살펴보기 위해 그래프의 색상 속성을 자동차 종류를 나타내는 열에 매핑하여 다르게 표시되도록 하였다.\n\nggplot(mpg, aes(x = displ, y = hwy)) + geom_point()\n\n\n\nggplot(mpg, aes(x = displ, y = hwy, color = class)) + geom_point() \n\n\n\n\n이렇듯 두 변수의 관계를 제삼의 변수 관점에서 세분화하여 살펴보는 방법으로 제삼의 변수를 그래프 속성에 매핑하는 방법 말고도 제삼의 변수의 변수값에 따라 데이터를 별도의 그래프로 나누어 그려보는 방법이 있다. ggplot2에서는 이러한 방식을 측면(facets)으로 나누어 그래프를 그린다고 한다.\n\n\n다음은 facet_wrap() 함수의 사용법을 보여준다. ~ 은 R에서 수식을 표현할 때 사용되는데, facet_wrap() 함수는 수식을 첫 번재 인수로 입력받는다. facet_wrap() 함수는 ~ 우변에 서술된 변수의 변수값 별로 데이터를 나누어 그래프를 각각 그린다. 이 때 측면(facets)을 지정하는데 사용되는 변수는 범주형 데이터이어야 한다. facet_wrap()은 측면 그래프가 많아지면 줄바꿈하여 그래프를 표시한다. nrow나 ncol을 설정하면 그래프의 행과 열의 수를 지정하여 줄바꿈 처리를 제어할 수 있다.\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point() +\n  facet_wrap( ~ class, nrow = 2)\n\n\n\n\n측면으로 나누어 그려진 그래프는 서로 비교가 용이하도록 동일한 좌표축으로 그려진다. 측면 그래프의 상단에는 어떤 측면의 데이터에 대한 그래프인지를 표시한다. 맨 처음 측면 그래프는 2seater 측면에서 배기량과 고속도로 연비의 산점도를 보여주고, 맨 마지막 측면 그래프는 SUV 측면에서 배기량과 고속도로 연비의 산점도를 보여준다.\n두 개 이상의 변수를 조합하여 측면 그래프을 만드려면 다음처럼 수식의 우변에 두 개의 변수를 +로 연결하여 기술하면 된다. 다음은 구동 방식(drv)와 조사 년도(year)의 값에 따라 그래프를 나누어 그린 예이다. 역시 모든 그래프의 좌표축은 동일하고 그래프 상단에 어떤 측면의 그래프인지를 표시하고 있는데 윗줄에 표시된 내용은 구동 방식의 값이고 아랫줄은 조사년도의 값이다. 따라서 첫 번째 측면 그래프는 4륜 구동이고 1999년도 조사한 데이터 측면에서 배기량과 고속도로 연비의 산점도를 보여준다.\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point() +\n  facet_wrap(~drv + year, nrow = 2)\n\n\n\n\n\n\n\n그래프를 두 변수의 측면에서 나누어 그릴 때는 face_wrap() 보다는 facet_grid()를 사용하는 것이 좋다. facet_grid()도 수식을 첫 번재 인수로 입력 받는데, 수식의 좌변과 우변에 측면으로 나누는데 사용할 변수를 지정할 수 있다. 수식의 좌변에 기술된 변수를 기준으로 측면 그래프를 행으로 배열하고, 우변에 기술된 변수를 기준으로 측면 그래프를 열로 배열한다. 다음 그래프는 행은 구동 방식으로, 열은 실린더 수를 기준으로 나누어 측면 그래프를 그린 예이다. 그러므로 두 번째 행-세 번째 열의 그래프는 전륜 구동(f)이고 실린더가 6자동차의 산점도를 나타낸다.\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point() +\n  facet_grid(drv ~ cyl)\n\n\n\n\nfacet_wrap() 함수와 마찬가지로 수식의 좌변과 우변에 +로 하나 이상의 변수를 지정할 수도 있다.\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point() +\n  facet_grid(drv + year ~ cyl)\n\n\n\n\n\n\n\n\nggplot2에는 지금까지 설명한 문법 요소 외에도 통계 변환(stat), 위치 조정(position), 스케일 변환(scale), 좌표축 변환(coord), 테마(theme) 등의 요소가 있다. ggplot2를 사용하여 복잡한 시각화를 수행하려면 이러한 문법 요소에 대한 체계적 이해와 습득이 필요하다. 그러나 이 책은 데이터 시각화 전반을 소개하는 것이 목적이 아니기 때문에, 통계데이터 분석을 위한 그래프를 그릴 때 이러한 문법 요소가 필요하면 그 요소를 단편적으로 설명할 예정이다. 그러므로 좀 더 ggplot2 그래프에 대한 체계적인 이해를 원하는 독자는 R 프로그래밍의 ggplot2를 이용한 데이터 시각화를 참조하기 바란다.\n이 절의 나머지 부분에서는 나머지 문법 요소 중 그래프의 외양을 변경하는 매우 간단한 한 가지 문법 요소만 살펴보도록 한다.\n\n\nggplot2 패키지의 labs() 함수는 그래프의 제목, 좌표축 이름, 범례의 이름을 쉽게 바꿀 수 있게 해준다. 다음은 mpg 데이터의 배기량과 고속도로 연비의 산점도를 자동차 종류 별로 다른 색상으로 그린 예이다. 그런데 ggplot2에서는 기본적으로 좌표축 레이블과 색상의 범례 레이블로, 좌표축과 색상에 매핑된 열의 이름을 사용한다. 그리고 그래프에 제목은 달지 않는다.\n\nggplot(mpg, aes(x = displ, y = hwy, color = class)) + geom_point()\n\n\n\n\n만약 자동으로 부여된 레이블이 마음에 들지 않으면 이를 labs() 함수로 변경할 수 있다. 위 그래프에서 다음처럼 범례 이름, 축의 이름 한글로 바꾸고, 그래프의 제목도 달아 보자.\n\nggplot(mpg, aes(x = displ, y = hwy, color = class)) +\n  geom_point() +\n  labs(title = '배기량과 고속도로 연비 산점도',\n       x = '배기량(리터)',\n       y = '고속도로 연비',\n       color = '자동차 종류')\n\n\n\n\nlabs() 함수는 ggplot2 그래프에 + 연산으로 결합하여 사용되면, 그래픽 속성 매핑에 사용된 x, y, color 인수에 사용할 이름을 지정하면 된다. 그래프의 제목을 지정하려면 title이라는 인수를 사용한다."
  },
  {
    "objectID": "Data_Visualization/week14_Visualizing_Time_Series.html",
    "href": "Data_Visualization/week14_Visualizing_Time_Series.html",
    "title": "Visualizing Time Series",
    "section": "",
    "text": "load('./data/preprint_growth.rda')\n\npreprint_growth %&gt;% sapply(class)\n#&gt;     archive        date       count \n#&gt; \"character\"      \"Date\"   \"integer\"\npreprint_growth %&gt;% head()\n#&gt; # A tibble: 6 × 3\n#&gt;   archive           date       count\n#&gt;   &lt;chr&gt;             &lt;date&gt;     &lt;int&gt;\n#&gt; 1 arXiv q-bio       2007-01-01    40\n#&gt; 2 Nature Precedings 2007-01-01     3\n#&gt; 3 F1000Research     2007-01-01     0\n#&gt; 4 PeerJ Preprints   2007-01-01     0\n#&gt; 5 bioRxiv           2007-01-01     0\n#&gt; 6 Winnower          2007-01-01     0\n\n\n# Data\nbiorxiv_growth &lt;- preprint_growth %&gt;%\n  filter(archive == 'bioRxiv') %&gt;%\n  filter(count &gt; 0)\n\nggplot(biorxiv_growth, aes(date, count)) +\n  geom_point(color = 'white', fill = '#0072B2', shape = 21, size = 2) +\n  scale_y_continuous(name = 'Preprints / Month') +\n  scale_x_date(name = 'Year') +\n  theme_classic()\n\n\n\n\n\n\n\n\nggplot(biorxiv_growth, aes(date, count)) +\n  geom_line(linewidth = 0.5, color = '#0072B2') +\n  geom_point(color = 'white', fill = '#0072B2', shape = 21, size = 2) +\n  scale_y_continuous(name = 'Preprints / Month') +\n  scale_x_date(name = 'Year') +\n  theme_classic()\n\n\n\n\n\n\n\n\nggplot(biorxiv_growth, aes(date, count)) +\n  geom_line(linewidth = 1.25, color = '#0072B2') +\n  scale_y_continuous(name = 'Preprints / Month') +\n  scale_x_date(name = 'Year') +\n  theme_classic()\n\n\n\n\n\n\n\n\nggplot(biorxiv_growth, aes(date, height = count, y = 0)) +\n  ggridges::geom_ridgeline(size = 1, color = '#0072B2', fill  = '#0072B240') +\n  scale_y_continuous(name = 'Preprints / Month') +\n  scale_x_date(name = 'Year') +\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\n\n# Data\npreprints &lt;- preprint_growth %&gt;%\n  filter(archive %in% c('bioRxiv', 'arXiv q-bio', 'PeerJ Preprints')) %&gt;%\n  filter(count &gt; 0) %&gt;%\n  mutate(archive = factor(archive, levels = c('bioRxiv', 'arXiv q-bio', 'PeerJ Preprints')))\n\npreprints %&gt;%\n  filter(date &gt;= '2013-11-01' & date &lt;= '2017-01-01') %&gt;%\n  ggplot(aes(date, count, color = archive, fill = archive, shape = archive)) + \n  geom_line(linewidth = 0.75) +\n  geom_point(color = 'white', size = 2) +\n  scale_y_continuous(name = 'Preprints / Month') +\n  scale_x_date(name = 'Year') +\n  scale_shape_manual(values = c(21, 22, 23), name = NULL) + \n  scale_color_manual(values = c('#0072b2', '#D55E00', '#009e73'), name = NULL) +\n  scale_fill_manual(values = c('#0072b2', '#D55E00', '#009e73'), name = NULL) +\n  theme_classic() +\n  theme(legend.position = c(0.2, 0.8))\n\n\n\n\n\n\n\n\n# Data\npreprints_final &lt;- filter(preprints, date == '2017-01-01')\n\npreprints %&gt;% filter(date &gt;= '2013-11-01' & date &lt;= '2017-01-01') %&gt;%\n  ggplot(aes(date, count, color = archive, fill = archive, shape = archive)) +\n  geom_line(linewidth = 1) +\n  scale_y_continuous(\n    limits = c(0, 600), expand = c(0, 0), name = 'Preprints / Month',\n    sec.axis = dup_axis(breaks = preprints_final$count,\n                        labels = c('arxiv\\nq-bio', 'PeerJ\\nPreprints', 'bioRxiv'),\n                        name = NULL)) +\n  scale_x_date(name = 'Year', expand = expansion(mult = c(0.02, 0))) +\n  scale_shape_manual(values = c(21, 22, 23), name = NULL) +\n  theme_classic() +\n  theme(axis.line.y.right = element_blank(),\n        axis.ticks.y.right = element_blank(),\n        legend.position = 'none')"
  },
  {
    "objectID": "Data_Visualization/week14_Visualizing_Time_Series.html#individual-time-series---단일-시계열-데이터",
    "href": "Data_Visualization/week14_Visualizing_Time_Series.html#individual-time-series---단일-시계열-데이터",
    "title": "Visualizing Time Series",
    "section": "",
    "text": "load('./data/preprint_growth.rda')\n\npreprint_growth %&gt;% sapply(class)\n#&gt;     archive        date       count \n#&gt; \"character\"      \"Date\"   \"integer\"\npreprint_growth %&gt;% head()\n#&gt; # A tibble: 6 × 3\n#&gt;   archive           date       count\n#&gt;   &lt;chr&gt;             &lt;date&gt;     &lt;int&gt;\n#&gt; 1 arXiv q-bio       2007-01-01    40\n#&gt; 2 Nature Precedings 2007-01-01     3\n#&gt; 3 F1000Research     2007-01-01     0\n#&gt; 4 PeerJ Preprints   2007-01-01     0\n#&gt; 5 bioRxiv           2007-01-01     0\n#&gt; 6 Winnower          2007-01-01     0\n\n\n# Data\nbiorxiv_growth &lt;- preprint_growth %&gt;%\n  filter(archive == 'bioRxiv') %&gt;%\n  filter(count &gt; 0)\n\nggplot(biorxiv_growth, aes(date, count)) +\n  geom_point(color = 'white', fill = '#0072B2', shape = 21, size = 2) +\n  scale_y_continuous(name = 'Preprints / Month') +\n  scale_x_date(name = 'Year') +\n  theme_classic()\n\n\n\n\n\n\n\n\nggplot(biorxiv_growth, aes(date, count)) +\n  geom_line(linewidth = 0.5, color = '#0072B2') +\n  geom_point(color = 'white', fill = '#0072B2', shape = 21, size = 2) +\n  scale_y_continuous(name = 'Preprints / Month') +\n  scale_x_date(name = 'Year') +\n  theme_classic()\n\n\n\n\n\n\n\n\nggplot(biorxiv_growth, aes(date, count)) +\n  geom_line(linewidth = 1.25, color = '#0072B2') +\n  scale_y_continuous(name = 'Preprints / Month') +\n  scale_x_date(name = 'Year') +\n  theme_classic()\n\n\n\n\n\n\n\n\nggplot(biorxiv_growth, aes(date, height = count, y = 0)) +\n  ggridges::geom_ridgeline(size = 1, color = '#0072B2', fill  = '#0072B240') +\n  scale_y_continuous(name = 'Preprints / Month') +\n  scale_x_date(name = 'Year') +\n  theme_classic()"
  },
  {
    "objectID": "Data_Visualization/week14_Visualizing_Time_Series.html#multiple-time-series-and-doseresponse-curves---다중-시계열-데이터와-용량-반응-곡선",
    "href": "Data_Visualization/week14_Visualizing_Time_Series.html#multiple-time-series-and-doseresponse-curves---다중-시계열-데이터와-용량-반응-곡선",
    "title": "Visualizing Time Series",
    "section": "",
    "text": "# Data\npreprints &lt;- preprint_growth %&gt;%\n  filter(archive %in% c('bioRxiv', 'arXiv q-bio', 'PeerJ Preprints')) %&gt;%\n  filter(count &gt; 0) %&gt;%\n  mutate(archive = factor(archive, levels = c('bioRxiv', 'arXiv q-bio', 'PeerJ Preprints')))\n\npreprints %&gt;%\n  filter(date &gt;= '2013-11-01' & date &lt;= '2017-01-01') %&gt;%\n  ggplot(aes(date, count, color = archive, fill = archive, shape = archive)) + \n  geom_line(linewidth = 0.75) +\n  geom_point(color = 'white', size = 2) +\n  scale_y_continuous(name = 'Preprints / Month') +\n  scale_x_date(name = 'Year') +\n  scale_shape_manual(values = c(21, 22, 23), name = NULL) + \n  scale_color_manual(values = c('#0072b2', '#D55E00', '#009e73'), name = NULL) +\n  scale_fill_manual(values = c('#0072b2', '#D55E00', '#009e73'), name = NULL) +\n  theme_classic() +\n  theme(legend.position = c(0.2, 0.8))\n\n\n\n\n\n\n\n\n# Data\npreprints_final &lt;- filter(preprints, date == '2017-01-01')\n\npreprints %&gt;% filter(date &gt;= '2013-11-01' & date &lt;= '2017-01-01') %&gt;%\n  ggplot(aes(date, count, color = archive, fill = archive, shape = archive)) +\n  geom_line(linewidth = 1) +\n  scale_y_continuous(\n    limits = c(0, 600), expand = c(0, 0), name = 'Preprints / Month',\n    sec.axis = dup_axis(breaks = preprints_final$count,\n                        labels = c('arxiv\\nq-bio', 'PeerJ\\nPreprints', 'bioRxiv'),\n                        name = NULL)) +\n  scale_x_date(name = 'Year', expand = expansion(mult = c(0.02, 0))) +\n  scale_shape_manual(values = c(21, 22, 23), name = NULL) +\n  theme_classic() +\n  theme(axis.line.y.right = element_blank(),\n        axis.ticks.y.right = element_blank(),\n        legend.position = 'none')"
  },
  {
    "objectID": "Data_Visualization/week13_Visualizing_Nested_Proportions.html",
    "href": "Data_Visualization/week13_Visualizing_Nested_Proportions.html",
    "title": "Visualizing Nested Proportions",
    "section": "",
    "text": "# Data\nbridges &lt;- read.csv('./data/bridges.csv')\nbridges %&gt;% sapply(class)\n#&gt;     IDENTIF       RIVER    LOCATION     ERECTED     PURPOSE      LENGTH \n#&gt; \"character\" \"character\"   \"numeric\" \"character\" \"character\" \"character\" \n#&gt;       LANES     CLEAR.G      T.OR.D    MATERIAL        SPAN       REL.L \n#&gt;   \"integer\" \"character\" \"character\" \"character\" \"character\" \"character\" \n#&gt;        TYPE \n#&gt; \"character\"\nbridges %&gt;% head()\n#&gt;   IDENTIF RIVER LOCATION ERECTED  PURPOSE LENGTH LANES CLEAR.G  T.OR.D MATERIAL\n#&gt; 1      E1     M        3  CRAFTS  HIGHWAY   &lt;NA&gt;     2       N THROUGH     WOOD\n#&gt; 2      E2     A       25  CRAFTS  HIGHWAY MEDIUM     2       N THROUGH     WOOD\n#&gt; 3      E3     A       39  CRAFTS AQUEDUCT   &lt;NA&gt;     1       N THROUGH     WOOD\n#&gt; 4      E5     A       29  CRAFTS  HIGHWAY MEDIUM     2       N THROUGH     WOOD\n#&gt; 5      E6     M       23  CRAFTS  HIGHWAY   &lt;NA&gt;     2       N THROUGH     WOOD\n#&gt; 6      E7     A       27  CRAFTS  HIGHWAY  SHORT     2       N THROUGH     WOOD\n#&gt;     SPAN REL.L TYPE\n#&gt; 1  SHORT     S WOOD\n#&gt; 2  SHORT     S WOOD\n#&gt; 3   &lt;NA&gt;     S WOOD\n#&gt; 4  SHORT     S WOOD\n#&gt; 5   &lt;NA&gt;     S WOOD\n#&gt; 6 MEDIUM     S WOOD\n\n# 재료(MATERIAL) -&gt; factor()\nbridges &lt;- bridges %&gt;%\n  mutate(MATERIAL = factor(MATERIAL, levels = c('WOOD', 'STEEL', 'IRON')))\n\n\n# Figure 11.3 - 기본(원자료)\nbridges %&gt;%\n  ggplot() +\n  geom_mosaic(aes(x = product(MATERIAL, ERECTED), fill = MATERIAL),\n              offset = 0, color = 'white')\n#&gt; Warning: `unite_()` was deprecated in tidyr 1.2.0.\n#&gt; ℹ Please use `unite()` instead.\n#&gt; ℹ The deprecated feature was likely used in the ggmosaic package.\n#&gt;   Please report the issue at &lt;https://github.com/haleyjeppson/ggmosaic&gt;.\n\n\n\n\n# Figure 11.3 - 기본(원자료) + 텍스트\nbridges %&gt;%\n  ggplot() +\n  geom_mosaic(aes(x = product(MATERIAL, ERECTED), fill = MATERIAL),\n              offset = 0, color = 'white') +\n  geom_mosaic_text(aes(x = product(MATERIAL, ERECTED), fill = MATERIAL))\n\n\n\n\n# Figure 11.3 - 기본(원자료) + 숫자\nbridges %&gt;%\n  ggplot() +\n  geom_mosaic(aes(x = product(MATERIAL, ERECTED), fill = MATERIAL),\n              offset = 0, color = 'white') +\n  geom_text(data = layer_data() %&gt;% filter(.wt &gt; 0),\n            aes(x = (xmin + xmax) / 2,\n                y = (ymin + ymax) / 2, label = .wt), color = 'white')\n\n\n\n\n# Figure 11.3 - 원자료\nbridges %&gt;%\n  ggplot() +\n  geom_mosaic(aes(x = product(MATERIAL, ERECTED), fill = MATERIAL),\n              offset = 0, color = 'white') +\n  geom_text(data = layer_data() %&gt;% filter(.wt &gt; 0),\n            aes(x = (xmin + xmax) / 2,\n                y = (ymin + ymax) / 2, label = .wt), color = 'white') +\n  scale_y_productlist(name = '', expand = c(0, 0), breaks = NULL) +\n  scale_x_productlist(name = '', expand = c(0, 0)) +\n  theme_minimal() +\n  theme(panel.grid.major.x = element_blank(),\n        panel.grid.major.y = element_blank())\n\n\n\n\n\n\n\n# (1) group_by & summarise\nbridges_sum &lt;- bridges %&gt;%\n  filter(!is.na(MATERIAL)) %&gt;%\n  group_by(MATERIAL, ERECTED) %&gt;%\n  summarise(count = n())\n#&gt; `summarise()` has grouped output by 'MATERIAL'. You can override using the\n#&gt; `.groups` argument.\n\n# (2) table & melt\nbridges_sum &lt;- select(bridges, MATERIAL, ERECTED) %&gt;%\n  table() %&gt;%\n  reshape2::melt(value.name = 'count')\n\n# Figure 11.3 - 기본\nbridges_sum %&gt;%\n  ggplot() +\n  geom_mosaic(aes(x = product(MATERIAL, ERECTED), fill = MATERIAL),\n              offset = 0, color = 'white')\n\n\n\n\n# Figure 11.3\nbridges_sum %&gt;%\n  ggplot() +\n  geom_mosaic(aes(x = product(MATERIAL, ERECTED), \n                  weight = count, fill = MATERIAL),\n              offset = 0, color = 'white') +\n  geom_text(data = layer_data() %&gt;% filter(.wt &gt; 0),\n            aes(x = (xmin + xmax) / 2,\n                y = (ymin + ymax) / 2, label = .wt), color = 'white') +\n  scale_y_productlist(name = '', expand = c(0, 0), breaks = NULL) +\n  scale_x_productlist(name = '', expand = c(0, 0)) +\n  scale_fill_manual(name = '', values = c('#D55E00D0', '#0072B2D0', '#009E73D0'))\n\n\n\n  theme_minimal() +\n  theme(panel.grid.major.x = element_blank(),\n        panel.grid.major.y = element_blank())\n#&gt; List of 97\n#&gt;  $ line                      :List of 6\n#&gt;   ..$ colour       : chr \"black\"\n#&gt;   ..$ linewidth    : num 0.5\n#&gt;   ..$ linetype     : num 1\n#&gt;   ..$ lineend      : chr \"butt\"\n#&gt;   ..$ arrow        : logi FALSE\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n#&gt;  $ rect                      :List of 5\n#&gt;   ..$ fill         : chr \"white\"\n#&gt;   ..$ colour       : chr \"black\"\n#&gt;   ..$ linewidth    : num 0.5\n#&gt;   ..$ linetype     : num 1\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n#&gt;  $ text                      :List of 11\n#&gt;   ..$ family       : chr \"\"\n#&gt;   ..$ face         : chr \"plain\"\n#&gt;   ..$ colour       : chr \"black\"\n#&gt;   ..$ size         : num 11\n#&gt;   ..$ hjust        : num 0.5\n#&gt;   ..$ vjust        : num 0.5\n#&gt;   ..$ angle        : num 0\n#&gt;   ..$ lineheight   : num 0.9\n#&gt;   ..$ margin       : 'margin' num [1:4] 0points 0points 0points 0points\n#&gt;   .. ..- attr(*, \"unit\")= int 8\n#&gt;   ..$ debug        : logi FALSE\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ title                     : NULL\n#&gt;  $ aspect.ratio              : NULL\n#&gt;  $ axis.title                : NULL\n#&gt;  $ axis.title.x              :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : NULL\n#&gt;   ..$ size         : NULL\n#&gt;   ..$ hjust        : NULL\n#&gt;   ..$ vjust        : num 1\n#&gt;   ..$ angle        : NULL\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : 'margin' num [1:4] 2.75points 0points 0points 0points\n#&gt;   .. ..- attr(*, \"unit\")= int 8\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ axis.title.x.top          :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : NULL\n#&gt;   ..$ size         : NULL\n#&gt;   ..$ hjust        : NULL\n#&gt;   ..$ vjust        : num 0\n#&gt;   ..$ angle        : NULL\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : 'margin' num [1:4] 0points 0points 2.75points 0points\n#&gt;   .. ..- attr(*, \"unit\")= int 8\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ axis.title.x.bottom       : NULL\n#&gt;  $ axis.title.y              :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : NULL\n#&gt;   ..$ size         : NULL\n#&gt;   ..$ hjust        : NULL\n#&gt;   ..$ vjust        : num 1\n#&gt;   ..$ angle        : num 90\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : 'margin' num [1:4] 0points 2.75points 0points 0points\n#&gt;   .. ..- attr(*, \"unit\")= int 8\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ axis.title.y.left         : NULL\n#&gt;  $ axis.title.y.right        :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : NULL\n#&gt;   ..$ size         : NULL\n#&gt;   ..$ hjust        : NULL\n#&gt;   ..$ vjust        : num 0\n#&gt;   ..$ angle        : num -90\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.75points\n#&gt;   .. ..- attr(*, \"unit\")= int 8\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ axis.text                 :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : chr \"grey30\"\n#&gt;   ..$ size         : 'rel' num 0.8\n#&gt;   ..$ hjust        : NULL\n#&gt;   ..$ vjust        : NULL\n#&gt;   ..$ angle        : NULL\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : NULL\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ axis.text.x               :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : NULL\n#&gt;   ..$ size         : NULL\n#&gt;   ..$ hjust        : NULL\n#&gt;   ..$ vjust        : num 1\n#&gt;   ..$ angle        : NULL\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : 'margin' num [1:4] 2.2points 0points 0points 0points\n#&gt;   .. ..- attr(*, \"unit\")= int 8\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ axis.text.x.top           :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : NULL\n#&gt;   ..$ size         : NULL\n#&gt;   ..$ hjust        : NULL\n#&gt;   ..$ vjust        : num 0\n#&gt;   ..$ angle        : NULL\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : 'margin' num [1:4] 0points 0points 2.2points 0points\n#&gt;   .. ..- attr(*, \"unit\")= int 8\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ axis.text.x.bottom        : NULL\n#&gt;  $ axis.text.y               :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : NULL\n#&gt;   ..$ size         : NULL\n#&gt;   ..$ hjust        : num 1\n#&gt;   ..$ vjust        : NULL\n#&gt;   ..$ angle        : NULL\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : 'margin' num [1:4] 0points 2.2points 0points 0points\n#&gt;   .. ..- attr(*, \"unit\")= int 8\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ axis.text.y.left          : NULL\n#&gt;  $ axis.text.y.right         :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : NULL\n#&gt;   ..$ size         : NULL\n#&gt;   ..$ hjust        : num 0\n#&gt;   ..$ vjust        : NULL\n#&gt;   ..$ angle        : NULL\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.2points\n#&gt;   .. ..- attr(*, \"unit\")= int 8\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ axis.ticks                : list()\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n#&gt;  $ axis.ticks.x              : NULL\n#&gt;  $ axis.ticks.x.top          : NULL\n#&gt;  $ axis.ticks.x.bottom       : NULL\n#&gt;  $ axis.ticks.y              : NULL\n#&gt;  $ axis.ticks.y.left         : NULL\n#&gt;  $ axis.ticks.y.right        : NULL\n#&gt;  $ axis.ticks.length         : 'simpleUnit' num 2.75points\n#&gt;   ..- attr(*, \"unit\")= int 8\n#&gt;  $ axis.ticks.length.x       : NULL\n#&gt;  $ axis.ticks.length.x.top   : NULL\n#&gt;  $ axis.ticks.length.x.bottom: NULL\n#&gt;  $ axis.ticks.length.y       : NULL\n#&gt;  $ axis.ticks.length.y.left  : NULL\n#&gt;  $ axis.ticks.length.y.right : NULL\n#&gt;  $ axis.line                 : list()\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n#&gt;  $ axis.line.x               : NULL\n#&gt;  $ axis.line.x.top           : NULL\n#&gt;  $ axis.line.x.bottom        : NULL\n#&gt;  $ axis.line.y               : NULL\n#&gt;  $ axis.line.y.left          : NULL\n#&gt;  $ axis.line.y.right         : NULL\n#&gt;  $ legend.background         : list()\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n#&gt;  $ legend.margin             : 'margin' num [1:4] 5.5points 5.5points 5.5points 5.5points\n#&gt;   ..- attr(*, \"unit\")= int 8\n#&gt;  $ legend.spacing            : 'simpleUnit' num 11points\n#&gt;   ..- attr(*, \"unit\")= int 8\n#&gt;  $ legend.spacing.x          : NULL\n#&gt;  $ legend.spacing.y          : NULL\n#&gt;  $ legend.key                : list()\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n#&gt;  $ legend.key.size           : 'simpleUnit' num 1.2lines\n#&gt;   ..- attr(*, \"unit\")= int 3\n#&gt;  $ legend.key.height         : NULL\n#&gt;  $ legend.key.width          : NULL\n#&gt;  $ legend.text               :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : NULL\n#&gt;   ..$ size         : 'rel' num 0.8\n#&gt;   ..$ hjust        : NULL\n#&gt;   ..$ vjust        : NULL\n#&gt;   ..$ angle        : NULL\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : NULL\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ legend.text.align         : NULL\n#&gt;  $ legend.title              :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : NULL\n#&gt;   ..$ size         : NULL\n#&gt;   ..$ hjust        : num 0\n#&gt;   ..$ vjust        : NULL\n#&gt;   ..$ angle        : NULL\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : NULL\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ legend.title.align        : NULL\n#&gt;  $ legend.position           : chr \"right\"\n#&gt;  $ legend.direction          : NULL\n#&gt;  $ legend.justification      : chr \"center\"\n#&gt;  $ legend.box                : NULL\n#&gt;  $ legend.box.just           : NULL\n#&gt;  $ legend.box.margin         : 'margin' num [1:4] 0cm 0cm 0cm 0cm\n#&gt;   ..- attr(*, \"unit\")= int 1\n#&gt;  $ legend.box.background     : list()\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n#&gt;  $ legend.box.spacing        : 'simpleUnit' num 11points\n#&gt;   ..- attr(*, \"unit\")= int 8\n#&gt;  $ panel.background          : list()\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n#&gt;  $ panel.border              : list()\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n#&gt;  $ panel.spacing             : 'simpleUnit' num 5.5points\n#&gt;   ..- attr(*, \"unit\")= int 8\n#&gt;  $ panel.spacing.x           : NULL\n#&gt;  $ panel.spacing.y           : NULL\n#&gt;  $ panel.grid                :List of 6\n#&gt;   ..$ colour       : chr \"grey92\"\n#&gt;   ..$ linewidth    : NULL\n#&gt;   ..$ linetype     : NULL\n#&gt;   ..$ lineend      : NULL\n#&gt;   ..$ arrow        : logi FALSE\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n#&gt;  $ panel.grid.major          : NULL\n#&gt;  $ panel.grid.minor          :List of 6\n#&gt;   ..$ colour       : NULL\n#&gt;   ..$ linewidth    : 'rel' num 0.5\n#&gt;   ..$ linetype     : NULL\n#&gt;   ..$ lineend      : NULL\n#&gt;   ..$ arrow        : logi FALSE\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n#&gt;  $ panel.grid.major.x        : list()\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n#&gt;  $ panel.grid.major.y        : list()\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n#&gt;  $ panel.grid.minor.x        : NULL\n#&gt;  $ panel.grid.minor.y        : NULL\n#&gt;  $ panel.ontop               : logi FALSE\n#&gt;  $ plot.background           : list()\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n#&gt;  $ plot.title                :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : NULL\n#&gt;   ..$ size         : 'rel' num 1.2\n#&gt;   ..$ hjust        : num 0\n#&gt;   ..$ vjust        : num 1\n#&gt;   ..$ angle        : NULL\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : 'margin' num [1:4] 0points 0points 5.5points 0points\n#&gt;   .. ..- attr(*, \"unit\")= int 8\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ plot.title.position       : chr \"panel\"\n#&gt;  $ plot.subtitle             :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : NULL\n#&gt;   ..$ size         : NULL\n#&gt;   ..$ hjust        : num 0\n#&gt;   ..$ vjust        : num 1\n#&gt;   ..$ angle        : NULL\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : 'margin' num [1:4] 0points 0points 5.5points 0points\n#&gt;   .. ..- attr(*, \"unit\")= int 8\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ plot.caption              :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : NULL\n#&gt;   ..$ size         : 'rel' num 0.8\n#&gt;   ..$ hjust        : num 1\n#&gt;   ..$ vjust        : num 1\n#&gt;   ..$ angle        : NULL\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : 'margin' num [1:4] 5.5points 0points 0points 0points\n#&gt;   .. ..- attr(*, \"unit\")= int 8\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ plot.caption.position     : chr \"panel\"\n#&gt;  $ plot.tag                  :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : NULL\n#&gt;   ..$ size         : 'rel' num 1.2\n#&gt;   ..$ hjust        : num 0.5\n#&gt;   ..$ vjust        : num 0.5\n#&gt;   ..$ angle        : NULL\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : NULL\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ plot.tag.position         : chr \"topleft\"\n#&gt;  $ plot.margin               : 'margin' num [1:4] 5.5points 5.5points 5.5points 5.5points\n#&gt;   ..- attr(*, \"unit\")= int 8\n#&gt;  $ strip.background          : list()\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n#&gt;  $ strip.background.x        : NULL\n#&gt;  $ strip.background.y        : NULL\n#&gt;  $ strip.clip                : chr \"inherit\"\n#&gt;  $ strip.placement           : chr \"inside\"\n#&gt;  $ strip.text                :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : chr \"grey10\"\n#&gt;   ..$ size         : 'rel' num 0.8\n#&gt;   ..$ hjust        : NULL\n#&gt;   ..$ vjust        : NULL\n#&gt;   ..$ angle        : NULL\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : 'margin' num [1:4] 4.4points 4.4points 4.4points 4.4points\n#&gt;   .. ..- attr(*, \"unit\")= int 8\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ strip.text.x              : NULL\n#&gt;  $ strip.text.x.bottom       : NULL\n#&gt;  $ strip.text.x.top          : NULL\n#&gt;  $ strip.text.y              :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : NULL\n#&gt;   ..$ size         : NULL\n#&gt;   ..$ hjust        : NULL\n#&gt;   ..$ vjust        : NULL\n#&gt;   ..$ angle        : num -90\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : NULL\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ strip.text.y.left         :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : NULL\n#&gt;   ..$ size         : NULL\n#&gt;   ..$ hjust        : NULL\n#&gt;   ..$ vjust        : NULL\n#&gt;   ..$ angle        : num 90\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : NULL\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ strip.text.y.right        : NULL\n#&gt;  $ strip.switch.pad.grid     : 'simpleUnit' num 2.75points\n#&gt;   ..- attr(*, \"unit\")= int 8\n#&gt;  $ strip.switch.pad.wrap     : 'simpleUnit' num 2.75points\n#&gt;   ..- attr(*, \"unit\")= int 8\n#&gt;  - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n#&gt;  - attr(*, \"complete\")= logi TRUE\n#&gt;  - attr(*, \"validate\")= logi TRUE\n\n\n\n\n\n\n# Treemap\nbridges_sum %&gt;% with(interaction(ERECTED, MATERIAL)) %&gt;% levels()\n#&gt;  [1] \"CRAFTS.WOOD\"    \"EMERGING.WOOD\"  \"MATURE.WOOD\"    \"MODERN.WOOD\"   \n#&gt;  [5] \"CRAFTS.STEEL\"   \"EMERGING.STEEL\" \"MATURE.STEEL\"   \"MODERN.STEEL\"  \n#&gt;  [9] \"CRAFTS.IRON\"    \"EMERGING.IRON\"  \"MATURE.IRON\"    \"MODERN.IRON\"\n\nfill_cols &lt;- c('#FFEEEBD0', '#FFBBA9D0', '#FF834AD0', '#D55E00D0', \n               '#E7F0FFD0', '#94C6FFD0', '#579BDBD0', '#0072B2D0', \n               '#C6FFE5D0', '#76E3B8D0', '#4BC095D0', '#009E73D0')\n\nbridges_sum %&gt;%\n  ggplot(aes(area = count, subgroup = MATERIAL,\n             fill = interaction(ERECTED, MATERIAL))) +\n  geom_treemap(color = 'white', size = 0.5 * .pt, alpha = NA) +\n  geom_treemap_subgroup_text(colour = 'grey50', place = 'center',\n                             alpha = 0.7, grow = T) +\n  geom_treemap_subgroup_border(color = 'white') +\n  geom_treemap_text(aes(label = ERECTED, color = interaction(ERECTED, MATERIAL)),\n                    color = 'black', place = 'center', grow = F) +\n  scale_fill_manual(values = fill_cols) +\n  guides(colour = 'none', fill = 'none')\n\n\n\n\n\n\n\n\n# Data\nUS_census &lt;- read.csv('./data/US_census.csv')\nUS_regions &lt;- read.csv('./data/US_regions.csv')\n\npopulation_df &lt;- left_join(US_census, US_regions) %&gt;%\n  group_by(region, division, state) %&gt;%\n  summarize(pop2000 = sum(pop2000, na.rm = TRUE),\n            pop2010 = sum(pop2010, na.rm = TRUE),\n            area = sum(area)) %&gt;%\n  ungroup() %&gt;%\n  mutate(state = factor(state, levels = state),\n         region = factor(region, levels = c('West', 'South', 'Midwest', 'Northeast')))\n#&gt; Joining with `by = join_by(state)`\n#&gt; `summarise()` has grouped output by 'region', 'division'. You can override\n#&gt; using the `.groups` argument.\n\n\n\n\n# Hues\nhues &lt;- c(50, 100, 250, 300) # brown, green, blue, purple\n\n# Minimum and Maximum population density\nminpop &lt;- min(population_df$pop2010)\nmaxpop &lt;- max(population_df$pop2010)\n\n# Turn pop density into color\npopulation_df_color &lt;- population_df %&gt;%\n  mutate(index = as.numeric(factor(region))) %&gt;%\n  group_by(index) %&gt;%\n  mutate(value = (pop2010 - minpop) / (maxpop - minpop),\n         fill = scales::gradient_n_pal(\n           colorspace::sequential_hcl(\n             6, h = hues[index], c = c(45, 20),\n             l = c(30, 80), power = .5))(1 - value))\n\n\n# Figure 11.5\npopulation_df_color %&gt;%\n  ggplot(aes(area = area, subgroup = region, fill = fill)) +\n  geom_treemap(color = 'white', size = 0.5 * .pt, alpha = NA) +\n  geom_treemap_subgroup_text(colour = 'white', place = 'center',\n                             alpha = 0.7, grow = T) +\n  geom_treemap_subgroup_border(color = 'white') +\n  geom_treemap_text(aes(label = state), color = 'black',\n                    place = 'center', grow = F) +\n  scale_fill_identity() +\n  guides(colour = 'none', fill = 'none')\n\n\n\n\n# Region Colors\ncol_n &lt;- population_df$region %&gt;% table()\n# population_df_color &lt;- population_df %&gt;%\n#   arrange(region, area %&gt;% desc()) %&gt;%\n#   mutate(value = (pop2010 - minpop) / (maxpop - minpop),\n#          fill = mapply(lighten, qualitative_hcl(length(col_n), palette = 'Dark 3'),\n#                        maaply(seq, -.2, .8, length = col_n)) %&gt;% unlist())\n\n\n\n\n\n\n\n\n\n\n\n\n# Data\nbridges_data &lt;- read.csv('./data/bridges_data.csv')\nbridges_data$x &lt;- factor(bridges_data$x, levels = c('material', 'length', 'erected', 'river'))\n\nggplot(bridges_data, aes(x, id = id, split = y, value = count)) +\n  geom_parallel_sets(aes(fill = material), alpha = 0.5, axis.width = 0.13) +\n  geom_parallel_sets_axes(axis.width = 0.1, fill = 'grey80', color = 'grey80') +\n  geom_parallel_sets_labels(color = 'black', size = 10 / .pt, angle = 90) +\n  scale_x_discrete(name = NULL, expand = c(0, 0.2)) +\n  scale_y_continuous(breaks = NULL, expand = c(0, 0)) +\n  scale_fill_manual(values = c(iron = '#D55E00D0', wood = '#009E73D0', steel = '#0072B2D0'),\n                    guide = 'none') + \n  theme_minimal() +\n  theme(panel.grid.major.x = element_blank(),\n        axis.line = element_blank(),\n        axis.ticks = element_blank(),\n        plot.margin = margin(14, 1.5, 2, 1.5))"
  },
  {
    "objectID": "Data_Visualization/week13_Visualizing_Nested_Proportions.html#mosaic-plots-and-treemaps---모자이크와-트리맵",
    "href": "Data_Visualization/week13_Visualizing_Nested_Proportions.html#mosaic-plots-and-treemaps---모자이크와-트리맵",
    "title": "Visualizing Nested Proportions",
    "section": "",
    "text": "# Data\nbridges &lt;- read.csv('./data/bridges.csv')\nbridges %&gt;% sapply(class)\n#&gt;     IDENTIF       RIVER    LOCATION     ERECTED     PURPOSE      LENGTH \n#&gt; \"character\" \"character\"   \"numeric\" \"character\" \"character\" \"character\" \n#&gt;       LANES     CLEAR.G      T.OR.D    MATERIAL        SPAN       REL.L \n#&gt;   \"integer\" \"character\" \"character\" \"character\" \"character\" \"character\" \n#&gt;        TYPE \n#&gt; \"character\"\nbridges %&gt;% head()\n#&gt;   IDENTIF RIVER LOCATION ERECTED  PURPOSE LENGTH LANES CLEAR.G  T.OR.D MATERIAL\n#&gt; 1      E1     M        3  CRAFTS  HIGHWAY   &lt;NA&gt;     2       N THROUGH     WOOD\n#&gt; 2      E2     A       25  CRAFTS  HIGHWAY MEDIUM     2       N THROUGH     WOOD\n#&gt; 3      E3     A       39  CRAFTS AQUEDUCT   &lt;NA&gt;     1       N THROUGH     WOOD\n#&gt; 4      E5     A       29  CRAFTS  HIGHWAY MEDIUM     2       N THROUGH     WOOD\n#&gt; 5      E6     M       23  CRAFTS  HIGHWAY   &lt;NA&gt;     2       N THROUGH     WOOD\n#&gt; 6      E7     A       27  CRAFTS  HIGHWAY  SHORT     2       N THROUGH     WOOD\n#&gt;     SPAN REL.L TYPE\n#&gt; 1  SHORT     S WOOD\n#&gt; 2  SHORT     S WOOD\n#&gt; 3   &lt;NA&gt;     S WOOD\n#&gt; 4  SHORT     S WOOD\n#&gt; 5   &lt;NA&gt;     S WOOD\n#&gt; 6 MEDIUM     S WOOD\n\n# 재료(MATERIAL) -&gt; factor()\nbridges &lt;- bridges %&gt;%\n  mutate(MATERIAL = factor(MATERIAL, levels = c('WOOD', 'STEEL', 'IRON')))\n\n\n# Figure 11.3 - 기본(원자료)\nbridges %&gt;%\n  ggplot() +\n  geom_mosaic(aes(x = product(MATERIAL, ERECTED), fill = MATERIAL),\n              offset = 0, color = 'white')\n#&gt; Warning: `unite_()` was deprecated in tidyr 1.2.0.\n#&gt; ℹ Please use `unite()` instead.\n#&gt; ℹ The deprecated feature was likely used in the ggmosaic package.\n#&gt;   Please report the issue at &lt;https://github.com/haleyjeppson/ggmosaic&gt;.\n\n\n\n\n# Figure 11.3 - 기본(원자료) + 텍스트\nbridges %&gt;%\n  ggplot() +\n  geom_mosaic(aes(x = product(MATERIAL, ERECTED), fill = MATERIAL),\n              offset = 0, color = 'white') +\n  geom_mosaic_text(aes(x = product(MATERIAL, ERECTED), fill = MATERIAL))\n\n\n\n\n# Figure 11.3 - 기본(원자료) + 숫자\nbridges %&gt;%\n  ggplot() +\n  geom_mosaic(aes(x = product(MATERIAL, ERECTED), fill = MATERIAL),\n              offset = 0, color = 'white') +\n  geom_text(data = layer_data() %&gt;% filter(.wt &gt; 0),\n            aes(x = (xmin + xmax) / 2,\n                y = (ymin + ymax) / 2, label = .wt), color = 'white')\n\n\n\n\n# Figure 11.3 - 원자료\nbridges %&gt;%\n  ggplot() +\n  geom_mosaic(aes(x = product(MATERIAL, ERECTED), fill = MATERIAL),\n              offset = 0, color = 'white') +\n  geom_text(data = layer_data() %&gt;% filter(.wt &gt; 0),\n            aes(x = (xmin + xmax) / 2,\n                y = (ymin + ymax) / 2, label = .wt), color = 'white') +\n  scale_y_productlist(name = '', expand = c(0, 0), breaks = NULL) +\n  scale_x_productlist(name = '', expand = c(0, 0)) +\n  theme_minimal() +\n  theme(panel.grid.major.x = element_blank(),\n        panel.grid.major.y = element_blank())\n\n\n\n\n\n\n\n# (1) group_by & summarise\nbridges_sum &lt;- bridges %&gt;%\n  filter(!is.na(MATERIAL)) %&gt;%\n  group_by(MATERIAL, ERECTED) %&gt;%\n  summarise(count = n())\n#&gt; `summarise()` has grouped output by 'MATERIAL'. You can override using the\n#&gt; `.groups` argument.\n\n# (2) table & melt\nbridges_sum &lt;- select(bridges, MATERIAL, ERECTED) %&gt;%\n  table() %&gt;%\n  reshape2::melt(value.name = 'count')\n\n# Figure 11.3 - 기본\nbridges_sum %&gt;%\n  ggplot() +\n  geom_mosaic(aes(x = product(MATERIAL, ERECTED), fill = MATERIAL),\n              offset = 0, color = 'white')\n\n\n\n\n# Figure 11.3\nbridges_sum %&gt;%\n  ggplot() +\n  geom_mosaic(aes(x = product(MATERIAL, ERECTED), \n                  weight = count, fill = MATERIAL),\n              offset = 0, color = 'white') +\n  geom_text(data = layer_data() %&gt;% filter(.wt &gt; 0),\n            aes(x = (xmin + xmax) / 2,\n                y = (ymin + ymax) / 2, label = .wt), color = 'white') +\n  scale_y_productlist(name = '', expand = c(0, 0), breaks = NULL) +\n  scale_x_productlist(name = '', expand = c(0, 0)) +\n  scale_fill_manual(name = '', values = c('#D55E00D0', '#0072B2D0', '#009E73D0'))\n\n\n\n  theme_minimal() +\n  theme(panel.grid.major.x = element_blank(),\n        panel.grid.major.y = element_blank())\n#&gt; List of 97\n#&gt;  $ line                      :List of 6\n#&gt;   ..$ colour       : chr \"black\"\n#&gt;   ..$ linewidth    : num 0.5\n#&gt;   ..$ linetype     : num 1\n#&gt;   ..$ lineend      : chr \"butt\"\n#&gt;   ..$ arrow        : logi FALSE\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n#&gt;  $ rect                      :List of 5\n#&gt;   ..$ fill         : chr \"white\"\n#&gt;   ..$ colour       : chr \"black\"\n#&gt;   ..$ linewidth    : num 0.5\n#&gt;   ..$ linetype     : num 1\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n#&gt;  $ text                      :List of 11\n#&gt;   ..$ family       : chr \"\"\n#&gt;   ..$ face         : chr \"plain\"\n#&gt;   ..$ colour       : chr \"black\"\n#&gt;   ..$ size         : num 11\n#&gt;   ..$ hjust        : num 0.5\n#&gt;   ..$ vjust        : num 0.5\n#&gt;   ..$ angle        : num 0\n#&gt;   ..$ lineheight   : num 0.9\n#&gt;   ..$ margin       : 'margin' num [1:4] 0points 0points 0points 0points\n#&gt;   .. ..- attr(*, \"unit\")= int 8\n#&gt;   ..$ debug        : logi FALSE\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ title                     : NULL\n#&gt;  $ aspect.ratio              : NULL\n#&gt;  $ axis.title                : NULL\n#&gt;  $ axis.title.x              :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : NULL\n#&gt;   ..$ size         : NULL\n#&gt;   ..$ hjust        : NULL\n#&gt;   ..$ vjust        : num 1\n#&gt;   ..$ angle        : NULL\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : 'margin' num [1:4] 2.75points 0points 0points 0points\n#&gt;   .. ..- attr(*, \"unit\")= int 8\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ axis.title.x.top          :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : NULL\n#&gt;   ..$ size         : NULL\n#&gt;   ..$ hjust        : NULL\n#&gt;   ..$ vjust        : num 0\n#&gt;   ..$ angle        : NULL\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : 'margin' num [1:4] 0points 0points 2.75points 0points\n#&gt;   .. ..- attr(*, \"unit\")= int 8\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ axis.title.x.bottom       : NULL\n#&gt;  $ axis.title.y              :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : NULL\n#&gt;   ..$ size         : NULL\n#&gt;   ..$ hjust        : NULL\n#&gt;   ..$ vjust        : num 1\n#&gt;   ..$ angle        : num 90\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : 'margin' num [1:4] 0points 2.75points 0points 0points\n#&gt;   .. ..- attr(*, \"unit\")= int 8\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ axis.title.y.left         : NULL\n#&gt;  $ axis.title.y.right        :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : NULL\n#&gt;   ..$ size         : NULL\n#&gt;   ..$ hjust        : NULL\n#&gt;   ..$ vjust        : num 0\n#&gt;   ..$ angle        : num -90\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.75points\n#&gt;   .. ..- attr(*, \"unit\")= int 8\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ axis.text                 :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : chr \"grey30\"\n#&gt;   ..$ size         : 'rel' num 0.8\n#&gt;   ..$ hjust        : NULL\n#&gt;   ..$ vjust        : NULL\n#&gt;   ..$ angle        : NULL\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : NULL\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ axis.text.x               :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : NULL\n#&gt;   ..$ size         : NULL\n#&gt;   ..$ hjust        : NULL\n#&gt;   ..$ vjust        : num 1\n#&gt;   ..$ angle        : NULL\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : 'margin' num [1:4] 2.2points 0points 0points 0points\n#&gt;   .. ..- attr(*, \"unit\")= int 8\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ axis.text.x.top           :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : NULL\n#&gt;   ..$ size         : NULL\n#&gt;   ..$ hjust        : NULL\n#&gt;   ..$ vjust        : num 0\n#&gt;   ..$ angle        : NULL\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : 'margin' num [1:4] 0points 0points 2.2points 0points\n#&gt;   .. ..- attr(*, \"unit\")= int 8\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ axis.text.x.bottom        : NULL\n#&gt;  $ axis.text.y               :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : NULL\n#&gt;   ..$ size         : NULL\n#&gt;   ..$ hjust        : num 1\n#&gt;   ..$ vjust        : NULL\n#&gt;   ..$ angle        : NULL\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : 'margin' num [1:4] 0points 2.2points 0points 0points\n#&gt;   .. ..- attr(*, \"unit\")= int 8\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ axis.text.y.left          : NULL\n#&gt;  $ axis.text.y.right         :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : NULL\n#&gt;   ..$ size         : NULL\n#&gt;   ..$ hjust        : num 0\n#&gt;   ..$ vjust        : NULL\n#&gt;   ..$ angle        : NULL\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.2points\n#&gt;   .. ..- attr(*, \"unit\")= int 8\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ axis.ticks                : list()\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n#&gt;  $ axis.ticks.x              : NULL\n#&gt;  $ axis.ticks.x.top          : NULL\n#&gt;  $ axis.ticks.x.bottom       : NULL\n#&gt;  $ axis.ticks.y              : NULL\n#&gt;  $ axis.ticks.y.left         : NULL\n#&gt;  $ axis.ticks.y.right        : NULL\n#&gt;  $ axis.ticks.length         : 'simpleUnit' num 2.75points\n#&gt;   ..- attr(*, \"unit\")= int 8\n#&gt;  $ axis.ticks.length.x       : NULL\n#&gt;  $ axis.ticks.length.x.top   : NULL\n#&gt;  $ axis.ticks.length.x.bottom: NULL\n#&gt;  $ axis.ticks.length.y       : NULL\n#&gt;  $ axis.ticks.length.y.left  : NULL\n#&gt;  $ axis.ticks.length.y.right : NULL\n#&gt;  $ axis.line                 : list()\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n#&gt;  $ axis.line.x               : NULL\n#&gt;  $ axis.line.x.top           : NULL\n#&gt;  $ axis.line.x.bottom        : NULL\n#&gt;  $ axis.line.y               : NULL\n#&gt;  $ axis.line.y.left          : NULL\n#&gt;  $ axis.line.y.right         : NULL\n#&gt;  $ legend.background         : list()\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n#&gt;  $ legend.margin             : 'margin' num [1:4] 5.5points 5.5points 5.5points 5.5points\n#&gt;   ..- attr(*, \"unit\")= int 8\n#&gt;  $ legend.spacing            : 'simpleUnit' num 11points\n#&gt;   ..- attr(*, \"unit\")= int 8\n#&gt;  $ legend.spacing.x          : NULL\n#&gt;  $ legend.spacing.y          : NULL\n#&gt;  $ legend.key                : list()\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n#&gt;  $ legend.key.size           : 'simpleUnit' num 1.2lines\n#&gt;   ..- attr(*, \"unit\")= int 3\n#&gt;  $ legend.key.height         : NULL\n#&gt;  $ legend.key.width          : NULL\n#&gt;  $ legend.text               :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : NULL\n#&gt;   ..$ size         : 'rel' num 0.8\n#&gt;   ..$ hjust        : NULL\n#&gt;   ..$ vjust        : NULL\n#&gt;   ..$ angle        : NULL\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : NULL\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ legend.text.align         : NULL\n#&gt;  $ legend.title              :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : NULL\n#&gt;   ..$ size         : NULL\n#&gt;   ..$ hjust        : num 0\n#&gt;   ..$ vjust        : NULL\n#&gt;   ..$ angle        : NULL\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : NULL\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ legend.title.align        : NULL\n#&gt;  $ legend.position           : chr \"right\"\n#&gt;  $ legend.direction          : NULL\n#&gt;  $ legend.justification      : chr \"center\"\n#&gt;  $ legend.box                : NULL\n#&gt;  $ legend.box.just           : NULL\n#&gt;  $ legend.box.margin         : 'margin' num [1:4] 0cm 0cm 0cm 0cm\n#&gt;   ..- attr(*, \"unit\")= int 1\n#&gt;  $ legend.box.background     : list()\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n#&gt;  $ legend.box.spacing        : 'simpleUnit' num 11points\n#&gt;   ..- attr(*, \"unit\")= int 8\n#&gt;  $ panel.background          : list()\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n#&gt;  $ panel.border              : list()\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n#&gt;  $ panel.spacing             : 'simpleUnit' num 5.5points\n#&gt;   ..- attr(*, \"unit\")= int 8\n#&gt;  $ panel.spacing.x           : NULL\n#&gt;  $ panel.spacing.y           : NULL\n#&gt;  $ panel.grid                :List of 6\n#&gt;   ..$ colour       : chr \"grey92\"\n#&gt;   ..$ linewidth    : NULL\n#&gt;   ..$ linetype     : NULL\n#&gt;   ..$ lineend      : NULL\n#&gt;   ..$ arrow        : logi FALSE\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n#&gt;  $ panel.grid.major          : NULL\n#&gt;  $ panel.grid.minor          :List of 6\n#&gt;   ..$ colour       : NULL\n#&gt;   ..$ linewidth    : 'rel' num 0.5\n#&gt;   ..$ linetype     : NULL\n#&gt;   ..$ lineend      : NULL\n#&gt;   ..$ arrow        : logi FALSE\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n#&gt;  $ panel.grid.major.x        : list()\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n#&gt;  $ panel.grid.major.y        : list()\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n#&gt;  $ panel.grid.minor.x        : NULL\n#&gt;  $ panel.grid.minor.y        : NULL\n#&gt;  $ panel.ontop               : logi FALSE\n#&gt;  $ plot.background           : list()\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n#&gt;  $ plot.title                :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : NULL\n#&gt;   ..$ size         : 'rel' num 1.2\n#&gt;   ..$ hjust        : num 0\n#&gt;   ..$ vjust        : num 1\n#&gt;   ..$ angle        : NULL\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : 'margin' num [1:4] 0points 0points 5.5points 0points\n#&gt;   .. ..- attr(*, \"unit\")= int 8\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ plot.title.position       : chr \"panel\"\n#&gt;  $ plot.subtitle             :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : NULL\n#&gt;   ..$ size         : NULL\n#&gt;   ..$ hjust        : num 0\n#&gt;   ..$ vjust        : num 1\n#&gt;   ..$ angle        : NULL\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : 'margin' num [1:4] 0points 0points 5.5points 0points\n#&gt;   .. ..- attr(*, \"unit\")= int 8\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ plot.caption              :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : NULL\n#&gt;   ..$ size         : 'rel' num 0.8\n#&gt;   ..$ hjust        : num 1\n#&gt;   ..$ vjust        : num 1\n#&gt;   ..$ angle        : NULL\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : 'margin' num [1:4] 5.5points 0points 0points 0points\n#&gt;   .. ..- attr(*, \"unit\")= int 8\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ plot.caption.position     : chr \"panel\"\n#&gt;  $ plot.tag                  :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : NULL\n#&gt;   ..$ size         : 'rel' num 1.2\n#&gt;   ..$ hjust        : num 0.5\n#&gt;   ..$ vjust        : num 0.5\n#&gt;   ..$ angle        : NULL\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : NULL\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ plot.tag.position         : chr \"topleft\"\n#&gt;  $ plot.margin               : 'margin' num [1:4] 5.5points 5.5points 5.5points 5.5points\n#&gt;   ..- attr(*, \"unit\")= int 8\n#&gt;  $ strip.background          : list()\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n#&gt;  $ strip.background.x        : NULL\n#&gt;  $ strip.background.y        : NULL\n#&gt;  $ strip.clip                : chr \"inherit\"\n#&gt;  $ strip.placement           : chr \"inside\"\n#&gt;  $ strip.text                :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : chr \"grey10\"\n#&gt;   ..$ size         : 'rel' num 0.8\n#&gt;   ..$ hjust        : NULL\n#&gt;   ..$ vjust        : NULL\n#&gt;   ..$ angle        : NULL\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : 'margin' num [1:4] 4.4points 4.4points 4.4points 4.4points\n#&gt;   .. ..- attr(*, \"unit\")= int 8\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ strip.text.x              : NULL\n#&gt;  $ strip.text.x.bottom       : NULL\n#&gt;  $ strip.text.x.top          : NULL\n#&gt;  $ strip.text.y              :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : NULL\n#&gt;   ..$ size         : NULL\n#&gt;   ..$ hjust        : NULL\n#&gt;   ..$ vjust        : NULL\n#&gt;   ..$ angle        : num -90\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : NULL\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ strip.text.y.left         :List of 11\n#&gt;   ..$ family       : NULL\n#&gt;   ..$ face         : NULL\n#&gt;   ..$ colour       : NULL\n#&gt;   ..$ size         : NULL\n#&gt;   ..$ hjust        : NULL\n#&gt;   ..$ vjust        : NULL\n#&gt;   ..$ angle        : num 90\n#&gt;   ..$ lineheight   : NULL\n#&gt;   ..$ margin       : NULL\n#&gt;   ..$ debug        : NULL\n#&gt;   ..$ inherit.blank: logi TRUE\n#&gt;   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n#&gt;  $ strip.text.y.right        : NULL\n#&gt;  $ strip.switch.pad.grid     : 'simpleUnit' num 2.75points\n#&gt;   ..- attr(*, \"unit\")= int 8\n#&gt;  $ strip.switch.pad.wrap     : 'simpleUnit' num 2.75points\n#&gt;   ..- attr(*, \"unit\")= int 8\n#&gt;  - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n#&gt;  - attr(*, \"complete\")= logi TRUE\n#&gt;  - attr(*, \"validate\")= logi TRUE\n\n\n\n\n\n\n# Treemap\nbridges_sum %&gt;% with(interaction(ERECTED, MATERIAL)) %&gt;% levels()\n#&gt;  [1] \"CRAFTS.WOOD\"    \"EMERGING.WOOD\"  \"MATURE.WOOD\"    \"MODERN.WOOD\"   \n#&gt;  [5] \"CRAFTS.STEEL\"   \"EMERGING.STEEL\" \"MATURE.STEEL\"   \"MODERN.STEEL\"  \n#&gt;  [9] \"CRAFTS.IRON\"    \"EMERGING.IRON\"  \"MATURE.IRON\"    \"MODERN.IRON\"\n\nfill_cols &lt;- c('#FFEEEBD0', '#FFBBA9D0', '#FF834AD0', '#D55E00D0', \n               '#E7F0FFD0', '#94C6FFD0', '#579BDBD0', '#0072B2D0', \n               '#C6FFE5D0', '#76E3B8D0', '#4BC095D0', '#009E73D0')\n\nbridges_sum %&gt;%\n  ggplot(aes(area = count, subgroup = MATERIAL,\n             fill = interaction(ERECTED, MATERIAL))) +\n  geom_treemap(color = 'white', size = 0.5 * .pt, alpha = NA) +\n  geom_treemap_subgroup_text(colour = 'grey50', place = 'center',\n                             alpha = 0.7, grow = T) +\n  geom_treemap_subgroup_border(color = 'white') +\n  geom_treemap_text(aes(label = ERECTED, color = interaction(ERECTED, MATERIAL)),\n                    color = 'black', place = 'center', grow = F) +\n  scale_fill_manual(values = fill_cols) +\n  guides(colour = 'none', fill = 'none')\n\n\n\n\n\n\n\n\n# Data\nUS_census &lt;- read.csv('./data/US_census.csv')\nUS_regions &lt;- read.csv('./data/US_regions.csv')\n\npopulation_df &lt;- left_join(US_census, US_regions) %&gt;%\n  group_by(region, division, state) %&gt;%\n  summarize(pop2000 = sum(pop2000, na.rm = TRUE),\n            pop2010 = sum(pop2010, na.rm = TRUE),\n            area = sum(area)) %&gt;%\n  ungroup() %&gt;%\n  mutate(state = factor(state, levels = state),\n         region = factor(region, levels = c('West', 'South', 'Midwest', 'Northeast')))\n#&gt; Joining with `by = join_by(state)`\n#&gt; `summarise()` has grouped output by 'region', 'division'. You can override\n#&gt; using the `.groups` argument.\n\n\n\n\n# Hues\nhues &lt;- c(50, 100, 250, 300) # brown, green, blue, purple\n\n# Minimum and Maximum population density\nminpop &lt;- min(population_df$pop2010)\nmaxpop &lt;- max(population_df$pop2010)\n\n# Turn pop density into color\npopulation_df_color &lt;- population_df %&gt;%\n  mutate(index = as.numeric(factor(region))) %&gt;%\n  group_by(index) %&gt;%\n  mutate(value = (pop2010 - minpop) / (maxpop - minpop),\n         fill = scales::gradient_n_pal(\n           colorspace::sequential_hcl(\n             6, h = hues[index], c = c(45, 20),\n             l = c(30, 80), power = .5))(1 - value))\n\n\n# Figure 11.5\npopulation_df_color %&gt;%\n  ggplot(aes(area = area, subgroup = region, fill = fill)) +\n  geom_treemap(color = 'white', size = 0.5 * .pt, alpha = NA) +\n  geom_treemap_subgroup_text(colour = 'white', place = 'center',\n                             alpha = 0.7, grow = T) +\n  geom_treemap_subgroup_border(color = 'white') +\n  geom_treemap_text(aes(label = state), color = 'black',\n                    place = 'center', grow = F) +\n  scale_fill_identity() +\n  guides(colour = 'none', fill = 'none')\n\n\n\n\n# Region Colors\ncol_n &lt;- population_df$region %&gt;% table()\n# population_df_color &lt;- population_df %&gt;%\n#   arrange(region, area %&gt;% desc()) %&gt;%\n#   mutate(value = (pop2010 - minpop) / (maxpop - minpop),\n#          fill = mapply(lighten, qualitative_hcl(length(col_n), palette = 'Dark 3'),\n#                        maaply(seq, -.2, .8, length = col_n)) %&gt;% unlist())"
  },
  {
    "objectID": "Data_Visualization/week13_Visualizing_Nested_Proportions.html#parallel-set---평행-집합",
    "href": "Data_Visualization/week13_Visualizing_Nested_Proportions.html#parallel-set---평행-집합",
    "title": "Visualizing Nested Proportions",
    "section": "",
    "text": "# Data\nbridges_data &lt;- read.csv('./data/bridges_data.csv')\nbridges_data$x &lt;- factor(bridges_data$x, levels = c('material', 'length', 'erected', 'river'))\n\nggplot(bridges_data, aes(x, id = id, split = y, value = count)) +\n  geom_parallel_sets(aes(fill = material), alpha = 0.5, axis.width = 0.13) +\n  geom_parallel_sets_axes(axis.width = 0.1, fill = 'grey80', color = 'grey80') +\n  geom_parallel_sets_labels(color = 'black', size = 10 / .pt, angle = 90) +\n  scale_x_discrete(name = NULL, expand = c(0, 0.2)) +\n  scale_y_continuous(breaks = NULL, expand = c(0, 0)) +\n  scale_fill_manual(values = c(iron = '#D55E00D0', wood = '#009E73D0', steel = '#0072B2D0'),\n                    guide = 'none') + \n  theme_minimal() +\n  theme(panel.grid.major.x = element_blank(),\n        axis.line = element_blank(),\n        axis.ticks = element_blank(),\n        plot.margin = margin(14, 1.5, 2, 1.5))"
  },
  {
    "objectID": "Data_Visualization/week11_Distribution_Practice.html",
    "href": "Data_Visualization/week11_Distribution_Practice.html",
    "title": "Distribution Practice",
    "section": "",
    "text": "9. Visualizing many distributions at once : 여러 분포 상태의 결합 시각화\n\n# 기상청 자료\nair &lt;- read.csv('./data/OBS_ASOS_DD_20230322080932.csv', fileEncoding = 'CP949')\nair %&gt;% head()\n#&gt;   지점 지점명       일시 평균기온..C. 최저기온..C. 최고기온..C.\n#&gt; 1  108   서울 2022-01-01         -4.3        -10.2          2.3\n#&gt; 2  108   서울 2022-01-02         -1.3         -5.2          3.0\n#&gt; 3  108   서울 2022-01-03         -1.9         -8.0          2.5\n#&gt; 4  108   서울 2022-01-04         -2.5         -5.6          1.0\n#&gt; 5  108   서울 2022-01-05         -2.8         -7.8          1.9\n#&gt; 6  108   서울 2022-01-06         -2.2         -5.9          3.3\n\n# 자료형 확인\nsapply(air, class)\n#&gt;         지점       지점명         일시 평균기온..C. 최저기온..C. 최고기온..C. \n#&gt;    \"integer\"  \"character\"  \"character\"    \"numeric\"    \"numeric\"    \"numeric\"\n\n# 자료형 변환 & 월 변수 생성\nair$일시 &lt;- lubridate::ymd(air$일시)\nair$월 &lt;- lubridate::month(air$일시, label = T)\nair %&gt;% head()\n#&gt;   지점 지점명       일시 평균기온..C. 최저기온..C. 최고기온..C. 월\n#&gt; 1  108   서울 2022-01-01         -4.3        -10.2          2.3  1\n#&gt; 2  108   서울 2022-01-02         -1.3         -5.2          3.0  1\n#&gt; 3  108   서울 2022-01-03         -1.9         -8.0          2.5  1\n#&gt; 4  108   서울 2022-01-04         -2.5         -5.6          1.0  1\n#&gt; 5  108   서울 2022-01-05         -2.8         -7.8          1.9  1\n#&gt; 6  108   서울 2022-01-06         -2.2         -5.9          3.3  1\n\n\nFigure 9.3 - Boxplot\n\nair %&gt;% filter(지점명 == '대전') %&gt;%\n  ggplot(aes(x = 월, y = 평균기온..C.)) +\n  geom_boxplot(fill = 'grey90') +\n  xlab('월') +\n  ylab('평균 기온 (°C)') +\n  theme_classic() +\n  theme(plot.margin = margin(3, 7, 3, 1.5))\n\n\n\n\n\n\nFigure 9.5 - Violinplot\n\nair %&gt;% filter(지점명 == '대전') %&gt;%\n  ggplot(aes(x = 월, y = 평균기온..C.)) +\n  geom_violin(fill = 'grey90') +\n  xlab('Month') +\n  ylab('평균 기온 (°C)') +\n  theme_classic() +\n  theme(plot.margin = margin(3, 7, 3, 1.5))\n\n\n\n\n\n\nFigure 9.7 - Point Jitter\n\nair %&gt;% filter(지점명 == '대전') %&gt;%\n  ggplot(aes(x = 월, y = 평균기온..C.)) +\n  geom_point(position = position_jitter(width = .15, height = 0, seed = 320), size = 1) +\n  xlab('Month') +\n  ylab('평균 기온 (°C)') +\n  theme_classic() +\n  theme(plot.margin = margin(3, 7, 3, 1.5))\n\n\n\n\n\n\nFigure 9.8 - Violinplot + Point Jitter\n\nair %&gt;% filter(지점명 == '대전') %&gt;%\n  ggplot(aes(x = 월, y = 평균기온..C.)) +\n  geom_violin(color = 'transparent', fill = 'grey90') +\n  geom_point(position = position_jitter(width = .15, height = 0, seed = 320), size = 1) +\n  xlab('Month') +\n  ylab('평균 기온 (°C)') +\n  theme_classic() +\n  theme(plot.margin = margin(3, 7, 3, 1.5))\n\n\n\n\n\n\nFigure 9.9 - Denstiy Ridges\n\nair %&gt;% filter(지점명 == '대전') %&gt;%\n  ggplot(aes(x = 평균기온..C., y = fct_rev(월))) +\n  geom_density_ridges(scale = 3, rel_min_height = 0.01,\n                      bandwidth = 3.4, fill = 'skyblue', color = 'white') + \n  scale_x_continuous(name = '평균 기온 (°C)',\n                     expand = c(0, 0), breaks = seq(-10,30, 10)) +\n  scale_y_discrete(name = NULL) +\n  theme_minimal() +\n  theme(axis.text.y = element_text(vjust = 0),\n        plot.margin = margin(3, 7, 3, 1.5))\n\n\n\n\n\n\nFigure 9.12 - Group & Fill Cyclical\n\nair %&gt;% filter(지점명 %in% c('대전', '제주')) %&gt;%\n  ggplot(aes(x = 평균기온..C., y = fct_rev(월), \n         group = interaction(지점명, factor(월)),\n         fill = interaction(지점명, factor(월)))) + \n  geom_density_ridges(scale = 5, size = 0.25, rel_min_height = 0.01, \n                      alpha = 0.9, color = 'white') +\n  scale_x_continuous(name = '평균 기온 (°C)',\n                     limits = c(-15, 40),\n                     breaks = seq(-10, 30, 10)) +\n  scale_y_discrete(name = '월') +\n  scale_fill_cyclical(breaks = c('대전.1', '제주.1'),\n                      labels = c(`대전.1` = '대전', `제주.1` = '제주'),\n                      values = c('#4040ff', '#ff4040', '#6060ff', '#ff6060'),\n                      name = NULL, guide = 'legend') +\n  theme_light() +\n  theme(panel.border = element_blank(),\n        axis.text.y = element_text(vjust = 0),\n        legend.position = c(1, 1),\n        legend.justification = c(1, 1),\n        legend.direction = 'horizontal',\n        legend.background = element_rect(fill = 'white'))\n#&gt; Picking joint bandwidth of 1.18"
  },
  {
    "objectID": "Data_Visualization/week10_Many_Distribution.html",
    "href": "Data_Visualization/week10_Many_Distribution.html",
    "title": "Many Distribution",
    "section": "",
    "text": "# Data\ndata(lincoln_weather)\n\nlincoln_df &lt;- lincoln_weather %&gt;%\n  mutate(month_short = fct_recode(Month, Jan = 'January', Feb = 'February',\n                                  Mar = 'March', Apr = 'April', May = 'May',\n                                  Jun = 'June', Jul = 'July', Aug = 'August',\n                                  Sep = 'September', Oct = 'October',\n                                  Nov = 'November', Dec = 'December')) %&gt;%\n  mutate(month_short = fct_rev(month_short))\n\nggplot(lincoln_df, aes(x = month_short, y = `Mean Temperature [F]`)) +\n  geom_boxplot(fill = 'grey90') +\n  xlab('Month') +\n  ylab('Mean Temperature (°F)') +\n  theme_classic() +\n  theme(plot.margin = margin(3, 7, 3, 1.5))\n\n\n\n\n\n\n\n\nggplot(lincoln_df, aes(x = month_short, y = `Mean Temperature [F]`)) +\n  geom_violin(fill = 'grey90') +\n  xlab('Month') +\n  ylab('Mean Temperature (°F)') +\n  theme_classic() +\n  theme(plot.margin = margin(3, 7, 3, 1.5))\n\n\n\n\n\n\n\n\nggplot(lincoln_df, aes(x = month_short, y = `Mean Temperature [F]`)) +\n  geom_point(position = position_jitter(width = .15, height = 0, seed = 320), size = 1) +\n  xlab('Month') +\n  ylab('Mean Temperature (°F)') +\n  theme_classic() +\n  theme(plot.margin = margin(3, 7, 3, 1.5))\n\n\n\n\n\n\n\n\nggplot(lincoln_df, aes(x = month_short, y = `Mean Temperature [F]`)) +\n  geom_violin(color = 'transparent', fill = 'grey90') +\n  geom_point(position = position_jitter(width = .15, height = 0, seed = 320), size = 1) +\n  xlab('Month') +\n  ylab('Mean Temperature (°F)') +\n  theme_classic() +\n  theme(plot.margin = margin(3, 7, 3, 1.5))\n\n\n\n\n\n\n\n\n\n\n\nggplot(lincoln_df, aes(x = `Mean Temperature [F]`, y = `Month`)) +\n  geom_density_ridges(scale = 3, rel_min_height = 0.01,\n                      bandwidth = 3.4, fill = 'skyblue', color = 'white') + \n  scale_x_continuous(name = 'Mean Temperature (°F)',\n                     expand = c(0, 0), breaks = c(0, 25, 50, 75)) +\n  scale_y_discrete(name = NULL) +\n  theme_minimal() +\n  theme(axis.text.y = element_text(vjust = 0),\n        plot.margin = margin(3, 7, 3, 1.5))\n\n\n\n\n\n\n\n\nmovie_lengths &lt;- read.csv('./data/movie_lengths.csv')\n\nggplot(movie_lengths, aes(x = length, y = year, group = year)) +\n  geom_density_ridges (scale = 10, size = 0.25,\n                       rel_min_height = 0.03, fill = 'grey85', na.rm = TRUE) + \n  scale_x_continuous(limits = c(0, 200),\n                     expand = c(0, 0),\n                     name = 'Length (Minutes)') +\n  scale_y_reverse(breaks = c(2000, 1980, 1960, 1940, 1920),\n                  limits = c(2005, 1903), expand = c(0, 0)) + \n  theme_light() +\n  theme(panel.border = element_blank(),\n        plot.margin = margin (3, 14, 3, 1.5))\n#&gt; Picking joint bandwidth of 6.68\n\n\n\n\n\n\n\n\nall_house_88_113 &lt;- read.csv('./data/all_house_88_113.csv')\n\nggplot(all_house_88_113, aes(x = dim_1, y = year1,\n                             group = interaction(party_code, factor(year1)),\n                             fill = interaction(party_code, factor(year1)))) + \n  geom_density_ridges(scale = 5, size = 0.25, rel_min_height = 0.01, \n                      alpha = 0.9, color = 'white') +\n  scale_x_continuous(name = 'DW-NOMINATE score',\n                     limits = c(-.8, 1.3),\n                     breaks = seq(-1, 1, 0.25)) +\n  scale_y_reverse(name = 'Year', expand = c(0, 0),\n                  breaks = c(seq(2013, 1963, -10))) +\n  scale_fill_cyclical(breaks = c('100.1963', '200.1963'),\n                      labels = c(`100.1963` = 'Democrats ', `200.1963` = 'Republicans'),\n                      values = c('#4040ff', '#ff4040', '#6060ff', '#ff6060'),\n                      name = NULL, guide = 'legend') +\n  theme_light() +\n  theme(panel.border = element_blank(),\n        axis.text.y = element_text(vjust = 0),\n        legend.position = c(1, 1),\n        legend.justification = c(1, 1),\n        legend.direction = 'horizontal',\n        legend.background = element_rect(fill = 'white'))\n#&gt; Picking joint bandwidth of 0.0465\n#&gt; Warning: Removed 1 rows containing non-finite values (`stat_density_ridges()`)."
  },
  {
    "objectID": "Data_Visualization/week10_Many_Distribution.html#visualizing-distributions-along-the-vertical-axis-가로축에-기준을-둔-분포-상태의-시각화",
    "href": "Data_Visualization/week10_Many_Distribution.html#visualizing-distributions-along-the-vertical-axis-가로축에-기준을-둔-분포-상태의-시각화",
    "title": "Many Distribution",
    "section": "",
    "text": "# Data\ndata(lincoln_weather)\n\nlincoln_df &lt;- lincoln_weather %&gt;%\n  mutate(month_short = fct_recode(Month, Jan = 'January', Feb = 'February',\n                                  Mar = 'March', Apr = 'April', May = 'May',\n                                  Jun = 'June', Jul = 'July', Aug = 'August',\n                                  Sep = 'September', Oct = 'October',\n                                  Nov = 'November', Dec = 'December')) %&gt;%\n  mutate(month_short = fct_rev(month_short))\n\nggplot(lincoln_df, aes(x = month_short, y = `Mean Temperature [F]`)) +\n  geom_boxplot(fill = 'grey90') +\n  xlab('Month') +\n  ylab('Mean Temperature (°F)') +\n  theme_classic() +\n  theme(plot.margin = margin(3, 7, 3, 1.5))\n\n\n\n\n\n\n\n\nggplot(lincoln_df, aes(x = month_short, y = `Mean Temperature [F]`)) +\n  geom_violin(fill = 'grey90') +\n  xlab('Month') +\n  ylab('Mean Temperature (°F)') +\n  theme_classic() +\n  theme(plot.margin = margin(3, 7, 3, 1.5))\n\n\n\n\n\n\n\n\nggplot(lincoln_df, aes(x = month_short, y = `Mean Temperature [F]`)) +\n  geom_point(position = position_jitter(width = .15, height = 0, seed = 320), size = 1) +\n  xlab('Month') +\n  ylab('Mean Temperature (°F)') +\n  theme_classic() +\n  theme(plot.margin = margin(3, 7, 3, 1.5))\n\n\n\n\n\n\n\n\nggplot(lincoln_df, aes(x = month_short, y = `Mean Temperature [F]`)) +\n  geom_violin(color = 'transparent', fill = 'grey90') +\n  geom_point(position = position_jitter(width = .15, height = 0, seed = 320), size = 1) +\n  xlab('Month') +\n  ylab('Mean Temperature (°F)') +\n  theme_classic() +\n  theme(plot.margin = margin(3, 7, 3, 1.5))"
  },
  {
    "objectID": "Data_Visualization/week10_Many_Distribution.html#visualizing-distributions-along-the-horizontal-axis---세로축에-기준을-둔-분포-상태의-시각화",
    "href": "Data_Visualization/week10_Many_Distribution.html#visualizing-distributions-along-the-horizontal-axis---세로축에-기준을-둔-분포-상태의-시각화",
    "title": "Many Distribution",
    "section": "",
    "text": "ggplot(lincoln_df, aes(x = `Mean Temperature [F]`, y = `Month`)) +\n  geom_density_ridges(scale = 3, rel_min_height = 0.01,\n                      bandwidth = 3.4, fill = 'skyblue', color = 'white') + \n  scale_x_continuous(name = 'Mean Temperature (°F)',\n                     expand = c(0, 0), breaks = c(0, 25, 50, 75)) +\n  scale_y_discrete(name = NULL) +\n  theme_minimal() +\n  theme(axis.text.y = element_text(vjust = 0),\n        plot.margin = margin(3, 7, 3, 1.5))\n\n\n\n\n\n\n\n\nmovie_lengths &lt;- read.csv('./data/movie_lengths.csv')\n\nggplot(movie_lengths, aes(x = length, y = year, group = year)) +\n  geom_density_ridges (scale = 10, size = 0.25,\n                       rel_min_height = 0.03, fill = 'grey85', na.rm = TRUE) + \n  scale_x_continuous(limits = c(0, 200),\n                     expand = c(0, 0),\n                     name = 'Length (Minutes)') +\n  scale_y_reverse(breaks = c(2000, 1980, 1960, 1940, 1920),\n                  limits = c(2005, 1903), expand = c(0, 0)) + \n  theme_light() +\n  theme(panel.border = element_blank(),\n        plot.margin = margin (3, 14, 3, 1.5))\n#&gt; Picking joint bandwidth of 6.68\n\n\n\n\n\n\n\n\nall_house_88_113 &lt;- read.csv('./data/all_house_88_113.csv')\n\nggplot(all_house_88_113, aes(x = dim_1, y = year1,\n                             group = interaction(party_code, factor(year1)),\n                             fill = interaction(party_code, factor(year1)))) + \n  geom_density_ridges(scale = 5, size = 0.25, rel_min_height = 0.01, \n                      alpha = 0.9, color = 'white') +\n  scale_x_continuous(name = 'DW-NOMINATE score',\n                     limits = c(-.8, 1.3),\n                     breaks = seq(-1, 1, 0.25)) +\n  scale_y_reverse(name = 'Year', expand = c(0, 0),\n                  breaks = c(seq(2013, 1963, -10))) +\n  scale_fill_cyclical(breaks = c('100.1963', '200.1963'),\n                      labels = c(`100.1963` = 'Democrats ', `200.1963` = 'Republicans'),\n                      values = c('#4040ff', '#ff4040', '#6060ff', '#ff6060'),\n                      name = NULL, guide = 'legend') +\n  theme_light() +\n  theme(panel.border = element_blank(),\n        axis.text.y = element_text(vjust = 0),\n        legend.position = c(1, 1),\n        legend.justification = c(1, 1),\n        legend.direction = 'horizontal',\n        legend.background = element_rect(fill = 'white'))\n#&gt; Picking joint bandwidth of 0.0465\n#&gt; Warning: Removed 1 rows containing non-finite values (`stat_density_ridges()`)."
  },
  {
    "objectID": "Data_Mining.html",
    "href": "Data_Mining.html",
    "title": "Data Mining",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nUber Data를 활용한 분석\n\n\n\n\n\n\n\nPython\n\n\nCode\n\n\nh3\n\n\n\n\n\n\n\n\n\n\n\nMay 29, 2023\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\nPydeck 기본\n\n\n\n\n\n\n\nPython\n\n\nCode\n\n\nPydeck\n\n\n\n\n\n\n\n\n\n\n\nMay 22, 2023\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\nExercise1 : Your First Map\n\n\n\n\n\n\n\nPython\n\n\nCode\n\n\nGeopandas\n\n\n\n\n\n\n\n\n\n\n\nApr 29, 2023\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\nExercise2 : Coordinate Reference Systems\n\n\n\n\n\n\n\nPython\n\n\nCode\n\n\nGeopandas\n\n\n\n\n\n\n\n\n\n\n\nApr 29, 2023\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\nExercise3 : Interactive Maps\n\n\n\n\n\n\n\nPython\n\n\nCode\n\n\nGeopandas\n\n\n\n\n\n\n\n\n\n\n\nApr 29, 2023\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\nExercise4 : Manipulating Geospatial Data\n\n\n\n\n\n\n\nPython\n\n\nCode\n\n\nGeopandas\n\n\n\n\n\n\n\n\n\n\n\nApr 29, 2023\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\nExercise5 : Proximity Analysis\n\n\n\n\n\n\n\nPython\n\n\nCode\n\n\nGeopandas\n\n\n\n\n\n\n\n\n\n\n\nApr 29, 2023\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\nGeospatial Analysis\n\n\n\n\n\n\n\nPython\n\n\nCode\n\n\nGeopandas\n\n\n\n\n\n\n\n\n\n\n\nApr 29, 2023\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\nMatplotlib 기본\n\n\n\n\n\n\n\nPython\n\n\nCode\n\n\nMatplotlib\n\n\n\n\n\n\n\n\n\n\n\nApr 13, 2023\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\nSeaborn 기본\n\n\n\n\n\n\n\nPython\n\n\nCode\n\n\nSeaborn\n\n\n\n\n\n\n\n\n\n\n\nApr 13, 2023\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\nIncrease Loop Speed\n\n\n\n\n\n\n\nPython\n\n\nCode\n\n\nPandas\n\n\n\n\n\n\n\n\n\n\n\nApr 11, 2023\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\nPandas 기본\n\n\n\n\n\n\n\nPython\n\n\nCode\n\n\nPandas\n\n\n\n\n\n\n\n\n\n\n\nMar 24, 2023\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\nNumpy 기본\n\n\n\n\n\n\n\nPython\n\n\nCode\n\n\nNumpy\n\n\n\n\n\n\n\n\n\n\n\nMar 23, 2023\n\n\nJinwon Lee\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html",
    "href": "Data_Mining/pandas/pandas.html",
    "title": "Pandas 기본",
    "section": "",
    "text": "Pandas 실습\n도구 - 판다스(Pandas)\npandas 라이브러리는 사용하기 쉬운 고성능 데이터 구조와 데이터 분석 도구를 제공합니다. 주 데이터 구조는 DataFrame입니다. 이를 인-메모리(in-memory) 2D 테이블로 생각할 수 있습니다(열 이름과 행 레이블이 있는 스프레드시트와 비슷합니다). 엑셀에 있는 많은 기능을 프로그램에서 사용할 수 있습니다. 여기에는 피봇 테이블이나 다른 열을 기반으로 열을 계산하고 그래프 출력하는 기능 등이 포함됩니다. 열 값으로 행을 그룹핑할 수도 있습니다. 또한 SQL과 비슷하게 테이블을 조인할 수 있습니다. 판다스는 시계열 데이터를 다루는데도 뛰어납니다.\n필요 라이브러리:\n넘파이(NumPy) – 넘파이에 익숙하지 않다면 지금 넘파이 튜토리얼을 둘러 보세요."
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#series-만들기",
    "href": "Data_Mining/pandas/pandas.html#series-만들기",
    "title": "Pandas 기본",
    "section": "Series 만들기",
    "text": "Series 만들기\n첫 번째 Series 객체를 만들어 봅시다.\n\nnp.array([2, -1, 3, 5])\n\narray([ 2, -1,  3,  5])\n\n\n\ns = pd.Series([2, -1, 3, 5])\ns\n\n0    2\n1   -1\n2    3\n3    5\ndtype: int64"
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#d-ndarray와-비슷",
    "href": "Data_Mining/pandas/pandas.html#d-ndarray와-비슷",
    "title": "Pandas 기본",
    "section": "1D ndarray와 비슷",
    "text": "1D ndarray와 비슷\nSeries 객체는 넘파이 ndarray와 비슷하게 동작합니다. 넘파이 함수에 매개변수로 종종 전달할 수 있습니다.\n\nnp.exp(s)\n\n0      7.389056\n1      0.367879\n2     20.085537\n3    148.413159\ndtype: float64\n\n\nSeries 객체에 대한 산술 연산도 가능합니다. ndarray와 비슷하게 원소별로 적용됩니다.\n\ns + [1000, 2000, 3000, 4000]\n\n0    1002\n1    1999\n2    3003\n3    4005\ndtype: int64\n\n\n넘파이와 비슷하게 Series에 하나의 숫자를 더하면 Series에 있는 모든 원소에 더해집니다. 이를 브로드캐스팅(broadcasting)이라고 합니다.\n\ns\n\n0    2\n1   -1\n2    3\n3    5\ndtype: int64\n\n\n\ns + 1000\n\n0    1002\n1     999\n2    1003\n3    1005\ndtype: int64\n\n\n*나 / 같은 모든 이항 연산과 심지어 조건 연산에서도 마찬가지입니다.\n\ns &lt; 0\n\n0    False\n1     True\n2    False\n3    False\ndtype: bool"
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#인덱스-레이블",
    "href": "Data_Mining/pandas/pandas.html#인덱스-레이블",
    "title": "Pandas 기본",
    "section": "인덱스 레이블",
    "text": "인덱스 레이블\nSeries 객체에 있는 각 원소는 인덱스 레이블(index label)이라 불리는 고유한 식별자를 가지고 있습니다. 기본적으로 Series에 있는 원소의 순서입니다(0에서 시작합니다). 하지만 수동으로 인덱스 레이블을 지정할 수도 있습니다.\n\ns2 = pd.Series([68, 83, 112, 68], index=['alice', 'bob', 'charles', 'darwin'])\ns2\n\nalice       68\nbob         83\ncharles    112\ndarwin      68\ndtype: int64\n\n\n그다음 dict처럼 Series를 사용할 수 있습니다.\n\ns2['bob']\n\n83\n\n\n일반 배열처럼 정수 인덱스를 사용하여 계속 원소에 접근할 수 있습니다.\n\ns2[1]\n\n83\n\n\n레이블이나 정수를 사용해 접근할 때 명확하게 하기 위해 레이블은 loc 속성을 사용하고 정수는 iloc 속성을 사용하는 것이 좋습니다.\n\ns2.loc['bob']\n\n83\n\n\n\ns2.iloc[1]\n\n83\n\n\nSeries는 인덱스 레이블을 슬라이싱할 수도 있습니다.\n\ns2.iloc[1:3]\n\nbob         83\ncharles    112\ndtype: int64\n\n\n기본 정수 레이블을 사용할 때 예상 외의 결과를 만들 수 있기 때문에 주의해야 합니다.\n\nsurprise = pd.Series([1000, 1001, 1002, 1003])\nsurprise\n\n0    1000\n1    1001\n2    1002\n3    1003\ndtype: int64\n\n\n\nsurprise_slice = surprise[2:]\nsurprise_slice\n\n2    1002\n3    1003\ndtype: int64\n\n\n보세요. 첫 번째 원소의 인덱스 레이블이 2입니다. 따라서 슬라이싱 결과에서 인덱스 레이블 0인 원소는 없습니다.\n\ntry:\n    surprise_slice[0]\nexcept KeyError as e:\n    print('키 에러 : ', e)\n\n키 에러 :  0\n\n\n하지만 iloc 속성을 사용해 정수 인덱스로 원소에 접근할 수 있습니다. Series 객체를 사용할 때 loc와 iloc를 사용하는 것이 좋은 이유입니다.\n\nsurprise_slice.iloc[0]\n\n1002"
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#dict에서-초기화",
    "href": "Data_Mining/pandas/pandas.html#dict에서-초기화",
    "title": "Pandas 기본",
    "section": "dict에서 초기화",
    "text": "dict에서 초기화\ndict에서 Series 객체를 만들 수 있습니다. 키는 인덱스 레이블로 사용됩니다.\n\nweights = {'alice': 68, 'bob': 83, 'colin': 86, 'darwin': 68}\ns3 = pd.Series(weights)\ns3\n\nalice     68\nbob       83\ncolin     86\ndarwin    68\ndtype: int64\n\n\nSeries에 포함할 원소를 제어하고 index를 지정하여 명시적으로 순서를 결정할 수 있습니다.\n\ns4 = pd.Series(weights, index=['colin', 'alice'])\ns4\n\ncolin    86\nalice    68\ndtype: int64"
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#자동-정렬",
    "href": "Data_Mining/pandas/pandas.html#자동-정렬",
    "title": "Pandas 기본",
    "section": "자동 정렬",
    "text": "자동 정렬\n여러 개의 Series 객체를 다룰 때 pandas는 자동으로 인덱스 레이블에 따라 원소를 정렬합니다.\n\ns2\n\nalice       68\nbob         83\ncharles    112\ndarwin      68\ndtype: int64\n\n\n\ns3\n\nalice     68\nbob       83\ncolin     86\ndarwin    68\ndtype: int64\n\n\n\nprint(s2.keys())\nprint(s3.keys())\n\ns2 + s3\n\nIndex(['alice', 'bob', 'charles', 'darwin'], dtype='object')\nIndex(['alice', 'bob', 'colin', 'darwin'], dtype='object')\n\n\nalice      136.0\nbob        166.0\ncharles      NaN\ncolin        NaN\ndarwin     136.0\ndtype: float64\n\n\n만들어진 Series는 s2와 s3의 인덱스 레이블의 합집합을 담고 있습니다. s2에 'colin'이 없고 s3에 'charles'가 없기 때문에 이 원소는 NaN 값을 가집니다(Not-a-Number는 누락이란 의미입니다).\n자동 정렬은 구조가 다르고 누락된 값이 있는 여러 데이터를 다룰 때 매우 편리합니다. 하지만 올바른 인덱스 레이블을 지정하는 것을 잊는다면 원치않는 결과를 얻을 수 있습니다.\n\ns5 = pd.Series([1000, 1000, 1000, 1000])\nprint('s2 =', s2.values)\nprint('s5 =', s5.values)\n\ns2 + s5\n\ns2 = [ 68  83 112  68]\ns5 = [1000 1000 1000 1000]\n\n\nalice     NaN\nbob       NaN\ncharles   NaN\ndarwin    NaN\n0         NaN\n1         NaN\n2         NaN\n3         NaN\ndtype: float64\n\n\n레이블이 하나도 맞지 않기 때문에 판다스가 이 Series를 정렬할 수 없습니다. 따라서 모두 NaN이 되었습니다."
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#스칼라로-초기화",
    "href": "Data_Mining/pandas/pandas.html#스칼라로-초기화",
    "title": "Pandas 기본",
    "section": "스칼라로 초기화",
    "text": "스칼라로 초기화\n스칼라와 인덱스 레이블의 리스트로 Series 객체를 초기화할 수도 있습니다. 모든 원소가 이 스칼라 값으로 설정됩니다.\n\nmeaning = pd.Series(42, ['life', 'universe', 'everything'])\nmeaning\n\nlife          42\nuniverse      42\neverything    42\ndtype: int64"
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#series-이름",
    "href": "Data_Mining/pandas/pandas.html#series-이름",
    "title": "Pandas 기본",
    "section": "Series 이름",
    "text": "Series 이름\nSeries는 name을 가질 수 있습니다.\n\ns6 = pd.Series([83, 68], index=['bob', 'alice'], name='weights')\ns6\n\nbob      83\nalice    68\nName: weights, dtype: int64\n\n\n\ns6.name\n\n'weights'"
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#series-그래프-출력",
    "href": "Data_Mining/pandas/pandas.html#series-그래프-출력",
    "title": "Pandas 기본",
    "section": "Series 그래프 출력",
    "text": "Series 그래프 출력\n맷플롯립을 사용해 Series 데이터를 쉽게 그래프로 출력할 수 있습니다(맷플롯립에 대한 자세한 설명은 맷플롯립 튜토리얼을 참고하세요). 맷플롯립을 임포트하고 plot() 메서드를 호출하면 끝입니다.\n\n%matplotlib inline\ntemperatures = [4.4, 5.1, 6.1, 6.2, 6.1, 6.1, 5.7, 5.2, 4.7, 4.1, 3.9, 3.5]\ns7 = pd.Series(temperatures, name='Temperature')\ns7.plot()\nplt.show()\n\n\n\n\n데이터를 그래프로 출력하는데 많은 옵션이 있습니다. 여기에서 모두 나열할 필요는 없습니다. 특정 종류의 그래프(히스토그램, 파이 차트 등)가 필요하면 판다스 문서의 시각화 섹션에서 예제 코드를 참고하세요."
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#시간-범위",
    "href": "Data_Mining/pandas/pandas.html#시간-범위",
    "title": "Pandas 기본",
    "section": "시간 범위",
    "text": "시간 범위\n먼저 pd.date_range()를 사용해 시계열을 만들어 봅시다. 이 함수는 2016년 10월 29일 5:30pm에서 시작하여 12시간마다 하나의 datetime을 담고 있는 DatetimeIndex를 반환합니다.\n\ndates = pd.date_range('2016/10/29 5:30pm', periods=12, freq='H')\ndates\n\nDatetimeIndex(['2016-10-29 17:30:00', '2016-10-29 18:30:00',\n               '2016-10-29 19:30:00', '2016-10-29 20:30:00',\n               '2016-10-29 21:30:00', '2016-10-29 22:30:00',\n               '2016-10-29 23:30:00', '2016-10-30 00:30:00',\n               '2016-10-30 01:30:00', '2016-10-30 02:30:00',\n               '2016-10-30 03:30:00', '2016-10-30 04:30:00'],\n              dtype='datetime64[ns]', freq='H')\n\n\n\npd.date_range('2020-10-07', '2020-10-20', freq='3D')\n\nDatetimeIndex(['2020-10-07', '2020-10-10', '2020-10-13', '2020-10-16',\n               '2020-10-19'],\n              dtype='datetime64[ns]', freq='3D')\n\n\n이 DatetimeIndex를 Series의 인덱스로 사용할수 있습니다.\n\ntemp_series = pd.Series(temperatures, dates)\ntemp_series\n\n2016-10-29 17:30:00    4.4\n2016-10-29 18:30:00    5.1\n2016-10-29 19:30:00    6.1\n2016-10-29 20:30:00    6.2\n2016-10-29 21:30:00    6.1\n2016-10-29 22:30:00    6.1\n2016-10-29 23:30:00    5.7\n2016-10-30 00:30:00    5.2\n2016-10-30 01:30:00    4.7\n2016-10-30 02:30:00    4.1\n2016-10-30 03:30:00    3.9\n2016-10-30 04:30:00    3.5\nFreq: H, dtype: float64\n\n\n이 시리즈를 그래프로 출력해 봅시다.\n\ntemp_series.plot(kind='bar')\n\nplt.grid(True)\nplt.show()"
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#리샘플링",
    "href": "Data_Mining/pandas/pandas.html#리샘플링",
    "title": "Pandas 기본",
    "section": "리샘플링",
    "text": "리샘플링\n판다스는 매우 간단하게 시계열을 리샘플링할 수 있습니다. resample() 메서드를 호출하고 새로운 주기를 지정하면 됩니다.\n\ntemp_series_freq_2H = temp_series.resample('2H')\ntemp_series_freq_2H\n\n&lt;pandas.core.resample.DatetimeIndexResampler object at 0x0000020EC5F12770&gt;\n\n\n리샘플링 연산은 사실 지연된 연산입니다. (https://ko.wikipedia.org/wiki/%EB%8A%90%EA%B8%8B%ED%95%9C_%EA%B3%84%EC%82%B0%EB%B2%95) 그래서 Series 객체 대신 DatetimeIndexResampler 객체가 반환됩니다. 실제 리샘플링 연산을 수행하려면 mean() 같은 메서드를 호출할 수 있습니다. 이 메서드는 연속적인 시간 쌍에 대해 평균을 계산합니다.\n\ntemp_series_freq_2H = temp_series_freq_2H.mean()\n\n\ntemp_series_freq_2H\n\n2016-10-29 16:00:00    4.40\n2016-10-29 18:00:00    5.60\n2016-10-29 20:00:00    6.15\n2016-10-29 22:00:00    5.90\n2016-10-30 00:00:00    4.95\n2016-10-30 02:00:00    4.00\n2016-10-30 04:00:00    3.50\nFreq: 2H, dtype: float64\n\n\n결과를 그래프로 출력해 봅시다.\n\ntemp_series_freq_2H.plot(kind='bar')\nplt.show()\n\n\n\n\n2시간 간격으로 어떻게 값이 수집되었는지 확인해 보세요. 예를 들어 6-8pm 간격을 보면 6:30pm에서 5.1이고 7:30pm에서 6.1입니다. 리샘플링 후에 5.1과 6.1의 평균인 5.6 하나를 얻었습니다. 평균말고 어떤 집계 함수(aggregation function)도 사용할 수 있습니다. 예를 들어 각 기간에서 최솟값을 찾을 수 있습니다.\n\ntemp_series_freq_2H = temp_series.resample('2H').mean()\ntemp_series_freq_2H\n\n2016-10-29 16:00:00    4.40\n2016-10-29 18:00:00    5.60\n2016-10-29 20:00:00    6.15\n2016-10-29 22:00:00    5.90\n2016-10-30 00:00:00    4.95\n2016-10-30 02:00:00    4.00\n2016-10-30 04:00:00    3.50\nFreq: 2H, dtype: float64\n\n\n또는 동일한 효과를 내는 apply() 메서드를 사용할 수 있습니다.\n\ntemp_series_freq_2H = temp_series.resample('2H').apply(np.min)\ntemp_series_freq_2H\n\n2016-10-29 16:00:00    4.4\n2016-10-29 18:00:00    5.1\n2016-10-29 20:00:00    6.1\n2016-10-29 22:00:00    5.7\n2016-10-30 00:00:00    4.7\n2016-10-30 02:00:00    3.9\n2016-10-30 04:00:00    3.5\nFreq: 2H, dtype: float64"
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#업샘플링과-보간",
    "href": "Data_Mining/pandas/pandas.html#업샘플링과-보간",
    "title": "Pandas 기본",
    "section": "업샘플링과 보간",
    "text": "업샘플링과 보간\n다운샘플링의 예를 보았습니다. 하지만 업샘플링(즉, 빈도를 높입니다)도 할 수 있습니다. 하지만 데이터에 구멍을 만듭니다.\n\ntemp_series_freq_15min = temp_series.resample('15Min').mean()\ntemp_series_freq_15min.head(n=10)  # `head`는 상위 n 개의 값만 출력합니다\n\n2016-10-29 17:30:00    4.4\n2016-10-29 17:45:00    NaN\n2016-10-29 18:00:00    NaN\n2016-10-29 18:15:00    NaN\n2016-10-29 18:30:00    5.1\n2016-10-29 18:45:00    NaN\n2016-10-29 19:00:00    NaN\n2016-10-29 19:15:00    NaN\n2016-10-29 19:30:00    6.1\n2016-10-29 19:45:00    NaN\nFreq: 15T, dtype: float64\n\n\n한가지 방법은 보간으로 사이를 채우는 것입니다. 이렇게 하려면 interpolate() 메서드를 호출합니다. 기본값은 선형 보간이지만 3차 보간(cubic interpolation) 같은 다른 방법을 선택할 수 있습니다: https://bskyvision.com/789\n\ntemp_series_freq_15min = temp_series.resample(\n    '15Min').interpolate(method='cubic')\ntemp_series_freq_15min.head(n=10)\n\n2016-10-29 17:30:00    4.400000\n2016-10-29 17:45:00    4.452911\n2016-10-29 18:00:00    4.605113\n2016-10-29 18:15:00    4.829758\n2016-10-29 18:30:00    5.100000\n2016-10-29 18:45:00    5.388992\n2016-10-29 19:00:00    5.669887\n2016-10-29 19:15:00    5.915839\n2016-10-29 19:30:00    6.100000\n2016-10-29 19:45:00    6.203621\nFreq: 15T, dtype: float64\n\n\n\ntemp_series.plot(label='Period: 1 hour')\ntemp_series_freq_15min.plot(label='Period: 15 minutes')\nplt.legend()\nplt.show()"
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#시간대",
    "href": "Data_Mining/pandas/pandas.html#시간대",
    "title": "Pandas 기본",
    "section": "시간대",
    "text": "시간대\n기본적으로 datetime은 단순합니다. 시간대(timezone)을 고려하지 않죠. 따라서 2016-10-30 02:30는 파리나 뉴욕이나 2016년 10월 30일 2:30pm입니다. tz_localize() 메서드로 시간대를 고려한 datetime을 만들 수 있습니다. https://www.timeanddate.com/time/map/\n\ntemp_series\n\n2016-10-29 17:30:00    4.4\n2016-10-29 18:30:00    5.1\n2016-10-29 19:30:00    6.1\n2016-10-29 20:30:00    6.2\n2016-10-29 21:30:00    6.1\n2016-10-29 22:30:00    6.1\n2016-10-29 23:30:00    5.7\n2016-10-30 00:30:00    5.2\n2016-10-30 01:30:00    4.7\n2016-10-30 02:30:00    4.1\n2016-10-30 03:30:00    3.9\n2016-10-30 04:30:00    3.5\nFreq: H, dtype: float64\n\n\n\ntemp_series_ny = temp_series.tz_localize('America/New_York')\ntemp_series_ny\n\n2016-10-29 17:30:00-04:00    4.4\n2016-10-29 18:30:00-04:00    5.1\n2016-10-29 19:30:00-04:00    6.1\n2016-10-29 20:30:00-04:00    6.2\n2016-10-29 21:30:00-04:00    6.1\n2016-10-29 22:30:00-04:00    6.1\n2016-10-29 23:30:00-04:00    5.7\n2016-10-30 00:30:00-04:00    5.2\n2016-10-30 01:30:00-04:00    4.7\n2016-10-30 02:30:00-04:00    4.1\n2016-10-30 03:30:00-04:00    3.9\n2016-10-30 04:30:00-04:00    3.5\ndtype: float64\n\n\n모든 datetime에 -04:00이 추가됩니다. 즉 모든 시간은 UTC - 4시간을 의미합니다.\n다음처럼 파리 시간대로 바꿀 수 있습니다.\n\ntemp_series_paris = temp_series_ny.tz_convert('Europe/Paris')\ntemp_series_paris\n\n2016-10-29 23:30:00+02:00    4.4\n2016-10-30 00:30:00+02:00    5.1\n2016-10-30 01:30:00+02:00    6.1\n2016-10-30 02:30:00+02:00    6.2\n2016-10-30 02:30:00+01:00    6.1\n2016-10-30 03:30:00+01:00    6.1\n2016-10-30 04:30:00+01:00    5.7\n2016-10-30 05:30:00+01:00    5.2\n2016-10-30 06:30:00+01:00    4.7\n2016-10-30 07:30:00+01:00    4.1\n2016-10-30 08:30:00+01:00    3.9\n2016-10-30 09:30:00+01:00    3.5\ndtype: float64\n\n\nUTC와의 차이가 +02:00에서 +01:00으로 바뀐 것을 알 수 있습니다. 이는 프랑스가 10월 30일 3am에 겨울 시간으로 바꾸기 때문입니다(2am으로 바뀝니다). 따라서 2:30am이 두 번 등장합니다! 시간대가 없는 표현으로 돌아가봅시다.(시간대가 없이 지역 시간으로 매시간 로그를 기록하는 경우 이와 비슷할 것입니다.)\n\ntemp_series_paris_naive = temp_series_paris.tz_localize(None)\ntemp_series_paris_naive\n\n2016-10-29 23:30:00    4.4\n2016-10-30 00:30:00    5.1\n2016-10-30 01:30:00    6.1\n2016-10-30 02:30:00    6.2\n2016-10-30 02:30:00    6.1\n2016-10-30 03:30:00    6.1\n2016-10-30 04:30:00    5.7\n2016-10-30 05:30:00    5.2\n2016-10-30 06:30:00    4.7\n2016-10-30 07:30:00    4.1\n2016-10-30 08:30:00    3.9\n2016-10-30 09:30:00    3.5\ndtype: float64\n\n\n이렇게 되면 02:30이 정말 애매합니다. 시간대가 없는 datetime을 파리 시간대로 바꿀 때 에러가 발생합니다.\n\ntry:\n    temp_series_paris_naive.tz_localize('Europe/Paris')\nexcept Exception as e:\n    print(type(e))\n    print(e)\n\n&lt;class 'pytz.exceptions.AmbiguousTimeError'&gt;\nCannot infer dst time from 2016-10-30 02:30:00, try using the 'ambiguous' argument\n\n\n다행히 ambiguous 매개변수를 사용하면 판다스가 타임스탬프의 순서를 기반으로 적절한 DST(일광 절약 시간제)를 추측합니다:\nhttps://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=tori-tours&logNo=221221361831\n\ntemp_series_paris_naive.tz_localize('Europe/Paris', ambiguous='infer')\n\n2016-10-29 23:30:00+02:00    4.4\n2016-10-30 00:30:00+02:00    5.1\n2016-10-30 01:30:00+02:00    6.1\n2016-10-30 02:30:00+02:00    6.2\n2016-10-30 02:30:00+01:00    6.1\n2016-10-30 03:30:00+01:00    6.1\n2016-10-30 04:30:00+01:00    5.7\n2016-10-30 05:30:00+01:00    5.2\n2016-10-30 06:30:00+01:00    4.7\n2016-10-30 07:30:00+01:00    4.1\n2016-10-30 08:30:00+01:00    3.9\n2016-10-30 09:30:00+01:00    3.5\ndtype: float64"
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#기간",
    "href": "Data_Mining/pandas/pandas.html#기간",
    "title": "Pandas 기본",
    "section": "기간",
    "text": "기간\npd.period_range() 함수는 DatetimeIndex가 아니라 PeriodIndex를 반환합니다. 예를 들어 2016과 2017년의 전체 분기를 가져와 봅시다.\n\nquarters = pd.period_range('2016Q1', periods=8, freq='Q')\nquarters\n\nPeriodIndex(['2016Q1', '2016Q2', '2016Q3', '2016Q4', '2017Q1', '2017Q2',\n             '2017Q3', '2017Q4'],\n            dtype='period[Q-DEC]')\n\n\nPeriodIndex에 숫자 N을 추가하면 PeriodIndex 빈도의 N 배만큼 이동시킵니다.\n\nquarters + 3\n\nPeriodIndex(['2016Q4', '2017Q1', '2017Q2', '2017Q3', '2017Q4', '2018Q1',\n             '2018Q2', '2018Q3'],\n            dtype='period[Q-DEC]')\n\n\nasfreq() 메서드를 사용하면 PeriodIndex의 빈도를 바꿀 수 있습니다. 모든 기간이 늘어나거나 줄어듭니다. 예를 들어 분기 기간을 모두 월별 기간으로 바꾸어 봅시다.\n\nquarters.asfreq('M')\n\nPeriodIndex(['2016-03', '2016-06', '2016-09', '2016-12', '2017-03', '2017-06',\n             '2017-09', '2017-12'],\n            dtype='period[M]')\n\n\n\nquarters\n\nPeriodIndex(['2016Q1', '2016Q2', '2016Q3', '2016Q4', '2017Q1', '2017Q2',\n             '2017Q3', '2017Q4'],\n            dtype='period[Q-DEC]')\n\n\n기본적으로 asfreq는 각 기간의 끝에 맞춥니다. 기간의 시작에 맞추도록 변경할 수 있습니다.\n\nquarters.asfreq('M', how='start')\n\nPeriodIndex(['2016-01', '2016-04', '2016-07', '2016-10', '2017-01', '2017-04',\n             '2017-07', '2017-10'],\n            dtype='period[M]')\n\n\n간격을 늘릴 수도 있습니다. pandas 공식 메뉴얼 참조: https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html\n\nquarters.asfreq('A')\n\nPeriodIndex(['2016', '2016', '2016', '2016', '2017', '2017', '2017', '2017'], dtype='period[A-DEC]')\n\n\n물론 PeriodIndex로 Series를 만들 수 있습니다.\n\nquarterly_revenue = pd.Series(\n    [300, 320, 290, 390, 320, 360, 310, 410], index=quarters)\nquarterly_revenue\n\n2016Q1    300\n2016Q2    320\n2016Q3    290\n2016Q4    390\n2017Q1    320\n2017Q2    360\n2017Q3    310\n2017Q4    410\nFreq: Q-DEC, dtype: int64\n\n\n\nquarterly_revenue.plot(kind='line')\nplt.show()\n\n\n\n\nto_timestamp를 호출해서 기간을 타임스탬프로 변경할 수 있습니다. 기본적으로 기간의 첫 번째 날을 반환합니다. 하지만 how와 freq를 지정해서 기간의 마지막 시간을 얻을 수 있습니다.\n\nquarterly_revenue\n\n2016Q1    300\n2016Q2    320\n2016Q3    290\n2016Q4    390\n2017Q1    320\n2017Q2    360\n2017Q3    310\n2017Q4    410\nFreq: Q-DEC, dtype: int64\n\n\n\nlast_hours = quarterly_revenue.to_timestamp(how='end', freq='H')\nlast_hours\n\n2016-03-31 23:59:59.999999999    300\n2016-06-30 23:59:59.999999999    320\n2016-09-30 23:59:59.999999999    290\n2016-12-31 23:59:59.999999999    390\n2017-03-31 23:59:59.999999999    320\n2017-06-30 23:59:59.999999999    360\n2017-09-30 23:59:59.999999999    310\n2017-12-31 23:59:59.999999999    410\ndtype: int64\n\n\nto_peroid를 호출하면 다시 기간으로 돌아갑니다.\n\nlast_hours.to_period()\n\n2016Q1    300\n2016Q2    320\n2016Q3    290\n2016Q4    390\n2017Q1    320\n2017Q2    360\n2017Q3    310\n2017Q4    410\nFreq: Q-DEC, dtype: int64\n\n\n판다스는 여러 가지 시간 관련 함수를 많이 제공합니다. 온라인 문서를 확인해 보세요. 예를 하나 들면 2016년 매월 마지막 업무일의 9시를 얻는 방법은 다음과 같습니다.\n\nmonths_2022 = pd.period_range('2022', periods=12, freq='M')\none_day_after_last_days = months_2022.asfreq('D') + 1\nlast_bdays = one_day_after_last_days.to_timestamp() - pd.tseries.offsets.BDay(n=1)\nlast_bdays.to_period('H') + 9\n\nPeriodIndex(['2022-01-31 09:00', '2022-02-28 09:00', '2022-03-31 09:00',\n             '2022-04-29 09:00', '2022-05-31 09:00', '2022-06-30 09:00',\n             '2022-07-29 09:00', '2022-08-31 09:00', '2022-09-30 09:00',\n             '2022-10-31 09:00', '2022-11-30 09:00', '2022-12-30 09:00'],\n            dtype='period[H]')"
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#dataframe-만들기",
    "href": "Data_Mining/pandas/pandas.html#dataframe-만들기",
    "title": "Pandas 기본",
    "section": "DataFrame 만들기",
    "text": "DataFrame 만들기\nSeries 객체의 딕셔너리를 전달하여 데이터프레임을 만들 수 있습니다.\n\npeople_dict = {\n    'weight': pd.Series([68, 83, 112], index=['alice', 'bob', 'charles']),\n    'birthyear': pd.Series([1984, 1985, 1992], index=['bob', 'alice', 'charles'], name='year'),\n    'children': pd.Series([0, 3], index=['charles', 'bob']),\n    'hobby': pd.Series(['Biking', 'Dancing'], index=['alice', 'bob']),\n}\npeople = pd.DataFrame(people_dict)\npeople\n\n\n\n\n\n\n\n\nweight\nbirthyear\nchildren\nhobby\n\n\n\n\nalice\n68\n1985\nNaN\nBiking\n\n\nbob\n83\n1984\n3.0\nDancing\n\n\ncharles\n112\n1992\n0.0\nNaN\n\n\n\n\n\n\n\n몇가지 알아 두어야 할 것은 다음과 같습니다:\n\nSeries는 인덱스를 기반으로 자동으로 정렬됩니다.\n누란된 값은 NaN으로 표현됩니다.\nSeries 이름은 무시됩니다('year'란 이름은 삭제됩니다).\nDataFrame은 주피터 노트북에서 멋지게 출력됩니다!\n\n예상하는 방식으로 열을 참조할 수 있고 Series 객체가 반환됩니다.\n\npeople['birthyear']\n\nalice      1985\nbob        1984\ncharles    1992\nName: birthyear, dtype: int64\n\n\n동시에 여러 개의 열을 선택할 수 있습니다.\n\npeople[['birthyear', 'hobby']]\n\n\n\n\n\n\n\n\nbirthyear\nhobby\n\n\n\n\nalice\n1985\nBiking\n\n\nbob\n1984\nDancing\n\n\ncharles\n1992\nNaN\n\n\n\n\n\n\n\n열 리스트나 행 인덱스 레이블을 DataFrame 생성자에 전달하면 해당 열과 행으로 채워진 데이터프레임이 반환됩니다. 예를 들면,\n\npeople_dict\n\n{'weight': alice       68\n bob         83\n charles    112\n dtype: int64,\n 'birthyear': bob        1984\n alice      1985\n charles    1992\n Name: year, dtype: int64,\n 'children': charles    0\n bob        3\n dtype: int64,\n 'hobby': alice     Biking\n bob      Dancing\n dtype: object}\n\n\n\nd2 = pd.DataFrame(\n    people_dict,\n    columns=['birthyear', 'weight', 'height'],\n    index=['bob', 'alice', 'eugene']\n)\n\n\nd2\n\n\n\n\n\n\n\n\nbirthyear\nweight\nheight\n\n\n\n\nbob\n1984.0\n83.0\nNaN\n\n\nalice\n1985.0\n68.0\nNaN\n\n\neugene\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\nDataFrame을 만드는 또 다른 편리한 방법은 ndarray나 리스트의 리스트로 모든 값을 생성자에게 전달하고 열 이름과 행 인덱스 레이블을 각기 지정하는 것입니다.\n\nvalues = [\n    [1985, np.nan, 'Biking',   68],\n    [1984, 3,      'Dancing',  83],\n    [1992, 0,      np.nan,    112]\n]\nd3 = pd.DataFrame(\n    values,\n    columns=['birthyear', 'children', 'hobby', 'weight'],\n    index=['alice', 'bob', 'charles']\n)\nd3\n\n\n\n\n\n\n\n\nbirthyear\nchildren\nhobby\nweight\n\n\n\n\nalice\n1985\nNaN\nBiking\n68\n\n\nbob\n1984\n3.0\nDancing\n83\n\n\ncharles\n1992\n0.0\nNaN\n112\n\n\n\n\n\n\n\n누락된 값을 지정하려면 np.nan이나 넘파이 마스크 배열을 사용합니다.\ndtype = object는 문자열 데이터를 의미합니다.\n\nmasked_array = np.ma.asarray(values, dtype=object)\nmasked_array\n\nmasked_array(\n  data=[[1985, nan, 'Biking', 68],\n        [1984, 3, 'Dancing', 83],\n        [1992, 0, nan, 112]],\n  mask=False,\n  fill_value='?',\n  dtype=object)\n\n\n\nmasked_array = np.ma.asarray(values, dtype=object)\nmasked_array[(0, 2), (1, 2)] = np.ma.masked\nd3 = pd.DataFrame(\n    masked_array,\n    columns=['birthyear', 'children', 'hobby', 'weight'],\n    index=['alice', 'bob', 'charles']\n)\nd3\n\n\n\n\n\n\n\n\nbirthyear\nchildren\nhobby\nweight\n\n\n\n\nalice\n1985\nNaN\nBiking\n68\n\n\nbob\n1984\n3\nDancing\n83\n\n\ncharles\n1992\n0\nNaN\n112\n\n\n\n\n\n\n\nndarray 대신에 DataFrame 객체를 전달할 수도 있습니다.\n\nd3\n\n\n\n\n\n\n\n\nbirthyear\nchildren\nhobby\nweight\n\n\n\n\nalice\n1985\nNaN\nBiking\n68\n\n\nbob\n1984\n3\nDancing\n83\n\n\ncharles\n1992\n0\nNaN\n112\n\n\n\n\n\n\n\n\nd4 = pd.DataFrame(\n    d3,\n    columns=['hobby', 'children'],\n    index=['alice', 'bob']\n)\nd4\n\n\n\n\n\n\n\n\nhobby\nchildren\n\n\n\n\nalice\nBiking\nNaN\n\n\nbob\nDancing\n3\n\n\n\n\n\n\n\n딕셔너리의 딕셔너리(또는 리스트의 리스트)로 DataFrame을 만들 수 있습니다.\n\npeople = pd.DataFrame({\n    'birthyear': {'alice': 1985, 'bob': 1984, 'charles': 1992},\n    'hobby': {'alice': 'Biking', 'bob': 'Dancing'},\n    'weight': {'alice': 68, 'bob': 83, 'charles': 112},\n    'children': {'bob': 3, 'charles': 0}\n})\n\npeople\n\n\n\n\n\n\n\n\nbirthyear\nhobby\nweight\nchildren\n\n\n\n\nalice\n1985\nBiking\n68\nNaN\n\n\nbob\n1984\nDancing\n83\n3.0\n\n\ncharles\n1992\nNaN\n112\n0.0"
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#멀티-인덱싱",
    "href": "Data_Mining/pandas/pandas.html#멀티-인덱싱",
    "title": "Pandas 기본",
    "section": "멀티 인덱싱",
    "text": "멀티 인덱싱\n모든 열이 같은 크기의 튜플이면 멀티 인덱스로 인식합니다. 열 인덱스 레이블에도 같은 방식이 적용됩니다. 예를 들면,\n\nd5 = pd.DataFrame(\n    {\n        ('public', 'birthyear'):\n        {('Paris', 'alice'): 1985, ('Paris', 'bob'): 1984, ('London', 'charles'): 1992},\n        ('public', 'hobby'):\n        {('Paris', 'alice'): 'Biking', ('Paris', 'bob'): 'Dancing'},\n        ('private', 'weight'):\n        {('Paris', 'alice'): 68, ('Paris', 'bob'): 83, ('London', 'charles'): 112},\n        ('private', 'children'):\n        {('Paris', 'alice'): np.nan, ('Paris', 'bob'): 3, ('London', 'charles'): 0}\n    }\n)\nd5\n\n\n\n\n\n\n\n\n\npublic\nprivate\n\n\n\n\nbirthyear\nhobby\nweight\nchildren\n\n\n\n\nParis\nalice\n1985\nBiking\n68\nNaN\n\n\nbob\n1984\nDancing\n83\n3.0\n\n\nLondon\ncharles\n1992\nNaN\n112\n0.0\n\n\n\n\n\n\n\n이제 'public' 열을 모두 담은 DataFrame을 손쉽게 만들 수 있습니다.\n\nd5['public']\n\n\n\n\n\n\n\n\n\nbirthyear\nhobby\n\n\n\n\nParis\nalice\n1985\nBiking\n\n\nbob\n1984\nDancing\n\n\nLondon\ncharles\n1992\nNaN\n\n\n\n\n\n\n\n\nd5['public', 'hobby']  # d5['public']['hobby']와 같습니다.\n\nParis   alice       Biking\n        bob        Dancing\nLondon  charles        NaN\nName: (public, hobby), dtype: object\n\n\n\nd5['public']['hobby']\n\nParis   alice       Biking\n        bob        Dancing\nLondon  charles        NaN\nName: hobby, dtype: object"
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#레벨-낮추기",
    "href": "Data_Mining/pandas/pandas.html#레벨-낮추기",
    "title": "Pandas 기본",
    "section": "레벨 낮추기",
    "text": "레벨 낮추기\nd5를 다시 확인해 봅시다.\n\nd5\n\n\n\n\n\n\n\n\n\npublic\nprivate\n\n\n\n\nbirthyear\nhobby\nweight\nchildren\n\n\n\n\nParis\nalice\n1985\nBiking\n68\nNaN\n\n\nbob\n1984\nDancing\n83\n3.0\n\n\nLondon\ncharles\n1992\nNaN\n112\n0.0\n\n\n\n\n\n\n\n열의 레벨(level)이 2개이고 인덱스 레벨이 2개입니다. droplevel()을 사용해 열 레벨을 낮출 수 있습니다(인덱스도 마찬가지입니다).\n\nd5.columns = d5.columns.droplevel(level=0)\nd5\n\n\n\n\n\n\n\n\n\nbirthyear\nhobby\nweight\nchildren\n\n\n\n\nParis\nalice\n1985\nBiking\n68\nNaN\n\n\nbob\n1984\nDancing\n83\n3.0\n\n\nLondon\ncharles\n1992\nNaN\n112\n0.0\n\n\n\n\n\n\n\n\nd6 = d5.copy()\nd6.index = d6.index.droplevel(level=0)\nd6\n\n\n\n\n\n\n\n\nbirthyear\nhobby\nweight\nchildren\n\n\n\n\nalice\n1985\nBiking\n68\nNaN\n\n\nbob\n1984\nDancing\n83\n3.0\n\n\ncharles\n1992\nNaN\n112\n0.0"
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#전치",
    "href": "Data_Mining/pandas/pandas.html#전치",
    "title": "Pandas 기본",
    "section": "전치",
    "text": "전치\nT 속성을 사용해 열과 인덱스를 바꿀 수 있습니다.\n\nd5\n\n\n\n\n\n\n\n\n\nbirthyear\nhobby\nweight\nchildren\n\n\n\n\nParis\nalice\n1985\nBiking\n68\nNaN\n\n\nbob\n1984\nDancing\n83\n3.0\n\n\nLondon\ncharles\n1992\nNaN\n112\n0.0\n\n\n\n\n\n\n\n\nd6 = d5.T\nd6\n\n\n\n\n\n\n\n\nParis\nLondon\n\n\n\nalice\nbob\ncharles\n\n\n\n\nbirthyear\n1985\n1984\n1992\n\n\nhobby\nBiking\nDancing\nNaN\n\n\nweight\n68\n83\n112\n\n\nchildren\nNaN\n3.0\n0.0"
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#레벨-스택과-언스택",
    "href": "Data_Mining/pandas/pandas.html#레벨-스택과-언스택",
    "title": "Pandas 기본",
    "section": "레벨 스택과 언스택",
    "text": "레벨 스택과 언스택\nstack() 메서드는 가장 낮은 열 레벨을 가장 낮은 인덱스 뒤에 추가합니다.\n\nd6\n\n\n\n\n\n\n\n\nParis\nLondon\n\n\n\nalice\nbob\ncharles\n\n\n\n\nbirthyear\n1985\n1984\n1992\n\n\nhobby\nBiking\nDancing\nNaN\n\n\nweight\n68\n83\n112\n\n\nchildren\nNaN\n3.0\n0.0\n\n\n\n\n\n\n\n\nd7 = d6.stack()\nd7\n\n\n\n\n\n\n\n\n\nLondon\nParis\n\n\n\n\nbirthyear\nalice\nNaN\n1985\n\n\nbob\nNaN\n1984\n\n\ncharles\n1992\nNaN\n\n\nhobby\nalice\nNaN\nBiking\n\n\nbob\nNaN\nDancing\n\n\nweight\nalice\nNaN\n68\n\n\nbob\nNaN\n83\n\n\ncharles\n112\nNaN\n\n\nchildren\nbob\nNaN\n3.0\n\n\ncharles\n0.0\nNaN\n\n\n\n\n\n\n\nNaN 값이 생겼습니다. 이전에 없던 조합이 생겼기 때문입니다(예를 들어 London에 bob이 없었습니다).\nunstack()을 호출하면 반대가 됩니다. 여기에서도 많은 NaN 값이 생성됩니다.\n\nd8 = d7.unstack()\nd8\n\n\n\n\n\n\n\n\nLondon\nParis\n\n\n\nalice\nbob\ncharles\nalice\nbob\ncharles\n\n\n\n\nbirthyear\nNaN\nNaN\n1992\n1985\n1984\nNaN\n\n\nchildren\nNaN\nNaN\n0.0\nNaN\n3.0\nNaN\n\n\nhobby\nNaN\nNaN\nNaN\nBiking\nDancing\nNaN\n\n\nweight\nNaN\nNaN\n112\n68\n83\nNaN\n\n\n\n\n\n\n\nunstack을 다시 호출하면 Series 객체가 만들어 집니다.\n\nd9 = d8.unstack()\nd9\n\nLondon  alice    birthyear        NaN\n                 children         NaN\n                 hobby            NaN\n                 weight           NaN\n        bob      birthyear        NaN\n                 children         NaN\n                 hobby            NaN\n                 weight           NaN\n        charles  birthyear       1992\n                 children         0.0\n                 hobby            NaN\n                 weight           112\nParis   alice    birthyear       1985\n                 children         NaN\n                 hobby         Biking\n                 weight            68\n        bob      birthyear       1984\n                 children         3.0\n                 hobby        Dancing\n                 weight            83\n        charles  birthyear        NaN\n                 children         NaN\n                 hobby            NaN\n                 weight           NaN\ndtype: object\n\n\nstack()과 unstack() 메서드를 사용할 때 스택/언스택할 level을 선택할 수 있습니다. 심지어 한 번에 여러 개의 레벨을 스택/언스택할 수도 있습니다.\n\nd10 = d9.unstack(level=(0, 1))\nd10\n\n\n\n\n\n\n\n\nLondon\nParis\n\n\n\nalice\nbob\ncharles\nalice\nbob\ncharles\n\n\n\n\nbirthyear\nNaN\nNaN\n1992\n1985\n1984\nNaN\n\n\nchildren\nNaN\nNaN\n0.0\nNaN\n3.0\nNaN\n\n\nhobby\nNaN\nNaN\nNaN\nBiking\nDancing\nNaN\n\n\nweight\nNaN\nNaN\n112\n68\n83\nNaN"
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#대부분의-메서드는-수정된-복사본을-반환합니다",
    "href": "Data_Mining/pandas/pandas.html#대부분의-메서드는-수정된-복사본을-반환합니다",
    "title": "Pandas 기본",
    "section": "대부분의 메서드는 수정된 복사본을 반환합니다",
    "text": "대부분의 메서드는 수정된 복사본을 반환합니다\n눈치챘겠지만 stack()과 unstack() 메서드는 객체를 수정하지 않습니다. 대신 복사본을 만들어 반환합니다. 판다스에 있는 대부분의 메서드들이 이렇게 동작합니다.\nStack & Unstack + Pivot에 대한 설명 참고 https://pandas.pydata.org/docs/user_guide/reshaping.html\n\nPivot\n\ndef unpivot(frame):\n    N, K = frame.shape\n    data = {\n        'value': frame.to_numpy().ravel('F'),\n        'variable': np.asarray(frame.columns).repeat(N),\n        'date': np.tile(np.asarray(frame.index), K),\n    }\n    return pd.DataFrame(data, columns=['date', 'variable', 'value'])\n\n\ndf = unpivot(tm.makeTimeDataFrame(3))\n\n\ndf\n\n\n\n\n\n\n\n\ndate\nvariable\nvalue\n\n\n\n\n0\n2000-01-03\nA\n-1.361025\n\n\n1\n2000-01-04\nA\n1.124727\n\n\n2\n2000-01-05\nA\n0.187734\n\n\n3\n2000-01-03\nB\n1.221447\n\n\n4\n2000-01-04\nB\n-0.645248\n\n\n5\n2000-01-05\nB\n0.368883\n\n\n6\n2000-01-03\nC\n1.550405\n\n\n7\n2000-01-04\nC\n-1.529291\n\n\n8\n2000-01-05\nC\n-1.041943\n\n\n9\n2000-01-03\nD\n-0.250513\n\n\n10\n2000-01-04\nD\n-0.224425\n\n\n11\n2000-01-05\nD\n0.763475\n\n\n\n\n\n\n\nvariable 변수의 값이 A인 것들을 모두 출력해봅시다.\n\nfiltered = df[df['variable'] == 'A']\nfiltered\n\n\n\n\n\n\n\n\ndate\nvariable\nvalue\n\n\n\n\n0\n2000-01-03\nA\n-1.361025\n\n\n1\n2000-01-04\nA\n1.124727\n\n\n2\n2000-01-05\nA\n0.187734\n\n\n\n\n\n\n\n그러나 변수를 사용하여 시계열 연산을 수행하려고 합니다. 더 나은 표현은 열이 고유 변수이고 날짜 인덱스가 개별 관측치를 식별하는 위치입니다. 데이터를 이 형식으로 재구성하려면 DataFrame.pivot() 메서드(최상위 기능 pivot()으로도 구현됩니다.)를 사용합니다.\n\npivoted = df.pivot(index='date', columns='variable', values='value')\npivoted\n\n\n\n\n\n\n\nvariable\nA\nB\nC\nD\n\n\ndate\n\n\n\n\n\n\n\n\n2000-01-03\n-1.361025\n1.221447\n1.550405\n-0.250513\n\n\n2000-01-04\n1.124727\n-0.645248\n-1.529291\n-0.224425\n\n\n2000-01-05\n0.187734\n0.368883\n-1.041943\n0.763475\n\n\n\n\n\n\n\n\npivoted.columns\n\nIndex(['A', 'B', 'C', 'D'], dtype='object', name='variable')\n\n\n\npivoted.index\n\nDatetimeIndex(['2000-01-03', '2000-01-04', '2000-01-05'], dtype='datetime64[ns]', name='date', freq=None)\n\n\nvalues 인수가 생략되고 입력 DataFrame에 pivot() 할 열 또는 인덱스 입력으로 사용되지 않는 두 개 이상의 값 열이 있는 경우, 결과적으로 “pivoted” DataFrame에는 최상위 수준이 각 값 열을 나타내는 계층 열이 있습니다.\n\ndf['value2'] = df['value'] * 2\n\n\ndf\n\n\n\n\n\n\n\n\ndate\nvariable\nvalue\nvalue2\n\n\n\n\n0\n2000-01-03\nA\n-1.361025\n-2.722050\n\n\n1\n2000-01-04\nA\n1.124727\n2.249455\n\n\n2\n2000-01-05\nA\n0.187734\n0.375469\n\n\n3\n2000-01-03\nB\n1.221447\n2.442895\n\n\n4\n2000-01-04\nB\n-0.645248\n-1.290496\n\n\n5\n2000-01-05\nB\n0.368883\n0.737767\n\n\n6\n2000-01-03\nC\n1.550405\n3.100810\n\n\n7\n2000-01-04\nC\n-1.529291\n-3.058582\n\n\n8\n2000-01-05\nC\n-1.041943\n-2.083886\n\n\n9\n2000-01-03\nD\n-0.250513\n-0.501025\n\n\n10\n2000-01-04\nD\n-0.224425\n-0.448850\n\n\n11\n2000-01-05\nD\n0.763475\n1.526951\n\n\n\n\n\n\n\n\npivoted = df.pivot(index='date', columns='variable')\npivoted\n\n\n\n\n\n\n\n\nvalue\nvalue2\n\n\nvariable\nA\nB\nC\nD\nA\nB\nC\nD\n\n\ndate\n\n\n\n\n\n\n\n\n\n\n\n\n2000-01-03\n-1.361025\n1.221447\n1.550405\n-0.250513\n-2.722050\n2.442895\n3.100810\n-0.501025\n\n\n2000-01-04\n1.124727\n-0.645248\n-1.529291\n-0.224425\n2.249455\n-1.290496\n-3.058582\n-0.448850\n\n\n2000-01-05\n0.187734\n0.368883\n-1.041943\n0.763475\n0.375469\n0.737767\n-2.083886\n1.526951\n\n\n\n\n\n\n\n\npivoted['value']\n\n\n\n\n\n\n\nvariable\nA\nB\nC\nD\n\n\ndate\n\n\n\n\n\n\n\n\n2000-01-03\n-1.361025\n1.221447\n1.550405\n-0.250513\n\n\n2000-01-04\n1.124727\n-0.645248\n-1.529291\n-0.224425\n\n\n2000-01-05\n0.187734\n0.368883\n-1.041943\n0.763475"
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#행-참조하기",
    "href": "Data_Mining/pandas/pandas.html#행-참조하기",
    "title": "Pandas 기본",
    "section": "행 참조하기",
    "text": "행 참조하기\npeople DataFrame으로 돌아가봅시다.\n\npeople\n\n\n\n\n\n\n\n\nbirthyear\nhobby\nweight\nchildren\n\n\n\n\nalice\n1985\nBiking\n68\nNaN\n\n\nbob\n1984\nDancing\n83\n3.0\n\n\ncharles\n1992\nNaN\n112\n0.0\n\n\n\n\n\n\n\nloc 속성으로 열 대신 행을 참조할 수 있습니다. DataFrame의 열 이름이 행 인덱스 레이블로 매핑된 Series 객체가 반환됩니다.\n\npeople['birthyear']\n\nalice      1985\nbob        1984\ncharles    1992\nName: birthyear, dtype: int64\n\n\n\npeople.loc['charles']\n\nbirthyear    1992\nhobby         NaN\nweight        112\nchildren      0.0\nName: charles, dtype: object\n\n\niloc 속성을 사용해 정수 인덱스로 행을 참조할 수 있습니다.\n\npeople.iloc[2]\n\nbirthyear    1992\nhobby         NaN\nweight        112\nchildren      0.0\nName: charles, dtype: object\n\n\n행을 슬라이싱할 수 있으며 DataFrame 객체가 반환됩니다.\n\npeople\n\n\n\n\n\n\n\n\nbirthyear\nhobby\nweight\nchildren\n\n\n\n\nalice\n1985\nBiking\n68\nNaN\n\n\nbob\n1984\nDancing\n83\n3.0\n\n\ncharles\n1992\nNaN\n112\n0.0\n\n\n\n\n\n\n\n\npeople.iloc[1:3]\n\n\n\n\n\n\n\n\nbirthyear\nhobby\nweight\nchildren\n\n\n\n\nbob\n1984\nDancing\n83\n3.0\n\n\ncharles\n1992\nNaN\n112\n0.0\n\n\n\n\n\n\n\n마자믹으로 불리언 배열을 전달하여 해당하는 행을 가져올 수 있습니다.\n\npeople[np.array([True, False, True])]\n\n\n\n\n\n\n\n\nbirthyear\nhobby\nweight\nchildren\n\n\n\n\nalice\n1985\nBiking\n68\nNaN\n\n\ncharles\n1992\nNaN\n112\n0.0\n\n\n\n\n\n\n\n불리언 표현식을 사용할 때 아주 유용합니다.\n\npeople['birthyear'] &lt; 1990\n\nalice       True\nbob         True\ncharles    False\nName: birthyear, dtype: bool\n\n\n\npeople[people['birthyear'] &lt; 1990]\n\n\n\n\n\n\n\n\nbirthyear\nhobby\nweight\nchildren\n\n\n\n\nalice\n1985\nBiking\n68\nNaN\n\n\nbob\n1984\nDancing\n83\n3.0"
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#열-추가-삭제",
    "href": "Data_Mining/pandas/pandas.html#열-추가-삭제",
    "title": "Pandas 기본",
    "section": "열 추가, 삭제",
    "text": "열 추가, 삭제\nDataFrame을 Series의 딕셔너리처럼 다룰 수 있습니다. 따라서 다음 같이 쓸 수 있습니다.\n\npeople\n\n\n\n\n\n\n\n\nbirthyear\nhobby\nweight\nchildren\n\n\n\n\nalice\n1985\nBiking\n68\nNaN\n\n\nbob\n1984\nDancing\n83\n3.0\n\n\ncharles\n1992\nNaN\n112\n0.0\n\n\n\n\n\n\n\n\npeople['age'] = 2022 - people['birthyear']  # 'age' 열을 추가합니다\npeople['over 30'] = people['age'] &gt; 30      # 'over 30' 열을 추가합니다\n\npeople\n\n\n\n\n\n\n\n\nbirthyear\nhobby\nweight\nchildren\nage\nover 30\n\n\n\n\nalice\n1985\nBiking\n68\nNaN\n37\nTrue\n\n\nbob\n1984\nDancing\n83\n3.0\n38\nTrue\n\n\ncharles\n1992\nNaN\n112\n0.0\n30\nFalse\n\n\n\n\n\n\n\n\nbirthyears = people.pop('birthyear')\ndel people['children']\n\n\nbirthyears\n\nalice      1985\nbob        1984\ncharles    1992\nName: birthyear, dtype: int64\n\n\n\npeople\n\n\n\n\n\n\n\n\nhobby\nweight\nage\nover 30\n\n\n\n\nalice\nBiking\n68\n37\nTrue\n\n\nbob\nDancing\n83\n38\nTrue\n\n\ncharles\nNaN\n112\n30\nFalse\n\n\n\n\n\n\n\n\n# 딕셔너리도 유사함\nweights = {'alice': 68, 'bob': 83, 'colin': 86, 'darwin': 68}\n\n\nweights.pop('alice')\n\n68\n\n\n\nweights\n\n{'bob': 83, 'colin': 86, 'darwin': 68}\n\n\n\ndel weights['bob']\n\n\nweights\n\n{'colin': 86, 'darwin': 68}\n\n\n새로운 열을 추가할 때 행의 개수는 같아야 합니다. 누락된 행은 NaN으로 채워지고 추가적인 행은 무시됩니다.\n\npeople.index\n\nIndex(['alice', 'bob', 'charles'], dtype='object')\n\n\n\n# alice 누락됨, eugene은 무시됨\npeople['pets'] = pd.Series({'bob': 0, 'charles': 5, 'eugene': 1})\npeople\n\n\n\n\n\n\n\n\nhobby\nweight\nage\nover 30\npets\n\n\n\n\nalice\nBiking\n68\n37\nTrue\nNaN\n\n\nbob\nDancing\n83\n38\nTrue\n0.0\n\n\ncharles\nNaN\n112\n30\nFalse\n5.0\n\n\n\n\n\n\n\n새로운 열을 추가할 때 기본적으로 (오른쪽) 끝에 추가됩니다. insert() 메서드를 사용해 다른 곳에 열을 추가할 수 있습니다.\n\npeople.insert(1, 'height', [172, 181, 185])\npeople\n\n\n\n\n\n\n\n\nhobby\nheight\nweight\nage\nover 30\npets\n\n\n\n\nalice\nBiking\n172\n68\n37\nTrue\nNaN\n\n\nbob\nDancing\n181\n83\n38\nTrue\n0.0\n\n\ncharles\nNaN\n185\n112\n30\nFalse\n5.0"
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#새로운-열-할당하기",
    "href": "Data_Mining/pandas/pandas.html#새로운-열-할당하기",
    "title": "Pandas 기본",
    "section": "새로운 열 할당하기",
    "text": "새로운 열 할당하기\nassign() 메서드를 호출하여 새로운 열을 만들 수도 있습니다. 이는 새로운 DataFrame 객체를 반환하며 원본 객체는 변경되지 않습니다.\n\npeople.assign(\n    body_mass_index=people['weight'] / (people['height'] / 100) ** 2,\n    has_pets=people['pets'] &gt; 0\n)\n\n\n\n\n\n\n\n\nhobby\nheight\nweight\nage\nover 30\npets\nbody_mass_index\nhas_pets\n\n\n\n\nalice\nBiking\n172\n68\n37\nTrue\nNaN\n22.985398\nFalse\n\n\nbob\nDancing\n181\n83\n38\nTrue\n0.0\n25.335002\nFalse\n\n\ncharles\nNaN\n185\n112\n30\nFalse\n5.0\n32.724617\nTrue\n\n\n\n\n\n\n\n\npeople['body_mass_index'] = people['weight'] / (people['height'] / 100) ** 2\n\npeople\n\n\n\n\n\n\n\n\nhobby\nheight\nweight\nage\nover 30\npets\nbody_mass_index\n\n\n\n\nalice\nBiking\n172\n68\n37\nTrue\nNaN\n22.985398\n\n\nbob\nDancing\n181\n83\n38\nTrue\n0.0\n25.335002\n\n\ncharles\nNaN\n185\n112\n30\nFalse\n5.0\n32.724617\n\n\n\n\n\n\n\n\ndel people['body_mass_index']\n\n\npeople\n\n\n\n\n\n\n\n\nhobby\nheight\nweight\nage\nover 30\npets\n\n\n\n\nalice\nBiking\n172\n68\n37\nTrue\nNaN\n\n\nbob\nDancing\n181\n83\n38\nTrue\n0.0\n\n\ncharles\nNaN\n185\n112\n30\nFalse\n5.0\n\n\n\n\n\n\n\n할당문 안에서 만든 열은 접근할 수 없습니다:\n\ntry:\n    people.assign(\n        body_mass_index=people['weight'] / (people['height'] / 100) ** 2,\n        overweight=people['body_mass_index'] &gt; 25\n    )\nexcept KeyError as e:\n    print('키 에러 : ', e)\n\n키 에러 :  'body_mass_index'\n\n\n해결책은 두 개의 연속된 할당문으로 나누는 것입니다:\n\nd6 = people.assign(\n    body_mass_index=people['weight'] / (people['height'] / 100) ** 2)\nd6.assign(overweight=d6['body_mass_index'] &gt; 25)\n\n\n\n\n\n\n\n\nhobby\nheight\nweight\nage\nover 30\npets\nbody_mass_index\noverweight\n\n\n\n\nalice\nBiking\n172\n68\n37\nTrue\nNaN\n22.985398\nFalse\n\n\nbob\nDancing\n181\n83\n38\nTrue\n0.0\n25.335002\nTrue\n\n\ncharles\nNaN\n185\n112\n30\nFalse\n5.0\n32.724617\nTrue\n\n\n\n\n\n\n\n임시 변수 d6를 만들면 불편합니다. assign() 메서드를 연결하고 싶겠지만 people 객체가 첫 번째 할당문에서 실제로 수정되지 않기 때문에 작동하지 않습니다.\n\ntry:\n    (people\n     .assign(body_mass_index=people['weight'] / (people['height'] / 100) ** 2)\n     .assign(overweight=people['body_mass_index'] &gt; 25)\n     )\nexcept KeyError as e:\n    print('키 에러 : ', e)\n\n키 에러 :  'body_mass_index'\n\n\n하지만 걱정하지 마세요. 간단한 방법이 있습니다. assign() 메서드에 함수(전형적으로 lambda 함수)를 전달하면 DataFrame을 매개변수로 이 함수를 호출할 것입니다.\n\n(people\n .assign(body_mass_index=lambda df: df['weight'] / (df['height'] / 100) ** 2)\n .assign(overweight=lambda df: df['body_mass_index'] &gt; 25)\n )\n\n\n\n\n\n\n\n\nhobby\nheight\nweight\nage\nover 30\npets\nbody_mass_index\noverweight\n\n\n\n\nalice\nBiking\n172\n68\n37\nTrue\nNaN\n22.985398\nFalse\n\n\nbob\nDancing\n181\n83\n38\nTrue\n0.0\n25.335002\nTrue\n\n\ncharles\nNaN\n185\n112\n30\nFalse\n5.0\n32.724617\nTrue\n\n\n\n\n\n\n\n문제가 해결되었군요!\n\npeople['body_mass_index'] = people['weight'] / (people['height'] / 100) ** 2\npeople['overweight'] = people['body_mass_index'] &gt; 25\n\n\npeople\n\n\n\n\n\n\n\n\nhobby\nheight\nweight\nage\nover 30\npets\nbody_mass_index\noverweight\n\n\n\n\nalice\nBiking\n172\n68\n37\nTrue\nNaN\n22.985398\nFalse\n\n\nbob\nDancing\n181\n83\n38\nTrue\n0.0\n25.335002\nTrue\n\n\ncharles\nNaN\n185\n112\n30\nFalse\n5.0\n32.724617\nTrue"
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#표현식-평가",
    "href": "Data_Mining/pandas/pandas.html#표현식-평가",
    "title": "Pandas 기본",
    "section": "표현식 평가",
    "text": "표현식 평가\n판다스가 제공하는 뛰어난 기능 하나는 표현식 평가입니다. 이는 numexpr 라이브러리에 의존하기 때문에 설치가 되어 있어야 합니다.\n\npeople\n\n\n\n\n\n\n\n\nhobby\nheight\nweight\nage\nover 30\npets\nbody_mass_index\noverweight\n\n\n\n\nalice\nBiking\n172\n68\n37\nTrue\nNaN\n22.985398\nFalse\n\n\nbob\nDancing\n181\n83\n38\nTrue\n0.0\n25.335002\nTrue\n\n\ncharles\nNaN\n185\n112\n30\nFalse\n5.0\n32.724617\nTrue\n\n\n\n\n\n\n\n\n'weight / (height/100) ** 2 &gt; 25'\n\n'weight / (height/100) ** 2 &gt; 25'\n\n\n\npeople.eval('weight / (height/100) ** 2 &gt; 25')\n\nalice      False\nbob         True\ncharles     True\ndtype: bool\n\n\n할당 표현식도 지원됩니다. inplace=True로 지정하면 수정된 복사본을 만들지 않고 바로 DataFrame을 변경합니다.\n\npeople.eval('body_mass_index = weight / (height/100) ** 2', inplace=True)\npeople\n\n\n\n\n\n\n\n\nhobby\nheight\nweight\nage\nover 30\npets\nbody_mass_index\noverweight\n\n\n\n\nalice\nBiking\n172\n68\n37\nTrue\nNaN\n22.985398\nFalse\n\n\nbob\nDancing\n181\n83\n38\nTrue\n0.0\n25.335002\nTrue\n\n\ncharles\nNaN\n185\n112\n30\nFalse\n5.0\n32.724617\nTrue\n\n\n\n\n\n\n\n'@'를 접두어로 사용하여 지역 변수나 전역 변수를 참조할 수 있습니다.\n\npeople\n\n\n\n\n\n\n\n\nhobby\nheight\nweight\nage\nover 30\npets\nbody_mass_index\noverweight\n\n\n\n\nalice\nBiking\n172\n68\n37\nTrue\nNaN\n22.985398\nFalse\n\n\nbob\nDancing\n181\n83\n38\nTrue\n0.0\n25.335002\nTrue\n\n\ncharles\nNaN\n185\n112\n30\nFalse\n5.0\n32.724617\nTrue\n\n\n\n\n\n\n\n\noverweight_threshold = 30\npeople.eval('overweight = body_mass_index &gt; @overweight_threshold', inplace=True)\npeople\n\n\n\n\n\n\n\n\nhobby\nheight\nweight\nage\nover 30\npets\nbody_mass_index\noverweight\n\n\n\n\nalice\nBiking\n172\n68\n37\nTrue\nNaN\n22.985398\nFalse\n\n\nbob\nDancing\n181\n83\n38\nTrue\n0.0\n25.335002\nFalse\n\n\ncharles\nNaN\n185\n112\n30\nFalse\n5.0\n32.724617\nTrue"
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#dataframe-쿼리하기",
    "href": "Data_Mining/pandas/pandas.html#dataframe-쿼리하기",
    "title": "Pandas 기본",
    "section": "DataFrame 쿼리하기",
    "text": "DataFrame 쿼리하기\nquery() 메서드를 사용하면 쿼리 표현식에 기반하여 DataFrame을 필터링할 수 있습니다.\n\npeople\n\n\n\n\n\n\n\n\nhobby\nheight\nweight\nage\nover 30\npets\nbody_mass_index\noverweight\n\n\n\n\nalice\nBiking\n172\n68\n37\nTrue\nNaN\n22.985398\nFalse\n\n\nbob\nDancing\n181\n83\n38\nTrue\n0.0\n25.335002\nFalse\n\n\ncharles\nNaN\n185\n112\n30\nFalse\n5.0\n32.724617\nTrue\n\n\n\n\n\n\n\n\npeople.query('age &gt; 30 and pets == 0')\n\n\n\n\n\n\n\n\nhobby\nheight\nweight\nage\nover 30\npets\nbody_mass_index\noverweight\n\n\n\n\nbob\nDancing\n181\n83\n38\nTrue\n0.0\n25.335002\nFalse\n\n\n\n\n\n\n\n\npeople[(people['age'] &gt; 30) & (people['pets'] == 0)]\n\n\n\n\n\n\n\n\nhobby\nheight\nweight\nage\nover 30\npets\nbody_mass_index\noverweight\n\n\n\n\nbob\nDancing\n181\n83\n38\nTrue\n0.0\n25.335002\nFalse\n\n\n\n\n\n\n\n\nmask = (people['age'] &gt; 30) & (people['pets'] == 0)\n\n\npeople[mask]\n\n\n\n\n\n\n\n\nhobby\nheight\nweight\nage\nover 30\npets\nbody_mass_index\noverweight\n\n\n\n\nbob\nDancing\n181\n83\n38\nTrue\n0.0\n25.335002\nFalse"
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#dataframe-정렬",
    "href": "Data_Mining/pandas/pandas.html#dataframe-정렬",
    "title": "Pandas 기본",
    "section": "DataFrame 정렬",
    "text": "DataFrame 정렬\nsort_index 메서드를 호출하여 DataFrame을 정렬할 수 있습니다. 기본적으로 인덱스 레이블을 기준으로 오름차순으로 행을 정렬합니다. 여기에서는 내림차순으로 정렬해봅시다..\n\npeople.sort_index(ascending=False)\n\n\n\n\n\n\n\n\nhobby\nheight\nweight\nage\nover 30\npets\nbody_mass_index\noverweight\n\n\n\n\ncharles\nNaN\n185\n112\n30\nFalse\n5.0\n32.724617\nTrue\n\n\nbob\nDancing\n181\n83\n38\nTrue\n0.0\n25.335002\nFalse\n\n\nalice\nBiking\n172\n68\n37\nTrue\nNaN\n22.985398\nFalse\n\n\n\n\n\n\n\nsort_index는 DataFrame의 정렬된 복사본을 반환합니다. people을 직접 수정하려면 inplace 매개변수를 True로 지정합니다. 또한 axis=1로 지정하여 열 대신 행을 정렬할 수 있습니다.\n\npeople.sort_index(axis=1, inplace=True)\npeople\n\n\n\n\n\n\n\n\nage\nbody_mass_index\nheight\nhobby\nover 30\noverweight\npets\nweight\n\n\n\n\nalice\n37\n22.985398\n172\nBiking\nTrue\nFalse\nNaN\n68\n\n\nbob\n38\n25.335002\n181\nDancing\nTrue\nFalse\n0.0\n83\n\n\ncharles\n30\n32.724617\n185\nNaN\nFalse\nTrue\n5.0\n112\n\n\n\n\n\n\n\n레이블이 아니라 값을 기준으로 DataFrame을 정렬하려면 sort_values에 정렬하려는 열을 지정합니다.\n\npeople.sort_values(by='age', inplace=True)\npeople\n\n\n\n\n\n\n\n\nage\nbody_mass_index\nheight\nhobby\nover 30\noverweight\npets\nweight\n\n\n\n\ncharles\n30\n32.724617\n185\nNaN\nFalse\nTrue\n5.0\n112\n\n\nalice\n37\n22.985398\n172\nBiking\nTrue\nFalse\nNaN\n68\n\n\nbob\n38\n25.335002\n181\nDancing\nTrue\nFalse\n0.0\n83"
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#dataframe-그래프-그리기",
    "href": "Data_Mining/pandas/pandas.html#dataframe-그래프-그리기",
    "title": "Pandas 기본",
    "section": "DataFrame 그래프 그리기",
    "text": "DataFrame 그래프 그리기\nSeries와 마찬가지로 판다스는 DataFrame 기반으로 멋진 그래프를 손쉽게 그릴 수 있습니다.\n예를 들어 plot 메서드를 호출하여 DataFrame의 데이터에서 선 그래프를 쉽게 그릴 수 있습니다.\n\npeople.plot(kind='line', x='body_mass_index', y=['height', 'weight'])\nplt.show()\n\n\n\n\n맷플롯립의 함수가 지원하는 다른 매개변수를 사용할 수 있습니다. 예를 들어, 산점도를 그릴 때 맷플롯립의 scatter() 함수의 s 매개변수를 사용해 크기를 지정할 수 있습니다:\n\npeople.plot(kind='scatter', x='height', y='weight', s=[40, 120, 200])\nplt.show()\n\n\n\n\n선택할 수 있는 옵션이 많습니다. 판다스 문서의 시각화 페이지에서 마음에 드는 그래프를 찾아 예제 코드를 살펴 보세요.\n\nHistogram\n\ndf4 = pd.DataFrame(\n    {\n        'a': np.random.randn(1000) + 1,\n        'b': np.random.randn(1000),\n        'c': np.random.randn(1000) - 1,\n    },\n    columns=['a', 'b', 'c'],\n)\n\nplt.figure()\n\ndf4.plot.hist(alpha=0.5)\n\n&lt;Axes: ylabel='Frequency'&gt;\n\n\n&lt;Figure size 640x480 with 0 Axes&gt;\n\n\n\n\n\n\ndf4\n\n\n\n\n\n\n\n\na\nb\nc\n\n\n\n\n0\n1.671477\n1.027885\n-3.028373\n\n\n1\n0.470194\n-0.173525\n-1.075715\n\n\n2\n2.049118\n-1.589988\n-1.445850\n\n\n3\n0.980754\n0.660612\n-0.560864\n\n\n4\n0.837670\n0.339101\n-2.250989\n\n\n...\n...\n...\n...\n\n\n995\n1.192872\n1.697013\n-0.426873\n\n\n996\n1.221444\n1.394927\n-1.229346\n\n\n997\n0.235303\n1.104347\n-1.535131\n\n\n998\n1.269441\n-0.649671\n-1.079828\n\n\n999\n1.111246\n0.568459\n-1.436033\n\n\n\n\n1000 rows × 3 columns\n\n\n\n\ndf4.plot(kind='hist', alpha=0.5, x='a')\nplt.show()\n\n\n\n\n\ndf4['a'].plot.hist()\nplt.show()\n\n\n\n\n\n\nBoxplot\n\ndf\n\n\n\n\n\n\n\n\ndate\nvariable\nvalue\nvalue2\n\n\n\n\n0\n2000-01-03\nA\n-1.361025\n-2.722050\n\n\n1\n2000-01-04\nA\n1.124727\n2.249455\n\n\n2\n2000-01-05\nA\n0.187734\n0.375469\n\n\n3\n2000-01-03\nB\n1.221447\n2.442895\n\n\n4\n2000-01-04\nB\n-0.645248\n-1.290496\n\n\n5\n2000-01-05\nB\n0.368883\n0.737767\n\n\n6\n2000-01-03\nC\n1.550405\n3.100810\n\n\n7\n2000-01-04\nC\n-1.529291\n-3.058582\n\n\n8\n2000-01-05\nC\n-1.041943\n-2.083886\n\n\n9\n2000-01-03\nD\n-0.250513\n-0.501025\n\n\n10\n2000-01-04\nD\n-0.224425\n-0.448850\n\n\n11\n2000-01-05\nD\n0.763475\n1.526951\n\n\n\n\n\n\n\n\ndf = pd.DataFrame(np.random.rand(10, 5), columns=['A', 'B', 'C', 'D', 'E'])\n\ndf.plot.box()\n\n&lt;Axes: &gt;\n\n\n\n\n\n\ndf = pd.DataFrame(np.random.rand(10, 2), columns=['Col1', 'Col2'])\n\ndf['X'] = pd.Series(['A', 'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B'])\n\ndf\n\n\n\n\n\n\n\n\nCol1\nCol2\nX\n\n\n\n\n0\n0.321042\n0.232036\nA\n\n\n1\n0.633293\n0.236471\nA\n\n\n2\n0.243009\n0.816254\nA\n\n\n3\n0.411629\n0.909193\nA\n\n\n4\n0.242503\n0.770808\nA\n\n\n5\n0.920928\n0.096246\nB\n\n\n6\n0.803955\n0.660160\nB\n\n\n7\n0.015313\n0.467449\nB\n\n\n8\n0.606109\n0.470333\nB\n\n\n9\n0.875516\n0.039099\nB\n\n\n\n\n\n\n\n\nplt.figure()\n\nbp = df.boxplot(by='X')\n\n&lt;Figure size 640x480 with 0 Axes&gt;"
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#dataframe-연산",
    "href": "Data_Mining/pandas/pandas.html#dataframe-연산",
    "title": "Pandas 기본",
    "section": "DataFrame 연산",
    "text": "DataFrame 연산\nDataFrame이 넘파이 배열을 흉내내려는 것은 아니지만 몇 가지 비슷한 점이 있습니다. 예제 DataFrame을 만들어봅시다.\n\ngrades_array = np.array([[8, 8, 9], [10, 9, 9], [4, 8, 2], [9, 10, 10]])\ngrades = pd.DataFrame(grades_array,\n                      columns=['sep', 'oct', 'nov'],\n                      index=['alice', 'bob', 'charles', 'darwin'])\ngrades\n\n\n\n\n\n\n\n\nsep\noct\nnov\n\n\n\n\nalice\n8\n8\n9\n\n\nbob\n10\n9\n9\n\n\ncharles\n4\n8\n2\n\n\ndarwin\n9\n10\n10\n\n\n\n\n\n\n\nDataFrame에 넘파이 수학 함수를 적용하면 모든 값에 이 함수가 적용됩니다.\n\nnp.sqrt(grades)\n\n\n\n\n\n\n\n\nsep\noct\nnov\n\n\n\n\nalice\n2.828427\n2.828427\n3.000000\n\n\nbob\n3.162278\n3.000000\n3.000000\n\n\ncharles\n2.000000\n2.828427\n1.414214\n\n\ndarwin\n3.000000\n3.162278\n3.162278\n\n\n\n\n\n\n\n비슷하게 DataFrame에 하나의 값을 더하면 DataFrame의 모든 원소에 이 값이 더해집니다. 이를 브로드캐스팅이라고 합니다.\n\ngrades + 1\n\n\n\n\n\n\n\n\nsep\noct\nnov\n\n\n\n\nalice\n9\n9\n10\n\n\nbob\n11\n10\n10\n\n\ncharles\n5\n9\n3\n\n\ndarwin\n10\n11\n11\n\n\n\n\n\n\n\n물론 산술 연산(*,/,**…)과 조건 연산(&gt;, ==…)을 포함해 모든 이항 연산에도 마찬가지 입니다.\n\ngrades &gt;= 5\n\n\n\n\n\n\n\n\nsep\noct\nnov\n\n\n\n\nalice\nTrue\nTrue\nTrue\n\n\nbob\nTrue\nTrue\nTrue\n\n\ncharles\nFalse\nTrue\nFalse\n\n\ndarwin\nTrue\nTrue\nTrue\n\n\n\n\n\n\n\nDataFrame의 max, sum, mean 같은 집계 연산은 각 열에 적용되어 Series 객체가 반환됩니다.\n\ngrades.mean()\n\nsep    7.75\noct    8.75\nnov    7.50\ndtype: float64\n\n\nall 메서드도 집계 연산입니다. 모든 값이 True인지 아닌지 확인합니다. 모든 학생의 점수가 5 이상인 월을 찾아 봅시다.\n\n(grades &gt; 5).all()\n\nsep    False\noct     True\nnov    False\ndtype: bool\n\n\n이러한 함수의 대부분은 작업을 실행할 DataFrame의 축을 따라 지정할 수 있는 선택적인 axis 매개 변수를 사용합니다. 기본값은 axis = 0이며, 이는 각 열에서 작업이 수직으로 실행됨을 의미합니다. axis = 1을 설정하여 작업을 수평으로(각 행에서) 실행할 수 있습니다. 예를 들어, 어떤 학생들이 5 이상의 모든 성적을 받았는지 알아보겠습니다.\n\ngrades\n\n\n\n\n\n\n\n\nsep\noct\nnov\n\n\n\n\nalice\n8\n8\n9\n\n\nbob\n10\n9\n9\n\n\ncharles\n4\n8\n2\n\n\ndarwin\n9\n10\n10\n\n\n\n\n\n\n\n\n(grades &gt; 5).all(axis=1)\n\nalice       True\nbob         True\ncharles    False\ndarwin      True\ndtype: bool\n\n\nany 메서드는 하나라도 참이면 True를 반환합니다. 한 번이라도 10점을 받은 사람을 찾아봅시다.\n\n(grades == 10).any(axis=1)\n\nalice      False\nbob         True\ncharles    False\ndarwin      True\ndtype: bool\n\n\nDataFrame에 Series 객체를 더하면 (또는 다른 이항 연산을 수행하면) 판다스는 DataFrame에 있는 모든 행에 이 연산을 브로드캐스팅합니다. 이는 Series 객체가 DataFrame의 행의 개수와 크기가 같을 때만 동작합니다. 예를 들어 DataFrame의 mean(Series 객체)을 빼봅시다.\n\ngrades\n\n\n\n\n\n\n\n\nsep\noct\nnov\n\n\n\n\nalice\n8\n8\n9\n\n\nbob\n10\n9\n9\n\n\ncharles\n4\n8\n2\n\n\ndarwin\n9\n10\n10\n\n\n\n\n\n\n\n\ngrades.mean()\n\nsep    7.75\noct    8.75\nnov    7.50\ndtype: float64\n\n\n\ngrades - grades.mean()  # grades - [7.75, 8.75, 7.50] 와 동일\n\n\n\n\n\n\n\n\nsep\noct\nnov\n\n\n\n\nalice\n0.25\n-0.75\n1.5\n\n\nbob\n2.25\n0.25\n1.5\n\n\ncharles\n-3.75\n-0.75\n-5.5\n\n\ndarwin\n1.25\n1.25\n2.5\n\n\n\n\n\n\n\n모든 9월 성적에서 7.75를 빼고, 10월 성적에서 8.75를 빼고, 11월 성적에서 7.50을 뺍니다. 이는 다음 DataFrame을 빼는 것과 같습니다.\n\npd.DataFrame([[7.75, 8.75, 7.50]]*4,\n             index=grades.index, columns=grades.columns)\n\n\n\n\n\n\n\n\nsep\noct\nnov\n\n\n\n\nalice\n7.75\n8.75\n7.5\n\n\nbob\n7.75\n8.75\n7.5\n\n\ncharles\n7.75\n8.75\n7.5\n\n\ndarwin\n7.75\n8.75\n7.5\n\n\n\n\n\n\n\n모든 성적의 전체 평균을 빼고 싶다면 다음과 같은 방법을 사용합니다.\n\ngrades.values.mean()\n\n8.0\n\n\n\ngrades - grades.values.mean()  # 모든 점수에서 전체 평균(8.00)을 뺍니다.\n\n\n\n\n\n\n\n\nsep\noct\nnov\n\n\n\n\nalice\n0.0\n0.0\n1.0\n\n\nbob\n2.0\n1.0\n1.0\n\n\ncharles\n-4.0\n0.0\n-6.0\n\n\ndarwin\n1.0\n2.0\n2.0"
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#자동-정렬-1",
    "href": "Data_Mining/pandas/pandas.html#자동-정렬-1",
    "title": "Pandas 기본",
    "section": "자동 정렬",
    "text": "자동 정렬\nSeries와 비슷하게 여러 개의 DataFrame에 대한 연산을 수행하면 판다스는 자동으로 행 인덱스 레이블로 정렬하지만 열 이름으로도 정렬할 수 있습니다. 10월부터 12월까지 보너스 포인트를 담은 DataFrame을 만들어 보겠습니다.\n\ngrades_array = np.array([[8, 8, 9], [10, 9, 9], [4, 8, 2], [9, 10, 10]])\ngrades = pd.DataFrame(grades_array, columns=['sep', 'oct', 'nov'],\n                      index=['alice', 'bob', 'charles', 'darwin'])\ngrades\n\n\n\n\n\n\n\n\nsep\noct\nnov\n\n\n\n\nalice\n8\n8\n9\n\n\nbob\n10\n9\n9\n\n\ncharles\n4\n8\n2\n\n\ndarwin\n9\n10\n10\n\n\n\n\n\n\n\n\nbonus_array = np.array([[0, np.nan, 2], [np.nan, 1, 0], [0, 1, 0], [3, 3, 0]])\nbonus_points = pd.DataFrame(bonus_array, columns=['oct', 'nov', 'dec'],\n                            index=['bob', 'colin', 'darwin', 'charles'])\nbonus_points\n\n\n\n\n\n\n\n\noct\nnov\ndec\n\n\n\n\nbob\n0.0\nNaN\n2.0\n\n\ncolin\nNaN\n1.0\n0.0\n\n\ndarwin\n0.0\n1.0\n0.0\n\n\ncharles\n3.0\n3.0\n0.0\n\n\n\n\n\n\n\n\ngrades + bonus_points\n\n\n\n\n\n\n\n\ndec\nnov\noct\nsep\n\n\n\n\nalice\nNaN\nNaN\nNaN\nNaN\n\n\nbob\nNaN\nNaN\n9.0\nNaN\n\n\ncharles\nNaN\n5.0\n11.0\nNaN\n\n\ncolin\nNaN\nNaN\nNaN\nNaN\n\n\ndarwin\nNaN\n11.0\n10.0\nNaN\n\n\n\n\n\n\n\n덧셈 연산이 수행되었지만 너무 많은 원소가 NaN이 되었습니다. DataFrame을 정렬할 때 일부 열과 행이 한 쪽에만 있기 때문입니다. 다른 쪽에는 누란되었다고 간주합니다(NaN). NaN에 어떤 수를 더하면 NaN이 됩니다."
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#누락된-데이터-다루기",
    "href": "Data_Mining/pandas/pandas.html#누락된-데이터-다루기",
    "title": "Pandas 기본",
    "section": "누락된 데이터 다루기",
    "text": "누락된 데이터 다루기\n실제 데이터에서 누락된 데이터를 다루는 경우는 자주 발생합니다. 판다스는 누락된 데이터를 다룰 수 있는 몇 가지 방법을 제공합니다.\n위 데이터에 있는 문제를 해결해봅시다. 예를 들어, 누락된 데이터는 NaN이 아니라 0이 되어야 한다고 결정할 수 있습니다. fillna() 메서드를 사용해 모든 NaN 값을 어떤 값으로 바꿀 수 있습니다.\n\n(grades + bonus_points).fillna(0)\n\n\n\n\n\n\n\n\ndec\nnov\noct\nsep\n\n\n\n\nalice\n0.0\n0.0\n0.0\n0.0\n\n\nbob\n0.0\n0.0\n9.0\n0.0\n\n\ncharles\n0.0\n5.0\n11.0\n0.0\n\n\ncolin\n0.0\n0.0\n0.0\n0.0\n\n\ndarwin\n0.0\n11.0\n10.0\n0.0\n\n\n\n\n\n\n\n9월의 점수를 0으로 만드는 것은 공정하지 않습니다. 누락된 점수는 그대로 두고, 누락된 보너스 포인트는 0으로 바꿀 수 있습니다.\n\nbonus_points\n\n\n\n\n\n\n\n\noct\nnov\ndec\n\n\n\n\nbob\n0.0\nNaN\n2.0\n\n\ncolin\nNaN\n1.0\n0.0\n\n\ndarwin\n0.0\n1.0\n0.0\n\n\ncharles\n3.0\n3.0\n0.0\n\n\n\n\n\n\n\n\nfixed_bonus_points = bonus_points.fillna(0)  # NA 값 0으로 바꾸기\nfixed_bonus_points.insert(loc=0, column='sep', value=0)  # 누락된 컬럼 만들기\nfixed_bonus_points.loc['alice'] = 0  # 누락된 행 만들기\nfixed_bonus_points\n\n\n\n\n\n\n\n\nsep\noct\nnov\ndec\n\n\n\n\nbob\n0\n0.0\n0.0\n2.0\n\n\ncolin\n0\n0.0\n1.0\n0.0\n\n\ndarwin\n0\n0.0\n1.0\n0.0\n\n\ncharles\n0\n3.0\n3.0\n0.0\n\n\nalice\n0\n0.0\n0.0\n0.0\n\n\n\n\n\n\n\n\ngrades + fixed_bonus_points\n\n\n\n\n\n\n\n\ndec\nnov\noct\nsep\n\n\n\n\nalice\nNaN\n9.0\n8.0\n8.0\n\n\nbob\nNaN\n9.0\n9.0\n10.0\n\n\ncharles\nNaN\n5.0\n11.0\n4.0\n\n\ncolin\nNaN\nNaN\nNaN\nNaN\n\n\ndarwin\nNaN\n11.0\n10.0\n9.0\n\n\n\n\n\n\n\n훨씬 좋은 결과입니다. 일부 데이터를 꾸며냈지만 덜 불공정합니다.\n누락된 값을 다루는 또 다른 방법은 보간입니다. bonus_points DataFrame을 다시 봅시다.\n\nbonus_points\n\n\n\n\n\n\n\n\noct\nnov\ndec\n\n\n\n\nbob\n0.0\nNaN\n2.0\n\n\ncolin\nNaN\n1.0\n0.0\n\n\ndarwin\n0.0\n1.0\n0.0\n\n\ncharles\n3.0\n3.0\n0.0\n\n\n\n\n\n\n\ninterpolate 메서드를 사용해봅시다. 기본적으로 수직 방향(axis = 0)으로 보간합니다. 따라서 수평으로(axis = 1)으로 보간하도록 지정합니다.\n\nbonus_points.interpolate(axis=1)\n\n\n\n\n\n\n\n\noct\nnov\ndec\n\n\n\n\nbob\n0.0\n1.0\n2.0\n\n\ncolin\nNaN\n1.0\n0.0\n\n\ndarwin\n0.0\n1.0\n0.0\n\n\ncharles\n3.0\n3.0\n0.0\n\n\n\n\n\n\n\nbob의 보너스 포인트는 10월에 0이고 12월에 2입니다. 11월을 보간하면 평균 보너스 포인트 1을 얻습니다. colin의 보너스 포인트는 11월에 1이지만 9월에 포인트는 얼마인지 모릅니다. 따라서 보간할 수 없고 10월의 포인트는 그대로 누락된 값으로 남아 있습니다. 이를 해결하려면 보간하기 전에 9월의 보너스 포인트를 0으로 설정해야 합니다.\n\nbetter_bonus_points = bonus_points.copy()\nbetter_bonus_points.insert(0, 'sep', 0)\nbetter_bonus_points.loc['alice'] = 0\nbetter_bonus_points = better_bonus_points.interpolate(axis=1)\nbetter_bonus_points\n\n\n\n\n\n\n\n\nsep\noct\nnov\ndec\n\n\n\n\nbob\n0.0\n0.0\n1.0\n2.0\n\n\ncolin\n0.0\n0.5\n1.0\n0.0\n\n\ndarwin\n0.0\n0.0\n1.0\n0.0\n\n\ncharles\n0.0\n3.0\n3.0\n0.0\n\n\nalice\n0.0\n0.0\n0.0\n0.0\n\n\n\n\n\n\n\n좋습니다. 이제 모든 보너스 포인트가 합리적으로 보간되었습니다. 최종 점수를 확인해봅시다.\n\ngrades + better_bonus_points\n\n\n\n\n\n\n\n\ndec\nnov\noct\nsep\n\n\n\n\nalice\nNaN\n9.0\n8.0\n8.0\n\n\nbob\nNaN\n10.0\n9.0\n10.0\n\n\ncharles\nNaN\n5.0\n11.0\n4.0\n\n\ncolin\nNaN\nNaN\nNaN\nNaN\n\n\ndarwin\nNaN\n11.0\n10.0\n9.0\n\n\n\n\n\n\n\n9월 열이 오른쪽에 추가되었는데 좀 이상합니다. 이는 더하려는 DataFrame이 정확히 같은 열을 가지고 있지 않기 때문입니다.(grade DataFrame에는 'dec' 열이 없습니다). 따라서 판다스는 알파벳 순서로 최종 열을 정렬합니다. 이를 해결하려면 덧셈을 하기 전에 누락된 열을 추가하면 됩니다.\n\ngrades['dec'] = np.nan\nfinal_grades = grades + better_bonus_points\nfinal_grades\n\n\n\n\n\n\n\n\nsep\noct\nnov\ndec\n\n\n\n\nalice\n8.0\n8.0\n9.0\nNaN\n\n\nbob\n10.0\n9.0\n10.0\nNaN\n\n\ncharles\n4.0\n11.0\n5.0\nNaN\n\n\ncolin\nNaN\nNaN\nNaN\nNaN\n\n\ndarwin\n9.0\n10.0\n11.0\nNaN\n\n\n\n\n\n\n\n12월과 colin에 대해 할 수 있는 것이 많지 않습니다. 보너스 포인트를 만드는 것이 나쁘지만 점수를 합리적으로 올릴 수는 없습니다. dropna() 메서드를 사용해 모두 NaN인 행을 삭제합니다.\n\nfinal_grades_clean = final_grades.dropna(how='all')\nfinal_grades_clean\n\n\n\n\n\n\n\n\nsep\noct\nnov\ndec\n\n\n\n\nalice\n8.0\n8.0\n9.0\nNaN\n\n\nbob\n10.0\n9.0\n10.0\nNaN\n\n\ncharles\n4.0\n11.0\n5.0\nNaN\n\n\ndarwin\n9.0\n10.0\n11.0\nNaN\n\n\n\n\n\n\n\n그 다음 axis 매개변수를 1로 지정하여 모두 NaN인 열을 삭제합니다.\n\nfinal_grades_clean = final_grades_clean.dropna(axis=1, how='all')\nfinal_grades_clean\n\n\n\n\n\n\n\n\nsep\noct\nnov\n\n\n\n\nalice\n8.0\n8.0\n9.0\n\n\nbob\n10.0\n9.0\n10.0\n\n\ncharles\n4.0\n11.0\n5.0\n\n\ndarwin\n9.0\n10.0\n11.0"
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#groupby로-집계하기",
    "href": "Data_Mining/pandas/pandas.html#groupby로-집계하기",
    "title": "Pandas 기본",
    "section": "groupby로 집계하기",
    "text": "groupby로 집계하기\nSQL과 비슷하게 판다스는 데이터를 그룹핑하고 각 그룹에 대해 연산을 수행할 수 있습니다.\n먼저 그루핑을 위해 각 사람의 데이터를 추가로 만들겠습니다. NaN 값을 어떻게 다루는지 보기 위해 final_grades DataFrame을 다시 사용하겠습니다.\n\nfinal_grades['hobby'] = ['Biking', 'Dancing', np.nan, 'Dancing', 'Biking']\nfinal_grades\n\n\n\n\n\n\n\n\nsep\noct\nnov\ndec\nhobby\n\n\n\n\nalice\n8.0\n8.0\n9.0\nNaN\nBiking\n\n\nbob\n10.0\n9.0\n10.0\nNaN\nDancing\n\n\ncharles\n4.0\n11.0\n5.0\nNaN\nNaN\n\n\ncolin\nNaN\nNaN\nNaN\nNaN\nDancing\n\n\ndarwin\n9.0\n10.0\n11.0\nNaN\nBiking\n\n\n\n\n\n\n\nhobby로 이 DataFrame을 그룹핑해봅시다.\n\ngrouped_grades = final_grades.groupby('hobby')\ngrouped_grades\n\n&lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x0000020EF9ED52D0&gt;\n\n\n이제 hobby마다 평균 점수를 계산할 수 있습니다.\n\ngrouped_grades.mean()\n\n\n\n\n\n\n\n\nsep\noct\nnov\ndec\n\n\nhobby\n\n\n\n\n\n\n\n\nBiking\n8.5\n9.0\n10.0\nNaN\n\n\nDancing\n10.0\n9.0\n10.0\nNaN\n\n\n\n\n\n\n\n\nfinal_grades.groupby('hobby').mean()\n\n\n\n\n\n\n\n\nsep\noct\nnov\ndec\n\n\nhobby\n\n\n\n\n\n\n\n\nBiking\n8.5\n9.0\n10.0\nNaN\n\n\nDancing\n10.0\n9.0\n10.0\nNaN\n\n\n\n\n\n\n\n아주 쉽네요! 평균을 계산할 때 NaN 값은 그냥 무시됩니다."
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#피봇-테이블",
    "href": "Data_Mining/pandas/pandas.html#피봇-테이블",
    "title": "Pandas 기본",
    "section": "피봇 테이블",
    "text": "피봇 테이블\n판다스는 스프레드시트와 비슷하 피봇 테이블을 지원하여 데이터를 빠르게 요약할 수 있습니다. 어떻게 동작하는 알아 보기 위해 간단한 DataFrame을 만들어봅시다.\n\nbonus_points.stack().reset_index()\n\n\n\n\n\n\n\n\nlevel_0\nlevel_1\n0\n\n\n\n\n0\nbob\noct\n0.0\n\n\n1\nbob\ndec\n2.0\n\n\n2\ncolin\nnov\n1.0\n\n\n3\ncolin\ndec\n0.0\n\n\n4\ndarwin\noct\n0.0\n\n\n5\ndarwin\nnov\n1.0\n\n\n6\ndarwin\ndec\n0.0\n\n\n7\ncharles\noct\n3.0\n\n\n8\ncharles\nnov\n3.0\n\n\n9\ncharles\ndec\n0.0\n\n\n\n\n\n\n\n\nmore_grades = final_grades_clean.stack().reset_index()\nmore_grades.columns = ['name', 'month', 'grade']\nmore_grades['bonus'] = [np.nan, np.nan, np.nan, 0, np.nan, 2, 3, 3, 0, 0, 1, 0]\nmore_grades\n\n\n\n\n\n\n\n\nname\nmonth\ngrade\nbonus\n\n\n\n\n0\nalice\nsep\n8.0\nNaN\n\n\n1\nalice\noct\n8.0\nNaN\n\n\n2\nalice\nnov\n9.0\nNaN\n\n\n3\nbob\nsep\n10.0\n0.0\n\n\n4\nbob\noct\n9.0\nNaN\n\n\n5\nbob\nnov\n10.0\n2.0\n\n\n6\ncharles\nsep\n4.0\n3.0\n\n\n7\ncharles\noct\n11.0\n3.0\n\n\n8\ncharles\nnov\n5.0\n0.0\n\n\n9\ndarwin\nsep\n9.0\n0.0\n\n\n10\ndarwin\noct\n10.0\n1.0\n\n\n11\ndarwin\nnov\n11.0\n0.0\n\n\n\n\n\n\n\n이제 이 DataFrame에 대해 pd.pivot_table() 함수를 호출하고 name 열로 그룹핑합니다. 기본적으로 pivot_table()은 수치 열의 평균을 계산합니다.\n\npd.pivot_table(more_grades, index='name', values='grade')\n\n\n\n\n\n\n\n\ngrade\n\n\nname\n\n\n\n\n\nalice\n8.333333\n\n\nbob\n9.666667\n\n\ncharles\n6.666667\n\n\ndarwin\n10.000000\n\n\n\n\n\n\n\n집계 함수를 aggfunc 매개변수로 바꿀 수 있습니다. 또한 집계 대상의 열을 리스트로 지정할 수 있습니다.\n\npd.pivot_table(more_grades, index='name', values=[\n               'grade', 'bonus'], aggfunc=np.max)\n\n\n\n\n\n\n\n\nbonus\ngrade\n\n\nname\n\n\n\n\n\n\nalice\nNaN\n9.0\n\n\nbob\n2.0\n10.0\n\n\ncharles\n3.0\n11.0\n\n\ndarwin\n1.0\n11.0\n\n\n\n\n\n\n\ncolumns 매개변수를 지정하여 수평으로 집계할 수 있고 margins=True로 설정해 각 행과 열에 대해 전체 합을 계산할 수 있습니다.\n\npd.pivot_table(more_grades, index='name', values='grade',\n               columns='month', margins=True)\n\n\n\n\n\n\n\nmonth\nnov\noct\nsep\nAll\n\n\nname\n\n\n\n\n\n\n\n\nalice\n9.00\n8.0\n8.00\n8.333333\n\n\nbob\n10.00\n9.0\n10.00\n9.666667\n\n\ncharles\n5.00\n11.0\n4.00\n6.666667\n\n\ndarwin\n11.00\n10.0\n9.00\n10.000000\n\n\nAll\n8.75\n9.5\n7.75\n8.666667\n\n\n\n\n\n\n\n마지막으로 여러 개의 인덱스나 열 이름을 지정하면 판다스가 다중 레벨 인덱스를 만듭니다.\n\npd.pivot_table(more_grades, index=('name', 'month'), margins=True)\n\n\n\n\n\n\n\n\n\nbonus\ngrade\n\n\nname\nmonth\n\n\n\n\n\n\nalice\nnov\nNaN\n9.00\n\n\noct\nNaN\n8.00\n\n\nsep\nNaN\n8.00\n\n\nbob\nnov\n2.000\n10.00\n\n\noct\nNaN\n9.00\n\n\nsep\n0.000\n10.00\n\n\ncharles\nnov\n0.000\n5.00\n\n\noct\n3.000\n11.00\n\n\nsep\n3.000\n4.00\n\n\ndarwin\nnov\n0.000\n11.00\n\n\noct\n1.000\n10.00\n\n\nsep\n0.000\n9.00\n\n\nAll\n\n1.125\n8.75"
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#함수",
    "href": "Data_Mining/pandas/pandas.html#함수",
    "title": "Pandas 기본",
    "section": "함수",
    "text": "함수\n큰 DataFrame을 다룰 때 내용을 간단히 요약하는 것이 도움이 됩니다. 판다스는 이를 위한 몇 가지 함수를 제공합니다. 먼저 수치 값, 누락된 값, 텍스트 값이 섞인 큰 DataFrame을 만들어 보죠. 주피터 노트북은 이 DataFrame의 일부만 보여줍니다.\n\nmuch_data = np.fromfunction(lambda x, y: (x+y*y) % 17*11, (10000, 26))\nlarge_df = pd.DataFrame(much_data, columns=list('ABCDEFGHIJKLMNOPQRSTUVWXYZ'))\nlarge_df[large_df % 16 == 0] = np.nan\nlarge_df.insert(3, 'some_text', 'Blabla')\nlarge_df\n\n\n\n\n\n\n\n\nA\nB\nC\nsome_text\nD\nE\nF\nG\nH\nI\n...\nQ\nR\nS\nT\nU\nV\nW\nX\nY\nZ\n\n\n\n\n0\nNaN\n11.0\n44.0\nBlabla\n99.0\nNaN\n88.0\n22.0\n165.0\n143.0\n...\n11.0\nNaN\n11.0\n44.0\n99.0\nNaN\n88.0\n22.0\n165.0\n143.0\n\n\n1\n11.0\n22.0\n55.0\nBlabla\n110.0\nNaN\n99.0\n33.0\nNaN\n154.0\n...\n22.0\n11.0\n22.0\n55.0\n110.0\nNaN\n99.0\n33.0\nNaN\n154.0\n\n\n2\n22.0\n33.0\n66.0\nBlabla\n121.0\n11.0\n110.0\n44.0\nNaN\n165.0\n...\n33.0\n22.0\n33.0\n66.0\n121.0\n11.0\n110.0\n44.0\nNaN\n165.0\n\n\n3\n33.0\n44.0\n77.0\nBlabla\n132.0\n22.0\n121.0\n55.0\n11.0\nNaN\n...\n44.0\n33.0\n44.0\n77.0\n132.0\n22.0\n121.0\n55.0\n11.0\nNaN\n\n\n4\n44.0\n55.0\n88.0\nBlabla\n143.0\n33.0\n132.0\n66.0\n22.0\nNaN\n...\n55.0\n44.0\n55.0\n88.0\n143.0\n33.0\n132.0\n66.0\n22.0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n9995\nNaN\nNaN\n33.0\nBlabla\n88.0\n165.0\n77.0\n11.0\n154.0\n132.0\n...\nNaN\nNaN\nNaN\n33.0\n88.0\n165.0\n77.0\n11.0\n154.0\n132.0\n\n\n9996\nNaN\n11.0\n44.0\nBlabla\n99.0\nNaN\n88.0\n22.0\n165.0\n143.0\n...\n11.0\nNaN\n11.0\n44.0\n99.0\nNaN\n88.0\n22.0\n165.0\n143.0\n\n\n9997\n11.0\n22.0\n55.0\nBlabla\n110.0\nNaN\n99.0\n33.0\nNaN\n154.0\n...\n22.0\n11.0\n22.0\n55.0\n110.0\nNaN\n99.0\n33.0\nNaN\n154.0\n\n\n9998\n22.0\n33.0\n66.0\nBlabla\n121.0\n11.0\n110.0\n44.0\nNaN\n165.0\n...\n33.0\n22.0\n33.0\n66.0\n121.0\n11.0\n110.0\n44.0\nNaN\n165.0\n\n\n9999\n33.0\n44.0\n77.0\nBlabla\n132.0\n22.0\n121.0\n55.0\n11.0\nNaN\n...\n44.0\n33.0\n44.0\n77.0\n132.0\n22.0\n121.0\n55.0\n11.0\nNaN\n\n\n\n\n10000 rows × 27 columns\n\n\n\nhead() 메서드는 처음 5개 행을 반환합니다.\n\nlarge_df.head(n=10)\n\n\n\n\n\n\n\n\nA\nB\nC\nsome_text\nD\nE\nF\nG\nH\nI\n...\nQ\nR\nS\nT\nU\nV\nW\nX\nY\nZ\n\n\n\n\n0\nNaN\n11.0\n44.0\nBlabla\n99.0\nNaN\n88.0\n22.0\n165.0\n143.0\n...\n11.0\nNaN\n11.0\n44.0\n99.0\nNaN\n88.0\n22.0\n165.0\n143.0\n\n\n1\n11.0\n22.0\n55.0\nBlabla\n110.0\nNaN\n99.0\n33.0\nNaN\n154.0\n...\n22.0\n11.0\n22.0\n55.0\n110.0\nNaN\n99.0\n33.0\nNaN\n154.0\n\n\n2\n22.0\n33.0\n66.0\nBlabla\n121.0\n11.0\n110.0\n44.0\nNaN\n165.0\n...\n33.0\n22.0\n33.0\n66.0\n121.0\n11.0\n110.0\n44.0\nNaN\n165.0\n\n\n3\n33.0\n44.0\n77.0\nBlabla\n132.0\n22.0\n121.0\n55.0\n11.0\nNaN\n...\n44.0\n33.0\n44.0\n77.0\n132.0\n22.0\n121.0\n55.0\n11.0\nNaN\n\n\n4\n44.0\n55.0\n88.0\nBlabla\n143.0\n33.0\n132.0\n66.0\n22.0\nNaN\n...\n55.0\n44.0\n55.0\n88.0\n143.0\n33.0\n132.0\n66.0\n22.0\nNaN\n\n\n5\n55.0\n66.0\n99.0\nBlabla\n154.0\n44.0\n143.0\n77.0\n33.0\n11.0\n...\n66.0\n55.0\n66.0\n99.0\n154.0\n44.0\n143.0\n77.0\n33.0\n11.0\n\n\n6\n66.0\n77.0\n110.0\nBlabla\n165.0\n55.0\n154.0\n88.0\n44.0\n22.0\n...\n77.0\n66.0\n77.0\n110.0\n165.0\n55.0\n154.0\n88.0\n44.0\n22.0\n\n\n7\n77.0\n88.0\n121.0\nBlabla\nNaN\n66.0\n165.0\n99.0\n55.0\n33.0\n...\n88.0\n77.0\n88.0\n121.0\nNaN\n66.0\n165.0\n99.0\n55.0\n33.0\n\n\n8\n88.0\n99.0\n132.0\nBlabla\nNaN\n77.0\nNaN\n110.0\n66.0\n44.0\n...\n99.0\n88.0\n99.0\n132.0\nNaN\n77.0\nNaN\n110.0\n66.0\n44.0\n\n\n9\n99.0\n110.0\n143.0\nBlabla\n11.0\n88.0\nNaN\n121.0\n77.0\n55.0\n...\n110.0\n99.0\n110.0\n143.0\n11.0\n88.0\nNaN\n121.0\n77.0\n55.0\n\n\n\n\n10 rows × 27 columns\n\n\n\n마지막 5개 행을 반환하는 tail() 함수도 있습니다. 원하는 행 개수를 전달할 수도 있습니다.\n\nlarge_df.tail(n=2)\n\n\n\n\n\n\n\n\nA\nB\nC\nsome_text\nD\nE\nF\nG\nH\nI\n...\nQ\nR\nS\nT\nU\nV\nW\nX\nY\nZ\n\n\n\n\n9998\n22.0\n33.0\n66.0\nBlabla\n121.0\n11.0\n110.0\n44.0\nNaN\n165.0\n...\n33.0\n22.0\n33.0\n66.0\n121.0\n11.0\n110.0\n44.0\nNaN\n165.0\n\n\n9999\n33.0\n44.0\n77.0\nBlabla\n132.0\n22.0\n121.0\n55.0\n11.0\nNaN\n...\n44.0\n33.0\n44.0\n77.0\n132.0\n22.0\n121.0\n55.0\n11.0\nNaN\n\n\n\n\n2 rows × 27 columns\n\n\n\ninfo() 메서드는 각 열의 내용을 요약하여 출력합니다.\n\nlarge_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 10000 entries, 0 to 9999\nData columns (total 27 columns):\n #   Column     Non-Null Count  Dtype  \n---  ------     --------------  -----  \n 0   A          8823 non-null   float64\n 1   B          8824 non-null   float64\n 2   C          8824 non-null   float64\n 3   some_text  10000 non-null  object \n 4   D          8824 non-null   float64\n 5   E          8822 non-null   float64\n 6   F          8824 non-null   float64\n 7   G          8824 non-null   float64\n 8   H          8822 non-null   float64\n 9   I          8823 non-null   float64\n 10  J          8823 non-null   float64\n 11  K          8822 non-null   float64\n 12  L          8824 non-null   float64\n 13  M          8824 non-null   float64\n 14  N          8822 non-null   float64\n 15  O          8824 non-null   float64\n 16  P          8824 non-null   float64\n 17  Q          8824 non-null   float64\n 18  R          8823 non-null   float64\n 19  S          8824 non-null   float64\n 20  T          8824 non-null   float64\n 21  U          8824 non-null   float64\n 22  V          8822 non-null   float64\n 23  W          8824 non-null   float64\n 24  X          8824 non-null   float64\n 25  Y          8822 non-null   float64\n 26  Z          8823 non-null   float64\ndtypes: float64(26), object(1)\nmemory usage: 2.1+ MB\n\n\n마지막으로 describe() 메서드는 각 열에 대한 주요 집계 연산을 수행한 결과를 보여줍니다. * count: null(NaN)이 아닌 값의 개수 * mean: null이 아닌 값의 평균 * std: null이 아닌 값의 표준 편차 * min: null이 아닌 값의 최솟값 * 25%, 50%, 75%: null이 아닌 값의 25번째, 50번째, 75번째 백분위수 * max: null이 아닌 값의 최댓값\n\nlarge_df.describe()\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\nG\nH\nI\nJ\n...\nQ\nR\nS\nT\nU\nV\nW\nX\nY\nZ\n\n\n\n\ncount\n8823.000000\n8824.000000\n8824.000000\n8824.000000\n8822.000000\n8824.000000\n8824.000000\n8822.000000\n8823.000000\n8823.000000\n...\n8824.000000\n8823.000000\n8824.000000\n8824.000000\n8824.000000\n8822.000000\n8824.000000\n8824.000000\n8822.000000\n8823.000000\n\n\nmean\n87.977559\n87.972575\n87.987534\n88.012466\n87.983791\n88.007480\n87.977561\n88.000000\n88.022441\n88.022441\n...\n87.972575\n87.977559\n87.972575\n87.987534\n88.012466\n87.983791\n88.007480\n87.977561\n88.000000\n88.022441\n\n\nstd\n47.535911\n47.535523\n47.521679\n47.521679\n47.535001\n47.519371\n47.529755\n47.536879\n47.535911\n47.535911\n...\n47.535523\n47.535911\n47.535523\n47.521679\n47.521679\n47.535001\n47.519371\n47.529755\n47.536879\n47.535911\n\n\nmin\n11.000000\n11.000000\n11.000000\n11.000000\n11.000000\n11.000000\n11.000000\n11.000000\n11.000000\n11.000000\n...\n11.000000\n11.000000\n11.000000\n11.000000\n11.000000\n11.000000\n11.000000\n11.000000\n11.000000\n11.000000\n\n\n25%\n44.000000\n44.000000\n44.000000\n44.000000\n44.000000\n44.000000\n44.000000\n44.000000\n44.000000\n44.000000\n...\n44.000000\n44.000000\n44.000000\n44.000000\n44.000000\n44.000000\n44.000000\n44.000000\n44.000000\n44.000000\n\n\n50%\n88.000000\n88.000000\n88.000000\n88.000000\n88.000000\n88.000000\n88.000000\n88.000000\n88.000000\n88.000000\n...\n88.000000\n88.000000\n88.000000\n88.000000\n88.000000\n88.000000\n88.000000\n88.000000\n88.000000\n88.000000\n\n\n75%\n132.000000\n132.000000\n132.000000\n132.000000\n132.000000\n132.000000\n132.000000\n132.000000\n132.000000\n132.000000\n...\n132.000000\n132.000000\n132.000000\n132.000000\n132.000000\n132.000000\n132.000000\n132.000000\n132.000000\n132.000000\n\n\nmax\n165.000000\n165.000000\n165.000000\n165.000000\n165.000000\n165.000000\n165.000000\n165.000000\n165.000000\n165.000000\n...\n165.000000\n165.000000\n165.000000\n165.000000\n165.000000\n165.000000\n165.000000\n165.000000\n165.000000\n165.000000\n\n\n\n\n8 rows × 26 columns"
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#저장",
    "href": "Data_Mining/pandas/pandas.html#저장",
    "title": "Pandas 기본",
    "section": "저장",
    "text": "저장\nCSV, HTML, JSON로 저장해봅시다.\n\nmy_df.to_csv('my_df.csv')\nmy_df.to_html('my_df.html')\nmy_df.to_json('my_df.json')\n\n저장된 내용을 확인해봅시다.\n\nfor filename in ('my_df.csv', 'my_df.html', 'my_df.json'):\n    print('#', filename)\n    with open(filename, 'rt') as f:\n        print(f.read())\n        print()\n\n# my_df.csv\n,hobby,weight,birthyear,children\nalice,Biking,68.5,1985,\nbob,Dancing,83.1,1984,3.0\n\n\n# my_df.html\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr style=\"text-align: right;\"&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;hobby&lt;/th&gt;\n      &lt;th&gt;weight&lt;/th&gt;\n      &lt;th&gt;birthyear&lt;/th&gt;\n      &lt;th&gt;children&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;alice&lt;/th&gt;\n      &lt;td&gt;Biking&lt;/td&gt;\n      &lt;td&gt;68.5&lt;/td&gt;\n      &lt;td&gt;1985&lt;/td&gt;\n      &lt;td&gt;NaN&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;bob&lt;/th&gt;\n      &lt;td&gt;Dancing&lt;/td&gt;\n      &lt;td&gt;83.1&lt;/td&gt;\n      &lt;td&gt;1984&lt;/td&gt;\n      &lt;td&gt;3.0&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n\n# my_df.json\n{\"hobby\":{\"alice\":\"Biking\",\"bob\":\"Dancing\"},\"weight\":{\"alice\":68.5,\"bob\":83.1},\"birthyear\":{\"alice\":1985,\"bob\":1984},\"children\":{\"alice\":null,\"bob\":3.0}}\n\n\n\n인덱스는 (이름 없이) CSV 파일의 첫 번째 열에 저장되었습니다. HTML에서는 &lt;th&gt; 태그와 JSON에서는 키로 저장되었습니다.\n다른 포맷으로 저장하는 것도 비슷합니다. 하지만 일부 포맷은 추가적인 라이브러리 설치가 필요합니다. 예를 들어, 엑셀로 저장하려면 openpyxl 라이브러리가 필요합니다.\n\ntry:\n    my_df.to_excel('my_df.xlsx', sheet_name='People')\nexcept ImportError as e:\n    print(e)"
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#로딩",
    "href": "Data_Mining/pandas/pandas.html#로딩",
    "title": "Pandas 기본",
    "section": "로딩",
    "text": "로딩\nCSV 파일을 DataFrame으로 로드해봅시다.\n\nmy_df_loaded = pd.read_csv('my_df.csv', index_col=0)\nmy_df_loaded\n\n\n\n\n\n\n\n\nhobby\nweight\nbirthyear\nchildren\n\n\n\n\nalice\nBiking\n68.5\n1985\nNaN\n\n\nbob\nDancing\n83.1\n1984\n3.0\n\n\n\n\n\n\n\n예상할 수 있듯이 read_json, read_html, read_excel 함수도 있습니다. 인터넷에서 데이터를 바로 읽을 수도 있습니다. 예를 들어 깃허브에서 1,000개의 U.S. 도시를 로드해봅시다.\n\nus_cities = None\ntry:\n    csv_url = 'https://raw.githubusercontent.com/plotly/datasets/master/us-cities-top-1k.csv'\n    us_cities = pd.read_csv(csv_url, index_col=0)\n    us_cities = us_cities.head()\nexcept IOError as e:\n    print(e)\nus_cities\n\n\n\n\n\n\n\n\nState\nPopulation\nlat\nlon\n\n\nCity\n\n\n\n\n\n\n\n\nMarysville\nWashington\n63269\n48.051764\n-122.177082\n\n\nPerris\nCalifornia\n72326\n33.782519\n-117.228648\n\n\nCleveland\nOhio\n390113\n41.499320\n-81.694361\n\n\nWorcester\nMassachusetts\n182544\n42.262593\n-71.802293\n\n\nColumbia\nSouth Carolina\n133358\n34.000710\n-81.034814\n\n\n\n\n\n\n\n이외에도 많은 옵션이 있습니다. 특히 datetime 포맷에 관련된 옵션이 많습니다. 더 자세한 내용은 온라인 문서를 참고하세요."
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#sql-조인",
    "href": "Data_Mining/pandas/pandas.html#sql-조인",
    "title": "Pandas 기본",
    "section": "SQL 조인",
    "text": "SQL 조인\n판다스의 강력한 기능 중 하나는 DataFrame에 대해 SQL 같은 조인(join)을 수행할 수 있는 것입니다. 여러 종류의 조인이 지원됩니다. 이너 조인(inner join), 레프트/라이트 아우터 조인(left/right outer join), 풀 조인(full join)입니다. 이에 대해 알아 보기 위해 간단한 DataFrame을 만들어봅시다.\n\ncity_loc = pd.DataFrame(\n    [\n        ['CA', 'San Francisco', 37.781334, -122.416728],\n        ['NY', 'New York', 40.705649, -74.008344],\n        ['FL', 'Miami', 25.791100, -80.320733],\n        ['OH', 'Cleveland', 41.473508, -81.739791],\n        ['UT', 'Salt Lake City', 40.755851, -111.896657]\n    ], columns=['state', 'city', 'lat', 'lng'])\ncity_loc\n\n\n\n\n\n\n\n\nstate\ncity\nlat\nlng\n\n\n\n\n0\nCA\nSan Francisco\n37.781334\n-122.416728\n\n\n1\nNY\nNew York\n40.705649\n-74.008344\n\n\n2\nFL\nMiami\n25.791100\n-80.320733\n\n\n3\nOH\nCleveland\n41.473508\n-81.739791\n\n\n4\nUT\nSalt Lake City\n40.755851\n-111.896657\n\n\n\n\n\n\n\n\ncity_pop = pd.DataFrame(\n    [\n        [808976, 'San Francisco', 'California'],\n        [8363710, 'New York', 'New-York'],\n        [413201, 'Miami', 'Florida'],\n        [2242193, 'Houston', 'Texas']\n    ], index=[3, 4, 5, 6], columns=['population', 'city', 'state'])\ncity_pop\n\n\n\n\n\n\n\n\npopulation\ncity\nstate\n\n\n\n\n3\n808976\nSan Francisco\nCalifornia\n\n\n4\n8363710\nNew York\nNew-York\n\n\n5\n413201\nMiami\nFlorida\n\n\n6\n2242193\nHouston\nTexas\n\n\n\n\n\n\n\n이제 merge() 함수를 사용해 이 DataFrame을 조인해봅시다.\n\npd.merge(left=city_loc, right=city_pop, on='city')\n\n\n\n\n\n\n\n\nstate_x\ncity\nlat\nlng\npopulation\nstate_y\n\n\n\n\n0\nCA\nSan Francisco\n37.781334\n-122.416728\n808976\nCalifornia\n\n\n1\nNY\nNew York\n40.705649\n-74.008344\n8363710\nNew-York\n\n\n2\nFL\nMiami\n25.791100\n-80.320733\n413201\nFlorida\n\n\n\n\n\n\n\n두 DataFrame은 state란 이름의 열을 가지고 있으므로 state_x와 state_y로 이름이 바뀌었습니다.\n또한 Cleveland, Salt Lake City, Houston은 두 DataFrame에 모두 존재하지 않기 때문에 삭제되었습니다. SQL의 INNER JOIN과 동일합니다. 도시를 삭제하지 않고 NaN으로 채우는 FULL OUTER JOIN을 원하면 how='outer'로 지정합니다.\n\nall_cities = pd.merge(left=city_loc, right=city_pop, on='city', how='outer')\nall_cities\n\n\n\n\n\n\n\n\nstate_x\ncity\nlat\nlng\npopulation\nstate_y\n\n\n\n\n0\nCA\nSan Francisco\n37.781334\n-122.416728\n808976.0\nCalifornia\n\n\n1\nNY\nNew York\n40.705649\n-74.008344\n8363710.0\nNew-York\n\n\n2\nFL\nMiami\n25.791100\n-80.320733\n413201.0\nFlorida\n\n\n3\nOH\nCleveland\n41.473508\n-81.739791\nNaN\nNaN\n\n\n4\nUT\nSalt Lake City\n40.755851\n-111.896657\nNaN\nNaN\n\n\n5\nNaN\nHouston\nNaN\nNaN\n2242193.0\nTexas\n\n\n\n\n\n\n\n물론 LEFT OUTER JOIN은 how='left'로 지정할 수 있습니다. 왼쪽의 DataFrame에 있는 도시만 남습니다. 비슷하게 how='right'는 오른쪽 DataFrame에 있는 도시만 결과에 남습니다. 예를 들면,\n\npd.merge(left=city_loc, right=city_pop, on='city', how='right')\n\n\n\n\n\n\n\n\nstate_x\ncity\nlat\nlng\npopulation\nstate_y\n\n\n\n\n0\nCA\nSan Francisco\n37.781334\n-122.416728\n808976\nCalifornia\n\n\n1\nNY\nNew York\n40.705649\n-74.008344\n8363710\nNew-York\n\n\n2\nFL\nMiami\n25.791100\n-80.320733\n413201\nFlorida\n\n\n3\nNaN\nHouston\nNaN\nNaN\n2242193\nTexas\n\n\n\n\n\n\n\n조인할 키가 DataFrame 인덱스라면 left_index=True나 right_index=True로 지정해야 합니다. 키 열의 이름이 다르면 left_on과 right_on을 사용합니다. 예를 들어,\n\ncity_pop2 = city_pop.copy()\ncity_pop2.columns = ['population', 'name', 'state']\ncity_pop2\n\n\n\n\n\n\n\n\npopulation\nname\nstate\n\n\n\n\n3\n808976\nSan Francisco\nCalifornia\n\n\n4\n8363710\nNew York\nNew-York\n\n\n5\n413201\nMiami\nFlorida\n\n\n6\n2242193\nHouston\nTexas\n\n\n\n\n\n\n\n\npd.merge(left=city_loc, right=city_pop2, left_on='city', right_on='name')\n\n\n\n\n\n\n\n\nstate_x\ncity\nlat\nlng\npopulation\nname\nstate_y\n\n\n\n\n0\nCA\nSan Francisco\n37.781334\n-122.416728\n808976\nSan Francisco\nCalifornia\n\n\n1\nNY\nNew York\n40.705649\n-74.008344\n8363710\nNew York\nNew-York\n\n\n2\nFL\nMiami\n25.791100\n-80.320733\n413201\nMiami\nFlorida"
  },
  {
    "objectID": "Data_Mining/pandas/pandas.html#연결",
    "href": "Data_Mining/pandas/pandas.html#연결",
    "title": "Pandas 기본",
    "section": "연결",
    "text": "연결\nDataFrame을 조인하는 대신 그냥 연결할 수도 있습니다. concat() 함수가 하는 일입니다.\n\ncity_loc\n\n\n\n\n\n\n\n\nstate\ncity\nlat\nlng\n\n\n\n\n0\nCA\nSan Francisco\n37.781334\n-122.416728\n\n\n1\nNY\nNew York\n40.705649\n-74.008344\n\n\n2\nFL\nMiami\n25.791100\n-80.320733\n\n\n3\nOH\nCleveland\n41.473508\n-81.739791\n\n\n4\nUT\nSalt Lake City\n40.755851\n-111.896657\n\n\n\n\n\n\n\n\ncity_pop\n\n\n\n\n\n\n\n\npopulation\ncity\nstate\n\n\n\n\n3\n808976\nSan Francisco\nCalifornia\n\n\n4\n8363710\nNew York\nNew-York\n\n\n5\n413201\nMiami\nFlorida\n\n\n6\n2242193\nHouston\nTexas\n\n\n\n\n\n\n\n\nresult_concat = pd.concat([city_loc, city_pop])\nresult_concat\n\n\n\n\n\n\n\n\nstate\ncity\nlat\nlng\npopulation\n\n\n\n\n0\nCA\nSan Francisco\n37.781334\n-122.416728\nNaN\n\n\n1\nNY\nNew York\n40.705649\n-74.008344\nNaN\n\n\n2\nFL\nMiami\n25.791100\n-80.320733\nNaN\n\n\n3\nOH\nCleveland\n41.473508\n-81.739791\nNaN\n\n\n4\nUT\nSalt Lake City\n40.755851\n-111.896657\nNaN\n\n\n3\nCalifornia\nSan Francisco\nNaN\nNaN\n808976.0\n\n\n4\nNew-York\nNew York\nNaN\nNaN\n8363710.0\n\n\n5\nFlorida\nMiami\nNaN\nNaN\n413201.0\n\n\n6\nTexas\nHouston\nNaN\nNaN\n2242193.0\n\n\n\n\n\n\n\n이 연산은 (행을 따라) 수직적으로 데이터를 연결하고 (열을 따라) 수평으로 연결하지 않습니다. 이 예에서 동일한 인덱스를 가진 행이 있습니다(예를 들면 3). 판다스는 이를 우아하게 처리합니다.\n\nresult_concat.loc[3]\n\n\n\n\n\n\n\n\nstate\ncity\nlat\nlng\npopulation\n\n\n\n\n3\nOH\nCleveland\n41.473508\n-81.739791\nNaN\n\n\n3\nCalifornia\nSan Francisco\nNaN\nNaN\n808976.0\n\n\n\n\n\n\n\n또는 인덱스를 무시하도록 설정할 수 있습니다:\n\npd.concat([city_loc, city_pop], ignore_index=True)\n\n\n\n\n\n\n\n\nstate\ncity\nlat\nlng\npopulation\n\n\n\n\n0\nCA\nSan Francisco\n37.781334\n-122.416728\nNaN\n\n\n1\nNY\nNew York\n40.705649\n-74.008344\nNaN\n\n\n2\nFL\nMiami\n25.791100\n-80.320733\nNaN\n\n\n3\nOH\nCleveland\n41.473508\n-81.739791\nNaN\n\n\n4\nUT\nSalt Lake City\n40.755851\n-111.896657\nNaN\n\n\n5\nCalifornia\nSan Francisco\nNaN\nNaN\n808976.0\n\n\n6\nNew-York\nNew York\nNaN\nNaN\n8363710.0\n\n\n7\nFlorida\nMiami\nNaN\nNaN\n413201.0\n\n\n8\nTexas\nHouston\nNaN\nNaN\n2242193.0\n\n\n\n\n\n\n\n한 DataFrame에 열이 없을 때 NaN이 채워져 있는 것처럼 동작합니다. join='inner'로 설정하면 양쪽의 DataFrame에 존재하는 열만 반환됩니다.\n\npd.concat([city_loc, city_pop], join='inner')\n\n\n\n\n\n\n\n\nstate\ncity\n\n\n\n\n0\nCA\nSan Francisco\n\n\n1\nNY\nNew York\n\n\n2\nFL\nMiami\n\n\n3\nOH\nCleveland\n\n\n4\nUT\nSalt Lake City\n\n\n3\nCalifornia\nSan Francisco\n\n\n4\nNew-York\nNew York\n\n\n5\nFlorida\nMiami\n\n\n6\nTexas\nHouston\n\n\n\n\n\n\n\naxis=1로 설정하면 DataFrame을 수직이 아니라 수평으로 연결할 수 있습니다.\n\npd.concat([city_loc, city_pop], axis=1)\n\n\n\n\n\n\n\n\nstate\ncity\nlat\nlng\npopulation\ncity\nstate\n\n\n\n\n0\nCA\nSan Francisco\n37.781334\n-122.416728\nNaN\nNaN\nNaN\n\n\n1\nNY\nNew York\n40.705649\n-74.008344\nNaN\nNaN\nNaN\n\n\n2\nFL\nMiami\n25.791100\n-80.320733\nNaN\nNaN\nNaN\n\n\n3\nOH\nCleveland\n41.473508\n-81.739791\n808976.0\nSan Francisco\nCalifornia\n\n\n4\nUT\nSalt Lake City\n40.755851\n-111.896657\n8363710.0\nNew York\nNew-York\n\n\n5\nNaN\nNaN\nNaN\nNaN\n413201.0\nMiami\nFlorida\n\n\n6\nNaN\nNaN\nNaN\nNaN\n2242193.0\nHouston\nTexas\n\n\n\n\n\n\n\n이 경우 인덱스가 잘 정렬되지 않기 때문에 의미가 없습니다(예를 들어 Cleveland와 San Francisco의 인덱스 레이블이 3이기 때문에 동일한 행에 놓여 있습니다). 이 DataFrame을 연결하기 전에 도시로 인덱스를 재설정해봅시다.\n\npd.concat([city_loc.set_index('city'), city_pop.set_index('city')], axis=1)\n\n\n\n\n\n\n\n\nstate\nlat\nlng\npopulation\nstate\n\n\ncity\n\n\n\n\n\n\n\n\n\nSan Francisco\nCA\n37.781334\n-122.416728\n808976.0\nCalifornia\n\n\nNew York\nNY\n40.705649\n-74.008344\n8363710.0\nNew-York\n\n\nMiami\nFL\n25.791100\n-80.320733\n413201.0\nFlorida\n\n\nCleveland\nOH\n41.473508\n-81.739791\nNaN\nNaN\n\n\nSalt Lake City\nUT\n40.755851\n-111.896657\nNaN\nNaN\n\n\nHouston\nNaN\nNaN\nNaN\n2242193.0\nTexas\n\n\n\n\n\n\n\nFULL OUTER JOIN을 수행한 것과 비슷합니다. 하지만 state 열이 state_x와 state_y로 바뀌지 않았고 city 열이 인덱스가 되었습니다.\n\npd.concat([city_loc, city_pop])\n\n\n\n\n\n\n\n\nstate\ncity\nlat\nlng\npopulation\n\n\n\n\n0\nCA\nSan Francisco\n37.781334\n-122.416728\nNaN\n\n\n1\nNY\nNew York\n40.705649\n-74.008344\nNaN\n\n\n2\nFL\nMiami\n25.791100\n-80.320733\nNaN\n\n\n3\nOH\nCleveland\n41.473508\n-81.739791\nNaN\n\n\n4\nUT\nSalt Lake City\n40.755851\n-111.896657\nNaN\n\n\n3\nCalifornia\nSan Francisco\nNaN\nNaN\n808976.0\n\n\n4\nNew-York\nNew York\nNaN\nNaN\n8363710.0\n\n\n5\nFlorida\nMiami\nNaN\nNaN\n413201.0\n\n\n6\nTexas\nHouston\nNaN\nNaN\n2242193.0\n\n\n\n\n\n\n\n판다스의 다른 메서드와 마찬가지로 append() 메서드는 실제 city_loc을 수정하지 않습니다. 복사본을 만들어 수정한 다음 반환합니다."
  },
  {
    "objectID": "Data_Mining/matplotlib.html",
    "href": "Data_Mining/matplotlib.html",
    "title": "Matplotlib 기본",
    "section": "",
    "text": "Matplotlib 실습"
  },
  {
    "objectID": "Data_Mining/matplotlib.html#강의자료-출처",
    "href": "Data_Mining/matplotlib.html#강의자료-출처",
    "title": "Matplotlib 기본",
    "section": "강의자료 출처",
    "text": "강의자료 출처\n\n원문: by Aurélien Geron (Link)\nTranslated by Chansung PARK (Link)\n\nObject Oriented API Addition by Jehyun LEE (Link)\n\nTools - matplotlib\n이 노트북은 matplotlib 라이브러리를 사용하여 아름다운 그래프를 그리는 방법을 보여줍니다.\n\n이제현 주 : * 원 코드가 pyplot 기반으로 작성되었기에 object oriented API를 추가하였습니다. * pyplot은 pandas 같은 라이브러리와 함께 사용하며 그래프를 빠르게 그려보기 좋습니다. 그러나 코드의 가독성과 섬세한 제어는 object oriented API(객체지향 인터페이스)방식이 더 유리하게 느껴집니다. * pyplot과 object oriented API의 차이에 대해 상세히 알고 싶으시면 이 글을 참고하십시오"
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/Pydeck.html",
    "href": "Data_Mining/Geospatial_Analysis/Pydeck.html",
    "title": "Pydeck 기본",
    "section": "",
    "text": "Pydeck 실습\n\n\nInstall\n\npydeck 설치 가이드 - https://deckgl.readthedocs.io/en/latest/installation.html\n\n강의자료 출처 - https://zzsza.github.io/data/2019/11/24/pydeck/\n현재 pydeck은 3.7-3.9 까지만 호환\n\n\n# %pip install pydeck\n# %pip install pydeck[jupyter]\n\n\n!jupyter nbextension install --sys-prefix --symlink --overwrite --py pydeck\n!jupyter nbextension enable --sys-prefix --py pydeck\n\nInstalling C:\\Users\\user\\anaconda3\\envs\\quartoenv\\lib\\site-packages\\pydeck\\nbextension/static -&gt; pydeck\nRemoving: C:\\Users\\user\\anaconda3\\envs\\quartoenv\\share\\jupyter\\nbextensions\\pydeck\nSymlinking: C:\\Users\\user\\anaconda3\\envs\\quartoenv\\share\\jupyter\\nbextensions\\pydeck -&gt; C:\\Users\\user\\anaconda3\\envs\\quartoenv\\lib\\site-packages\\pydeck\\nbextension\\static\n- Validating: ok\n\n    To initialize this nbextension in the browser every time the notebook (or other app) loads:\n    \n          jupyter nbextension enable pydeck --py --sys-prefix\n    \nEnabling notebook extension pydeck/extensionRequires...\n      - Validating: ok\n\n\n\n# MAPBOX_API_KEY=\"pk.eyJ1Ijoic3BlYXI1MzA2IiwiYSI6ImNremN5Z2FrOTI0ZGgycm45Mzh3dDV6OWQifQ.kXGWHPRjnVAEHgVgLzXn2g\"\n\n\n\n공식 홈페이지 예시\n\nimport pandas as pd\nimport pydeck\n\nUK_ACCIDENTS_DATA = 'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/3d-heatmap/heatmap-data.csv'\n\npd.read_csv(UK_ACCIDENTS_DATA).head()\n\n\n\n\n\n\n\n\nlng\nlat\n\n\n\n\n0\n-0.198465\n51.505538\n\n\n1\n-0.178838\n51.491836\n\n\n2\n-0.205590\n51.514910\n\n\n3\n-0.208327\n51.514952\n\n\n4\n-0.206022\n51.496572\n\n\n\n\n\n\n\n\nlayer = pydeck.Layer(\n    'HexagonLayer',\n    UK_ACCIDENTS_DATA,\n    get_position='[lng,lat]',\n    auto_highlight=True,\n    elevation_scale=50,\n    pickable=True,\n    elevation_range=[0, 3000],\n    extruded=True,                 \n    coverage=1,\n    radius=1000)\n\n# Set the viewport location\nview_state = pydeck.ViewState(\n    longitude=-1.415,\n    latitude=52.2323,\n    zoom=6,\n    min_zoom=5,\n    max_zoom=15,\n    pitch=40.5,\n    bearing=-27.36)\n\n# Combined all of it and render a viewport\nr = pydeck.Deck(layers=[layer], initial_view_state=view_state)\nr.show()\n# r.to_html('demo.html')\n\n\n\n\n\nlayer.elevation_range = [0, 500]\n\nr.update()\n\n\nimport pydeck as pdk\npdk.Deck?\n\n\n\nScatter Plots\n\nimport pandas as pd\nfrom pydeck import (\n    data_utils,\n    Deck,\n    Layer\n)\n\n# First, let's use Pandas to download our data\nURL = 'https://raw.githubusercontent.com/ajduberstein/data_sets/master/beijing_subway_station.csv'\ndf = pd.read_csv(URL)\ndf.head()\n\n\n\n\n\n\n\n\nlat\nlng\nosm_id\nstation_name\nchinese_name\nopening_date\ncolor\nline_name\n\n\n\n\n0\n39.940249\n116.456359\n1351272524\nAgricultural Exhibition Center\n农业展览馆\n2008-07-19\n[0, 146, 188, 255]\nLine 10\n\n\n1\n39.955570\n116.388507\n5057476994\nAndelibeijie\n安德里北街\n2015-12-26\n[0, 155, 119, 255]\nLine 8 (North section)\n\n\n2\n39.947729\n116.402067\n339088654\nAndingmen\n安定门\n1984-09-20\n[0, 75, 135, 255]\nLine 2\n\n\n3\n40.011026\n116.263981\n1362259113\nAnheqiao North\n安河桥北\n2009-09-28\n[0, 140, 149, 255]\nLine 4\n\n\n4\n39.967112\n116.388398\n5305505996\nAnhuaqiao\n安华桥\n2012-12-30\n[0, 155, 119, 255]\nLine 8 (North section)\n\n\n\n\n\n\n\n\nfrom ast import literal_eval\n# We have to re-code position to be one field in a list, so we'll do that here:\n# The CSV encodes the [R, G, B, A] color values listed in it as a string\ndf['color'] = df.apply(lambda x: literal_eval(x['color']), axis=1)\n\n\ndf.head()\n\n\n\n\n\n\n\n\nlat\nlng\nosm_id\nstation_name\nchinese_name\nopening_date\ncolor\nline_name\n\n\n\n\n0\n39.940249\n116.456359\n1351272524\nAgricultural Exhibition Center\n农业展览馆\n2008-07-19\n[0, 146, 188, 255]\nLine 10\n\n\n1\n39.955570\n116.388507\n5057476994\nAndelibeijie\n安德里北街\n2015-12-26\n[0, 155, 119, 255]\nLine 8 (North section)\n\n\n2\n39.947729\n116.402067\n339088654\nAndingmen\n安定门\n1984-09-20\n[0, 75, 135, 255]\nLine 2\n\n\n3\n40.011026\n116.263981\n1362259113\nAnheqiao North\n安河桥北\n2009-09-28\n[0, 140, 149, 255]\nLine 4\n\n\n4\n39.967112\n116.388398\n5305505996\nAnhuaqiao\n安华桥\n2012-12-30\n[0, 155, 119, 255]\nLine 8 (North section)\n\n\n\n\n\n\n\n\n# Use pydeck's data_utils module to fit a viewport to the central 90% of the data\nviewport = data_utils.compute_view(points=df[['lng', 'lat']], view_proportion=0.9)\nauto_zoom_map = Deck(layers=None, initial_view_state=viewport)\nauto_zoom_map.show()\n\n# auto_zoom_map.to_html('demo.html')\n\n\n\n\n\nfrom IPython.core.display import display\nimport ipywidgets\n\nyear = 2019\n\nscatterplot = Layer(\n    'ScatterplotLayer',\n    df,\n    id='scatterplot-layer',\n    get_radius=500,\n    get_fill_color='color',\n    get_position='[lng, lat]')\nr = Deck(layers=[scatterplot], initial_view_state=viewport)\n\n# Create an HTML header to display the year\ndisplay_el = ipywidgets.HTML('&lt;h1&gt;{}&lt;/h1&gt;'.format(year))\ndisplay(display_el)\n# Show the current visualization\nr.show()\n# r.to_html('demo.html')\n\nC:\\Users\\user\\AppData\\Local\\Temp\\ipykernel_17440\\1358459236.py:1: DeprecationWarning: Importing display from IPython.core.display is deprecated since IPython 7.14, please import from IPython display\n  from IPython.core.display import display\n\n\n\n\n\n\n\n\n\nimport time\nfor y in range(1971, 2020):\n    scatterplot.data = df[df['opening_date'] &lt;= str(y)]\n    year = y\n    # Reset the header to display the year\n    display_el.value = '&lt;h1&gt;{}&lt;/h1&gt;'.format(year)\n    r.update()\n    time.sleep(0.1)\n\n\n\nUsing pydeck to manipulate data\n\nimport pydeck as pdk\n\nDATA_URL = 'https://api.data.gov.sg/v1/transport/taxi-availability'\nCOLOR_RANGE = [\n  [255, 255, 178, 25],\n  [254, 217, 118, 85],\n  [254, 178, 76, 127],\n  [253, 141, 60, 170],\n  [240, 59, 32, 212],\n  [189, 0, 38, 255]\n]\n\n\nimport pandas as pd\nimport requests\n\njson = requests.get(DATA_URL).json()\ndf = pd.DataFrame(json[\"features\"][0][\"geometry\"][\"coordinates\"])\ndf.columns = ['lng', 'lat']\n\nviewport = pdk.data_utils.compute_view(df[['lng', 'lat']])\nlayer = pdk.Layer(\n    'ScreenGridLayer',\n    df,\n    cell_size_pixels=20,\n    color_range=COLOR_RANGE,\n    get_position='[lng, lat]',\n    pickable=True,\n    auto_highlight=True)\nr = pdk.Deck(layers=[layer], initial_view_state=viewport)\n\n\nr.show()\n\n\n\n\n\npd.DataFrame([r.deck_widget.selected_data])\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\nPlotting massive data sets.ipynb\n\nimport pandas as pd\nall_lidar = pd.concat([\n    pd.read_csv('https://raw.githubusercontent.com/ajduberstein/kitti_subset/master/kitti_1.csv'),\n    pd.read_csv('https://raw.githubusercontent.com/ajduberstein/kitti_subset/master/kitti_2.csv'),\n    pd.read_csv('https://raw.githubusercontent.com/ajduberstein/kitti_subset/master/kitti_3.csv'),\n    pd.read_csv('https://raw.githubusercontent.com/ajduberstein/kitti_subset/master/kitti_4.csv'),\n])\n\n# Filter to one frame of data\nlidar = all_lidar[all_lidar['source'] == 136]\nlidar.loc[: , ['x', 'y']] = lidar[['x', 'y']] / 10000\n\n\nimport pydeck as pdk\n\n\npoint_cloud = pdk.Layer(\n    'PointCloudLayer',\n    lidar[['x', 'y', 'z']],\n    get_position='[x, y, z * 10]',\n    get_normal=[0, 0, 1],\n    get_color=[255, 0, 100, 200],\n    pickable=True,  \n    auto_highlight=True,\n    point_size=1)\n\n\nview_state = pdk.data_utils.compute_view(lidar[['x', 'y']], 0.9)\nview_state.max_pitch = 360\nview_state.pitch = 80\nview_state.bearing = 120\n\nr = pdk.Deck(\n    point_cloud,\n    initial_view_state=view_state,\n    map_style='')\nr.show()\n\n\n\n\n\nimport time\nfrom collections import deque\n\n# Choose a handful of frames to loop through\nframe_buffer = deque([42, 56, 81, 95])\nprint('Press the stop icon to exit')\nwhile True:\n    current_frame = frame_buffer[0]\n    lidar = all_lidar[all_lidar['source'] == current_frame]\n    r.layers[0].get_position = '[x / 10000, y / 10000, z * 10]'\n    r.layers[0].data = lidar.to_dict(orient='records')\n    frame_buffer.rotate()\n    r.update()\n    time.sleep(0.5)\n\nPress the stop icon to exit\n\n\n\n\nInteracting with other Jupyter widgets.ipynb\n\nimport pandas as pd\nimport pydeck as pdk\n\nLIGHTS_URL = 'https://raw.githubusercontent.com/ajduberstein/lights_at_night/master/chengdu_lights_at_night.csv'\ndf = pd.read_csv(LIGHTS_URL)\ndf.head()\n\n\n\n\n\n\n\n\nyear\nlng\nlat\nbrightness\n\n\n\n\n0\n1993\n104.575\n31.808\n4\n\n\n1\n1993\n104.583\n31.808\n4\n\n\n2\n1993\n104.592\n31.808\n4\n\n\n3\n1993\n104.600\n31.808\n4\n\n\n4\n1993\n104.675\n31.808\n4\n\n\n\n\n\n\n\n\ndf['color'] = df['brightness'].apply(lambda val: [255, val * 4,  255, 255])\ndf.sample(10)\n\n\n\n\n\n\n\n\nyear\nlng\nlat\nbrightness\ncolor\n\n\n\n\n35303\n1997\n103.883\n29.550\n4\n[255, 16, 255, 255]\n\n\n75226\n2009\n103.992\n30.367\n6\n[255, 24, 255, 255]\n\n\n24019\n1997\n103.775\n30.800\n4\n[255, 16, 255, 255]\n\n\n60366\n2009\n104.017\n31.267\n5\n[255, 20, 255, 255]\n\n\n84381\n2009\n104.983\n29.575\n8\n[255, 32, 255, 255]\n\n\n222765\n2011\n104.450\n31.375\n6\n[255, 24, 255, 255]\n\n\n64172\n2009\n104.650\n31.000\n7\n[255, 28, 255, 255]\n\n\n94879\n2001\n104.858\n31.025\n5\n[255, 20, 255, 255]\n\n\n64132\n2009\n104.133\n31.000\n8\n[255, 32, 255, 255]\n\n\n9067\n1993\n103.633\n30.600\n4\n[255, 16, 255, 255]\n\n\n\n\n\n\n\n\nplottable = df[df['year'] == 1993].to_dict(orient='records')\n\nview_state = pdk.ViewState(\n    latitude=31.0,\n    longitude=104.5,\n    zoom=8,\n    max_zoom=8,\n    min_zoom=8)\nscatterplot = pdk.Layer(\n    'HexagonLayer', # HeatmapLayer\n    data=plottable,\n    get_position='[lng, lat]',\n    get_weight='brightness',\n    opacity=0.5,\n    pickable=False,\n    get_radius=800)\nr = pdk.Deck(\n    layers=[scatterplot],\n    initial_view_state=view_state,\n    views=[pdk.View(type='MapView', controller=None)])\nr.show()\n\n\n\n\n\nimport ipywidgets as widgets\nfrom IPython.display import display\nslider = widgets.IntSlider(1992, min=1993, max=2013, step=2)\ndef on_change(v):\n    results = df[df['year'] == slider.value].to_dict(orient='records')\n    scatterplot.data = results\n    r.update()\n    \nslider.observe(on_change, names='value')\ndisplay(slider)\n\n\n\n\n\ntooltip = {\n   \"html\": \"&lt;b&gt;Elevation Value:&lt;/b&gt; {elevationValue}\",\n   \"style\": {\n        \"backgroundColor\": \"steelblue\",\n        \"color\": \"white\"\n   }\n}\n\n\n\nTooltip\n\nimport pydeck as pdk\n\nlayer = pdk.Layer(\n    'HexagonLayer',\n    UK_ACCIDENTS_DATA,\n    get_position='[lng, lat]',\n    auto_highlight=True,\n    elevation_scale=50,\n    pickable=True,\n    elevation_range=[0, 3000],\n    extruded=True,\n    coverage=1)\n\n# Set the viewport location\nview_state = pdk.ViewState(\n    longitude=-1.415,\n    latitude=52.2323,\n    zoom=6,\n    min_zoom=5,\n    max_zoom=15,\n    pitch=40.5,\n    bearing=-27.36)\n\n# Combined all of it and render a viewport\nr = pdk.Deck(\n    layers=[layer],\n    initial_view_state=view_state,\n    tooltip={\n        'html': '&lt;b&gt;Elevation Value:&lt;/b&gt; {elevationValue}',\n        'style': {\n            'color': 'white'\n        }\n    }\n)\nr.show()\n\n\n\n\n\n그냥 텍스트로 하기\n\n\nimport pydeck as pdk\n\nlayer = pdk.Layer(\n    'HexagonLayer',\n    UK_ACCIDENTS_DATA,\n    get_position='[lng, lat]',\n    auto_highlight=True,\n    elevation_scale=50,\n    pickable=True,\n    elevation_range=[0, 3000],\n    extruded=True,\n    coverage=1)\n\n# Set the viewport location\nview_state = pdk.ViewState(\n    longitude=-1.415,\n    latitude=52.2323,\n    zoom=6,\n    min_zoom=5,\n    max_zoom=15,\n    pitch=40.5,\n    bearing=-27.36)\n\n# Combined all of it and render a viewport\nr = pdk.Deck(\n    layers=[layer],\n    initial_view_state=view_state,\n    tooltip = {\n    \"text\": \"Elevation: {elevationValue}\"\n    }\n)\nr.show()\n\n\n\n\n\n\nTooltip을 그냥 True값만 주기\n\n\nimport pydeck as pdk\n\nlayer = pdk.Layer(\n    'HexagonLayer',\n    UK_ACCIDENTS_DATA,\n    get_position='[lng, lat]',\n    auto_highlight=True,\n    elevation_scale=50,\n    pickable=True,\n    elevation_range=[0, 3000],\n    extruded=True,\n    coverage=1)\n\n# Set the viewport location\nview_state = pdk.ViewState(\n    longitude=-1.415,\n    latitude=52.2323,\n    zoom=6,\n    min_zoom=5,\n    max_zoom=15,\n    pitch=40.5,\n    bearing=-27.36)\n\n# Combined all of it and render a viewport\nr = pdk.Deck(\n    layers=[layer],\n    initial_view_state=view_state,\n    tooltip=True\n)\nr.show()\n\n\n\n\n\nUK_ACCIDENTS_DATA = 'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/3d-heatmap/heatmap-data.csv'\n\nuk_data = pd.read_csv(UK_ACCIDENTS_DATA)\n\n\nuk_data.head()\n\n\n\n\n\n\n\n\nlng\nlat\n\n\n\n\n0\n-0.198465\n51.505538\n\n\n1\n-0.178838\n51.491836\n\n\n2\n-0.205590\n51.514910\n\n\n3\n-0.208327\n51.514952\n\n\n4\n-0.206022\n51.496572\n\n\n\n\n\n\n\n\n\n미국 택시 데이터 시각화\n\nimport pandas as pd\nimport pydata_google_auth\n\nSCOPES = [\n  'https://www.googleapis.com/auth/cloud-platform',\n  'https://www.googleapis.com/auth/drive',\n  'https://www.googleapis.com/auth/bigquery'\n]\n\ncredentials = pydata_google_auth.get_user_credentials(\nSCOPES, auth_local_webserver=True)\n\nPlease visit this URL to authorize this application: https://accounts.google.com/o/oauth2/auth?response_type=code&client_id=262006177488-3425ks60hkk80fssi9vpohv88g6q1iqd.apps.googleusercontent.com&redirect_uri=http%3A%2F%2Flocalhost%3A8080%2F&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fcloud-platform+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fbigquery&state=pH3LUMkjRirs4N7GWMTcomXq5ircWi&access_type=offline\n\n\n\nquery = \"\"\"\nSELECT \n    *\nFROM `bigquery-public-data.new_york_taxi_trips.tlc_yellow_trips_2015` \nWHERE EXTRACT(MONTH from pickup_datetime) = 1\nLIMIT 10000\n\"\"\"\n\n\n# %%time\ntaxi_df = pd.read_gbq(query=query, dialect='standard', project_id='persuasive-zoo-147513', credentials=credentials)\n\nGenericGBQException: Reason: 403 POST https://bigquery.googleapis.com/bigquery/v2/projects/persuasive-zoo-147513/jobs?prettyPrint=false: Access Denied: Project persuasive-zoo-147513: User does not have bigquery.jobs.create permission in project persuasive-zoo-147513.\n\nLocation: None\nJob ID: 9c7a150b-0c58-4f25-ae01-5d317dabc780\n\n\n\ntaxi_df\n\n\n\n\n\n\n\n\nvendor_id\npickup_datetime\ndropoff_datetime\npassenger_count\ntrip_distance\npickup_longitude\npickup_latitude\nrate_code\nstore_and_fwd_flag\ndropoff_longitude\ndropoff_latitude\npayment_type\nfare_amount\nextra\nmta_tax\ntip_amount\ntolls_amount\nimp_surcharge\ntotal_amount\n\n\n\n\n0\n1\n2015-01-02 16:26:22\n2015-01-02 16:51:10\n2\n2.50\n-73.993172\n40.762901\n&lt;NA&gt;\nN\n-73.962097\n40.763584\n1\n15.7\n1.0\n0.5\n3.50\n0.0\n0.0\n21.00\n\n\n1\n1\n2015-01-16 17:13:00\n2015-01-16 17:16:10\n1\n0.40\n-73.961601\n40.771229\n&lt;NA&gt;\nN\n-73.959419\n40.775253\n1\n4.0\n1.0\n0.5\n1.15\n0.0\n0.3\n6.95\n\n\n2\n2\n2015-01-24 04:25:01\n2015-01-24 04:41:43\n2\n4.64\n-74.000595\n40.737167\n&lt;NA&gt;\nN\n-73.995499\n40.680763\n1\n16.0\n0.5\n0.5\n19.50\n0.0\n0.3\n36.80\n\n\n3\n2\n2015-01-30 14:29:58\n2015-01-30 15:27:13\n1\n18.39\n-73.989914\n40.729706\n&lt;NA&gt;\nN\n-73.782310\n40.644180\n1\n52.0\n0.0\n0.5\n5.50\n0.0\n0.3\n58.30\n\n\n4\n1\n2015-01-14 21:24:13\n2015-01-14 21:25:55\n1\n0.50\n-73.954849\n40.773220\n&lt;NA&gt;\nN\n-73.959801\n40.769432\n1\n3.5\n0.5\n0.5\n0.96\n0.0\n0.3\n5.76\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n9995\n1\n2015-01-24 22:49:17\n2015-01-24 22:56:20\n2\n0.70\n-74.004578\n40.724056\n&lt;NA&gt;\nN\n-74.006958\n40.732971\n1\n6.0\n0.5\n0.5\n1.80\n0.0\n0.3\n9.10\n\n\n9996\n2\n2015-01-21 18:20:27\n2015-01-21 18:30:16\n6\n1.14\n-74.000038\n40.748291\n&lt;NA&gt;\nN\n-73.990608\n40.738071\n1\n8.0\n1.0\n0.5\n1.80\n0.0\n0.3\n11.60\n\n\n9997\n2\n2015-01-09 20:35:23\n2015-01-09 20:43:55\n1\n2.00\n-73.974876\n40.748661\n&lt;NA&gt;\nN\n-73.980530\n40.768021\n1\n8.5\n0.5\n0.5\n1.80\n0.0\n0.3\n11.60\n\n\n9998\n2\n2015-01-31 22:01:33\n2015-01-31 22:11:22\n1\n1.42\n-73.984718\n40.728447\n&lt;NA&gt;\nN\n-73.975380\n40.745564\n1\n8.5\n0.5\n0.5\n1.80\n0.0\n0.3\n11.60\n\n\n9999\n2\n2015-01-13 13:40:14\n2015-01-13 13:51:28\n5\n1.57\n-73.981232\n40.747498\n&lt;NA&gt;\nN\n-73.998116\n40.733883\n1\n9.0\n0.0\n0.5\n1.80\n0.0\n0.3\n11.60\n\n\n\n\n10000 rows × 19 columns\n\n\n\n\n\nGridLayer\n\n10만개 데이터\n\n\narc_layer = pdk.Layer(\n    'GridLayer',\n    taxi_df,\n    get_position='[pickup_longitude, pickup_latitude]',\n    pickable=True, \n    auto_highlight=True,\n    tooltip=True\n)\n\nnyc_center = [-73.9808, 40.7648] \nview_state = pdk.ViewState(longitude=nyc_center[0], latitude=nyc_center[1], zoom=9)\n\nr = pdk.Deck(layers=[arc_layer], initial_view_state=view_state)\nr.show()\n\n\n\n\n\n\nArc Layer\n\nzip_code_query = \"\"\"\nWITH base_data AS \n(\n  SELECT \n    nyc_taxi.*, \n    pickup.zip_code as pickup_zip_code,\n    pickup.internal_point_lat as pickup_zip_code_lat,\n    pickup.internal_point_lon as pickup_zip_code_lon,\n    dropoff.zip_code as dropoff_zip_code,\n    dropoff.internal_point_lat as dropoff_zip_code_lat,\n    dropoff.internal_point_lon as dropoff_zip_code_lon\n  FROM (\n    SELECT *\n    FROM `bigquery-public-data.new_york_taxi_trips.tlc_yellow_trips_2015`\n    WHERE \n        EXTRACT(MONTH from pickup_datetime) = 1\n        and pickup_latitude &lt;= 90 and pickup_latitude &gt;= -90\n        and dropoff_latitude &lt;= 90 and dropoff_latitude &gt;= -90\n    ) AS nyc_taxi\n  JOIN (\n    SELECT zip_code, state_code, state_name, city, county, zip_code_geom, internal_point_lat, internal_point_lon \n    FROM `bigquery-public-data.geo_us_boundaries.zip_codes`\n    WHERE state_code='NY'\n    ) AS pickup \n  ON ST_CONTAINS(pickup.zip_code_geom, st_geogpoint(pickup_longitude, pickup_latitude))\n  JOIN (\n    SELECT zip_code, state_code, state_name, city, county, zip_code_geom, internal_point_lat, internal_point_lon \n    FROM `bigquery-public-data.geo_us_boundaries.zip_codes`\n    WHERE state_code='NY' \n    ) AS dropoff\n  ON ST_CONTAINS(dropoff.zip_code_geom, st_geogpoint(dropoff_longitude, dropoff_latitude))\n  \n)\n\nSELECT \n  *\nFROM base_data \nlimit 10000\n\"\"\"\n\n\n%%time\ntaxi_df_by_zipcode = pd.read_gbq(query=zip_code_query, dialect='standard', project_id='persuasive-zoo-147513', credentials=credentials)\n\nWall time: 36.5 s\n\n\n\ntaxi_df_by_zipcode.head(3)\n\n\n\n\n\n\n\n\nvendor_id\npickup_datetime\ndropoff_datetime\npassenger_count\ntrip_distance\npickup_longitude\npickup_latitude\nrate_code\nstore_and_fwd_flag\ndropoff_longitude\n...\ntip_amount\ntolls_amount\nimp_surcharge\ntotal_amount\npickup_zip_code\npickup_zip_code_lat\npickup_zip_code_lon\ndropoff_zip_code\ndropoff_zip_code_lat\ndropoff_zip_code_lon\n\n\n\n\n0\n2\n2015-01-20 09:57:47\n2015-01-20 10:14:24\n1\n2.54\n-74.014793\n40.714111\n&lt;NA&gt;\nN\n-73.991997\n...\n2.5\n0.0\n0.3\n15.8\n10280\n40.709073\n-74.016423\n10003\n40.731829\n-73.989181\n\n\n1\n1\n2015-01-15 04:50:46\n2015-01-15 05:01:29\n1\n2.30\n-74.015938\n40.710976\n&lt;NA&gt;\nN\n-73.996552\n...\n0.0\n0.0\n0.3\n11.3\n10280\n40.709073\n-74.016423\n10011\n40.742043\n-74.000620\n\n\n2\n2\n2015-01-22 09:31:00\n2015-01-22 09:50:42\n1\n4.13\n-73.989738\n40.701981\n&lt;NA&gt;\nN\n-74.007828\n...\n2.0\n0.0\n0.3\n19.8\n11201\n40.693700\n-73.989859\n10011\n40.742043\n-74.000620\n\n\n\n\n3 rows × 25 columns\n\n\n\n\n\narc_layer = pdk.Layer(\n    'ArcLayer',\n    taxi_df_by_zipcode,\n    get_source_position='[pickup_zip_code_lon, pickup_zip_code_lat]',\n    get_target_position='[dropoff_zip_code_lon, dropoff_zip_code_lat]',\n    get_source_color='[255, 255, 120]', \n    get_target_color='[255, 0, 0]',\n    get_widht='elevationValue',\n    pickable=True, \n    auto_highlight=True,\n)\n\nnyc_center = [-73.9808, 40.7648] \nview_state = pdk.ViewState(longitude=nyc_center[0], latitude=nyc_center[1], zoom=9)\n\nr = pdk.Deck(layers=[arc_layer], initial_view_state=view_state)\nr.show()\n\n\n\n\n\n\nAggregate\n\nagg_query = \"\"\"\nWITH base_data AS \n(\n  SELECT \n    nyc_taxi.*, \n    pickup.zip_code as pickup_zip_code,\n    pickup.internal_point_lat as pickup_zip_code_lat,\n    pickup.internal_point_lon as pickup_zip_code_lon,\n    dropoff.zip_code as dropoff_zip_code,\n    dropoff.internal_point_lat as dropoff_zip_code_lat,\n    dropoff.internal_point_lon as dropoff_zip_code_lon\n  FROM (\n    SELECT *\n    FROM `bigquery-public-data.new_york_taxi_trips.tlc_yellow_trips_2015`\n    WHERE \n        EXTRACT(MONTH from pickup_datetime) = 1\n        and pickup_latitude &lt;= 90 and pickup_latitude &gt;= -90\n        and dropoff_latitude &lt;= 90 and dropoff_latitude &gt;= -90\n    ) AS nyc_taxi\n  JOIN (\n    SELECT zip_code, state_code, state_name, city, county, zip_code_geom, internal_point_lat, internal_point_lon \n    FROM `bigquery-public-data.geo_us_boundaries.zip_codes`\n    WHERE state_code='NY'\n    ) AS pickup \n  ON ST_CONTAINS(pickup.zip_code_geom, st_geogpoint(pickup_longitude, pickup_latitude))\n  JOIN (\n    SELECT zip_code, state_code, state_name, city, county, zip_code_geom, internal_point_lat, internal_point_lon \n    FROM `bigquery-public-data.geo_us_boundaries.zip_codes`\n    WHERE state_code='NY' \n    ) AS dropoff\n  ON ST_CONTAINS(dropoff.zip_code_geom, st_geogpoint(dropoff_longitude, dropoff_latitude))\n  \n)\n\nSELECT \n  pickup_zip_code,\n  pickup_zip_code_lat,\n  pickup_zip_code_lon,\n  dropoff_zip_code,\n  dropoff_zip_code_lat,\n  dropoff_zip_code_lon,\n  COUNT(*) AS cnt\nFROM base_data \nGROUP BY 1,2,3,4,5,6\nlimit 10000\n\"\"\"\n\n\n%%time\nagg_df = pd.read_gbq(query=agg_query, dialect='standard', project_id='persuasive-zoo-147513', credentials=credentials)\n\nWall time: 15.9 s\n\n\n\nagg_df.head()\n\n\n\n\n\n\n\n\npickup_zip_code\npickup_zip_code_lat\npickup_zip_code_lon\ndropoff_zip_code\ndropoff_zip_code_lat\ndropoff_zip_code_lon\ncnt\n\n\n\n\n0\n11693\n40.590916\n-73.809715\n11414\n40.657604\n-73.844804\n1\n\n\n1\n10040\n40.858314\n-73.930494\n10040\n40.858314\n-73.930494\n139\n\n\n2\n10473\n40.818690\n-73.858474\n10030\n40.818267\n-73.942856\n1\n\n\n3\n10451\n40.820454\n-73.925066\n10031\n40.825288\n-73.950045\n93\n\n\n4\n11209\n40.621993\n-74.030134\n11228\n40.616698\n-74.013066\n28\n\n\n\n\n\n\n\n\nagg_df = agg_df.sort_values('cnt', ascending=False)\n\n\nagg_df = agg_df[:100]\n\n\n\narc_layer = pdk.Layer(\n    'ArcLayer',\n    agg_df,\n    get_source_position='[pickup_zip_code_lon, pickup_zip_code_lat]',\n    get_target_position='[dropoff_zip_code_lon, dropoff_zip_code_lat]',\n    get_source_color='[255, 255, 120]', \n    get_target_color='[255, 0, 0]',\n    width_units='meters',\n    get_width=\"1+10*cnt/500\",\n    pickable=True, \n    auto_highlight=True,\n)\n\nnyc_center = [-73.9808, 40.7648] \nview_state = pdk.ViewState(longitude=nyc_center[0], latitude=nyc_center[1], zoom=9)\n\nr = pdk.Deck(layers=[arc_layer], initial_view_state=view_state,\n             tooltip={\n                 'html': '&lt;b&gt;count:&lt;/b&gt; {cnt}',\n                 'style': {\n                     'color': 'white'\n                 }\n             }\n            )\nr.show()\n\n\n\n\n\n\n요일별 위젯\n\nagg_query2 = \"\"\"\nWITH base_data AS \n(\n  SELECT \n    nyc_taxi.*, \n    pickup.zip_code as pickup_zip_code,\n    pickup.internal_point_lat as pickup_zip_code_lat,\n    pickup.internal_point_lon as pickup_zip_code_lon,\n    dropoff.zip_code as dropoff_zip_code,\n    dropoff.internal_point_lat as dropoff_zip_code_lat,\n    dropoff.internal_point_lon as dropoff_zip_code_lon\n  FROM (\n    SELECT *\n    FROM `bigquery-public-data.new_york_taxi_trips.tlc_yellow_trips_2015`\n    WHERE \n        EXTRACT(MONTH from pickup_datetime) = 1\n        and pickup_latitude &lt;= 90 and pickup_latitude &gt;= -90\n        and dropoff_latitude &lt;= 90 and dropoff_latitude &gt;= -90\n    LIMIT 100000\n    ) AS nyc_taxi\n  JOIN (\n    SELECT zip_code, state_code, state_name, city, county, zip_code_geom, internal_point_lat, internal_point_lon \n    FROM `bigquery-public-data.geo_us_boundaries.zip_codes`\n    WHERE state_code='NY'\n    ) AS pickup \n  ON ST_CONTAINS(pickup.zip_code_geom, st_geogpoint(pickup_longitude, pickup_latitude))\n  JOIN (\n    SELECT zip_code, state_code, state_name, city, county, zip_code_geom, internal_point_lat, internal_point_lon \n    FROM `bigquery-public-data.geo_us_boundaries.zip_codes`\n    WHERE state_code='NY' \n    ) AS dropoff\n  ON ST_CONTAINS(dropoff.zip_code_geom, st_geogpoint(dropoff_longitude, dropoff_latitude))\n  \n)\n\nSELECT \n  CAST(format_datetime('%u', pickup_datetime) AS INT64) -1 AS weekday,\n  pickup_zip_code,\n  pickup_zip_code_lat,\n  pickup_zip_code_lon,\n  dropoff_zip_code,\n  dropoff_zip_code_lat,\n  dropoff_zip_code_lon,\n  COUNT(*) AS cnt\nFROM base_data \nGROUP BY 1,2,3,4,5,6,7\n\"\"\"\n\n\n%%time\nagg_df2 = pd.read_gbq(query=agg_query2, dialect='standard', project_id='persuasive-zoo-147513', credentials=credentials)\n\nWall time: 7.41 s\n\n\n\nagg_df2.head()\n\n\n\n\n\n\n\n\nweekday\npickup_zip_code\npickup_zip_code_lat\npickup_zip_code_lon\ndropoff_zip_code\ndropoff_zip_code_lat\ndropoff_zip_code_lon\ncnt\n\n\n\n\n0\n4\n11214\n40.599148\n-73.996090\n10035\n40.795458\n-73.929570\n1\n\n\n1\n6\n10171\n40.755899\n-73.973858\n11430\n40.646809\n-73.786169\n2\n\n\n2\n5\n10461\n40.847394\n-73.840583\n10475\n40.874375\n-73.823656\n1\n\n\n3\n0\n10172\n40.755273\n-73.974315\n10065\n40.764628\n-73.963144\n1\n\n\n4\n6\n10162\n40.769308\n-73.949924\n11430\n40.646809\n-73.786169\n1\n\n\n\n\n\n\n\n\ndefault_data = agg_df2[agg_df2['weekday'] == 0].to_dict(orient='records')\n\n\narc_layer = pdk.Layer(\n    'ArcLayer',\n    default_data,\n    get_source_position='[pickup_zip_code_lon, pickup_zip_code_lat]',\n    get_target_position='[dropoff_zip_code_lon, dropoff_zip_code_lat]',\n    get_source_color='[255, 255, 120]', \n    get_target_color='[255, 0, 0]',\n    width_units='meters',\n    get_width=\"1+10*cnt/500\",\n    pickable=True, \n    auto_highlight=True,\n)\n\nnyc_center = [-73.9808, 40.7648] \nview_state = pdk.ViewState(longitude=nyc_center[0], latitude=nyc_center[1], zoom=9)\n\nr = pdk.Deck(layers=[arc_layer], initial_view_state=view_state,\n             tooltip={\n                 'html': '&lt;b&gt;count:&lt;/b&gt; {cnt}',\n                 'style': {\n                     'color': 'white'\n                 }\n             }\n            )\nr.show()\n\n\n\n\n\n# Widget 슬라이더 생성\nimport ipywidgets as widgets\nfrom IPython.display import display\nslider = widgets.IntSlider(0, min=0, max=6, step=1)\n\n# Widget에서 사용할 함수 정의 \ndef on_change(v):\n    results = agg_df2[agg_df2['weekday'] == slider.value].to_dict(orient='records')\n    arc_layer.data = results\n    r.update()\n\n# Deck과 슬라이더 연결\nslider.observe(on_change, names='value')\ndisplay(slider)"
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/Exercise5_Proximity_Analysis.html",
    "href": "Data_Mining/Geospatial_Analysis/Exercise5_Proximity_Analysis.html",
    "title": "Exercise5 : Proximity Analysis",
    "section": "",
    "text": "Kaggle Geospatial Analysis Exercise 5\n\n이 노트북은 Kaggle Geospatial Analysis의 Exercise 입니다. 이 링크로 튜토리얼을 볼 수 있습니다.\n\n\n소개\n위기 대응팀의 일원으로 뉴욕 시에서 발생한 충돌 사고에 대해 병원들이 어떻게 대응하고 있는지 파악해봅시다.\n\n\n\n\nimport warnings\nwarnings.filterwarnings(action = 'ignore')\n\nimport math\nimport geopandas as gpd\nimport pandas as pd\nfrom shapely.geometry import MultiPolygon\n\nimport folium\nfrom folium import Choropleth, Marker\nfrom folium.plugins import HeatMap, MarkerCluster\n\nembed_map() 함수를 사용해 지도를 시각화해봅시다.\n\ndef embed_map(m, file_name) :\n    from IPython.display import IFrame\n    m.save(file_name)\n    return IFrame(file_name, width = '100%', height = '500px')\n\n\n1) 충돌 데이터 시각화\n다음 셀을 실행하여 2013~2018년 주요 자동차 충돌을 추적하는 collisions GeoDataFrame을 로드해보세요.\n\ncollisions = gpd.read_file('./geospatial-learn-course-data/NYPD_Motor_Vehicle_Collisions/NYPD_Motor_Vehicle_Collisions/NYPD_Motor_Vehicle_Collisions.shp')\ncollisions.head()\n\n\n\n\n\n\n\n\nDATE\nTIME\nBOROUGH\nZIP CODE\nLATITUDE\nLONGITUDE\nLOCATION\nON STREET\nCROSS STRE\nOFF STREET\n...\nCONTRIBU_2\nCONTRIBU_3\nCONTRIBU_4\nUNIQUE KEY\nVEHICLE TY\nVEHICLE _1\nVEHICLE _2\nVEHICLE _3\nVEHICLE _4\ngeometry\n\n\n\n\n0\n07/30/2019\n0:00\nBRONX\n10464\n40.841100\n-73.784960\n(40.8411, -73.78496)\nNone\nNone\n121 PILOT STREET\n...\nUnspecified\nNone\nNone\n4180045\nSedan\nStation Wagon/Sport Utility Vehicle\nStation Wagon/Sport Utility Vehicle\nNone\nNone\nPOINT (1043750.211 245785.815)\n\n\n1\n07/30/2019\n0:10\nQUEENS\n11423\n40.710827\n-73.770660\n(40.710827, -73.77066)\nJAMAICA AVENUE\n188 STREET\nNone\n...\nNone\nNone\nNone\n4180007\nSedan\nSedan\nNone\nNone\nNone\nPOINT (1047831.185 198333.171)\n\n\n2\n07/30/2019\n0:25\nNone\nNone\n40.880318\n-73.841286\n(40.880318, -73.841286)\nBOSTON ROAD\nNone\nNone\n...\nNone\nNone\nNone\n4179575\nSedan\nStation Wagon/Sport Utility Vehicle\nNone\nNone\nNone\nPOINT (1028139.293 260041.178)\n\n\n3\n07/30/2019\n0:35\nMANHATTAN\n10036\n40.756744\n-73.984590\n(40.756744, -73.98459)\nNone\nNone\n155 WEST 44 STREET\n...\nNone\nNone\nNone\n4179544\nBox Truck\nStation Wagon/Sport Utility Vehicle\nNone\nNone\nNone\nPOINT (988519.261 214979.320)\n\n\n4\n07/30/2019\n10:00\nBROOKLYN\n11223\n40.600090\n-73.965910\n(40.60009, -73.96591)\nAVENUE T\nOCEAN PARKWAY\nNone\n...\nNone\nNone\nNone\n4180660\nStation Wagon/Sport Utility Vehicle\nBike\nNone\nNone\nNone\nPOINT (993716.669 157907.212)\n\n\n\n\n5 rows × 30 columns\n\n\n\nLATITUDE와 LONGITUDE 열을 사용하여 대화형 지도를 만들어 충돌 데이터를 시각화해보세요.\n어떤 유형의 지도가 가장 효과적이라고 생각하시나요?\n\nm_1 = folium.Map(location = [40.7, -74], zoom_start = 11) \n\nHeatMap(data = collisions[['LATITUDE', 'LONGITUDE']], radius = 9).add_to(m_1)\n    \nm_1 # embed_map(m_1, 'q_1.html')\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n2) 병원의 서비스 범위를 이해\n다음 셀을 실행하여 병원 데이터를 로드해보세요.\n\nhospitals = gpd.read_file('./geospatial-learn-course-data/nyu_2451_34494/nyu_2451_34494/nyu_2451_34494.shp')\nhospitals.head()\n\n\n\n\n\n\n\n\nid\nname\naddress\nzip\nfactype\nfacname\ncapacity\ncapname\nbcode\nxcoord\nycoord\nlatitude\nlongitude\ngeometry\n\n\n\n\n0\n317000001H1178\nBRONX-LEBANON HOSPITAL CENTER - CONCOURSE DIVI...\n1650 Grand Concourse\n10457\n3102\nHospital\n415\nBeds\n36005\n1008872.0\n246596.0\n40.843490\n-73.911010\nPOINT (1008872.000 246596.000)\n\n\n1\n317000001H1164\nBRONX-LEBANON HOSPITAL CENTER - FULTON DIVISION\n1276 Fulton Ave\n10456\n3102\nHospital\n164\nBeds\n36005\n1011044.0\n242204.0\n40.831429\n-73.903178\nPOINT (1011044.000 242204.000)\n\n\n2\n317000011H1175\nCALVARY HOSPITAL INC\n1740-70 Eastchester Rd\n10461\n3102\nHospital\n225\nBeds\n36005\n1027505.0\n248287.0\n40.848060\n-73.843656\nPOINT (1027505.000 248287.000)\n\n\n3\n317000002H1165\nJACOBI MEDICAL CENTER\n1400 Pelham Pkwy\n10461\n3102\nHospital\n457\nBeds\n36005\n1027042.0\n251065.0\n40.855687\n-73.845311\nPOINT (1027042.000 251065.000)\n\n\n4\n317000008H1172\nLINCOLN MEDICAL & MENTAL HEALTH CENTER\n234 E 149 St\n10451\n3102\nHospital\n362\nBeds\n36005\n1005154.0\n236853.0\n40.816758\n-73.924478\nPOINT (1005154.000 236853.000)\n\n\n\n\n\n\n\nLATITUDE와 LONGITUDE 열을 사용하여 병원 위치를 시각화해보세요.\n\nm_2 = folium.Map(location=[40.7, -74], zoom_start=11) \n\nfor idx, row in hospitals.iterrows():\n    Marker([row['latitude'], row['longitude']], popup = row['name']).add_to(m_2)\n    \nm_2 # embed_map(m_2, 'q_2.html')\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n3) 가장 가까운 병원이 10km 이상 떨어진 충돌 발생 시점은 언제였나요?\n가장 가까운 병원에서 10km 이상 떨어진 곳에서 발생한 충돌이 있는 collisions의 모든 행을 포함하는 outside_range DataFrame을 생성합니다.\nhospitals와 collisions DataFrame 모두 좌표 참조 시스템 (CRS)로 EPSG 2263을 사용하며, EPSG 2263는 미터 단위를 사용합니다.\n\nbuffer = gpd.GeoDataFrame(geometry = hospitals['geometry']).buffer(10000)\nmy_union = buffer.geometry.unary_union\noutside_range = collisions.loc[~collisions['geometry'].apply(lambda x : my_union.contains(x))]\noutside_range.head()\n\n\n\n\n\n\n\n\nDATE\nTIME\nBOROUGH\nZIP CODE\nLATITUDE\nLONGITUDE\nLOCATION\nON STREET\nCROSS STRE\nOFF STREET\n...\nCONTRIBU_2\nCONTRIBU_3\nCONTRIBU_4\nUNIQUE KEY\nVEHICLE TY\nVEHICLE _1\nVEHICLE _2\nVEHICLE _3\nVEHICLE _4\ngeometry\n\n\n\n\n0\n07/30/2019\n0:00\nBRONX\n10464\n40.841100\n-73.784960\n(40.8411, -73.78496)\nNone\nNone\n121 PILOT STREET\n...\nUnspecified\nNone\nNone\n4180045\nSedan\nStation Wagon/Sport Utility Vehicle\nStation Wagon/Sport Utility Vehicle\nNone\nNone\nPOINT (1043750.211 245785.815)\n\n\n1\n07/30/2019\n0:10\nQUEENS\n11423\n40.710827\n-73.770660\n(40.710827, -73.77066)\nJAMAICA AVENUE\n188 STREET\nNone\n...\nNone\nNone\nNone\n4180007\nSedan\nSedan\nNone\nNone\nNone\nPOINT (1047831.185 198333.171)\n\n\n5\n07/30/2019\n10:50\nQUEENS\n11423\n40.721060\n-73.759450\n(40.72106, -73.75945)\nFRANCIS LEWIS BOULEVARD\nHILLSIDE AVENUE\nNone\n...\nNone\nNone\nNone\n4179812\nSedan\nBox Truck\nNone\nNone\nNone\nPOINT (1050928.749 202069.687)\n\n\n6\n07/30/2019\n10:55\nQUEENS\n11434\n40.676228\n-73.761120\n(40.676228, -73.76112)\nCRANDALL AVENUE\nCHENEY STREET\nNone\n...\nNone\nNone\nNone\n4180464\nStation Wagon/Sport Utility Vehicle\nStation Wagon/Sport Utility Vehicle\nNone\nNone\nNone\nPOINT (1050510.380 185734.852)\n\n\n15\n07/30/2019\n13:05\nNone\nNone\n40.588413\n-74.166725\n(40.588413, -74.166725)\nNone\nNone\n26 RICHMOND HILL ROAD\n...\nNone\nNone\nNone\n4180091\nStation Wagon/Sport Utility Vehicle\nBox Truck\nNone\nNone\nNone\nPOINT (937943.004 153695.210)\n\n\n\n\n5 rows × 30 columns\n\n\n\n다음 셀은 가장 가까운 병원에서 10km 이상 떨어진 곳에서 발생한 충돌의 비율을 계산합니다.\n\npercentage = round(len(outside_range) / len(collisions) * 100, 2)\nprint('Percentage of collisions more than 10km away from the closest hospital : {}%'.format(percentage))\n\nPercentage of collisions more than 10km away from the closest hospital : 15.12%\n\n\n\n\n4) 추천하기\n먼 곳에서 충돌 사고가 발생하면 부상자를 가장 가까운 병원으로 이송하는 것이 더욱 중요해집니다.\n이를 염두에 두고, 다음과 같은 추천을 만들기로 결정합니다.\n\n충돌 위치(EPSG 2263)를 입력으로 받습니다.\n가장 가까운 병원을 찾습니다(거리 계산은 EPSG 2263으로 수행).\n가장 가까운 병원의 이름을 반환합니다.\n\n\ndef best_hospital(collision_location) :\n    idx_min = hospitals['geometry'].distance(collision_location).idxmin()\n    my_hospital = hospitals.iloc[idx_min]\n    name = my_hospital['name']\n    return name\n\nprint(best_hospital(outside_range['geometry'].iloc[0]))\n\nCALVARY HOSPITAL INC\n\n\n\n\n5) 가장 수요가 많은 병원은 어디일까요?\noutside_range DataFrame의 충돌만 고려할 때, 가장 추천하는 병원은 어디일까요?\n정답은 4) 에서 생성한 함수가 반환한 병원 이름과 정확히 일치해야합니다.\n\nhighest_demand = outside_range['geometry'].apply(best_hospital).value_counts().idxmax()\nhighest_demand\n\n'JAMAICA HOSPITAL MEDICAL CENTER'\n\n\n\n\n6) 시에서 새로운 병원을 어디에 건설해야 할까요?\n다음 셀을 실행하여 가장 가까운 병원에서 10km 이상 떨어진 곳에서 발생한 충돌과 병원의 위치를 시각화해보세요.\n\nm_6 = folium.Map(location = [40.7, -74], zoom_start = 11) \n\ncoverage = gpd.GeoDataFrame(geometry = hospitals['geometry']).buffer(10000)\nfolium.GeoJson(coverage.geometry.to_crs(epsg = 4326)).add_to(m_6)\nHeatMap(data = outside_range[['LATITUDE', 'LONGITUDE']], radius = 9).add_to(m_6)\nfolium.LatLngPopup().add_to(m_6)\n\nm_6 # embed_map(m_6, 'm_6.html')\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n지도의 아무 곳이나 클릭하면 해당 위치가 위도와 경도로 표시된 팝업이 표시됩니다.\n뉴욕 시에서 새로운 병원 두 곳의 입지를 결정하는데 도움을 요청하는 연락이 왔습니다. 특히 3) 단계에서 계산된 비율을 10% 미만으로 낮추기 위해 위치를 식별하는데 도움을 요청합니다.\n지도를 사용하여(그리고 구역법이나 병원을 짓기 위해 특정 건물을 철거해야 하는지에 대해 걱정하지 않고) 이 목표를 달성하는데 도움이 될 두 곳의 위치를 찾을 수 있나요?\n병원 1의 제안된 위도와 경도를 각각 lat_1, lon_1으로 할당하세요. (병원 2도 마찬가지입니다.)\n그리고, 다음 셀을 실행하여 새로운 병원의 효과를 확인합니다. 두 개의 새 병원을 통해 백분율이 10% 미만이 되면 정답입니다.\n\nlat_1, lon_1 = 40.6714, -73.8492\nlat_2, lon_2 = 40.6702, -73.7612\n\nnew_df = pd.DataFrame(\n    {'Latitude' : [lat_1, lat_2],\n     'Longitude' : [lon_1, lon_2]})\nnew_gdf = gpd.GeoDataFrame(new_df, geometry = gpd.points_from_xy(new_df['Longitude'], new_df['Latitude']))\nnew_gdf.crs = {'init' : 'epsg:4326'}\nnew_gdf = new_gdf.to_crs(epsg = 2263)\nnew_coverage = gpd.GeoDataFrame(geometry = new_gdf.geometry).buffer(10000)\nnew_my_union = new_coverage.geometry.unary_union\nnew_outside_range = outside_range.loc[~outside_range['geometry'].apply(lambda x : new_my_union.contains(x))]\nnew_percentage = round(len(new_outside_range) / len(collisions) * 100, 2)\nprint('(NEW) Percentage of collisions more than 10km away from the closest hospital : {}%'.format(new_percentage))\nm = folium.Map(location = [40.7, -74], zoom_start = 11) \nfolium.GeoJson(coverage.geometry.to_crs(epsg = 4326)).add_to(m)\nfolium.GeoJson(new_coverage.geometry.to_crs(epsg = 4326)).add_to(m)\nfor idx, row in new_gdf.iterrows() :\n    Marker([row['Latitude'], row['Longitude']]).add_to(m)\nHeatMap(data = new_outside_range[['LATITUDE', 'LONGITUDE']], radius = 9).add_to(m)\nfolium.LatLngPopup().add_to(m)\ndisplay(m) # embed_map(m, 'q_6.html')\n\n(NEW) Percentage of collisions more than 10km away from the closest hospital : 9.12%\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n\n축하합니다!\nGeospatial Analysis 강좌를 완료하였습니다! 고생하셨습니다!\n\nHave questions or comments? Visit the course discussion forum to chat with other learners."
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/Exercise3_Interactive_Maps.html",
    "href": "Data_Mining/Geospatial_Analysis/Exercise3_Interactive_Maps.html",
    "title": "Exercise3 : Interactive Maps",
    "section": "",
    "text": "Kaggle Geospatial Analysis Exercise 3\n\n이 노트북은 Kaggle Geospatial Analysis의 Exercise 입니다. 이 링크로 튜토리얼을 볼 수 있습니다.\n\n\n소개\n일본의 도시 안전 계획가가 일본의 어느 지역에 추가적인 지진 보강이 필요한지 분석하고 있습니다. 인구 밀도가 높고 지진이 발생하기 쉬운 지역은 어디일까요 ?\n\n\n\n\nimport warnings\nwarnings.filterwarnings(action = 'ignore')\n\nimport pandas as pd\nimport geopandas as gpd\n\nimport folium\nfrom folium import Choropleth\nfrom folium.plugins import HeatMap\n\nembed_map() 함수를 정의해 대화형 지도를 표시해봅시다. 이 함수는 지도가 포함된 벼수와 지도가 저장될 HTML 파일의 이름이라는 두가지 인수를 가집니다.\n이 함수는 지도가 모든 웹 브라우저에서 표시되도록 합니다.\n\ndef embed_map(m, file_name) :\n    from IPython.display import IFrame\n    m.save(file_name)\n    return IFrame(file_name, width = '100%', height = '500px')\n\n\n1) 지진이 판의 경계와 일치하나요?\n전 세계 판의 경계를 표시하는 plate_boundaries DataFrame을 생성합니다. coordinates 열은 경계를 따라 (위도, 경도) 위치의 목록입니다.\n\nplate_boundaries = gpd.read_file('./geospatial-learn-course-data/Plate_Boundaries/Plate_Boundaries/Plate_Boundaries.shp')\nplate_boundaries['coordinates'] = plate_boundaries.apply(lambda x : [(b, a) for (a, b) in list(x['geometry'].coords)], axis = 'columns')\nplate_boundaries.drop('geometry', axis = 1, inplace = True)\n\nplate_boundaries.head()\n\n\n\n\n\n\n\n\nHAZ_PLATES\nHAZ_PLAT_1\nHAZ_PLAT_2\nShape_Leng\ncoordinates\n\n\n\n\n0\nTRENCH\nSERAM TROUGH (ACTIVE)\n6722\n5.843467\n[(-5.444200361999947, 133.6808931800001), (-5....\n\n\n1\nTRENCH\nWETAR THRUST\n6722\n1.829013\n[(-7.760600482999962, 125.47879802900002), (-7...\n\n\n2\nTRENCH\nTRENCH WEST OF LUZON (MANILA TRENCH) NORTHERN ...\n6621\n6.743604\n[(19.817899819000047, 120.09999798800004), (19...\n\n\n3\nTRENCH\nBONIN TRENCH\n9821\n8.329381\n[(26.175899215000072, 143.20620700100005), (26...\n\n\n4\nTRENCH\nNEW GUINEA TRENCH\n8001\n11.998145\n[(0.41880004000006466, 132.8273013480001), (0....\n\n\n\n\n\n\n\n과거 지진 데이터를 earthquakes DataFrame으로 로드합니다.\n\nearthquakes = pd.read_csv('./geospatial-learn-course-data/earthquakes1970-2014.csv', parse_dates = ['DateTime'])\nearthquakes.head()\n\n\n\n\n\n\n\n\nDateTime\nLatitude\nLongitude\nDepth\nMagnitude\nMagType\nNbStations\nGap\nDistance\nRMS\nSource\nEventID\n\n\n\n\n0\n1970-01-04 17:00:40.200\n24.139\n102.503\n31.0\n7.5\nMs\n90.0\nNaN\nNaN\n0.0\nNEI\n1.970010e+09\n\n\n1\n1970-01-06 05:35:51.800\n-9.628\n151.458\n8.0\n6.2\nMs\n85.0\nNaN\nNaN\n0.0\nNEI\n1.970011e+09\n\n\n2\n1970-01-08 17:12:39.100\n-34.741\n178.568\n179.0\n6.1\nMb\n59.0\nNaN\nNaN\n0.0\nNEI\n1.970011e+09\n\n\n3\n1970-01-10 12:07:08.600\n6.825\n126.737\n73.0\n6.1\nMb\n91.0\nNaN\nNaN\n0.0\nNEI\n1.970011e+09\n\n\n4\n1970-01-16 08:05:39.000\n60.280\n-152.660\n85.0\n6.0\nML\n0.0\nNaN\nNaN\nNaN\nAK\nNaN\n\n\n\n\n\n\n\n다음 셀로 판의 경계를 지도에 시각화합니다. 모든 지진 데이터를 사용하여 동일한 맵에 히트맵을 추가하여 지진이 판의 경계와 일치하는지 여부를 확인하세요.\n\nm_1 = folium.Map(location = [35, 136], tiles = 'cartodbpositron', zoom_start = 5)\nfor i in range(len(plate_boundaries)) :\n    folium.PolyLine(locations = plate_boundaries['coordinates'].iloc[i], weight = 2, color = 'black').add_to(m_1)\n\nHeatMap(data = earthquakes[['Latitude', 'Longitude']], radius = 15).add_to(m_1)\nm_1 # embed_map(m_1, 'q_1.html')\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n위의 지도를 봤을 때, 지진이 판의 경계와 일치하나요? 네, 일치합니다.\n\n\n2) 일본의 지진 깊이와 판 경계와의 근접성 사이에 관계가 있나요?\n최근 지진의 깊이가 지구의 구조에 대한 중요한 정보를 알려준다는 글이 있습니다. 전 세계적으로 흥미로운 패턴이 있는지 궁금하고, 일본에서는 깊이가 어떻게 달라지는지도 알고 싶습니다.\n\nm_2 = folium.Map(location = [35, 136], tiles = 'cartodbpositron', zoom_start = 5)\n\ndef color_producer(val) :\n    if val &lt; 50 :\n        return 'forestgreen'\n    elif val &lt; 100 : \n        return 'darkorange'\n    else :\n        return 'darkred'\n\nfor i in range(0, len(earthquakes)) :\n    folium.Circle(location = [earthquakes.iloc[i]['Latitude'], earthquakes.iloc[i]['Longitude']],\n                  radius = 2000, color = color_producer(earthquakes.iloc[i]['Depth'])).add_to(m_2)\n\nm_2 # embed_map(m_2, 'q_2.html')\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n판 경계에 대한 근정성과 지진 깊이 사이의 관계를 알 수 있나요? 이 패턴이 전 세계적으로도 유지되나요? 일본에서는 이 패턴이 나타나나요?\n일본 북부에서는 판 경계에 가까운 지진의 깊이가 더 얕은 경향을 띄고, 판 경계에서 멀리 떨어진 지진의 깊이가 더 깊은 경향을 띄고 있습니다.\n이 패턴은 남미 서부 해안과 같은 다른 지역에서도 볼 수 있습니다. 그러나 중국, 몽골, 러시아 등 모든 곳에서 이 패턴이 적용되는 것은 아닙니다.\n\n\n3) 인구 밀도가 높은 도도부현(Prefecture)은 어디일까요?\n일본 도도부현의 지리적 경계를 포함하는 prefectures GeoDataFrame을 생성합니다.\n도도부현(Prefecture) : 일본의 광역 자치 단체인 도, 도, 부, 현을 묶어 이르는 말\n\nprefectures = gpd.read_file('./geospatial-learn-course-data/japan-prefecture-boundaries/japan-prefecture-boundaries/japan-prefecture-boundaries.shp')\nprefectures.set_index('prefecture', inplace = True)\nprefectures.head()\n\n\n\n\n\n\n\n\ngeometry\n\n\nprefecture\n\n\n\n\n\nAichi\nMULTIPOLYGON (((137.09523 34.65330, 137.09546 ...\n\n\nAkita\nMULTIPOLYGON (((139.55725 39.20330, 139.55765 ...\n\n\nAomori\nMULTIPOLYGON (((141.39860 40.92472, 141.39806 ...\n\n\nChiba\nMULTIPOLYGON (((139.82488 34.98967, 139.82434 ...\n\n\nEhime\nMULTIPOLYGON (((132.55859 32.91224, 132.55904 ...\n\n\n\n\n\n\n\n일본 각 도도부현의 인구, 면적(km²) 및 인구 밀도(km² 당)를 포함하는 stats DataFrame을 생성합니다.\n\npopulation = pd.read_csv('./geospatial-learn-course-data/japan-prefecture-population.csv')\npopulation.set_index('prefecture', inplace = True)\n\narea_sqkm = pd.Series(prefectures['geometry'].to_crs(epsg = 32654).area / 10**6, name = 'area_sqkm')\nstats = population.join(area_sqkm)\n\nstats['density'] = stats['population'] / stats['area_sqkm']\nstats.head()\n\n\n\n\n\n\n\n\npopulation\narea_sqkm\ndensity\n\n\nprefecture\n\n\n\n\n\n\n\nTokyo\n12868000\n1800.614782\n7146.448049\n\n\nKanagawa\n8943000\n2383.038975\n3752.771186\n\n\nOsaka\n8801000\n1923.151529\n4576.342460\n\n\nAichi\n7418000\n5164.400005\n1436.372085\n\n\nSaitama\n7130000\n3794.036890\n1879.264806\n\n\n\n\n\n\n\n다음 셀로 인구 밀도를 시각화하는 단계구분도를 시각화하세요.\n\nm_3 = folium.Map(location = [35, 136], tiles = 'cartodbpositron', zoom_start = 5)\n\nChoropleth(geo_data = prefectures.__geo_interface__, \n           data = stats['density'], \n           key_on = 'feature.id', \n           fill_color = 'YlGnBu', \n           legend_name = 'Population Density (per km²)'\n          ).add_to(m_3)\n\nm_3 # embed_map(m_3, 'q_3.html')\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n다른 지역보다 상대적으로 인구 밀도가 높은 3개의 도도부현은 어디인가요? 일본 전역에 퍼져 있나요, 아니면 모두 거의 같은 지역에 위치해있나요?\n(일본 지리에 익숙하지 않다면 밑의 지도가 질문에 답하는데 유용할 수 있습니다.)\n\n\n\n\n도쿄, 가와나가, 오사카 의 인구 밀도가 다른 지역보다 상대적으로 인구 밀도가 높습니다. 이 현들은 모두 일본 중부에 위치하고 있으며, 도쿄와 가와나가는 인접해있습니다.\n\n\n4) 인구 밀도가 높은 현 중 강진이 발생하기 쉬운 현은 어디일까요?\n내진 보강을 해야하는 1개의 현을 제안하는 지도를 만드세요. 지도는 인구 밀도와 지진 규모를 모두 시각화해야합니다.\n\nm_4 = folium.Map(location = [35, 136], tiles = 'cartodbpositron', zoom_start = 5)\n\ndef color_producer(magnitude) :\n    if magnitude &gt; 6.5 :\n        return 'red'\n    else :\n        return 'green'\n\nfor i in range(0, len(earthquakes)) :\n    folium.Circle(location = [earthquakes.iloc[i]['Latitude'], earthquakes.iloc[i]['Longitude']],\n                  popup = (f\"{earthquakes.iloc[i]['Magnitude']} ({earthquakes.iloc[i]['DateTime'].year})\"),\n                  radius = earthquakes.iloc[i]['Magnitude']**5.5,\n                  color = color_producer(earthquakes.iloc[i]['Magnitude'])).add_to(m_4)\n\nChoropleth(geo_data = prefectures.__geo_interface__, \n           data = stats['density'], \n           key_on = 'feature.id', \n           fill_color = 'YlGnBu', \n           legend_name = 'Population Density (per km²)'\n          ).add_to(m_4)\n\nm_4 # embed_map(m_4, 'q_4.html')\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n추가적으로 내진 보강이 필요한 현은 어디인가요?\n이 질문에 대한 명확한 정답은 없지만 몇가지 합리적인 옵션이 있습니다.\n\n도쿄 는 인구밀도가 가장 높은 현이며 지진이 많이 발생한 곳이기도 합니다.\n오사카 는 상대적으로 인구밀도가 낮지만 도쿄 인근 지역보다 상대적으로 강한 지진을 경험했습니다.\n가나가와 는 긴 해안으로 인해 인구 밀도가 높고 역사적으로 강한 지진이 자주 발생했기 때문에 잠재적인 쓰나미 위험에 대해 걱정할 수 있습니다.\n\n\n\n\n그 다음은?\nLesson 4 : Manipulating Geospatial Data 를 통해 지오코딩 을 사용하여 장소 이름을 지리적 좌표로 변환하는 방법을 알아보세요. 또한 여러 GeoDataFrame의 정보를 조인하는 방법에 대해서도 살펴봅시다.\n\nHave questions or comments? Visit the course discussion forum to chat with other learners."
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/Exercise1_Your_First_Map.html",
    "href": "Data_Mining/Geospatial_Analysis/Exercise1_Your_First_Map.html",
    "title": "Exercise1 : Your First Map",
    "section": "",
    "text": "Kaggle Geospatial Analysis Exercise 1\n\n이 노트북은 Kaggle Geospatial Analysis의 Exercise 입니다. 이 링크로 튜토리얼을 볼 수 있습니다.\n\n\n소개\nKiva 는 전 세계 빈곤층에게 금융 서비스를 제공하는 온라인 크라우드펀딩 플랫폼입니다. Kiva의 대출자들은 200만명 이상의 사람들에게 10억 달러 이상의 대출을 제공했습니다.\n\n\n\nKiva는 전 세계 ‘현장 파트너’ 네트워크를 통해 세계에서 가장 외진 곳까지 도달합니다. 이러한 파트너는 지역 사회에서 대출자를 심사하고, 서비스를 제공하며, 대출을 관리하는 지역 단체입니다.\n이 Exercise에서는 필리핀의 Kiva 대출을 조사하게 됩니다. 새로운 현장 파트너를 모집할 기회를 찾기 위해 현재 Kiva의 네트워크 밖에 있을 수 있는 지역을 파악할 수 있나요?\n\nimport geopandas as gpd\n\n\n1) 데이터 불러오기\n다음 셀을 사용하여 loans_filepath에 있는 shapefile을 로드하여 GeoDataFrame world_loans를 만듭니다.\n\nloans_filepath = './geospatial-learn-course-data/kiva_loans/kiva_loans/kiva_loans.shp'\nworld_loans =  gpd.read_file(loans_filepath)\nworld_loans.head()\n\n\n\n\n\n\n\n\nPartner ID\nField Part\nsector\nLoan Theme\ncountry\namount\ngeometry\n\n\n\n\n0\n9\nKREDIT Microfinance Institution\nGeneral Financial Inclusion\nHigher Education\nCambodia\n450\nPOINT (102.89751 13.66726)\n\n\n1\n9\nKREDIT Microfinance Institution\nGeneral Financial Inclusion\nVulnerable Populations\nCambodia\n20275\nPOINT (102.98962 13.02870)\n\n\n2\n9\nKREDIT Microfinance Institution\nGeneral Financial Inclusion\nHigher Education\nCambodia\n9150\nPOINT (102.98962 13.02870)\n\n\n3\n9\nKREDIT Microfinance Institution\nGeneral Financial Inclusion\nVulnerable Populations\nCambodia\n604950\nPOINT (105.31312 12.09829)\n\n\n4\n9\nKREDIT Microfinance Institution\nGeneral Financial Inclusion\nSanitation\nCambodia\n275\nPOINT (105.31312 12.09829)\n\n\n\n\n\n\n\n\n\n2) 데이터 시각화\n다음 셀을 실행하여 국가 경계가 포함된 world GeoDataFrame을 로드합니다.\n\nworld_filepath = gpd.datasets.get_path('naturalearth_lowres')\nworld = gpd.read_file(world_filepath)\nworld.head()\n\n\n\n\n\n\n\n\npop_est\ncontinent\nname\niso_a3\ngdp_md_est\ngeometry\n\n\n\n\n0\n889953.0\nOceania\nFiji\nFJI\n5496\nMULTIPOLYGON (((180.00000 -16.06713, 180.00000...\n\n\n1\n58005463.0\nAfrica\nTanzania\nTZA\n63177\nPOLYGON ((33.90371 -0.95000, 34.07262 -1.05982...\n\n\n2\n603253.0\nAfrica\nW. Sahara\nESH\n907\nPOLYGON ((-8.66559 27.65643, -8.66512 27.58948...\n\n\n3\n37589262.0\nNorth America\nCanada\nCAN\n1736425\nMULTIPOLYGON (((-122.84000 49.00000, -122.9742...\n\n\n4\n328239523.0\nNorth America\nUnited States of America\nUSA\n21433226\nMULTIPOLYGON (((-122.84000 49.00000, -120.0000...\n\n\n\n\n\n\n\nworld와 world_loans GeoDataFrame을 사용하여 전 세계의 Kiva 대출 위치를 시각화합니다.\n\nax = world.plot(figsize = (10, 10), color = 'lightgreen', linestyle = ':', edgecolor = 'black', zorder = 3)\nworld_loans.plot(color = 'maroon', markersize = 2, ax = ax)\n\n&lt;Axes: &gt;\n\n\n\n\n\n\n\n3) 필리핀 대출 선택\n다음으로 필리핀에 기반을 둔 대출에 초점을 맞춥니다. 다음 셀을 사용하여 필리핀에 기반을 둔 대출이 있는 world_loans의 모든 행을 포함하는 GeoDataFrame PHL_loans를 만듭니다.\n\nPHL_loans = world_loans[world_loans['country'] == 'Philippines']\nPHL_loans.head()\n\n\n\n\n\n\n\n\nPartner ID\nField Part\nsector\nLoan Theme\ncountry\namount\ngeometry\n\n\n\n\n2859\n123\nAlalay sa Kaunlaran (ASKI)\nGeneral Financial Inclusion\nGeneral\nPhilippines\n400\nPOINT (121.73961 17.64228)\n\n\n2860\n123\nAlalay sa Kaunlaran (ASKI)\nGeneral Financial Inclusion\nGeneral\nPhilippines\n400\nPOINT (121.74169 17.63235)\n\n\n2861\n123\nAlalay sa Kaunlaran (ASKI)\nGeneral Financial Inclusion\nGeneral\nPhilippines\n400\nPOINT (121.46667 16.60000)\n\n\n2862\n123\nAlalay sa Kaunlaran (ASKI)\nGeneral Financial Inclusion\nGeneral\nPhilippines\n6050\nPOINT (121.73333 17.83333)\n\n\n2863\n123\nAlalay sa Kaunlaran (ASKI)\nGeneral Financial Inclusion\nGeneral\nPhilippines\n625\nPOINT (121.51800 16.72368)\n\n\n\n\n\n\n\n\n\n4) 필리핀 대출 이해\n다음 셀을 실행하여 필리핀의 모든 섬에 대한 경계가 포함된 PHL GeoDataFrame을 로드합니다.\n\ngpd.io.file.fiona.drvsupport.supported_drivers['KML'] = 'rw'\nPHL = gpd.read_file('./geospatial-learn-course-data/Philippines_AL258.kml', driver = 'KML')\nPHL.head()\n\n\n\n\n\n\n\n\nName\nDescription\ngeometry\n\n\n\n\n0\nAutonomous Region in Muslim Mindanao\n\nMULTIPOLYGON (((119.46690 4.58718, 119.46653 4...\n\n\n1\nBicol Region\n\nMULTIPOLYGON (((124.04577 11.57862, 124.04594 ...\n\n\n2\nCagayan Valley\n\nMULTIPOLYGON (((122.51581 17.04436, 122.51568 ...\n\n\n3\nCalabarzon\n\nMULTIPOLYGON (((120.49202 14.05403, 120.49201 ...\n\n\n4\nCaraga\n\nMULTIPOLYGON (((126.45401 8.24400, 126.45407 8...\n\n\n\n\n\n\n\nPHL와 PHL_loans GeoDataFrame을 사용하여 필리핀의 대출 위치를 시각화합니다.\n\nax = PHL.plot(figsize = (5, 5), color = 'whitesmoke', linestyle = ':', edgecolor = 'black', zorder = 3)\nPHL_loans.plot(markersize = 4, ax = ax)\n\n&lt;Axes: &gt;\n\n\n\n\n\n새로운 현장 파트너를 모집하는 데 도움이 될 만한 섬을 식별할 수 있나요? 현재 Kiva의 손이 닿지 않는 섬이 있나요?\n이 지도가 질문에 답하는 데 유용할 수 있습니다.\n   \n여러 잠재적 섬이 있지만, 현재 데이터 세트에서 대출이 없는 비교적 큰 섬으로 민도로(필리핀 중부) 가 눈에 띕니다.\n이 섬은 새로운 필드 파트너를 모집하기에 좋은 장소가 될 수 있습니다!\n\n\n\n그 다음은?\nLesson 2 : Coordinate Reference Systems에 대해서 알아보세요.\n\nHave questions or comments? Visit the course discussion forum to chat with other learners."
  },
  {
    "objectID": "Data_Exploration.html",
    "href": "Data_Exploration.html",
    "title": "Data Exploration",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\n회귀 모델\n\n\n\n\n\n\n\nExploration\n\n\nCode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nNov 16, 2022\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\n지도 학습\n\n\n\n\n\n\n\nExploration\n\n\nCode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nNov 16, 2022\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\n통계 분석\n\n\n\n\n\n\n\nExploration\n\n\nCode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nNov 9, 2022\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\n데이터 시각화 의미와 기법\n\n\n\n\n\n\n\nExploration\n\n\nCode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nOct 5, 2022\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\nR 기초 사용법\n\n\n\n\n\n\n\nExploration\n\n\nCode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nSep 14, 2022\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\n데이터 분석 및 전처리 기법\n\n\n\n\n\n\n\nExploration\n\n\nCode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nSep 14, 2022\n\n\nJinwon Lee\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Data_Exploration/Data_Exploration_CH07.html",
    "href": "Data_Exploration/Data_Exploration_CH07.html",
    "title": "회귀 모델",
    "section": "",
    "text": "salary &lt;- read.csv('./data/regdata.csv')\nhead(salary)\n##   X Incentive Salary negotiated gender year\n## 1 1      12.1    9.5       TRUE      M 2005\n## 2 2       8.9    9.9       TRUE      F 2006\n## 3 3       8.8   18.1       TRUE      M 2007\n## 4 4       7.1   11.8       TRUE      F 2008\n## 5 5      10.2   12.5       TRUE      M 2009\n## 6 6       7.0   10.2       TRUE      F 2005\n\nplot(salary$Incentive[salary$negotiated == TRUE], salary$Salary[salary$negotiated == TRUE])\n\n# 상관계수 =&gt; 약 0.67\ncor(salary$Incentive[salary$negotiated == TRUE], salary$Salary[salary$negotiated == TRUE])\n## [1] 0.6656481\n\nRegResult &lt;- lm(Incentive[negotiated == TRUE] ~ Salary [negotiated == TRUE], data = salary)\nRegResult\n## \n## Call:\n## lm(formula = Incentive[negotiated == TRUE] ~ Salary[negotiated == \n##     TRUE], data = salary)\n## \n## Coefficients:\n##                (Intercept)  Salary[negotiated == TRUE]  \n##                     2.3121                      0.7251\nabline(RegResult) # 회귀선 그리기\n\n\n\n\n\n선형회귀식 : y = 2.31 + 0.725x\n\n\n# Incentive가 10보다 작으면 보다 높은 상관관계가 보일 것\n# -&gt; Incentive &lt;= 10인 Data만 추출하기\ntemp &lt;- subset(salary, salary$Incentive &lt;= 10)\nhead(temp)\n##     X Incentive Salary negotiated gender year\n## 2   2       8.9    9.9       TRUE      F 2006\n## 3   3       8.8   18.1       TRUE      M 2007\n## 4   4       7.1   11.8       TRUE      F 2008\n## 6   6       7.0   10.2       TRUE      F 2005\n## 9   9       8.2   11.4       TRUE      M 2008\n## 11 11       1.9    4.4       TRUE      M 2005\n\ncor(temp$Incentive[temp$negotiated == TRUE], temp$Salary[temp$negotiated == TRUE])\n## [1] 0.5068886\nplot(temp$Incentive[temp$negotiated == TRUE], temp$Salary[temp$negotiated == TRUE])\n\n\n\n\n# Salary가 너무 흩어져 있으므로, Salary가 8보다 큰 것은 제외\n# -&gt; Salary &lt;= 8인 Data만 추출하기\nnew_temp &lt;- subset(temp, temp$Salary &lt;= 8)\nhead(new_temp)\n##     X Incentive Salary negotiated gender year\n## 11 11       1.9    4.4       TRUE      M 2005\n## 19 19       8.4    7.8       TRUE      M 2008\n## 30 30       7.6    7.4       TRUE      F 2009\n## 48 48       4.7    7.6       TRUE      F 2007\n## 63 63       4.3    3.8       TRUE      M 2007\n## 86 86       6.9    5.6       TRUE      F 2005\n\ncor(new_temp$Incentive[new_temp$negotiated == TRUE], new_temp$Salary[new_temp$negotiated == TRUE])\n## [1] 0.8704326\nplot(new_temp$Incentive[new_temp$negotiated == TRUE], new_temp$Salary[new_temp$negotiated == TRUE])\n\nRegResult_new &lt;- lm(Incentive[negotiated == TRUE] ~ Salary [negotiated == TRUE], data = new_temp)\nRegResult_new\n## \n## Call:\n## lm(formula = Incentive[negotiated == TRUE] ~ Salary[negotiated == \n##     TRUE], data = new_temp)\n## \n## Coefficients:\n##                (Intercept)  Salary[negotiated == TRUE]  \n##                     0.9721                      0.9001\nabline(RegResult_new) # 회귀선 그리기\n\n\n\n\n\n선형회귀식 : y = 0.97 + 0.9001x\n\n\nsplit.screen(c(1, 2))\n## [1] 1 2\nscreen(1)\nhist(salary$Incentive)\nscreen(2)\nhist(salary$Salary)\n\n\n\n\nclose.screen(all = TRUE) # plot 창 분할 되돌리기\n\n\nsalary &lt;- read.csv('./data/regdata.csv')\nhead(salary)\n##   X Incentive Salary negotiated gender year\n## 1 1      12.1    9.5       TRUE      M 2005\n## 2 2       8.9    9.9       TRUE      F 2006\n## 3 3       8.8   18.1       TRUE      M 2007\n## 4 4       7.1   11.8       TRUE      F 2008\n## 5 5      10.2   12.5       TRUE      M 2009\n## 6 6       7.0   10.2       TRUE      F 2005\n\ntemp &lt;- subset(salary, salary$gender == 'M')\ntemp2 &lt;- subset(salary, salary$gender == 'F')\n\nsplit.screen(c(2, 2))\n## [1] 1 2 3 4\nscreen(1)\nhist(temp$Incentive)\nscreen(2)\nhist(temp$Salary)\nscreen(3)\nhist(temp2$Incentive)\nscreen(4)\nhist(temp2$Salary)\n\n\n\n\n\n\n\n\nhead(attitude)\n##   rating complaints privileges learning raises critical advance\n## 1     43         51         30       39     61       92      45\n## 2     63         64         51       54     63       73      47\n## 3     71         70         68       69     76       86      48\n## 4     61         63         45       47     54       84      35\n## 5     81         78         56       66     71       83      47\n## 6     43         55         49       44     54       49      34\nmodel &lt;- lm(rating ~ . , data = attitude)\nsummary(model)\n## \n## Call:\n## lm(formula = rating ~ ., data = attitude)\n## \n## Residuals:\n##      Min       1Q   Median       3Q      Max \n## -10.9418  -4.3555   0.3158   5.5425  11.5990 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept) 10.78708   11.58926   0.931 0.361634    \n## complaints   0.61319    0.16098   3.809 0.000903 ***\n## privileges  -0.07305    0.13572  -0.538 0.595594    \n## learning     0.32033    0.16852   1.901 0.069925 .  \n## raises       0.08173    0.22148   0.369 0.715480    \n## critical     0.03838    0.14700   0.261 0.796334    \n## advance     -0.21706    0.17821  -1.218 0.235577    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 7.068 on 23 degrees of freedom\n## Multiple R-squared:  0.7326, Adjusted R-squared:  0.6628 \n## F-statistic:  10.5 on 6 and 23 DF,  p-value: 1.24e-05\n\n\n선형회귀식 : y = 10.79 + 0.613 * complaints - 0.073 * privileges + 0.320 * learning + 0.082 * raises + 0.038 * critical - 0.217 * advance\np-value = 1.24e-05 &lt; 0.05이므로 통계적으로 유의하다.\nAdjusted R-Squared (예측 정확성)은 66.26%이다.\ncomplaints와 learning은 유의하지만 나머지는 유의하지 않다.\n\nbackward을 사용하여 의미없는 변수를 제거.\n\n\n\nreduced &lt;- step(model, direction = 'backward')\n## Start:  AIC=123.36\n## rating ~ complaints + privileges + learning + raises + critical + \n##     advance\n## \n##              Df Sum of Sq    RSS    AIC\n## - critical    1      3.41 1152.4 121.45\n## - raises      1      6.80 1155.8 121.54\n## - privileges  1     14.47 1163.5 121.74\n## - advance     1     74.11 1223.1 123.24\n## &lt;none&gt;                    1149.0 123.36\n## - learning    1    180.50 1329.5 125.74\n## - complaints  1    724.80 1873.8 136.04\n## \n## Step:  AIC=121.45\n## rating ~ complaints + privileges + learning + raises + advance\n## \n##              Df Sum of Sq    RSS    AIC\n## - raises      1     10.61 1163.0 119.73\n## - privileges  1     14.16 1166.6 119.82\n## - advance     1     71.27 1223.7 121.25\n## &lt;none&gt;                    1152.4 121.45\n## - learning    1    177.74 1330.1 123.75\n## - complaints  1    724.70 1877.1 134.09\n## \n## Step:  AIC=119.73\n## rating ~ complaints + privileges + learning + advance\n## \n##              Df Sum of Sq    RSS    AIC\n## - privileges  1     16.10 1179.1 118.14\n## - advance     1     61.60 1224.6 119.28\n## &lt;none&gt;                    1163.0 119.73\n## - learning    1    197.03 1360.0 122.42\n## - complaints  1   1165.94 2328.9 138.56\n## \n## Step:  AIC=118.14\n## rating ~ complaints + learning + advance\n## \n##              Df Sum of Sq    RSS    AIC\n## - advance     1     75.54 1254.7 118.00\n## &lt;none&gt;                    1179.1 118.14\n## - learning    1    186.12 1365.2 120.54\n## - complaints  1   1259.91 2439.0 137.94\n## \n## Step:  AIC=118\n## rating ~ complaints + learning\n## \n##              Df Sum of Sq    RSS    AIC\n## &lt;none&gt;                    1254.7 118.00\n## - learning    1    114.73 1369.4 118.63\n## - complaints  1   1370.91 2625.6 138.16\n# &lt;none&gt;이 가장 위에 표시될 때 까지 'backward' 기법으로 변수를 제거\nsummary(reduced)\n## \n## Call:\n## lm(formula = rating ~ complaints + learning, data = attitude)\n## \n## Residuals:\n##      Min       1Q   Median       3Q      Max \n## -11.5568  -5.7331   0.6701   6.5341  10.3610 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept)   9.8709     7.0612   1.398    0.174    \n## complaints    0.6435     0.1185   5.432 9.57e-06 ***\n## learning      0.2112     0.1344   1.571    0.128    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 6.817 on 27 degrees of freedom\n## Multiple R-squared:  0.708,  Adjusted R-squared:  0.6864 \n## F-statistic: 32.74 on 2 and 27 DF,  p-value: 6.058e-08\n\n\n선형회귀식 : y = 9.87 + 0.643 * complaints - 0.211 * learning\np-value = 6.058e-08 &lt; 0.05이므로 통계적으로 유의하다.\nAdjusted R-Squared (예측 정확성)은 68.64%이다.\n\n\n\n\n\ndata(iris)\nstr(iris)\n## 'data.frame':    150 obs. of  5 variables:\n##  $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n##  $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n##  $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n##  $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n##  $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n\ntemp &lt;- c(sample(1:50, 30), sample(51:100, 30), sample(101:150, 30))\ntemp\n##  [1]  14  18  27  34   2  49  12  16  19  23   5   4   1  44  43  42  31  37  21\n## [20]  35  45   8  47  29  13  41  40  22  17   3  56  83  65  77  96  81  89  67\n## [39]  51  66 100  73  87  74  91  60  54  99  90  84  97  53  88  58  57  59  68\n## [58]  72  78  64 101 135 129 109 132 117 103 141 111 105 119 102 114 138 149 139\n## [77] 147 110 146 140 104 113 150 131 115 118 133 128 122 120\n\n# train set과 test set의 데이터 분할\niris.training &lt;- iris[temp, ]\niris.testing &lt;- iris[-temp, ]\n\nlibrary(nnet)\n\n# 신경망 모델 구축\nneuralNetResult &lt;- nnet(Species ~ .,\n                        data = iris.training,\n                        size = 3,    # 층의 수 : 3 \n                        decay = 0)   # 설정 값 : 0\n## # weights:  27\n## initial  value 113.897756 \n## iter  10 value 46.804233\n## iter  20 value 5.367565\n## iter  30 value 2.944747\n## iter  40 value 2.115424\n## iter  50 value 0.000604\n## iter  60 value 0.000117\n## iter  60 value 0.000075\n## final  value 0.000075 \n## converged\nneuralNetResult\n## a 4-3-3 network with 27 weights\n## inputs: Sepal.Length Sepal.Width Petal.Length Petal.Width \n## output(s): Species \n## options were - softmax modelling\nsummary(neuralNetResult)\n## a 4-3-3 network with 27 weights\n## options were - softmax modelling \n##   b-&gt;h1  i1-&gt;h1  i2-&gt;h1  i3-&gt;h1  i4-&gt;h1 \n## -191.61    1.70  -19.68   24.28   69.45 \n##   b-&gt;h2  i1-&gt;h2  i2-&gt;h2  i3-&gt;h2  i4-&gt;h2 \n##   24.46   57.35  178.70 -221.98  -88.67 \n##   b-&gt;h3  i1-&gt;h3  i2-&gt;h3  i3-&gt;h3  i4-&gt;h3 \n##    0.51    8.89  -15.71   35.38    7.30 \n##   b-&gt;o1  h1-&gt;o1  h2-&gt;o1  h3-&gt;o1 \n##   10.92  -41.22  131.68  -46.63 \n##   b-&gt;o2  h1-&gt;o2  h2-&gt;o2  h3-&gt;o2 \n##   26.38  -95.16  -75.78   67.74 \n##   b-&gt;o3  h1-&gt;o3  h2-&gt;o3  h3-&gt;o3 \n##  -37.44  137.32  -56.21  -20.05\n\nlibrary(devtools)\n## 필요한 패키지를 로딩중입니다: usethis\n# import the function from Github\nsource_url('https://gist.githubusercontent.com/Peque/41a9e20d6687f2f3108d/raw/85e14f3a292e126f1454864427e3a189c2fe33f3/nnet_plot_update.r')\n## ℹ SHA-1 hash of file is \"bf3c7b8ac910823b729e3ce73bb6ab5e6955ad3d\"\nplot.nnet(neuralNetResult) # 신경망 모델 plot\n## 필요한 패키지를 로딩중입니다: scales\n## \n## 다음의 패키지를 부착합니다: 'scales'\n## The following object is masked from 'package:purrr':\n## \n##     discard\n## The following object is masked from 'package:readr':\n## \n##     col_factor\n## 필요한 패키지를 로딩중입니다: reshape\n## \n## 다음의 패키지를 부착합니다: 'reshape'\n## The following object is masked from 'package:lubridate':\n## \n##     stamp\n## The following object is masked from 'package:dplyr':\n## \n##     rename\n## The following objects are masked from 'package:tidyr':\n## \n##     expand, smiths\n\n\n\n\n\npred &lt;- predict(neuralNetResult, iris.testing, type = 'class') # class를 예측\npred\n##  [1] \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"    \n##  [6] \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"    \n## [11] \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"    \n## [16] \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"    \n## [21] \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\"\n## [26] \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\"\n## [31] \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\"\n## [36] \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\"\n## [41] \"virginica\"  \"versicolor\" \"virginica\"  \"virginica\"  \"virginica\" \n## [46] \"virginica\"  \"virginica\"  \"virginica\"  \"virginica\"  \"virginica\" \n## [51] \"virginica\"  \"virginica\"  \"versicolor\" \"virginica\"  \"virginica\" \n## [56] \"virginica\"  \"virginica\"  \"virginica\"  \"virginica\"  \"virginica\"\nreal &lt;- iris.testing$Species\ntable(real, pred) # Confusion Matrix 생성\n##             pred\n## real         setosa versicolor virginica\n##   setosa         20          0         0\n##   versicolor      0         20         0\n##   virginica       0          2        18\n\n\n#---# 연습문제\nneuralNetResult &lt;- nnet(Species ~ .,\n                        data = iris.training,\n                        size = 5, \n                        decay = 5e-04)\n## # weights:  43\n## initial  value 99.573874 \n## iter  10 value 35.894217\n## iter  20 value 4.218017\n## iter  30 value 3.395524\n## iter  40 value 3.085175\n## iter  50 value 2.839799\n## iter  60 value 2.783255\n## iter  70 value 2.754466\n## iter  80 value 2.704290\n## iter  90 value 2.681407\n## iter 100 value 2.659246\n## final  value 2.659246 \n## stopped after 100 iterations\nneuralNetResult\n## a 4-5-3 network with 43 weights\n## inputs: Sepal.Length Sepal.Width Petal.Length Petal.Width \n## output(s): Species \n## options were - softmax modelling  decay=5e-04\nsummary(neuralNetResult)\n## a 4-5-3 network with 43 weights\n## options were - softmax modelling  decay=5e-04\n##  b-&gt;h1 i1-&gt;h1 i2-&gt;h1 i3-&gt;h1 i4-&gt;h1 \n##  -0.20  -1.57  -1.30  -0.22   0.00 \n##  b-&gt;h2 i1-&gt;h2 i2-&gt;h2 i3-&gt;h2 i4-&gt;h2 \n##   0.32   1.69   0.17   0.12  -1.13 \n##  b-&gt;h3 i1-&gt;h3 i2-&gt;h3 i3-&gt;h3 i4-&gt;h3 \n##  17.64   0.67   2.53  -3.00  -8.31 \n##  b-&gt;h4 i1-&gt;h4 i2-&gt;h4 i3-&gt;h4 i4-&gt;h4 \n##  -0.03   0.32   1.75  -2.11  -1.01 \n##  b-&gt;h5 i1-&gt;h5 i2-&gt;h5 i3-&gt;h5 i4-&gt;h5 \n##  -0.07  -0.03  -3.06   2.96   1.42 \n##  b-&gt;o1 h1-&gt;o1 h2-&gt;o1 h3-&gt;o1 h4-&gt;o1 h5-&gt;o1 \n##   1.41  -3.63   0.31   2.88   6.52  -7.21 \n##  b-&gt;o2 h1-&gt;o2 h2-&gt;o2 h3-&gt;o2 h4-&gt;o2 h5-&gt;o2 \n##  -4.00   1.90  -3.68  12.13  -2.35   3.68 \n##  b-&gt;o3 h1-&gt;o3 h2-&gt;o3 h3-&gt;o3 h4-&gt;o3 h5-&gt;o3 \n##   2.59   1.68   3.43 -14.97  -4.21   3.49\n\npred &lt;- predict(neuralNetResult, iris.testing, type = 'class')\npred\n##  [1] \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"    \n##  [6] \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"    \n## [11] \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"    \n## [16] \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"    \n## [21] \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\"\n## [26] \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\"\n## [31] \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\"\n## [36] \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\"\n## [41] \"virginica\"  \"virginica\"  \"virginica\"  \"virginica\"  \"virginica\" \n## [46] \"virginica\"  \"virginica\"  \"virginica\"  \"virginica\"  \"virginica\" \n## [51] \"virginica\"  \"virginica\"  \"versicolor\" \"virginica\"  \"virginica\" \n## [56] \"virginica\"  \"virginica\"  \"virginica\"  \"virginica\"  \"virginica\"\nreal &lt;- iris.testing$Species\ntable(real, pred)\n##             pred\n## real         setosa versicolor virginica\n##   setosa         20          0         0\n##   versicolor      0         20         0\n##   virginica       0          1        19\n\n\n\n\n\n국소 선형 회귀 (Kernel Smoothing : Local Linear Regression)\n\n\nset.seed(1)\nn &lt;- 100\nx &lt;- runif(n) * 4\nx\n##   [1] 1.06203465 1.48849560 2.29141345 3.63283116 0.80672772 3.59355874\n##   [7] 3.77870107 2.64319117 2.51645618 0.24714508 0.82389830 0.70622701\n##  [13] 2.74809139 1.53641487 3.07936568 1.99079697 2.87047403 3.96762438\n##  [19] 1.52014072 3.10978089 3.73882092 0.84857009 2.60669506 0.50222038\n##  [25] 1.06888267 1.54445637 0.05356133 1.52955183 3.47876338 1.36139599\n##  [31] 1.92832046 2.39826330 1.97416523 0.74487041 3.30949327 2.67386695\n##  [37] 3.17695944 0.43177450 2.89484378 1.64509772 3.28378518 2.58824078\n##  [43] 3.13173105 2.21214525 2.11887832 3.15742493 0.09332481 1.90892026\n##  [49] 2.92925495 2.77092623 1.91047849 3.44483791 1.75238843 0.97918911\n##  [55] 0.28271619 0.39786464 1.26508683 2.07453705 2.64802031 1.62732075\n##  [61] 3.65150370 1.17441349 1.83626291 1.32957870 2.60348187 1.03206712\n##  [67] 1.91418099 3.06524268 0.33698766 3.50128532 1.35629175 3.35776140\n##  [73] 1.38673396 1.33509972 1.90540498 3.56879334 3.45735788 1.55995817\n##  [79] 3.10928280 3.84247199 1.73863794 2.85005871 1.59997748 1.30140861\n##  [85] 3.02834859 0.81076902 2.84448489 0.48676768 0.98195406 0.57321752\n##  [91] 0.95851766 0.23573751 2.56915303 3.50507685 3.11565871 3.18923530\n##  [97] 1.82109781 1.64033633 3.24348097 2.41973316\n\ny &lt;- sin(x) + rnorm(n, sd = 0.3)    # x가 직선 성향을 갖지 않도록 변화\ny\n##   [1]  0.992780125  0.813007288  0.853734570 -0.810527231  1.151934182\n##   [6]  0.157384921 -0.705040068  0.164781709  0.756123834  0.204120408\n##  [11]  1.454285098  0.637195846  0.590346240  1.007809664 -0.160795140\n##  [16]  0.969726369 -0.273678225 -0.295581017  1.044693280  0.683589904\n##  [21] -0.419699842  0.537351988  0.692970842  0.201143636  0.500573482\n##  [26]  1.087086994 -0.079451835  0.999481172 -0.308516056  0.801299460\n##  [31]  0.766165518  0.636189207  1.273169957  0.220806501  0.011070995\n##  [36]  0.550742534  0.283570534  0.327227931  0.355258239  1.077370559\n##  [41] -0.304469858  0.887902188  0.357982229  1.011353555  1.329575507\n##  [46]  0.151714316 -0.289788263  0.771399026 -0.156638115  0.220216489\n##  [51]  0.756750610 -0.285984192  0.710280918  0.877454044  0.082589641\n##  [56]  0.917636841  1.168645898  1.148835295  0.589030486  1.503055744\n##  [61] -0.678820545  0.783970136  1.394654866  0.775838915  0.450300456\n##  [66]  0.740518972  0.845622665 -0.007458176  0.478902183 -0.405185729\n##  [71]  0.825294733  0.188422527  0.918734470  0.918484947  0.914481678\n##  [76] -0.200524803 -0.332613279  0.988651016 -0.172193907 -0.742171072\n##  [81]  1.003995764  0.110753430  1.159023118  0.508415806  0.204969530\n##  [86]  0.263882252  0.202463078  0.309287485  0.635955803  0.525269049\n##  [91]  0.244032689  0.586535154  0.042192628 -0.494592058 -0.308844995\n##  [96] -0.272870329  1.594987752  1.002801754 -0.487602280  0.168599848\n\nXValue &lt;- seq(from = 0, to = 4, by = 0.05)\nYValue &lt;- sin(XValue)\nplot(XValue, YValue, type = 'l',\n     ylim = c(min(YValue), max(YValue)), lty = 2)\n\npoints(x, y)\n\nlibrary(KernSmooth)\n## KernSmooth 2.23가 로드되었습니다\n## Copyright M. P. Wand 1997-2009\nh &lt;- c(0.1, 0.3, 1.5)\nfor (k in 1:length(h)) {\n    res.lp &lt;- locpoly(x, y, bandwidth = h[k])   # locpoly : 국소 선형 회귀\n    lines(res.lp, col = k + 1)\n}\n\nlegend(3, 1, c(paste('bandwidth = ', h[1]),\n               paste('bandwidth = ', h[2]),\n               paste('bandwidth = ', h[3]),\n               'True Curve'),\n       col = c(2:4, 1),\n       lty = c(rep(1, 3), 2))\n\n\n\n\n\nbandwidth = 0.3인 경우 사전에 만든 최적화된 라인과 매우 유사한 모습을 가짐\n\n\nplot(XValue, YValue, type = 'l', ylim = c(min(YValue), max(YValue)), lty = 2)\npoints(x,y)\ntemp2 &lt;- locpoly(x, y, bandwidth = 0.3) \nlines(temp2) \n\nres.lm &lt;- lm(y~x)  \nres.lm\n## \n## Call:\n## lm(formula = y ~ x)\n## \n## Coefficients:\n## (Intercept)            x  \n##      1.0435      -0.2871\n\npoints(x, predict(res.lm), col = 8, pch = '*')\n\n\n\n\n\n선형회귀로 구한 식의 경우 비선형 자료의 회귀 예측이 어렵다.\n\n\n\n\n\ndata &lt;- read.csv('http://stats.idre.ucla.edu/stat/data/binary.csv')\nstr(data)\n## 'data.frame':    400 obs. of  4 variables:\n##  $ admit: int  0 1 1 1 0 1 1 0 1 0 ...\n##  $ gre  : int  380 660 800 640 520 760 560 400 540 700 ...\n##  $ gpa  : num  3.61 3.67 4 3.19 2.93 3 2.98 3.08 3.39 3.92 ...\n##  $ rank : int  3 3 1 4 4 2 1 2 3 2 ...\nhead(data)\n##   admit gre  gpa rank\n## 1     0 380 3.61    3\n## 2     1 660 3.67    3\n## 3     1 800 4.00    1\n## 4     1 640 3.19    4\n## 5     0 520 2.93    4\n## 6     1 760 3.00    2\ntrainData &lt;- data[1:200, ]\ntestData &lt;- data[201:400, ]\n\nmodel &lt;- glm(admit ~ gre + gpa + rank, data = trainData, family = 'binomial')\nsummary(model)\n## \n## Call:\n## glm(formula = admit ~ gre + gpa + rank, family = \"binomial\", \n##     data = trainData)\n## \n## Coefficients:\n##             Estimate Std. Error z value Pr(&gt;|z|)    \n## (Intercept) -2.79966    1.67734  -1.669 0.095096 .  \n## gre          0.00366    0.00171   2.141 0.032266 *  \n## gpa          0.42816    0.49834   0.859 0.390245    \n## rank        -0.75502    0.19512  -3.870 0.000109 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## (Dispersion parameter for binomial family taken to be 1)\n## \n##     Null deviance: 237.18  on 199  degrees of freedom\n## Residual deviance: 206.84  on 196  degrees of freedom\n## AIC: 214.84\n## \n## Number of Fisher Scoring iterations: 4\n\npredictData &lt;- predict(model, newdata = testData, type = 'response')\n\nhead(predictData)\n##        201        202        203        204        205        206 \n## 0.32756502 0.30649104 0.67265609 0.06888056 0.57617406 0.35832794\n\nround(predictData)\n## 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 \n##   0   0   1   0   1   0   1   1   0   0   0   0   0   0   0   0   0   0   0   0 \n## 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 \n##   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n## 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 \n##   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n## 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 \n##   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   1   0   0 \n## 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 \n##   0   0   0   0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0   0 \n## 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 \n##   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n## 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 \n##   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n## 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 \n##   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   1   0   1   0   0 \n## 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 \n##   1   0   0   0   0   0   0   0   1   1   0   0   0   1   0   0   0   1   0   0 \n## 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 \n##   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0\ntable(round(predictData), testData$admit)\n##    \n##       0   1\n##   0 121  58\n##   1   8  13\n\n\n\n\n\nlibrary(nnet)\nMmodel &lt;- multinom(Species ~ ., data = iris)\n## # weights:  18 (10 variable)\n## initial  value 164.791843 \n## iter  10 value 16.177348\n## iter  20 value 7.111438\n## iter  30 value 6.182999\n## iter  40 value 5.984028\n## iter  50 value 5.961278\n## iter  60 value 5.954900\n## iter  70 value 5.951851\n## iter  80 value 5.950343\n## iter  90 value 5.949904\n## iter 100 value 5.949867\n## final  value 5.949867 \n## stopped after 100 iterations\n\npredict(Mmodel, newdata = iris[c(1, 51, 101), ], type = 'class')\n## [1] setosa     versicolor virginica \n## Levels: setosa versicolor virginica\npredict(Mmodel, newdata = iris)\n##   [1] setosa     setosa     setosa     setosa     setosa     setosa    \n##   [7] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [13] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [19] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [25] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [31] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [37] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [43] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [49] setosa     setosa     versicolor versicolor versicolor versicolor\n##  [55] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [61] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [67] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [73] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [79] versicolor versicolor versicolor versicolor versicolor virginica \n##  [85] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [91] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [97] versicolor versicolor versicolor versicolor virginica  virginica \n## [103] virginica  virginica  virginica  virginica  virginica  virginica \n## [109] virginica  virginica  virginica  virginica  virginica  virginica \n## [115] virginica  virginica  virginica  virginica  virginica  virginica \n## [121] virginica  virginica  virginica  virginica  virginica  virginica \n## [127] virginica  virginica  virginica  virginica  virginica  virginica \n## [133] virginica  versicolor virginica  virginica  virginica  virginica \n## [139] virginica  virginica  virginica  virginica  virginica  virginica \n## [145] virginica  virginica  virginica  virginica  virginica  virginica \n## Levels: setosa versicolor virginica\npredicted &lt;- predict(Mmodel, newdata = iris)\n\nsum(predicted == iris$Species) / NROW(predicted) \n## [1] 0.9866667\n\n\ndata(iris)\ntemp &lt;- c(sample(1:50, 30), sample(51:100, 30), sample(101:150, 30))\niris.training &lt;- iris[temp, ]\niris.testing &lt;- iris[-temp, ]\ntrainModel &lt;- multinom(Species ~ ., data = iris.training)\n## # weights:  18 (10 variable)\n## initial  value 98.875106 \n## iter  10 value 11.066113\n## iter  20 value 4.505980\n## iter  30 value 4.449470\n## iter  40 value 4.441392\n## iter  50 value 4.432186\n## iter  60 value 4.431420\n## iter  70 value 4.430382\n## iter  80 value 4.430316\n## iter  90 value 4.430274\n## iter 100 value 4.430238\n## final  value 4.430238 \n## stopped after 100 iterations\npredict(trainModel, newdata = iris.testing)\n##  [1] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [7] setosa     setosa     setosa     setosa     setosa     setosa    \n## [13] setosa     setosa     setosa     setosa     setosa     setosa    \n## [19] setosa     setosa     versicolor versicolor versicolor versicolor\n## [25] versicolor versicolor versicolor versicolor versicolor versicolor\n## [31] versicolor versicolor versicolor versicolor versicolor versicolor\n## [37] versicolor versicolor versicolor versicolor virginica  virginica \n## [43] virginica  virginica  virginica  virginica  virginica  virginica \n## [49] virginica  virginica  virginica  virginica  virginica  virginica \n## [55] virginica  virginica  virginica  virginica  virginica  virginica \n## Levels: setosa versicolor virginica\npredicted &lt;- predict(trainModel, newdata = iris.testing)\nsum(predicted == iris.testing$Species) / NROW(predicted)\n## [1] 1"
  },
  {
    "objectID": "Data_Exploration/Data_Exploration_CH07.html#선형-회귀---단순-선형-회귀",
    "href": "Data_Exploration/Data_Exploration_CH07.html#선형-회귀---단순-선형-회귀",
    "title": "회귀 모델",
    "section": "",
    "text": "salary &lt;- read.csv('./data/regdata.csv')\nhead(salary)\n##   X Incentive Salary negotiated gender year\n## 1 1      12.1    9.5       TRUE      M 2005\n## 2 2       8.9    9.9       TRUE      F 2006\n## 3 3       8.8   18.1       TRUE      M 2007\n## 4 4       7.1   11.8       TRUE      F 2008\n## 5 5      10.2   12.5       TRUE      M 2009\n## 6 6       7.0   10.2       TRUE      F 2005\n\nplot(salary$Incentive[salary$negotiated == TRUE], salary$Salary[salary$negotiated == TRUE])\n\n# 상관계수 =&gt; 약 0.67\ncor(salary$Incentive[salary$negotiated == TRUE], salary$Salary[salary$negotiated == TRUE])\n## [1] 0.6656481\n\nRegResult &lt;- lm(Incentive[negotiated == TRUE] ~ Salary [negotiated == TRUE], data = salary)\nRegResult\n## \n## Call:\n## lm(formula = Incentive[negotiated == TRUE] ~ Salary[negotiated == \n##     TRUE], data = salary)\n## \n## Coefficients:\n##                (Intercept)  Salary[negotiated == TRUE]  \n##                     2.3121                      0.7251\nabline(RegResult) # 회귀선 그리기\n\n\n\n\n\n선형회귀식 : y = 2.31 + 0.725x\n\n\n# Incentive가 10보다 작으면 보다 높은 상관관계가 보일 것\n# -&gt; Incentive &lt;= 10인 Data만 추출하기\ntemp &lt;- subset(salary, salary$Incentive &lt;= 10)\nhead(temp)\n##     X Incentive Salary negotiated gender year\n## 2   2       8.9    9.9       TRUE      F 2006\n## 3   3       8.8   18.1       TRUE      M 2007\n## 4   4       7.1   11.8       TRUE      F 2008\n## 6   6       7.0   10.2       TRUE      F 2005\n## 9   9       8.2   11.4       TRUE      M 2008\n## 11 11       1.9    4.4       TRUE      M 2005\n\ncor(temp$Incentive[temp$negotiated == TRUE], temp$Salary[temp$negotiated == TRUE])\n## [1] 0.5068886\nplot(temp$Incentive[temp$negotiated == TRUE], temp$Salary[temp$negotiated == TRUE])\n\n\n\n\n# Salary가 너무 흩어져 있으므로, Salary가 8보다 큰 것은 제외\n# -&gt; Salary &lt;= 8인 Data만 추출하기\nnew_temp &lt;- subset(temp, temp$Salary &lt;= 8)\nhead(new_temp)\n##     X Incentive Salary negotiated gender year\n## 11 11       1.9    4.4       TRUE      M 2005\n## 19 19       8.4    7.8       TRUE      M 2008\n## 30 30       7.6    7.4       TRUE      F 2009\n## 48 48       4.7    7.6       TRUE      F 2007\n## 63 63       4.3    3.8       TRUE      M 2007\n## 86 86       6.9    5.6       TRUE      F 2005\n\ncor(new_temp$Incentive[new_temp$negotiated == TRUE], new_temp$Salary[new_temp$negotiated == TRUE])\n## [1] 0.8704326\nplot(new_temp$Incentive[new_temp$negotiated == TRUE], new_temp$Salary[new_temp$negotiated == TRUE])\n\nRegResult_new &lt;- lm(Incentive[negotiated == TRUE] ~ Salary [negotiated == TRUE], data = new_temp)\nRegResult_new\n## \n## Call:\n## lm(formula = Incentive[negotiated == TRUE] ~ Salary[negotiated == \n##     TRUE], data = new_temp)\n## \n## Coefficients:\n##                (Intercept)  Salary[negotiated == TRUE]  \n##                     0.9721                      0.9001\nabline(RegResult_new) # 회귀선 그리기\n\n\n\n\n\n선형회귀식 : y = 0.97 + 0.9001x\n\n\nsplit.screen(c(1, 2))\n## [1] 1 2\nscreen(1)\nhist(salary$Incentive)\nscreen(2)\nhist(salary$Salary)\n\n\n\n\nclose.screen(all = TRUE) # plot 창 분할 되돌리기\n\n\nsalary &lt;- read.csv('./data/regdata.csv')\nhead(salary)\n##   X Incentive Salary negotiated gender year\n## 1 1      12.1    9.5       TRUE      M 2005\n## 2 2       8.9    9.9       TRUE      F 2006\n## 3 3       8.8   18.1       TRUE      M 2007\n## 4 4       7.1   11.8       TRUE      F 2008\n## 5 5      10.2   12.5       TRUE      M 2009\n## 6 6       7.0   10.2       TRUE      F 2005\n\ntemp &lt;- subset(salary, salary$gender == 'M')\ntemp2 &lt;- subset(salary, salary$gender == 'F')\n\nsplit.screen(c(2, 2))\n## [1] 1 2 3 4\nscreen(1)\nhist(temp$Incentive)\nscreen(2)\nhist(temp$Salary)\nscreen(3)\nhist(temp2$Incentive)\nscreen(4)\nhist(temp2$Salary)"
  },
  {
    "objectID": "Data_Exploration/Data_Exploration_CH07.html#선형-회귀---중선형-회귀-및-적절한-변수-선택",
    "href": "Data_Exploration/Data_Exploration_CH07.html#선형-회귀---중선형-회귀-및-적절한-변수-선택",
    "title": "회귀 모델",
    "section": "",
    "text": "head(attitude)\n##   rating complaints privileges learning raises critical advance\n## 1     43         51         30       39     61       92      45\n## 2     63         64         51       54     63       73      47\n## 3     71         70         68       69     76       86      48\n## 4     61         63         45       47     54       84      35\n## 5     81         78         56       66     71       83      47\n## 6     43         55         49       44     54       49      34\nmodel &lt;- lm(rating ~ . , data = attitude)\nsummary(model)\n## \n## Call:\n## lm(formula = rating ~ ., data = attitude)\n## \n## Residuals:\n##      Min       1Q   Median       3Q      Max \n## -10.9418  -4.3555   0.3158   5.5425  11.5990 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept) 10.78708   11.58926   0.931 0.361634    \n## complaints   0.61319    0.16098   3.809 0.000903 ***\n## privileges  -0.07305    0.13572  -0.538 0.595594    \n## learning     0.32033    0.16852   1.901 0.069925 .  \n## raises       0.08173    0.22148   0.369 0.715480    \n## critical     0.03838    0.14700   0.261 0.796334    \n## advance     -0.21706    0.17821  -1.218 0.235577    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 7.068 on 23 degrees of freedom\n## Multiple R-squared:  0.7326, Adjusted R-squared:  0.6628 \n## F-statistic:  10.5 on 6 and 23 DF,  p-value: 1.24e-05\n\n\n선형회귀식 : y = 10.79 + 0.613 * complaints - 0.073 * privileges + 0.320 * learning + 0.082 * raises + 0.038 * critical - 0.217 * advance\np-value = 1.24e-05 &lt; 0.05이므로 통계적으로 유의하다.\nAdjusted R-Squared (예측 정확성)은 66.26%이다.\ncomplaints와 learning은 유의하지만 나머지는 유의하지 않다.\n\nbackward을 사용하여 의미없는 변수를 제거.\n\n\n\nreduced &lt;- step(model, direction = 'backward')\n## Start:  AIC=123.36\n## rating ~ complaints + privileges + learning + raises + critical + \n##     advance\n## \n##              Df Sum of Sq    RSS    AIC\n## - critical    1      3.41 1152.4 121.45\n## - raises      1      6.80 1155.8 121.54\n## - privileges  1     14.47 1163.5 121.74\n## - advance     1     74.11 1223.1 123.24\n## &lt;none&gt;                    1149.0 123.36\n## - learning    1    180.50 1329.5 125.74\n## - complaints  1    724.80 1873.8 136.04\n## \n## Step:  AIC=121.45\n## rating ~ complaints + privileges + learning + raises + advance\n## \n##              Df Sum of Sq    RSS    AIC\n## - raises      1     10.61 1163.0 119.73\n## - privileges  1     14.16 1166.6 119.82\n## - advance     1     71.27 1223.7 121.25\n## &lt;none&gt;                    1152.4 121.45\n## - learning    1    177.74 1330.1 123.75\n## - complaints  1    724.70 1877.1 134.09\n## \n## Step:  AIC=119.73\n## rating ~ complaints + privileges + learning + advance\n## \n##              Df Sum of Sq    RSS    AIC\n## - privileges  1     16.10 1179.1 118.14\n## - advance     1     61.60 1224.6 119.28\n## &lt;none&gt;                    1163.0 119.73\n## - learning    1    197.03 1360.0 122.42\n## - complaints  1   1165.94 2328.9 138.56\n## \n## Step:  AIC=118.14\n## rating ~ complaints + learning + advance\n## \n##              Df Sum of Sq    RSS    AIC\n## - advance     1     75.54 1254.7 118.00\n## &lt;none&gt;                    1179.1 118.14\n## - learning    1    186.12 1365.2 120.54\n## - complaints  1   1259.91 2439.0 137.94\n## \n## Step:  AIC=118\n## rating ~ complaints + learning\n## \n##              Df Sum of Sq    RSS    AIC\n## &lt;none&gt;                    1254.7 118.00\n## - learning    1    114.73 1369.4 118.63\n## - complaints  1   1370.91 2625.6 138.16\n# &lt;none&gt;이 가장 위에 표시될 때 까지 'backward' 기법으로 변수를 제거\nsummary(reduced)\n## \n## Call:\n## lm(formula = rating ~ complaints + learning, data = attitude)\n## \n## Residuals:\n##      Min       1Q   Median       3Q      Max \n## -11.5568  -5.7331   0.6701   6.5341  10.3610 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept)   9.8709     7.0612   1.398    0.174    \n## complaints    0.6435     0.1185   5.432 9.57e-06 ***\n## learning      0.2112     0.1344   1.571    0.128    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 6.817 on 27 degrees of freedom\n## Multiple R-squared:  0.708,  Adjusted R-squared:  0.6864 \n## F-statistic: 32.74 on 2 and 27 DF,  p-value: 6.058e-08\n\n\n선형회귀식 : y = 9.87 + 0.643 * complaints - 0.211 * learning\np-value = 6.058e-08 &lt; 0.05이므로 통계적으로 유의하다.\nAdjusted R-Squared (예측 정확성)은 68.64%이다."
  },
  {
    "objectID": "Data_Exploration/Data_Exploration_CH07.html#비선형회귀---신경망-모델",
    "href": "Data_Exploration/Data_Exploration_CH07.html#비선형회귀---신경망-모델",
    "title": "회귀 모델",
    "section": "",
    "text": "data(iris)\nstr(iris)\n## 'data.frame':    150 obs. of  5 variables:\n##  $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n##  $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n##  $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n##  $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n##  $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n\ntemp &lt;- c(sample(1:50, 30), sample(51:100, 30), sample(101:150, 30))\ntemp\n##  [1]  14  18  27  34   2  49  12  16  19  23   5   4   1  44  43  42  31  37  21\n## [20]  35  45   8  47  29  13  41  40  22  17   3  56  83  65  77  96  81  89  67\n## [39]  51  66 100  73  87  74  91  60  54  99  90  84  97  53  88  58  57  59  68\n## [58]  72  78  64 101 135 129 109 132 117 103 141 111 105 119 102 114 138 149 139\n## [77] 147 110 146 140 104 113 150 131 115 118 133 128 122 120\n\n# train set과 test set의 데이터 분할\niris.training &lt;- iris[temp, ]\niris.testing &lt;- iris[-temp, ]\n\nlibrary(nnet)\n\n# 신경망 모델 구축\nneuralNetResult &lt;- nnet(Species ~ .,\n                        data = iris.training,\n                        size = 3,    # 층의 수 : 3 \n                        decay = 0)   # 설정 값 : 0\n## # weights:  27\n## initial  value 113.897756 \n## iter  10 value 46.804233\n## iter  20 value 5.367565\n## iter  30 value 2.944747\n## iter  40 value 2.115424\n## iter  50 value 0.000604\n## iter  60 value 0.000117\n## iter  60 value 0.000075\n## final  value 0.000075 \n## converged\nneuralNetResult\n## a 4-3-3 network with 27 weights\n## inputs: Sepal.Length Sepal.Width Petal.Length Petal.Width \n## output(s): Species \n## options were - softmax modelling\nsummary(neuralNetResult)\n## a 4-3-3 network with 27 weights\n## options were - softmax modelling \n##   b-&gt;h1  i1-&gt;h1  i2-&gt;h1  i3-&gt;h1  i4-&gt;h1 \n## -191.61    1.70  -19.68   24.28   69.45 \n##   b-&gt;h2  i1-&gt;h2  i2-&gt;h2  i3-&gt;h2  i4-&gt;h2 \n##   24.46   57.35  178.70 -221.98  -88.67 \n##   b-&gt;h3  i1-&gt;h3  i2-&gt;h3  i3-&gt;h3  i4-&gt;h3 \n##    0.51    8.89  -15.71   35.38    7.30 \n##   b-&gt;o1  h1-&gt;o1  h2-&gt;o1  h3-&gt;o1 \n##   10.92  -41.22  131.68  -46.63 \n##   b-&gt;o2  h1-&gt;o2  h2-&gt;o2  h3-&gt;o2 \n##   26.38  -95.16  -75.78   67.74 \n##   b-&gt;o3  h1-&gt;o3  h2-&gt;o3  h3-&gt;o3 \n##  -37.44  137.32  -56.21  -20.05\n\nlibrary(devtools)\n## 필요한 패키지를 로딩중입니다: usethis\n# import the function from Github\nsource_url('https://gist.githubusercontent.com/Peque/41a9e20d6687f2f3108d/raw/85e14f3a292e126f1454864427e3a189c2fe33f3/nnet_plot_update.r')\n## ℹ SHA-1 hash of file is \"bf3c7b8ac910823b729e3ce73bb6ab5e6955ad3d\"\nplot.nnet(neuralNetResult) # 신경망 모델 plot\n## 필요한 패키지를 로딩중입니다: scales\n## \n## 다음의 패키지를 부착합니다: 'scales'\n## The following object is masked from 'package:purrr':\n## \n##     discard\n## The following object is masked from 'package:readr':\n## \n##     col_factor\n## 필요한 패키지를 로딩중입니다: reshape\n## \n## 다음의 패키지를 부착합니다: 'reshape'\n## The following object is masked from 'package:lubridate':\n## \n##     stamp\n## The following object is masked from 'package:dplyr':\n## \n##     rename\n## The following objects are masked from 'package:tidyr':\n## \n##     expand, smiths\n\n\n\n\n\npred &lt;- predict(neuralNetResult, iris.testing, type = 'class') # class를 예측\npred\n##  [1] \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"    \n##  [6] \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"    \n## [11] \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"    \n## [16] \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"    \n## [21] \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\"\n## [26] \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\"\n## [31] \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\"\n## [36] \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\"\n## [41] \"virginica\"  \"versicolor\" \"virginica\"  \"virginica\"  \"virginica\" \n## [46] \"virginica\"  \"virginica\"  \"virginica\"  \"virginica\"  \"virginica\" \n## [51] \"virginica\"  \"virginica\"  \"versicolor\" \"virginica\"  \"virginica\" \n## [56] \"virginica\"  \"virginica\"  \"virginica\"  \"virginica\"  \"virginica\"\nreal &lt;- iris.testing$Species\ntable(real, pred) # Confusion Matrix 생성\n##             pred\n## real         setosa versicolor virginica\n##   setosa         20          0         0\n##   versicolor      0         20         0\n##   virginica       0          2        18\n\n\n#---# 연습문제\nneuralNetResult &lt;- nnet(Species ~ .,\n                        data = iris.training,\n                        size = 5, \n                        decay = 5e-04)\n## # weights:  43\n## initial  value 99.573874 \n## iter  10 value 35.894217\n## iter  20 value 4.218017\n## iter  30 value 3.395524\n## iter  40 value 3.085175\n## iter  50 value 2.839799\n## iter  60 value 2.783255\n## iter  70 value 2.754466\n## iter  80 value 2.704290\n## iter  90 value 2.681407\n## iter 100 value 2.659246\n## final  value 2.659246 \n## stopped after 100 iterations\nneuralNetResult\n## a 4-5-3 network with 43 weights\n## inputs: Sepal.Length Sepal.Width Petal.Length Petal.Width \n## output(s): Species \n## options were - softmax modelling  decay=5e-04\nsummary(neuralNetResult)\n## a 4-5-3 network with 43 weights\n## options were - softmax modelling  decay=5e-04\n##  b-&gt;h1 i1-&gt;h1 i2-&gt;h1 i3-&gt;h1 i4-&gt;h1 \n##  -0.20  -1.57  -1.30  -0.22   0.00 \n##  b-&gt;h2 i1-&gt;h2 i2-&gt;h2 i3-&gt;h2 i4-&gt;h2 \n##   0.32   1.69   0.17   0.12  -1.13 \n##  b-&gt;h3 i1-&gt;h3 i2-&gt;h3 i3-&gt;h3 i4-&gt;h3 \n##  17.64   0.67   2.53  -3.00  -8.31 \n##  b-&gt;h4 i1-&gt;h4 i2-&gt;h4 i3-&gt;h4 i4-&gt;h4 \n##  -0.03   0.32   1.75  -2.11  -1.01 \n##  b-&gt;h5 i1-&gt;h5 i2-&gt;h5 i3-&gt;h5 i4-&gt;h5 \n##  -0.07  -0.03  -3.06   2.96   1.42 \n##  b-&gt;o1 h1-&gt;o1 h2-&gt;o1 h3-&gt;o1 h4-&gt;o1 h5-&gt;o1 \n##   1.41  -3.63   0.31   2.88   6.52  -7.21 \n##  b-&gt;o2 h1-&gt;o2 h2-&gt;o2 h3-&gt;o2 h4-&gt;o2 h5-&gt;o2 \n##  -4.00   1.90  -3.68  12.13  -2.35   3.68 \n##  b-&gt;o3 h1-&gt;o3 h2-&gt;o3 h3-&gt;o3 h4-&gt;o3 h5-&gt;o3 \n##   2.59   1.68   3.43 -14.97  -4.21   3.49\n\npred &lt;- predict(neuralNetResult, iris.testing, type = 'class')\npred\n##  [1] \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"    \n##  [6] \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"    \n## [11] \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"    \n## [16] \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"     \"setosa\"    \n## [21] \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\"\n## [26] \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\"\n## [31] \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\"\n## [36] \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\" \"versicolor\"\n## [41] \"virginica\"  \"virginica\"  \"virginica\"  \"virginica\"  \"virginica\" \n## [46] \"virginica\"  \"virginica\"  \"virginica\"  \"virginica\"  \"virginica\" \n## [51] \"virginica\"  \"virginica\"  \"versicolor\" \"virginica\"  \"virginica\" \n## [56] \"virginica\"  \"virginica\"  \"virginica\"  \"virginica\"  \"virginica\"\nreal &lt;- iris.testing$Species\ntable(real, pred)\n##             pred\n## real         setosa versicolor virginica\n##   setosa         20          0         0\n##   versicolor      0         20         0\n##   virginica       0          1        19"
  },
  {
    "objectID": "Data_Exploration/Data_Exploration_CH07.html#커널-방법론",
    "href": "Data_Exploration/Data_Exploration_CH07.html#커널-방법론",
    "title": "회귀 모델",
    "section": "",
    "text": "국소 선형 회귀 (Kernel Smoothing : Local Linear Regression)\n\n\nset.seed(1)\nn &lt;- 100\nx &lt;- runif(n) * 4\nx\n##   [1] 1.06203465 1.48849560 2.29141345 3.63283116 0.80672772 3.59355874\n##   [7] 3.77870107 2.64319117 2.51645618 0.24714508 0.82389830 0.70622701\n##  [13] 2.74809139 1.53641487 3.07936568 1.99079697 2.87047403 3.96762438\n##  [19] 1.52014072 3.10978089 3.73882092 0.84857009 2.60669506 0.50222038\n##  [25] 1.06888267 1.54445637 0.05356133 1.52955183 3.47876338 1.36139599\n##  [31] 1.92832046 2.39826330 1.97416523 0.74487041 3.30949327 2.67386695\n##  [37] 3.17695944 0.43177450 2.89484378 1.64509772 3.28378518 2.58824078\n##  [43] 3.13173105 2.21214525 2.11887832 3.15742493 0.09332481 1.90892026\n##  [49] 2.92925495 2.77092623 1.91047849 3.44483791 1.75238843 0.97918911\n##  [55] 0.28271619 0.39786464 1.26508683 2.07453705 2.64802031 1.62732075\n##  [61] 3.65150370 1.17441349 1.83626291 1.32957870 2.60348187 1.03206712\n##  [67] 1.91418099 3.06524268 0.33698766 3.50128532 1.35629175 3.35776140\n##  [73] 1.38673396 1.33509972 1.90540498 3.56879334 3.45735788 1.55995817\n##  [79] 3.10928280 3.84247199 1.73863794 2.85005871 1.59997748 1.30140861\n##  [85] 3.02834859 0.81076902 2.84448489 0.48676768 0.98195406 0.57321752\n##  [91] 0.95851766 0.23573751 2.56915303 3.50507685 3.11565871 3.18923530\n##  [97] 1.82109781 1.64033633 3.24348097 2.41973316\n\ny &lt;- sin(x) + rnorm(n, sd = 0.3)    # x가 직선 성향을 갖지 않도록 변화\ny\n##   [1]  0.992780125  0.813007288  0.853734570 -0.810527231  1.151934182\n##   [6]  0.157384921 -0.705040068  0.164781709  0.756123834  0.204120408\n##  [11]  1.454285098  0.637195846  0.590346240  1.007809664 -0.160795140\n##  [16]  0.969726369 -0.273678225 -0.295581017  1.044693280  0.683589904\n##  [21] -0.419699842  0.537351988  0.692970842  0.201143636  0.500573482\n##  [26]  1.087086994 -0.079451835  0.999481172 -0.308516056  0.801299460\n##  [31]  0.766165518  0.636189207  1.273169957  0.220806501  0.011070995\n##  [36]  0.550742534  0.283570534  0.327227931  0.355258239  1.077370559\n##  [41] -0.304469858  0.887902188  0.357982229  1.011353555  1.329575507\n##  [46]  0.151714316 -0.289788263  0.771399026 -0.156638115  0.220216489\n##  [51]  0.756750610 -0.285984192  0.710280918  0.877454044  0.082589641\n##  [56]  0.917636841  1.168645898  1.148835295  0.589030486  1.503055744\n##  [61] -0.678820545  0.783970136  1.394654866  0.775838915  0.450300456\n##  [66]  0.740518972  0.845622665 -0.007458176  0.478902183 -0.405185729\n##  [71]  0.825294733  0.188422527  0.918734470  0.918484947  0.914481678\n##  [76] -0.200524803 -0.332613279  0.988651016 -0.172193907 -0.742171072\n##  [81]  1.003995764  0.110753430  1.159023118  0.508415806  0.204969530\n##  [86]  0.263882252  0.202463078  0.309287485  0.635955803  0.525269049\n##  [91]  0.244032689  0.586535154  0.042192628 -0.494592058 -0.308844995\n##  [96] -0.272870329  1.594987752  1.002801754 -0.487602280  0.168599848\n\nXValue &lt;- seq(from = 0, to = 4, by = 0.05)\nYValue &lt;- sin(XValue)\nplot(XValue, YValue, type = 'l',\n     ylim = c(min(YValue), max(YValue)), lty = 2)\n\npoints(x, y)\n\nlibrary(KernSmooth)\n## KernSmooth 2.23가 로드되었습니다\n## Copyright M. P. Wand 1997-2009\nh &lt;- c(0.1, 0.3, 1.5)\nfor (k in 1:length(h)) {\n    res.lp &lt;- locpoly(x, y, bandwidth = h[k])   # locpoly : 국소 선형 회귀\n    lines(res.lp, col = k + 1)\n}\n\nlegend(3, 1, c(paste('bandwidth = ', h[1]),\n               paste('bandwidth = ', h[2]),\n               paste('bandwidth = ', h[3]),\n               'True Curve'),\n       col = c(2:4, 1),\n       lty = c(rep(1, 3), 2))\n\n\n\n\n\nbandwidth = 0.3인 경우 사전에 만든 최적화된 라인과 매우 유사한 모습을 가짐\n\n\nplot(XValue, YValue, type = 'l', ylim = c(min(YValue), max(YValue)), lty = 2)\npoints(x,y)\ntemp2 &lt;- locpoly(x, y, bandwidth = 0.3) \nlines(temp2) \n\nres.lm &lt;- lm(y~x)  \nres.lm\n## \n## Call:\n## lm(formula = y ~ x)\n## \n## Coefficients:\n## (Intercept)            x  \n##      1.0435      -0.2871\n\npoints(x, predict(res.lm), col = 8, pch = '*')\n\n\n\n\n\n선형회귀로 구한 식의 경우 비선형 자료의 회귀 예측이 어렵다."
  },
  {
    "objectID": "Data_Exploration/Data_Exploration_CH07.html#로지스틱-회귀",
    "href": "Data_Exploration/Data_Exploration_CH07.html#로지스틱-회귀",
    "title": "회귀 모델",
    "section": "",
    "text": "data &lt;- read.csv('http://stats.idre.ucla.edu/stat/data/binary.csv')\nstr(data)\n## 'data.frame':    400 obs. of  4 variables:\n##  $ admit: int  0 1 1 1 0 1 1 0 1 0 ...\n##  $ gre  : int  380 660 800 640 520 760 560 400 540 700 ...\n##  $ gpa  : num  3.61 3.67 4 3.19 2.93 3 2.98 3.08 3.39 3.92 ...\n##  $ rank : int  3 3 1 4 4 2 1 2 3 2 ...\nhead(data)\n##   admit gre  gpa rank\n## 1     0 380 3.61    3\n## 2     1 660 3.67    3\n## 3     1 800 4.00    1\n## 4     1 640 3.19    4\n## 5     0 520 2.93    4\n## 6     1 760 3.00    2\ntrainData &lt;- data[1:200, ]\ntestData &lt;- data[201:400, ]\n\nmodel &lt;- glm(admit ~ gre + gpa + rank, data = trainData, family = 'binomial')\nsummary(model)\n## \n## Call:\n## glm(formula = admit ~ gre + gpa + rank, family = \"binomial\", \n##     data = trainData)\n## \n## Coefficients:\n##             Estimate Std. Error z value Pr(&gt;|z|)    \n## (Intercept) -2.79966    1.67734  -1.669 0.095096 .  \n## gre          0.00366    0.00171   2.141 0.032266 *  \n## gpa          0.42816    0.49834   0.859 0.390245    \n## rank        -0.75502    0.19512  -3.870 0.000109 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## (Dispersion parameter for binomial family taken to be 1)\n## \n##     Null deviance: 237.18  on 199  degrees of freedom\n## Residual deviance: 206.84  on 196  degrees of freedom\n## AIC: 214.84\n## \n## Number of Fisher Scoring iterations: 4\n\npredictData &lt;- predict(model, newdata = testData, type = 'response')\n\nhead(predictData)\n##        201        202        203        204        205        206 \n## 0.32756502 0.30649104 0.67265609 0.06888056 0.57617406 0.35832794\n\nround(predictData)\n## 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 \n##   0   0   1   0   1   0   1   1   0   0   0   0   0   0   0   0   0   0   0   0 \n## 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 \n##   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n## 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 \n##   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n## 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 \n##   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   1   0   0 \n## 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 \n##   0   0   0   0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0   0 \n## 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 \n##   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n## 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 \n##   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n## 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 \n##   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   1   0   1   0   0 \n## 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 \n##   1   0   0   0   0   0   0   0   1   1   0   0   0   1   0   0   0   1   0   0 \n## 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 \n##   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0\ntable(round(predictData), testData$admit)\n##    \n##       0   1\n##   0 121  58\n##   1   8  13"
  },
  {
    "objectID": "Data_Exploration/Data_Exploration_CH07.html#다항-로지스틱-회귀",
    "href": "Data_Exploration/Data_Exploration_CH07.html#다항-로지스틱-회귀",
    "title": "회귀 모델",
    "section": "",
    "text": "library(nnet)\nMmodel &lt;- multinom(Species ~ ., data = iris)\n## # weights:  18 (10 variable)\n## initial  value 164.791843 \n## iter  10 value 16.177348\n## iter  20 value 7.111438\n## iter  30 value 6.182999\n## iter  40 value 5.984028\n## iter  50 value 5.961278\n## iter  60 value 5.954900\n## iter  70 value 5.951851\n## iter  80 value 5.950343\n## iter  90 value 5.949904\n## iter 100 value 5.949867\n## final  value 5.949867 \n## stopped after 100 iterations\n\npredict(Mmodel, newdata = iris[c(1, 51, 101), ], type = 'class')\n## [1] setosa     versicolor virginica \n## Levels: setosa versicolor virginica\npredict(Mmodel, newdata = iris)\n##   [1] setosa     setosa     setosa     setosa     setosa     setosa    \n##   [7] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [13] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [19] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [25] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [31] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [37] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [43] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [49] setosa     setosa     versicolor versicolor versicolor versicolor\n##  [55] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [61] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [67] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [73] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [79] versicolor versicolor versicolor versicolor versicolor virginica \n##  [85] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [91] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [97] versicolor versicolor versicolor versicolor virginica  virginica \n## [103] virginica  virginica  virginica  virginica  virginica  virginica \n## [109] virginica  virginica  virginica  virginica  virginica  virginica \n## [115] virginica  virginica  virginica  virginica  virginica  virginica \n## [121] virginica  virginica  virginica  virginica  virginica  virginica \n## [127] virginica  virginica  virginica  virginica  virginica  virginica \n## [133] virginica  versicolor virginica  virginica  virginica  virginica \n## [139] virginica  virginica  virginica  virginica  virginica  virginica \n## [145] virginica  virginica  virginica  virginica  virginica  virginica \n## Levels: setosa versicolor virginica\npredicted &lt;- predict(Mmodel, newdata = iris)\n\nsum(predicted == iris$Species) / NROW(predicted) \n## [1] 0.9866667\n\n\ndata(iris)\ntemp &lt;- c(sample(1:50, 30), sample(51:100, 30), sample(101:150, 30))\niris.training &lt;- iris[temp, ]\niris.testing &lt;- iris[-temp, ]\ntrainModel &lt;- multinom(Species ~ ., data = iris.training)\n## # weights:  18 (10 variable)\n## initial  value 98.875106 \n## iter  10 value 11.066113\n## iter  20 value 4.505980\n## iter  30 value 4.449470\n## iter  40 value 4.441392\n## iter  50 value 4.432186\n## iter  60 value 4.431420\n## iter  70 value 4.430382\n## iter  80 value 4.430316\n## iter  90 value 4.430274\n## iter 100 value 4.430238\n## final  value 4.430238 \n## stopped after 100 iterations\npredict(trainModel, newdata = iris.testing)\n##  [1] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [7] setosa     setosa     setosa     setosa     setosa     setosa    \n## [13] setosa     setosa     setosa     setosa     setosa     setosa    \n## [19] setosa     setosa     versicolor versicolor versicolor versicolor\n## [25] versicolor versicolor versicolor versicolor versicolor versicolor\n## [31] versicolor versicolor versicolor versicolor versicolor versicolor\n## [37] versicolor versicolor versicolor versicolor virginica  virginica \n## [43] virginica  virginica  virginica  virginica  virginica  virginica \n## [49] virginica  virginica  virginica  virginica  virginica  virginica \n## [55] virginica  virginica  virginica  virginica  virginica  virginica \n## Levels: setosa versicolor virginica\npredicted &lt;- predict(trainModel, newdata = iris.testing)\nsum(predicted == iris.testing$Species) / NROW(predicted)\n## [1] 1"
  },
  {
    "objectID": "Data_Exploration/Data_Exploration_CH04.html",
    "href": "Data_Exploration/Data_Exploration_CH04.html",
    "title": "데이터 시각화 의미와 기법",
    "section": "",
    "text": "Part 4 : 데이터 시각화 의미와 기법\n\nemployee &lt;- read.csv('./data/employees_kr.csv')\nhead(employee)\n##   num Incentive Nego Sex Year\n## 1   1      12.1 TRUE   M 2005\n## 2   2       8.9 TRUE   F 2006\n## 3   3       8.8 TRUE   M 2007\n## 4   4       7.1 TRUE   F 2008\n## 5   5      10.2 TRUE   M 2009\n## 6   6       7.0 TRUE   F 2005\n\n\nsub2008 &lt;- subset(employee, employee$Year == 2008)\nhead(sub2008)\n##    num Incentive Nego Sex Year\n## 4    4       7.1 TRUE   F 2008\n## 9    9       8.2 TRUE   M 2008\n## 14  14      13.4 TRUE   F 2008\n## 19  19       8.4 TRUE   M 2008\n## 24  24       8.0 TRUE   F 2008\n## 29  29       6.8 TRUE   M 2008\n\nhist(sub2008$Incentive)\n\n\n\nsub2009 &lt;- subset(employee, employee$Year ==2009)\nhist(sub2009$Incentive)\n\n\n\n\n\nsubMan &lt;- subset(employee, employee$Sex == 'M')\nhist(subMan$Incentive)\n\n\n\nsubWoman &lt;- subset(employee, employee$Sex == 'F')\nhist(subWoman$Incentive)\n\n\n\n\n\nsubNego &lt;- subset(employee, employee$Nego == \"TRUE\")\nhist(subNego$Incentive)\n\n\n\nsubNoNego &lt;- subset(employee, employee$Nego == \"FALSE\")\nhist(subNoNego$Incentive)\n\n\n\n\n\nsplit.screen(c(2, 1))\n## [1] 1 2\n\nscreen(1)\nplot(1:10)\nscreen(2)\nplot(10:1)\n\n\n\n\nclose.screen(all = TRUE)\n\n\nsplit.screen(c(2, 1))\n## [1] 1 2\n\nscreen(1)\nplot(1:10)\nscreen(2)\nplot(10:1)\n\nscreen(2)\nplot(1:10)\n\n\n\n\nclose.screen(all = TRUE)\n\n\nsplit.screen(c(2, 3))\n## [1] 1 2 3 4 5 6\n\nscreen(3)\nplot(1:10)\nscreen(4)\nplot(10:1)\nscreen(1)\nplot(1:100)\nscreen(6)\nplot(100:1)\n\n\n\n\nclose.screen(all = TRUE)\n\n\npar(mfrow = c(2, 1))\n\nplot(1:10)\nplot(10:1)\n\n\n\n\nclose.screen(all = TRUE)\n## [1] FALSE\n\n\nx &lt;- seq(1, 10, 0.1)\ny &lt;- exp(x)\nplot(x, y) \n\n\n\n\n\nplot(x, y, main = 'Minho Graph',\n     xlab = 'Time', ylab = 'Income increase')\n\n\n\n\n\nabc &lt;- c(260, 300, 250, 280, 310)\ndef &lt;- c(180, 200, 210, 190, 170)\nghi &lt;- c(210, 250, 260, 210, 270)\n\n\nplot(abc, type = 'o', col = 'red',\n     ylim = c(0, 400), axes = F, ann = F)\n\n# type이 'o'이면 점과 선을 연결해서 꺾은선 그래프가 그려지고, 'p'이면 점만 표시\n# color는 red이므로 붉은색\n# y축의 범위 0 ~ 400\n# axes = F이므로 X, Y축을 표시하지 않음\n# ann = F이므로 X, Y축의 이름을 표시하지 않음\n\naxis(1, at = 1:5, lab = c('A', 'B', 'C', 'D', 'E'))\naxis(2, ylim = c(0, 400)) \n\ntitle(main = 'Fruit', col.main = 'red', font.main = 4)\ntitle(xlab = 'Day', col.lab = 'black')\ntitle(ylab = 'Price', col.lab = 'blue') \n\nlines(def, type = 'o', pch = 21, col = 'green', lty = 2)\nlines(ghi, type = 'o', pch = 22, col = 'blue', lty = 2)\n\nlegend(4, 400, c('Orange', 'Appple', 'Banana'), cex = 0.8,\n       col = c('red', 'green', 'blue'), pch = 21, lty = 1:3)\n\n\n\n\n\nplot(10:1)\npar(new = T)\nplot(1:10)\npar(new = T)\nplot(c(6, 6, 6, 6, 6), type = 'o', col = 'red')\n\n\n\n\n\nx &lt;- c(50, 40, 32, 68, 120, 92)\nbarplot(x, names = 'Total Sale Amount')\n\n\n\n\n\nX_matrix &lt;- matrix(c(50, 40, 32, 68, 120, 92), 3, 2)\nX_matrix\n##      [,1] [,2]\n## [1,]   50   68\n## [2,]   40  120\n## [3,]   32   92\n\nsplit.screen(c(1, 2))\n## [1] 1 2\n\nscreen(1)\nbarplot(X_matrix, names = c('Korea', 'America'))\n\nscreen(2)\nbarplot(X_matrix, names = c('Korea', 'America'), beside = T)\n\n\n\n\n\nabc &lt;- c(50, 40, 32, 68, 120, 92)\n\nbarplot(abc, main = 'abc', xlab = 'Season', ylab = 'Sales',\n        names.arg = c('A', 'B', 'C', 'D', 'E', 'F'), border = 'blue',\n        density = c(10, 30, 50, 80, 90, 92))\n\n\n\n\n\nabc &lt;- c(110, 300, 150, 280, 310)\ndef &lt;- c(180, 200, 210, 190, 170)\nghi &lt;- c(210, 150, 260, 210, 70)\n\nB_Type2 &lt;- matrix(c(abc, def, ghi), 5, 3)\nB_Type2\n##      [,1] [,2] [,3]\n## [1,]  110  180  210\n## [2,]  300  200  150\n## [3,]  150  210  260\n## [4,]  280  190  210\n## [5,]  310  170   70\n\nbarplot(B_Type2, main = 'Ball Type별 시즌의 판매량', \n        xlab = 'Ball Type', ylab = '매출', beside = T,\n        names.arg = c('BaseBall', 'SoccerBall', 'BeachBall'),\n        border = 'blue', col = rainbow(5), ylim = (c(0, 400)))\n\nlegend(16, 400, c('A시즌', 'B시즌', 'C시즌', 'D시즌', 'E시즌'),\n       cex = 0.8, fill = rainbow(5))\n\n\n\n\n\nbarplot(t(B_Type2), main = '시즌별 볼타입에 따른 판매량',\n        xlab = 'Season', ylab = 'Price', beside = T,\n        names.arg = c('A', 'B', 'C', 'D', 'E'),\n        border = 'blue', col = rainbow(3), ylim = (c(0, 400)))\n\nlegend(16, 400, c('BaseBall', 'SoccerBall', 'BeachBall'),\n       cex = 0.8, fill = rainbow(5))\n\n\n\n\n\nbarplot(t(B_Type2), main = '시즌별 볼타입에 따른 판매량(누적 표시형)',\n        xlab = 'Season', ylab = '매출',\n        names.arg = c('A', 'B', 'C', 'D', 'E'),\n        border = 'blue', col = rainbow(3), ylim = (c(0, 1000)))\n\nlegend(4.5, 1000, c('BaseBall', 'SoccerBall', 'BeachBall'),\n       cex = 0.8, fill = rainbow(3))\n\n\n\n\n\nx\n## [1]  50  40  32  68 120  92\ndotchart(x, labels = c('A', 'B', 'C', 'D', 'E', 'F'), pch = 22)\n\n\n\n\n\nx &lt;- c(1, 2, 1, 4, 5, 4, 5, 2, 3, 5, 2, 6, 7, 3,\n       7, 8, 6, 5, 4, 7, 7, 6, 5, 7, 8, 9, 8)\nhist(x, xlim = c(0, 10), ylim = c(0, 6),\n     nclass = 12, main = 'Call number of #1 Topic')\n\n\n\n\n\nT_sales &lt;- c(210, 110, 400, 550, 700, 130)  \npie(T_sales)\n\n\n\n\n\npie(T_sales, init.angle = 90, col = rainbow(length(T_sales)),\n    labels = c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'))\n\nlegend(1, 1, c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'),\n       cex = 0.8, fill = rainbow(length(T_sales)))\n\n\n\n\n\nlibrary(plotrix)\n\nT_sales &lt;- c(210, 110, 400, 550, 700, 130)\nweek &lt;- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday')\nratio &lt;- round(T_sales / sum(T_sales) * 100, 1)\nlabel &lt;- paste(week, '\\n', ratio, '%')\n\npie3D(T_sales, main = '주간 매출 변동',\n      col = rainbow(length(T_sales)), cex = 0.8, labels = label)\n\n\n\n\n\nabc ; def; ghi\n## [1] 110 300 150 280 310\n## [1] 180 200 210 190 170\n## [1] 210 150 260 210  70\nboxplot(abc, def, ghi) \n\n\n\n\n\nboxplot(abc, def, ghi, col = c('yellow', 'cyan', 'green'),\n        names = c('BaseBall', 'SoccerBall', 'BeachBall'),\n        horizontal = TRUE)\n\n\n\n\n\nplot(1:10)\npar(new = T)\nplot(10:1)\n\n\n\n\nplot.new()\nplot(1:100)\n\n\n\n\n\nplot.new()\nplot(-4:4,-4:4, type = 'n')\npoints(rnorm(200), rnorm(200), pch = '+', col = 'red')\npar(new = T)\npoints(rnorm(200), rnorm(200), pch = 'o', col = 'cyan') \n\n\n\n\n\nx &lt;- c(1:10)\ny &lt;- x * x\nplot(x, y, type = 'n', main = 'Title')\nfor (i in 1:5) lines(x, (y + i * 5), col = i, lty = i)\n\n\n\n\n\nx &lt;- c(1, 3, 6, 8, 9)\ny &lt;- c(12, 56, 78, 32, 9)\nplot(x, y)\n\nsegments(6, 78, 8, 32)\narrows(3, 56, 1, 12)\nrect(4, 20, 6, 30, density = 3)\n\ntext(4, 40, '이것은 샘플입니다', srt = 55)\nmtext('상단의 문자열입니다', side = 3)\nmtext('우측의 문자열입니다', side = 4, adj = 0.3)\nbox(lty = 2, col = 'red')\naxis(1, pos = 40, at = 0:10, col = 2)\naxis(2, pos = 5, at = 10:60)\n\n\n\n\n\nx &lt;- c(1:10)\ny &lt;- exp(x)\nplot(x, y, type = 'n', main = 'Title')\nfor (i in 1:10) lines(x, (y + i * 5), col = i, lty = i)\n\n\n\ny &lt;- x * x\nplot(x, y, type = 'n', main = 'Title')\nfor (i in 1:10) lines(x, (y + i * 5), col = i, lty = i)\n\nmtext('Right Side Text', side = 4, adj = 0.5)\nabline(1:2)\nbox(lty = 2, col = 'red')\naxis(1, pos = 50, at = 0:10, col = 2)\naxis(2, pos = 6, at = 0:100, col = 3)\n\n\n\n\n\nx &lt;- c(1, 2, 1, 4, 5, 4, 5, 2, 3, 5, 2, 6, 7, 3, 7, 8, 6, 5, 4, 7, 7, 6, 5, 7, 8, 9, 8)\npar(mfrow = c(1, 2))\nhist(x)\nhist(x, probability = T, main = 'Histogram with density line')\nlines(density(x))\n\n\n\n\n\nx1 = seq(-3, 3, length = 50)\nx2 &lt;- seq(-4, 4, length = 60)\nf &lt;- function(x1, x2) {\n    x1 ^ 2 + x2 ^ 2 + x1 * x2\n}\ny = outer(x1, x2, FUN = f)\npersp(x1, x2, y)\n\n\n\n\n\n# install.packages('scatterplot3d')\nplot3DfishData &lt;- function(x, y, z, data = iris)\n{\n    require('scatterplot3d')\n    fish.variable &lt;- colnames(data)\n    scatterplot3d(\n        data[, x],\n        data[, y],\n        data[, z],\n        color = c('blue', 'black', 'red', 'green', 'turquoise')\n        [data$Species]\n        ,\n        pch = 19,\n        xlab = fish.variable[x],\n        ylab = fish.variable[y],\n        zlab = fish.variable[z]\n    )\n}\n\npar(mfrow = c(2, 2))\nplot3DfishData(1, 2, 5)\n## 필요한 패키지를 로딩중입니다: scatterplot3d\nplot3DfishData(1, 2, 3)\nplot3DfishData(3, 4, 5)\nplot3DfishData(2, 3, 5) \n\n\n\n\n\n# install.packages('lattice')\nlibrary(lattice)\ndata(quakes)\nhead(quakes)\n##      lat   long depth mag stations\n## 1 -20.42 181.62   562 4.8       41\n## 2 -20.62 181.03   650 4.2       15\n## 3 -26.00 184.10    42 5.4       43\n## 4 -17.97 181.66   626 4.1       19\n## 5 -20.42 181.96   649 4.0       11\n## 6 -19.68 184.31   195 4.0       12\n\nstr(quakes)\n## 'data.frame':    1000 obs. of  5 variables:\n##  $ lat     : num  -20.4 -20.6 -26 -18 -20.4 ...\n##  $ long    : num  182 181 184 182 182 ...\n##  $ depth   : int  562 650 42 626 649 195 82 194 211 622 ...\n##  $ mag     : num  4.8 4.2 5.4 4.1 4 4 4.8 4.4 4.7 4.3 ...\n##  $ stations: int  41 15 43 19 11 12 43 15 35 19 ...\n\nmini &lt;- min(quakes$depth)\nmaxi &lt;- max(quakes$depth)\nmini\n## [1] 40\nmaxi\n## [1] 680\n\nr &lt;- ceiling((maxi - mini) / 8)\ninf &lt;- seq(mini, maxi, r)\nr\n## [1] 80\ninf\n## [1]  40 120 200 280 360 440 520 600 680\n\nquakes$depth.cat &lt;- factor(floor((quakes$depth - mini) / r), labels = paste(inf, inf + r, sep = '-'))\n\nxyplot(lat ~ long | depth.cat, data = quakes, main = 'EarthQuake Data')\n\n\n\n\n\ncloud(mag ~ lat * long, data = quakes, sub = 'Magnitude With Longitude and Lattide')\n\n\n\n\n\nbwplot(mag ~ depth.cat, data = quakes, main = 'Depth and Strength Relationship')\n\n\n\n\n\ncloud(Species ~ Sepal.Length + Petal.Length, data = iris, main = 'IRIS Data View')\n\n\n\nsplom(iris[, 1:4])\n\n\n\nbwplot(Sepal.Length ~ Sepal.Width, data = iris)\n\n\n\n\n\n# install.packages('ggplot2')  \nlibrary(ggplot2)\n\ndiamonds\n## # A tibble: 53,940 × 10\n##    carat cut       color clarity depth table price     x     y     z\n##    &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n##  1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n##  2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n##  3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n##  4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n##  5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n##  6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n##  7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n##  8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n##  9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n## 10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n## # ℹ 53,930 more rows\ng &lt;- diamonds[order(diamonds$table),]\nhead(g)\n## # A tibble: 6 × 10\n##   carat cut       color clarity depth table price     x     y     z\n##   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n## 1  1.04 Ideal     I     VS1      62.9    43  4997  6.45  6.41  4.04\n## 2  0.29 Very Good E     VS1      62.8    44   474  4.2   4.24  2.65\n## 3  1    Fair      I     VS1      64      49  3951  6.43  6.39  4.1 \n## 4  0.3  Fair      E     SI1      64.5    49   630  4.28  4.25  2.75\n## 5  1.02 Fair      F     SI1      61.8    50  4227  6.59  6.51  4.05\n## 6  2    Fair      H     SI1      61.2    50 13764  8.17  8.08  4.97\ntail(g)\n## # A tibble: 6 × 10\n##   carat cut   color clarity depth table price     x     y     z\n##   &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n## 1  0.71 Fair  D     VS2      55.6    73  2368  6.01  5.96  3.33\n## 2  0.5  Fair  E     VS2      79      73  2579  5.21  5.18  4.09\n## 3  0.5  Fair  E     VS2      79      73  2579  5.21  5.18  4.09\n## 4  0.79 Fair  G     SI1      65.3    76  2362  5.52  5.13  3.35\n## 5  0.81 Fair  F     SI2      68.8    79  2301  5.26  5.2   3.58\n## 6  2.01 Fair  F     SI1      58.6    95 13387  8.32  8.31  4.87\n\n\ngg &lt;- ggplot(diamonds, aes(x = carat, y = price))\ngg + geom_point()\n\n\n\n\n\ngg &lt;- ggplot(diamonds, aes(x = carat, y = price))\ngg + geom_point(size = 1, shape = 2, color = 'steelblue', stroke = 1)\n\n\n\n\n\ngg &lt;- ggplot(diamonds, aes(x = carat, y = price))\ngg + geom_point(aes(size = carat, shape = cut, color = color, stroke = carat))\n## Warning: Using shapes for an ordinal variable is not advised\n\n\n\n\n\ngg1 &lt;- gg + geom_point(aes(color = color))\ngg2 &lt;- gg1 + labs(title = 'Diamonds', x = 'Carat Layer', y = 'Price Layer')\nprint(gg2)\n\n\n\n\n\ngg1 &lt;- gg + geom_point(aes(color = color))\ngg2 &lt;- gg1 + labs(title = 'Diamonds', x = 'Carat', y = 'Price')\ngg2 + theme(text = element_text(color = 'red'))\n\n\n\n\n\ngg1 &lt;- gg + geom_point(aes(color = color))\ngg2 &lt;- gg1 + labs(title = 'Diamonds', x = 'Carat', y = 'Price')\ngg3 &lt;- gg2 + theme(plot.title = element_text(size = 25),\n                   axis.title.x = element_text(size = 20),\n                   axis.title.y = element_text(size = 20),\n                   axis.text.x = element_text(size = 15),\n                   axis.text.y = element_text(size = 15))\nprint(gg3)\n\n\n\n\n\ngg1 &lt;- gg + geom_point(aes(color = color))\ngg2 &lt;- gg1 + labs(title = 'Diamonds', x = 'Carat', y = 'Price')\ngg3 &lt;- gg2 + theme(plot.title = element_text(size = 25),\n                   axis.title.x = element_text(size = 20),\n                   axis.title.y = element_text(size = 20),\n                   axis.text.x = element_text(size = 15),\n                   axis.text.y = element_text(size = 15))\nprint(gg3)\n\n\n\n\ngg3 + labs(title = 'Plot Title \\nSecond Line of Plot Title') +\n    theme(plot.title = element_text(face = 'bold', color = 'steelblue', lineheight = 1.2))\n\n\n\n\n\ngg1 &lt;- gg + geom_point(aes(color = color))\ngg2 &lt;- gg1 + labs(title = 'Diamonds', x = 'Carat', y = 'Price')\ngg3 &lt;- gg2 + theme(plot.title = element_text(size = 25), \n                   axis.title.x = element_text(size = 20),\n                   axis.title.y = element_text(size = 20),\n                   axis.text.x = element_text(size = 15),\n                   axis.text.y = element_text(size = 15))\nprint(gg3)\n\n\n\n\ngg3 + scale_colour_manual(name = 'Legend', \n                          values = c(\n                              'D' = 'grey',\n                              'E' = 'red',\n                              'F' = 'blue',\n                              'G' = 'yellow',\n                              'H' = 'black',\n                              'I' = 'green',\n                              'J' = 'firebrick'))\n\n\n\n\n\ngg1 &lt;- gg + geom_point(aes(color = color))\ngg2 &lt;- gg1 + labs(title = 'Diamonds', x = 'Carat', y = 'Price')\ngg3 &lt;- gg2 + theme(plot.title = element_text(size = 25), \n                   axis.title.x = element_text(size = 20), \n                   axis.title.y = element_text(size = 20), \n                   axis.text.x = element_text(size = 15), \n                   axis.text.y = element_text(size = 15))\nprint(gg3)\n\n\n\ngg3 + coord_cartesian(xlim = c(0, 3), ylim = c(0, 5000)) + geom_smooth()\n## `geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\ngg1 &lt;- gg + geom_point(aes(color = color))\ngg2 &lt;- gg1 + labs(title = 'Diamonds', x = 'Carat', y = 'Price')\ngg3 &lt;- gg2 + theme(plot.title = element_text(size = 25), \n                   axis.title.x = element_text(size = 20), \n                   axis.title.y = element_text(size = 20), \n                   axis.text.x = element_text(size = 15), \n                   axis.text.y = element_text(size = 15))\nprint(gg3)\n\n\n\n\ngg3 + coord_flip()\n\n\n\n\n\ngg1 &lt;- gg + geom_point(aes(color = color))\ngg2 &lt;- gg1 + labs(title = 'Diamonds', x = 'Carat', y = 'Price')\ngg3 &lt;- gg2 + theme(plot.title = element_text(size = 25), \n                   axis.title.x = element_text(size = 20), \n                   axis.title.y = element_text(size = 20), \n                   axis.text.x = element_text(size = 15), \n                   axis.text.y = element_text(size = 15))\nprint(gg3)\n\n\n\n\ngg3 + theme(plot.background = element_rect(fill = 'yellowgreen'),\n            plot.margin = unit(c(2, 4, 1, 3), 'cm'))\n\n\n\n\n\ngg1 &lt;- gg + geom_point(aes(color = color))\ngg2 &lt;- gg1 + labs(title = 'Diamonds', x = 'Carat', y = 'Price')\ngg3 &lt;- gg2 + theme(plot.title = element_text(size = 25), \n                   axis.title.x = element_text(size = 20), \n                   axis.title.y = element_text(size = 20), \n                   axis.text.x = element_text(size = 15), \n                   axis.text.y = element_text(size = 15))\nprint(gg3)\n\n\n\n\np1 &lt;- gg3 + geom_hline(yintercept = 5000, size = 2, linetype = 'dotted', color = 'blue')\n## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n## ℹ Please use `linewidth` instead.\nprint(p1)\n\n\n\n\n\noptions(scipen = 999)  # turn-off scientific notation like 1e+48\nlibrary(ggplot2)\ntheme_set(theme_bw())  # pre-set the bw theme.\ndata('midwest', package = 'ggplot2')\n\n# Scatterplot\ngg &lt;- ggplot(midwest, aes(x = area, y = poptotal)) +\n    geom_point(aes(col = state, size = popdensity)) +\n    geom_smooth(method = 'loess', se = F) +\n    xlim(c(0, 0.1)) +\n    ylim(c(0, 500000)) +\n    labs(subtitle = 'Area Vs Population',\n         y = 'Population',\n         x = 'Area',\n         title = 'Scatterplot',\n         caption = 'Source: midwest')\nplot(gg)\n## `geom_smooth()` using formula = 'y ~ x'\n## Warning: Removed 15 rows containing non-finite values (`stat_smooth()`).\n## Warning: Removed 15 rows containing missing values (`geom_point()`).\n\n\n\n\n\nlibrary(ggplot2)\ndata(mpg, package = 'ggplot2') # alternate source: 'http://goo.gl/uEeRGu')\ntheme_set(theme_bw())  # pre-set the bw theme.\n\ng &lt;- ggplot(mpg, aes(cty, hwy))\n\n# Scatterplot 그림을 그린다. 다음 내용은 배치로 만든 후에 실행할 것\ng + geom_point() +\n    geom_smooth(method = 'lm', se = F) +\n    labs(subtitle = 'mpg: city vs highway mileage',\n         y = 'hwy',\n         x = 'cty', \n         title = 'Scatterplot with overlapping points', \n         caption = 'Source: midwest')\n## `geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nlibrary(ggplot2)\ndata(mpg, package = 'ggplot2')\n\n# Scatterplot\ntheme_set(theme_bw()) #pre-set the bw theme.\ng &lt;- ggplot(mpg, aes(cty, hwy))\ng + geom_count(col = 'tomato3', show.legend = F) +\n    labs(subtitle = 'mpg: city vs highway mileage',\n         y = 'hwy',\n         x = 'cty',\n         title = 'Counts Plot')\n\n\n\n\n\nlibrary(ggplot2)\n# install.packages('ggExtra')\nlibrary(ggExtra)\ndata(mpg, package = 'ggplot2')\n\n# Scatterplot\ntheme_set(theme_bw())\n# pre-set the bw theme.\nmpg_select &lt;- mpg[mpg$hwy &gt;= 35 & mpg$cty &gt; 27,]\ng &lt;- ggplot(mpg, aes(cty, hwy)) +\n    geom_count() +\n    geom_smooth(method = 'lm', se = F)\n\nggMarginal(g, type = 'histogram', fill = 'transparent')\n## `geom_smooth()` using formula = 'y ~ x'\n## `geom_smooth()` using formula = 'y ~ x'\nggMarginal(g, type = 'boxplot', fill = 'transparent')\n## `geom_smooth()` using formula = 'y ~ x'\n## `geom_smooth()` using formula = 'y ~ x'\n## Warning: Continuous x aesthetic\n## ℹ did you forget `aes(group = ...)`?\n## Continuous x aesthetic\n## ℹ did you forget `aes(group = ...)`?\n\n\n\n\n\nlibrary(ggplot2)\n# install.packages('ggcorrplot')\nlibrary(ggcorrplot)\n# Correlation matrix\ndata(mtcars)\ncorr &lt;- round(cor(mtcars), 1)\n\n# Plot\nggcorrplot(corr,\n           hc.order = TRUE,\n           type = 'lower',\n           lab = TRUE,\n           lab_size = 3,\n           method = 'circle',\n           colors = c('tomato2', 'white', 'springgreen3'),\n           title = 'Correlogram of mtcars',\n           ggtheme = theme_bw)\n\n\n\n\n\nlibrary(ggplot2)\n\ntheme_set(theme_bw())\n\ndata('mtcars') # 데이터를 읽는다.\nmtcars$`car name` &lt;- rownames(mtcars) # 차 이름을 위한 칼럼을 만든다.\n\nmtcars$mpg_z &lt;- round((mtcars$mpg - mean(mtcars$mpg)) / sd(mtcars$mpg), 2)\n\nmtcars$mpg_type &lt;- ifelse(mtcars$mpg_z &lt; 0, 'below', 'above')\nmtcars &lt;- mtcars[order(mtcars$mpg_z), ] # 정렬한다.\nmtcars$'car name' &lt;- factor(mtcars$'car name', levels = mtcars$'car name')\n\nggplot(mtcars, aes(x = `car name`, y = mpg_z, label = mpg_z)) +\n    geom_bar(stat = 'identity', aes(fill = mpg_type), width = .5) +\n    scale_fill_manual(name = 'Mileage',\n                      labels = c('Above Average', 'Below Average'),\n                      values = c('above' = '#00ba38', 'below' = '#f8766d')) +\n    labs(subtitle = 'Normalised mileage from \"mtcars\"',\n         title = 'Diverging Bars') +\n    coord_flip()\n\n\n\n\n\nlibrary(ggplot2)\ntheme_set(theme_bw())\n\n# plot\ng &lt;- ggplot(mpg, aes(class, cty))\ng + geom_violin() +\n    labs(title = 'Violin plot',\n         subtitle = 'City Mileage vs Class of vehicle',\n         caption = 'Source: mpg',\n         x = 'Class of Vehicle',\n         y = 'City Mileage')\n\n\n\n\n\n# install.packages('ggplot2')  \nlibrary(ggplot2)            \nhead(iris) \n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1          5.1         3.5          1.4         0.2  setosa\n## 2          4.9         3.0          1.4         0.2  setosa\n## 3          4.7         3.2          1.3         0.2  setosa\n## 4          4.6         3.1          1.5         0.2  setosa\n## 5          5.0         3.6          1.4         0.2  setosa\n## 6          5.4         3.9          1.7         0.4  setosa\n\n\nqplot(Sepal.Length, Petal.Length, data = iris)\n## Warning: `qplot()` was deprecated in ggplot2 3.4.0.\n\n\n\n\n\nqplot(Sepal.Length, Petal.Length, data = iris, color = Species, size = Petal.Width)\n\n\n\n\n\nqplot(Sepal.Length, Petal.Length, data = iris, geom = 'line', color = Species)\n\n\n\n\n\nqplot(age, circumference, data = Orange, geom = 'line', colour = Tree, main = 'How does orange tree circumference vary with age?')\n\n\n\n\n\nTitanic\n## , , Age = Child, Survived = No\n## \n##       Sex\n## Class  Male Female\n##   1st     0      0\n##   2nd     0      0\n##   3rd    35     17\n##   Crew    0      0\n## \n## , , Age = Adult, Survived = No\n## \n##       Sex\n## Class  Male Female\n##   1st   118      4\n##   2nd   154     13\n##   3rd   387     89\n##   Crew  670      3\n## \n## , , Age = Child, Survived = Yes\n## \n##       Sex\n## Class  Male Female\n##   1st     5      1\n##   2nd    11     13\n##   3rd    13     14\n##   Crew    0      0\n## \n## , , Age = Adult, Survived = Yes\n## \n##       Sex\n## Class  Male Female\n##   1st    57    140\n##   2nd    14     80\n##   3rd    75     76\n##   Crew  192     20\nstr(Titanic)\n##  'table' num [1:4, 1:2, 1:2, 1:2] 0 0 35 0 0 0 17 0 118 154 ...\n##  - attr(*, \"dimnames\")=List of 4\n##   ..$ Class   : chr [1:4] \"1st\" \"2nd\" \"3rd\" \"Crew\"\n##   ..$ Sex     : chr [1:2] \"Male\" \"Female\"\n##   ..$ Age     : chr [1:2] \"Child\" \"Adult\"\n##   ..$ Survived: chr [1:2] \"No\" \"Yes\"\nmosaicplot(Titanic, main = 'Titanic Data, Class,Sex,Age,Survival', col = TRUE)"
  },
  {
    "objectID": "Data_Exploration/Data_Exploration_CH02.html",
    "href": "Data_Exploration/Data_Exploration_CH02.html",
    "title": "R 기초 사용법",
    "section": "",
    "text": "Part 2 : R 기초 사용법\n\nsearch()\n##  [1] \".GlobalEnv\"        \"package:lubridate\" \"package:forcats\"  \n##  [4] \"package:stringr\"   \"package:dplyr\"     \"package:purrr\"    \n##  [7] \"package:readr\"     \"package:tidyr\"     \"package:tibble\"   \n## [10] \"package:ggplot2\"   \"package:tidyverse\" \"package:stats\"    \n## [13] \"package:graphics\"  \"package:grDevices\" \"package:utils\"    \n## [16] \"package:datasets\"  \"package:methods\"   \"Autoloads\"        \n## [19] \"package:base\"\n# install.packages('igraph')\nlibrary(igraph)\n## \n## 다음의 패키지를 부착합니다: 'igraph'\n## The following objects are masked from 'package:lubridate':\n## \n##     %--%, union\n## The following objects are masked from 'package:dplyr':\n## \n##     as_data_frame, groups, union\n## The following objects are masked from 'package:purrr':\n## \n##     compose, simplify\n## The following object is masked from 'package:tidyr':\n## \n##     crossing\n## The following object is masked from 'package:tibble':\n## \n##     as_data_frame\n## The following objects are masked from 'package:stats':\n## \n##     decompose, spectrum\n## The following object is masked from 'package:base':\n## \n##     union\nsearch()\n##  [1] \".GlobalEnv\"        \"package:igraph\"    \"package:lubridate\"\n##  [4] \"package:forcats\"   \"package:stringr\"   \"package:dplyr\"    \n##  [7] \"package:purrr\"     \"package:readr\"     \"package:tidyr\"    \n## [10] \"package:tibble\"    \"package:ggplot2\"   \"package:tidyverse\"\n## [13] \"package:stats\"     \"package:graphics\"  \"package:grDevices\"\n## [16] \"package:utils\"     \"package:datasets\"  \"package:methods\"  \n## [19] \"Autoloads\"         \"package:base\"\n\n\n1 + 2\n## [1] 3\n(11 + 54 - 13) * 75 / 3\n## [1] 1300\n\n# R에서 지원하는 연산자의 종류이다\n# +, -, *, /            // 기본 연산자이다.\n# %/%                   // 나눗셈의 몫을 구한다.\n# %%                    // 나눗셈의 나머지를 구한다.\n# **                    // 거듭제곱을 구한다.\n7 %% 2\n## [1] 1\n7 %/% 2\n## [1] 3\n2 ** 3\n## [1] 8\nsqrt(4)\n## [1] 2\n\n# R에서 제공하는 수학 함수의 종류이다.\n# sin(x), cos(x), tan(x), sinh(x), asin(x) - 삼각함수 계산\n# log(x), log10(x), log2(x)                - 로그 계산\n# exp(x)\n# sqrt(x) - 루트 계산\n# trunc(x)- 소수점 이하를 버림\n\n\nrm(list = ls())\nls()\n## character(0)\ncharacter(0)\n## character(0)\n\nx &lt;- 2\nx\n## [1] 2\n\n(k &lt;- 3)\n## [1] 3\n\nz &lt;- x + k\n(m &lt;- x + k)\n## [1] 5\nls()\n## [1] \"k\" \"m\" \"x\" \"z\"\n\nrm(x)\nls()\n## [1] \"k\" \"m\" \"z\"\n\ncat('I love you')\n## I love you\ncat('I love you \\n')\n## I love you\n\n# setwd('./Data')\ngetwd()\n## [1] \"D:/Study-Blog/Data_Exploration\"\n\n\nhead(iris)\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1          5.1         3.5          1.4         0.2  setosa\n## 2          4.9         3.0          1.4         0.2  setosa\n## 3          4.7         3.2          1.3         0.2  setosa\n## 4          4.6         3.1          1.5         0.2  setosa\n## 5          5.0         3.6          1.4         0.2  setosa\n## 6          5.4         3.9          1.7         0.4  setosa\ntail(iris)\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n## 145          6.7         3.3          5.7         2.5 virginica\n## 146          6.7         3.0          5.2         2.3 virginica\n## 147          6.3         2.5          5.0         1.9 virginica\n## 148          6.5         3.0          5.2         2.0 virginica\n## 149          6.2         3.4          5.4         2.3 virginica\n## 150          5.9         3.0          5.1         1.8 virginica\nsummary(iris)\n##   Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n##  Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n##  1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n##  Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n##  Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n##  3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n##  Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n##        Species  \n##  setosa    :50  \n##  versicolor:50  \n##  virginica :50  \n##                 \n##                 \n## \ndata(warpbreaks)\nhead(warpbreaks)\n##   breaks wool tension\n## 1     26    A       L\n## 2     30    A       L\n## 3     54    A       L\n## 4     25    A       L\n## 5     70    A       L\n## 6     52    A       L\nstr(warpbreaks)\n## 'data.frame':    54 obs. of  3 variables:\n##  $ breaks : num  26 30 54 25 70 52 51 26 67 18 ...\n##  $ wool   : Factor w/ 2 levels \"A\",\"B\": 1 1 1 1 1 1 1 1 1 1 ...\n##  $ tension: Factor w/ 3 levels \"L\",\"M\",\"H\": 1 1 1 1 1 1 1 1 1 2 ...\nattach(warpbreaks)\n\nnum &lt;- factor(tension)\nstr(num)\n##  Factor w/ 3 levels \"L\",\"M\",\"H\": 1 1 1 1 1 1 1 1 1 2 ...\n\nnum2 &lt;- factor(breaks)\nstr(num2)\n##  Factor w/ 31 levels \"10\",\"12\",\"13\",..: 14 18 29 13 31 28 27 14 30 8 ...\n\nnum3 &lt;- as.numeric(breaks)\nstr(num3)\n##  num [1:54] 26 30 54 25 70 52 51 26 67 18 ...\n\nnum3\n##  [1] 26 30 54 25 70 52 51 26 67 18 21 29 17 12 18 35 30 36 36 21 24 18 10 43 28\n## [26] 15 26 27 14 29 19 29 31 41 20 44 42 26 19 16 39 28 21 39 29 20 21 24 17 13\n## [51] 15 15 16 28\n\ndetach(warpbreaks)\n\n# num3 &lt;- as.numeric(breaks)\n#&gt; Error: object 'breaks' not found\n\n\n# setwd('./Data')\nx &lt;- 1:100\nx\n##   [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n##  [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n##  [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n##  [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n##  [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n##  [91]  91  92  93  94  95  96  97  98  99 100\n\nsave(x, file = './data/number.Rdata')\n\nrm(x)\nls()\n## [1] \"k\"          \"m\"          \"num\"        \"num2\"       \"num3\"      \n## [6] \"warpbreaks\" \"z\"\n\nload('./data/number.Rdata')\nls()\n## [1] \"k\"          \"m\"          \"num\"        \"num2\"       \"num3\"      \n## [6] \"warpbreaks\" \"x\"          \"z\"\n\n\nno &lt;- c(1, 2, 3, 4)\nname &lt;- c('Apple', 'Banan', 'Peach', 'Cherry')\nprice &lt;- c(100, 200, 300, 400)\nqty &lt;- c(5, 7, 2, 9)\n\nfruit &lt;- data.frame(No = no,\n                    Name = name,\n                    Price = price,\n                    Qty = qty)\nfruit\n##   No   Name Price Qty\n## 1  1  Apple   100   5\n## 2  2  Banan   200   7\n## 3  3  Peach   300   2\n## 4  4 Cherry   400   9\nls()\n##  [1] \"fruit\"      \"k\"          \"m\"          \"name\"       \"no\"        \n##  [6] \"num\"        \"num2\"       \"num3\"       \"price\"      \"qty\"       \n## [11] \"warpbreaks\" \"x\"          \"z\"\n\nwrite.csv(fruit, file = './data/fruit.csv')\nrm(fruit)\nls()\n##  [1] \"k\"          \"m\"          \"name\"       \"no\"         \"num\"       \n##  [6] \"num2\"       \"num3\"       \"price\"      \"qty\"        \"warpbreaks\"\n## [11] \"x\"          \"z\"\n\nfruit &lt;- read.csv('./data/fruit.csv')\nfruit\n##   X No   Name Price Qty\n## 1 1  1  Apple   100   5\n## 2 2  2  Banan   200   7\n## 3 3  3  Peach   300   2\n## 4 4  4 Cherry   400   9\n\n\nsink('./data/output.txt')\ncat('I love you\\n')\n## I love you\nsink()\n\n\nx &lt;- scan('./data/testdata.txt', what = ')\nx\n\nstr(x)\n\nx[3]\n\ny &lt;- read.table('./data/testdata.txt', header = T)\ny\n\ny[1, ]\ny[, 2]\nstr(y) \n## Error: &lt;text&gt;:8:18: 예상하지 못한 기호(symbol)입니다.\n## 7: \n## 8: y &lt;- read.table('.\n##                     ^\n\n\nexcel &lt;- read.csv('./data/exceldata.csv')\nexcel\n##   no name birthday\n## 1  5  cho     1963\n## 2  7  kim     1968\n## 3 12 park     1999\n## 4 34 jung     2001\nexcel[1, ]\n##   no name birthday\n## 1  5  cho     1963\nexcel[, 2]\n## [1] \"cho\"  \"kim\"  \"park\" \"jung\"\nstr(excel) \n## 'data.frame':    4 obs. of  3 variables:\n##  $ no      : int  5 7 12 34\n##  $ name    : chr  \"cho\" \"kim\" \"park\" \"jung\"\n##  $ birthday: int  1963 1968 1999 2001\n\n\nhead(warpbreaks)\n##   breaks wool tension\n## 1     26    A       L\n## 2     30    A       L\n## 3     54    A       L\n## 4     25    A       L\n## 5     70    A       L\n## 6     52    A       L\nstr(warpbreaks)\n## 'data.frame':    54 obs. of  3 variables:\n##  $ breaks : num  26 30 54 25 70 52 51 26 67 18 ...\n##  $ wool   : Factor w/ 2 levels \"A\",\"B\": 1 1 1 1 1 1 1 1 1 1 ...\n##  $ tension: Factor w/ 3 levels \"L\",\"M\",\"H\": 1 1 1 1 1 1 1 1 1 2 ...\n\n\n1:10\n##  [1]  1  2  3  4  5  6  7  8  9 10\n1:5 + 3\n## [1] 4 5 6 7 8\nex &lt;- c(1:10)\nex\n##  [1]  1  2  3  4  5  6  7  8  9 10\nseq(from = 1, to = 12, by = 0.5)\n##  [1]  1.0  1.5  2.0  2.5  3.0  3.5  4.0  4.5  5.0  5.5  6.0  6.5  7.0  7.5  8.0\n## [16]  8.5  9.0  9.5 10.0 10.5 11.0 11.5 12.0\n\nrep(1:3, each = 3)\n## [1] 1 1 1 2 2 2 3 3 3\nrep(1:3, times = 2, len = 7)\n## [1] 1 2 3 1 2 3 1\n\n# data &lt;- scan()\n\n\nx &lt;- c(1, 2, 3, 4, 5)\nx\n## [1] 1 2 3 4 5\ny &lt;- c(5:1)\ny\n## [1] 5 4 3 2 1\nmean(x)\n## [1] 3\nrange(x)\n## [1] 1 5\nsort(x, decreasing = TRUE)\n## [1] 5 4 3 2 1\nlength(x)\n## [1] 5\nx\n## [1] 1 2 3 4 5\nx[2]\n## [1] 2\nxx &lt;- x[5]\nxx\n## [1] 5\n\nx[3] &lt;- 8\nx\n## [1] 1 2 8 4 5\n\n(x[-3])\n## [1] 1 2 4 5\nxa &lt;- x[-3]\nxa\n## [1] 1 2 4 5\nx[2:4]\n## [1] 2 8 4\n\nx\n## [1] 1 2 8 4 5\ny\n## [1] 5 4 3 2 1\nz &lt;- replace(x, c(2, 4), c(12, 13))\nz\n## [1]  1 12  8 13  5\nw &lt;- append(x, y)\nw\n##  [1] 1 2 8 4 5 5 4 3 2 1\n\n\nc(1, 2) + c(5, 4)\n## [1] 6 6\nc(1, 2, 3) + 1\n## [1] 2 3 4\nx\n## [1] 1 2 8 4 5\nx + 1\n## [1] 2 3 9 5 6\n\n\nvector &lt;- -5:5\nvector\n##  [1] -5 -4 -3 -2 -1  0  1  2  3  4  5\n\nvector2 &lt;- c(-5, 5)\nvector2\n## [1] -5  5\n\nvector3 &lt;- c(-5:5)\nvector3\n##  [1] -5 -4 -3 -2 -1  0  1  2  3  4  5\n\nvector4 &lt;- seq(from = -5, to = 5, by = 1)\nvector4\n##  [1] -5 -4 -3 -2 -1  0  1  2  3  4  5\n\nvector5 &lt;- seq(from = -5, to = 5, by = 0.5)\nvector5\n##  [1] -5.0 -4.5 -4.0 -3.5 -3.0 -2.5 -2.0 -1.5 -1.0 -0.5  0.0  0.5  1.0  1.5  2.0\n## [16]  2.5  3.0  3.5  4.0  4.5  5.0\n\nvector6 &lt;- seq(15)\nvector6\n##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n\n\nx &lt;- c(1, 2, 3)\ny &lt;- c(3, 5, 6)\nunion(x, y)\n## [1] 1 2 3 5 6\n\nintersect(x, y)\n## [1] 3\n\nsetdiff(x, y)\n## [1] 1 2\nis.element(2, x)\n## [1] TRUE\n\nx &lt;- c(sort(sample(1:99, 9)))\nx\n## [1]  6 14 24 25 32 41 47 59 72\n\n\nx &lt;- c('A', 'B', 'A', 'D', 'C', 'F', 'C')\nx\n## [1] \"A\" \"B\" \"A\" \"D\" \"C\" \"F\" \"C\"\nunique(x)\n## [1] \"A\" \"B\" \"D\" \"C\" \"F\"\nmatch(x, c('A'))\n## [1]  1 NA  1 NA NA NA NA\nk &lt;- paste(x[1], x[3])\nk\n## [1] \"A A\"\n\npaste(x, collapse = '%')\n## [1] \"A%B%A%D%C%F%C\"\n\npaste(x, collapse = '')\n## [1] \"ABADCFC\"\nm &lt;- paste(x, collapse = '')\n\nm\n## [1] \"ABADCFC\"\nsubstring(m, 2:5)\n## [1] \"BADCFC\" \"ADCFC\"  \"DCFC\"   \"CFC\"\n\nx &lt;- c('Jungwon', 'University', 'Computer', 'Science', 'Communication')\nx\n## [1] \"Jungwon\"       \"University\"    \"Computer\"      \"Science\"      \n## [5] \"Communication\"\ngrep('Co', x)\n## [1] 3 5\ngrep('(om)', x)\n## [1] 3 5\n\n\nx &lt;- runif(5)\nx\n## [1] 0.3619495 0.2854964 0.4627401 0.8954096 0.5455961\n(0.4 &lt;= x) & (x &lt;= 0.7)\n## [1] FALSE FALSE  TRUE FALSE  TRUE\nany(x &gt; 0.9)\n## [1] FALSE\nall(x &lt; 0.9)\n## [1] TRUE\nis.vector(x)\n## [1] TRUE\nis.factor(x)\n## [1] FALSE\nx &lt;- rnorm(5)\nx\n## [1] -0.1685140  1.5081007  0.1968600  0.2788476 -0.3967426\n\n\narray1 &lt;- c(1, 2, 3)\narray2 &lt;- c(4, 5, 6)\narray3 &lt;- c(7, 8, 9)\n\nmat1 &lt;- rbind(array1, array2, array3)\nmat1\n##        [,1] [,2] [,3]\n## array1    1    2    3\n## array2    4    5    6\n## array3    7    8    9\nmat2 &lt;- cbind(array1, array2, array3)\nmat2\n##      array1 array2 array3\n## [1,]      1      4      7\n## [2,]      2      5      8\n## [3,]      3      6      9\n\napply(mat1, 1, max)\n## array1 array2 array3 \n##      3      6      9\napply(mat1, 2, max)\n## [1] 7 8 9\n\ncolnames(mat1) &lt;- c('A', 'B', 'C')\nmat1\n##        A B C\n## array1 1 2 3\n## array2 4 5 6\n## array3 7 8 9\n\nk &lt;- c(1:9)\ntemp &lt;- matrix(k, nrow = 3)\ntemp\n##      [,1] [,2] [,3]\n## [1,]    1    4    7\n## [2,]    2    5    8\n## [3,]    3    6    9\n\ntemp * 2\n##      [,1] [,2] [,3]\n## [1,]    2    8   14\n## [2,]    4   10   16\n## [3,]    6   12   18\n\ntemp * c(2, 4, 6)\n##      [,1] [,2] [,3]\n## [1,]    2    8   14\n## [2,]    8   20   32\n## [3,]   18   36   54\n\nx &lt;- matrix(1:12, nrow = 3, dimnames = list(c('R1', 'R2', 'R3'), c('C1', 'C2', 'C3', 'C4')))\nx\n##    C1 C2 C3 C4\n## R1  1  4  7 10\n## R2  2  5  8 11\n## R3  3  6  9 12\nx[7]\n## [1] 7\nx[1, ]\n## C1 C2 C3 C4 \n##  1  4  7 10\nx[, 2:4]\n##    C2 C3 C4\n## R1  4  7 10\n## R2  5  8 11\n## R3  6  9 12\nx[,-2]\n##    C1 C3 C4\n## R1  1  7 10\n## R2  2  8 11\n## R3  3  9 12\n\nparData1 &lt;- x[1, ]\nparData1\n## C1 C2 C3 C4 \n##  1  4  7 10\n\nparData2 &lt;- x[3, ]\nparData2\n## C1 C2 C3 C4 \n##  3  6  9 12\n\nparData &lt;- rbind(parData1, parData2)\nparData\n##          C1 C2 C3 C4\n## parData1  1  4  7 10\n## parData2  3  6  9 12\n\nx\n##    C1 C2 C3 C4\n## R1  1  4  7 10\n## R2  2  5  8 11\n## R3  3  6  9 12\nmean(x[2, ])\n## [1] 6.5\napply(x, 1, sum)\n## R1 R2 R3 \n## 22 26 30\napply(x, 1, mean)\n##  R1  R2  R3 \n## 5.5 6.5 7.5\napply(x, 2, sum)\n## C1 C2 C3 C4 \n##  6 15 24 33\ncolSums(x)\n## C1 C2 C3 C4 \n##  6 15 24 33\nrowSums(x)\n## R1 R2 R3 \n## 22 26 30\n\n\nchars &lt;- c('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J')\nCmat1 &lt;- matrix(chars)\nCmat1\n##       [,1]\n##  [1,] \"A\" \n##  [2,] \"B\" \n##  [3,] \"C\" \n##  [4,] \"D\" \n##  [5,] \"E\" \n##  [6,] \"F\" \n##  [7,] \"G\" \n##  [8,] \"H\" \n##  [9,] \"I\" \n## [10,] \"J\"\nCmat2 &lt;- matrix(chars, nrow = 5)\nCmat2\n##      [,1] [,2]\n## [1,] \"A\"  \"F\" \n## [2,] \"B\"  \"G\" \n## [3,] \"C\"  \"H\" \n## [4,] \"D\"  \"I\" \n## [5,] \"E\"  \"J\"\n\nCmat3 &lt;- matrix(chars, ncol = 5)\nCmat3\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,] \"A\"  \"C\"  \"E\"  \"G\"  \"I\" \n## [2,] \"B\"  \"D\"  \"F\"  \"H\"  \"J\"\n\n\nno &lt;- c(1, 2, 3, 4)\nname &lt;- c('Minho', 'Juno', 'Mandy', 'Paul')\nages &lt;- c(52, 45, 32, 50)\nsex &lt;- c('M', 'M', 'F', 'M')\n\nInsa &lt;- data.frame(No = no, Name = name,\n                   Age = ages, Sex = sex)\nInsa\n##   No  Name Age Sex\n## 1  1 Minho  52   M\n## 2  2  Juno  45   M\n## 3  3 Mandy  32   F\n## 4  4  Paul  50   M\nInsa[1, ]\n##   No  Name Age Sex\n## 1  1 Minho  52   M\nInsa[1, ]\n##   No  Name Age Sex\n## 1  1 Minho  52   M\nInsa[, 2:4]\n##    Name Age Sex\n## 1 Minho  52   M\n## 2  Juno  45   M\n## 3 Mandy  32   F\n## 4  Paul  50   M\nInsa[,-3]\n##   No  Name Sex\n## 1  1 Minho   M\n## 2  2  Juno   M\n## 3  3 Mandy   F\n## 4  4  Paul   M\n\n\nx &lt;- array(1:24, dim = c(2,4,3))\nx  \n## , , 1\n## \n##      [,1] [,2] [,3] [,4]\n## [1,]    1    3    5    7\n## [2,]    2    4    6    8\n## \n## , , 2\n## \n##      [,1] [,2] [,3] [,4]\n## [1,]    9   11   13   15\n## [2,]   10   12   14   16\n## \n## , , 3\n## \n##      [,1] [,2] [,3] [,4]\n## [1,]   17   19   21   23\n## [2,]   18   20   22   24\n\nx[1,,] \n##      [,1] [,2] [,3]\n## [1,]    1    9   17\n## [2,]    3   11   19\n## [3,]    5   13   21\n## [4,]    7   15   23\nx[,1,]  \n##      [,1] [,2] [,3]\n## [1,]    1    9   17\n## [2,]    2   10   18\nx[1,3,]\n## [1]  5 13 21\nx[2,4,3]  \n## [1] 24\nmean(x[1,,])\n## [1] 12\nmean(x[,2,]) \n## [1] 11.5\nmean(x[1,2,])\n## [1] 11\n\n\nListData2 &lt;- c('Minho', c(12, 23, 34))\nListData2\n## [1] \"Minho\" \"12\"    \"23\"    \"34\"\nListData2[2]\n## [1] \"12\"\nListData2[3]\n## [1] \"23\"\n\nListData3 &lt;- list(name = 'Minho', age = 56, sex = 'Male')\nListData3\n## $name\n## [1] \"Minho\"\n## \n## $age\n## [1] 56\n## \n## $sex\n## [1] \"Male\"\n\nListData3$name\n## [1] \"Minho\"\nListData3[[1]]\n## [1] \"Minho\"\nListData3[1]\n## $name\n## [1] \"Minho\"\n\n\nrm(list=ls())\nls() \n## character(0)\n\nFunction1 &lt;- function() {  \n    x &lt;- 10\n    y &lt;- 20\n    result &lt;- x+y\n    return(result) \n}\n\nFunction1()\n## [1] 30\n\nFunction2 &lt;- function(a,b) {\n    x &lt;- a;\n    y &lt;- b;\n    return(x+y)\n}\n \nFunction3 &lt;- function(a,b) {\n    x2 &lt;- a+1\n    y2 &lt;- b+2\n    result &lt;- Function2(x2,y2)\n    return(result)\n}\n\nFunction3(5,6)\n## [1] 14\n\nls() \n## [1] \"Function1\" \"Function2\" \"Function3\"\n\nFunction4 &lt;- function() {\n    x &lt;- 10\n    y &lt;- 20\n    x &lt;&lt;- 50\n    return(x + y)\n}\n\nFunction4()  \n## [1] 30\n\nx\n## [1] 50\n\n\nls()\n## [1] \"Function1\" \"Function2\" \"Function3\" \"Function4\" \"x\"\n\nsave(Function1, Function2, Function3, x, file = './data/myFile.Rdata')\nrm(list = ls())\nls()\n## character(0)\n# Function1()\n#&gt; Error in Function1() : could not find function 'Function1'\n\nload('./data/myFile.Rdata')\nls()\n## [1] \"Function1\" \"Function2\" \"Function3\" \"x\"\nFunction1()\n## [1] 30\n\n\nx &lt;- runif(1)\nx\n## [1] 0.8215325\n\nif (x &gt; 0) print (abs(x))\n## [1] 0.8215325\n\nif (x &lt; 0) {\n    print(x)\n    print(' x is positive ')\n    print(abs(x))\n} else {\n    print(x)\n    print(' x is negative ')\n    print(x)\n}\n## [1] 0.8215325\n## [1] \" x is negative \"\n## [1] 0.8215325\n\nif (x &lt; 0.5) print(1 - x) else print(x)\n## [1] 0.8215325\n\nifelse (x &lt; 0.5, 1 - x, x)\n## [1] 0.8215325\n\ndata &lt;- c(1:10)\ndata\n##  [1]  1  2  3  4  5  6  7  8  9 10\n\nswitch(\n    data[3],\n    '1' = print('one'),\n    '2' = print('two'),\n    '3' = print('three'),\n    print('NOT')\n)\n## [1] \"three\"\n\n\nsum &lt;- 0\nfor (i in seq(1, 10, by = 1))\n    sum &lt;- sum + i\nsum\n## [1] 55\n\nmulti &lt;- 0\nfor (i in 1:5) {\n    for (j in 1:5) {\n        multi &lt;- multi + i * j\n    }\n}\nmulti\n## [1] 225\n\nsum &lt;- 0\ni &lt;- 0\nwhile (i &lt;= 10) {\n    sum &lt;- sum + i\n    i &lt;- i + 1\n}\nsum\n## [1] 55\nsum &lt;- 0\ni &lt;- 0\nrepeat {\n    sum &lt;- sum + i\n    \n    i &lt;- i + 1\n    if (i &gt; 10)\n        break\n}\nsum\n## [1] 55\n\n\nUserInput &lt;- function() {\n    answer &lt;- readline('Input Data : ')\n    if (substr(answer, 1, 1) == 'n')\n        cat(' Your Input is N \\n')\n    else\n        cat(' Your Input is Y \\n')\n}\n\nUserInput()\ny\n\nUserInput2 &lt;- function(a, b) {\n    answer &lt;- readline('Calculate method : ')\n    m &lt;- substr(answer, 1, 1)\n    \n    switch(\n        m,\n        '*' = cat('Result: ', a * b, '\\n'),\n        '/' = cat('Result: ', a / b, '\\n'),\n        '+' = cat('Result: ', a + b, '\\n'),\n        '-' = cat('Result: ', a - b, '\\n'),\n        print('Not proper Calculate method')\n    )\n}\n\nUserInput2(2, 3)\n+\n    \nUserInput2(2, 3)\n*\n    \nUserInput3 &lt;- function() {\n    x &lt;- readline('Input Data : ')\n    unlist(strsplit(x, ' '))\n}\n\ny &lt;- UserInput3()\na bcd ef ghi minho\ny\n## Error: &lt;text&gt;:30:1: 예기치 않은 '*'입니다\n## 29: UserInput2(2, 3)\n## 30: *\n##     ^\n\n\nUserMenu &lt;- function() {\n    answer &lt;- menu(c('Incheon', 'Seoul', 'Busan'))\n    if (answer == 1) {\n        cat('Your Input is Incheon \\n')\n    } else if (answer == 2) {\n        cat('Your Input is Seoul \\n')\n    } else if (answer == 3) {\n        cat('Your Input is Busan \\n')\n    }\n}\nUserMenu()\n## Error in menu(c(\"Incheon\", \"Seoul\", \"Busan\")): menu()는 인터랙티브하게 사용할 수 없습니다\n2\n## [1] 2\n\nk &lt;- c('Incheon', 'Seoul', 'Busan')\np &lt;- get(readline())\n## Error in get(readline()): 첫번째 인자가 유효하지 않습니다\nk\n## [1] \"Incheon\" \"Seoul\"   \"Busan\"\np\n## Error in eval(expr, envir, enclos): 객체 'p'를 찾을 수 없습니다\n\n\nData &lt;- c('Game', 'GAME', 'game', 'gAME', 'Tetris1', 'game', 'tetris5')\ngrep('game', Data)                          # Data에서 game이라는 단어의 위치 찾기\n## [1] 3 6\ngrep('game', Data, value = TRUE)            # Data에서 game이라는 단어의 위치를 찾고 값 보기\n## [1] \"game\" \"game\"\n\n# ^ : 첫 문자 / + : 문자가 1개 이상\ngrep('^g+', Data, value = TRUE)             # 첫 문자가 g이고 이후에 다른 문자가 1개 이상인 문자열\n## [1] \"game\" \"gAME\" \"game\"\ngrep('G+', Data, value = TRUE)              # G 이후에 다른 문자가 1개 이상인 문자열\n## [1] \"Game\" \"GAME\"\n\n# $ : 마지막 문자\ngrep('ME$', Data, value = TRUE)             # ME로 끝나는 문자열\n## [1] \"GAME\" \"gAME\"\ngrep('[2-5]', Data, value = TRUE)           # 2-5를 포함한 문자열\n## [1] \"tetris5\"\ngrep('[[:digit:]]', Data, value = TRUE)     # 숫자가 포함된 문자열\n## [1] \"Tetris1\" \"tetris5\"\ngrep('[[:upper:]]', Data, value = TRUE)     # 대문자가 포함된 문자열\n## [1] \"Game\"    \"GAME\"    \"gAME\"    \"Tetris1\"\n\nx &lt;- 'abcd efgh'\nnchar(x)                                    # 문자열의 문자 수\n## [1] 9\ny &lt;- 'xyz'\npaste(x, y)                                 # 두개의 문자열 합치기\n## [1] \"abcd efgh xyz\"\nsubstr(x, 6, 8)                             # 문자열에서 6~8번째 문자 추출\n## [1] \"efg\"\nstrsplit(x, split = 'c')                    # 문자열을 C를 기준으로 두개로 나눔\n## [[1]]\n## [1] \"ab\"     \"d efgh\"\n\n\ntext &lt;- '2017 Year 3 month 2day 5:45 afternoon'\nkkol &lt;- gsub('(2017).+(:)', '', text)               # 2017에서 : 사이 1개 이상(+) 모든 문자(.)를 공백('')으로 변환\nkkol\n## [1] \"45 afternoon\"\n\nkko2 &lt;- gsub('45', '', kkol)                        # 45를 공백으로 변환\nkko2\n## [1] \" afternoon\"\nkko2 &lt;- 'after happy moon'\nkko3 &lt;- gsub('[a]', '', kko2)                       # 하나라도 A를 포함한 것([])이 있으면 공백으로 변환\nkko3\n## [1] \"fter hppy moon\"\nkko4 &lt;- gsub('(hppy)', '', kko3)                    # hppy에 해당하는 문자열(())이 있으면 공백으로 변환\nkko4\n## [1] \"fter  moon\"\n\nkko4 &lt;- '(Minho) Happy Man'\nkko4\n## [1] \"(Minho) Happy Man\"\nkko5 &lt;- gsub('\\\\(Minho\\\\)', 'P', kko4)              # 문자열에 (Minho)를 P로 변환, \\\\ : 문자 그대로라는 의미\nkko5\n## [1] \"P Happy Man\"\n\ntest &lt;- c('$10.5', '$20.7', '$30.5')\ntest\n## [1] \"$10.5\" \"$20.7\" \"$30.5\"\n\ntest2 &lt;- as.numeric(gsub(\"[^[:digit:]]\", \"\", test)) # 시작(^)할 때 숫자가 있는 것을 모두([]) 공백으로 하고, 남은 것을 숫자로 변환\ntest2\n## [1] 105 207 305\nstr(test2)\n##  num [1:3] 105 207 305\n\n\ngrep('\\\\d', c('Game', 'GAME', 'game', 'gAME', 'Tetris1', 'game', 'tetris5'), value = TRUE)\n## [1] \"Tetris1\" \"tetris5\"\n\n\nx\n## [1] \"abcd efgh\"\nstrsplit(x, split = '\\\\s')\n## [[1]]\n## [1] \"abcd\" \"efgh\"\n\n\nprint('This is a Sample Program')\n## [1] \"This is a Sample Program\"\n(y &lt;- c(20:30))\n##  [1] 20 21 22 23 24 25 26 27 28 29 30\n\n\nsource('testmodule.R')\ny &lt;- myfunc()\ny\nsource('testmodule2.R')\nx &lt;- myfunc2()\nx\n\n\nx &lt;- c(1, 2, 3)\ny &lt;- c(4, 5, 6)\n\nz &lt;- rbind(x, y)\nz\n##   [,1] [,2] [,3]\n## x    1    2    3\n## y    4    5    6\n\nzz &lt;- cbind(x, y)\nzz\n##      x y\n## [1,] 1 4\n## [2,] 2 5\n## [3,] 3 6\nz[1, ]\n## [1] 1 2 3\nz[, 2]\n## x y \n## 2 5\nz[2, 3]\n## y \n## 6\nz[-1, ]\n## [1] 4 5 6\nz[, -2]\n##   [,1] [,2]\n## x    1    3\n## y    4    6\ntemp &lt;- z[2, 3]\ntemp\n## y \n## 6\n\nz + 2\n##   [,1] [,2] [,3]\n## x    3    4    5\n## y    6    7    8\n2 * z + 3\n##   [,1] [,2] [,3]\n## x    5    7    9\n## y   11   13   15\n\na &lt;- c(10, 11, 12)\nb &lt;- c(13, 14, 15)\nab &lt;- rbind(a, b)\nz\n##   [,1] [,2] [,3]\n## x    1    2    3\n## y    4    5    6\nab\n##   [,1] [,2] [,3]\n## a   10   11   12\n## b   13   14   15\nz + ab\n##   [,1] [,2] [,3]\n## x   11   13   15\n## y   17   19   21\nx &lt;- c(1, 2, 3)\ny &lt;- c(4, 5, 6)\n\nz &lt;- rbind(x, y)\nz\n##   [,1] [,2] [,3]\n## x    1    2    3\n## y    4    5    6\n\nzz &lt;- cbind(x, y)\nzz\n##      x y\n## [1,] 1 4\n## [2,] 2 5\n## [3,] 3 6\nz[1, ]\n## [1] 1 2 3\nz[, 2]\n## x y \n## 2 5\nz[2, 3]\n## y \n## 6\nz[-1, ]\n## [1] 4 5 6\nz[, -2]\n##   [,1] [,2]\n## x    1    3\n## y    4    6\ntemp &lt;- z[2, 3]\ntemp\n## y \n## 6\n\nz + 2\n##   [,1] [,2] [,3]\n## x    3    4    5\n## y    6    7    8\n2 * z + 3\n##   [,1] [,2] [,3]\n## x    5    7    9\n## y   11   13   15\n\na &lt;- c(10, 11, 12)\nb &lt;- c(13, 14, 15)\nab &lt;- rbind(a, b)\nz\n##   [,1] [,2] [,3]\n## x    1    2    3\n## y    4    5    6\nab\n##   [,1] [,2] [,3]\n## a   10   11   12\n## b   13   14   15\nz + ab\n##   [,1] [,2] [,3]\n## x   11   13   15\n## y   17   19   21\nab - z\n##   [,1] [,2] [,3]\n## a    9    9    9\n## b    9    9    9\n\n\nsample &lt;- matrix(1:20, ncol = 5)\nsample\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]    1    5    9   13   17\n## [2,]    2    6   10   14   18\n## [3,]    3    7   11   15   19\n## [4,]    4    8   12   16   20\n\napply(sample, 1, sum)   # 행 기준 합계\n## [1] 45 50 55 60\napply(sample, 2, sum)   # 열 기준 합계\n## [1] 10 26 42 58 74\napply(sample, 1, mean)  # 행 기준 평균\n## [1]  9 10 11 12\napply(sample, 1, max)   # 열 기준 최댓값\n## [1] 17 18 19 20\nrowSums(sample)         # 행의 합\n## [1] 45 50 55 60\ncolSums(sample)         # 열의 합\n## [1] 10 26 42 58 74\n\nappfunction &lt;- function(t) {\n    max(t) * 2\n}\napply(sample, 1, appfunction)\n## [1] 34 36 38 40\n\n\nhead(iris)\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1          5.1         3.5          1.4         0.2  setosa\n## 2          4.9         3.0          1.4         0.2  setosa\n## 3          4.7         3.2          1.3         0.2  setosa\n## 4          4.6         3.1          1.5         0.2  setosa\n## 5          5.0         3.6          1.4         0.2  setosa\n## 6          5.4         3.9          1.7         0.4  setosa\n\nsummary(iris)\n##   Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n##  Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n##  1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n##  Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n##  Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n##  3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n##  Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n##        Species  \n##  setosa    :50  \n##  versicolor:50  \n##  virginica :50  \n##                 \n##                 \n## \n\norder(iris$Sepal.Width) # iris 데이터를 Sepal.Width를 기준으로 정렬했을 때, 열의 번호 반환\n##   [1]  61  63  69 120  42  54  88  94  58  81  82  70  73  90  99 107 109 114\n##  [19] 147  80  91  93 119 135  60  68  83  84  95 102 112 124 143  55  56  72\n##  [37]  74  77 100 115 122 123 127 129 131 133 134   9  59  64  65  75  79  97\n##  [55]  98 104 108   2  13  14  26  39  46  62  67  76  78  85  89  92  96 103\n##  [73] 105 106 113 117 128 130 136 139 146 148 150   4  10  31  35  53  66  87\n##  [91] 138 140 141 142   3  30  36  43  48  51  52  71 111 116 121 126 144  24\n## [109]  50  57 101 125 145   7   8  12  21  25  27  29  32  40  86 137 149   1\n## [127]  18  28  37  41  44   5  23  38 110  11  22  49  19  20  45  47 118 132\n## [145]   6  17  15  33  34  16\n\nprint(iris[60:65, ])\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 60          5.2         2.7          3.9         1.4 versicolor\n## 61          5.0         2.0          3.5         1.0 versicolor\n## 62          5.9         3.0          4.2         1.5 versicolor\n## 63          6.0         2.2          4.0         1.0 versicolor\n## 64          6.1         2.9          4.7         1.4 versicolor\n## 65          5.6         2.9          3.6         1.3 versicolor\n\ntemp &lt;- iris[order(iris$Sepal.Width), ]\n\nhead(temp)\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 61           5.0         2.0          3.5         1.0 versicolor\n## 63           6.0         2.2          4.0         1.0 versicolor\n## 69           6.2         2.2          4.5         1.5 versicolor\n## 120          6.0         2.2          5.0         1.5  virginica\n## 42           4.5         2.3          1.3         0.3     setosa\n## 54           5.5         2.3          4.0         1.3 versicolor\n\ntemp2 &lt;- iris[order(iris$Sepal.Width, iris$Sepal.Length), ]\n\nhead(temp2)\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 61           5.0         2.0          3.5         1.0 versicolor\n## 63           6.0         2.2          4.0         1.0 versicolor\n## 120          6.0         2.2          5.0         1.5  virginica\n## 69           6.2         2.2          4.5         1.5 versicolor\n## 42           4.5         2.3          1.3         0.3     setosa\n## 94           5.0         2.3          3.3         1.0 versicolor\n\nsample(1:10, 5, replace = TRUE)\n## [1]  6  3  6 10  1\n\n\nsplit(iris, iris$Species)\n## $setosa\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1           5.1         3.5          1.4         0.2  setosa\n## 2           4.9         3.0          1.4         0.2  setosa\n## 3           4.7         3.2          1.3         0.2  setosa\n## 4           4.6         3.1          1.5         0.2  setosa\n## 5           5.0         3.6          1.4         0.2  setosa\n## 6           5.4         3.9          1.7         0.4  setosa\n## 7           4.6         3.4          1.4         0.3  setosa\n## 8           5.0         3.4          1.5         0.2  setosa\n## 9           4.4         2.9          1.4         0.2  setosa\n## 10          4.9         3.1          1.5         0.1  setosa\n## 11          5.4         3.7          1.5         0.2  setosa\n## 12          4.8         3.4          1.6         0.2  setosa\n## 13          4.8         3.0          1.4         0.1  setosa\n## 14          4.3         3.0          1.1         0.1  setosa\n## 15          5.8         4.0          1.2         0.2  setosa\n## 16          5.7         4.4          1.5         0.4  setosa\n## 17          5.4         3.9          1.3         0.4  setosa\n## 18          5.1         3.5          1.4         0.3  setosa\n## 19          5.7         3.8          1.7         0.3  setosa\n## 20          5.1         3.8          1.5         0.3  setosa\n## 21          5.4         3.4          1.7         0.2  setosa\n## 22          5.1         3.7          1.5         0.4  setosa\n## 23          4.6         3.6          1.0         0.2  setosa\n## 24          5.1         3.3          1.7         0.5  setosa\n## 25          4.8         3.4          1.9         0.2  setosa\n## 26          5.0         3.0          1.6         0.2  setosa\n## 27          5.0         3.4          1.6         0.4  setosa\n## 28          5.2         3.5          1.5         0.2  setosa\n## 29          5.2         3.4          1.4         0.2  setosa\n## 30          4.7         3.2          1.6         0.2  setosa\n## 31          4.8         3.1          1.6         0.2  setosa\n## 32          5.4         3.4          1.5         0.4  setosa\n## 33          5.2         4.1          1.5         0.1  setosa\n## 34          5.5         4.2          1.4         0.2  setosa\n## 35          4.9         3.1          1.5         0.2  setosa\n## 36          5.0         3.2          1.2         0.2  setosa\n## 37          5.5         3.5          1.3         0.2  setosa\n## 38          4.9         3.6          1.4         0.1  setosa\n## 39          4.4         3.0          1.3         0.2  setosa\n## 40          5.1         3.4          1.5         0.2  setosa\n## 41          5.0         3.5          1.3         0.3  setosa\n## 42          4.5         2.3          1.3         0.3  setosa\n## 43          4.4         3.2          1.3         0.2  setosa\n## 44          5.0         3.5          1.6         0.6  setosa\n## 45          5.1         3.8          1.9         0.4  setosa\n## 46          4.8         3.0          1.4         0.3  setosa\n## 47          5.1         3.8          1.6         0.2  setosa\n## 48          4.6         3.2          1.4         0.2  setosa\n## 49          5.3         3.7          1.5         0.2  setosa\n## 50          5.0         3.3          1.4         0.2  setosa\n## \n## $versicolor\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 51           7.0         3.2          4.7         1.4 versicolor\n## 52           6.4         3.2          4.5         1.5 versicolor\n## 53           6.9         3.1          4.9         1.5 versicolor\n## 54           5.5         2.3          4.0         1.3 versicolor\n## 55           6.5         2.8          4.6         1.5 versicolor\n## 56           5.7         2.8          4.5         1.3 versicolor\n## 57           6.3         3.3          4.7         1.6 versicolor\n## 58           4.9         2.4          3.3         1.0 versicolor\n## 59           6.6         2.9          4.6         1.3 versicolor\n## 60           5.2         2.7          3.9         1.4 versicolor\n## 61           5.0         2.0          3.5         1.0 versicolor\n## 62           5.9         3.0          4.2         1.5 versicolor\n## 63           6.0         2.2          4.0         1.0 versicolor\n## 64           6.1         2.9          4.7         1.4 versicolor\n## 65           5.6         2.9          3.6         1.3 versicolor\n## 66           6.7         3.1          4.4         1.4 versicolor\n## 67           5.6         3.0          4.5         1.5 versicolor\n## 68           5.8         2.7          4.1         1.0 versicolor\n## 69           6.2         2.2          4.5         1.5 versicolor\n## 70           5.6         2.5          3.9         1.1 versicolor\n## 71           5.9         3.2          4.8         1.8 versicolor\n## 72           6.1         2.8          4.0         1.3 versicolor\n## 73           6.3         2.5          4.9         1.5 versicolor\n## 74           6.1         2.8          4.7         1.2 versicolor\n## 75           6.4         2.9          4.3         1.3 versicolor\n## 76           6.6         3.0          4.4         1.4 versicolor\n## 77           6.8         2.8          4.8         1.4 versicolor\n## 78           6.7         3.0          5.0         1.7 versicolor\n## 79           6.0         2.9          4.5         1.5 versicolor\n## 80           5.7         2.6          3.5         1.0 versicolor\n## 81           5.5         2.4          3.8         1.1 versicolor\n## 82           5.5         2.4          3.7         1.0 versicolor\n## 83           5.8         2.7          3.9         1.2 versicolor\n## 84           6.0         2.7          5.1         1.6 versicolor\n## 85           5.4         3.0          4.5         1.5 versicolor\n## 86           6.0         3.4          4.5         1.6 versicolor\n## 87           6.7         3.1          4.7         1.5 versicolor\n## 88           6.3         2.3          4.4         1.3 versicolor\n## 89           5.6         3.0          4.1         1.3 versicolor\n## 90           5.5         2.5          4.0         1.3 versicolor\n## 91           5.5         2.6          4.4         1.2 versicolor\n## 92           6.1         3.0          4.6         1.4 versicolor\n## 93           5.8         2.6          4.0         1.2 versicolor\n## 94           5.0         2.3          3.3         1.0 versicolor\n## 95           5.6         2.7          4.2         1.3 versicolor\n## 96           5.7         3.0          4.2         1.2 versicolor\n## 97           5.7         2.9          4.2         1.3 versicolor\n## 98           6.2         2.9          4.3         1.3 versicolor\n## 99           5.1         2.5          3.0         1.1 versicolor\n## 100          5.7         2.8          4.1         1.3 versicolor\n## \n## $virginica\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n## 101          6.3         3.3          6.0         2.5 virginica\n## 102          5.8         2.7          5.1         1.9 virginica\n## 103          7.1         3.0          5.9         2.1 virginica\n## 104          6.3         2.9          5.6         1.8 virginica\n## 105          6.5         3.0          5.8         2.2 virginica\n## 106          7.6         3.0          6.6         2.1 virginica\n## 107          4.9         2.5          4.5         1.7 virginica\n## 108          7.3         2.9          6.3         1.8 virginica\n## 109          6.7         2.5          5.8         1.8 virginica\n## 110          7.2         3.6          6.1         2.5 virginica\n## 111          6.5         3.2          5.1         2.0 virginica\n## 112          6.4         2.7          5.3         1.9 virginica\n## 113          6.8         3.0          5.5         2.1 virginica\n## 114          5.7         2.5          5.0         2.0 virginica\n## 115          5.8         2.8          5.1         2.4 virginica\n## 116          6.4         3.2          5.3         2.3 virginica\n## 117          6.5         3.0          5.5         1.8 virginica\n## 118          7.7         3.8          6.7         2.2 virginica\n## 119          7.7         2.6          6.9         2.3 virginica\n## 120          6.0         2.2          5.0         1.5 virginica\n## 121          6.9         3.2          5.7         2.3 virginica\n## 122          5.6         2.8          4.9         2.0 virginica\n## 123          7.7         2.8          6.7         2.0 virginica\n## 124          6.3         2.7          4.9         1.8 virginica\n## 125          6.7         3.3          5.7         2.1 virginica\n## 126          7.2         3.2          6.0         1.8 virginica\n## 127          6.2         2.8          4.8         1.8 virginica\n## 128          6.1         3.0          4.9         1.8 virginica\n## 129          6.4         2.8          5.6         2.1 virginica\n## 130          7.2         3.0          5.8         1.6 virginica\n## 131          7.4         2.8          6.1         1.9 virginica\n## 132          7.9         3.8          6.4         2.0 virginica\n## 133          6.4         2.8          5.6         2.2 virginica\n## 134          6.3         2.8          5.1         1.5 virginica\n## 135          6.1         2.6          5.6         1.4 virginica\n## 136          7.7         3.0          6.1         2.3 virginica\n## 137          6.3         3.4          5.6         2.4 virginica\n## 138          6.4         3.1          5.5         1.8 virginica\n## 139          6.0         3.0          4.8         1.8 virginica\n## 140          6.9         3.1          5.4         2.1 virginica\n## 141          6.7         3.1          5.6         2.4 virginica\n## 142          6.9         3.1          5.1         2.3 virginica\n## 143          5.8         2.7          5.1         1.9 virginica\n## 144          6.8         3.2          5.9         2.3 virginica\n## 145          6.7         3.3          5.7         2.5 virginica\n## 146          6.7         3.0          5.2         2.3 virginica\n## 147          6.3         2.5          5.0         1.9 virginica\n## 148          6.5         3.0          5.2         2.0 virginica\n## 149          6.2         3.4          5.4         2.3 virginica\n## 150          5.9         3.0          5.1         1.8 virginica\n\ntemp &lt;- subset(iris, Species == 'setosa')\nhead(temp)\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1          5.1         3.5          1.4         0.2  setosa\n## 2          4.9         3.0          1.4         0.2  setosa\n## 3          4.7         3.2          1.3         0.2  setosa\n## 4          4.6         3.1          1.5         0.2  setosa\n## 5          5.0         3.6          1.4         0.2  setosa\n## 6          5.4         3.9          1.7         0.4  setosa\n\ntemp2 &lt;- subset(iris, Species == 'setosa' & Sepal.Length &gt; 5.0)\nhead(temp2)\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1           5.1         3.5          1.4         0.2  setosa\n## 6           5.4         3.9          1.7         0.4  setosa\n## 11          5.4         3.7          1.5         0.2  setosa\n## 15          5.8         4.0          1.2         0.2  setosa\n## 16          5.7         4.4          1.5         0.4  setosa\n## 17          5.4         3.9          1.3         0.4  setosa\n\ntemp3 &lt;- subset(iris, select = c(Sepal.Width, Species))\nstr(temp3)\n## 'data.frame':    150 obs. of  2 variables:\n##  $ Sepal.Width: num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n##  $ Species    : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\nhead(temp3)\n##   Sepal.Width Species\n## 1         3.5  setosa\n## 2         3.0  setosa\n## 3         3.2  setosa\n## 4         3.1  setosa\n## 5         3.6  setosa\n## 6         3.9  setosa\n\nwith (iris, {\n    print('Max of Sepal.Width\\n')\n    print(max(Sepal.Width))\n    print('Min of Sepal.Width\\n')\n    print(min(Sepal.Width))\n})\n## [1] \"Max of Sepal.Width\\n\"\n## [1] 4.4\n## [1] \"Min of Sepal.Width\\n\"\n## [1] 2\n\nscore &lt;- data.frame(name = c('Seoul', 'Busan', 'Daegu', 'KwangJu'),\n                    population = c(1500, 200, 150, 70))\nscore\n##      name population\n## 1   Seoul       1500\n## 2   Busan        200\n## 3   Daegu        150\n## 4 KwangJu         70\n\nscore2 &lt;- data.frame(name = c('KwangJu', 'Daegu', 'Seoul', 'Busan'),\n                     HighTemp = c(35, 40, 32, 29))\nscore2\n##      name HighTemp\n## 1 KwangJu       35\n## 2   Daegu       40\n## 3   Seoul       32\n## 4   Busan       29\n\nmerge(score, score2)\n##      name population HighTemp\n## 1   Busan        200       29\n## 2   Daegu        150       40\n## 3 KwangJu         70       35\n## 4   Seoul       1500       32\n\n\nwhich.min(iris$Sepal.Length)\n## [1] 14\nwhich.max(iris$Sepal.Length)\n## [1] 132\n\naggregate(Sepal.Width ~ Species, iris, mean)\n##      Species Sepal.Width\n## 1     setosa       3.428\n## 2 versicolor       2.770\n## 3  virginica       2.974\n\naggregate(Sepal.Width ~ Species, iris, max)\n##      Species Sepal.Width\n## 1     setosa         4.4\n## 2 versicolor         3.4\n## 3  virginica         3.8\n\n\n# install.packages(c('dplyr', 'hflights'))\nlibrary(dplyr)\nlibrary(hflights)\nhead(hflights)\n##      Year Month DayofMonth DayOfWeek DepTime ArrTime UniqueCarrier FlightNum\n## 5424 2011     1          1         6    1400    1500            AA       428\n## 5425 2011     1          2         7    1401    1501            AA       428\n## 5426 2011     1          3         1    1352    1502            AA       428\n## 5427 2011     1          4         2    1403    1513            AA       428\n## 5428 2011     1          5         3    1405    1507            AA       428\n## 5429 2011     1          6         4    1359    1503            AA       428\n##      TailNum ActualElapsedTime AirTime ArrDelay DepDelay Origin Dest Distance\n## 5424  N576AA                60      40      -10        0    IAH  DFW      224\n## 5425  N557AA                60      45       -9        1    IAH  DFW      224\n## 5426  N541AA                70      48       -8       -8    IAH  DFW      224\n## 5427  N403AA                70      39        3        3    IAH  DFW      224\n## 5428  N492AA                62      44       -3        5    IAH  DFW      224\n## 5429  N262AA                64      45       -7       -1    IAH  DFW      224\n##      TaxiIn TaxiOut Cancelled CancellationCode Diverted\n## 5424      7      13         0                         0\n## 5425      6       9         0                         0\n## 5426      5      17         0                         0\n## 5427      9      22         0                         0\n## 5428      9       9         0                         0\n## 5429      6      13         0                         0\ndim(hflights)\n## [1] 227496     21\nstr(hflights)\n## 'data.frame':    227496 obs. of  21 variables:\n##  $ Year             : int  2011 2011 2011 2011 2011 2011 2011 2011 2011 2011 ...\n##  $ Month            : int  1 1 1 1 1 1 1 1 1 1 ...\n##  $ DayofMonth       : int  1 2 3 4 5 6 7 8 9 10 ...\n##  $ DayOfWeek        : int  6 7 1 2 3 4 5 6 7 1 ...\n##  $ DepTime          : int  1400 1401 1352 1403 1405 1359 1359 1355 1443 1443 ...\n##  $ ArrTime          : int  1500 1501 1502 1513 1507 1503 1509 1454 1554 1553 ...\n##  $ UniqueCarrier    : chr  \"AA\" \"AA\" \"AA\" \"AA\" ...\n##  $ FlightNum        : int  428 428 428 428 428 428 428 428 428 428 ...\n##  $ TailNum          : chr  \"N576AA\" \"N557AA\" \"N541AA\" \"N403AA\" ...\n##  $ ActualElapsedTime: int  60 60 70 70 62 64 70 59 71 70 ...\n##  $ AirTime          : int  40 45 48 39 44 45 43 40 41 45 ...\n##  $ ArrDelay         : int  -10 -9 -8 3 -3 -7 -1 -16 44 43 ...\n##  $ DepDelay         : int  0 1 -8 3 5 -1 -1 -5 43 43 ...\n##  $ Origin           : chr  \"IAH\" \"IAH\" \"IAH\" \"IAH\" ...\n##  $ Dest             : chr  \"DFW\" \"DFW\" \"DFW\" \"DFW\" ...\n##  $ Distance         : int  224 224 224 224 224 224 224 224 224 224 ...\n##  $ TaxiIn           : int  7 6 5 9 9 6 12 7 8 6 ...\n##  $ TaxiOut          : int  13 9 17 22 9 13 15 12 22 19 ...\n##  $ Cancelled        : int  0 0 0 0 0 0 0 0 0 0 ...\n##  $ CancellationCode : chr  \"\" \"\" \"\" \"\" ...\n##  $ Diverted         : int  0 0 0 0 0 0 0 0 0 0 ...\n\nhflights_df &lt;- tbl_df(hflights)\n## Warning: `tbl_df()` was deprecated in dplyr 1.0.0.\n## ℹ Please use `tibble::as_tibble()` instead.\nhead(hflights_df)\n## # A tibble: 6 × 21\n##    Year Month DayofMonth DayOfWeek DepTime ArrTime UniqueCarrier FlightNum\n##   &lt;int&gt; &lt;int&gt;      &lt;int&gt;     &lt;int&gt;   &lt;int&gt;   &lt;int&gt; &lt;chr&gt;             &lt;int&gt;\n## 1  2011     1          1         6    1400    1500 AA                  428\n## 2  2011     1          2         7    1401    1501 AA                  428\n## 3  2011     1          3         1    1352    1502 AA                  428\n## 4  2011     1          4         2    1403    1513 AA                  428\n## 5  2011     1          5         3    1405    1507 AA                  428\n## 6  2011     1          6         4    1359    1503 AA                  428\n## # ℹ 13 more variables: TailNum &lt;chr&gt;, ActualElapsedTime &lt;int&gt;, AirTime &lt;int&gt;,\n## #   ArrDelay &lt;int&gt;, DepDelay &lt;int&gt;, Origin &lt;chr&gt;, Dest &lt;chr&gt;, Distance &lt;int&gt;,\n## #   TaxiIn &lt;int&gt;, TaxiOut &lt;int&gt;, Cancelled &lt;int&gt;, CancellationCode &lt;chr&gt;,\n## #   Diverted &lt;int&gt;\n\nfilter(hflights_df, Month == 1, DayofMonth == 1)\n## # A tibble: 552 × 21\n##     Year Month DayofMonth DayOfWeek DepTime ArrTime UniqueCarrier FlightNum\n##    &lt;int&gt; &lt;int&gt;      &lt;int&gt;     &lt;int&gt;   &lt;int&gt;   &lt;int&gt; &lt;chr&gt;             &lt;int&gt;\n##  1  2011     1          1         6    1400    1500 AA                  428\n##  2  2011     1          1         6     728     840 AA                  460\n##  3  2011     1          1         6    1631    1736 AA                 1121\n##  4  2011     1          1         6    1756    2112 AA                 1294\n##  5  2011     1          1         6    1012    1347 AA                 1700\n##  6  2011     1          1         6    1211    1325 AA                 1820\n##  7  2011     1          1         6     557     906 AA                 1994\n##  8  2011     1          1         6    1824    2106 AS                  731\n##  9  2011     1          1         6     654    1124 B6                  620\n## 10  2011     1          1         6    1639    2110 B6                  622\n## # ℹ 542 more rows\n## # ℹ 13 more variables: TailNum &lt;chr&gt;, ActualElapsedTime &lt;int&gt;, AirTime &lt;int&gt;,\n## #   ArrDelay &lt;int&gt;, DepDelay &lt;int&gt;, Origin &lt;chr&gt;, Dest &lt;chr&gt;, Distance &lt;int&gt;,\n## #   TaxiIn &lt;int&gt;, TaxiOut &lt;int&gt;, Cancelled &lt;int&gt;, CancellationCode &lt;chr&gt;,\n## #   Diverted &lt;int&gt;\n\ntemp &lt;- select(hflights_df, ArrDelay, Month, Year)\nhead(temp)\n## # A tibble: 6 × 3\n##   ArrDelay Month  Year\n##      &lt;int&gt; &lt;int&gt; &lt;int&gt;\n## 1      -10     1  2011\n## 2       -9     1  2011\n## 3       -8     1  2011\n## 4        3     1  2011\n## 5       -3     1  2011\n## 6       -7     1  2011\ntemp2 &lt;- arrange(temp, ArrDelay, Month, Year)\nhead(temp2)\n## # A tibble: 6 × 3\n##   ArrDelay Month  Year\n##      &lt;int&gt; &lt;int&gt; &lt;int&gt;\n## 1      -70     7  2011\n## 2      -57    12  2011\n## 3      -56     8  2011\n## 4      -56     8  2011\n## 5      -55     8  2011\n## 6      -55    12  2011\n\ntemp3 &lt;- select(hflights_df, Year:DayOfWeek)\nhead(temp3)\n## # A tibble: 6 × 4\n##    Year Month DayofMonth DayOfWeek\n##   &lt;int&gt; &lt;int&gt;      &lt;int&gt;     &lt;int&gt;\n## 1  2011     1          1         6\n## 2  2011     1          2         7\n## 3  2011     1          3         1\n## 4  2011     1          4         2\n## 5  2011     1          5         3\n## 6  2011     1          6         4\n\ntemp5 &lt;- select(hflights_df,-(Year:DepDelay))\nhead(temp5)\n## # A tibble: 6 × 8\n##   Origin Dest  Distance TaxiIn TaxiOut Cancelled CancellationCode Diverted\n##   &lt;chr&gt;  &lt;chr&gt;    &lt;int&gt;  &lt;int&gt;   &lt;int&gt;     &lt;int&gt; &lt;chr&gt;               &lt;int&gt;\n## 1 IAH    DFW        224      7      13         0 \"\"                      0\n## 2 IAH    DFW        224      6       9         0 \"\"                      0\n## 3 IAH    DFW        224      5      17         0 \"\"                      0\n## 4 IAH    DFW        224      9      22         0 \"\"                      0\n## 5 IAH    DFW        224      9       9         0 \"\"                      0\n## 6 IAH    DFW        224      6      13         0 \"\"                      0\n\nDelaytime &lt;- mutate(hflights_df, gain = ArrDelay - DepDelay)\nhead(Delaytime)\n## # A tibble: 6 × 22\n##    Year Month DayofMonth DayOfWeek DepTime ArrTime UniqueCarrier FlightNum\n##   &lt;int&gt; &lt;int&gt;      &lt;int&gt;     &lt;int&gt;   &lt;int&gt;   &lt;int&gt; &lt;chr&gt;             &lt;int&gt;\n## 1  2011     1          1         6    1400    1500 AA                  428\n## 2  2011     1          2         7    1401    1501 AA                  428\n## 3  2011     1          3         1    1352    1502 AA                  428\n## 4  2011     1          4         2    1403    1513 AA                  428\n## 5  2011     1          5         3    1405    1507 AA                  428\n## 6  2011     1          6         4    1359    1503 AA                  428\n## # ℹ 14 more variables: TailNum &lt;chr&gt;, ActualElapsedTime &lt;int&gt;, AirTime &lt;int&gt;,\n## #   ArrDelay &lt;int&gt;, DepDelay &lt;int&gt;, Origin &lt;chr&gt;, Dest &lt;chr&gt;, Distance &lt;int&gt;,\n## #   TaxiIn &lt;int&gt;, TaxiOut &lt;int&gt;, Cancelled &lt;int&gt;, CancellationCode &lt;chr&gt;,\n## #   Diverted &lt;int&gt;, gain &lt;int&gt;\nDelaytime2 &lt;- select(Delaytime, gain)\nhead(Delaytime2)\n## # A tibble: 6 × 1\n##    gain\n##   &lt;int&gt;\n## 1   -10\n## 2   -10\n## 3     0\n## 4     0\n## 5    -8\n## 6    -6\n\n\nsummarise(hflights_df, delay = mean(DepDelay, na.rm = TRUE))\n## # A tibble: 1 × 1\n##   delay\n##   &lt;dbl&gt;\n## 1  9.44\n\nsummarise(hflights_df, delay = mean(ArrTime - DepTime, na.rm = TRUE))\n## # A tibble: 1 × 1\n##   delay\n##   &lt;dbl&gt;\n## 1  183.\n\nplanes &lt;- group_by(hflights_df, TailNum)\nhead(planes)\n## # A tibble: 6 × 21\n## # Groups:   TailNum [6]\n##    Year Month DayofMonth DayOfWeek DepTime ArrTime UniqueCarrier FlightNum\n##   &lt;int&gt; &lt;int&gt;      &lt;int&gt;     &lt;int&gt;   &lt;int&gt;   &lt;int&gt; &lt;chr&gt;             &lt;int&gt;\n## 1  2011     1          1         6    1400    1500 AA                  428\n## 2  2011     1          2         7    1401    1501 AA                  428\n## 3  2011     1          3         1    1352    1502 AA                  428\n## 4  2011     1          4         2    1403    1513 AA                  428\n## 5  2011     1          5         3    1405    1507 AA                  428\n## 6  2011     1          6         4    1359    1503 AA                  428\n## # ℹ 13 more variables: TailNum &lt;chr&gt;, ActualElapsedTime &lt;int&gt;, AirTime &lt;int&gt;,\n## #   ArrDelay &lt;int&gt;, DepDelay &lt;int&gt;, Origin &lt;chr&gt;, Dest &lt;chr&gt;, Distance &lt;int&gt;,\n## #   TaxiIn &lt;int&gt;, TaxiOut &lt;int&gt;, Cancelled &lt;int&gt;, CancellationCode &lt;chr&gt;,\n## #   Diverted &lt;int&gt;\n\nstr(hflights_df$TailNum)\n##  chr [1:227496] \"N576AA\" \"N557AA\" \"N541AA\" \"N403AA\" \"N492AA\" \"N262AA\" ...\nMeanDistanceOfTailNum &lt;- summarise(planes,\n                                   count = n(),\n                                   dist = mean(Distance, na.rm = TRUE))\nhead(MeanDistanceOfTailNum)\n## # A tibble: 6 × 3\n##   TailNum  count  dist\n##   &lt;chr&gt;    &lt;int&gt; &lt;dbl&gt;\n## 1 \"\"         795  939.\n## 2 \"N0EGMQ\"    40 1095.\n## 3 \"N10156\"   317  802.\n## 4 \"N10575\"    94  632.\n## 5 \"N11106\"   308  775.\n## 6 \"N11107\"   345  768.\n\nCountDistanceCondition &lt;- filter(MeanDistanceOfTailNum,\n                                 count &gt; 20,\n                                 dist &lt; 2000)\nhead(CountDistanceCondition)\n## # A tibble: 6 × 3\n##   TailNum  count  dist\n##   &lt;chr&gt;    &lt;int&gt; &lt;dbl&gt;\n## 1 \"\"         795  939.\n## 2 \"N0EGMQ\"    40 1095.\n## 3 \"N10156\"   317  802.\n## 4 \"N10575\"    94  632.\n## 5 \"N11106\"   308  775.\n## 6 \"N11107\"   345  768.\n\na1 &lt;- group_by(hflights, Year, Month, DayofMonth)\n\na2 &lt;- select(a1, Year:DayofMonth, ArrDelay, DepDelay)\na3 &lt;- summarise(a2,\n                arr = mean(ArrDelay, na.rm = TRUE),\n                dep = mean(DepDelay, na.rm = TRUE))\n## `summarise()` has grouped output by 'Year', 'Month'. You can override using the\n## `.groups` argument.\nhead(a3)\n## # A tibble: 6 × 5\n## # Groups:   Year, Month [1]\n##    Year Month DayofMonth   arr   dep\n##   &lt;int&gt; &lt;int&gt;      &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;\n## 1  2011     1          1 10.1  10.7 \n## 2  2011     1          2 10.5  15.7 \n## 3  2011     1          3  6.04 13.4 \n## 4  2011     1          4  7.97 11.9 \n## 5  2011     1          5  4.17  6.33\n## 6  2011     1          6  6.07  5.28\n\na4 &lt;- filter(a3, arr &gt; 30 | dep &gt; 30)\nhead(a4)\n## # A tibble: 6 × 5\n## # Groups:   Year, Month [4]\n##    Year Month DayofMonth   arr   dep\n##   &lt;int&gt; &lt;int&gt;      &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;\n## 1  2011     2          4  44.1  47.2\n## 2  2011     3          3  35.1  38.2\n## 3  2011     3         14  46.6  36.1\n## 4  2011     4          4  38.7  27.9\n## 5  2011     4         25  37.8  22.3\n## 6  2011     5         12  69.5  64.5\n\nhflights_df %&gt;% group_by(Year, Month, DayofMonth) %&gt;%\n    summarise(arr = mean(ArrDelay, na.rm = TRUE),\n              dep = mean(DepDelay, na.rm = TRUE)) %&gt;%\n    filter(arr &gt; 30 | dep &gt; 30)\n## `summarise()` has grouped output by 'Year', 'Month'. You can override using the\n## `.groups` argument.\n## # A tibble: 14 × 5\n## # Groups:   Year, Month [10]\n##     Year Month DayofMonth   arr   dep\n##    &lt;int&gt; &lt;int&gt;      &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;\n##  1  2011     2          4  44.1  47.2\n##  2  2011     3          3  35.1  38.2\n##  3  2011     3         14  46.6  36.1\n##  4  2011     4          4  38.7  27.9\n##  5  2011     4         25  37.8  22.3\n##  6  2011     5         12  69.5  64.5\n##  7  2011     5         20  37.0  26.6\n##  8  2011     6         22  65.5  62.3\n##  9  2011     7         29  29.6  31.9\n## 10  2011     9         29  39.2  32.5\n## 11  2011    10          9  61.9  59.5\n## 12  2011    11         15  43.7  39.2\n## 13  2011    12         29  26.3  30.8\n## 14  2011    12         31  46.5  54.2\n\n\n# install.packages('sqldf')\nlibrary(sqldf)\n## 필요한 패키지를 로딩중입니다: gsubfn\n## 필요한 패키지를 로딩중입니다: proto\n## 필요한 패키지를 로딩중입니다: RSQLite\n\nsqldf('select \"Sepal.Width\" from iris')\n##     Sepal.Width\n## 1           3.5\n## 2           3.0\n## 3           3.2\n## 4           3.1\n## 5           3.6\n## 6           3.9\n## 7           3.4\n## 8           3.4\n## 9           2.9\n## 10          3.1\n## 11          3.7\n## 12          3.4\n## 13          3.0\n## 14          3.0\n## 15          4.0\n## 16          4.4\n## 17          3.9\n## 18          3.5\n## 19          3.8\n## 20          3.8\n## 21          3.4\n## 22          3.7\n## 23          3.6\n## 24          3.3\n## 25          3.4\n## 26          3.0\n## 27          3.4\n## 28          3.5\n## 29          3.4\n## 30          3.2\n## 31          3.1\n## 32          3.4\n## 33          4.1\n## 34          4.2\n## 35          3.1\n## 36          3.2\n## 37          3.5\n## 38          3.6\n## 39          3.0\n## 40          3.4\n## 41          3.5\n## 42          2.3\n## 43          3.2\n## 44          3.5\n## 45          3.8\n## 46          3.0\n## 47          3.8\n## 48          3.2\n## 49          3.7\n## 50          3.3\n## 51          3.2\n## 52          3.2\n## 53          3.1\n## 54          2.3\n## 55          2.8\n## 56          2.8\n## 57          3.3\n## 58          2.4\n## 59          2.9\n## 60          2.7\n## 61          2.0\n## 62          3.0\n## 63          2.2\n## 64          2.9\n## 65          2.9\n## 66          3.1\n## 67          3.0\n## 68          2.7\n## 69          2.2\n## 70          2.5\n## 71          3.2\n## 72          2.8\n## 73          2.5\n## 74          2.8\n## 75          2.9\n## 76          3.0\n## 77          2.8\n## 78          3.0\n## 79          2.9\n## 80          2.6\n## 81          2.4\n## 82          2.4\n## 83          2.7\n## 84          2.7\n## 85          3.0\n## 86          3.4\n## 87          3.1\n## 88          2.3\n## 89          3.0\n## 90          2.5\n## 91          2.6\n## 92          3.0\n## 93          2.6\n## 94          2.3\n## 95          2.7\n## 96          3.0\n## 97          2.9\n## 98          2.9\n## 99          2.5\n## 100         2.8\n## 101         3.3\n## 102         2.7\n## 103         3.0\n## 104         2.9\n## 105         3.0\n## 106         3.0\n## 107         2.5\n## 108         2.9\n## 109         2.5\n## 110         3.6\n## 111         3.2\n## 112         2.7\n## 113         3.0\n## 114         2.5\n## 115         2.8\n## 116         3.2\n## 117         3.0\n## 118         3.8\n## 119         2.6\n## 120         2.2\n## 121         3.2\n## 122         2.8\n## 123         2.8\n## 124         2.7\n## 125         3.3\n## 126         3.2\n## 127         2.8\n## 128         3.0\n## 129         2.8\n## 130         3.0\n## 131         2.8\n## 132         3.8\n## 133         2.8\n## 134         2.8\n## 135         2.6\n## 136         3.0\n## 137         3.4\n## 138         3.1\n## 139         3.0\n## 140         3.1\n## 141         3.1\n## 142         3.1\n## 143         2.7\n## 144         3.2\n## 145         3.3\n## 146         3.0\n## 147         2.5\n## 148         3.0\n## 149         3.4\n## 150         3.0\n\nsqldf('select \"Sepal.Width\" from iris')\n##     Sepal.Width\n## 1           3.5\n## 2           3.0\n## 3           3.2\n## 4           3.1\n## 5           3.6\n## 6           3.9\n## 7           3.4\n## 8           3.4\n## 9           2.9\n## 10          3.1\n## 11          3.7\n## 12          3.4\n## 13          3.0\n## 14          3.0\n## 15          4.0\n## 16          4.4\n## 17          3.9\n## 18          3.5\n## 19          3.8\n## 20          3.8\n## 21          3.4\n## 22          3.7\n## 23          3.6\n## 24          3.3\n## 25          3.4\n## 26          3.0\n## 27          3.4\n## 28          3.5\n## 29          3.4\n## 30          3.2\n## 31          3.1\n## 32          3.4\n## 33          4.1\n## 34          4.2\n## 35          3.1\n## 36          3.2\n## 37          3.5\n## 38          3.6\n## 39          3.0\n## 40          3.4\n## 41          3.5\n## 42          2.3\n## 43          3.2\n## 44          3.5\n## 45          3.8\n## 46          3.0\n## 47          3.8\n## 48          3.2\n## 49          3.7\n## 50          3.3\n## 51          3.2\n## 52          3.2\n## 53          3.1\n## 54          2.3\n## 55          2.8\n## 56          2.8\n## 57          3.3\n## 58          2.4\n## 59          2.9\n## 60          2.7\n## 61          2.0\n## 62          3.0\n## 63          2.2\n## 64          2.9\n## 65          2.9\n## 66          3.1\n## 67          3.0\n## 68          2.7\n## 69          2.2\n## 70          2.5\n## 71          3.2\n## 72          2.8\n## 73          2.5\n## 74          2.8\n## 75          2.9\n## 76          3.0\n## 77          2.8\n## 78          3.0\n## 79          2.9\n## 80          2.6\n## 81          2.4\n## 82          2.4\n## 83          2.7\n## 84          2.7\n## 85          3.0\n## 86          3.4\n## 87          3.1\n## 88          2.3\n## 89          3.0\n## 90          2.5\n## 91          2.6\n## 92          3.0\n## 93          2.6\n## 94          2.3\n## 95          2.7\n## 96          3.0\n## 97          2.9\n## 98          2.9\n## 99          2.5\n## 100         2.8\n## 101         3.3\n## 102         2.7\n## 103         3.0\n## 104         2.9\n## 105         3.0\n## 106         3.0\n## 107         2.5\n## 108         2.9\n## 109         2.5\n## 110         3.6\n## 111         3.2\n## 112         2.7\n## 113         3.0\n## 114         2.5\n## 115         2.8\n## 116         3.2\n## 117         3.0\n## 118         3.8\n## 119         2.6\n## 120         2.2\n## 121         3.2\n## 122         2.8\n## 123         2.8\n## 124         2.7\n## 125         3.3\n## 126         3.2\n## 127         2.8\n## 128         3.0\n## 129         2.8\n## 130         3.0\n## 131         2.8\n## 132         3.8\n## 133         2.8\n## 134         2.8\n## 135         2.6\n## 136         3.0\n## 137         3.4\n## 138         3.1\n## 139         3.0\n## 140         3.1\n## 141         3.1\n## 142         3.1\n## 143         2.7\n## 144         3.2\n## 145         3.3\n## 146         3.0\n## 147         2.5\n## 148         3.0\n## 149         3.4\n## 150         3.0\n\nsqldf('select avg(\"Sepal.Width\") from iris where Species=\"versicolor\"')\n##   avg(\"Sepal.Width\")\n## 1               2.77\n\nmean(subset(iris, Species == 'versicolor')$'Sepal.Width')\n## [1] 2.77\n\nsqldf('select species, avg(\"Sepal.Width\") from iris group by \"Species\"')\n##      Species avg(\"Sepal.Width\")\n## 1     setosa              3.428\n## 2 versicolor              2.770\n## 3  virginica              2.974\n\nsqldf('select * from iris where Species=\"setosa\"')\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1           5.1         3.5          1.4         0.2  setosa\n## 2           4.9         3.0          1.4         0.2  setosa\n## 3           4.7         3.2          1.3         0.2  setosa\n## 4           4.6         3.1          1.5         0.2  setosa\n## 5           5.0         3.6          1.4         0.2  setosa\n## 6           5.4         3.9          1.7         0.4  setosa\n## 7           4.6         3.4          1.4         0.3  setosa\n## 8           5.0         3.4          1.5         0.2  setosa\n## 9           4.4         2.9          1.4         0.2  setosa\n## 10          4.9         3.1          1.5         0.1  setosa\n## 11          5.4         3.7          1.5         0.2  setosa\n## 12          4.8         3.4          1.6         0.2  setosa\n## 13          4.8         3.0          1.4         0.1  setosa\n## 14          4.3         3.0          1.1         0.1  setosa\n## 15          5.8         4.0          1.2         0.2  setosa\n## 16          5.7         4.4          1.5         0.4  setosa\n## 17          5.4         3.9          1.3         0.4  setosa\n## 18          5.1         3.5          1.4         0.3  setosa\n## 19          5.7         3.8          1.7         0.3  setosa\n## 20          5.1         3.8          1.5         0.3  setosa\n## 21          5.4         3.4          1.7         0.2  setosa\n## 22          5.1         3.7          1.5         0.4  setosa\n## 23          4.6         3.6          1.0         0.2  setosa\n## 24          5.1         3.3          1.7         0.5  setosa\n## 25          4.8         3.4          1.9         0.2  setosa\n## 26          5.0         3.0          1.6         0.2  setosa\n## 27          5.0         3.4          1.6         0.4  setosa\n## 28          5.2         3.5          1.5         0.2  setosa\n## 29          5.2         3.4          1.4         0.2  setosa\n## 30          4.7         3.2          1.6         0.2  setosa\n## 31          4.8         3.1          1.6         0.2  setosa\n## 32          5.4         3.4          1.5         0.4  setosa\n## 33          5.2         4.1          1.5         0.1  setosa\n## 34          5.5         4.2          1.4         0.2  setosa\n## 35          4.9         3.1          1.5         0.2  setosa\n## 36          5.0         3.2          1.2         0.2  setosa\n## 37          5.5         3.5          1.3         0.2  setosa\n## 38          4.9         3.6          1.4         0.1  setosa\n## 39          4.4         3.0          1.3         0.2  setosa\n## 40          5.1         3.4          1.5         0.2  setosa\n## 41          5.0         3.5          1.3         0.3  setosa\n## 42          4.5         2.3          1.3         0.3  setosa\n## 43          4.4         3.2          1.3         0.2  setosa\n## 44          5.0         3.5          1.6         0.6  setosa\n## 45          5.1         3.8          1.9         0.4  setosa\n## 46          4.8         3.0          1.4         0.3  setosa\n## 47          5.1         3.8          1.6         0.2  setosa\n## 48          4.6         3.2          1.4         0.2  setosa\n## 49          5.3         3.7          1.5         0.2  setosa\n## 50          5.0         3.3          1.4         0.2  setosa\n\nsqldf('select * from iris where Species=\"setosa\" limit 3')\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1          5.1         3.5          1.4         0.2  setosa\n## 2          4.9         3.0          1.4         0.2  setosa\n## 3          4.7         3.2          1.3         0.2  setosa\n\nsqldf('select * from iris where Species=\"setosa\" ORDER BY \"Sepal.Width\"')\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1           4.5         2.3          1.3         0.3  setosa\n## 2           4.4         2.9          1.4         0.2  setosa\n## 3           4.9         3.0          1.4         0.2  setosa\n## 4           4.8         3.0          1.4         0.1  setosa\n## 5           4.3         3.0          1.1         0.1  setosa\n## 6           5.0         3.0          1.6         0.2  setosa\n## 7           4.4         3.0          1.3         0.2  setosa\n## 8           4.8         3.0          1.4         0.3  setosa\n## 9           4.6         3.1          1.5         0.2  setosa\n## 10          4.9         3.1          1.5         0.1  setosa\n## 11          4.8         3.1          1.6         0.2  setosa\n## 12          4.9         3.1          1.5         0.2  setosa\n## 13          4.7         3.2          1.3         0.2  setosa\n## 14          4.7         3.2          1.6         0.2  setosa\n## 15          5.0         3.2          1.2         0.2  setosa\n## 16          4.4         3.2          1.3         0.2  setosa\n## 17          4.6         3.2          1.4         0.2  setosa\n## 18          5.1         3.3          1.7         0.5  setosa\n## 19          5.0         3.3          1.4         0.2  setosa\n## 20          4.6         3.4          1.4         0.3  setosa\n## 21          5.0         3.4          1.5         0.2  setosa\n## 22          4.8         3.4          1.6         0.2  setosa\n## 23          5.4         3.4          1.7         0.2  setosa\n## 24          4.8         3.4          1.9         0.2  setosa\n## 25          5.0         3.4          1.6         0.4  setosa\n## 26          5.2         3.4          1.4         0.2  setosa\n## 27          5.4         3.4          1.5         0.4  setosa\n## 28          5.1         3.4          1.5         0.2  setosa\n## 29          5.1         3.5          1.4         0.2  setosa\n## 30          5.1         3.5          1.4         0.3  setosa\n## 31          5.2         3.5          1.5         0.2  setosa\n## 32          5.5         3.5          1.3         0.2  setosa\n## 33          5.0         3.5          1.3         0.3  setosa\n## 34          5.0         3.5          1.6         0.6  setosa\n## 35          5.0         3.6          1.4         0.2  setosa\n## 36          4.6         3.6          1.0         0.2  setosa\n## 37          4.9         3.6          1.4         0.1  setosa\n## 38          5.4         3.7          1.5         0.2  setosa\n## 39          5.1         3.7          1.5         0.4  setosa\n## 40          5.3         3.7          1.5         0.2  setosa\n## 41          5.7         3.8          1.7         0.3  setosa\n## 42          5.1         3.8          1.5         0.3  setosa\n## 43          5.1         3.8          1.9         0.4  setosa\n## 44          5.1         3.8          1.6         0.2  setosa\n## 45          5.4         3.9          1.7         0.4  setosa\n## 46          5.4         3.9          1.3         0.4  setosa\n## 47          5.8         4.0          1.2         0.2  setosa\n## 48          5.2         4.1          1.5         0.1  setosa\n## 49          5.5         4.2          1.4         0.2  setosa\n## 50          5.7         4.4          1.5         0.4  setosa\n\ntemp &lt;- sqldf('select * from iris WHERE \"Species\" = \"versicolor\"')\nhead(temp)\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 1          7.0         3.2          4.7         1.4 versicolor\n## 2          6.4         3.2          4.5         1.5 versicolor\n## 3          6.9         3.1          4.9         1.5 versicolor\n## 4          5.5         2.3          4.0         1.3 versicolor\n## 5          6.5         2.8          4.6         1.5 versicolor\n## 6          5.7         2.8          4.5         1.3 versicolor\nsqldf('select * from temp')\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 1           7.0         3.2          4.7         1.4 versicolor\n## 2           6.4         3.2          4.5         1.5 versicolor\n## 3           6.9         3.1          4.9         1.5 versicolor\n## 4           5.5         2.3          4.0         1.3 versicolor\n## 5           6.5         2.8          4.6         1.5 versicolor\n## 6           5.7         2.8          4.5         1.3 versicolor\n## 7           6.3         3.3          4.7         1.6 versicolor\n## 8           4.9         2.4          3.3         1.0 versicolor\n## 9           6.6         2.9          4.6         1.3 versicolor\n## 10          5.2         2.7          3.9         1.4 versicolor\n## 11          5.0         2.0          3.5         1.0 versicolor\n## 12          5.9         3.0          4.2         1.5 versicolor\n## 13          6.0         2.2          4.0         1.0 versicolor\n## 14          6.1         2.9          4.7         1.4 versicolor\n## 15          5.6         2.9          3.6         1.3 versicolor\n## 16          6.7         3.1          4.4         1.4 versicolor\n## 17          5.6         3.0          4.5         1.5 versicolor\n## 18          5.8         2.7          4.1         1.0 versicolor\n## 19          6.2         2.2          4.5         1.5 versicolor\n## 20          5.6         2.5          3.9         1.1 versicolor\n## 21          5.9         3.2          4.8         1.8 versicolor\n## 22          6.1         2.8          4.0         1.3 versicolor\n## 23          6.3         2.5          4.9         1.5 versicolor\n## 24          6.1         2.8          4.7         1.2 versicolor\n## 25          6.4         2.9          4.3         1.3 versicolor\n## 26          6.6         3.0          4.4         1.4 versicolor\n## 27          6.8         2.8          4.8         1.4 versicolor\n## 28          6.7         3.0          5.0         1.7 versicolor\n## 29          6.0         2.9          4.5         1.5 versicolor\n## 30          5.7         2.6          3.5         1.0 versicolor\n## 31          5.5         2.4          3.8         1.1 versicolor\n## 32          5.5         2.4          3.7         1.0 versicolor\n## 33          5.8         2.7          3.9         1.2 versicolor\n## 34          6.0         2.7          5.1         1.6 versicolor\n## 35          5.4         3.0          4.5         1.5 versicolor\n## 36          6.0         3.4          4.5         1.6 versicolor\n## 37          6.7         3.1          4.7         1.5 versicolor\n## 38          6.3         2.3          4.4         1.3 versicolor\n## 39          5.6         3.0          4.1         1.3 versicolor\n## 40          5.5         2.5          4.0         1.3 versicolor\n## 41          5.5         2.6          4.4         1.2 versicolor\n## 42          6.1         3.0          4.6         1.4 versicolor\n## 43          5.8         2.6          4.0         1.2 versicolor\n## 44          5.0         2.3          3.3         1.0 versicolor\n## 45          5.6         2.7          4.2         1.3 versicolor\n## 46          5.7         3.0          4.2         1.2 versicolor\n## 47          5.7         2.9          4.2         1.3 versicolor\n## 48          6.2         2.9          4.3         1.3 versicolor\n## 49          5.1         2.5          3.0         1.1 versicolor\n## 50          5.7         2.8          4.1         1.3 versicolor\nsqldf('select * from temp WHERE \"Sepal.Length\" &gt; 3.5')\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 1           7.0         3.2          4.7         1.4 versicolor\n## 2           6.4         3.2          4.5         1.5 versicolor\n## 3           6.9         3.1          4.9         1.5 versicolor\n## 4           5.5         2.3          4.0         1.3 versicolor\n## 5           6.5         2.8          4.6         1.5 versicolor\n## 6           5.7         2.8          4.5         1.3 versicolor\n## 7           6.3         3.3          4.7         1.6 versicolor\n## 8           4.9         2.4          3.3         1.0 versicolor\n## 9           6.6         2.9          4.6         1.3 versicolor\n## 10          5.2         2.7          3.9         1.4 versicolor\n## 11          5.0         2.0          3.5         1.0 versicolor\n## 12          5.9         3.0          4.2         1.5 versicolor\n## 13          6.0         2.2          4.0         1.0 versicolor\n## 14          6.1         2.9          4.7         1.4 versicolor\n## 15          5.6         2.9          3.6         1.3 versicolor\n## 16          6.7         3.1          4.4         1.4 versicolor\n## 17          5.6         3.0          4.5         1.5 versicolor\n## 18          5.8         2.7          4.1         1.0 versicolor\n## 19          6.2         2.2          4.5         1.5 versicolor\n## 20          5.6         2.5          3.9         1.1 versicolor\n## 21          5.9         3.2          4.8         1.8 versicolor\n## 22          6.1         2.8          4.0         1.3 versicolor\n## 23          6.3         2.5          4.9         1.5 versicolor\n## 24          6.1         2.8          4.7         1.2 versicolor\n## 25          6.4         2.9          4.3         1.3 versicolor\n## 26          6.6         3.0          4.4         1.4 versicolor\n## 27          6.8         2.8          4.8         1.4 versicolor\n## 28          6.7         3.0          5.0         1.7 versicolor\n## 29          6.0         2.9          4.5         1.5 versicolor\n## 30          5.7         2.6          3.5         1.0 versicolor\n## 31          5.5         2.4          3.8         1.1 versicolor\n## 32          5.5         2.4          3.7         1.0 versicolor\n## 33          5.8         2.7          3.9         1.2 versicolor\n## 34          6.0         2.7          5.1         1.6 versicolor\n## 35          5.4         3.0          4.5         1.5 versicolor\n## 36          6.0         3.4          4.5         1.6 versicolor\n## 37          6.7         3.1          4.7         1.5 versicolor\n## 38          6.3         2.3          4.4         1.3 versicolor\n## 39          5.6         3.0          4.1         1.3 versicolor\n## 40          5.5         2.5          4.0         1.3 versicolor\n## 41          5.5         2.6          4.4         1.2 versicolor\n## 42          6.1         3.0          4.6         1.4 versicolor\n## 43          5.8         2.6          4.0         1.2 versicolor\n## 44          5.0         2.3          3.3         1.0 versicolor\n## 45          5.6         2.7          4.2         1.3 versicolor\n## 46          5.7         3.0          4.2         1.2 versicolor\n## 47          5.7         2.9          4.2         1.3 versicolor\n## 48          6.2         2.9          4.3         1.3 versicolor\n## 49          5.1         2.5          3.0         1.1 versicolor\n## 50          5.7         2.8          4.1         1.3 versicolor"
  },
  {
    "objectID": "BigData_Analysis/Type3.html",
    "href": "BigData_Analysis/Type3.html",
    "title": "빅분기 실기 - 작업 3유형",
    "section": "",
    "text": "출처 : Big Data Certification KR"
  },
  {
    "objectID": "BigData_Analysis/Type3.html#통계적-검정-절차-2집단",
    "href": "BigData_Analysis/Type3.html#통계적-검정-절차-2집단",
    "title": "빅분기 실기 - 작업 3유형",
    "section": "통계적 검정 절차 (2집단)",
    "text": "통계적 검정 절차 (2집단)\n  \n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# 정규성 검정\nfrom scipy.stats import shapiro, anderson\n\n# 비모수 검정\nfrom scipy.stats import mannwhitneyu, ranksums, wilcoxon\n\n# 등분산 검정\nfrom scipy.stats import bartlett, fligner, levene\n\n# 단일표본 t-검정\nfrom scipy.stats import ttest_1samp\n\n# 독립표본 t-검정\nfrom scipy.stats import ttest_ind\n\n# 대응표본 t-검정\nfrom scipy.stats import ttest_rel\n\n# 카이제곱 검정\nfrom scipy.stats import chisquare, chi2_contingency, fisher_exact"
  },
  {
    "objectID": "BigData_Analysis/Type3.html#정규성-검정",
    "href": "BigData_Analysis/Type3.html#정규성-검정",
    "title": "빅분기 실기 - 작업 3유형",
    "section": "정규성 검정",
    "text": "정규성 검정\n\n12명의 수험생이 빅데이터 분석기사 시험에서 받은 점수이다. Shapiro-Wilk 검정을 사용하여 데이터가 정규 분포를 따르는지 검증하시오 &gt; 귀무 가설(\\(H_0\\)) : 데이터는 정규 분포를 따른다.\n\n\n대립 가설(\\(H_1\\)) : 데이터는 정규 분포를 따르지 않는다.\n\n\nShapiro-Wilk 검정 통계량, p-value, 검증결과를 출력하시오.\n\n\ndata = [75, 83, 81, 92, 68, 77, 78, 80, 85, 95, 79, 89]\n\nstatistic, pvalue = shapiro(data)\n\nalpha = 0.05\nif pvalue &lt; alpha : \n    print(f'p-value : {pvalue : .3f}이므로 유의수준 5% 하에서 귀무가설을 기각한다.')\n    print('즉, 데이터는 정규분포를 따르지 않는다.')\nelse :\n    print(f'p-value : {pvalue : .3f}이므로 유의수준 5% 하에서 귀무가설을 채택한다.')\n    print('즉, 데이터는 정규분포를 따른다.')\n\np-value :  0.968이므로 유의수준 5% 하에서 귀무가설을 채택한다.\n즉, 데이터는 정규분포를 따른다."
  },
  {
    "objectID": "BigData_Analysis/Type3.html#단일표본-t-검정",
    "href": "BigData_Analysis/Type3.html#단일표본-t-검정",
    "title": "빅분기 실기 - 작업 3유형",
    "section": "단일표본 t-검정",
    "text": "단일표본 t-검정\n\n다음은 22명의 학생들이 국어시험에서 받은 점수이다. 학생들의 평균이 75보다 크다고 할 수 있는가?\n\n\n귀무가설(\\(H_0\\)) : 모평균은 mu와 같다. (μ = mu), 학생들의 평균은 75이다.\n\n\n대립가설(\\(H_1\\)) : 모평균은 mu보다 크다. (μ &gt; mu), 학생들의 평균은 75보다 크다.\n\n\n가정 :\n\n모집단은 정규분포를 따른다.\n표본의 크기가 충분히 크다.\n\n검정통계량, p-value, 검정결과를 출력하시오\n\n\nscores = [75, 80, 68, 72, 77, 82, 81, 79, 70, 74, 76, 78, 81, 73, 81, 78, 75, 72, 74, 79, 78, 79]\nmu = 75\n\nstatistic, pvalue = ttest_1samp(scores, mu, alternative = 'greater')\n\nalpha = 0.05\nif pvalue &lt; alpha :\n    print(f'검정통계량 : {statistic :.3f} / p-value : {pvalue :.3f}이므로 유의수준 5% 하에서 귀무가설을 기각한다.')\n    print('즉, 학생들의 평균은 75보다 크다.')\nelse : \n    print(f'검정통계량 : {statistic :.3f} / p-value : {pvalue :.3f}이므로 유의수준 5% 하에서 귀무가설을 채택한다.')\n    print('즉, 학생들의 평균은 75보다 크다고 할 수 없다.')\n\n검정통계량 : 1.766 / p-value : 0.046이므로 유의수준 5% 하에서 귀무가설을 기각한다.\n즉, 학생들의 평균은 75보다 크다."
  },
  {
    "objectID": "BigData_Analysis/Type3.html#대응쌍체표본-t-검정",
    "href": "BigData_Analysis/Type3.html#대응쌍체표본-t-검정",
    "title": "빅분기 실기 - 작업 3유형",
    "section": "대응(쌍체)표본 t-검정",
    "text": "대응(쌍체)표본 t-검정\n\n주어진 데이터는 고혈압 환자 치료 전후의 혈압이다. 해당 치료가 효과가 있는지 대응(쌍체)표본 t-검정을 진행하시오.\n\n\n귀무가설(\\(H_0\\)) : μ \\(\\geq\\) 0\n\n\n대립가설(\\(H_1\\)) : μ &lt; 0\n\n\nμ = (치료 후 혈압 - 치료 전 혈압)의 평균\n\n\n유의수준: 0.05\n\n\n문제\n\nμ의 표본평균은? (소수 둘째자리까지 반올림)\n검정통계량 값은? (소수 둘째자리까지 반올림)\np-값은? (소수 넷째자리까지 반올림)\n가설검정의 결과는? (유의수준 5%)\n\n\n\npressure = pd.read_csv('https://raw.githubusercontent.com/Opensourcefordatascience/Data-sets/master/blood_pressure.csv')\n\npressure['diff'] = pressure['bp_after'] - pressure['bp_before']\navg = (sum(pressure['diff']) / len(pressure['diff']))\nprint(f'문제 1 : {np.round(avg, 2)}')\n\n# 정규성 검정\nprint(f'치료 후 - 치료 전 혈압의 정규성 검정 : {shapiro(pressure[\"diff\"])}')\n\n# 정규성 가정 후 대응표본 t-검정\nstatistic, pvalue = ttest_rel(pressure['bp_after'], pressure['bp_before'], alternative = 'less')\n\nprint(f'문제 2 : {np.round(statistic, 2)}')\nprint(f'문제 3 : {np.round(pvalue, 4)}')\n\nalpha = 0.05\nif pvalue &lt; alpha : \n    result = '기각'\n    # print(f'가설검정 결과 유의수준 5% 하에서 귀무가설을 {result}한다. 즉, 치료의 효과가 있다.')\nelse :\n    result = '채택'\n    # print(f'가설검정 결과 유의수준 5% 하에서 귀무가설을 {result}한다. 즉, 치료의 효과가 없다.')\n    \nprint(f'문제 4 : {result}')\n\n문제 1 : -5.09\n문제 2 : -3.34\n문제 3 : 0.0006\n문제 4 : 기각"
  },
  {
    "objectID": "BigData_Analysis/Type3.html#독립표본-t-검정",
    "href": "BigData_Analysis/Type3.html#독립표본-t-검정",
    "title": "빅분기 실기 - 작업 3유형",
    "section": "독립표본 t-검정",
    "text": "독립표본 t-검정\n\n어떤 특정 약물을 복용한 사람들의 평균 체온이 복용하지 않은 사람들의 평균 체온과 유의미하게 다른지 검정해보려고 합니다.\n가정 :\n\n약물을 복용한 그룹과 복용하지 않은 그룹의 체온 데이터가 각각 주어져 있다고 가정합니다.\n각 그룹의 체온은 정규분포를 따른다고 가정합니다.\n\n가설 설정 :\n\n\\(H_0\\) : 약물을 복용한 그룹과 복용하지 않은 그룹의 평균 체온은 유의미한 차이가 없다.\n\\(H_1\\) : 약물을 복용한 그룹과 복용하지 않은 그룹의 평균 체온은 유의미한 차이가 있다.\n\n검정통계량, p-value, 검정결과를 출력하시오.\n\n\ngroup1 = [36.8, 36.7, 37.1, 36.9, 37.2, 36.8, 36.9, 37.1, 36.7, 37.1]\ngroup2 = [36.5, 36.6, 36.3, 36.6, 36.9, 36.7, 36.7, 36.8, 36.5, 36.7]\n\nstatistic, pvalue = ttest_ind(group1, group2)\n\nalpha = 0.05\nif pvalue &lt; alpha :\n    print(f'검정통계량 : {statistic :.3f} / p-value : {pvalue :.3f}이므로 유의수준 5% 하에서 귀무가설을 기각한다.')\n    print('즉, 약물을 복용한 그룹과 복용하지 않은 그룹의 평균 체온은 유의미한 차이가 있다.')\nelse :\n    print(f'검정통계량 : {statistic :.3f} / p-value : {pvalue :.3f}이므로 유의수준 5% 하에서 귀무가설을 채택한다.')\n    print('즉, 약물을 복용한 그룹과 복용하지 않은 그룹의 평균 체온은 유의미한 차이가 없다.')\n\n검정통계량 : 3.796 / p-value : 0.001이므로 유의수준 5% 하에서 귀무가설을 기각한다.\n즉, 약물을 복용한 그룹과 복용하지 않은 그룹의 평균 체온은 유의미한 차이가 있다."
  },
  {
    "objectID": "BigData_Analysis/Type3.html#회귀모형",
    "href": "BigData_Analysis/Type3.html#회귀모형",
    "title": "빅분기 실기 - 작업 3유형",
    "section": "회귀모형",
    "text": "회귀모형\n\niris 데이터셋에서 Sepal Length와 Sepal Width의 상관계수 계산하고 소수 둘째자리까지 출력하시오.\n\n\nfrom sklearn.datasets import load_iris\niris = load_iris()\ndf = pd.DataFrame(iris.data, columns = iris.feature_names)\n\ncorr_df = df.corr()\ncorr = corr_df.loc['sepal length (cm)', 'sepal width (cm)']\nprint(f'Sepal Length와 Sepal Width의 상관계수 : {corr : .2f}')\n\nSepal Length와 Sepal Width의 상관계수 : -0.12"
  },
  {
    "objectID": "BigData_Analysis/scipy.html",
    "href": "BigData_Analysis/scipy.html",
    "title": "Scipy 튜토리얼",
    "section": "",
    "text": "출처 : DataManim\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# 정규성 검정\nfrom scipy.stats import shapiro, anderson\n\n# 비모수 검정\nfrom scipy.stats import mannwhitneyu, ranksums, wilcoxon\n\n# 등분산 검정\nfrom scipy.stats import bartlett, fligner, levene\n\n# 단일표본 t-검정\nfrom scipy.stats import ttest_1samp\n\n# 독립표본 t-검정\nfrom scipy.stats import ttest_ind\n\n# 대응표본 t-검정\nfrom scipy.stats import ttest_rel\n\n# 카이제곱 검정\nfrom scipy.stats import chisquare, chi2_contingency, fisher_exact"
  },
  {
    "objectID": "BigData_Analysis/scipy.html#scipy-모듈",
    "href": "BigData_Analysis/scipy.html#scipy-모듈",
    "title": "Scipy 튜토리얼",
    "section": "scipy 모듈",
    "text": "scipy 모듈\nscipy\n│\n├── 01 integrate 수치적분, 미분방정식\n│  \n├── 02 linalg (선형대수, 매트릭스 분해)\n│ \n├── 03 optimize (방정식 해 구하는 알고리즘, 함수 최적화)\n│ \n├── 04 signal (신호 관련)\n│\n├── 05 sparse (희소 행렬, 희소 선형 시스템)\n│\n└── 06 stats (통계 분석)"
  },
  {
    "objectID": "BigData_Analysis/scipy.html#scipy.stats-모듈",
    "href": "BigData_Analysis/scipy.html#scipy.stats-모듈",
    "title": "Scipy 튜토리얼",
    "section": "scipy.stats 모듈",
    "text": "scipy.stats 모듈\n\nfrom scipy import stats\nprint(f'Stats 하위 모듈 개수 : {len([x for x in dir(stats) if x[0] != \"_\"])}')\n\nStats 하위 모듈 개수 : 274\n\n\nscipy.stats\n│\n├── 01 T-test\n│   │\n│   ├── ttest_1samp         (단일표본 t검정)\n│   ├── ttest_ind           (독립표본 t검정)\n│   └── ttest_rel           (대응표본 t검정) \n│ \n├── 02 비모수 검정\n│   │\n│   ├── mannwhitneyu        (맨-휘트니 U 검정 - 중위수, 윌콕슨 순위합 검정과 동일하다 볼 수 있음)\n│   ├── ranksums            (윌콕슨 순위합 검정 - 중위수)\n│   └── wilcoxon            (윌콕슨 부호 순위 검정)\n│ \n├── 03 정규정 검정\n│   │\n│   ├── anderson            (Anderson-Darling, 데이터 수가 상대적으로 많을 때)\n│   ├── kstest              (Kolmogorov-Smirnov, 데이터 수가 상대적으로 많을 때)\n│   ├── mstats.normaltest\n│   └── shapiro             (shapiro, 정규분포 가장 엄격하게 검정, 데이터 수가 상대적으로 적을 때)\n│   \n├── 04 등분산 검정\n│   │\n│   ├── bartlett\n│   ├── fligner\n│   └── levene\n│\n├── 05 카이제곱검정\n│   │\n│   ├── chisquare            (카이제곱검정, 적합도 검정)\n│   ├── chi2_contingency     (카이제곱독립검정, 독립성 검정)\n│   └── fisher_exact         (피셔 정확 검정 - 빈도수가 5개 이하 셀의 수가 전체 셀의 20%이상일 경우 사용)\n│\n└── 06 ANOVA (일원분산분석)\n    │\n    └── f_oneway (분산 분석은 statmodels 모듈이 더 좋음!)\n    \n&gt; dir, help를 이용해서 파라미터들 찾아가며 사용하기"
  },
  {
    "objectID": "BigData_Analysis/scipy.html#정규성-검정",
    "href": "BigData_Analysis/scipy.html#정규성-검정",
    "title": "Scipy 튜토리얼",
    "section": "정규성 검정",
    "text": "정규성 검정\n\n다음 데이터의 정규성을 검증하라\n\nshapiro 검정시 p-value = 0.34이므로 유의수준 5%에서 귀무가설(“데이터는 정규성을 가진다”)을 기각할 수 없다.\n\n\n\ndf = pd.read_csv('https://raw.githubusercontent.com/Datamanim/datarepo/main/scipy/normal1.csv')\nplt.hist(df)\nplt.show()\n\nprint(shapiro(df))\n\n\n\n\nShapiroResult(statistic=0.9981446862220764, pvalue=0.3485966622829437)\n\n\n\n다음 데이터의 정규성을 검증하라\n\nshapiro 검정시 p-value = 2.3e-16 이므로 유의수준 5%에서 귀무가설인 “데이터는 정규성을 가진다”를 기각하고 대립가설을 채택한다.\n즉, 데이터는 정규성을 가지지 않는다.\n\n\n\ndf = pd.read_csv('https://raw.githubusercontent.com/Datamanim/datarepo/main/scipy/normal3.csv')\nplt.hist(df)\nplt.show()\n\nprint(shapiro(df))\n\n\n\n\nShapiroResult(statistic=0.9578887224197388, pvalue=2.309859641255865e-16)\n\n\n\n위의 데이터를 log변환 한 후에 정규성을 가지는지 확인하라\n\nshapiro 검정시 p-value = 0.17이므로 유의수준 5%에서 귀무가설(“데이터는 정규성을 가진다”)을 기각할 수 없다.\n\n\n\ndf = pd.read_csv('https://raw.githubusercontent.com/Datamanim/datarepo/main/scipy/normal3.csv')\nlog_y_data = np.log1p(df)\n\nplt.hist(log_y_data)\nplt.show()\n\nprint(shapiro(log_y_data))\n\n\n\n\n\n다음 데이터의 정규성을 검증하라\n\nshapiro 검정시 p-value = 0.15이므로 유의수준 5%에서 귀무가설(“데이터는 정규성을 가진다”)을 기각할 수 없다.\n하지만 경고 메세지에서도 보이듯이 5000개 초과의 샘플에 대해서는 샤피로 검정은 정확하지 않을 수 있다.\n\n\n\ndf = pd.read_csv('https://raw.githubusercontent.com/Datamanim/datarepo/main/scipy/normal6.csv')\nplt.hist(df)\nplt.show()\n\nprint(shapiro(df))\n\n\n\n\nShapiroResult(statistic=0.9995355606079102, pvalue=0.15070641040802002)\n\n\nC:\\Users\\user\\AppData\\Roaming\\Python\\Python310\\site-packages\\scipy\\stats\\_morestats.py:1761: UserWarning: p-value may not be accurate for N &gt; 5000.\n  warnings.warn(\"p-value may not be accurate for N &gt; 5000.\")\n\n\n\nanderson 검정을 실시\n\nanderson 검정 결과의 설명\nsignificance_level는 유의확률값을 나타내며 critical_values는 각 유의확률값의 기준점이 된다.\n유의수준 5% 하에서 검정을 진행하려면 statistic값인 0.82이 significance_level 이 5.에 위치한 인덱스를 critical_values 값에서 비교하면 된다.\n즉, statistitc = 0.827이고 유의수준 5%에서 critical_values = 0.786을 가지므로 귀무가설을 기각하고 대립가설을 채택한다.\n따라서, 데이터는 정규성을 가지지 않는다고 판단한다. (p-value와 기각기준 부등호 개념이 반대)\n\n\n\nprint(anderson(df['data'].values))\n\nAndersonResult(statistic=0.8266993530414766, critical_values=array([0.576, 0.656, 0.786, 0.917, 1.091]), significance_level=array([15. , 10. ,  5. ,  2.5,  1. ]))"
  },
  {
    "objectID": "BigData_Analysis/scipy.html#단일-표본-t-검정-one-sample",
    "href": "BigData_Analysis/scipy.html#단일-표본-t-검정-one-sample",
    "title": "Scipy 튜토리얼",
    "section": "단일 표본 t-검정 (one-sample)",
    "text": "단일 표본 t-검정 (one-sample)\n\n100명의 키 정보가 들어 있는 데이터가 있다.데이터가 정규성을 만족하는지 확인하라.\n그리고 평균 키는 165라 판단할수 있는지 귀무가설과 대립가설을 설정한 후 유의수준 5%로 검정하라.\n\n\ndf = pd.read_csv('https://raw.githubusercontent.com/Datamanim/datarepo/main/scipy/height1.csv')\n\n\n\n\nimg\n\n\n\n100명의 키 정보가 들어 있는 데이터가 있다.데이터가 정규성을 만족하는지 확인하라.\n그리고 평균 키는 165라 판단할수 있는지 귀무가설과 대립가설을 설정한 후 유의수준 5%로 검정하라.\n\n\ndf = pd.read_csv('https://raw.githubusercontent.com/Datamanim/datarepo/main/scipy/height2.csv')\n\n\n\n\nimg"
  },
  {
    "objectID": "BigData_Analysis/scipy.html#등분산-검정",
    "href": "BigData_Analysis/scipy.html#등분산-검정",
    "title": "Scipy 튜토리얼",
    "section": "등분산 검정",
    "text": "등분산 검정\n\n두개 학급의 시험성적에 대한 데이터이다 그룹간 등분산 검정을 시행하라\n\n등분산검정의 방법은 3가지가 있다. p-value값은 유의수준 5% 하에서 0.05보다 작은 경우 “각 그룹은 등분산이다”라는 귀무가설을 기각한다.\n아래의 결과를 보면 모두 p-value의 값이 0.05보다 크므로 귀무가설을 기각할 수 없음을 알 수 있다.\n\n두개 학급의 시험성적에 대한 데이터이다 그룹간 등분산 검정을 시행하라\n\nbartlett 검정 결과 pvalue는 0.05보다 크고 fligner, levene 검정 결과 pvalue는 0.05보다 작다.\nfligner, levene는 bartlett보다 좀 더 robust하다는 특징이 있다.\n어떤 검정의 결과를 사용해야하는지는 정해지지 않았지만 상황에 따라 특징들을 서술할 수 있다면 문제 없지 않을까…\n\n두개 학급의 시험성적에 대한 데이터이다 그룹간 등분산 검정을 시행하라\n\nBartlettResult : p-value &gt; 0.05이므로 유의수준 5% 하에서 귀무가설을 채택한다. 즉, 등분산이다.\nFlignerResult, LeveneResult : p-value &lt; 0.05이므로 유의수준 5% 하에서 귀무가설을 기각한다. 즉, 등분산이 아니다.\n\n\n\ndf = pd.read_csv('https://raw.githubusercontent.com/Datamanim/datarepo/main/scipy/scipy6.csv')\n\nprint(bartlett(df.A, df.B))\nprint(fligner(df.A, df.B))\nprint(levene(df.A, df.B))\n\nBartlettResult(statistic=2.383217881104806, pvalue=0.12264468401742169)\nFlignerResult(statistic=5.124831619122788, pvalue=0.023585858890699054)\nLeveneResult(statistic=5.147914610463281, pvalue=0.023868975493455683)\n\n\n\n두개 학급의 시험성적에 대한 데이터이다 그룹간 등분산 검정을 시행하라\n\nbartlett, fligner 두 검정은 nan값을 지우고 사용해야한다.\nlevene의 경우 nan값이 포함된다면 연산이 제대로 안된다."
  },
  {
    "objectID": "BigData_Analysis/scipy.html#독립표본-t-검정-independent",
    "href": "BigData_Analysis/scipy.html#독립표본-t-검정-independent",
    "title": "Scipy 튜토리얼",
    "section": "독립표본 t-검정 (Independent)",
    "text": "독립표본 t-검정 (Independent)\n\n독립 표본 t-검정의 경우 집단의 정규성에 따라 접근방식이 다르다.\n정규성 검정은 shapiro, anderson (샘플 5000개 이상)을 통해 확인\n\n데이터가 정규성을 가지는 경우(모수적 검정)\n&gt; 두 집단의 등분산 검정을 한 후\nfrom scipy.stats import ttest_ind     \n\n등분산일 경우 $ \\[\\begin{align}\nt = \\dfrac{\\bar{x}_1 - \\bar{x}_2}{s \\cdot \\sqrt{\\dfrac{1}{N_1}+\\dfrac{1}{N_2}}}\n\\tag{equal-var = True}\n\\end{align}\\] $\n등분산이 아닐 경우\n$ \\[\\begin{align}\nt = \\dfrac{\\bar{x}_1 - \\bar{x}_2}{\\sqrt{\\dfrac{s_1^2}{N_1} + \\dfrac{s_2^2}{N_2}}}\n\\tag{equal-var = False , welch t-test}\n\\end{align}\\] $\n\n데이터가 정규성을 가지지 않는 경우(비모수적 검정)\n\n두 개 학급의 시험성적에 대한 데이터이다. 두 학급의 시험 평균(비모수검정의 경우 중위값)은 동일하다 말할 수 있는지 확인하라\n\n\ndf1 = pd.read_csv('https://raw.githubusercontent.com/Datamanim/datarepo/main/scipy/ind1.csv')\ndf2 = pd.read_csv('https://raw.githubusercontent.com/Datamanim/datarepo/main/scipy/ind2.csv')\n\nplt.figure(figsize = (6, 4))\nplt.hist(df1,label = 'df1',alpha = 0.4) ; plt.hist(df2,label = 'df2',alpha = 0.4)\nplt.xlabel('Score bins') ; plt.ylabel('Counts') ; plt.legend()\nplt.show()\n\n\n\n\n\nshapiro 검정을 통해 정규성 검정\n\nshapiro 검정 결과 두 학급 모두 p-value &gt; 0.05로 유의수준 5% 하에서 귀무가설을 채택한다. 즉, 두 학급은 정규성을 가진다.\n\nlevene 검정을 통해 등분산 검정\n\nlevene 검정 결과 p-value = 0.113 &gt; 0.05이므로 유의수준 5% 하에서 귀무가설을 채택한다. 즉, 두 학급은 등분산을 가진다.\n\nttest_ind를 통해 독립표본 t-검정\n\n두 학급이 등분산이므로 eqaul_var = True로 설정하여 t-test를 진행\nttest_ind 검정 결과 p-value = 0.006 &lt; 0.05이므로 유의수준 5% 하에서 귀무가설을 기각한다. 즉, 두 학급의 시험 평균은 동일하다.\n\n\n\nprint(shapiro(df1))\nprint(shapiro(df2), '\\n')\n\nprint(levene(df1['data'], df2['data']), '\\n')\n\nprint(ttest_ind(df1, df2, equal_var = True))\n\nShapiroResult(statistic=0.9860947728157043, pvalue=0.37968069314956665)\nShapiroResult(statistic=0.990182638168335, pvalue=0.6793646216392517) \n\nLeveneResult(statistic=2.5337683795339547, pvalue=0.11302904824469093) \n\nTtest_indResult(statistic=array([2.76719074]), pvalue=array([0.00619015]))\n\n\n\n두 개 학급의 시험성적에 대한 데이터이다. 두 학급의 시험 평균(비모수검정의 경우 중위값)은 동일하다 말할 수 있는지 확인하라\n\n\ndf = pd.read_csv('https://raw.githubusercontent.com/Datamanim/datarepo/main/scipy/scipy5.csv')\n\nplt.figure(figsize = (6, 4))\nplt.hist(df['A'], alpha = 0.5, label = 'A') ; plt.hist(df['B'].dropna(), alpha = 0.5, label = 'B')\nplt.xlabel('Score bins') ; plt.ylabel('Counts') ; plt.legend()\nplt.show()\n\n\n\n\n\nshapiro 검정을 통해 정규성 검정\n\nshapiro 검정 결과 유의수준 5% 하에서 두 학급 모두 p-value &lt; 0.05이므로 귀무가설을 기각한다. 즉, 정규성을 띄지 않는다.\n두 그룹 중 한 그룹만 정규성을 위배해도 독립표본 t-검정을 할 수 없다.\n따라서, 비모수 검정을 실시해야 한다.\n\nmannwhitneyu, ranksums 검정을 통한 비모수 검정\n\nMann-Whitney U Test 검정 결과 p-value = 0.98으로 귀무가설(평균은 같다)를 기각할 수 없다. 두그룹의 평균은 동일하다 말할 수 있다.\n윌콕슨 순위합 검정(ranksums)으로 확인해봐도 같은 결과가 나온다.\n\n\n\nprint(shapiro(df['A']))\nprint(shapiro(df['B'].dropna()), '\\n')\n\nprint(mannwhitneyu(df['A'], df['B'].dropna()))\nprint(ranksums(df['A'], df['B'].dropna()), '\\n')\n\nShapiroResult(statistic=0.93753981590271, pvalue=6.175894240456614e-10)\nShapiroResult(statistic=0.9639444351196289, pvalue=0.00013572089665103704) \n\nMannwhitneyuResult(statistic=27036.0, pvalue=0.9807458376150018)\nRanksumsResult(statistic=0.02446942170858557, pvalue=0.9804781743503561) \n\n\n\n\n두개 그룹에 대한 수치형 데이터이다. 두 그룹의 평균은 동일하다 말할 수 있는지 검정하라\n\n\ndf = pd.read_csv('https://raw.githubusercontent.com/Datamanim/datarepo/main/scipy/ind3.csv')\n\nplt.figure(figsize = (6, 4))\nplt.hist(df.loc[df['group'] == 'a', 'data'], label = 'A', alpha = 0.5)\nplt.hist(df.loc[df['group'] == 'b', 'data'], label = 'B', alpha = 0.5)\nplt.xlabel('Score bins') ; plt.ylabel('Counts') ; plt.legend()\nplt.show()\n\n\n\n\n\nshapiro 검정을 통한 정규성 검정\n\nshapiro 검정 결과 두 그룹 모두 유의수준 5% 하에서 p-value &gt; 0.05이므로 귀무가설을 채택한다. 즉, 정규성을 가진다.\n\nlevene 검정을 통한 등분산 검정\n\nlevene 검정 결과 유의수준 5% 하에서 p-value = 0.014 &lt; 0.05이므로 귀무가설을 기각한다. 즉, 두 그룹은 등분산이 아니다.\n\nttest_ind 검정을 통한 독립표본 t-검정\n\n두 학급이 등분산이 아니므로 eqaul_var = False로 설정하여 t-test를 진행\nttest_ind 검정 결과 p-value = 0.029 &lt; 0.05이므로 유의수준 5% 하에서 귀무가설을 기각한다. 즉, 두 그룹의 평균은 동일하지 않다.\n\n\n\na = df.loc[df['group'] == 'a', 'data']\nb = df.loc[df['group'] == 'b', 'data']\n\nprint(shapiro(a))\nprint(shapiro(b), '\\n')\n\nprint(levene(a, b), '\\n')\n\nprint(ttest_ind(a, b, equal_var = False))\n\nShapiroResult(statistic=0.9834123253822327, pvalue=0.1473984718322754)\nShapiroResult(statistic=0.9831849336624146, pvalue=0.47018250823020935) \n\nLeveneResult(statistic=6.185601018015722, pvalue=0.013750484571911342) \n\nTtest_indResult(statistic=-2.1949470315829265, pvalue=0.029512802991767915)\n\n\n\n두개 그룹에 대한 수치형 데이터이다. 두 그룹의 평균은 동일하다 말할 수 있는지 검정하라\n\n\ndf = pd.read_csv('https://raw.githubusercontent.com/Datamanim/datarepo/main/scipy/ind6.csv')\n\nplt.figure(figsize = (6, 4))\nplt.hist(df['a'], label = 'A', alpha = 0.5) ; plt.hist(df['b'], label = 'B', alpha = 0.5)\nplt.xlabel('Score bins') ; plt.ylabel('Counts') ; plt.legend()\nplt.show()\n\n\n\n\n\nshapiro 검정을 통한 정규성 검정\n\nshapiro 검정 결과 두 그룹 모두 유의수준 5% 하에서 p-value &gt; 0.05이므로 귀무가설을 채택한다. 즉, 정규성을 가진다.\n\nlevene 검정을 통한 등분산 검정\n\nlevene 검정 결과 유의수준 5% 하에서 p-value = 0.047 &lt; 0.05이므로 귀무가설을 기각한다. 즉, 두 그룹은 등분산이 아니다.\n\nttest_ind 검정을 통한 독립표본 t-검정\n\n두 학급이 등분산이 아니므로 eqaul_var = False로 설정하여 t-test를 진행\nttest_ind 검정 결과 p-value = 0.998 &gt; 0.05이므로 유의수준 5% 하에서 귀무가설을 채택한다. 즉, 두 그룹의 평균은 동일하다.\n\n\n\na = df['a'].dropna()\nb = df['b'].dropna()\n\nprint(shapiro(a))\nprint(shapiro(b), '\\n')\n\nprint(levene(a, b), '\\n')\n\nprint(ttest_ind(a, b, equal_var = False))\n\nShapiroResult(statistic=0.9865895509719849, pvalue=0.28390026092529297)\nShapiroResult(statistic=0.9854329228401184, pvalue=0.5937777757644653) \n\nLeveneResult(statistic=3.9862856894158347, pvalue=0.04731495612868527) \n\nTtest_indResult(statistic=0.0015963310698567188, pvalue=0.9987289046092704)"
  },
  {
    "objectID": "BigData_Analysis/scipy.html#대응표본-t-검정-paired",
    "href": "BigData_Analysis/scipy.html#대응표본-t-검정-paired",
    "title": "Scipy 튜토리얼",
    "section": "대응표본 t-검정 (paired)",
    "text": "대응표본 t-검정 (paired)\n\n특정 질병 집단의 투약 전후의 혈류량 변화를 나타낸 데이터이다. 투약 전후의 변화가 있는지 검정하라\n\n\ndf = pd.read_csv('https://raw.githubusercontent.com/Datamanim/datarepo/main/scipy/rel2.csv')\n\nplt.figure(figsize = (6, 4))\nfig, ax = plt.subplots(1, 2)\n\nax[0].boxplot(df['before'])\nax[0].set_xticklabels(['before'])\nax[0].set_ylim(100, 350)\nax[0].set_ylabel('value')\n\nax[1].boxplot(df['after'])\nax[1].set_xticklabels(['after'])\nax[1].set_ylim(100, 350)\nax[1].get_yaxis().set_visible(False)\n\nplt.show()\n\n&lt;Figure size 600x400 with 0 Axes&gt;\n\n\n\n\n\n\nshapiro 검정을 통한 정규성 검정\n\nshapiro 검정 결과 두 그룹 모두 유의수준 5% 하에서 p-value &gt; 0.05이므로 귀무가설을 채택한다. 즉, 정규성을 가진다.\n\nlevene 검정을 통한 등분산 검정\n\nlevene 검정 결과 유의수준 5% 하에서 p-value = 0.800 &gt; 0.05이므로 귀무가설을 채택한다. 즉, 두 그룹은 등분산이다.\n\nttest_rel 검정을 통한 대응표본 t-검정\n\n대응표본의 경우 등분산이여도 따로 지정해줄 변수가 없다.\nttest_rel 검정 결과 p-value = 0.012 &lt; 0.05이므로 유의수준 5% 하에서 귀무가설을 기각한다. 즉, 투약 효과가 있다.\n\n\n\nbefore = df['before']\nafter = df['after']\nprint(shapiro(before))\nprint(shapiro(after), '\\n')\n\nprint(levene(before, after), '\\n')\n\nprint(ttest_rel(before, after, alternative = 'two-sided'))\n\nShapiroResult(statistic=0.9907894134521484, pvalue=0.6065712571144104)\nShapiroResult(statistic=0.9916958808898926, pvalue=0.6923439502716064) \n\nLeveneResult(statistic=0.06427968690211128, pvalue=0.8000741651677987) \n\nTtest_relResult(statistic=-2.5535473487670677, pvalue=0.011926744724546513)\n\n\n\n특정 질병 집단의 투약 전후의 혈류량 변화를 나타낸 데이터이다. 투약 전후의 변화가 있는지 검정하라\n\n\ndf = pd.read_csv('https://raw.githubusercontent.com/Datamanim/datarepo/main/scipy/rel3.csv')\n\nplt.figure(figsize = (6, 4))\nfig, ax = plt.subplots(1, 2)\n\nax[0].boxplot(df['before'])\nax[0].set_xticklabels(['before'])\nax[0].set_ylim(100, 350)\nax[0].set_ylabel('value')\n\nax[1].boxplot(df['after'])\nax[1].set_xticklabels(['after'])\nax[1].set_ylim(100, 350)\nax[1].get_yaxis().set_visible(False)\n\nplt.show()\n\n&lt;Figure size 600x400 with 0 Axes&gt;\n\n\n\n\n\n\nshapiro 검정을 통한 정규성 검정\n\nshapiro 검정 결과 두 그룹 모두 유의수준 5% 하에서 p-value &gt; 0.05이므로 귀무가설을 채택한다. 즉, 정규성을 가진다.\n\nlevene 검정을 통한 등분산 검정\n\nlevene 검정 결과 유의수준 5% 하에서 p-value = 0.247 &gt; 0.05이므로 귀무가설을 채택한다. 즉, 두 그룹은 등분산이다.\n\nttest_rel 검정을 통한 대응표본 t-검정\n\n대응표본의 경우 등분산이여도 따로 지정해줄 변수가 없다.\nttest_rel 검정 결과 p-value = 0.850 &gt; 0.05이므로 유의수준 5% 하에서 귀무가설을 채택한다. 즉, 투약 효과가 없다.\n\n\n\nbefore = df['before']\nafter = df['after']\nprint(shapiro(before))\nprint(shapiro(after), '\\n')\n\nprint(levene(before, after), '\\n')\n\nprint(ttest_rel(before, after, alternative = 'two-sided'))\n\nShapiroResult(statistic=0.9920635223388672, pvalue=0.7270597219467163)\nShapiroResult(statistic=0.992019534111023, pvalue=0.7229286432266235) \n\nLeveneResult(statistic=1.3463330638203617, pvalue=0.24708279045237214) \n\nTtest_relResult(statistic=0.188900575991026, pvalue=0.8504925317234707)\n\n\n\n특정 집단의 학습 전후 시험 성적 변화를 나타낸 데이터이다. 시험 전과 후에 차이가 있는지 검정하라\n\n\ndf = pd.read_csv('https://raw.githubusercontent.com/Datamanim/datarepo/main/scipy/rel1.csv')\n\nplt.figure(figsize = (6, 4))\nfig, ax = plt.subplots(1, 2)\n\nax[0].boxplot(df['before'])\nax[0].set_xticklabels(['before'])\nax[0].set_ylim(145, 170)\nax[0].set_ylabel('value')\n\nax[1].boxplot(df['after'])\nax[1].set_xticklabels(['after'])\nax[1].set_ylim(145, 170)\nax[1].get_yaxis().set_visible(False)\n\nplt.show()\n\n&lt;Figure size 600x400 with 0 Axes&gt;\n\n\n\n\n\n\nshapiro 검정을 통한 정규성 검정\n\nshapiro 검정 결과 두 그룹 모두 유의수준 5% 하에서 p-value &lt; 0.05이므로 귀무가설을 기각한다. 즉, 정규성을 띄지 않는다.\n\nlevene 검정을 통한 등분산 검정\n\nlevene 검정 결과 유의수준 5% 하에서 p-value = 0.706 &gt; 0.05이므로 귀무가설을 채택한다. 즉, 두 그룹은 등분산이다.\n\nwilcoxon 검정을 통한 부호 순위 검정\n\n두 그룹 모두 정규성을 띄지 않기 때문에 비모수 검정 시행\nwilcoxon 검정 결과 p-value = 0.121 &gt; 0.05이므로 귀무가설을 채택한다. 즉, 시험 성적의 변화는 없다.\n\n\n\nbefore = df['before']\nafter = df['after']\nprint(shapiro(before))\nprint(shapiro(after), '\\n')\n\nprint(levene(before, after), '\\n')\n\nprint(wilcoxon(before, after))\n\nShapiroResult(statistic=0.9173726439476013, pvalue=0.001897332607768476)\nShapiroResult(statistic=0.9448971152305603, pvalue=0.021141061559319496) \n\nLeveneResult(statistic=0.14329522146179022, pvalue=0.7058456563194881) \n\nWilcoxonResult(statistic=437.0, pvalue=0.12098409484052809)\n\n\n\n한 기계 부품의 rpm 수치를 두가지 다른 상황에서 측정했다. (총 70세트) b 상황이 a 상황보다 rpm 값이 높다고 말할 수 있는지 검정하라\n\n\ndf = pd.read_csv('https://raw.githubusercontent.com/Datamanim/datarepo/main/scipy/rel4.csv')\n\nplt.figure(figsize = (6, 4))\nfig ,ax = plt.subplots(1, 2)\n\nax[0].boxplot(df.loc[df['group'] == 'a', 'rpm'])\nax[0].set_xticklabels(['a'])\nax[0].set_ylim(430, 600)\nax[0].set_ylabel('rpm')\n\nax[1].boxplot(df.loc[df['group'] == 'b', 'rpm'])\nax[1].set_xticklabels(['b'])\nax[1].set_ylim(430, 600)\nax[1].get_yaxis().set_visible(False)\n\nplt.show()\n\n&lt;Figure size 600x400 with 0 Axes&gt;\n\n\n\n\n\n\nshapiro 검정을 통한 정규성 검정\n\nshapiro 검정 결과 두 그룹 모두 유의수준 5% 하에서 p-value &gt; 0.05이므로 귀무가설을 채택한다. 즉, 정규성을 가진다.\n\nlevene 검정을 통한 등분산 검정\n\nlevene 검정 결과 유의수준 5% 하에서 p-value = 0.796 &gt; 0.05이므로 귀무가설을 채택한다. 즉, 두 그룹은 등분산이다.\n\nttest_rel 검정을 통한 대응표본 t-검정\n\n대응표본의 경우 등분산이여도 따로 지정해줄 변수가 없다.\nttest_rel 검정 결과 유의수준 5% 하에서 p-value = 0.969 &gt; 0.05이므로 귀무가설을 채택한다. 즉, b 상황이 a 상황보다 rpm 값이 높다고 말할 수 없다.\n\n\n\na = df.loc[df['group'] == 'a', 'rpm']\nb = df.loc[df['group'] == 'b', 'rpm']\n\nprint(shapiro(a))\nprint(shapiro(b), '\\n')\n\nprint(levene(a, b), '\\n')\n\nprint(ttest_rel(a, b, alternative = 'greater'))\n\nShapiroResult(statistic=0.9907213449478149, pvalue=0.8884111046791077)\nShapiroResult(statistic=0.984674870967865, pvalue=0.5505106449127197) \n\nLeveneResult(statistic=0.06716114122680159, pvalue=0.7959020864923277) \n\nTtest_relResult(statistic=-1.9018108294460812, pvalue=0.9693143365355352)"
  },
  {
    "objectID": "BigData_Analysis/scipy.html#카이제곱-검정-교차분석",
    "href": "BigData_Analysis/scipy.html#카이제곱-검정-교차분석",
    "title": "Scipy 튜토리얼",
    "section": "카이제곱 검정 (교차분석)",
    "text": "카이제곱 검정 (교차분석)\n\n일원 카이제곱검정 (chisquare, 카이제곱 적합도 검정)\n\n한 개의 요인에 의해 k개의 범주를 가질때 이론적 분포를 따르는지 검정\n\n이원 카이제곱검정 (chi2_contingency, fisher_exact(빈도수 5개 이하 셀이 20% 이상일때), 카이제곱독립검정)\n\n모집단이 두개의 변수에 의해 범주화 되었을 때, 두 변수들 사이의 관계가 독립인지 아닌지 검정\n\n144회 주사위를 던졌을때, 각 눈금별로 나온 횟수를 나타낸다. 이 데이터는 주사위의 분포에서 나올 가능성이 있는지 검정하라\n\n\ndf = pd.read_csv('https://raw.githubusercontent.com/Datamanim/datarepo/main/scipy/dice.csv')\n\nplt.figure(figsize = (6, 4))\nplt.bar(df['dice_number'], df['counts'])\nplt.xlabel('Dice value') ; plt.ylabel('Counts')\nplt.show()\n\n\n\n\n\nchisquare 검정을 통한 카이제곱 검정\n\nchisquare 검정 결과 유의수준 5% 하에서 p-value = 0.801 &gt; 0.05이므로 귀무가설을 채택한다. 즉, 각 주사위의 눈금 발생 비율은 동일하다.\n\n다음 데이터는 어떤 집단의 왼손잡이, 오른손 잡이의 숫자를 나타낸다. 인간의 왼손잡이와 오른손잡이의 비율을 0.2 : 0.8로 알려져있다. 이 집단에서 왼손과 오른손 잡이의 비율이 적합한지 검정하라\nchisquare 검정을 통한 카이제곱 검정\n\nchisquare 검정 결과 유의수준 5% 하에서 p-value = 0.025 &lt; 0.05이므로 귀무가설을 기각한다. 즉, 왼손과 오른손잡이의 비율은 0.2, 0.8으로 볼 수 없다.\n\n\n\ndf = pd.read_csv('https://raw.githubusercontent.com/Datamanim/datarepo/main/scipy/hands2.csv')\n\ntarget = df['hands'].value_counts().to_frame().reset_index()\ntarget['expected'] = [int(target['count'].sum() * 0.8), int(target['count'].sum() * 0.2)]\ndisplay(target)\n\nprint(chisquare(target['count'], target['expected']))\n\n\n\n\n\n\n\n\nhands\ncount\nexpected\n\n\n\n\n0\nright\n420\n400\n\n\n1\nleft\n80\n100\n\n\n\n\n\n\n\nPower_divergenceResult(statistic=5.0, pvalue=0.025347318677468325)\n\n\n\n다음 데이터는 국민 기초체력을 조사한 데이터이다. 성별과 등급이 독립적인지 검정하라\n\n\ndf = pd.read_csv('https://raw.githubusercontent.com/Datamanim/datarepo/main/body/body.csv')\ndf.head()\n\n\n\n\n\n\n\n\n측정나이\n측정회원성별\n신장 : cm\n체중 : kg\n체지방율 : %\n이완기혈압(최저) : mmHg\n수축기혈압(최고) : mmHg\n악력D : kg\n앉아윗몸앞으로굽히기 : cm\n교차윗몸일으키기 : 회\n제자리 멀리뛰기 : cm\n등급\n\n\n\n\n0\n59.0\nM\n175.0\n70.6\n19.2\n91.0\n150.0\n40.6\n12.2\n30.0\n179.0\nC\n\n\n1\n40.0\nF\n161.4\n45.8\n21.7\n62.0\n119.0\n22.1\n16.0\n32.0\n165.0\nB\n\n\n2\n27.0\nM\n176.6\n84.8\n19.2\n87.0\n153.0\n45.9\n13.2\n61.0\n216.0\nB\n\n\n3\n38.0\nM\n167.6\n76.7\n24.7\n63.0\n132.0\n43.6\n16.0\n45.0\n231.0\nA\n\n\n4\n21.0\nM\n165.2\n66.2\n21.5\n83.0\n106.0\n33.5\n10.6\n46.0\n198.0\nC\n\n\n\n\n\n\n\n\ncdf = pd.crosstab(df['측정회원성별'], df['등급'])\ndisplay(cdf)\n\n\n\n\n\n\n\n등급\nA\nB\nC\nD\n\n\n측정회원성별\n\n\n\n\n\n\n\n\nF\n1484\n1130\n1147\n1120\n\n\nM\n1865\n2219\n2202\n2229\n\n\n\n\n\n\n\n\nchi2_contingency 검정을 통한 카이제곱 검정\n\nchi2_contingency 검정 결과 유의수준 5% 하에서 p-value = 7.48e-26 &lt; 0.05이므로 귀무가설을 기각한다. 즉, 측정회원성별과 등급은 연관이 있다.\n\n성별에 따른 동아리 활동 참석 여부를 나타낸 데이터이다. 성별과 참석간에 관련이 있는지 검정하라\n\n\ndf = pd.read_csv('https://raw.githubusercontent.com/Datamanim/datarepo/main/scipy/fe2.csv', index_col = 0)\ncdf = df.iloc[:-1, :-1]\ndisplay(cdf)\n\n\n\n\n\n\n\n\n불참\n참석\n\n\n\n\n남성\n4\n2\n\n\n여성\n1\n9\n\n\n\n\n\n\n\n\nchi2_contingency 검정을 통한 카이제곱 검정\n\nchi2_contingency 검정 결과 유의수준 5% 하에서 p-value = 0.070 &gt; 0.05이므로 귀무가설을 채택한다.\n즉, 성별에 따른 동아리 활동 참석 여부은 관련이 없다. (독립이다.)\n\nfisher_exact 검정을 통한 카이제곱 검정\n\n값이 5보다 작은 셀이 20%가 넘어가므로(75%) fisher_exact 검정을 사용해야한다.\nfisher_exact 검정 결과 유의수준 5% 하에서 p-value = 0.036 &lt; 0.05이므로 귀무가설을 기각한다.\n즉, 성별에 따른 동아리 활동 참석 여부는 관련이 있다. (독립이 아니다.)"
  },
  {
    "objectID": "BigData_Analysis/DataQ_Example.html",
    "href": "BigData_Analysis/DataQ_Example.html",
    "title": "빅분기 실기 - DataQ 제공문제",
    "section": "",
    "text": "DataQ 예시문제\nimport ssl\nssl._create_default_https_context = ssl._create_unverified_context"
  },
  {
    "objectID": "BigData_Analysis/DataQ_Example.html#작업형-1",
    "href": "BigData_Analysis/DataQ_Example.html#작업형-1",
    "title": "빅분기 실기 - DataQ 제공문제",
    "section": "작업형 1",
    "text": "작업형 1\n\n\nimport pandas as pd\n\nmtcars = pd.read_csv('https://gist.githubusercontent.com/seankross/a412dfbd88b3db70b74b/raw/5f23f993cd87c283ce766e7ac6b329ee7cc2e1d1/mtcars.csv')\n\nmtcars['qsec'] = (mtcars['qsec'] - min(mtcars['qsec'])) / (max(mtcars['qsec']) - min(mtcars['qsec']))\nprint(len(mtcars[mtcars['qsec'] &gt; 0.5]))\n\n9"
  },
  {
    "objectID": "BigData_Analysis/DataQ_Example.html#작업형-2",
    "href": "BigData_Analysis/DataQ_Example.html#작업형-2",
    "title": "빅분기 실기 - DataQ 제공문제",
    "section": "작업형 2",
    "text": "작업형 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport numpy as np\nimport pandas as pd\n\nx_train = pd.read_csv('https://ndisk2.youngjin.com/cd/bigdata/quiz2/X_train.csv')\ny_train = pd.read_csv('https://ndisk2.youngjin.com/cd/bigdata/quiz2/y_train.csv')\nx_test = pd.read_csv('https://ndisk2.youngjin.com/cd/bigdata/quiz2/X_test.csv')\n\ndisplay(x_train.describe(include = 'object'), x_train.describe(exclude = 'object'))\n\n\n\n\n\n\n\n\n주구매상품\n주구매지점\n\n\n\n\ncount\n3500\n3500\n\n\nunique\n42\n24\n\n\ntop\n기타\n본 점\n\n\nfreq\n595\n1077\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncust_id\n총구매액\n최대구매액\n환불금액\n내점일수\n내점당구매건수\n주말방문비율\n구매주기\n\n\n\n\ncount\n3500.000000\n3.500000e+03\n3.500000e+03\n1.205000e+03\n3500.000000\n3500.000000\n3500.000000\n3500.000000\n\n\nmean\n1749.500000\n9.191925e+07\n1.966424e+07\n2.407822e+07\n19.253714\n2.834963\n0.307246\n20.958286\n\n\nstd\n1010.507298\n1.635065e+08\n3.199235e+07\n4.746453e+07\n27.174942\n1.912368\n0.289752\n24.748682\n\n\nmin\n0.000000\n-5.242152e+07\n-2.992000e+06\n5.600000e+03\n1.000000\n1.000000\n0.000000\n0.000000\n\n\n25%\n874.750000\n4.747050e+06\n2.875000e+06\n2.259000e+06\n2.000000\n1.666667\n0.027291\n4.000000\n\n\n50%\n1749.500000\n2.822270e+07\n9.837000e+06\n7.392000e+06\n8.000000\n2.333333\n0.256410\n13.000000\n\n\n75%\n2624.250000\n1.065079e+08\n2.296250e+07\n2.412000e+07\n25.000000\n3.375000\n0.448980\n28.000000\n\n\nmax\n3499.000000\n2.323180e+09\n7.066290e+08\n5.637530e+08\n285.000000\n22.083333\n1.000000\n166.000000\n\n\n\n\n\n\n\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\n\n# 결측치 처리\nx_train['환불금액'] = x_train['환불금액'].fillna(0)\nx_test['환불금액'] = x_test['환불금액'].fillna(0)\n\n# Label Encoding\nfor col in x_train.select_dtypes(include = 'object').columns :\n    le = LabelEncoder()\n    x_train[col] = le.fit_transform(x_train[col])\n    x_test[col] = le.transform(x_test[col])\nprint('Done.')\n\n# Train / Valid Split\nX_train, X_valid, y_train, y_valid = train_test_split(x_train.drop(columns = 'cust_id'), y_train['gender'],\n                                                      test_size = 0.1, random_state = 42)\nprint(X_train.shape, X_valid.shape, y_train.shape, y_valid.shape)\n\nDone.\n(3150, 9) (350, 9) (3150,) (350,)\n\n\n\nimport sklearn\nfrom sklearn.ensemble import *\nfrom sklearn.metrics import roc_auc_score\n\n# ensemble 모듈 내 Classifier 추출\nclf = [model for model in dir(sklearn.ensemble) if model.endswith('Classifier')]\n\n# Model Fitting\nab_clf = AdaBoostClassifier(random_state = 42).fit(X_train, y_train)\nbg_clf = BaggingClassifier(random_state = 42).fit(X_train, y_train)\net_clf = ExtraTreesClassifier(random_state = 42).fit(X_train, y_train)\ngb_clf = GradientBoostingClassifier(random_state = 42).fit(X_train, y_train)\nhg_clf = HistGradientBoostingClassifier(random_state = 42).fit(X_train, y_train)\nrf_clf = RandomForestClassifier(random_state = 42).fit(X_train, y_train)\n\nestimators = [('ab', ab_clf), ('bg', bg_clf), ('et', et_clf), ('gb', gb_clf), ('hg', hg_clf), ('rf', rf_clf)]\nst_clf = StackingClassifier(estimators).fit(X_train, y_train)\nvt_clf = VotingClassifier(estimators).fit(X_train, y_train)\n\n# ROC-AUC Score 계산\nscore_list = []\nfor model in [ab_clf, bg_clf, et_clf, gb_clf, hg_clf, rf_clf, st_clf, vt_clf] :\n    score = np.round(roc_auc_score(model.predict(X_valid), y_valid), 4)\n    score_list.append(score)\n\nresult = pd.DataFrame(data = score_list, index = clf, columns = ['ROC-AUC Score'])\nresult.sort_values(by = 'ROC-AUC Score', ascending = False, inplace = True)\nprint(f'Best Model : {result.idxmax().values} / ROC-AUC Score : {result.loc[result.idxmax(), \"ROC-AUC Score\"].values}')\nresult\n\nBest Model : ['StackingClassifier'] / ROC-AUC Score : [0.6551]\n\n\n\n\n\n\n\n\n\nROC-AUC Score\n\n\n\n\nStackingClassifier\n0.6551\n\n\nGradientBoostingClassifier\n0.6538\n\n\nVotingClassifier\n0.6498\n\n\nRandomForestClassifier\n0.6365\n\n\nExtraTreesClassifier\n0.6309\n\n\nHistGradientBoostingClassifier\n0.6280\n\n\nAdaBoostClassifier\n0.6277\n\n\nBaggingClassifier\n0.5667\n\n\n\n\n\n\n\n\n# Prediction\npred = st_clf.predict_proba(x_test.drop(columns = 'cust_id'))[:, 1]\npred_df = pd.DataFrame({'cust_id' : x_test['cust_id'], 'gender' : pred}) # .to_csv('000000000.csv', index = False)\ndisplay(pred_df)\n\n\n\n\n\n\n\n\ncust_id\ngender\n\n\n\n\n0\n3500\n0.436304\n\n\n1\n3501\n0.240343\n\n\n2\n3502\n0.189089\n\n\n3\n3503\n0.390069\n\n\n4\n3504\n0.439939\n\n\n...\n...\n...\n\n\n2477\n5977\n0.578960\n\n\n2478\n5978\n0.535448\n\n\n2479\n5979\n0.462661\n\n\n2480\n5980\n0.353368\n\n\n2481\n5981\n0.538322\n\n\n\n\n2482 rows × 2 columns"
  },
  {
    "objectID": "BigData_Analysis/DataQ_Example.html#작업형-3",
    "href": "BigData_Analysis/DataQ_Example.html#작업형-3",
    "title": "빅분기 실기 - DataQ 제공문제",
    "section": "작업형 3",
    "text": "작업형 3\n\n\n문제 설명\n\\(\\mu_a\\) = 치료 후 혈압의 평균\n\\(\\mu_b\\) = 치료 전 혈압의 평균\n\\(\\mu_d\\) = (치료 후 혈압 - 치료 전 혈압)의 평균\n⇒ \\(\\mu_d = \\mu_a - \\mu_b\\)\n\n\n귀무가설(\\(H_0\\)) : \\(\\mu_d = \\mu_a - \\mu_b \\geq 0\\)\n대립가설(\\(H_1\\)) : \\(\\mu_d = \\mu_a - \\mu_b &lt; 0\\)\n\n\n\nscipy.stats.ttest_rel : 대응표본 t-검정 시 사용 - alternative : 대립가설(\\(H_1\\)) 정의하는 파라미터 - two-sided : \\(\\mu_d \\neq 0\\) \\((\\mu_a \\neq \\mu_b)\\) ⇒ 분포의 평균이 같지 않다. - less : \\(\\mu_d &lt; 0\\) \\((\\mu_a &lt; \\mu_b)\\) ⇒ 첫 번째 표본분포의 평균이 두 번째 표본분포의 평균보다 작다. - greater : \\(\\mu_d &gt; 0\\) \\((\\mu_a &gt; \\mu_b)\\) ⇒ 첫 번째 표본분포의 평균이 두 번째 표본분포의 평균보다 크다.\n\npressure = pd.read_csv('https://raw.githubusercontent.com/Opensourcefordatascience/Data-sets/master/blood_pressure.csv')\npressure.head()\n\n\n\n\n\n\n\n\npatient\nsex\nagegrp\nbp_before\nbp_after\n\n\n\n\n0\n1\nMale\n30-45\n143\n153\n\n\n1\n2\nMale\n30-45\n163\n170\n\n\n2\n3\nMale\n30-45\n153\n168\n\n\n3\n4\nMale\n30-45\n153\n142\n\n\n4\n5\nMale\n30-45\n146\n141\n\n\n\n\n\n\n\n\n\n① \\(\\mu_d\\)의 표본평균을 입력하시오. (반올림하여 소수 둘째자리까지 계산)\n\npressure['diff'] = pressure['bp_after'] - pressure['bp_before']\n\n# 쌍체표본 검정의 경우 표본평균을 구할 때 (n-1)로 나누는 것이 아닌 n으로 나누어 줌\navg = sum(pressure['diff']) / len(pressure['diff'])\nprint(f'{avg :.2f}')\n\n-5.09\n\n\n\n\n② 위의 가설을 검정하기 위한 검정통계량을 입력하시오. (반올림하여 소수 넷째자리까지 계산)\n\nfrom scipy.stats import shapiro, ttest_rel\n\n# 정규성 검정 &gt; pvalue = 0.784이므로 정규성을 띈다.\n# shapiro(pressure['diff'])\n\nstatistic, pvalue = ttest_rel(pressure['bp_after'], pressure['bp_before'], alternative = 'less')\nprint(f'{statistic :.4f}')\n\n-3.3372\n\n\n\n\n③ 위의 통계량에 대한 p-값을 구하여 입력하시오. (반올림하여 소수 넷째자리까지 계산)\n\nprint(f'{pvalue :.4f}')\n\n0.0006\n\n\n\n\n④ 유의수준 0.05 하에서 귀무가설을 기준으로 검정의 결과를 (채택/기각) 중 선택하여 입력하시오.\n\nprint('기각' if pvalue &lt; 0.05 else '채택')\n\n기각"
  },
  {
    "objectID": "BigData_Analysis/DataQ_Example.html#tip",
    "href": "BigData_Analysis/DataQ_Example.html#tip",
    "title": "빅분기 실기 - DataQ 제공문제",
    "section": "Tip",
    "text": "Tip\n\ndir 함수 사용\n\nimport scipy.stats\nprint([module for module in dir(scipy.stats) if module[0] != '_'])\n\n['BootstrapDegenerateDistributionWarning', 'F_onewayBadInputSizesWarning', 'F_onewayConstantInputWarning', 'NumericalInverseHermite', 'PearsonRConstantInputWarning', 'PearsonRNearConstantInputWarning', 'SpearmanRConstantInputWarning', 'alexandergovern', 'alpha', 'anderson', 'anderson_ksamp', 'anglit', 'ansari', 'arcsine', 'argus', 'barnard_exact', 'bartlett', 'bayes_mvs', 'bernoulli', 'beta', 'betabinom', 'betaprime', 'biasedurn', 'binned_statistic', 'binned_statistic_2d', 'binned_statistic_dd', 'binom', 'binom_test', 'binomtest', 'boltzmann', 'bootstrap', 'boschloo_exact', 'boxcox', 'boxcox_llf', 'boxcox_normmax', 'boxcox_normplot', 'bradford', 'brunnermunzel', 'burr', 'burr12', 'cauchy', 'chi', 'chi2', 'chi2_contingency', 'chisquare', 'circmean', 'circstd', 'circvar', 'combine_pvalues', 'contingency', 'cosine', 'cramervonmises', 'cramervonmises_2samp', 'crystalball', 'cumfreq', 'describe', 'dgamma', 'differential_entropy', 'dirichlet', 'distributions', 'dlaplace', 'dweibull', 'energy_distance', 'entropy', 'epps_singleton_2samp', 'erlang', 'expon', 'exponnorm', 'exponpow', 'exponweib', 'f', 'f_oneway', 'fatiguelife', 'find_repeats', 'fisher_exact', 'fisk', 'fligner', 'foldcauchy', 'foldnorm', 'friedmanchisquare', 'gamma', 'gausshyper', 'gaussian_kde', 'genexpon', 'genextreme', 'gengamma', 'genhalflogistic', 'genhyperbolic', 'geninvgauss', 'genlogistic', 'gennorm', 'genpareto', 'geom', 'gilbrat', 'gmean', 'gompertz', 'gstd', 'gumbel_l', 'gumbel_r', 'gzscore', 'halfcauchy', 'halfgennorm', 'halflogistic', 'halfnorm', 'hmean', 'hypergeom', 'hypsecant', 'invgamma', 'invgauss', 'invweibull', 'invwishart', 'iqr', 'itemfreq', 'jarque_bera', 'johnsonsb', 'johnsonsu', 'kappa3', 'kappa4', 'kde', 'kendalltau', 'kruskal', 'ks_1samp', 'ks_2samp', 'ksone', 'kstat', 'kstatvar', 'kstest', 'kstwo', 'kstwobign', 'kurtosis', 'kurtosistest', 'laplace', 'laplace_asymmetric', 'levene', 'levy', 'levy_l', 'levy_stable', 'linregress', 'loggamma', 'logistic', 'loglaplace', 'lognorm', 'logser', 'loguniform', 'lomax', 'mannwhitneyu', 'matrix_normal', 'maxwell', 'median_abs_deviation', 'median_absolute_deviation', 'median_test', 'mielke', 'mode', 'moment', 'mood', 'morestats', 'moyal', 'mstats', 'mstats_basic', 'mstats_extras', 'multinomial', 'multiscale_graphcorr', 'multivariate_hypergeom', 'multivariate_normal', 'multivariate_t', 'mvn', 'mvsdist', 'nakagami', 'nbinom', 'ncf', 'nchypergeom_fisher', 'nchypergeom_wallenius', 'nct', 'ncx2', 'nhypergeom', 'norm', 'normaltest', 'norminvgauss', 'obrientransform', 'ortho_group', 'page_trend_test', 'pareto', 'pearson3', 'pearsonr', 'percentileofscore', 'permutation_test', 'planck', 'pointbiserialr', 'poisson', 'power_divergence', 'powerlaw', 'powerlognorm', 'powernorm', 'ppcc_max', 'ppcc_plot', 'probplot', 'qmc', 'randint', 'random_correlation', 'rankdata', 'ranksums', 'rayleigh', 'rdist', 'recipinvgauss', 'reciprocal', 'relfreq', 'rice', 'rv_continuous', 'rv_discrete', 'rv_histogram', 'rvs_ratio_uniforms', 'scoreatpercentile', 'sem', 'semicircular', 'shapiro', 'siegelslopes', 'sigmaclip', 'skellam', 'skew', 'skewcauchy', 'skewnorm', 'skewtest', 'somersd', 'spearmanr', 'special_ortho_group', 'statlib', 'stats', 'studentized_range', 't', 'test', 'theilslopes', 'tiecorrect', 'tmax', 'tmean', 'tmin', 'trapezoid', 'trapz', 'triang', 'trim1', 'trim_mean', 'trimboth', 'truncexpon', 'truncnorm', 'tsem', 'tstd', 'ttest_1samp', 'ttest_ind', 'ttest_ind_from_stats', 'ttest_rel', 'tukey_hsd', 'tukeylambda', 'tvar', 'uniform', 'unitary_group', 'variation', 'vonmises', 'vonmises_line', 'wald', 'wasserstein_distance', 'weibull_max', 'weibull_min', 'weightedtau', 'wilcoxon', 'wishart', 'wrapcauchy', 'yeojohnson', 'yeojohnson_llf', 'yeojohnson_normmax', 'yeojohnson_normplot', 'yulesimon', 'zipf', 'zipfian', 'zmap', 'zscore']\n\n\n\n\nhelp 함수 사용\n\nprint(help(scipy.stats.ttest_rel))\n\nHelp on function ttest_rel in module scipy.stats._stats_py:\n\nttest_rel(a, b, axis=0, nan_policy='propagate', alternative='two-sided')\n    Calculate the t-test on TWO RELATED samples of scores, a and b.\n    \n    This is a test for the null hypothesis that two related or\n    repeated samples have identical average (expected) values.\n    \n    Parameters\n    ----------\n    a, b : array_like\n        The arrays must have the same shape.\n    axis : int or None, optional\n        Axis along which to compute test. If None, compute over the whole\n        arrays, `a`, and `b`.\n    nan_policy : {'propagate', 'raise', 'omit'}, optional\n        Defines how to handle when input contains nan.\n        The following options are available (default is 'propagate'):\n    \n          * 'propagate': returns nan\n          * 'raise': throws an error\n          * 'omit': performs the calculations ignoring nan values\n    alternative : {'two-sided', 'less', 'greater'}, optional\n        Defines the alternative hypothesis.\n        The following options are available (default is 'two-sided'):\n    \n        * 'two-sided': the means of the distributions underlying the samples\n          are unequal.\n        * 'less': the mean of the distribution underlying the first sample\n          is less than the mean of the distribution underlying the second\n          sample.\n        * 'greater': the mean of the distribution underlying the first\n          sample is greater than the mean of the distribution underlying\n          the second sample.\n    \n        .. versionadded:: 1.6.0\n    \n    Returns\n    -------\n    statistic : float or array\n        t-statistic.\n    pvalue : float or array\n        The p-value.\n    \n    Notes\n    -----\n    Examples for use are scores of the same set of student in\n    different exams, or repeated sampling from the same units. The\n    test measures whether the average score differs significantly\n    across samples (e.g. exams). If we observe a large p-value, for\n    example greater than 0.05 or 0.1 then we cannot reject the null\n    hypothesis of identical average scores. If the p-value is smaller\n    than the threshold, e.g. 1%, 5% or 10%, then we reject the null\n    hypothesis of equal averages. Small p-values are associated with\n    large t-statistics.\n    \n    References\n    ----------\n    https://en.wikipedia.org/wiki/T-test#Dependent_t-test_for_paired_samples\n    \n    Examples\n    --------\n    &gt;&gt;&gt; from scipy import stats\n    &gt;&gt;&gt; rng = np.random.default_rng()\n    \n    &gt;&gt;&gt; rvs1 = stats.norm.rvs(loc=5, scale=10, size=500, random_state=rng)\n    &gt;&gt;&gt; rvs2 = (stats.norm.rvs(loc=5, scale=10, size=500, random_state=rng)\n    ...         + stats.norm.rvs(scale=0.2, size=500, random_state=rng))\n    &gt;&gt;&gt; stats.ttest_rel(rvs1, rvs2)\n    Ttest_relResult(statistic=-0.4549717054410304, pvalue=0.6493274702088672)\n    &gt;&gt;&gt; rvs3 = (stats.norm.rvs(loc=8, scale=10, size=500, random_state=rng)\n    ...         + stats.norm.rvs(scale=0.2, size=500, random_state=rng))\n    &gt;&gt;&gt; stats.ttest_rel(rvs1, rvs3)\n    Ttest_relResult(statistic=-5.879467544540889, pvalue=7.540777129099917e-09)\n\nNone"
  },
  {
    "objectID": "BigData_Analysis/Type1.html",
    "href": "BigData_Analysis/Type1.html",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "",
    "text": "판다스 연습 튜토리얼"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-1",
    "href": "BigData_Analysis/Type1.html#question-1",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 1",
    "text": "Question 1\n\nData\n\n롤 랭킹 데이터 : https://www.kaggle.com/datasnaek/league-of-legends\n\nDataURL = ‘https://raw.githubusercontent.com/Datamanim/pandas/main/lol.csv’\n\n\n데이터를 로드하라. 데이터는 \\t을 기준으로 구분되어있다.\n\ndf = pd.read_csv('https://raw.githubusercontent.com/Datamanim/pandas/main/lol.csv', sep = '\\t')\ntype(df)\n\npandas.core.frame.DataFrame"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-2",
    "href": "BigData_Analysis/Type1.html#question-2",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 2",
    "text": "Question 2\n데이터의 상위 5개 행을 출력하라\n\nAns = df.head()\nAns\n\n\n\n\n\n\n\n\ngameId\ncreationTime\ngameDuration\nseasonId\nwinner\n...\nt2_ban1\nt2_ban2\nt2_ban3\nt2_ban4\nt2_ban5\n\n\n\n\n0\n3326086514\n1504279457970\n1949\n9\n1\n...\n114\n67\n43\n16\n51\n\n\n1\n3229566029\n1497848803862\n1851\n9\n1\n...\n11\n67\n238\n51\n420\n\n\n2\n3327363504\n1504360103310\n1493\n9\n1\n...\n157\n238\n121\n57\n28\n\n\n3\n3326856598\n1504348503996\n1758\n9\n1\n...\n164\n18\n141\n40\n51\n\n\n4\n3330080762\n1504554410899\n2094\n9\n1\n...\n86\n11\n201\n122\n18\n\n\n\n\n5 rows × 61 columns"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-3",
    "href": "BigData_Analysis/Type1.html#question-3",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 3",
    "text": "Question 3\n데이터의 행과 열의 갯수를 파악하라\n\nAns = df.shape\nAns\n\n(51490, 61)"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-4",
    "href": "BigData_Analysis/Type1.html#question-4",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 4",
    "text": "Question 4\n전체 컬럼을 출력하라\n\nAns = df.columns\nAns\n\nIndex(['gameId', 'creationTime', 'gameDuration', 'seasonId', 'winner',\n       'firstBlood', 'firstTower', 'firstInhibitor', 'firstBaron',\n       'firstDragon', 'firstRiftHerald', 't1_champ1id', 't1_champ1_sum1',\n       't1_champ1_sum2', 't1_champ2id', 't1_champ2_sum1', 't1_champ2_sum2',\n       't1_champ3id', 't1_champ3_sum1', 't1_champ3_sum2', 't1_champ4id',\n       't1_champ4_sum1', 't1_champ4_sum2', 't1_champ5id', 't1_champ5_sum1',\n       't1_champ5_sum2', 't1_towerKills', 't1_inhibitorKills', 't1_baronKills',\n       't1_dragonKills', 't1_riftHeraldKills', 't1_ban1', 't1_ban2', 't1_ban3',\n       't1_ban4', 't1_ban5', 't2_champ1id', 't2_champ1_sum1', 't2_champ1_sum2',\n       't2_champ2id', 't2_champ2_sum1', 't2_champ2_sum2', 't2_champ3id',\n       't2_champ3_sum1', 't2_champ3_sum2', 't2_champ4id', 't2_champ4_sum1',\n       't2_champ4_sum2', 't2_champ5id', 't2_champ5_sum1', 't2_champ5_sum2',\n       't2_towerKills', 't2_inhibitorKills', 't2_baronKills', 't2_dragonKills',\n       't2_riftHeraldKills', 't2_ban1', 't2_ban2', 't2_ban3', 't2_ban4',\n       't2_ban5'],\n      dtype='object')"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-5",
    "href": "BigData_Analysis/Type1.html#question-5",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 5",
    "text": "Question 5\n6번째 컬럼명을 출력하라\n\nAns = df.columns[5]\nAns\n\n'firstBlood'"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-6",
    "href": "BigData_Analysis/Type1.html#question-6",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 6",
    "text": "Question 6\n6번째 컬럼의 데이터 타입을 확인하라\n\nAns = df.iloc[:, 5].dtype\nAns\n\ndtype('int64')"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-7",
    "href": "BigData_Analysis/Type1.html#question-7",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 7",
    "text": "Question 7\n데이터셋의 인덱스 구성은 어떤가\n\nAns = df.index\nAns\n\nRangeIndex(start=0, stop=51490, step=1)"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-8",
    "href": "BigData_Analysis/Type1.html#question-8",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 8",
    "text": "Question 8\n6번째 컬럼의 3번째 값은 무엇인가?\n\nAns = df.iloc[2, 5]\nAns\n\n2"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-9",
    "href": "BigData_Analysis/Type1.html#question-9",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 9",
    "text": "Question 9\n\nData\n\n제주 날씨, 인구에 따른 교통량데이터 (출처 : 제주 데이터 허브)\nDataURL = ‘https://raw.githubusercontent.com/Datamanim/pandas/main/Jeju.csv’\n\n\n데이터를 로드하라. 컬럼이 한글이기에 적절한 처리해줘야함\n\ndf = pd.read_csv('https://raw.githubusercontent.com/Datamanim/pandas/main/Jeju.csv', encoding = 'CP949')\ntype(df)\n\npandas.core.frame.DataFrame"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-10",
    "href": "BigData_Analysis/Type1.html#question-10",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 10",
    "text": "Question 10\n데이터 마지막 3개행을 출력하라\n\nAns = df.tail(3)\nAns\n\n\n\n\n\n\n\n\nid\n일자\n시도명\n읍면동명\n거주인구\n...\n평균 속도\n평균 소요 시간\n평균 기온\n일강수량\n평균 풍속\n\n\n\n\n9618\n32066\n2020-04-30\n제주시\n도두동\n28397.481\n...\n41.053\n29.421\n20.3\n0.0\n3.0\n\n\n9619\n32067\n2020-04-30\n서귀포시\n안덕면\n348037.846\n...\n46.595\n49.189\n17.6\n0.0\n3.5\n\n\n9620\n32068\n2020-04-30\n제주시\n연동\n1010643.372\n...\n40.863\n27.765\n14.1\n0.0\n4.8\n\n\n\n\n3 rows × 13 columns"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-11",
    "href": "BigData_Analysis/Type1.html#question-11",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 11",
    "text": "Question 11\n수치형 변수를 가진 컬럼을 출력하라\n\nAns = df.columns[df.dtypes != 'object']\nAns\n\nIndex(['id', '거주인구', '근무인구', '방문인구', '총 유동인구', '평균 속도', '평균 소요 시간', '평균 기온',\n       '일강수량', '평균 풍속'],\n      dtype='object')\n\n\n\nAns = df.select_dtypes(exclude = 'object').columns\nAns\n\nIndex(['id', '거주인구', '근무인구', '방문인구', '총 유동인구', '평균 속도', '평균 소요 시간', '평균 기온',\n       '일강수량', '평균 풍속'],\n      dtype='object')"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-12",
    "href": "BigData_Analysis/Type1.html#question-12",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 12",
    "text": "Question 12\n범주형 변수를 가진 컬럼을 출력하라\n\nAns = df.select_dtypes(include = 'object').columns\nAns\n\nIndex(['일자', '시도명', '읍면동명'], dtype='object')"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-13",
    "href": "BigData_Analysis/Type1.html#question-13",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 13",
    "text": "Question 13\n각 컬럼의 결측치 숫자를 파악하라\n\nAns = df.isnull().sum()\nAns\n\nid          0\n일자          0\n시도명         0\n읍면동명        0\n거주인구        0\n           ..\n평균 속도       0\n평균 소요 시간    0\n평균 기온       0\n일강수량        0\n평균 풍속       0\nLength: 13, dtype: int64"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-14",
    "href": "BigData_Analysis/Type1.html#question-14",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 14",
    "text": "Question 14\n각 컬럼의 데이터수, 데이터타입을 한번에 확인하라\n\nAns = df.info()\nAns\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 9621 entries, 0 to 9620\nData columns (total 13 columns):\n #   Column    Non-Null Count  Dtype  \n---  ------    --------------  -----  \n 0   id        9621 non-null   int64  \n 1   일자        9621 non-null   object \n 2   시도명       9621 non-null   object \n 3   읍면동명      9621 non-null   object \n 4   거주인구      9621 non-null   float64\n 5   근무인구      9621 non-null   float64\n 6   방문인구      9621 non-null   float64\n 7   총 유동인구    9621 non-null   float64\n 8   평균 속도     9621 non-null   float64\n 9   평균 소요 시간  9621 non-null   float64\n 10  평균 기온     9621 non-null   float64\n 11  일강수량      9621 non-null   float64\n 12  평균 풍속     9621 non-null   float64\ndtypes: float64(9), int64(1), object(3)\nmemory usage: 977.3+ KB"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-15",
    "href": "BigData_Analysis/Type1.html#question-15",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 15",
    "text": "Question 15\n각 수치형 변수의 분포(사분위, 평균, 표준편차, 최대 , 최소)를 확인하라\n\nAns = df.describe()\nAns\n\n\n\n\n\n\n\n\nid\n거주인구\n근무인구\n방문인구\n총 유동인구\n평균 속도\n평균 소요 시간\n평균 기온\n일강수량\n평균 풍속\n\n\n\n\ncount\n9621.000000\n9.621000e+03\n9621.000000\n9621.000000\n9.621000e+03\n9621.000000\n9621.000000\n9621.000000\n9621.000000\n9621.000000\n\n\nmean\n27258.000000\n3.174315e+05\n35471.201510\n195889.561802\n5.487922e+05\n41.109084\n37.215873\n13.550828\n6.972426\n2.753171\n\n\nstd\n2777.487804\n2.982079e+05\n40381.214775\n140706.090325\n4.608802e+05\n8.758631\n12.993786\n7.745515\n27.617260\n1.498538\n\n\nmin\n22448.000000\n9.305552e+03\n1407.936000\n11538.322000\n2.225181e+04\n24.333000\n12.667000\n-9.600000\n0.000000\n0.000000\n\n\n25%\n24853.000000\n9.539939e+04\n12074.498000\n99632.153000\n2.216910e+05\n34.250000\n27.889000\n7.600000\n0.000000\n1.700000\n\n\n50%\n27258.000000\n2.221105e+05\n21960.928000\n152805.335000\n3.866935e+05\n39.640000\n34.500000\n13.400000\n0.000000\n2.400000\n\n\n75%\n29663.000000\n4.106671e+05\n40192.032000\n236325.109000\n6.406918e+05\n49.105000\n46.176000\n19.700000\n1.500000\n3.400000\n\n\nmax\n32068.000000\n1.364504e+06\n263476.965000\n723459.209000\n2.066484e+06\n103.000000\n172.200000\n30.400000\n587.500000\n13.333000"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-16",
    "href": "BigData_Analysis/Type1.html#question-16",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 16",
    "text": "Question 16\n거주인구 컬럼의 값들을 출력하라\n\nAns = df['거주인구']\nAns\n\n0         32249.987\n1        213500.997\n2       1212382.218\n3         33991.653\n4        155036.925\n           ...     \n9616     228260.005\n9617     459959.064\n9618      28397.481\n9619     348037.846\n9620    1010643.372\nName: 거주인구, Length: 9621, dtype: float64"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-17",
    "href": "BigData_Analysis/Type1.html#question-17",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 17",
    "text": "Question 17\n평균 속도 컬럼의 4분위 범위(IQR) 값을 구하여라\n\n# Ans = df['평균 속도'].describe()['75%'] - df['평균 속도'].describe()['25%']\nAns = df['평균 속도'].quantile(.75) - df['평균 속도'].quantile(.25)\nAns\n\n14.854999999999997"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-18",
    "href": "BigData_Analysis/Type1.html#question-18",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 18",
    "text": "Question 18\n읍면동명 컬럼의 유일값 갯수를 출력하라\n\nAns = df['읍면동명'].nunique()\nAns\n\n41"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-19",
    "href": "BigData_Analysis/Type1.html#question-19",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 19",
    "text": "Question 19\n읍면동명 컬럼의 유일값을 모두 출력하라\n\nAns = df['읍면동명'].unique()\nAns\n\narray(['도두동', '외도동', '이도2동', '일도1동', '대천동', '서홍동', '한경면', '송산동', '조천읍',\n       '일도2동', '영천동', '예래동', '대륜동', '삼도1동', '이호동', '건입동', '중앙동', '삼양동',\n       '삼도2동', '이도1동', '남원읍', '대정읍', '정방동', '효돈동', '아라동', '한림읍', '구좌읍',\n       '용담1동', '오라동', '화북동', '연동', '표선면', '중문동', '성산읍', '안덕면', '천지동',\n       '노형동', '동홍동', '용담2동', '봉개동', '애월읍'], dtype=object)"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-20",
    "href": "BigData_Analysis/Type1.html#question-20",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 20",
    "text": "Question 20\n\nData\n\n식당데이터 : https://github.com/justmarkham/DAT8/blob/master/data/chipotle.tsv\n\nDataURL = ‘https://raw.githubusercontent.com/Datamanim/pandas/main/chipo.csv’\n\n\n데이터를 로드하라.\n\ndf = pd.read_csv('https://raw.githubusercontent.com/Datamanim/pandas/main/chipo.csv')\nAns = df.head()\nAns\n\n\n\n\n\n\n\n\norder_id\nquantity\nitem_name\nchoice_description\nitem_price\n\n\n\n\n0\n1\n1\nChips and Fresh Tomato Salsa\nNaN\n$2.39\n\n\n1\n1\n1\nIzze\n[Clementine]\n$3.39\n\n\n2\n1\n1\nNantucket Nectar\n[Apple]\n$3.39\n\n\n3\n1\n1\nChips and Tomatillo-Green Chili Salsa\nNaN\n$2.39\n\n\n4\n2\n2\nChicken Bowl\n[Tomatillo-Red Chili Salsa (Hot), [Black Beans...\n$16.98"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-21",
    "href": "BigData_Analysis/Type1.html#question-21",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 21",
    "text": "Question 21\nquantity컬럼 값이 3인 데이터를 추출하여 첫 5행을 출력하라\n\nAns = df[df['quantity'] == 3].head()\nAns\n\n\n\n\n\n\n\n\norder_id\nquantity\nitem_name\nchoice_description\nitem_price\n\n\n\n\n409\n178\n3\nChicken Bowl\n[[Fresh Tomato Salsa (Mild), Tomatillo-Green C...\n$32.94\n\n\n445\n193\n3\nBowl\n[Braised Carnitas, Pinto Beans, [Sour Cream, C...\n$22.20\n\n\n689\n284\n3\nCanned Soft Drink\n[Diet Coke]\n$3.75\n\n\n818\n338\n3\nBottled Water\nNaN\n$3.27\n\n\n850\n350\n3\nCanned Soft Drink\n[Sprite]\n$3.75"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-22",
    "href": "BigData_Analysis/Type1.html#question-22",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 22",
    "text": "Question 22\nquantity컬럼 값이 3인 데이터를 추출하여 index를 0부터 정렬하고 첫 5행을 출력하라\n\nAns = df[df['quantity'] == 3].reset_index(drop = True).head()\nAns\n\n\n\n\n\n\n\n\norder_id\nquantity\nitem_name\nchoice_description\nitem_price\n\n\n\n\n0\n178\n3\nChicken Bowl\n[[Fresh Tomato Salsa (Mild), Tomatillo-Green C...\n$32.94\n\n\n1\n193\n3\nBowl\n[Braised Carnitas, Pinto Beans, [Sour Cream, C...\n$22.20\n\n\n2\n284\n3\nCanned Soft Drink\n[Diet Coke]\n$3.75\n\n\n3\n338\n3\nBottled Water\nNaN\n$3.27\n\n\n4\n350\n3\nCanned Soft Drink\n[Sprite]\n$3.75"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-23",
    "href": "BigData_Analysis/Type1.html#question-23",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 23",
    "text": "Question 23\nquantity , item_price 두개의 컬럼으로 구성된 새로운 데이터 프레임을 정의하라\n\nAns = df[['quantity', 'item_price']]\nAns\n\n\n\n\n\n\n\n\nquantity\nitem_price\n\n\n\n\n0\n1\n$2.39\n\n\n1\n1\n$3.39\n\n\n2\n1\n$3.39\n\n\n3\n1\n$2.39\n\n\n4\n2\n$16.98\n\n\n...\n...\n...\n\n\n4617\n1\n$11.75\n\n\n4618\n1\n$11.75\n\n\n4619\n1\n$11.25\n\n\n4620\n1\n$8.75\n\n\n4621\n1\n$8.75\n\n\n\n\n4622 rows × 2 columns"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-24",
    "href": "BigData_Analysis/Type1.html#question-24",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 24",
    "text": "Question 24\nitem_price 컬럼의 달러표시 문자를 제거하고 float 타입으로 저장하여 new_price 컬럼에 저장하라\n\ndf['new_price'] = df['item_price'].str.replace('$', '').astype('float')\nAns = df['new_price']\nAns\n\n0        2.39\n1        3.39\n2        3.39\n3        2.39\n4       16.98\n        ...  \n4617    11.75\n4618    11.75\n4619    11.25\n4620     8.75\n4621     8.75\nName: new_price, Length: 4622, dtype: float64"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-25",
    "href": "BigData_Analysis/Type1.html#question-25",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 25",
    "text": "Question 25\nnew_price 컬럼이 5이하의 값을 가지는 데이터프레임을 추출하고, 전체 갯수를 구하여라\n\nAns = len(df[df['new_price'] &lt;= 5])\nAns\n\n1652"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-26",
    "href": "BigData_Analysis/Type1.html#question-26",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 26",
    "text": "Question 26\nitem_name명이 Chicken Salad Bowl 인 데이터 프레임을 추출하고, index 값을 초기화해라\n\nAns = df[df['item_name'] == 'Chicken Salad Bowl'].reset_index(drop = True)\nAns\n\n\n\n\n\n\n\n\norder_id\nquantity\nitem_name\nchoice_description\nitem_price\nnew_price\n\n\n\n\n0\n20\n1\nChicken Salad Bowl\n[Fresh Tomato Salsa, [Fajita Vegetables, Pinto...\n$8.75\n8.75\n\n\n1\n60\n2\nChicken Salad Bowl\n[Tomatillo Green Chili Salsa, [Sour Cream, Che...\n$22.50\n22.50\n\n\n2\n94\n2\nChicken Salad Bowl\n[Fresh Tomato Salsa, [Fajita Vegetables, Pinto...\n$22.50\n22.50\n\n\n3\n111\n1\nChicken Salad Bowl\n[Fresh Tomato Salsa, [Fajita Vegetables, Rice,...\n$8.75\n8.75\n\n\n4\n137\n2\nChicken Salad Bowl\n[Fresh Tomato Salsa, Fajita Vegetables]\n$17.50\n17.50\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n105\n1813\n2\nChicken Salad Bowl\n[Fresh Tomato Salsa, [Fajita Vegetables, Pinto...\n$17.50\n17.50\n\n\n106\n1822\n1\nChicken Salad Bowl\n[Fresh Tomato Salsa, [Black Beans, Cheese, Gua...\n$11.25\n11.25\n\n\n107\n1834\n1\nChicken Salad Bowl\n[Fresh Tomato Salsa, [Fajita Vegetables, Pinto...\n$11.25\n11.25\n\n\n108\n1834\n1\nChicken Salad Bowl\n[Fresh Tomato Salsa, [Fajita Vegetables, Lettu...\n$8.75\n8.75\n\n\n109\n1834\n1\nChicken Salad Bowl\n[Fresh Tomato Salsa, [Fajita Vegetables, Pinto...\n$8.75\n8.75\n\n\n\n\n110 rows × 6 columns"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-27",
    "href": "BigData_Analysis/Type1.html#question-27",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 27",
    "text": "Question 27\nnew_price값이 9 이하이고 item_name 값이 Chicken Salad Bowl 인 데이터 프레임을 추출하라\n\nAns = df[(df['new_price'] &lt;= 9) & (df['item_name'] == 'Chicken Salad Bowl')]\nAns\n\n\n\n\n\n\n\n\norder_id\nquantity\nitem_name\nchoice_description\nitem_price\nnew_price\n\n\n\n\n44\n20\n1\nChicken Salad Bowl\n[Fresh Tomato Salsa, [Fajita Vegetables, Pinto...\n$8.75\n8.75\n\n\n256\n111\n1\nChicken Salad Bowl\n[Fresh Tomato Salsa, [Fajita Vegetables, Rice,...\n$8.75\n8.75\n\n\n526\n220\n1\nChicken Salad Bowl\n[Roasted Chili Corn Salsa, [Black Beans, Sour ...\n$8.75\n8.75\n\n\n528\n221\n1\nChicken Salad Bowl\n[Tomatillo Green Chili Salsa, [Fajita Vegetabl...\n$8.75\n8.75\n\n\n529\n221\n1\nChicken Salad Bowl\n[Tomatillo Green Chili Salsa, [Fajita Vegetabl...\n$8.75\n8.75\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n4352\n1738\n1\nChicken Salad Bowl\n[Tomatillo Red Chili Salsa, [Rice, Fajita Vege...\n$8.75\n8.75\n\n\n4439\n1769\n1\nChicken Salad Bowl\n[Fresh Tomato Salsa, [Rice, Black Beans, Chees...\n$8.75\n8.75\n\n\n4520\n1797\n1\nChicken Salad Bowl\n[Fresh Tomato Salsa, Lettuce]\n$8.75\n8.75\n\n\n4620\n1834\n1\nChicken Salad Bowl\n[Fresh Tomato Salsa, [Fajita Vegetables, Lettu...\n$8.75\n8.75\n\n\n4621\n1834\n1\nChicken Salad Bowl\n[Fresh Tomato Salsa, [Fajita Vegetables, Pinto...\n$8.75\n8.75\n\n\n\n\n56 rows × 6 columns"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-28",
    "href": "BigData_Analysis/Type1.html#question-28",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 28",
    "text": "Question 28\ndf의 new_price 컬럼 값에 따라 오름차순으로 정리하고 index를 초기화 하여라\n\nAns = df.sort_values(by = 'new_price').reset_index(drop = True)\nAns\n\n\n\n\n\n\n\n\norder_id\nquantity\nitem_name\nchoice_description\nitem_price\nnew_price\n\n\n\n\n0\n471\n1\nBottled Water\nNaN\n$1.09\n1.09\n\n\n1\n338\n1\nCanned Soda\n[Coca Cola]\n$1.09\n1.09\n\n\n2\n1575\n1\nCanned Soda\n[Dr. Pepper]\n$1.09\n1.09\n\n\n3\n47\n1\nCanned Soda\n[Dr. Pepper]\n$1.09\n1.09\n\n\n4\n1014\n1\nCanned Soda\n[Coca Cola]\n$1.09\n1.09\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n4617\n1443\n3\nVeggie Burrito\n[Fresh Tomato Salsa, [Fajita Vegetables, Rice,...\n$33.75\n33.75\n\n\n4618\n1443\n4\nChicken Burrito\n[Fresh Tomato Salsa, [Rice, Black Beans, Chees...\n$35.00\n35.00\n\n\n4619\n511\n4\nChicken Burrito\n[Fresh Tomato Salsa, [Fajita Vegetables, Rice,...\n$35.00\n35.00\n\n\n4620\n1398\n3\nCarnitas Bowl\n[Roasted Chili Corn Salsa, [Fajita Vegetables,...\n$35.25\n35.25\n\n\n4621\n1443\n15\nChips and Fresh Tomato Salsa\nNaN\n$44.25\n44.25\n\n\n\n\n4622 rows × 6 columns"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-29",
    "href": "BigData_Analysis/Type1.html#question-29",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 29",
    "text": "Question 29\ndf의 item_name 컬럼 값중 Chips 포함하는 경우의 데이터를 출력하라\n\nAns = df[df['item_name'].str.contains('Chips')]\nAns\n\n\n\n\n\n\n\n\norder_id\nquantity\nitem_name\nchoice_description\nitem_price\nnew_price\n\n\n\n\n0\n1\n1\nChips and Fresh Tomato Salsa\nNaN\n$2.39\n2.39\n\n\n3\n1\n1\nChips and Tomatillo-Green Chili Salsa\nNaN\n$2.39\n2.39\n\n\n6\n3\n1\nSide of Chips\nNaN\n$1.69\n1.69\n\n\n10\n5\n1\nChips and Guacamole\nNaN\n$4.45\n4.45\n\n\n14\n7\n1\nChips and Guacamole\nNaN\n$4.45\n4.45\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n4596\n1826\n1\nChips and Guacamole\nNaN\n$4.45\n4.45\n\n\n4600\n1827\n1\nChips and Guacamole\nNaN\n$4.45\n4.45\n\n\n4605\n1828\n1\nChips and Guacamole\nNaN\n$4.45\n4.45\n\n\n4613\n1831\n1\nChips\nNaN\n$2.15\n2.15\n\n\n4616\n1832\n1\nChips and Guacamole\nNaN\n$4.45\n4.45\n\n\n\n\n1084 rows × 6 columns"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-30",
    "href": "BigData_Analysis/Type1.html#question-30",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 30",
    "text": "Question 30\ndf의 짝수번째 컬럼만을 포함하는 데이터프레임을 출력하라\n\nAns = df.iloc[:, 0::2]\nAns\n\n\n\n\n\n\n\n\norder_id\nitem_name\nitem_price\n\n\n\n\n0\n1\nChips and Fresh Tomato Salsa\n$2.39\n\n\n1\n1\nIzze\n$3.39\n\n\n2\n1\nNantucket Nectar\n$3.39\n\n\n3\n1\nChips and Tomatillo-Green Chili Salsa\n$2.39\n\n\n4\n2\nChicken Bowl\n$16.98\n\n\n...\n...\n...\n...\n\n\n4617\n1833\nSteak Burrito\n$11.75\n\n\n4618\n1833\nSteak Burrito\n$11.75\n\n\n4619\n1834\nChicken Salad Bowl\n$11.25\n\n\n4620\n1834\nChicken Salad Bowl\n$8.75\n\n\n4621\n1834\nChicken Salad Bowl\n$8.75\n\n\n\n\n4622 rows × 3 columns"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-31",
    "href": "BigData_Analysis/Type1.html#question-31",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 31",
    "text": "Question 31\ndf의 new_price 컬럼 값에 따라 내림차순으로 정리하고 index를 초기화 하여라\n\nAns = df.sort_values(by = 'new_price', ascending = False).reset_index(drop = True)\nAns\n\n\n\n\n\n\n\n\norder_id\nquantity\nitem_name\nchoice_description\nitem_price\nnew_price\n\n\n\n\n0\n1443\n15\nChips and Fresh Tomato Salsa\nNaN\n$44.25\n44.25\n\n\n1\n1398\n3\nCarnitas Bowl\n[Roasted Chili Corn Salsa, [Fajita Vegetables,...\n$35.25\n35.25\n\n\n2\n511\n4\nChicken Burrito\n[Fresh Tomato Salsa, [Fajita Vegetables, Rice,...\n$35.00\n35.00\n\n\n3\n1443\n4\nChicken Burrito\n[Fresh Tomato Salsa, [Rice, Black Beans, Chees...\n$35.00\n35.00\n\n\n4\n1443\n3\nVeggie Burrito\n[Fresh Tomato Salsa, [Fajita Vegetables, Rice,...\n$33.75\n33.75\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n4617\n1578\n1\nCanned Soda\n[Diet Dr. Pepper]\n$1.09\n1.09\n\n\n4618\n1162\n1\nBottled Water\nNaN\n$1.09\n1.09\n\n\n4619\n567\n1\nCanned Soda\n[Coca Cola]\n$1.09\n1.09\n\n\n4620\n1014\n1\nCanned Soda\n[Coca Cola]\n$1.09\n1.09\n\n\n4621\n591\n1\nCanned Soda\n[Sprite]\n$1.09\n1.09\n\n\n\n\n4622 rows × 6 columns"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-32",
    "href": "BigData_Analysis/Type1.html#question-32",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 32",
    "text": "Question 32\ndf의 item_name 컬럼 값이 Steak Salad 또는 Bowl 인 데이터를 인덱싱하라\n\nAns = df[(df['item_name'] == 'Steak Salad') | (df['item_name'] == 'Bowl')]\nAns\n\n\n\n\n\n\n\n\norder_id\nquantity\nitem_name\nchoice_description\nitem_price\nnew_price\n\n\n\n\n445\n193\n3\nBowl\n[Braised Carnitas, Pinto Beans, [Sour Cream, C...\n$22.20\n22.20\n\n\n664\n276\n1\nSteak Salad\n[Tomatillo-Red Chili Salsa (Hot), [Black Beans...\n$8.99\n8.99\n\n\n673\n279\n1\nBowl\n[Adobo-Marinated and Grilled Steak, [Sour Crea...\n$7.40\n7.40\n\n\n752\n311\n1\nSteak Salad\n[Tomatillo-Red Chili Salsa (Hot), [Black Beans...\n$8.99\n8.99\n\n\n893\n369\n1\nSteak Salad\n[Fresh Tomato Salsa (Mild), [Rice, Cheese, Sou...\n$8.99\n8.99\n\n\n3502\n1406\n1\nSteak Salad\n[[Lettuce, Fajita Veggies]]\n$8.69\n8.69"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-33",
    "href": "BigData_Analysis/Type1.html#question-33",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 33",
    "text": "Question 33\ndf의 item_name 컬럼 값이 Steak Salad 또는 Bowl 인 데이터를 데이터 프레임화 한 후, item_name를 기준으로 중복행이 있으면 제거하되 첫번째 케이스만 남겨라\n\ndf_new = df[df['item_name'].isin(['Steak Salad', 'Bowl'])]\nAns = df_new.drop_duplicates(subset = 'item_name', keep = 'first')\nAns\n\n\n\n\n\n\n\n\norder_id\nquantity\nitem_name\nchoice_description\nitem_price\nnew_price\n\n\n\n\n445\n193\n3\nBowl\n[Braised Carnitas, Pinto Beans, [Sour Cream, C...\n$22.20\n22.20\n\n\n664\n276\n1\nSteak Salad\n[Tomatillo-Red Chili Salsa (Hot), [Black Beans...\n$8.99\n8.99"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-34",
    "href": "BigData_Analysis/Type1.html#question-34",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 34",
    "text": "Question 34\ndf의 item_name 컬럼 값이 Steak Salad 또는 Bowl 인 데이터를 데이터 프레임화 한 후, item_name를 기준으로 중복행이 있으면 제거하되 마지막 케이스만 남겨라\n\ndf_new = df[df['item_name'].isin(['Steak Salad', 'Bowl'])]\nAns = df_new.drop_duplicates(subset = 'item_name', keep = 'last')\nAns\n\n\n\n\n\n\n\n\norder_id\nquantity\nitem_name\nchoice_description\nitem_price\nnew_price\n\n\n\n\n673\n279\n1\nBowl\n[Adobo-Marinated and Grilled Steak, [Sour Crea...\n$7.40\n7.40\n\n\n3502\n1406\n1\nSteak Salad\n[[Lettuce, Fajita Veggies]]\n$8.69\n8.69"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-35",
    "href": "BigData_Analysis/Type1.html#question-35",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 35",
    "text": "Question 35\ndf의 데이터 중 new_price값이 new_price값의 평균값 이상을 가지는 데이터들을 인덱싱하라\n\nAns = df[df['new_price'] &gt;= df['new_price'].mean()]\nAns\n\n\n\n\n\n\n\n\norder_id\nquantity\nitem_name\nchoice_description\nitem_price\nnew_price\n\n\n\n\n4\n2\n2\nChicken Bowl\n[Tomatillo-Red Chili Salsa (Hot), [Black Beans...\n$16.98\n16.98\n\n\n5\n3\n1\nChicken Bowl\n[Fresh Tomato Salsa (Mild), [Rice, Cheese, Sou...\n$10.98\n10.98\n\n\n7\n4\n1\nSteak Burrito\n[Tomatillo Red Chili Salsa, [Fajita Vegetables...\n$11.75\n11.75\n\n\n8\n4\n1\nSteak Soft Tacos\n[Tomatillo Green Chili Salsa, [Pinto Beans, Ch...\n$9.25\n9.25\n\n\n9\n5\n1\nSteak Burrito\n[Fresh Tomato Salsa, [Rice, Black Beans, Pinto...\n$9.25\n9.25\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n4617\n1833\n1\nSteak Burrito\n[Fresh Tomato Salsa, [Rice, Black Beans, Sour ...\n$11.75\n11.75\n\n\n4618\n1833\n1\nSteak Burrito\n[Fresh Tomato Salsa, [Rice, Sour Cream, Cheese...\n$11.75\n11.75\n\n\n4619\n1834\n1\nChicken Salad Bowl\n[Fresh Tomato Salsa, [Fajita Vegetables, Pinto...\n$11.25\n11.25\n\n\n4620\n1834\n1\nChicken Salad Bowl\n[Fresh Tomato Salsa, [Fajita Vegetables, Lettu...\n$8.75\n8.75\n\n\n4621\n1834\n1\nChicken Salad Bowl\n[Fresh Tomato Salsa, [Fajita Vegetables, Pinto...\n$8.75\n8.75\n\n\n\n\n2890 rows × 6 columns"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-36",
    "href": "BigData_Analysis/Type1.html#question-36",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 36",
    "text": "Question 36\ndf의 데이터 중 item_name의 값이 Izze 데이터를 Fizzy Lizzy로 수정하라\n\ndf.loc[df['item_name'] == 'Izze', 'item_name'] = 'Fizzy Lizzy'\nAns = df[df['item_name'] == 'Fizzy Lizzy']\nAns\n\n\n\n\n\n\n\n\norder_id\nquantity\nitem_name\nchoice_description\nitem_price\nnew_price\n\n\n\n\n1\n1\n1\nFizzy Lizzy\n[Clementine]\n$3.39\n3.39\n\n\n24\n12\n1\nFizzy Lizzy\n[Grapefruit]\n$3.39\n3.39\n\n\n47\n21\n1\nFizzy Lizzy\n[Blackberry]\n$3.39\n3.39\n\n\n66\n30\n1\nFizzy Lizzy\n[Blackberry]\n$3.39\n3.39\n\n\n359\n155\n1\nFizzy Lizzy\n[Blackberry]\n$3.39\n3.39\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n2619\n1040\n1\nFizzy Lizzy\n[Clementine]\n$3.39\n3.39\n\n\n2634\n1046\n1\nFizzy Lizzy\n[Clementine]\n$3.39\n3.39\n\n\n2758\n1095\n1\nFizzy Lizzy\n[Blackberry]\n$3.39\n3.39\n\n\n2891\n1149\n1\nFizzy Lizzy\n[Blackberry]\n$3.39\n3.39\n\n\n3669\n1468\n1\nFizzy Lizzy\n[Blackberry]\n$3.39\n3.39\n\n\n\n\n20 rows × 6 columns"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-37",
    "href": "BigData_Analysis/Type1.html#question-37",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 37",
    "text": "Question 37\ndf의 데이터 중 choice_description 값이 NaN 인 데이터의 갯수를 구하여라\n\nAns = len(df[df['choice_description'].isnull()])\nAns\n\n1246"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-38",
    "href": "BigData_Analysis/Type1.html#question-38",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 38",
    "text": "Question 38\ndf의 데이터 중 choice_description 값이 NaN 인 데이터를 NoData 값으로 대체하라(loc 이용)\n\ndf.loc[df['choice_description'].isnull(), 'choice_description'] = 'NoData'\nAns = len(df[df['choice_description'] == 'NoData'])\nAns\n\n1246"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-39",
    "href": "BigData_Analysis/Type1.html#question-39",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 39",
    "text": "Question 39\ndf의 데이터 중 choice_description 값에 Black이 들어가는 경우를 인덱싱하라\n\nAns = df[df['choice_description'].str.contains('Black')]\nAns\n\n\n\n\n\n\n\n\norder_id\nquantity\nitem_name\nchoice_description\nitem_price\nnew_price\n\n\n\n\n4\n2\n2\nChicken Bowl\n[Tomatillo-Red Chili Salsa (Hot), [Black Beans...\n$16.98\n16.98\n\n\n7\n4\n1\nSteak Burrito\n[Tomatillo Red Chili Salsa, [Fajita Vegetables...\n$11.75\n11.75\n\n\n9\n5\n1\nSteak Burrito\n[Fresh Tomato Salsa, [Rice, Black Beans, Pinto...\n$9.25\n9.25\n\n\n11\n6\n1\nChicken Crispy Tacos\n[Roasted Chili Corn Salsa, [Fajita Vegetables,...\n$8.75\n8.75\n\n\n12\n6\n1\nChicken Soft Tacos\n[Roasted Chili Corn Salsa, [Rice, Black Beans,...\n$8.75\n8.75\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n4604\n1828\n1\nChicken Bowl\n[Fresh Tomato Salsa, [Rice, Black Beans, Chees...\n$8.75\n8.75\n\n\n4608\n1829\n1\nVeggie Burrito\n[Tomatillo Red Chili Salsa, [Fajita Vegetables...\n$11.25\n11.25\n\n\n4611\n1830\n1\nVeggie Burrito\n[Tomatillo Green Chili Salsa, [Rice, Fajita Ve...\n$11.25\n11.25\n\n\n4612\n1831\n1\nCarnitas Bowl\n[Fresh Tomato Salsa, [Fajita Vegetables, Rice,...\n$9.25\n9.25\n\n\n4617\n1833\n1\nSteak Burrito\n[Fresh Tomato Salsa, [Rice, Black Beans, Sour ...\n$11.75\n11.75\n\n\n\n\n1353 rows × 6 columns"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-40",
    "href": "BigData_Analysis/Type1.html#question-40",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 40",
    "text": "Question 40\ndf의 데이터 중 choice_description 값에 Vegetables 들어가지 않는 경우의 갯수를 출력하라\n\nAns = len(df[~df['choice_description'].str.contains('Vegetables')])\nAns\n\n3900"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-41",
    "href": "BigData_Analysis/Type1.html#question-41",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 41",
    "text": "Question 41\ndf의 데이터 중 item_name 값이 N으로 시작하는 데이터를 모두 추출하라\n\nAns = df[df['item_name'].str.startswith('N')]\nAns\n\n\n\n\n\n\n\n\norder_id\nquantity\nitem_name\nchoice_description\nitem_price\nnew_price\n\n\n\n\n2\n1\n1\nNantucket Nectar\n[Apple]\n$3.39\n3.39\n\n\n22\n11\n1\nNantucket Nectar\n[Pomegranate Cherry]\n$3.39\n3.39\n\n\n105\n46\n1\nNantucket Nectar\n[Pineapple Orange Banana]\n$3.39\n3.39\n\n\n173\n77\n1\nNantucket Nectar\n[Apple]\n$3.39\n3.39\n\n\n205\n91\n1\nNantucket Nectar\n[Peach Orange]\n$3.39\n3.39\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n3368\n1351\n1\nNantucket Nectar\n[Pineapple Orange Banana]\n$3.39\n3.39\n\n\n3570\n1433\n1\nNantucket Nectar\n[Pineapple Orange Banana]\n$3.39\n3.39\n\n\n3845\n1541\n1\nNantucket Nectar\n[Peach Orange]\n$3.39\n3.39\n\n\n4019\n1609\n1\nNantucket Nectar\n[Pineapple Orange Banana]\n$3.39\n3.39\n\n\n4078\n1632\n1\nNantucket Nectar\n[Peach Orange]\n$3.39\n3.39\n\n\n\n\n27 rows × 6 columns"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-42",
    "href": "BigData_Analysis/Type1.html#question-42",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 42",
    "text": "Question 42\ndf의 데이터 중 item_name 값의 단어갯수가 15개 이상인 데이터를 인덱싱하라\n\nAns = df[df['item_name'].str.len() &gt;= 15]\nAns\n\n\n\n\n\n\n\n\norder_id\nquantity\nitem_name\nchoice_description\nitem_price\nnew_price\n\n\n\n\n0\n1\n1\nChips and Fresh Tomato Salsa\nNoData\n$2.39\n2.39\n\n\n2\n1\n1\nNantucket Nectar\n[Apple]\n$3.39\n3.39\n\n\n3\n1\n1\nChips and Tomatillo-Green Chili Salsa\nNoData\n$2.39\n2.39\n\n\n8\n4\n1\nSteak Soft Tacos\n[Tomatillo Green Chili Salsa, [Pinto Beans, Ch...\n$9.25\n9.25\n\n\n10\n5\n1\nChips and Guacamole\nNoData\n$4.45\n4.45\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n4615\n1832\n1\nChicken Soft Tacos\n[Fresh Tomato Salsa, [Rice, Cheese, Sour Cream]]\n$8.75\n8.75\n\n\n4616\n1832\n1\nChips and Guacamole\nNoData\n$4.45\n4.45\n\n\n4619\n1834\n1\nChicken Salad Bowl\n[Fresh Tomato Salsa, [Fajita Vegetables, Pinto...\n$11.25\n11.25\n\n\n4620\n1834\n1\nChicken Salad Bowl\n[Fresh Tomato Salsa, [Fajita Vegetables, Lettu...\n$8.75\n8.75\n\n\n4621\n1834\n1\nChicken Salad Bowl\n[Fresh Tomato Salsa, [Fajita Vegetables, Pinto...\n$8.75\n8.75\n\n\n\n\n2373 rows × 6 columns"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-43",
    "href": "BigData_Analysis/Type1.html#question-43",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 43",
    "text": "Question 43\ndf의 데이터 중 new_price값이 lst에 해당하는 경우의 데이터 프레임을 구하고 그 갯수를 출력하라\nlst = [1.69, 2.39, 3.39, 4.45, 9.25, 10.98, 11.75, 16.98]\n\nlst = [1.69, 2.39, 3.39, 4.45, 9.25, 10.98, 11.75, 16.98]\nAns = len(df[df['new_price'].isin(lst)])\nAns\n\n1393"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-44",
    "href": "BigData_Analysis/Type1.html#question-44",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 44",
    "text": "Question 44\n\nData\n\n뉴욕 AirBnB : https://www.kaggle.com/ptoscano230382/air-bnb-ny-2019\nDataURL = ‘https://raw.githubusercontent.com/Datamanim/pandas/main/AB_NYC_2019.csv’\n\n\n데이터를 로드하고 상위 5개 컬럼을 출력하라\n\ndf = pd.read_csv('https://raw.githubusercontent.com/Datamanim/pandas/main/AB_NYC_2019.csv')\nAns = df.head()\nAns\n\n\n\n\n\n\n\n\nid\nname\nhost_id\nhost_name\nneighbourhood_group\n...\nnumber_of_reviews\nlast_review\nreviews_per_month\ncalculated_host_listings_count\navailability_365\n\n\n\n\n0\n2539\nClean & quiet apt home by the park\n2787\nJohn\nBrooklyn\n...\n9\n2018-10-19\n0.21\n6\n365\n\n\n1\n2595\nSkylit Midtown Castle\n2845\nJennifer\nManhattan\n...\n45\n2019-05-21\n0.38\n2\n355\n\n\n2\n3647\nTHE VILLAGE OF HARLEM....NEW YORK !\n4632\nElisabeth\nManhattan\n...\n0\nNaN\nNaN\n1\n365\n\n\n3\n3831\nCozy Entire Floor of Brownstone\n4869\nLisaRoxanne\nBrooklyn\n...\n270\n2019-07-05\n4.64\n1\n194\n\n\n4\n5022\nEntire Apt: Spacious Studio/Loft by central park\n7192\nLaura\nManhattan\n...\n9\n2018-11-19\n0.10\n1\n0\n\n\n\n\n5 rows × 16 columns"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-45",
    "href": "BigData_Analysis/Type1.html#question-45",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 45",
    "text": "Question 45\n데이터의 각 host_name의 빈도수를 구하고 host_name으로 정렬하여 상위 5개를 출력하라\n\n# Ans = df['host_name'].value_counts().sort_index()\nAns = df.groupby('host_name', as_index = False).size().head()\nAns\n\n\n\n\n\n\n\n\nhost_name\nsize\n\n\n\n\n0\n'Cil\n1\n\n\n1\n(Ari) HENRY LEE\n1\n\n\n2\n(Email hidden by Airbnb)\n6\n\n\n3\n(Mary) Haiy\n1\n\n\n4\n-TheQueensCornerLot\n1"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-46",
    "href": "BigData_Analysis/Type1.html#question-46",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 46",
    "text": "Question 46\n데이터의 각 host_name의 빈도수를 구하고 빈도수 기준 내림차순 정렬한 데이터 프레임을 만들어라. 빈도수 컬럼은 counts로 명명하라\n\nAns = df.groupby('host_name', as_index = False).size().sort_values(by = 'size', ascending = False).rename(columns = {'size' : 'counts'})\nAns\n\n\n\n\n\n\n\n\nhost_name\ncounts\n\n\n\n\n7135\nMichael\n417\n\n\n2376\nDavid\n403\n\n\n9781\nSonder (NYC)\n327\n\n\n4989\nJohn\n294\n\n\n314\nAlex\n279\n\n\n...\n...\n...\n\n\n4804\nJerbean\n1\n\n\n4803\nJerald\n1\n\n\n4802\nJeonghoon\n1\n\n\n4800\nJeny\n1\n\n\n11451\n현선\n1\n\n\n\n\n11452 rows × 2 columns"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-47",
    "href": "BigData_Analysis/Type1.html#question-47",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 47",
    "text": "Question 47\nneighbourhood_group의 값에 따른 neighbourhood컬럼 값의 갯수를 구하여라\n\nAns = df.groupby(['neighbourhood_group', 'neighbourhood'], as_index = False).size()\nAns\n\n\n\n\n\n\n\n\nneighbourhood_group\nneighbourhood\nsize\n\n\n\n\n0\nBronx\nAllerton\n42\n\n\n1\nBronx\nBaychester\n7\n\n\n2\nBronx\nBelmont\n24\n\n\n3\nBronx\nBronxdale\n19\n\n\n4\nBronx\nCastle Hill\n9\n\n\n...\n...\n...\n...\n\n\n216\nStaten Island\nTottenville\n7\n\n\n217\nStaten Island\nWest Brighton\n18\n\n\n218\nStaten Island\nWesterleigh\n2\n\n\n219\nStaten Island\nWillowbrook\n1\n\n\n220\nStaten Island\nWoodrow\n1\n\n\n\n\n221 rows × 3 columns"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-48",
    "href": "BigData_Analysis/Type1.html#question-48",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 48",
    "text": "Question 48\nneighbourhood_group의 값에 따른 neighbourhood컬럼 값 중 neighbourhood_group그룹의 최댓값들을 출력하라\n\nAns = df.groupby(['neighbourhood_group', 'neighbourhood'], as_index = False).size().groupby('neighbourhood_group', as_index = False).max()\nAns\n\n\n\n\n\n\n\n\nneighbourhood_group\nneighbourhood\nsize\n\n\n\n\n0\nBronx\nWoodlawn\n70\n\n\n1\nBrooklyn\nWindsor Terrace\n3920\n\n\n2\nManhattan\nWest Village\n2658\n\n\n3\nQueens\nWoodside\n900\n\n\n4\nStaten Island\nWoodrow\n48"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-49",
    "href": "BigData_Analysis/Type1.html#question-49",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 49",
    "text": "Question 49\nneighbourhood_group 값에 따른 price값의 평균, 분산, 최대, 최소 값을 구하여라\n\nAns = df.groupby('neighbourhood_group', as_index = False)['price'].agg(['mean', 'std', 'min', 'max'])\nAns\n\n\n\n\n\n\n\n\nneighbourhood_group\nmean\nstd\nmin\nmax\n\n\n\n\n0\nBronx\n87.496792\n106.709349\n0\n2500\n\n\n1\nBrooklyn\n124.383207\n186.873538\n0\n10000\n\n\n2\nManhattan\n196.875814\n291.383183\n0\n10000\n\n\n3\nQueens\n99.517649\n167.102155\n10\n10000\n\n\n4\nStaten Island\n114.812332\n277.620403\n13\n5000"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-50",
    "href": "BigData_Analysis/Type1.html#question-50",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 50",
    "text": "Question 50\nneighbourhood_group 값에 따른 reviews_per_month 평균, 분산, 최대, 최소 값을 구하여라\n\nAns = df.groupby('neighbourhood_group', as_index = False)['reviews_per_month'].agg(['mean', 'std', 'min', 'max'])\nAns\n\n\n\n\n\n\n\n\nneighbourhood_group\nmean\nstd\nmin\nmax\n\n\n\n\n0\nBronx\n1.837831\n1.673284\n0.02\n10.34\n\n\n1\nBrooklyn\n1.283212\n1.516259\n0.01\n14.00\n\n\n2\nManhattan\n1.272131\n1.628252\n0.01\n58.50\n\n\n3\nQueens\n1.941200\n2.213108\n0.01\n20.94\n\n\n4\nStaten Island\n1.872580\n1.685495\n0.02\n10.12"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-51",
    "href": "BigData_Analysis/Type1.html#question-51",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 51",
    "text": "Question 51\nneighbourhood 값과 neighbourhood_group 값에 따른 price의 평균을 구하라\n\nAns = df.groupby(['neighbourhood', 'neighbourhood_group'], as_index = False)['price'].agg(['mean'])\nAns\n\n\n\n\n\n\n\n\nneighbourhood\nneighbourhood_group\nmean\n\n\n\n\n0\nAllerton\nBronx\n87.595238\n\n\n1\nArden Heights\nStaten Island\n67.250000\n\n\n2\nArrochar\nStaten Island\n115.000000\n\n\n3\nArverne\nQueens\n171.779221\n\n\n4\nAstoria\nQueens\n117.187778\n\n\n...\n...\n...\n...\n\n\n216\nWindsor Terrace\nBrooklyn\n138.993631\n\n\n217\nWoodhaven\nQueens\n67.170455\n\n\n218\nWoodlawn\nBronx\n60.090909\n\n\n219\nWoodrow\nStaten Island\n700.000000\n\n\n220\nWoodside\nQueens\n85.097872\n\n\n\n\n221 rows × 3 columns"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-52",
    "href": "BigData_Analysis/Type1.html#question-52",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 52",
    "text": "Question 52\nneighbourhood 값과 neighbourhood_group 값에 따른 price 의 평균을 계층적 indexing 없이 구하라\n\nAns = df.groupby(['neighbourhood', 'neighbourhood_group'])['price'].mean().unstack()\nAns\n\n\n\n\n\n\n\nneighbourhood_group\nBronx\nBrooklyn\nManhattan\nQueens\nStaten Island\n\n\nneighbourhood\n\n\n\n\n\n\n\n\n\nAllerton\n87.595238\nNaN\nNaN\nNaN\nNaN\n\n\nArden Heights\nNaN\nNaN\nNaN\nNaN\n67.25\n\n\nArrochar\nNaN\nNaN\nNaN\nNaN\n115.00\n\n\nArverne\nNaN\nNaN\nNaN\n171.779221\nNaN\n\n\nAstoria\nNaN\nNaN\nNaN\n117.187778\nNaN\n\n\n...\n...\n...\n...\n...\n...\n\n\nWindsor Terrace\nNaN\n138.993631\nNaN\nNaN\nNaN\n\n\nWoodhaven\nNaN\nNaN\nNaN\n67.170455\nNaN\n\n\nWoodlawn\n60.090909\nNaN\nNaN\nNaN\nNaN\n\n\nWoodrow\nNaN\nNaN\nNaN\nNaN\n700.00\n\n\nWoodside\nNaN\nNaN\nNaN\n85.097872\nNaN\n\n\n\n\n221 rows × 5 columns"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-53",
    "href": "BigData_Analysis/Type1.html#question-53",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 53",
    "text": "Question 53\nneighbourhood 값과 neighbourhood_group 값에 따른 price 의 평균을 계층적 indexing 없이 구하고 nan 값은 -999값으로 채워라\n\nAns = df.groupby(['neighbourhood', 'neighbourhood_group'])['price'].mean().unstack().fillna(-999)\nAns\n\n\n\n\n\n\n\nneighbourhood_group\nBronx\nBrooklyn\nManhattan\nQueens\nStaten Island\n\n\nneighbourhood\n\n\n\n\n\n\n\n\n\nAllerton\n87.595238\n-999.000000\n-999.0\n-999.000000\n-999.00\n\n\nArden Heights\n-999.000000\n-999.000000\n-999.0\n-999.000000\n67.25\n\n\nArrochar\n-999.000000\n-999.000000\n-999.0\n-999.000000\n115.00\n\n\nArverne\n-999.000000\n-999.000000\n-999.0\n171.779221\n-999.00\n\n\nAstoria\n-999.000000\n-999.000000\n-999.0\n117.187778\n-999.00\n\n\n...\n...\n...\n...\n...\n...\n\n\nWindsor Terrace\n-999.000000\n138.993631\n-999.0\n-999.000000\n-999.00\n\n\nWoodhaven\n-999.000000\n-999.000000\n-999.0\n67.170455\n-999.00\n\n\nWoodlawn\n60.090909\n-999.000000\n-999.0\n-999.000000\n-999.00\n\n\nWoodrow\n-999.000000\n-999.000000\n-999.0\n-999.000000\n700.00\n\n\nWoodside\n-999.000000\n-999.000000\n-999.0\n85.097872\n-999.00\n\n\n\n\n221 rows × 5 columns"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-54",
    "href": "BigData_Analysis/Type1.html#question-54",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 54",
    "text": "Question 54\n데이터중 neighbourhood_group 값이 Queens값을 가지는 데이터들 중 neighbourhood 그룹별로 price값의 평균, 분산, 최대, 최소값을 구하라\n\nAns = df[df['neighbourhood_group'] == 'Queens'].groupby('neighbourhood', as_index = False)['price'].agg(['mean', 'std', 'min', 'max'])\nAns\n\n\n\n\n\n\n\n\nneighbourhood\nmean\nstd\nmin\nmax\n\n\n\n\n0\nArverne\n171.779221\n193.347902\n35\n1500\n\n\n1\nAstoria\n117.187778\n349.898287\n25\n10000\n\n\n2\nBay Terrace\n142.000000\n82.561492\n32\n258\n\n\n3\nBayside\n157.948718\n407.561616\n30\n2600\n\n\n4\nBayswater\n87.470588\n48.279289\n45\n230\n\n\n...\n...\n...\n...\n...\n...\n\n\n46\nSt. Albans\n100.828947\n97.416137\n25\n600\n\n\n47\nSunnyside\n84.865014\n52.227837\n12\n600\n\n\n48\nWhitestone\n107.545455\n116.756468\n35\n400\n\n\n49\nWoodhaven\n67.170455\n40.527335\n10\n250\n\n\n50\nWoodside\n85.097872\n70.724116\n28\n500\n\n\n\n\n51 rows × 5 columns"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-55",
    "href": "BigData_Analysis/Type1.html#question-55",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 55",
    "text": "Question 55\n데이터중 neighbourhood_group 값에 따른 room_type 컬럼의 숫자를 구하고 neighbourhood_group 값을 기준으로 각 값의 비율을 구하여라\n\nAns = df.groupby(['neighbourhood_group', 'room_type']).size().unstack()\nAns.loc[:, :] = (Ans.values / Ans.sum(axis = 1).values.reshape(-1, 1))\nAns\n\n\n\n\n\n\n\nroom_type\nEntire home/apt\nPrivate room\nShared room\n\n\nneighbourhood_group\n\n\n\n\n\n\n\nBronx\n0.347388\n0.597617\n0.054995\n\n\nBrooklyn\n0.475478\n0.503979\n0.020543\n\n\nManhattan\n0.609344\n0.368496\n0.022160\n\n\nQueens\n0.369926\n0.595129\n0.034945\n\n\nStaten Island\n0.471850\n0.504021\n0.024129"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-56",
    "href": "BigData_Analysis/Type1.html#question-56",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 56",
    "text": "Question 56\n\nData\n\n카드이용데이터 : https://www.kaggle.com/sakshigoyal7/credit-card-customers\nDataURL = ‘https://raw.githubusercontent.com/Datamanim/pandas/main/BankChurnersUp.csv’\n\n\n데이터를 로드하고 데이터 행과 열의 갯수를 출력하라\n\ndf = pd.read_csv('https://raw.githubusercontent.com/Datamanim/pandas/main/BankChurnersUp.csv', index_col = 0)\ndf.shape\n\n(10127, 18)"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-57",
    "href": "BigData_Analysis/Type1.html#question-57",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 57",
    "text": "Question 57\nIncome_Category의 카테고리를 map 함수를 이용하여 다음과 같이 변경하여 newIncome 컬럼에 매핑하라\n\n\n\nValue\nC\n\n\n\n\nUnknown\nN\n\n\nLess than $40K\nA\n\n\n$40K - $60K\nB\n\n\n$60K - $80K\nC\n\n\n$80K - $120K\nD\n\n\n$120K +\nE\n\n\n\n\ndict = {'Unknown' : 'N', 'Less than $40K' : 'A', '$40K - $60K' : 'B', '$60K - $80K' : 'C', '$80K - $120K' : 'D', '$120K +' : 'E'}\ndf['newIncome'] = df['Income_Category'].map(dict)\nAns = df['newIncome']\nAns\n\n0        C\n1        A\n2        D\n3        A\n4        C\n        ..\n10122    B\n10123    B\n10124    A\n10125    B\n10126    A\nName: newIncome, Length: 10127, dtype: object"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-58",
    "href": "BigData_Analysis/Type1.html#question-58",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 58",
    "text": "Question 58\nIncome_Category의 카테고리를 apply 함수를 이용하여 다음과 같이 변경하여 newIncome 컬럼에 매핑하라\n\n\n\nValue\nC\n\n\n\n\nUnknown\nN\n\n\nLess than $40K\nA\n\n\n$40K - $60K\nB\n\n\n$60K - $80K\nC\n\n\n$80K - $120K\nD\n\n\n$120K +\nE\n\n\n\n\ndef ChangeCategory(x) :\n    if x == 'Unknown' :\n        return 'N'\n    elif x == 'Less than $40K' :\n        return 'A'\n    elif x == '$40K - $60K' :\n        return 'B'\n    elif x == '$60K - $80K' :\n        return 'C'\n    elif x == '$80K - $120K' :\n        return 'D'\n    elif x == '$120K +' :\n        return 'E'\n\ndf['newIncome'] = df['Income_Category'].apply(ChangeCategory)\nAns = df['newIncome']\nAns\n\n0        C\n1        A\n2        D\n3        A\n4        C\n        ..\n10122    B\n10123    B\n10124    A\n10125    B\n10126    A\nName: newIncome, Length: 10127, dtype: object"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-59",
    "href": "BigData_Analysis/Type1.html#question-59",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 59",
    "text": "Question 59\nCustomer_Age의 값을 이용하여 나이 구간을 AgeState 컬럼으로 정의하라. (0~9 : 0 , 10~19 :10 , 20~29 :20 …) 각 구간의 빈도수를 출력하라\n\ndf['AgeState'] = df['Customer_Age'].map(lambda x : x // 10 * 10)\nAns = df['AgeState'].value_counts().sort_index()\nAns\n\nAgeState\n20     195\n30    1841\n40    4561\n50    2998\n60     530\n70       2\nName: count, dtype: int64"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-60",
    "href": "BigData_Analysis/Type1.html#question-60",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 60",
    "text": "Question 60\nEducation_Level의 값중 Graduate단어가 포함되는 값은 1 그렇지 않은 경우에는 0으로 변경하여 newEduLevel 컬럼을 정의하고 빈도수를 출력하라\n\ndf['newEduLevel'] = df['Education_Level'].map(lambda x : 1 if 'Graduate' in x else 0)\nAns = df['newEduLevel'].value_counts()\nAns\n\nnewEduLevel\n0    6483\n1    3644\nName: count, dtype: int64"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-61",
    "href": "BigData_Analysis/Type1.html#question-61",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 61",
    "text": "Question 61\nCredit_Limit 컬럼값이 4500 이상인 경우 1 그외의 경우에는 모두 0으로 하는 newLimit 정의하라. newLimit 각 값들의 빈도수를 출력하라\n\ndf['newLimit'] = df['Credit_Limit'].map(lambda x : 1 if x &gt;= 4500 else 0)\nAns = df['newLimit'].value_counts().sort_index()\nAns\n\nnewLimit\n0    5031\n1    5096\nName: count, dtype: int64"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-62",
    "href": "BigData_Analysis/Type1.html#question-62",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 62",
    "text": "Question 62\nMarital_Status 컬럼값이 Married 이고 Card_Category 컬럼의 값이 Platinum인 경우 1 그외의 경우에는 모두 0으로 하는 newState컬럼을 정의하라. newState의 각 값들의 빈도수를 출력하라\n\ndf['newState'] = df[['Marital_Status', 'Card_Category']].apply(lambda x : 1 if x[0] == 'Married' and x[1] == 'Platinum' else 0, axis = 1)\nAns = df['newState'].value_counts()\nAns\n\nnewState\n0    10120\n1        7\nName: count, dtype: int64"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-63",
    "href": "BigData_Analysis/Type1.html#question-63",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 63",
    "text": "Question 63\nGender 컬럼값 M인 경우 Male, F인 경우 Female로 값을 변경하여 Gender 컬럼에 새롭게 정의하라. 각 value의 빈도를 출력하라\n\ndf['Gender'] = df['Gender'].apply(lambda x : 'Male' if x == 'M' else 'Female')\nAns = df['Gender'].value_counts()\nAns\n\nGender\nFemale    5358\nMale      4769\nName: count, dtype: int64"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-64",
    "href": "BigData_Analysis/Type1.html#question-64",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 64",
    "text": "Question 64\n\nData\n\n주가 데이터 : https://raw.githubusercontent.com/guipsamora/pandas_exercises/master/06_Stats/Wind_Stats/wind.data\nDataURL = ‘https://raw.githubusercontent.com/Datamanim/pandas/main/timeTest.csv’\n\n\n데이터를 로드하고 각 열의 데이터 타입을 파악하라\n\ndf = pd.read_csv('https://raw.githubusercontent.com/Datamanim/pandas/main/timeTest.csv')\nAns = df.dtypes\nAns\n\nYr_Mo_Dy     object\nRPT         float64\nVAL         float64\nROS         float64\nKIL         float64\n             ...   \nCLA         float64\nMUL         float64\nCLO         float64\nBEL         float64\nMAL         float64\nLength: 13, dtype: object"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-65",
    "href": "BigData_Analysis/Type1.html#question-65",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 65",
    "text": "Question 65\nYr_Mo_Dy을 판다스에서 인식할 수 있는 datetime64타입으로 변경하라\n\ndf['Yr_Mo_Dy'] = pd.to_datetime(df['Yr_Mo_Dy'])\nAns = df['Yr_Mo_Dy']\nAns\n\n0      2061-01-01\n1      2061-01-02\n2      2061-01-03\n3      2061-01-04\n4      2061-01-05\n          ...    \n6569   1978-12-27\n6570   1978-12-28\n6571   1978-12-29\n6572   1978-12-30\n6573   1978-12-31\nName: Yr_Mo_Dy, Length: 6574, dtype: datetime64[ns]"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-66",
    "href": "BigData_Analysis/Type1.html#question-66",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 66",
    "text": "Question 66\nYr_Mo_Dy에 존재하는 년도의 유일값을 모두 출력하라\n\ndf['Yr_Mo_Dy'].dt.year.unique()\n\narray([2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 1971,\n       1972, 1973, 1974, 1975, 1976, 1977, 1978])"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-67",
    "href": "BigData_Analysis/Type1.html#question-67",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 67",
    "text": "Question 67\nYr_Mo_Dy에 년도가 2061년 이상의 경우에는 모두 잘못된 데이터이다. 해당경우의 값은 100을 빼서 새롭게 날짜를 Yr_Mo_Dy 컬럼에 정의하라\n\ndf.loc[df['Yr_Mo_Dy'].dt.year &gt;= 2061, 'Yr_Mo_Dy'] -= pd.DateOffset(years = 100)\nAns = df['Yr_Mo_Dy']\nAns\n\n0      1961-01-01\n1      1961-01-02\n2      1961-01-03\n3      1961-01-04\n4      1961-01-05\n          ...    \n6569   1978-12-27\n6570   1978-12-28\n6571   1978-12-29\n6572   1978-12-30\n6573   1978-12-31\nName: Yr_Mo_Dy, Length: 6574, dtype: datetime64[ns]"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-68",
    "href": "BigData_Analysis/Type1.html#question-68",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 68",
    "text": "Question 68\n년도별 각컬럼의 평균값을 구하여라\n\nAns = df.groupby(df['Yr_Mo_Dy'].dt.year).mean().drop(columns = ['Yr_Mo_Dy'])\nAns\n\n\n\n\n\n\n\n\nRPT\nVAL\nROS\nKIL\nSHA\n...\nCLA\nMUL\nCLO\nBEL\nMAL\n\n\nYr_Mo_Dy\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1961\n12.299583\n10.351796\n11.362369\n6.958227\n10.881763\n...\n8.858788\n8.647652\n9.835577\n13.502795\n13.680773\n\n\n1962\n12.246923\n10.110438\n11.732712\n6.960440\n10.657918\n...\n8.793753\n8.316822\n9.676247\n12.930685\n14.323956\n\n\n1963\n12.813452\n10.836986\n12.541151\n7.330055\n11.724110\n...\n10.336548\n8.903589\n10.224438\n13.638877\n14.999014\n\n\n1964\n12.363661\n10.920164\n12.104372\n6.787787\n11.454481\n...\n9.467350\n7.789016\n10.207951\n13.740546\n14.910301\n\n\n1965\n12.451370\n11.075534\n11.848767\n6.858466\n11.024795\n...\n8.879918\n7.907425\n9.918082\n12.964247\n15.591644\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1974\n13.643096\n11.811781\n12.336356\n6.427041\n11.110986\n...\n9.896986\n9.331753\n8.736356\n13.252959\n16.947671\n\n\n1975\n12.008575\n10.293836\n11.564712\n5.269096\n9.190082\n...\n7.843836\n8.797945\n7.382822\n12.631671\n15.307863\n\n\n1976\n11.737842\n10.203115\n10.761230\n5.109426\n8.846339\n...\n7.146202\n8.883716\n7.883087\n12.332377\n15.471448\n\n\n1977\n13.099616\n11.144493\n12.627836\n6.073945\n10.003836\n...\n8.378384\n9.098192\n8.821616\n13.459068\n16.590849\n\n\n1978\n12.504356\n11.044274\n11.380000\n6.082356\n10.167233\n...\n8.800466\n9.089753\n8.301699\n12.967397\n16.771370\n\n\n\n\n18 rows × 12 columns"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-69",
    "href": "BigData_Analysis/Type1.html#question-69",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 69",
    "text": "Question 69\nweekday컬럼을 만들고 요일별로 매핑하라 (월요일 : 0 ~ 일요일 : 6)\n\ndf['weekday'] = df['Yr_Mo_Dy'].dt.weekday\nAns = df['weekday']\nAns\n\n0       6\n1       0\n2       1\n3       2\n4       3\n       ..\n6569    2\n6570    3\n6571    4\n6572    5\n6573    6\nName: weekday, Length: 6574, dtype: int32"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-70",
    "href": "BigData_Analysis/Type1.html#question-70",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 70",
    "text": "Question 70\nweekday컬럼을 기준으로 주말이면 1 평일이면 0의 값을 가지는 WeekCheck 컬럼을 만들어라\n\ndf['WeekCheck'] = df['weekday'].map(lambda x : 1 if x in [5, 6] else 0)\nAns = df['WeekCheck']\nAns\n\n0       1\n1       0\n2       0\n3       0\n4       0\n       ..\n6569    0\n6570    0\n6571    0\n6572    1\n6573    1\nName: WeekCheck, Length: 6574, dtype: int64"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-71",
    "href": "BigData_Analysis/Type1.html#question-71",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 71",
    "text": "Question 71\n년도, 일자 상관없이 모든 컬럼의 각 달의 평균을 구하여라\n\ndf.groupby(df['Yr_Mo_Dy'].dt.month).mean().drop(columns = ['Yr_Mo_Dy'])\n\n\n\n\n\n\n\n\nRPT\nVAL\nROS\nKIL\nSHA\n...\nCLA\nMUL\nCLO\nBEL\nMAL\n\n\nYr_Mo_Dy\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n14.847325\n12.914560\n13.299624\n7.199498\n11.667734\n...\n9.512047\n9.543208\n10.053566\n14.550520\n18.028763\n\n\n2\n13.710906\n12.111122\n12.879132\n6.942411\n11.551772\n...\n9.341437\n9.313169\n9.518051\n13.728898\n17.156142\n\n\n3\n13.158687\n11.505842\n12.648118\n7.265907\n11.554516\n...\n9.635896\n9.700324\n10.096953\n13.810609\n16.909317\n\n\n4\n12.555648\n10.429759\n12.204815\n6.898037\n10.677667\n...\n8.909056\n8.930870\n9.158019\n12.664759\n14.937611\n\n\n5\n11.724032\n10.145619\n11.550394\n6.307487\n10.224301\n...\n8.452903\n8.040806\n8.524857\n12.767258\n13.736039\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n8\n10.213411\n8.415143\n9.993441\n5.270681\n8.901559\n...\n6.842025\n7.240573\n7.002783\n11.110090\n12.565943\n\n\n9\n11.458519\n9.981002\n10.756883\n5.615176\n9.766315\n...\n7.745677\n7.610556\n7.689278\n12.686389\n14.761963\n\n\n10\n12.660610\n11.010681\n11.453943\n6.065215\n10.550251\n...\n8.726308\n8.347181\n8.850376\n14.155323\n16.697151\n\n\n11\n13.200722\n11.639500\n12.293407\n6.247611\n10.501130\n...\n8.427167\n8.604000\n8.943167\n13.815741\n18.114185\n\n\n12\n14.446398\n12.353602\n13.212276\n6.829910\n11.301254\n...\n9.209355\n9.447258\n9.627670\n14.259516\n18.697599\n\n\n\n\n12 rows × 12 columns"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-72",
    "href": "BigData_Analysis/Type1.html#question-72",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 72",
    "text": "Question 72\n모든 결측치는 컬럼기준 직전의 값으로 대체하고 첫번째 행에 결측치가 있을경우 뒤에있는 값으로 대채하라\n\nAns = df.interpolate(method = 'ffill').interpolate(method = 'bfill')\nAns\n\n\n\n\n\n\n\n\nYr_Mo_Dy\nRPT\nVAL\nROS\nKIL\n...\nCLA\nMUL\nCLO\nBEL\nMAL\n\n\n\n\n0\n1961-01-01\n15.04\n14.96\n13.17\n9.29\n...\n10.25\n10.83\n12.58\n18.50\n15.04\n\n\n1\n1961-01-02\n14.71\n14.96\n10.83\n6.50\n...\n10.04\n9.79\n9.67\n17.54\n13.83\n\n\n2\n1961-01-03\n18.50\n16.88\n12.33\n10.13\n...\n10.04\n8.50\n7.67\n12.75\n12.71\n\n\n3\n1961-01-04\n10.58\n6.63\n11.75\n4.58\n...\n1.79\n5.83\n5.88\n5.46\n10.88\n\n\n4\n1961-01-05\n13.33\n13.25\n11.42\n6.17\n...\n6.54\n10.92\n10.34\n12.92\n11.83\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n6569\n1978-12-27\n17.58\n16.96\n17.62\n8.08\n...\n15.59\n14.04\n14.00\n17.21\n40.08\n\n\n6570\n1978-12-28\n13.21\n5.46\n13.46\n5.00\n...\n16.25\n15.25\n18.05\n21.79\n41.46\n\n\n6571\n1978-12-29\n14.00\n10.29\n14.42\n8.71\n...\n12.46\n14.50\n16.42\n18.88\n29.58\n\n\n6572\n1978-12-30\n18.50\n14.04\n21.29\n9.13\n...\n12.87\n12.46\n12.12\n14.67\n28.79\n\n\n6573\n1978-12-31\n20.33\n17.41\n27.29\n9.59\n...\n11.63\n11.58\n11.38\n12.08\n22.08\n\n\n\n\n6574 rows × 13 columns"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-73",
    "href": "BigData_Analysis/Type1.html#question-73",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 73",
    "text": "Question 73\n년도 - 월을 기준으로 모든 컬럼의 평균값을 구하여라\n\nAns = df.groupby(df['Yr_Mo_Dy'].dt.to_period('M')).mean().drop(columns = 'Yr_Mo_Dy')\nAns\n\n\n\n\n\n\n\n\nRPT\nVAL\nROS\nKIL\nSHA\n...\nCLA\nMUL\nCLO\nBEL\nMAL\n\n\nYr_Mo_Dy\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1961-01\n14.841333\n11.988333\n13.431613\n7.736774\n11.072759\n...\n9.245333\n9.085806\n10.107419\n13.880968\n14.703226\n\n\n1961-02\n16.269286\n14.975357\n14.441481\n9.230741\n13.852143\n...\n11.846071\n11.821429\n12.714286\n18.583214\n15.411786\n\n\n1961-03\n10.890000\n11.296452\n10.752903\n7.284000\n10.509355\n...\n9.829677\n10.294138\n11.251935\n16.410968\n15.720000\n\n\n1961-04\n10.722667\n9.427667\n9.998000\n5.830667\n8.435000\n...\n7.094667\n7.342333\n7.237000\n11.147333\n10.278333\n\n\n1961-05\n9.860968\n8.850000\n10.818065\n5.905333\n9.490323\n...\n8.177097\n8.039355\n8.499355\n11.900323\n12.011613\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1978-08\n9.645161\n8.259355\n9.032258\n4.502903\n7.368065\n...\n5.417742\n7.241290\n5.536774\n10.466774\n12.054194\n\n\n1978-09\n10.913667\n10.895000\n10.635000\n5.725000\n10.372000\n...\n9.583000\n10.069333\n8.939000\n15.680333\n19.391333\n\n\n1978-10\n9.897742\n8.670968\n9.295806\n4.721290\n8.525161\n...\n7.337742\n8.297742\n8.243871\n13.776774\n17.150000\n\n\n1978-11\n16.151667\n14.802667\n13.508000\n7.317333\n11.475000\n...\n9.657333\n10.701333\n10.676000\n17.404667\n20.723000\n\n\n1978-12\n16.175484\n13.748065\n15.635161\n7.094839\n11.398710\n...\n10.194839\n10.616774\n11.028710\n13.859677\n21.371613\n\n\n\n\n216 rows × 12 columns"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-74",
    "href": "BigData_Analysis/Type1.html#question-74",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 74",
    "text": "Question 74\nRPT 컬럼의 값을 일자별 기준으로 1차차분하라\n\nAns = df['RPT'].diff()\nAns\n\n0        NaN\n1      -0.33\n2       3.79\n3      -7.92\n4       2.75\n        ... \n6569    3.75\n6570   -4.37\n6571    0.79\n6572    4.50\n6573    1.83\nName: RPT, Length: 6574, dtype: float64"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-75",
    "href": "BigData_Analysis/Type1.html#question-75",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 75",
    "text": "Question 75\nRPT와 VAL의 컬럼을 일주일 간격으로 각각 이동평균한값을 구하여라\n\nAns = df[['RPT', 'VAL']].rolling(window = 7).mean()\nAns\n\n\n\n\n\n\n\n\nRPT\nVAL\n\n\n\n\n0\nNaN\nNaN\n\n\n1\nNaN\nNaN\n\n\n2\nNaN\nNaN\n\n\n3\nNaN\nNaN\n\n\n4\nNaN\nNaN\n\n\n...\n...\n...\n\n\n6569\n11.868571\n9.362857\n\n\n6570\n11.904286\n9.595714\n\n\n6571\n13.017143\n10.011429\n\n\n6572\n13.285714\n10.118571\n\n\n6573\n14.951429\n11.801429\n\n\n\n\n6574 rows × 2 columns"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-76",
    "href": "BigData_Analysis/Type1.html#question-76",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 76",
    "text": "Question 76\n\nData\n\n서울시 미세먼지 데이터 : https://www.airkorea.or.kr/web/realSearch?pMENU_NO=97\nDataURL = ‘https://raw.githubusercontent.com/Datamanim/pandas/main/seoul_pm.csv’\n\n\n년-월-일:시 컬럼을 pandas에서 인식할 수 있는 datetime 형태로 변경하라. 서울시의 제공데이터의 경우 0시가 24시로 표현된다\n\ndf = pd.read_csv('https://raw.githubusercontent.com/Datamanim/pandas/main/seoul_pm.csv')\n\ndef Change_Date(x) :\n    import datetime\n    date = x.split(':')[0]\n    hour = x.split(':')[1]\n    \n    if hour == '24' :\n        hour = '00:00:00'\n        dt = pd.to_datetime(date + ' ' + hour) + datetime.timedelta(days = 1)\n    \n    else : \n        hour = hour + ':00:00'\n        dt = pd.to_datetime(date + ' ' + hour)\n    \n    return dt\n\ndf['(년-월-일:시)'] = df['(년-월-일:시)'].apply(Change_Date)\n\nAns = df['(년-월-일:시)']\nAns\n\n0      2021-05-15 15:00:00\n1      2021-05-15 14:00:00\n2      2021-05-15 13:00:00\n3      2021-05-15 12:00:00\n4      2021-05-15 11:00:00\n               ...        \n1234   2021-03-25 05:00:00\n1235   2021-03-25 04:00:00\n1236   2021-03-25 03:00:00\n1237   2021-03-25 02:00:00\n1238   2021-03-25 01:00:00\nName: (년-월-일:시), Length: 1239, dtype: datetime64[ns]"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-77",
    "href": "BigData_Analysis/Type1.html#question-77",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 77",
    "text": "Question 77\n일자별 영어요일 이름을 dayName 컬럼에 저장하라\n\ndf['dayName'] = df['(년-월-일:시)'].dt.day_name()\nAns = df['dayName']\nAns\n\n0       Saturday\n1       Saturday\n2       Saturday\n3       Saturday\n4       Saturday\n          ...   \n1234    Thursday\n1235    Thursday\n1236    Thursday\n1237    Thursday\n1238    Thursday\nName: dayName, Length: 1239, dtype: object"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-78",
    "href": "BigData_Analysis/Type1.html#question-78",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 78",
    "text": "Question 78\n일자별 각 PM10등급의 빈도수를 파악하라\n\ngroup = df.groupby(['dayName', 'PM10등급'], as_index = False).size()\nAns = group.pivot(index = 'dayName', columns = 'PM10등급', values = 'size').fillna(0)\nAns\n\n\n\n\n\n\n\nPM10등급\n나쁨\n매우나쁨\n보통\n좋음\n\n\ndayName\n\n\n\n\n\n\n\n\nFriday\n31.0\n17.0\n120.0\n21.0\n\n\nMonday\n1.0\n21.0\n83.0\n63.0\n\n\nSaturday\n31.0\n27.0\n71.0\n54.0\n\n\nSunday\n2.0\n1.0\n67.0\n98.0\n\n\nThursday\n41.0\n0.0\n144.0\n5.0\n\n\nTuesday\n13.0\n10.0\n71.0\n74.0\n\n\nWednesday\n26.0\n0.0\n95.0\n46.0"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-79",
    "href": "BigData_Analysis/Type1.html#question-79",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 79",
    "text": "Question 79\n시간이 연속적으로 존재하며 결측치가 없는지 확인하라\n\n# 시간을 차분했을 경우 첫 값은 nan, 이후 모든 차분값이 동일하면 연속이라 판단한다.\n\ncheck = len(df['(년-월-일:시)'].diff().unique())\nif check == 2:\n    Ans = True\nelse:\n    Ans = False\nAns\n\nTrue"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-80",
    "href": "BigData_Analysis/Type1.html#question-80",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 80",
    "text": "Question 80\n오전 10시와 오후 10시(22시)의 PM10의 평균값을 각각 구하여라\n\nAns = df.groupby(df['(년-월-일:시)'].dt.hour, as_index = False)['PM10'].mean().loc[[10, 22]]\nAns\n\n\n\n\n\n\n\n\nPM10\n\n\n\n\n10\n70.384615\n\n\n22\n69.941176"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-81",
    "href": "BigData_Analysis/Type1.html#question-81",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 81",
    "text": "Question 81\n날짜 컬럼을 index로 만들어라\n\ndf.set_index('(년-월-일:시)', inplace = True, drop = True)\nAns = df\nAns\n\n\n\n\n\n\n\n\nPM10등급\nPM10\nPM2.5등급\nPM2.5\n오존등급\n오존\n이산화질소등급\n이산화질소\n일산화탄소등급\n일산화탄소\n아황산가스등급\n아황산가스\n\n\n(년-월-일:시)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2021-05-15 15:00:00\n보통\n47.0\n보통\n19.0\n좋음\n0.017\n좋음\n0.023\n좋음\n0.4\n좋음\n0.003\n\n\n2021-05-15 14:00:00\n보통\n43.0\n보통\n20.0\n좋음\n0.024\n좋음\n0.019\n좋음\n0.3\n좋음\n0.003\n\n\n2021-05-15 13:00:00\n보통\n34.0\n보통\n24.0\n보통\n0.035\n좋음\n0.017\n좋음\n0.4\n좋음\n0.004\n\n\n2021-05-15 12:00:00\n보통\n41.0\n보통\n27.0\n보통\n0.037\n좋음\n0.020\n좋음\n0.4\n좋음\n0.004\n\n\n2021-05-15 11:00:00\n보통\n51.0\n보통\n34.0\n보통\n0.033\n좋음\n0.023\n좋음\n0.4\n좋음\n0.005\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n2021-03-25 05:00:00\n보통\n39.0\n보통\n18.0\n좋음\n0.026\n좋음\n0.025\n좋음\n0.4\n좋음\n0.003\n\n\n2021-03-25 04:00:00\n보통\n34.0\n좋음\n15.0\n좋음\n0.017\n보통\n0.033\n좋음\n0.4\n좋음\n0.002\n\n\n2021-03-25 03:00:00\n보통\n35.0\n좋음\n13.0\n좋음\n0.029\n좋음\n0.025\n좋음\n0.4\n좋음\n0.003\n\n\n2021-03-25 02:00:00\n보통\n35.0\n좋음\n13.0\n보통\n0.031\n좋음\n0.025\n좋음\n0.3\n좋음\n0.003\n\n\n2021-03-25 01:00:00\n보통\n42.0\n좋음\n13.0\n좋음\n0.022\n보통\n0.037\n좋음\n0.4\n좋음\n0.003\n\n\n\n\n1239 rows × 12 columns"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-82",
    "href": "BigData_Analysis/Type1.html#question-82",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 82",
    "text": "Question 82\n데이터를 주단위로 뽑아서 최소,최대 평균, 표준표차를 구하여라\n\ndf.select_dtypes(exclude = ['object']).resample('W').agg(['min', 'max', 'mean', 'std'])\n\n\n\n\n\n\n\n\nPM10\nPM2.5\n오존\n...\n이산화질소\n일산화탄소\n아황산가스\n\n\n\nmin\nmax\nmean\nstd\nmin\nmax\nmean\nstd\nmin\nmax\n...\nmean\nstd\nmin\nmax\nmean\nstd\nmin\nmax\nmean\nstd\n\n\n(년-월-일:시)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2021-03-28\n6.0\n160.0\n72.747368\n43.345462\n4.0\n113.0\n44.705263\n29.551928\n0.002\n0.085\n...\n0.044579\n0.023722\n0.3\n1.4\n0.611579\n0.232408\n0.002\n0.006\n0.003274\n0.000961\n\n\n2021-04-04\n3.0\n598.0\n97.148810\n129.911976\n1.0\n120.0\n23.168675\n22.399578\n0.003\n0.055\n...\n0.027929\n0.014978\n0.3\n0.9\n0.445833\n0.135741\n0.002\n0.004\n0.002732\n0.000541\n\n\n2021-04-11\n17.0\n102.0\n41.059524\n16.325911\n7.0\n70.0\n21.761905\n11.479343\n0.009\n0.070\n...\n0.022583\n0.009562\n0.3\n0.7\n0.389286\n0.087573\n0.002\n0.004\n0.002744\n0.000569\n\n\n2021-04-18\n3.0\n367.0\n48.180723\n43.254468\n2.0\n38.0\n17.066265\n7.867952\n0.002\n0.070\n...\n0.023753\n0.013553\n0.3\n0.6\n0.386747\n0.084954\n0.002\n0.004\n0.002464\n0.000579\n\n\n2021-04-25\n17.0\n126.0\n55.119048\n26.659936\n7.0\n61.0\n26.392857\n13.094788\n0.006\n0.090\n...\n0.028571\n0.014640\n0.3\n0.8\n0.457143\n0.122142\n0.001\n0.011\n0.003631\n0.001763\n\n\n2021-05-02\n3.0\n97.0\n40.612121\n24.813103\n1.0\n43.0\n16.644578\n8.850965\n0.003\n0.064\n...\n0.020428\n0.011676\n0.3\n0.6\n0.392771\n0.092485\n0.001\n0.006\n0.002524\n0.000768\n\n\n2021-05-09\n8.0\n1024.0\n161.660714\n239.679148\n3.0\n172.0\n34.738095\n39.788248\n0.002\n0.073\n...\n0.024187\n0.012371\n0.3\n1.0\n0.419277\n0.103230\n0.002\n0.004\n0.002771\n0.000579\n\n\n2021-05-16\n16.0\n111.0\n40.014815\n21.876855\n7.0\n76.0\n21.577778\n15.622633\n0.004\n0.123\n...\n0.030793\n0.009503\n0.3\n0.8\n0.440741\n0.094075\n0.001\n0.006\n0.002459\n0.001696\n\n\n\n\n8 rows × 24 columns"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-83",
    "href": "BigData_Analysis/Type1.html#question-83",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 83",
    "text": "Question 83\n\nData\n\n국가별 5세이하 사망비율 통계 : https://www.kaggle.com/utkarshxy/who-worldhealth-statistics-2020-complete\nDataURL = ‘https://raw.githubusercontent.com/Datamanim/pandas/main/under5MortalityRate.csv’\n\n\nIndicator을 삭제하고 First Tooltip 컬럼에서 신뢰구간에 해당하는 표현을 지워라\n\ndf = pd.read_csv('https://raw.githubusercontent.com/Datamanim/pandas/main/under5MortalityRate.csv')\ndf.drop(columns = 'Indicator', inplace = True)\n\ndf['First Tooltip'] = df['First Tooltip'].apply(lambda x : x.split('[')[0])\ndf['First Tooltip'] = pd.to_numeric(df['First Tooltip'])\nAns = df['First Tooltip']\nAns\n\n0         60.27\n1         63.83\n2         56.57\n3         62.54\n4         66.08\n          ...  \n29994     96.97\n29995    102.60\n29996     91.04\n29997    102.50\n29998    108.20\nName: First Tooltip, Length: 29999, dtype: float64"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-84",
    "href": "BigData_Analysis/Type1.html#question-84",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 84",
    "text": "Question 84\n년도가 2015년 이상, Dim1이 Both sexes인 케이스만 추출하라\n\ndf_new = df[(df['Period'] &gt;= 2015) & (df['Dim1'] == 'Both sexes')]\nAns = df_new\nAns\n\n\n\n\n\n\n\n\nLocation\nPeriod\nDim1\nFirst Tooltip\n\n\n\n\n0\nAfghanistan\n2019\nBoth sexes\n60.27\n\n\n3\nAfghanistan\n2018\nBoth sexes\n62.54\n\n\n6\nAfghanistan\n2017\nBoth sexes\n64.94\n\n\n9\nAfghanistan\n2016\nBoth sexes\n67.57\n\n\n12\nAfghanistan\n2015\nBoth sexes\n70.44\n\n\n...\n...\n...\n...\n...\n\n\n29943\nTimor-Leste\n2019\nBoth sexes\n44.22\n\n\n29946\nTimor-Leste\n2018\nBoth sexes\n45.62\n\n\n29949\nTimor-Leste\n2017\nBoth sexes\n47.27\n\n\n29952\nTimor-Leste\n2016\nBoth sexes\n49.01\n\n\n29955\nTimor-Leste\n2015\nBoth sexes\n50.76\n\n\n\n\n860 rows × 4 columns"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-85",
    "href": "BigData_Analysis/Type1.html#question-85",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 85",
    "text": "Question 85\n84번 문제에서 추출한 데이터로 아래와 같이 나라에 따른 년도별 사망률을 데이터 프레임화 하라\n\nAns = df_new.pivot(index = 'Location', columns = 'Period', values = 'First Tooltip')\nAns\n\n\n\n\n\n\n\nPeriod\n2015\n2016\n2017\n2018\n2019\n\n\nLocation\n\n\n\n\n\n\n\n\n\nAfghanistan\n70.44\n67.57\n64.94\n62.54\n60.27\n\n\nAlbania\n9.57\n9.42\n9.42\n9.53\n9.68\n\n\nAlgeria\n25.18\n24.79\n24.32\n23.81\n23.26\n\n\nAndorra\n3.53\n3.37\n3.22\n3.09\n2.97\n\n\nAngola\n88.20\n84.21\n80.62\n77.67\n74.69\n\n\n...\n...\n...\n...\n...\n...\n\n\nSyrian Arab Republic\n23.18\n23.27\n22.97\n22.11\n21.53\n\n\nTajikistan\n37.75\n36.82\n35.81\n34.80\n33.78\n\n\nThailand\n10.80\n10.32\n9.86\n9.42\n9.01\n\n\nThe former Yugoslav Republic of Macedonia\n12.97\n11.97\n9.94\n7.83\n6.12\n\n\nTimor-Leste\n50.76\n49.01\n47.27\n45.62\n44.22\n\n\n\n\n172 rows × 5 columns"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-86",
    "href": "BigData_Analysis/Type1.html#question-86",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 86",
    "text": "Question 86\nDim1에 따른 년도별 사망비율의 평균을 구하라\n\nAns = df.pivot_table(index = 'Dim1', columns = 'Period', values = 'First Tooltip', aggfunc = 'mean')\nAns\n\n\n\n\n\n\n\nPeriod\n1950\n1951\n1952\n1953\n1954\n1955\n1956\n1957\n1958\n1959\n...\n2010\n2011\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n\n\nDim1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBoth sexes\n147.700816\n155.537544\n157.811094\n156.147206\n154.539857\n155.797179\n159.241163\n156.170114\n150.813222\n150.574000\n...\n37.718488\n35.573663\n34.290988\n33.099360\n32.053314\n31.012093\n29.956337\n29.030465\n28.083837\n27.191744\n\n\nFemale\n140.909796\n149.210175\n151.516094\n150.250882\n148.688286\n149.843205\n153.048721\n149.988295\n144.719667\n144.451474\n...\n34.953023\n32.877616\n31.654070\n30.521337\n29.524302\n28.544360\n27.542035\n26.675291\n25.782616\n24.945349\n\n\nMale\n154.151224\n161.538246\n163.760781\n161.742059\n160.081000\n161.456923\n165.089535\n162.015000\n156.573556\n156.375053\n...\n40.340174\n38.140291\n36.793081\n35.543663\n34.446105\n33.354302\n32.242616\n31.273198\n30.283023\n29.350349\n\n\n\n\n3 rows × 70 columns"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-87",
    "href": "BigData_Analysis/Type1.html#question-87",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 87",
    "text": "Question 87\n\nData\n\n올림픽 메달리스트 정보 데이터: https://www.kaggle.com/the-guardian/olympic-games\nDataURL = ‘https://raw.githubusercontent.com/Datamanim/pandas/main/winter.csv’\n\n\n데이터에서 한국 KOR 데이터만 추출하라\n\ndf = pd.read_csv('https://raw.githubusercontent.com/Datamanim/pandas/main/winter.csv')\n\nkor = df[df['Country'] == 'KOR']\nAns = kor\nAns\n\n\n\n\n\n\n\n\nYear\nCity\nSport\nDiscipline\nAthlete\nCountry\nGender\nEvent\nMedal\n\n\n\n\n2652\n1992\nAlbertville\nSkating\nShort Track Speed Skating\nLEE, Jun-Ho\nKOR\nMen\n1000M\nBronze\n\n\n2653\n1992\nAlbertville\nSkating\nShort Track Speed Skating\nKIM, Ki-Hoon\nKOR\nMen\n1000M\nGold\n\n\n2671\n1992\nAlbertville\nSkating\nShort Track Speed Skating\nKIM, Ki-Hoon\nKOR\nMen\n5000M Relay\nGold\n\n\n2672\n1992\nAlbertville\nSkating\nShort Track Speed Skating\nLEE, Jun-Ho\nKOR\nMen\n5000M Relay\nGold\n\n\n2673\n1992\nAlbertville\nSkating\nShort Track Speed Skating\nMO, Ji-Soo\nKOR\nMen\n5000M Relay\nGold\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n5528\n2014\nSochi\nSkating\nShort Track Speed Skating\nPARK, Seung-Hi\nKOR\nWomen\n500M\nBronze\n\n\n5544\n2014\nSochi\nSkating\nSpeed skating\nJOO, Hyong Jun\nKOR\nMen\nTeam Pursuit\nSilver\n\n\n5545\n2014\nSochi\nSkating\nSpeed skating\nKIM, Cheol Min\nKOR\nMen\nTeam Pursuit\nSilver\n\n\n5546\n2014\nSochi\nSkating\nSpeed skating\nLEE, Seung Hoon\nKOR\nMen\nTeam Pursuit\nSilver\n\n\n5565\n2014\nSochi\nSkating\nSpeed skating\nLEE, Sang Hwa\nKOR\nWomen\n500M\nGold\n\n\n\n\n87 rows × 9 columns"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-88",
    "href": "BigData_Analysis/Type1.html#question-88",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 88",
    "text": "Question 88\n한국 올림픽 메달리스트 데이터에서 년도에 따른 Medal 수를 데이터프레임화 하라\n\nAns = kor.pivot_table(index = 'Year', columns = 'Medal', aggfunc = 'size').fillna(0)\nAns\n\n\n\n\n\n\n\nMedal\nBronze\nGold\nSilver\n\n\nYear\n\n\n\n\n\n\n\n1992\n1.0\n5.0\n1.0\n\n\n1994\n1.0\n8.0\n1.0\n\n\n1998\n2.0\n6.0\n4.0\n\n\n2002\n0.0\n5.0\n2.0\n\n\n2006\n2.0\n14.0\n3.0\n\n\n2010\n2.0\n6.0\n10.0\n\n\n2014\n2.0\n7.0\n5.0"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-89",
    "href": "BigData_Analysis/Type1.html#question-89",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 89",
    "text": "Question 89\n전체 데이터에서 Sport종류에 따른 성별 수를 구하여라\n\nAns = df.pivot_table(index = 'Sport', columns = 'Gender', aggfunc = 'size')\nAns\n\n\n\n\n\n\n\nGender\nMen\nWomen\n\n\nSport\n\n\n\n\n\n\nBiathlon\n270\n150\n\n\nBobsleigh\n416\n36\n\n\nCurling\n97\n75\n\n\nIce Hockey\n1231\n305\n\n\nLuge\n135\n45\n\n\nSkating\n665\n564\n\n\nSkiing\n1130\n651"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-90",
    "href": "BigData_Analysis/Type1.html#question-90",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 90",
    "text": "Question 90\n전체 데이터에서 Discipline종류에 따른 따른 Medal 수를 구하여라\n\nAns = df.pivot_table(index = 'Discipline', columns = 'Medal', aggfunc = 'size')\nAns\n\n\n\n\n\n\n\nMedal\nBronze\nGold\nSilver\n\n\nDiscipline\n\n\n\n\n\n\n\nAlpine Skiing\n141\n143\n144\n\n\nBiathlon\n139\n140\n141\n\n\nBobsleigh\n147\n134\n141\n\n\nCross Country Skiing\n263\n264\n262\n\n\nCurling\n56\n58\n58\n\n\nFigure skating\n118\n122\n119\n\n\nFreestyle Skiing\n34\n34\n34\n\n\nIce Hockey\n512\n510\n514\n\n\nLuge\n60\n62\n58\n\n\nNordic Combined\n55\n55\n55\n\n\nShort Track Speed Skating\n96\n97\n97\n\n\nSkeleton\n10\n10\n10\n\n\nSki Jumping\n68\n69\n70\n\n\nSnowboard\n30\n30\n30\n\n\nSpeed skating\n190\n193\n197"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#merge-concat",
    "href": "BigData_Analysis/Type1.html#merge-concat",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "7. Merge, Concat",
    "text": "7. Merge, Concat\n\nData\n\n국가별 5세이하 사망비율 통계 : https://www.kaggle.com/utkarshxy/who-worldhealth-statistics-2020-complete\nDataURL = ‘https://raw.githubusercontent.com/Datamanim/pandas/main/mergeTEst.csv’\n\n\n\ndf = pd.read_csv('https://raw.githubusercontent.com/Datamanim/pandas/main/mergeTEst.csv', index_col = 0)\n\ndf1 = df.iloc[:4, :]\ndf2 = df.iloc[4:, :]\n\ndisplay(df1)\ndisplay(df2)\n\n\n\n\n\n\n\n\n2010\n2011\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n\n\nLocation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAfghanistan\n64.023\n61.640\n59.367\n57.170\n55.08\n53.107\n51.267\n49.560\n47.983\n46.453\n\n\nAlbania\n11.803\n10.807\n9.943\n9.267\n8.79\n8.493\n8.363\n8.363\n8.453\n8.597\n\n\nAlgeria\n23.540\n22.907\n22.450\n22.117\n21.85\n21.587\n21.257\n20.850\n20.407\n19.930\n\n\nAndorra\n4.240\n4.033\n3.843\n3.667\n3.49\n3.330\n3.187\n3.060\n2.933\n2.827\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2010\n2011\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n\n\nLocation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAngola\n75.713\n71.280\n67.233\n63.570\n60.430\n57.757\n55.510\n53.460\n51.757\n50.093\n\n\nAntigua and Barbuda\n8.667\n8.223\n7.807\n7.420\n7.070\n6.757\n6.483\n6.230\n6.000\n5.783\n\n\nArgentina\n12.887\n12.380\n11.840\n11.283\n10.733\n10.203\n9.683\n9.177\n8.680\n8.227\n\n\nArmenia\n16.497\n15.677\n14.897\n14.170\n13.477\n12.817\n12.183\n11.583\n11.007\n10.497\n\n\nAustralia\n3.993\n3.803\n3.623\n3.467\n3.343\n3.253\n3.183\n3.137\n3.090\n3.047\n\n\nAustria\n3.573\n3.463\n3.333\n3.210\n3.113\n3.043\n2.987\n2.943\n2.897\n2.843"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-91",
    "href": "BigData_Analysis/Type1.html#question-91",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 91",
    "text": "Question 91\ndf1과 df2 데이터를 하나의 데이터 프레임으로 합쳐라\n\nAns = pd.concat([df1, df2], axis = 0)\nAns\n\n\n\n\n\n\n\n\n2010\n2011\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n\n\nLocation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAfghanistan\n64.023\n61.640\n59.367\n57.170\n55.080\n53.107\n51.267\n49.560\n47.983\n46.453\n\n\nAlbania\n11.803\n10.807\n9.943\n9.267\n8.790\n8.493\n8.363\n8.363\n8.453\n8.597\n\n\nAlgeria\n23.540\n22.907\n22.450\n22.117\n21.850\n21.587\n21.257\n20.850\n20.407\n19.930\n\n\nAndorra\n4.240\n4.033\n3.843\n3.667\n3.490\n3.330\n3.187\n3.060\n2.933\n2.827\n\n\nAngola\n75.713\n71.280\n67.233\n63.570\n60.430\n57.757\n55.510\n53.460\n51.757\n50.093\n\n\nAntigua and Barbuda\n8.667\n8.223\n7.807\n7.420\n7.070\n6.757\n6.483\n6.230\n6.000\n5.783\n\n\nArgentina\n12.887\n12.380\n11.840\n11.283\n10.733\n10.203\n9.683\n9.177\n8.680\n8.227\n\n\nArmenia\n16.497\n15.677\n14.897\n14.170\n13.477\n12.817\n12.183\n11.583\n11.007\n10.497\n\n\nAustralia\n3.993\n3.803\n3.623\n3.467\n3.343\n3.253\n3.183\n3.137\n3.090\n3.047\n\n\nAustria\n3.573\n3.463\n3.333\n3.210\n3.113\n3.043\n2.987\n2.943\n2.897\n2.843"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-92",
    "href": "BigData_Analysis/Type1.html#question-92",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 92",
    "text": "Question 92\ndf3과 df4 데이터를 하나의 데이터 프레임으로 합쳐라. 둘다 포함하고 있는 년도에 대해서만 고려한다\n\ndf3 = df.iloc[:2, :4]\ndf4 = df.iloc[5:, 3:]\n\ndisplay(df3)\ndisplay(df4)\n\n\n\n\n\n\n\n\n2010\n2011\n2012\n2013\n\n\nLocation\n\n\n\n\n\n\n\n\nAfghanistan\n64.023\n61.640\n59.367\n57.170\n\n\nAlbania\n11.803\n10.807\n9.943\n9.267\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n\n\nLocation\n\n\n\n\n\n\n\n\n\n\n\nAntigua and Barbuda\n7.420\n7.070\n6.757\n6.483\n6.230\n6.000\n5.783\n\n\nArgentina\n11.283\n10.733\n10.203\n9.683\n9.177\n8.680\n8.227\n\n\nArmenia\n14.170\n13.477\n12.817\n12.183\n11.583\n11.007\n10.497\n\n\nAustralia\n3.467\n3.343\n3.253\n3.183\n3.137\n3.090\n3.047\n\n\nAustria\n3.210\n3.113\n3.043\n2.987\n2.943\n2.897\n2.843\n\n\n\n\n\n\n\n\nAns = pd.concat([df3, df4], join = 'inner')\nAns\n\n\n\n\n\n\n\n\n2013\n\n\nLocation\n\n\n\n\n\nAfghanistan\n57.170\n\n\nAlbania\n9.267\n\n\nAntigua and Barbuda\n7.420\n\n\nArgentina\n11.283\n\n\nArmenia\n14.170\n\n\nAustralia\n3.467\n\n\nAustria\n3.210"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-93",
    "href": "BigData_Analysis/Type1.html#question-93",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 93",
    "text": "Question 93\ndf3과 df4 데이터를 하나의 데이터 프레임으로 합쳐라. 모든 컬럼을 포함하고, 결측치는 0으로 대체한다\n\nAns = pd.concat([df3, df4], join = 'outer').fillna(0)\nAns\n\n\n\n\n\n\n\n\n2010\n2011\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n\n\nLocation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAfghanistan\n64.023\n61.640\n59.367\n57.170\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n\n\nAlbania\n11.803\n10.807\n9.943\n9.267\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n\n\nAntigua and Barbuda\n0.000\n0.000\n0.000\n7.420\n7.070\n6.757\n6.483\n6.230\n6.000\n5.783\n\n\nArgentina\n0.000\n0.000\n0.000\n11.283\n10.733\n10.203\n9.683\n9.177\n8.680\n8.227\n\n\nArmenia\n0.000\n0.000\n0.000\n14.170\n13.477\n12.817\n12.183\n11.583\n11.007\n10.497\n\n\nAustralia\n0.000\n0.000\n0.000\n3.467\n3.343\n3.253\n3.183\n3.137\n3.090\n3.047\n\n\nAustria\n0.000\n0.000\n0.000\n3.210\n3.113\n3.043\n2.987\n2.943\n2.897\n2.843"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-94",
    "href": "BigData_Analysis/Type1.html#question-94",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 94",
    "text": "Question 94\ndf5과 df6 데이터를 하나의 데이터 프레임으로 merge함수를 이용하여 합쳐라. Algeria컬럼을 key로 하고 두 데이터 모두 포함하는 데이터만 출력하라\n\ndf5 = df.T.iloc[:7, :3]\ndf6 = df.T.iloc[6:, 2:5]\n\ndisplay(df5)\ndisplay(df6)\n\n\n\n\n\n\n\nLocation\nAfghanistan\nAlbania\nAlgeria\n\n\n\n\n2010\n64.023\n11.803\n23.540\n\n\n2011\n61.640\n10.807\n22.907\n\n\n2012\n59.367\n9.943\n22.450\n\n\n2013\n57.170\n9.267\n22.117\n\n\n2014\n55.080\n8.790\n21.850\n\n\n2015\n53.107\n8.493\n21.587\n\n\n2016\n51.267\n8.363\n21.257\n\n\n\n\n\n\n\n\n\n\n\n\n\nLocation\nAlgeria\nAndorra\nAngola\n\n\n\n\n2016\n21.257\n3.187\n55.510\n\n\n2017\n20.850\n3.060\n53.460\n\n\n2018\n20.407\n2.933\n51.757\n\n\n2019\n19.930\n2.827\n50.093\n\n\n\n\n\n\n\n\nAns = pd.merge(df5, df6, on = 'Algeria', how = 'inner')\nAns\n\n\n\n\n\n\n\nLocation\nAfghanistan\nAlbania\nAlgeria\nAndorra\nAngola\n\n\n\n\n0\n51.267\n8.363\n21.257\n3.187\n55.51"
  },
  {
    "objectID": "BigData_Analysis/Type1.html#question-95",
    "href": "BigData_Analysis/Type1.html#question-95",
    "title": "빅분기 실기 - 작업 1유형",
    "section": "Question 95",
    "text": "Question 95\ndf5과 df6 데이터를 하나의 데이터 프레임으로 merge함수를 이용하여 합쳐라. Algeria컬럼을 key로 하고 합집합으로 합쳐라\n\nAns = pd.merge(df5, df6, on = 'Algeria', how = 'outer')\nAns\n\n\n\n\n\n\n\nLocation\nAfghanistan\nAlbania\nAlgeria\nAndorra\nAngola\n\n\n\n\n0\n64.023\n11.803\n23.540\nNaN\nNaN\n\n\n1\n61.640\n10.807\n22.907\nNaN\nNaN\n\n\n2\n59.367\n9.943\n22.450\nNaN\nNaN\n\n\n3\n57.170\n9.267\n22.117\nNaN\nNaN\n\n\n4\n55.080\n8.790\n21.850\nNaN\nNaN\n\n\n5\n53.107\n8.493\n21.587\nNaN\nNaN\n\n\n6\n51.267\n8.363\n21.257\n3.187\n55.510\n\n\n7\nNaN\nNaN\n20.850\n3.060\n53.460\n\n\n8\nNaN\nNaN\n20.407\n2.933\n51.757\n\n\n9\nNaN\nNaN\n19.930\n2.827\n50.093"
  },
  {
    "objectID": "BigData_Analysis.html",
    "href": "BigData_Analysis.html",
    "title": "Big Data Analysis Engineer",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n\n\n\n\n  \n\n\n\n\nScipy 튜토리얼\n\n\n\n\n\n\n\nPython\n\n\nScipy\n\n\n\n\n\n\n\n\n\n\n\nJun 22, 2023\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\n빅분기 실기 - 작업 3유형\n\n\n\n\n\n\n\nPython\n\n\nScipy\n\n\n\n\n\n\n\n\n\n\n\nJun 22, 2023\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\n빅분기 실기 - 작업 1유형\n\n\n\n\n\n\n\nPython\n\n\nPandas\n\n\n\n\n\n\n\n\n\n\n\nJun 21, 2023\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\n빅분기 실기 - DataQ 제공문제\n\n\n\n\n\n\n\nPython\n\n\nPandas\n\n\nScikit-learn\n\n\nScipy\n\n\n\n\n\n\n\n\n\n\n\nMay 14, 2023\n\n\nJinwon Lee\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Data_Exploration/Data_Exploration_CH03.html",
    "href": "Data_Exploration/Data_Exploration_CH03.html",
    "title": "데이터 분석 및 전처리 기법",
    "section": "",
    "text": "Part 3 : 데이터 분석 및 전처리 기법\n\nhead(iris) \n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1          5.1         3.5          1.4         0.2  setosa\n## 2          4.9         3.0          1.4         0.2  setosa\n## 3          4.7         3.2          1.3         0.2  setosa\n## 4          4.6         3.1          1.5         0.2  setosa\n## 5          5.0         3.6          1.4         0.2  setosa\n## 6          5.4         3.9          1.7         0.4  setosa\n\ntail(iris) \n##     Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n## 145          6.7         3.3          5.7         2.5 virginica\n## 146          6.7         3.0          5.2         2.3 virginica\n## 147          6.3         2.5          5.0         1.9 virginica\n## 148          6.5         3.0          5.2         2.0 virginica\n## 149          6.2         3.4          5.4         2.3 virginica\n## 150          5.9         3.0          5.1         1.8 virginica\n\nsummary(iris) \n##   Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n##  Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n##  1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n##  Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n##  Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n##  3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n##  Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n##        Species  \n##  setosa    :50  \n##  versicolor:50  \n##  virginica :50  \n##                 \n##                 \n## \n\nstr(iris)\n## 'data.frame':    150 obs. of  5 variables:\n##  $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n##  $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n##  $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n##  $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n##  $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n\nplot(iris)\n\n\n\n\n\nSepal_Length &lt;- iris[,1]\nPetal_Length &lt;- iris[,3]  \n\ntemp &lt;- cbind(Sepal_Length, Petal_Length)\nboxplot(temp)\n\n\n\n\n\nplot(iris$Sepal.Length, iris$Sepal.Width, pch=as.numeric(iris$Species))\n\n\n\n\n\n# install.packages('caret')\nlibrary(caret)\n## 필요한 패키지를 로딩중입니다: lattice\n## \n## 다음의 패키지를 부착합니다: 'caret'\n## The following object is masked from 'package:purrr':\n## \n##     lift\nfeaturePlot(iris[,1:4], iris$Species)\n\n\n\n\n\nx &lt;- 0:2  \nx\n## [1] 0 1 2\nstr(x) \n##  int [1:3] 0 1 2\n\nx1 &lt;- as.numeric(x) \nx1\n## [1] 0 1 2\nstr(x1)\n##  num [1:3] 0 1 2\n\nx2 &lt;- as.data.frame(x1) \nx2  \n##   x1\n## 1  0\n## 2  1\n## 3  2\nstr(x2)  \n## 'data.frame':    3 obs. of  1 variable:\n##  $ x1: num  0 1 2\n\nx3 &lt;- as.character(x1) \nx3\n## [1] \"0\" \"1\" \"2\"\nstr(x3)  \n##  chr [1:3] \"0\" \"1\" \"2\"\n\nx4 &lt;- as.factor(x1)\nx4\n## [1] 0 1 2\n## Levels: 0 1 2\nstr(x4)\n##  Factor w/ 3 levels \"0\",\"1\",\"2\": 1 2 3\n\n\nstr(iris)\n## 'data.frame':    150 obs. of  5 variables:\n##  $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n##  $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n##  $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n##  $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n##  $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\nView(iris)\nhead(iris)\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1          5.1         3.5          1.4         0.2  setosa\n## 2          4.9         3.0          1.4         0.2  setosa\n## 3          4.7         3.2          1.3         0.2  setosa\n## 4          4.6         3.1          1.5         0.2  setosa\n## 5          5.0         3.6          1.4         0.2  setosa\n## 6          5.4         3.9          1.7         0.4  setosa\n\nNewData &lt;- iris[, 1:4]\nhead(NewData)\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width\n## 1          5.1         3.5          1.4         0.2\n## 2          4.9         3.0          1.4         0.2\n## 3          4.7         3.2          1.3         0.2\n## 4          4.6         3.1          1.5         0.2\n## 5          5.0         3.6          1.4         0.2\n## 6          5.4         3.9          1.7         0.4\n\nnames(NewData) &lt;- c('SepalLength', 'SepalWidth', 'PetalLength', 'PetalWidth')\nhead(NewData)\n##   SepalLength SepalWidth PetalLength PetalWidth\n## 1         5.1        3.5         1.4        0.2\n## 2         4.9        3.0         1.4        0.2\n## 3         4.7        3.2         1.3        0.2\n## 4         4.6        3.1         1.5        0.2\n## 5         5.0        3.6         1.4        0.2\n## 6         5.4        3.9         1.7        0.4\n\nNewData2 &lt;- NewData$SepalLength\nhead(NewData2)\n## [1] 5.1 4.9 4.7 4.6 5.0 5.4\n\nNewData3 &lt;- NewData[1:4, ]\nNewData3\n##   SepalLength SepalWidth PetalLength PetalWidth\n## 1         5.1        3.5         1.4        0.2\n## 2         4.9        3.0         1.4        0.2\n## 3         4.7        3.2         1.3        0.2\n## 4         4.6        3.1         1.5        0.2\n\n\niris_test &lt;- iris\n\niris_test[c(5, 7, 8, 20, 60, 100), 1] &lt;- NA\niris_test[c(1, 2, 3), 3] &lt;- NA\n\niris_test[!complete.cases(iris_test), ]\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 1            5.1         3.5           NA         0.2     setosa\n## 2            4.9         3.0           NA         0.2     setosa\n## 3            4.7         3.2           NA         0.2     setosa\n## 5             NA         3.6          1.4         0.2     setosa\n## 7             NA         3.4          1.4         0.3     setosa\n## 8             NA         3.4          1.5         0.2     setosa\n## 20            NA         3.8          1.5         0.3     setosa\n## 60            NA         2.7          3.9         1.4 versicolor\n## 100           NA         2.8          4.1         1.3 versicolor\nmapply(mean, iris_test[1:4], na.rm = TRUE)\n## Sepal.Length  Sepal.Width Petal.Length  Petal.Width \n##     5.874306     3.057333     3.806803     1.199333\n\n\n# remotes::install_github('cran/DMwR')\nlibrary(DMwR)\n## 필요한 패키지를 로딩중입니다: grid\n## Registered S3 method overwritten by 'quantmod':\n##   method            from\n##   as.zoo.data.frame zoo\niris_test[!complete.cases(iris_test),]\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 1            5.1         3.5           NA         0.2     setosa\n## 2            4.9         3.0           NA         0.2     setosa\n## 3            4.7         3.2           NA         0.2     setosa\n## 5             NA         3.6          1.4         0.2     setosa\n## 7             NA         3.4          1.4         0.3     setosa\n## 8             NA         3.4          1.5         0.2     setosa\n## 20            NA         3.8          1.5         0.3     setosa\n## 60            NA         2.7          3.9         1.4 versicolor\n## 100           NA         2.8          4.1         1.3 versicolor\n\ncentralImputation(iris_test[1:4]) [c(1, 2, 3, 5, 7, 8, 20, 60, 100),]\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width\n## 1            5.1         3.5          4.4         0.2\n## 2            4.9         3.0          4.4         0.2\n## 3            4.7         3.2          4.4         0.2\n## 5            5.8         3.6          1.4         0.2\n## 7            5.8         3.4          1.4         0.3\n## 8            5.8         3.4          1.5         0.2\n## 20           5.8         3.8          1.5         0.3\n## 60           5.8         2.7          3.9         1.4\n## 100          5.8         2.8          4.1         1.3\ntest &lt;- centralImputation(iris_test[1:4]) [c(1, 2, 3, 5, 7, 8, 20, 60, 100),]\nmapply(mean, test[1:4], na.rm = TRUE)\n## Sepal.Length  Sepal.Width Petal.Length  Petal.Width \n##    5.5000000    3.2666667    3.0000000    0.4777778\n\nknnImputation(iris_test[1:4]) [c(1, 2, 3, 5, 7, 8, 20, 60, 100),]\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width\n## 1       5.100000         3.5     1.516369         0.2\n## 2       4.900000         3.0     1.474809         0.2\n## 3       4.700000         3.2     1.465061         0.2\n## 5       5.126393         3.6     1.400000         0.2\n## 7       5.121179         3.4     1.400000         0.3\n## 8       5.135950         3.4     1.500000         0.2\n## 20      5.322481         3.8     1.500000         0.3\n## 60      5.782111         2.7     3.900000         1.4\n## 100     5.977315         2.8     4.100000         1.3\ntest2 &lt;- knnImputation(iris_test[1:4]) [c(1, 2, 3, 5, 7, 8, 20, 60, 100),]\nmapply(mean, test2[1:4], na.rm = TRUE)\n## Sepal.Length  Sepal.Width Petal.Length  Petal.Width \n##    5.2406032    3.2666667    2.0284709    0.4777778\n\n\nplot(iris$Sepal.Length, iris$Sepal.Width)\n\n\n\n\n\nhead(iris)\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1          5.1         3.5          1.4         0.2  setosa\n## 2          4.9         3.0          1.4         0.2  setosa\n## 3          4.7         3.2          1.3         0.2  setosa\n## 4          4.6         3.1          1.5         0.2  setosa\n## 5          5.0         3.6          1.4         0.2  setosa\n## 6          5.4         3.9          1.7         0.4  setosa\ncbind(as.data.frame(scale(iris[1:4])), iris$Species)\n##     Sepal.Length Sepal.Width Petal.Length   Petal.Width iris$Species\n## 1    -0.89767388  1.01560199  -1.33575163 -1.3110521482       setosa\n## 2    -1.13920048 -0.13153881  -1.33575163 -1.3110521482       setosa\n## 3    -1.38072709  0.32731751  -1.39239929 -1.3110521482       setosa\n## 4    -1.50149039  0.09788935  -1.27910398 -1.3110521482       setosa\n## 5    -1.01843718  1.24503015  -1.33575163 -1.3110521482       setosa\n## 6    -0.53538397  1.93331463  -1.16580868 -1.0486667950       setosa\n## 7    -1.50149039  0.78617383  -1.33575163 -1.1798594716       setosa\n## 8    -1.01843718  0.78617383  -1.27910398 -1.3110521482       setosa\n## 9    -1.74301699 -0.36096697  -1.33575163 -1.3110521482       setosa\n## 10   -1.13920048  0.09788935  -1.27910398 -1.4422448248       setosa\n## 11   -0.53538397  1.47445831  -1.27910398 -1.3110521482       setosa\n## 12   -1.25996379  0.78617383  -1.22245633 -1.3110521482       setosa\n## 13   -1.25996379 -0.13153881  -1.33575163 -1.4422448248       setosa\n## 14   -1.86378030 -0.13153881  -1.50569459 -1.4422448248       setosa\n## 15   -0.05233076  2.16274279  -1.44904694 -1.3110521482       setosa\n## 16   -0.17309407  3.08045544  -1.27910398 -1.0486667950       setosa\n## 17   -0.53538397  1.93331463  -1.39239929 -1.0486667950       setosa\n## 18   -0.89767388  1.01560199  -1.33575163 -1.1798594716       setosa\n## 19   -0.17309407  1.70388647  -1.16580868 -1.1798594716       setosa\n## 20   -0.89767388  1.70388647  -1.27910398 -1.1798594716       setosa\n## 21   -0.53538397  0.78617383  -1.16580868 -1.3110521482       setosa\n## 22   -0.89767388  1.47445831  -1.27910398 -1.0486667950       setosa\n## 23   -1.50149039  1.24503015  -1.56234224 -1.3110521482       setosa\n## 24   -0.89767388  0.55674567  -1.16580868 -0.9174741184       setosa\n## 25   -1.25996379  0.78617383  -1.05251337 -1.3110521482       setosa\n## 26   -1.01843718 -0.13153881  -1.22245633 -1.3110521482       setosa\n## 27   -1.01843718  0.78617383  -1.22245633 -1.0486667950       setosa\n## 28   -0.77691058  1.01560199  -1.27910398 -1.3110521482       setosa\n## 29   -0.77691058  0.78617383  -1.33575163 -1.3110521482       setosa\n## 30   -1.38072709  0.32731751  -1.22245633 -1.3110521482       setosa\n## 31   -1.25996379  0.09788935  -1.22245633 -1.3110521482       setosa\n## 32   -0.53538397  0.78617383  -1.27910398 -1.0486667950       setosa\n## 33   -0.77691058  2.39217095  -1.27910398 -1.4422448248       setosa\n## 34   -0.41462067  2.62159911  -1.33575163 -1.3110521482       setosa\n## 35   -1.13920048  0.09788935  -1.27910398 -1.3110521482       setosa\n## 36   -1.01843718  0.32731751  -1.44904694 -1.3110521482       setosa\n## 37   -0.41462067  1.01560199  -1.39239929 -1.3110521482       setosa\n## 38   -1.13920048  1.24503015  -1.33575163 -1.4422448248       setosa\n## 39   -1.74301699 -0.13153881  -1.39239929 -1.3110521482       setosa\n## 40   -0.89767388  0.78617383  -1.27910398 -1.3110521482       setosa\n## 41   -1.01843718  1.01560199  -1.39239929 -1.1798594716       setosa\n## 42   -1.62225369 -1.73753594  -1.39239929 -1.1798594716       setosa\n## 43   -1.74301699  0.32731751  -1.39239929 -1.3110521482       setosa\n## 44   -1.01843718  1.01560199  -1.22245633 -0.7862814418       setosa\n## 45   -0.89767388  1.70388647  -1.05251337 -1.0486667950       setosa\n## 46   -1.25996379 -0.13153881  -1.33575163 -1.1798594716       setosa\n## 47   -0.89767388  1.70388647  -1.22245633 -1.3110521482       setosa\n## 48   -1.50149039  0.32731751  -1.33575163 -1.3110521482       setosa\n## 49   -0.65614727  1.47445831  -1.27910398 -1.3110521482       setosa\n## 50   -1.01843718  0.55674567  -1.33575163 -1.3110521482       setosa\n## 51    1.39682886  0.32731751   0.53362088  0.2632599711   versicolor\n## 52    0.67224905  0.32731751   0.42032558  0.3944526477   versicolor\n## 53    1.27606556  0.09788935   0.64691619  0.3944526477   versicolor\n## 54   -0.41462067 -1.73753594   0.13708732  0.1320672944   versicolor\n## 55    0.79301235 -0.59039513   0.47697323  0.3944526477   versicolor\n## 56   -0.17309407 -0.59039513   0.42032558  0.1320672944   versicolor\n## 57    0.55148575  0.55674567   0.53362088  0.5256453243   versicolor\n## 58   -1.13920048 -1.50810778  -0.25944625 -0.2615107354   versicolor\n## 59    0.91377565 -0.36096697   0.47697323  0.1320672944   versicolor\n## 60   -0.77691058 -0.81982329   0.08043967  0.2632599711   versicolor\n## 61   -1.01843718 -2.42582042  -0.14615094 -0.2615107354   versicolor\n## 62    0.06843254 -0.13153881   0.25038262  0.3944526477   versicolor\n## 63    0.18919584 -1.96696410   0.13708732 -0.2615107354   versicolor\n## 64    0.30995914 -0.36096697   0.53362088  0.2632599711   versicolor\n## 65   -0.29385737 -0.36096697  -0.08950329  0.1320672944   versicolor\n## 66    1.03453895  0.09788935   0.36367793  0.2632599711   versicolor\n## 67   -0.29385737 -0.13153881   0.42032558  0.3944526477   versicolor\n## 68   -0.05233076 -0.81982329   0.19373497 -0.2615107354   versicolor\n## 69    0.43072244 -1.96696410   0.42032558  0.3944526477   versicolor\n## 70   -0.29385737 -1.27867961   0.08043967 -0.1303180588   versicolor\n## 71    0.06843254  0.32731751   0.59026853  0.7880306775   versicolor\n## 72    0.30995914 -0.59039513   0.13708732  0.1320672944   versicolor\n## 73    0.55148575 -1.27867961   0.64691619  0.3944526477   versicolor\n## 74    0.30995914 -0.59039513   0.53362088  0.0008746178   versicolor\n## 75    0.67224905 -0.36096697   0.30703027  0.1320672944   versicolor\n## 76    0.91377565 -0.13153881   0.36367793  0.2632599711   versicolor\n## 77    1.15530226 -0.59039513   0.59026853  0.2632599711   versicolor\n## 78    1.03453895 -0.13153881   0.70356384  0.6568380009   versicolor\n## 79    0.18919584 -0.36096697   0.42032558  0.3944526477   versicolor\n## 80   -0.17309407 -1.04925145  -0.14615094 -0.2615107354   versicolor\n## 81   -0.41462067 -1.50810778   0.02379201 -0.1303180588   versicolor\n## 82   -0.41462067 -1.50810778  -0.03285564 -0.2615107354   versicolor\n## 83   -0.05233076 -0.81982329   0.08043967  0.0008746178   versicolor\n## 84    0.18919584 -0.81982329   0.76021149  0.5256453243   versicolor\n## 85   -0.53538397 -0.13153881   0.42032558  0.3944526477   versicolor\n## 86    0.18919584  0.78617383   0.42032558  0.5256453243   versicolor\n## 87    1.03453895  0.09788935   0.53362088  0.3944526477   versicolor\n## 88    0.55148575 -1.73753594   0.36367793  0.1320672944   versicolor\n## 89   -0.29385737 -0.13153881   0.19373497  0.1320672944   versicolor\n## 90   -0.41462067 -1.27867961   0.13708732  0.1320672944   versicolor\n## 91   -0.41462067 -1.04925145   0.36367793  0.0008746178   versicolor\n## 92    0.30995914 -0.13153881   0.47697323  0.2632599711   versicolor\n## 93   -0.05233076 -1.04925145   0.13708732  0.0008746178   versicolor\n## 94   -1.01843718 -1.73753594  -0.25944625 -0.2615107354   versicolor\n## 95   -0.29385737 -0.81982329   0.25038262  0.1320672944   versicolor\n## 96   -0.17309407 -0.13153881   0.25038262  0.0008746178   versicolor\n## 97   -0.17309407 -0.36096697   0.25038262  0.1320672944   versicolor\n## 98    0.43072244 -0.36096697   0.30703027  0.1320672944   versicolor\n## 99   -0.89767388 -1.27867961  -0.42938920 -0.1303180588   versicolor\n## 100  -0.17309407 -0.59039513   0.19373497  0.1320672944   versicolor\n## 101   0.55148575  0.55674567   1.27004036  1.7063794137    virginica\n## 102  -0.05233076 -0.81982329   0.76021149  0.9192233541    virginica\n## 103   1.51759216 -0.13153881   1.21339271  1.1816087073    virginica\n## 104   0.55148575 -0.36096697   1.04344975  0.7880306775    virginica\n## 105   0.79301235 -0.13153881   1.15674505  1.3128013839    virginica\n## 106   2.12140867 -0.13153881   1.60992627  1.1816087073    virginica\n## 107  -1.13920048 -1.27867961   0.42032558  0.6568380009    virginica\n## 108   1.75911877 -0.36096697   1.43998331  0.7880306775    virginica\n## 109   1.03453895 -1.27867961   1.15674505  0.7880306775    virginica\n## 110   1.63835547  1.24503015   1.32668801  1.7063794137    virginica\n## 111   0.79301235  0.32731751   0.76021149  1.0504160307    virginica\n## 112   0.67224905 -0.81982329   0.87350679  0.9192233541    virginica\n## 113   1.15530226 -0.13153881   0.98680210  1.1816087073    virginica\n## 114  -0.17309407 -1.27867961   0.70356384  1.0504160307    virginica\n## 115  -0.05233076 -0.59039513   0.76021149  1.5751867371    virginica\n## 116   0.67224905  0.32731751   0.87350679  1.4439940605    virginica\n## 117   0.79301235 -0.13153881   0.98680210  0.7880306775    virginica\n## 118   2.24217198  1.70388647   1.66657392  1.3128013839    virginica\n## 119   2.24217198 -1.04925145   1.77986923  1.4439940605    virginica\n## 120   0.18919584 -1.96696410   0.70356384  0.3944526477    virginica\n## 121   1.27606556  0.32731751   1.10009740  1.4439940605    virginica\n## 122  -0.29385737 -0.59039513   0.64691619  1.0504160307    virginica\n## 123   2.24217198 -0.59039513   1.66657392  1.0504160307    virginica\n## 124   0.55148575 -0.81982329   0.64691619  0.7880306775    virginica\n## 125   1.03453895  0.55674567   1.10009740  1.1816087073    virginica\n## 126   1.63835547  0.32731751   1.27004036  0.7880306775    virginica\n## 127   0.43072244 -0.59039513   0.59026853  0.7880306775    virginica\n## 128   0.30995914 -0.13153881   0.64691619  0.7880306775    virginica\n## 129   0.67224905 -0.59039513   1.04344975  1.1816087073    virginica\n## 130   1.63835547 -0.13153881   1.15674505  0.5256453243    virginica\n## 131   1.87988207 -0.59039513   1.32668801  0.9192233541    virginica\n## 132   2.48369858  1.70388647   1.49663097  1.0504160307    virginica\n## 133   0.67224905 -0.59039513   1.04344975  1.3128013839    virginica\n## 134   0.55148575 -0.59039513   0.76021149  0.3944526477    virginica\n## 135   0.30995914 -1.04925145   1.04344975  0.2632599711    virginica\n## 136   2.24217198 -0.13153881   1.32668801  1.4439940605    virginica\n## 137   0.55148575  0.78617383   1.04344975  1.5751867371    virginica\n## 138   0.67224905  0.09788935   0.98680210  0.7880306775    virginica\n## 139   0.18919584 -0.13153881   0.59026853  0.7880306775    virginica\n## 140   1.27606556  0.09788935   0.93015445  1.1816087073    virginica\n## 141   1.03453895  0.09788935   1.04344975  1.5751867371    virginica\n## 142   1.27606556  0.09788935   0.76021149  1.4439940605    virginica\n## 143  -0.05233076 -0.81982329   0.76021149  0.9192233541    virginica\n## 144   1.15530226  0.32731751   1.21339271  1.4439940605    virginica\n## 145   1.03453895  0.55674567   1.10009740  1.7063794137    virginica\n## 146   1.03453895 -0.13153881   0.81685914  1.4439940605    virginica\n## 147   0.55148575 -1.27867961   0.70356384  0.9192233541    virginica\n## 148   0.79301235 -0.13153881   0.81685914  1.0504160307    virginica\n## 149   0.43072244  0.78617383   0.93015445  1.4439940605    virginica\n## 150   0.06843254 -0.13153881   0.76021149  0.7880306775    virginica\n\n\nbaseData &lt;- c(1:10)\nbaseData2 &lt;- baseData + runif(10, min = -3, max = 3)\nbaseData3 &lt;- baseData + baseData2 + runif(10, min = -7, max = 7)\n\n(TestData &lt;- data.frame(baseData, baseData2, baseData3))\n##    baseData   baseData2 baseData3\n## 1         1  0.02790708 -1.224556\n## 2         2  4.74698066 11.087301\n## 3         3  0.97834826  6.071430\n## 4         4  1.44691955 10.250507\n## 5         5  2.86470251 13.838617\n## 6         6  8.09849538 20.084094\n## 7         7  9.45911123 20.750199\n## 8         8  9.68696177 15.847490\n## 9         9  9.94587955 20.347235\n## 10       10 10.62958834 20.206120\n\nResult &lt;- princomp(TestData)\nsummary(Result)\n## Importance of components:\n##                           Comp.1     Comp.2     Comp.3\n## Standard deviation     8.2631744 1.69713766 1.08134158\n## Proportion of Variance 0.9440122 0.03982153 0.01616626\n## Cumulative Proportion  0.9440122 0.98383374 1.00000000\n# Standard deviation : 표준편차\n# Proportion of Variance : 주성분의 기여율\n# Cumulative Proportion : 누적 기여율\n\nplot(Result, type = 'l')\n\n\n\nResult$scores[, 1:2]\n##           Comp.1     Comp.2\n##  [1,] -16.486583  2.2342939\n##  [2,]  -3.776824 -0.8756812\n##  [3,]  -9.351824 -0.2326977\n##  [4,]  -5.345739 -1.7655781\n##  [5,]  -1.398173 -2.3145039\n##  [6,]   6.500569 -1.7015177\n##  [7,]   7.991620 -0.6680233\n##  [8,]   4.333934  2.6738013\n##  [9,]   8.511098  0.8180516\n## [10,]   9.021923  1.8318551\n\n\nlibrary(caret)\n# install.packages('mlbench')\nlibrary(mlbench)\nnearZeroVar(iris, saveMetrics = TRUE)\n##              freqRatio percentUnique zeroVar   nzv\n## Sepal.Length  1.111111      23.33333   FALSE FALSE\n## Sepal.Width   1.857143      15.33333   FALSE FALSE\n## Petal.Length  1.000000      28.66667   FALSE FALSE\n## Petal.Width   2.230769      14.66667   FALSE FALSE\n## Species       1.000000       2.00000   FALSE FALSE\n# nzv가 TRUE이면 0에 가까운 분산을 가지는 변수\n\ndata(Soybean)\nhead(Soybean)\n##                   Class date plant.stand precip temp hail crop.hist area.dam\n## 1 diaporthe-stem-canker    6           0      2    1    0         1        1\n## 2 diaporthe-stem-canker    4           0      2    1    0         2        0\n## 3 diaporthe-stem-canker    3           0      2    1    0         1        0\n## 4 diaporthe-stem-canker    3           0      2    1    0         1        0\n## 5 diaporthe-stem-canker    6           0      2    1    0         2        0\n## 6 diaporthe-stem-canker    5           0      2    1    0         3        0\n##   sever seed.tmt germ plant.growth leaves leaf.halo leaf.marg leaf.size\n## 1     1        0    0            1      1         0         2         2\n## 2     2        1    1            1      1         0         2         2\n## 3     2        1    2            1      1         0         2         2\n## 4     2        0    1            1      1         0         2         2\n## 5     1        0    2            1      1         0         2         2\n## 6     1        0    1            1      1         0         2         2\n##   leaf.shread leaf.malf leaf.mild stem lodging stem.cankers canker.lesion\n## 1           0         0         0    1       1            3             1\n## 2           0         0         0    1       0            3             1\n## 3           0         0         0    1       0            3             0\n## 4           0         0         0    1       0            3             0\n## 5           0         0         0    1       0            3             1\n## 6           0         0         0    1       0            3             0\n##   fruiting.bodies ext.decay mycelium int.discolor sclerotia fruit.pods\n## 1               1         1        0            0         0          0\n## 2               1         1        0            0         0          0\n## 3               1         1        0            0         0          0\n## 4               1         1        0            0         0          0\n## 5               1         1        0            0         0          0\n## 6               1         1        0            0         0          0\n##   fruit.spots seed mold.growth seed.discolor seed.size shriveling roots\n## 1           4    0           0             0         0          0     0\n## 2           4    0           0             0         0          0     0\n## 3           4    0           0             0         0          0     0\n## 4           4    0           0             0         0          0     0\n## 5           4    0           0             0         0          0     0\n## 6           4    0           0             0         0          0     0\n\nnearZeroVar(Soybean, saveMetrics = TRUE)\n##                  freqRatio percentUnique zeroVar   nzv\n## Class             1.010989     2.7818448   FALSE FALSE\n## date              1.137405     1.0248902   FALSE FALSE\n## plant.stand       1.208191     0.2928258   FALSE FALSE\n## precip            4.098214     0.4392387   FALSE FALSE\n## temp              1.879397     0.4392387   FALSE FALSE\n## hail              3.425197     0.2928258   FALSE FALSE\n## crop.hist         1.004587     0.5856515   FALSE FALSE\n## area.dam          1.213904     0.5856515   FALSE FALSE\n## sever             1.651282     0.4392387   FALSE FALSE\n## seed.tmt          1.373874     0.4392387   FALSE FALSE\n## germ              1.103627     0.4392387   FALSE FALSE\n## plant.growth      1.951327     0.2928258   FALSE FALSE\n## leaves            7.870130     0.2928258   FALSE FALSE\n## leaf.halo         1.547511     0.4392387   FALSE FALSE\n## leaf.marg         1.615385     0.4392387   FALSE FALSE\n## leaf.size         1.479638     0.4392387   FALSE FALSE\n## leaf.shread       5.072917     0.2928258   FALSE FALSE\n## leaf.malf        12.311111     0.2928258   FALSE FALSE\n## leaf.mild        26.750000     0.4392387   FALSE  TRUE\n## stem              1.253378     0.2928258   FALSE FALSE\n## lodging          12.380952     0.2928258   FALSE FALSE\n## stem.cankers      1.984293     0.5856515   FALSE FALSE\n## canker.lesion     1.807910     0.5856515   FALSE FALSE\n## fruiting.bodies   4.548077     0.2928258   FALSE FALSE\n## ext.decay         3.681481     0.4392387   FALSE FALSE\n## mycelium        106.500000     0.2928258   FALSE  TRUE\n## int.discolor     13.204545     0.4392387   FALSE FALSE\n## sclerotia        31.250000     0.2928258   FALSE  TRUE\n## fruit.pods        3.130769     0.5856515   FALSE FALSE\n## fruit.spots       3.450000     0.5856515   FALSE FALSE\n## seed              4.139130     0.2928258   FALSE FALSE\n## mold.growth       7.820896     0.2928258   FALSE FALSE\n## seed.discolor     8.015625     0.2928258   FALSE FALSE\n## seed.size         9.016949     0.2928258   FALSE FALSE\n## shriveling       14.184211     0.2928258   FALSE FALSE\n## roots             6.406977     0.4392387   FALSE FALSE\n\n\nlibrary(caret) \nhead(iris)\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1          5.1         3.5          1.4         0.2  setosa\n## 2          4.9         3.0          1.4         0.2  setosa\n## 3          4.7         3.2          1.3         0.2  setosa\n## 4          4.6         3.1          1.5         0.2  setosa\n## 5          5.0         3.6          1.4         0.2  setosa\n## 6          5.4         3.9          1.7         0.4  setosa\n\nfindCorrelation(cor(subset(iris, select = -c(Species))))\n## [1] 3\n# 상관관계가 높은 3번째 열의 변수를 제거\nMyiris &lt;- iris[, -c(3)]\nhead(Myiris)\n##   Sepal.Length Sepal.Width Petal.Width Species\n## 1          5.1         3.5         0.2  setosa\n## 2          4.9         3.0         0.2  setosa\n## 3          4.7         3.2         0.2  setosa\n## 4          4.6         3.1         0.2  setosa\n## 5          5.0         3.6         0.2  setosa\n## 6          5.4         3.9         0.4  setosa\n\nlibrary(mlbench)\ndata(Vehicle)\nhead(Vehicle)\n##   Comp Circ D.Circ Rad.Ra Pr.Axis.Ra Max.L.Ra Scat.Ra Elong Pr.Axis.Rect\n## 1   95   48     83    178         72       10     162    42           20\n## 2   91   41     84    141         57        9     149    45           19\n## 3  104   50    106    209         66       10     207    32           23\n## 4   93   41     82    159         63        9     144    46           19\n## 5   85   44     70    205        103       52     149    45           19\n## 6  107   57    106    172         50        6     255    26           28\n##   Max.L.Rect Sc.Var.Maxis Sc.Var.maxis Ra.Gyr Skew.Maxis Skew.maxis Kurt.maxis\n## 1        159          176          379    184         70          6         16\n## 2        143          170          330    158         72          9         14\n## 3        158          223          635    220         73         14          9\n## 4        143          160          309    127         63          6         10\n## 5        144          241          325    188        127          9         11\n## 6        169          280          957    264         85          5          9\n##   Kurt.Maxis Holl.Ra Class\n## 1        187     197   van\n## 2        189     199   van\n## 3        188     196  saab\n## 4        199     207   van\n## 5        180     183   bus\n## 6        181     183   bus\n\nfindCorrelation(cor(subset(Vehicle, select = -c(Class))))\n## [1]  3  8 11  7  9  2\n\ncor(subset(Vehicle, select = -c(Class))) [c(3, 8, 11, 7, 9, 2), c(3, 8, 11, 7, 9, 2)]\n##                  D.Circ      Elong Sc.Var.Maxis    Scat.Ra Pr.Axis.Rect\n## D.Circ        1.0000000 -0.9123072    0.8644323  0.9072801    0.8953261\n## Elong        -0.9123072  1.0000000   -0.9383919 -0.9733853   -0.9505124\n## Sc.Var.Maxis  0.8644323 -0.9383919    1.0000000  0.9518621    0.9382664\n## Scat.Ra       0.9072801 -0.9733853    0.9518621  1.0000000    0.9920883\n## Pr.Axis.Rect  0.8953261 -0.9505124    0.9382664  0.9920883    1.0000000\n## Circ          0.7984920 -0.8287548    0.8084963  0.8603671    0.8579253\n##                    Circ\n## D.Circ        0.7984920\n## Elong        -0.8287548\n## Sc.Var.Maxis  0.8084963\n## Scat.Ra       0.8603671\n## Pr.Axis.Rect  0.8579253\n## Circ          1.0000000\n\nmyVehicle &lt;- Vehicle[, -c(3, 8, 11, 7, 9, 2)]\nhead(myVehicle)\n##   Comp Rad.Ra Pr.Axis.Ra Max.L.Ra Max.L.Rect Sc.Var.maxis Ra.Gyr Skew.Maxis\n## 1   95    178         72       10        159          379    184         70\n## 2   91    141         57        9        143          330    158         72\n## 3  104    209         66       10        158          635    220         73\n## 4   93    159         63        9        143          309    127         63\n## 5   85    205        103       52        144          325    188        127\n## 6  107    172         50        6        169          957    264         85\n##   Skew.maxis Kurt.maxis Kurt.Maxis Holl.Ra Class\n## 1          6         16        187     197   van\n## 2          9         14        189     199   van\n## 3         14          9        188     196  saab\n## 4          6         10        199     207   van\n## 5          9         11        180     183   bus\n## 6          5          9        181     183   bus\n\n\n# install.packages('FSelector')\nlibrary(FSelector)\nlibrary(mlbench)\n\ndata(Vehicle) \n(cs &lt;- chi.squared(Class ~., data=Vehicle))  \n##              attr_importance\n## Comp               0.3043172\n## Circ               0.2974762\n## D.Circ             0.3587826\n## Rad.Ra             0.3509038\n## Pr.Axis.Ra         0.2264652\n## Max.L.Ra           0.3234535\n## Scat.Ra            0.4653985\n## Elong              0.4556748\n## Pr.Axis.Rect       0.4475087\n## Max.L.Rect         0.3059760\n## Sc.Var.Maxis       0.4338378\n## Sc.Var.maxis       0.4921648\n## Ra.Gyr             0.2940064\n## Skew.Maxis         0.3087694\n## Skew.maxis         0.2470216\n## Kurt.maxis         0.3338930\n## Kurt.Maxis         0.2732117\n## Holl.Ra            0.3886266\ncutoff.k(cs,3)\n## [1] \"Sc.Var.maxis\" \"Scat.Ra\"      \"Elong\""
  },
  {
    "objectID": "Data_Exploration/Data_Exploration_CH05.html",
    "href": "Data_Exploration/Data_Exploration_CH05.html",
    "title": "통계 분석",
    "section": "",
    "text": "Part 5 : 통계 분석\n\nrnorm(100, 0, 10)                       # 평균 0, 표준편차 10인 난수 100개\n##   [1]  10.1691147  -1.9539903   4.7280175  -9.7777299 -18.3637460  14.4551989\n##   [7]  -4.6763128  15.6670041   0.6676567  13.9785296 -18.0190443 -18.0436531\n##  [13]  -3.9527029   0.7478401   9.1900835  -7.0521595   6.8621197  13.6900343\n##  [19]  -9.3103125 -10.0690412   7.1871643  11.2419209   4.4868759 -12.9824696\n##  [25]   4.3893092  -5.6387045  -7.2320161 -20.5636355   2.0603883   3.9921619\n##  [31]  -6.7328882  -5.6452404  -3.2626421  -7.3690476  -5.0745257  12.7351467\n##  [37]  -2.0973990  17.4678561  10.9485830  -2.1654990 -12.2556263   8.3117521\n##  [43] -12.4107450 -12.9144357   5.3956762 -16.2097865  19.4132111   5.4497466\n##  [49]  -7.8379171   5.1814634  -4.4914354  14.8241354  -0.4757118   0.5444682\n##  [55]  -8.0023965  -8.3132307  -6.6684513  22.3940529   4.7559224  -5.8046097\n##  [61]  -3.5813743   4.5747053   8.5937855   2.9002156   4.6542611  15.4001204\n##  [67]  -4.1085929   5.4111726   8.9028201  -5.1797422 -10.0309176 -13.3107919\n##  [73]   2.9171685  -1.1473504  -0.2779862  -8.0434971   3.8523145   5.4566305\n##  [79]  -7.2264379  -2.5397832  12.0914305  -7.6308610 -16.7228759   7.8378102\n##  [85] -11.3811175   3.1493065  -7.9295995   4.7360833  18.4695556   0.8346768\n##  [91]   3.3937306   1.4302906   3.4372731  -0.6018020   1.1344057   3.9452640\n##  [97]  -6.8196057   0.0671072   6.8879676   1.4725327\nplot(density(rnorm(1000000, 0, 10)))    # 확률밀도함수\n\n\n\n\n\nrnorm(4)\n## [1] 0.2555983 0.4513075 1.0152226 0.1148766\nrnorm(4, mean = 3)\n## [1] 3.210620 2.767055 2.994923 2.210780\nrnorm(4, mean = 3, sd = 3)\n## [1] -0.5390331  1.5985926  0.1884828 -0.3931602\ny &lt;- rnorm(200)\nhist(y)                     # 히스토그램\n\n\n\n\n\nsample(1:10, 5) # 비복원추출\n## [1] 2 6 1 4 7\nsample(1:10, 5, replace = TRUE) # 복원추출\n## [1] 2 4 1 7 9\nsample(1:10, 5, replace = TRUE, prob = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) # prob : 가중치\n## [1]  6 10 10 10  7\nsample(1:10, 5, replace = TRUE, prob = c(10, 22, 3, 4, 5, 6, 7, 8, 9, 10))\n## [1] 5 2 4 2 5\n\n\n# install.packages('sampling')\nlibrary(sampling)\n\n# 층화 임의 추출\n(x &lt;- strata(c('Species'), size = c(3, 3, 3), method = 'srswor', data = iris))\n##        Species ID_unit Prob Stratum\n## 12      setosa      12 0.06       1\n## 24      setosa      24 0.06       1\n## 45      setosa      45 0.06       1\n## 62  versicolor      62 0.06       2\n## 86  versicolor      86 0.06       2\n## 99  versicolor      99 0.06       2\n## 104  virginica     104 0.06       3\n## 105  virginica     105 0.06       3\n## 114  virginica     114 0.06       3\n# 'srswor' : 복원 단순 임의추출 / 'poisson' : 포아송 분포에 따르는 추출 / 'systematic' : 계통 추출\ngetdata(iris, x)\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species ID_unit Prob\n## 12           4.8         3.4          1.6         0.2     setosa      12 0.06\n## 24           5.1         3.3          1.7         0.5     setosa      24 0.06\n## 45           5.1         3.8          1.9         0.4     setosa      45 0.06\n## 62           5.9         3.0          4.2         1.5 versicolor      62 0.06\n## 86           6.0         3.4          4.5         1.6 versicolor      86 0.06\n## 99           5.1         2.5          3.0         1.1 versicolor      99 0.06\n## 104          6.3         2.9          5.6         1.8  virginica     104 0.06\n## 105          6.5         3.0          5.8         2.2  virginica     105 0.06\n## 114          5.7         2.5          5.0         2.0  virginica     114 0.06\n##     Stratum\n## 12        1\n## 24        1\n## 45        1\n## 62        2\n## 86        2\n## 99        2\n## 104       3\n## 105       3\n## 114       3\n\n\n# install.packages('doBy')\nlibrary(doBy)\n## \n## 다음의 패키지를 부착합니다: 'doBy'\n## The following object is masked from 'package:dplyr':\n## \n##     order_by\n\n# 층화 임의 추출 중 계통 추출 사용\nx &lt;- iris$Sepal.Length\nx\n##   [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1\n##  [19] 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0\n##  [37] 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5\n##  [55] 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1\n##  [73] 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5\n##  [91] 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3\n## [109] 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6 7.7 6.3 6.7 7.2\n## [127] 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8\n## [145] 6.7 6.7 6.3 6.5 6.2 5.9\nx_dataframe &lt;- data.frame(x)\nhead(x_dataframe)\n##     x\n## 1 5.1\n## 2 4.9\n## 3 4.7\n## 4 4.6\n## 5 5.0\n## 6 5.4\n\n\nsampleBy( ~ 1, frac = 0.3, data = x_dataframe, systematic = TRUE)\n##   [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14]\n## 1  5.1  4.6  4.6  5.4  4.3  5.4  5.4  5.1    5   4.8   5.5   5.5     5     5\n##   [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26] [,27]\n## 1   5.1     7   5.5   6.3     5   6.1   5.6   5.9   6.1   6.8   5.5     6   6.7\n##   [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37] [,38] [,39] [,40]\n## 1   5.5     5   5.7   6.3   6.3   4.9   6.5   5.7   6.5   6.9   6.3   6.2   7.4\n##   [,41] [,42] [,43] [,44] [,45]\n## 1   6.3   6.3   6.7   6.8   6.3\n# frac = 0.3 : 데이터의 30%만 추출 / systematic = TRUE : 계통 추출\n\n\nx &lt;- c(1:5)\nmean(x)             # 평균\n## [1] 3\nvar(x)              # 분산\n## [1] 2.5\nsd(x)               # 표준편차\n## [1] 1.581139\nfivenum(1:100)      # 대표적인 5가지 숫자(summary와 같음)\n## [1]   1.0  25.5  50.5  75.5 100.0\nsummary(1:100)      # 기초통계량\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##    1.00   25.75   50.50   50.50   75.25  100.00\nsummary(iris)\n##   Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n##  Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n##  1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n##  Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n##  Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n##  3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n##  Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n##        Species  \n##  setosa    :50  \n##  versicolor:50  \n##  virginica :50  \n##                 \n##                 \n## \nx &lt;- factor(c('A', 'B', 'C', 'D', 'D', 'C', 'A', 'A', 'A'))\ntable(x)            # 빈도표\n## x\n## A B C D \n## 4 1 2 2\nwhich.max(table(x)) # 가장 높은 빈도의 범주\n## A \n## 1\nwhich.min(table(x)) # 가장 낮은 빈도의 범주\n## B \n## 2\n\n\nx &lt;- factor(c('A', 'B', 'C', 'D', 'D', 'C', 'A', 'A', 'A'))\nx\n## [1] A B C D D C A A A\n## Levels: A B C D\ntable(x)\n## x\n## A B C D \n## 4 1 2 2\ntest &lt;- data.frame(x = c('3', '7', '9', '10'), \n                   y = c('A1', 'B2', 'A1', 'B2'),\n                   num = c(4, 6, 2, 9))\ntest\n##    x  y num\n## 1  3 A1   4\n## 2  7 B2   6\n## 3  9 A1   2\n## 4 10 B2   9\ntable(test) # 분할표 작성\n## , , num = 2\n## \n##     y\n## x    A1 B2\n##   10  0  0\n##   3   0  0\n##   7   0  0\n##   9   1  0\n## \n## , , num = 4\n## \n##     y\n## x    A1 B2\n##   10  0  0\n##   3   1  0\n##   7   0  0\n##   9   0  0\n## \n## , , num = 6\n## \n##     y\n## x    A1 B2\n##   10  0  0\n##   3   0  0\n##   7   0  1\n##   9   0  0\n## \n## , , num = 9\n## \n##     y\n## x    A1 B2\n##   10  0  1\n##   3   0  0\n##   7   0  0\n##   9   0  0\nxtabs(num ~ x, data = test)             # 분할표에서 x에 대한 num 값\n## x\n## 10  3  7  9 \n##  9  4  6  2\nxtabs(num ~ y, data = test)             # 분할표에서 y에 대한 num 값\n## y\n## A1 B2 \n##  6 15\ntemp &lt;- xtabs(num ~ x + y, data = test) # x, y와 num 사이 분할표 생성\ntemp\n##     y\n## x    A1 B2\n##   10  0  9\n##   3   4  0\n##   7   0  6\n##   9   2  0\nmargin.table(temp, 1)                   # 분할표의 행에 대한 합\n## x\n## 10  3  7  9 \n##  9  4  6  2\nmargin.table(temp, 2)                   # 분할표의 열에 대한 합\n## y\n## A1 B2 \n##  6 15\nmargin.table(temp)                      # 분할표의 전체 데이터의 합\n## [1] 21\n\n\n# 독립성 검정\nchild1 &lt;- c(5, 11, 1)\nchild2 &lt;- c(4, 7, 3)\nToy &lt;- cbind(child1, child2)       \nrownames(Toy) &lt;- c('car', 'truck', 'doll')  \nToy              \n##       child1 child2\n## car        5      4\n## truck     11      7\n## doll       1      3\nchisq.test(Toy) # 카이제곱 검정 수행\n## Warning in chisq.test(Toy): 카이제곱 approximation은 정확하지 않을수도 있습니다\n## \n##  Pearson's Chi-squared test\n## \n## data:  Toy\n## X-squared = 1.7258, df = 2, p-value = 0.4219\n## p-value = 0.4219 &gt; 0.05이므로 H0 채택.\n## 즉, 아이에 따라 장난감을 가지는 비율의 차이는 없다.\n\nfisher.test(Toy) # 피셔 검정 수행\n## \n##  Fisher's Exact Test for Count Data\n## \n## data:  Toy\n## p-value = 0.5165\n## alternative hypothesis: two.sided\n## p-value = 0.5165 &gt; 0.05이므로 H0 채택.\n## 즉, 아이에 따라 장난감을 가지는 비율의 차이는 없다.\n\n#---# 연습문제\nsharing &lt;- c(0.55, 0.15, 0.3)\nsites &lt;- c(320, 80, 265)\nproduct &lt;- cbind(sharing * sum(sites), sites)\nchisq.test(product)\n## \n##  Pearson's Chi-squared test\n## \n## data:  product\n## X-squared = 14.459, df = 2, p-value = 0.0007251\n\n# 적합성 검정\n## 콜모고로프-스미노프 검정\nx &lt;- rnorm(50)\ny &lt;- runif(30)\nks.test(x, y) # 콜모고로프-스미노프 검정 수행\n## \n##  Exact two-sample Kolmogorov-Smirnov test\n## \n## data:  x and y\n## D = 0.44, p-value = 0.0009116\n## alternative hypothesis: two-sided\n## p-value = 9.438e-09 &lt; 0.05이므로 H0 기각.\n## 즉, X와 Y의 분포는 서로 다르다.\n\n\n## 샤피로 윌크 검정\nshapiro.test(rnorm(100, mean = 5, sd = 3))\n## \n##  Shapiro-Wilk normality test\n## \n## data:  rnorm(100, mean = 5, sd = 3)\n## W = 0.98164, p-value = 0.178\n## H0 : 정규분포를 한다. / H1 : 정규분포를 하지 않는다.\n## p-value = 0.6539 &gt; 0.05이므로 H0 채택.\n## 즉, 이 데이터는 정규분포를 띈다.\n\n\n# t-test (표본이 하나인 경우)\na &lt;- c(980, 1008, 968, 1032, 1012, 996, 1021, 1002, 996, 1017)\nshapiro.test(a)\n## \n##  Shapiro-Wilk normality test\n## \n## data:  a\n## W = 0.97571, p-value = 0.9382\n## p-value = 0.9382 &gt; 0.05이므로 H0 채택.\n## 즉, 이 데이터는 정규분포를 띈다.\n\nt.test(a, mu = 1000, alternative = 'two.sided') # alternative = 'two.sided' : 다른지 확인\n## \n##  One Sample t-test\n## \n## data:  a\n## t = 0.5269, df = 9, p-value = 0.611\n## alternative hypothesis: true mean is not equal to 1000\n## 95 percent confidence interval:\n##   989.4613 1016.9387\n## sample estimates:\n## mean of x \n##    1003.2\n## p-value = 0.611 &gt; 0.05이므로 H0 채택.\n## 즉. 무작위로 뽑은 10개의 건전지 수명은 모집단 건전지 수명과 평균 값이 같다.\n\n\n# t-test (표본이 하나인 경우)\na &lt;- c(58, 49, 39, 99, 32, 88, 62, 30, 55, 65, 44, 55, 57, 53, 88, 42, 39)\nshapiro.test(a) # 샤피로 검정 (정규분포 띄는지 확인)\n## \n##  Shapiro-Wilk normality test\n## \n## data:  a\n## W = 0.91143, p-value = 0.1058\n## p-value = 0.1058 &gt; 0.05이므로 H0 채택.\n## 즉, 이 데이터는 정규분포를 띈다.\n\nt.test(a, mu = 55, alternative = 'greater') # alternative = 'greater' : 올랐는지 확인\n## \n##  One Sample t-test\n## \n## data:  a\n## t = 0.24546, df = 16, p-value = 0.4046\n## alternative hypothesis: true mean is greater than 55\n## 95 percent confidence interval:\n##  47.80855      Inf\n## sample estimates:\n## mean of x \n##  56.17647\n## p-value = 0.4046 &gt; 0.05이므로 H0 채택.\n## 즉, 성적이 오르지 않았다.\n\n\n# t-test (표본이 2개인 경우)\npre &lt;- c(13.2, 8.2, 10.9, 14.3, 10.7, 6.6, 9.5, 10.8, 8.8, 13.3)\npost &lt;- c(14.0, 8.8, 11.2, 14.2, 11.8, 6.4, 9.8, 11.3, 9.3, 13.6)\n\n## 샤피로 검정 (정규분포를 띄는지 확인)\nshapiro.test(pre)  # p-value = 0.8129\n## \n##  Shapiro-Wilk normality test\n## \n## data:  pre\n## W = 0.9624, p-value = 0.8129\nshapiro.test(post) # p-value = 0.6467\n## \n##  Shapiro-Wilk normality test\n## \n## data:  post\n## W = 0.94815, p-value = 0.6467\n\n## t-test\nt.test(pre, post)\n## \n##  Welch Two Sample t-test\n## \n## data:  pre and post\n## t = -0.36891, df = 17.987, p-value = 0.7165\n## alternative hypothesis: true difference in means is not equal to 0\n## 95 percent confidence interval:\n##  -2.745046  1.925046\n## sample estimates:\n## mean of x mean of y \n##     10.63     11.04\n## p-value = 0.7165 &gt; 0.05이므로 H0를 채택.\n## 즉, 이 두개의 데이터의 평균이 같다.\n\n\n# t-test (표본이 2개인 경우)\nA &lt;- c(rep(5, 8), rep(4, 11), rep(3, 9), rep(2, 2), rep(1, 3))\nB &lt;- c(rep(5, 4), rep(4, 6), rep(3, 10), rep(2, 8), rep(1, 4))\n\n## 윌콕스 검정 (두 데이터가 정규분포와는 관련 없는 형태이므로 이 검정을 사용)\nwilcox.test(A, B, exact = F, correct = F)\n## \n##  Wilcoxon rank sum test\n## \n## data:  A and B\n## W = 690, p-value = 0.02887\n## alternative hypothesis: true location shift is not equal to 0\n## p-value = 0.02887 &lt; 0.05이므로 H0를 기각.\n## 즉, 이 두개의 데이터는 유의한 차이가 있다.\n\n\n# 분산분석\nxx &lt;- c(1, 2, 3, 4, 5, 6, 7, 8, 9)\nyy &lt;- c(1.09, 2.12, 2.92, 4.06, 4.90, 6.08, 7.01, 7.92, 8.94)\nzz &lt;- c(1.10, 1.96, 2.98, 4.09, 4.92, 6.10, 6.88, 7.97, 9.01)\nmydata &lt;- c(xx, yy, zz)\nmydata\n##  [1] 1.00 2.00 3.00 4.00 5.00 6.00 7.00 8.00 9.00 1.09 2.12 2.92 4.06 4.90 6.08\n## [16] 7.01 7.92 8.94 1.10 1.96 2.98 4.09 4.92 6.10 6.88 7.97 9.01\n\ngroup &lt;- c(rep(1, 9), rep(2, 9), rep(3, 9))\ngroup\n##  [1] 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3\n\n# One-Way ANOVA 검정\noneway.test(mydata ~ group, var = T)\n## \n##  One-way analysis of means\n## \n## data:  mydata and group\n## F = 6.526e-06, num df = 2, denom df = 24, p-value = 1\n## p-value = 1 &gt; 0.05이므로 H0를 채택.\n## 즉, 세 자료 모두 평뀬이 같다.\n\n\n# 부호 검정 (데이터 두 개 사이에 차이가 있는지 검정)\nx &lt;- c(4, 1, 1, 4, 3, 3, 2, 5, 3, 3)\ny &lt;- c(1, 1, 3, 2, 5, 1, 4, 4, 3, 1)\nbinom.test(c(length(x[x &gt; y]), length(x[x &lt; y]))) # 부호 검정 시행\n## \n##  Exact binomial test\n## \n## data:  c(length(x[x &gt; y]), length(x[x &lt; y]))\n## number of successes = 5, number of trials = 8, p-value = 0.7266\n## alternative hypothesis: true probability of success is not equal to 0.5\n## 95 percent confidence interval:\n##  0.2448632 0.9147666\n## sample estimates:\n## probability of success \n##                  0.625\n## p-value = 0.7266 &gt; 0.05이므로 H0를 채택.\n## 즉, 두 개의 데이터에 유의한 차이가 없다.\n\n\n# 비율 검정 (두 개의 데이터 사이에 비율 차이가 있는지 검정)\nreply &lt;- c(360, 136)\norigin &lt;- c(400, 200)\nprop.test(reply, origin) # 비율 검정 시행\n## \n##  2-sample test for equality of proportions with continuity correction\n## \n## data:  reply out of origin\n## X-squared = 43.515, df = 1, p-value = 4.207e-11\n## alternative hypothesis: two.sided\n## 95 percent confidence interval:\n##  0.14523 0.29477\n## sample estimates:\n## prop 1 prop 2 \n##   0.90   0.68\n## p-value = 4.207e-11 &lt; 0.05이므로 H0를 기각.\n## 즉, 두 개의 데이터의 비율에 유의한 차이가 있다.\n\n\nhead(iris)\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1          5.1         3.5          1.4         0.2  setosa\n## 2          4.9         3.0          1.4         0.2  setosa\n## 3          4.7         3.2          1.3         0.2  setosa\n## 4          4.6         3.1          1.5         0.2  setosa\n## 5          5.0         3.6          1.4         0.2  setosa\n## 6          5.4         3.9          1.7         0.4  setosa\ncor(iris$Sepal.Length, iris$Petal.Length) # 피어슨 상관계수 구하기\n## [1] 0.8717538\ncor(iris[, 1:4])\n##              Sepal.Length Sepal.Width Petal.Length Petal.Width\n## Sepal.Length    1.0000000  -0.1175698    0.8717538   0.8179411\n## Sepal.Width    -0.1175698   1.0000000   -0.4284401  -0.3661259\n## Petal.Length    0.8717538  -0.4284401    1.0000000   0.9628654\n## Petal.Width     0.8179411  -0.3661259    0.9628654   1.0000000\nsymnum(cor(iris[, 1:4])) # 상관계수 요약\n##              S.L S.W P.L P.W\n## Sepal.Length 1              \n## Sepal.Width      1          \n## Petal.Length +   .   1      \n## Petal.Width  +   .   B   1  \n## attr(,\"legend\")\n## [1] 0 ' ' 0.3 '.' 0.6 ',' 0.8 '+' 0.9 '*' 0.95 'B' 1\n\nspear &lt;- matrix(c(12, 11, 15, 16, 18, 32), c(15, 13, 18, 21, 29), ncol = 2)\nspear\n##       [,1] [,2]\n##  [1,]   12   16\n##  [2,]   11   18\n##  [3,]   15   32\n##  [4,]   16   12\n##  [5,]   18   11\n##  [6,]   32   15\n##  [7,]   12   16\n##  [8,]   11   18\n##  [9,]   15   32\n## [10,]   16   12\n## [11,]   18   11\n## [12,]   32   15\n## [13,]   12   16\n## [14,]   11   18\n## [15,]   15   32\ncor(spear, method = 'spearman') # 스피어만 상관계수 (두 값의 순위를 사용해 상관계수를 계산)\n##            [,1]       [,2]\n## [1,]  1.0000000 -0.6146789\n## [2,] -0.6146789  1.0000000\ncor(spear, method = 'pearson')  # 피어슨 상관계수 (두 값의 상관관계)\n##            [,1]       [,2]\n## [1,]  1.0000000 -0.2017797\n## [2,] -0.2017797  1.0000000\ncor(spear, method = 'kendall')  # 켄달 상관계수\n##            [,1]       [,2]\n## [1,]  1.0000000 -0.4408602\n## [2,] -0.4408602  1.0000000\n\n\ncor(c(7, 8, 9, 2, 3), c(7, 8, 10, 2, 3), method = 'kendall')\n## [1] 1\ncor(c(7, 8, 9, 2, 3), c(7, 8, 10, 2, 1), method = 'kendall')\n## [1] 0.8\n\n\n# 상관 분석\nx &lt;- c(70, 72, 62, 64, 71, 76, 0, 65, 74, 72)\ny &lt;- c(70, 74, 65, 68, 72, 74, 61, 66, 76, 75)\ncor.test(x, y, method = 'pearson') # 상관 분석 시행\n## \n##  Pearson's product-moment correlation\n## \n## data:  x and y\n## t = 3.4455, df = 8, p-value = 0.008752\n## alternative hypothesis: true correlation is not equal to 0\n## 95 percent confidence interval:\n##  0.2791495 0.9434286\n## sample estimates:\n##       cor \n## 0.7729264\n## p-value = 0.008752 &lt; 0.05이므로 H0를 기각\n## 즉, 두 데이터 간의 상관성이 있다."
  },
  {
    "objectID": "Data_Exploration/Data_Exploration_CH08.html",
    "href": "Data_Exploration/Data_Exploration_CH08.html",
    "title": "지도 학습",
    "section": "",
    "text": "Part 8 : 지도 학습\n\nlibrary(rpart)\nrpartTree &lt;- rpart(Species ~ ., data = iris)\nrpartTree\n## n= 150 \n## \n## node), split, n, loss, yval, (yprob)\n##       * denotes terminal node\n## \n## 1) root 150 100 setosa (0.33333333 0.33333333 0.33333333)  \n##   2) Petal.Length&lt; 2.45 50   0 setosa (1.00000000 0.00000000 0.00000000) *\n##   3) Petal.Length&gt;=2.45 100  50 versicolor (0.00000000 0.50000000 0.50000000)  \n##     6) Petal.Width&lt; 1.75 54   5 versicolor (0.00000000 0.90740741 0.09259259) *\n##     7) Petal.Width&gt;=1.75 46   1 virginica (0.00000000 0.02173913 0.97826087) *\n\n\npredict(rpartTree, newdata = iris, type = 'class')\n##          1          2          3          4          5          6          7 \n##     setosa     setosa     setosa     setosa     setosa     setosa     setosa \n##          8          9         10         11         12         13         14 \n##     setosa     setosa     setosa     setosa     setosa     setosa     setosa \n##         15         16         17         18         19         20         21 \n##     setosa     setosa     setosa     setosa     setosa     setosa     setosa \n##         22         23         24         25         26         27         28 \n##     setosa     setosa     setosa     setosa     setosa     setosa     setosa \n##         29         30         31         32         33         34         35 \n##     setosa     setosa     setosa     setosa     setosa     setosa     setosa \n##         36         37         38         39         40         41         42 \n##     setosa     setosa     setosa     setosa     setosa     setosa     setosa \n##         43         44         45         46         47         48         49 \n##     setosa     setosa     setosa     setosa     setosa     setosa     setosa \n##         50         51         52         53         54         55         56 \n##     setosa versicolor versicolor versicolor versicolor versicolor versicolor \n##         57         58         59         60         61         62         63 \n## versicolor versicolor versicolor versicolor versicolor versicolor versicolor \n##         64         65         66         67         68         69         70 \n## versicolor versicolor versicolor versicolor versicolor versicolor versicolor \n##         71         72         73         74         75         76         77 \n##  virginica versicolor versicolor versicolor versicolor versicolor versicolor \n##         78         79         80         81         82         83         84 \n## versicolor versicolor versicolor versicolor versicolor versicolor versicolor \n##         85         86         87         88         89         90         91 \n## versicolor versicolor versicolor versicolor versicolor versicolor versicolor \n##         92         93         94         95         96         97         98 \n## versicolor versicolor versicolor versicolor versicolor versicolor versicolor \n##         99        100        101        102        103        104        105 \n## versicolor versicolor  virginica  virginica  virginica  virginica  virginica \n##        106        107        108        109        110        111        112 \n##  virginica versicolor  virginica  virginica  virginica  virginica  virginica \n##        113        114        115        116        117        118        119 \n##  virginica  virginica  virginica  virginica  virginica  virginica  virginica \n##        120        121        122        123        124        125        126 \n## versicolor  virginica  virginica  virginica  virginica  virginica  virginica \n##        127        128        129        130        131        132        133 \n##  virginica  virginica  virginica versicolor  virginica  virginica  virginica \n##        134        135        136        137        138        139        140 \n## versicolor versicolor  virginica  virginica  virginica  virginica  virginica \n##        141        142        143        144        145        146        147 \n##  virginica  virginica  virginica  virginica  virginica  virginica  virginica \n##        148        149        150 \n##  virginica  virginica  virginica \n## Levels: setosa versicolor virginica\n\npredicted &lt;- predict(rpartTree, newdata = iris, type = 'class')\n\nsum(predicted == iris$Species) / NROW(predicted)\n## [1] 0.96\n\nreal &lt;- iris$Species\ntable(real, predicted)\n##             predicted\n## real         setosa versicolor virginica\n##   setosa         50          0         0\n##   versicolor      0         49         1\n##   virginica       0          5        45\n\n\nstr(iris)\n## 'data.frame':    150 obs. of  5 variables:\n##  $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n##  $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n##  $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n##  $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n##  $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\nset.seed(1567)\nnum &lt;- sample(2, nrow(iris), replace = TRUE, prob = c(0.7, 0.3))\nnum\n##   [1] 2 2 1 2 1 1 1 1 1 2 1 2 1 1 1 1 1 1 1 1 1 2 1 1 1 1 2 2 1 1 2 1 1 1 2 1 1\n##  [38] 2 1 2 1 2 2 1 2 2 2 1 1 2 1 1 2 1 1 1 1 1 2 1 2 1 1 1 2 2 1 2 1 2 1 2 2 1\n##  [75] 2 2 2 2 1 1 1 1 1 1 1 1 2 1 2 2 2 1 1 1 2 1 1 1 1 1 1 1 1 1 2 2 2 1 1 1 1\n## [112] 1 1 1 2 1 1 2 2 1 1 1 1 1 1 1 2 2 1 1 1 1 1 1 1 2 1 1 1 2 2 1 2 1 1 1 1 2\n## [149] 1 2\n\ntrainData &lt;- iris[num == 1, ]\nhead(trainData)\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 3          4.7         3.2          1.3         0.2  setosa\n## 5          5.0         3.6          1.4         0.2  setosa\n## 6          5.4         3.9          1.7         0.4  setosa\n## 7          4.6         3.4          1.4         0.3  setosa\n## 8          5.0         3.4          1.5         0.2  setosa\n## 9          4.4         2.9          1.4         0.2  setosa\ntestData &lt;- iris[num == 2,]\nhead(testData)\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1           5.1         3.5          1.4         0.2  setosa\n## 2           4.9         3.0          1.4         0.2  setosa\n## 4           4.6         3.1          1.5         0.2  setosa\n## 10          4.9         3.1          1.5         0.1  setosa\n## 12          4.8         3.4          1.6         0.2  setosa\n## 22          5.1         3.7          1.5         0.4  setosa\n# install.packages('party')\nlibrary(party)\n## 필요한 패키지를 로딩중입니다: grid\n## 필요한 패키지를 로딩중입니다: mvtnorm\n## 필요한 패키지를 로딩중입니다: modeltools\n## 필요한 패키지를 로딩중입니다: stats4\n## 필요한 패키지를 로딩중입니다: strucchange\n## 필요한 패키지를 로딩중입니다: zoo\n## \n## 다음의 패키지를 부착합니다: 'zoo'\n## The following objects are masked from 'package:base':\n## \n##     as.Date, as.Date.numeric\n## 필요한 패키지를 로딩중입니다: sandwich\n## \n## 다음의 패키지를 부착합니다: 'strucchange'\n## The following object is masked from 'package:stringr':\n## \n##     boundary\n## \n## 다음의 패키지를 부착합니다: 'party'\n## The following object is masked from 'package:dplyr':\n## \n##     where\n\nmyF &lt;- Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width\n\nctreeResult &lt;- ctree(myF, data = trainData)\n\ntable(predict(ctreeResult, data = trainData), trainData$Species)\n##             \n##              setosa versicolor virginica\n##   setosa         32          0         0\n##   versicolor      0         30         0\n##   virginica       0          2        36\n\nforcasted &lt;- predict(ctreeResult, newdata = testData)\n\ntable(forcasted, testData$Species)\n##             \n## forcasted    setosa versicolor virginica\n##   setosa         18          0         0\n##   versicolor      0         14         1\n##   virginica       0          4        13\n\nplot(ctreeResult)\n\n\n\n\n\nlibrary(party)\nlibrary(caret)\n## 필요한 패키지를 로딩중입니다: lattice\n## \n## 다음의 패키지를 부착합니다: 'caret'\n## The following object is masked from 'package:purrr':\n## \n##     lift\n\ndata1 &lt;- iris[sample(1:nrow(iris), replace = T), ]\ndata2 &lt;- iris[sample(1:nrow(iris), replace = T), ]\ndata3 &lt;- iris[sample(1:nrow(iris), replace = T), ]\ndata4 &lt;- iris[sample(1:nrow(iris), replace = T), ]\ndata5 &lt;- iris[sample(1:nrow(iris), replace = T), ]\n\nctree1 &lt;- ctree(Species ~ ., data1)\nctree2 &lt;- ctree(Species ~ ., data2)\nctree3 &lt;- ctree(Species ~ ., data3)\nctree4 &lt;- ctree(Species ~ ., data4)\nctree5 &lt;- ctree(Species ~ ., data5)\n\npredicted1 &lt;- predict(ctree1, iris)\npredicted2 &lt;- predict(ctree2, iris)\npredicted3 &lt;- predict(ctree3, iris)\npredicted4 &lt;- predict(ctree4, iris)\npredicted5 &lt;- predict(ctree5, iris)\n\ntest &lt;- data.frame(Species = iris$Species,\n                   predicted1,\n                   predicted2,\n                   predicted3,\n                   predicted4,\n                   predicted5)\nhead(test)\n##   Species predicted1 predicted2 predicted3 predicted4 predicted5\n## 1  setosa     setosa     setosa     setosa     setosa     setosa\n## 2  setosa     setosa     setosa     setosa     setosa     setosa\n## 3  setosa     setosa     setosa     setosa     setosa     setosa\n## 4  setosa     setosa     setosa     setosa     setosa     setosa\n## 5  setosa     setosa     setosa     setosa     setosa     setosa\n## 6  setosa     setosa     setosa     setosa     setosa     setosa\n\nfuncResultValue &lt;- function(x) {\n    result &lt;- NULL\n    for (i in 1:nrow(x)) {\n        xtab &lt;- table(t(x[i, ]))\n        rvalue &lt;- names(sort(xtab, decreasing = T) [1])\n        result &lt;- c(result, rvalue)\n    }\n    return (result)\n}\n\ntest$result &lt;- funcResultValue(test[, 2:6])\ntable(test$result, test$Species)  \n##             \n##              setosa versicolor virginica\n##   setosa         50          0         0\n##   versicolor      0         48         4\n##   virginica       0          2        46\n\n\nhead(iris)\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1          5.1         3.5          1.4         0.2  setosa\n## 2          4.9         3.0          1.4         0.2  setosa\n## 3          4.7         3.2          1.3         0.2  setosa\n## 4          4.6         3.1          1.5         0.2  setosa\n## 5          5.0         3.6          1.4         0.2  setosa\n## 6          5.4         3.9          1.7         0.4  setosa\nidx &lt;- sample(2, nrow(iris), replace = T, prob = c(0.7, 0.3))\ntrainData &lt;- iris[idx == 1,]\nnrow(trainData)\n## [1] 105\ntestData &lt;- iris[idx == 2,]\nnrow(testData)\n## [1] 45\n\nlibrary(randomForest)\n## randomForest 4.7-1.1\n## Type rfNews() to see new features/changes/bug fixes.\n## \n## 다음의 패키지를 부착합니다: 'randomForest'\n## The following object is masked from 'package:dplyr':\n## \n##     combine\n## The following object is masked from 'package:ggplot2':\n## \n##     margin\nmodel &lt;- randomForest(Species ~ ., data = trainData, ntree = 100, proximity = T)\nmodel\n## \n## Call:\n##  randomForest(formula = Species ~ ., data = trainData, ntree = 100,      proximity = T) \n##                Type of random forest: classification\n##                      Number of trees: 100\n## No. of variables tried at each split: 2\n## \n##         OOB estimate of  error rate: 3.81%\n## Confusion matrix:\n##            setosa versicolor virginica class.error\n## setosa         38          0         0  0.00000000\n## versicolor      0         33         1  0.02941176\n## virginica       0          3        30  0.09090909\nplot(model, main = 'RandomForest Model of iris')\n\n\n\n\n\ntable(trainData$Species, predict(model))  \n##             \n##              setosa versicolor virginica\n##   setosa         38          0         0\n##   versicolor      0         33         1\n##   virginica       0          3        30\n\npred &lt;- predict(model, newdata = testData)  \ntable(testData$Species, pred)\n##             pred\n##              setosa versicolor virginica\n##   setosa         12          0         0\n##   versicolor      0         14         2\n##   virginica       0          2        15\n\nplot(margin(model, testData$Species))  \n\n\n\n\n\ncredit &lt;- read.csv('./data/credit.csv', header = TRUE)\nstr(credit)\n## 'data.frame':    1000 obs. of  21 variables:\n##  $ Creditability                    : int  1 1 1 1 1 1 1 1 1 1 ...\n##  $ Account.Balance                  : int  1 1 2 1 1 1 1 1 4 2 ...\n##  $ Duration.of.Credit..month.       : int  18 9 12 12 12 10 8 6 18 24 ...\n##  $ Payment.Status.of.Previous.Credit: int  4 4 2 4 4 4 4 4 4 2 ...\n##  $ Purpose                          : int  2 0 9 0 0 0 0 0 3 3 ...\n##  $ Credit.Amount                    : int  1049 2799 841 2122 2171 2241 3398 1361 1098 3758 ...\n##  $ Value.Savings.Stocks             : int  1 1 2 1 1 1 1 1 1 3 ...\n##  $ Length.of.current.employment     : int  2 3 4 3 3 2 4 2 1 1 ...\n##  $ Instalment.per.cent              : int  4 2 2 3 4 1 1 2 4 1 ...\n##  $ Sex...Marital.Status             : int  2 3 2 3 3 3 3 3 2 2 ...\n##  $ Guarantors                       : int  1 1 1 1 1 1 1 1 1 1 ...\n##  $ Duration.in.Current.address      : int  4 2 4 2 4 3 4 4 4 4 ...\n##  $ Most.valuable.available.asset    : int  2 1 1 1 2 1 1 1 3 4 ...\n##  $ Age..years.                      : int  21 36 23 39 38 48 39 40 65 23 ...\n##  $ Concurrent.Credits               : int  3 3 3 3 1 3 3 3 3 3 ...\n##  $ Type.of.apartment                : int  1 1 1 1 2 1 2 2 2 1 ...\n##  $ No.of.Credits.at.this.Bank       : int  1 2 1 2 2 2 2 1 2 1 ...\n##  $ Occupation                       : int  3 3 2 2 2 2 2 2 1 1 ...\n##  $ No.of.dependents                 : int  1 2 1 2 1 2 1 2 1 1 ...\n##  $ Telephone                        : int  1 1 1 1 1 1 1 1 1 1 ...\n##  $ Foreign.Worker                   : int  1 1 1 2 2 2 2 2 1 1 ...\n\n\ncredit$Creditability &lt;- as.factor(credit$Creditability)\nstr(credit)\n## 'data.frame':    1000 obs. of  21 variables:\n##  $ Creditability                    : Factor w/ 2 levels \"0\",\"1\": 2 2 2 2 2 2 2 2 2 2 ...\n##  $ Account.Balance                  : int  1 1 2 1 1 1 1 1 4 2 ...\n##  $ Duration.of.Credit..month.       : int  18 9 12 12 12 10 8 6 18 24 ...\n##  $ Payment.Status.of.Previous.Credit: int  4 4 2 4 4 4 4 4 4 2 ...\n##  $ Purpose                          : int  2 0 9 0 0 0 0 0 3 3 ...\n##  $ Credit.Amount                    : int  1049 2799 841 2122 2171 2241 3398 1361 1098 3758 ...\n##  $ Value.Savings.Stocks             : int  1 1 2 1 1 1 1 1 1 3 ...\n##  $ Length.of.current.employment     : int  2 3 4 3 3 2 4 2 1 1 ...\n##  $ Instalment.per.cent              : int  4 2 2 3 4 1 1 2 4 1 ...\n##  $ Sex...Marital.Status             : int  2 3 2 3 3 3 3 3 2 2 ...\n##  $ Guarantors                       : int  1 1 1 1 1 1 1 1 1 1 ...\n##  $ Duration.in.Current.address      : int  4 2 4 2 4 3 4 4 4 4 ...\n##  $ Most.valuable.available.asset    : int  2 1 1 1 2 1 1 1 3 4 ...\n##  $ Age..years.                      : int  21 36 23 39 38 48 39 40 65 23 ...\n##  $ Concurrent.Credits               : int  3 3 3 3 1 3 3 3 3 3 ...\n##  $ Type.of.apartment                : int  1 1 1 1 2 1 2 2 2 1 ...\n##  $ No.of.Credits.at.this.Bank       : int  1 2 1 2 2 2 2 1 2 1 ...\n##  $ Occupation                       : int  3 3 2 2 2 2 2 2 1 1 ...\n##  $ No.of.dependents                 : int  1 2 1 2 1 2 1 2 1 1 ...\n##  $ Telephone                        : int  1 1 1 1 1 1 1 1 1 1 ...\n##  $ Foreign.Worker                   : int  1 1 1 2 2 2 2 2 1 1 ...\n\n\nlibrary(caret)\n\nset.seed(1000)\n\ntrainData &lt;- createDataPartition(y = credit$Creditability, p = 0.7, list = FALSE)\nhead(trainData)\n##      Resample1\n## [1,]         1\n## [2,]         2\n## [3,]         3\n## [4,]         4\n## [5,]         5\n## [6,]         6\ntrain &lt;- credit[trainData, ]\ntest &lt;- credit[-trainData, ]\n\nstr(train) \n## 'data.frame':    700 obs. of  21 variables:\n##  $ Creditability                    : Factor w/ 2 levels \"0\",\"1\": 2 2 2 2 2 2 2 2 2 2 ...\n##  $ Account.Balance                  : int  1 1 2 1 1 1 1 4 2 1 ...\n##  $ Duration.of.Credit..month.       : int  18 9 12 12 12 10 6 18 24 11 ...\n##  $ Payment.Status.of.Previous.Credit: int  4 4 2 4 4 4 4 4 2 4 ...\n##  $ Purpose                          : int  2 0 9 0 0 0 0 3 3 0 ...\n##  $ Credit.Amount                    : int  1049 2799 841 2122 2171 2241 1361 1098 3758 3905 ...\n##  $ Value.Savings.Stocks             : int  1 1 2 1 1 1 1 1 3 1 ...\n##  $ Length.of.current.employment     : int  2 3 4 3 3 2 2 1 1 3 ...\n##  $ Instalment.per.cent              : int  4 2 2 3 4 1 2 4 1 2 ...\n##  $ Sex...Marital.Status             : int  2 3 2 3 3 3 3 2 2 3 ...\n##  $ Guarantors                       : int  1 1 1 1 1 1 1 1 1 1 ...\n##  $ Duration.in.Current.address      : int  4 2 4 2 4 3 4 4 4 2 ...\n##  $ Most.valuable.available.asset    : int  2 1 1 1 2 1 1 3 4 1 ...\n##  $ Age..years.                      : int  21 36 23 39 38 48 40 65 23 36 ...\n##  $ Concurrent.Credits               : int  3 3 3 3 1 3 3 3 3 3 ...\n##  $ Type.of.apartment                : int  1 1 1 1 2 1 2 2 1 1 ...\n##  $ No.of.Credits.at.this.Bank       : int  1 2 1 2 2 2 1 2 1 2 ...\n##  $ Occupation                       : int  3 3 2 2 2 2 2 1 1 3 ...\n##  $ No.of.dependents                 : int  1 2 1 2 1 2 2 1 1 2 ...\n##  $ Telephone                        : int  1 1 1 1 1 1 1 1 1 1 ...\n##  $ Foreign.Worker                   : int  1 1 1 2 2 2 2 1 1 1 ...\n\n\n# install.packages('e1071')\nlibrary('e1071')\nresult &lt;- tune.svm(Creditability ~ ., data = train,\n                   gamma = 2^(-5:0), cost = 2^(0:4), kernel = 'radial')\n\nresult1 &lt;- tune.svm(Creditability ~ ., data = train, cost = 2^(0:4), kernel = 'linear')\nresult2 &lt;- tune.svm(Creditability ~ ., data = train, cost = 2^(0:4), degree = 2:4, kernel = 'polynomia')\n\nresult$best.parameters \n##     gamma cost\n## 7 0.03125    2\n\nresult1$best.parameters \n##   cost\n## 1    1\nresult2$best.parameters\n##   degree cost\n## 2      3    1\n\n\nnormal_svm &lt;- svm(Creditability ~ ., data = train, gamma = 0.0625, cost = 1, kernel = 'radial')\nnormal_svm1 &lt;- svm(Creditability ~ ., data = train, cost = 2, kernel = 'linear')\nnormal_svm2 &lt;- svm(Creditability ~ ., data = train, cost = 2, degree = 3, kernel = 'polynomia')\n\nsummary(normal_svm)\n## \n## Call:\n## svm(formula = Creditability ~ ., data = train, gamma = 0.0625, cost = 1, \n##     kernel = \"radial\")\n## \n## \n## Parameters:\n##    SVM-Type:  C-classification \n##  SVM-Kernel:  radial \n##        cost:  1 \n## \n## Number of Support Vectors:  478\n## \n##  ( 276 202 )\n## \n## \n## Number of Classes:  2 \n## \n## Levels: \n##  0 1\n\n\nnormal_svm$index\n##   [1]   1   4   5   6   7   8   9  10  12  13  17  20  25  26  29  35  37  41\n##  [19]  42  49  51  56  58  59  60  62  63  64  66  67  68  69  71  74  78  79\n##  [37]  81  83  86  89  91  94  95  97  98 100 102 105 110 112 114 115 117 119\n##  [55] 121 122 123 124 126 129 131 132 136 137 138 139 140 142 143 144 147 148\n##  [73] 150 151 152 153 155 156 158 159 160 161 162 163 164 168 170 174 176 178\n##  [91] 180 182 184 185 190 191 193 196 197 200 201 202 203 206 207 208 212 213\n## [109] 214 215 216 218 219 220 221 224 227 230 236 238 239 243 246 247 248 250\n## [127] 252 253 254 257 260 261 262 263 264 266 267 270 271 272 273 278 279 281\n## [145] 284 285 293 295 296 299 300 305 306 307 310 313 314 315 316 318 319 320\n## [163] 323 328 329 330 331 332 333 334 338 342 346 349 350 354 355 356 357 358\n## [181] 359 360 366 367 368 369 371 372 378 380 381 384 385 386 387 389 395 396\n## [199] 398 400 401 410 411 412 413 414 415 416 420 424 425 427 428 429 430 431\n## [217] 432 433 435 436 437 438 439 440 442 443 444 445 446 447 448 450 451 452\n## [235] 453 454 455 456 458 462 466 467 468 471 472 474 476 478 481 482 483 485\n## [253] 486 488 489 490 492 495 496 499 500 505 507 508 509 511 512 513 515 516\n## [271] 518 519 523 525 526 527  14  31  33  65  70 101 108 157 210 312 321 361\n## [289] 362 363 364 376 377 393 402 403 404 405 406 407 408 409 417 418 422 434\n## [307] 449 484 494 501 502 503 521 528 529 530 531 532 534 535 536 537 538 539\n## [325] 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557\n## [343] 558 559 560 561 562 563 565 566 567 568 569 570 571 572 573 574 575 576\n## [361] 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594\n## [379] 595 596 597 598 599 600 601 604 605 606 607 608 609 610 611 612 613 614\n## [397] 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632\n## [415] 633 634 635 636 637 638 639 640 642 643 644 645 646 647 648 650 651 652\n## [433] 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670\n## [451] 671 672 673 674 675 677 678 679 680 681 682 683 684 685 686 687 688 690\n## [469] 691 692 693 694 695 696 697 698 699 700\nnormal_svm1$index\n##   [1]   1   3   5   8   9  12  13  17  20  22  23  25  41  51  58  59  62  63\n##  [19]  66  67  71  74  78  79  81  89  92  94  98 100 103 105 107 109 114 117\n##  [37] 121 122 123 129 131 137 138 144 146 148 150 151 153 156 158 159 161 162\n##  [55] 165 168 171 175 176 177 178 180 184 185 191 193 197 206 207 208 212 214\n##  [73] 215 219 220 238 243 248 254 257 260 261 262 263 264 266 267 270 271 273\n##  [91] 278 279 280 281 290 293 295 296 299 300 302 305 307 313 314 315 316 318\n## [109] 319 320 323 327 328 329 330 332 334 342 350 357 358 359 360 367 368 371\n## [127] 372 378 380 382 386 387 388 389 395 396 398 400 401 410 411 412 413 414\n## [145] 415 420 424 425 426 427 428 429 430 431 432 433 435 436 437 438 439 443\n## [163] 444 445 446 447 448 450 451 452 454 457 458 462 472 481 482 483 485 486\n## [181] 488 489 490 496 500 507 508 512 513 515 516 518 519 525 526 527  14  31\n## [199]  33  65  70 101 108 157 210 312 321 361 362 363 364 376 377 402 403 404\n## [217] 405 406 407 408 409 422 434 449 484 494 501 502 503 521 528 529 530 531\n## [235] 532 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550\n## [253] 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568\n## [271] 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586\n## [289] 587 588 589 590 591 592 593 595 596 597 598 599 600 601 604 605 607 608\n## [307] 609 610 612 613 614 615 616 617 618 619 621 622 623 624 626 627 628 629\n## [325] 630 631 632 633 634 635 636 637 638 640 644 646 647 650 651 652 653 654\n## [343] 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672\n## [361] 673 675 677 678 679 680 681 682 684 685 686 687 688 690 691 692 693 694\n## [379] 695 697 698 699 700\nnormal_svm2$index\n##   [1]   1   5   9  10  11  12  16  17  18  20  22  24  25  26  29  39  40  41\n##  [19]  49  51  54  56  58  59  61  63  64  66  67  73  74  75  78  79  81  85\n##  [37]  86  89  92  94  97  98 100 102 105 107 109 110 112 113 117 118 119 121\n##  [55] 122 124 125 129 131 132 137 138 140 144 147 148 150 153 154 156 158 159\n##  [73] 161 162 164 165 166 167 168 170 171 176 177 178 179 180 182 184 185 189\n##  [91] 190 191 192 193 195 197 201 203 206 208 212 214 215 218 219 220 222 223\n## [109] 225 233 234 236 240 243 248 249 251 252 254 255 257 259 260 262 263 264\n## [127] 265 266 270 271 273 275 276 279 280 281 282 283 285 287 288 290 292 293\n## [145] 295 296 299 300 301 305 306 307 309 313 314 315 316 318 319 320 323 327\n## [163] 329 334 338 342 344 349 350 354 357 358 359 360 367 368 369 370 371 372\n## [181] 380 382 384 385 386 387 388 389 395 396 398 400 401 410 412 414 415 416\n## [199] 420 425 427 428 429 430 431 432 433 435 436 437 438 439 440 443 444 445\n## [217] 446 447 450 451 452 453 454 457 458 462 463 465 466 467 468 471 474 476\n## [235] 479 481 482 483 485 486 488 489 490 492 493 496 499 500 505 507 508 509\n## [253] 511 512 513 515 516 518 519 520 523 525 527  14  31  33  65  70 101 108\n## [271] 157 210 312 321 361 362 363 364 376 377 393 402 403 404 405 406 407 408\n## [289] 409 418 422 434 449 484 494 501 502 503 521 528 529 530 531 532 534 535\n## [307] 536 537 538 539 540 541 542 543 544 545 547 548 549 550 551 552 553 554\n## [325] 555 557 558 559 560 561 562 563 564 565 566 567 568 570 571 572 573 574\n## [343] 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592\n## [361] 593 595 597 598 599 600 601 602 603 604 605 606 607 608 609 610 612 613\n## [379] 614 615 616 617 618 619 621 622 623 624 626 627 628 629 630 631 632 633\n## [397] 634 635 636 637 638 640 642 643 644 645 646 647 650 651 652 653 654 655\n## [415] 656 657 658 659 660 661 663 664 665 666 667 668 670 671 672 673 675 677\n## [433] 678 679 680 682 684 685 686 687 688 689 691 692 693 696 697 698 699 700\n\n\nnormal_svm_predict &lt;- predict(normal_svm, test) \nconfusionMatrix(normal_svm_predict, test$Creditability)\n## Confusion Matrix and Statistics\n## \n##           Reference\n## Prediction   0   1\n##          0  36  20\n##          1  54 190\n##                                           \n##                Accuracy : 0.7533          \n##                  95% CI : (0.7005, 0.8011)\n##     No Information Rate : 0.7             \n##     P-Value [Acc &gt; NIR] : 0.023885        \n##                                           \n##                   Kappa : 0.3416          \n##                                           \n##  Mcnemar's Test P-Value : 0.000125        \n##                                           \n##             Sensitivity : 0.4000          \n##             Specificity : 0.9048          \n##          Pos Pred Value : 0.6429          \n##          Neg Pred Value : 0.7787          \n##              Prevalence : 0.3000          \n##          Detection Rate : 0.1200          \n##    Detection Prevalence : 0.1867          \n##       Balanced Accuracy : 0.6524          \n##                                           \n##        'Positive' Class : 0               \n## \n\nnormal1_svm_predict &lt;- predict(normal_svm1, test)\nconfusionMatrix(normal1_svm_predict, test$Creditability)\n## Confusion Matrix and Statistics\n## \n##           Reference\n## Prediction   0   1\n##          0  37  23\n##          1  53 187\n##                                           \n##                Accuracy : 0.7467          \n##                  95% CI : (0.6935, 0.7949)\n##     No Information Rate : 0.7             \n##     P-Value [Acc &gt; NIR] : 0.0428516       \n##                                           \n##                   Kappa : 0.3333          \n##                                           \n##  Mcnemar's Test P-Value : 0.0008794       \n##                                           \n##             Sensitivity : 0.4111          \n##             Specificity : 0.8905          \n##          Pos Pred Value : 0.6167          \n##          Neg Pred Value : 0.7792          \n##              Prevalence : 0.3000          \n##          Detection Rate : 0.1233          \n##    Detection Prevalence : 0.2000          \n##       Balanced Accuracy : 0.6508          \n##                                           \n##        'Positive' Class : 0               \n## \n\nnormal2_svm_predict &lt;- predict(normal_svm2, test)\nconfusionMatrix(normal2_svm_predict, test$Creditability)\n## Confusion Matrix and Statistics\n## \n##           Reference\n## Prediction   0   1\n##          0  25  21\n##          1  65 189\n##                                           \n##                Accuracy : 0.7133          \n##                  95% CI : (0.6586, 0.7638)\n##     No Information Rate : 0.7             \n##     P-Value [Acc &gt; NIR] : 0.3321          \n##                                           \n##                   Kappa : 0.2066          \n##                                           \n##  Mcnemar's Test P-Value : 3.538e-06       \n##                                           \n##             Sensitivity : 0.27778         \n##             Specificity : 0.90000         \n##          Pos Pred Value : 0.54348         \n##          Neg Pred Value : 0.74409         \n##              Prevalence : 0.30000         \n##          Detection Rate : 0.08333         \n##    Detection Prevalence : 0.15333         \n##       Balanced Accuracy : 0.58889         \n##                                           \n##        'Positive' Class : 0               \n## \n\nnormal2_svm_predict &lt;- predict(normal_svm2, test)\nconfusionMatrix(normal2_svm_predict, test$Creditability)\n## Confusion Matrix and Statistics\n## \n##           Reference\n## Prediction   0   1\n##          0  25  21\n##          1  65 189\n##                                           \n##                Accuracy : 0.7133          \n##                  95% CI : (0.6586, 0.7638)\n##     No Information Rate : 0.7             \n##     P-Value [Acc &gt; NIR] : 0.3321          \n##                                           \n##                   Kappa : 0.2066          \n##                                           \n##  Mcnemar's Test P-Value : 3.538e-06       \n##                                           \n##             Sensitivity : 0.27778         \n##             Specificity : 0.90000         \n##          Pos Pred Value : 0.54348         \n##          Neg Pred Value : 0.74409         \n##              Prevalence : 0.30000         \n##          Detection Rate : 0.08333         \n##    Detection Prevalence : 0.15333         \n##       Balanced Accuracy : 0.58889         \n##                                           \n##        'Positive' Class : 0               \n## \n\n\nlibrary(kernlab)\n## \n## 다음의 패키지를 부착합니다: 'kernlab'\n## The following object is masked from 'package:modeltools':\n## \n##     prior\n## The following object is masked from 'package:purrr':\n## \n##     cross\n## The following object is masked from 'package:ggplot2':\n## \n##     alpha\nmodel &lt;- ksvm(Species ~ ., data = iris)\npredicted &lt;- predict(model, newdata = iris)\ntable(predicted, iris$Species)\n##             \n## predicted    setosa versicolor virginica\n##   setosa         50          0         0\n##   versicolor      0         48         2\n##   virginica       0          2        48\n\n\nlibrary(e1071)\n### 현재 링크가 만료되어 데이터 불러오기 불가능\n# data &lt;- read.csv('http://www-bcf.usc.edu/~gareth/ISL/Heart.csv')\n# head(data)\n# str(data)\n# library(caret)\n# \n# set.seed(1000)\n# train_data &lt;- createDataPartition(y = data$AHD, p = 0.7, list = FALSE)\n# train &lt;- data[train_data, ]\n# test &lt;- data[-train_data, ]\n# \n# Bayes &lt;- naiveBayes(AHD ~ . , data = train)\n# Bayes\n# \n# predicted &lt;- predict(Bayes, test, type = 'class')\n# table(predicted, test$AHD)\n# \n# confusionMatrix(predicted, test$AHD)"
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/data_analysis_uber.html",
    "href": "Data_Mining/Geospatial_Analysis/data_analysis_uber.html",
    "title": "Uber Data를 활용한 분석",
    "section": "",
    "text": "h3 라이브러리를 활용한 Uber Data 분석\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom h3 import h3\nfrom collections import Counter\nimport pydeck as pdk\n\n# 한글 폰트 사용을 위해서 세팅\nfrom matplotlib import font_manager, rc, rcParams\nfont_path = \"C:/Windows/Fonts/malgun.ttf\"\nfont = font_manager.FontProperties(fname = font_path).get_name()\nrc('font', family = font)\n\n# 마이너스 깨짐 현상 해결\nrcParams['axes.unicode_minus'] = False\nH3_HEX_DATA = \"https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf.h3cells.json\"\n\ndf = pd.read_json(H3_HEX_DATA)\ndf.head()\n\n\n\n\n\n\n\n\nhex\ncount\n\n\n\n\n0\n88283082b9fffff\n96\n\n\n1\n8828308281fffff\n534\n\n\n2\n88283082d7fffff\n36\n\n\n3\n88283082c1fffff\n297\n\n\n4\n88283082a9fffff\n147\ndef h3_to_lat_lon(h3_address):\n    lat_lon = h3.h3_to_geo(h3_address)\n    return lat_lon\n\ndef lat_lon_to_h3(lat, lon):\n    h3_address = h3.geo_to_h3(lat, lon, resolution = 6) # resolution : 해상도\n    return h3_address\ndf['lat_lon'] = df['hex'].apply(h3_to_lat_lon)\ndf.head()\n\n\n\n\n\n\n\n\nDate/Time\nLat\nLon\nBase\nDatetime\nWeekday\nHour\nhex\nlat_lon\n\n\n\n\n0\n4/1/2014 0:11:00\n40.7690\n-73.9549\nB02512\n2014-04-01 00:11:00\nTuesday\n0\n862a100d7ffffff\n(40.74274905936817, -73.95762841287764)\n\n\n1\n4/1/2014 0:17:00\n40.7267\n-74.0345\nB02512\n2014-04-01 00:17:00\nTuesday\n0\n862a1072fffffff\n(40.7041679083504, -74.01600847979245)\n\n\n2\n4/1/2014 0:21:00\n40.7316\n-73.9873\nB02512\n2014-04-01 00:21:00\nTuesday\n0\n862a100d7ffffff\n(40.74274905936817, -73.95762841287764)\n\n\n3\n4/1/2014 0:28:00\n40.7588\n-73.9776\nB02512\n2014-04-01 00:28:00\nTuesday\n0\n862a100d7ffffff\n(40.74274905936817, -73.95762841287764)\n\n\n4\n4/1/2014 0:33:00\n40.7594\n-73.9722\nB02512\n2014-04-01 00:33:00\nTuesday\n0\n862a100d7ffffff\n(40.74274905936817, -73.95762841287764)\n# Define a layer to display on a map\nlayer = pdk.Layer(\n    \"H3HexagonLayer\",\n    df,\n    pickable=True,\n    stroked=True,\n    filled=True,\n    extruded=False,\n    get_hexagon=\"hex\",\n    get_fill_color=\"[255 - count, 255, count]\",\n    get_line_color=[255, 255, 255],\n    line_width_min_pixels=2,\n)\n\n# Set the viewport location\nview_state = pdk.ViewState(latitude=37.7749295, longitude=-122.4194155, zoom=14, bearing=0, pitch=30)\n\n# Render\nr = pdk.Deck(layers=[layer], initial_view_state=view_state, tooltip={\"text\": \"Count: {count}\"})\nr.show()\n# 데이터 로드\ndf = pd.read_csv('https://github.com/fivethirtyeight/uber-tlc-foil-response/raw/master/uber-trip-data/uber-raw-data-apr14.csv')\n\n# 데이터셋 확인\nprint(df.head())\n\n          Date/Time      Lat      Lon    Base\n0  4/1/2014 0:11:00  40.7690 -73.9549  B02512\n1  4/1/2014 0:17:00  40.7267 -74.0345  B02512\n2  4/1/2014 0:21:00  40.7316 -73.9873  B02512\n3  4/1/2014 0:28:00  40.7588 -73.9776  B02512\n4  4/1/2014 0:33:00  40.7594 -73.9722  B02512\ndf.describe()\n\n\n\n\n\n\n\n\nLat\nLon\n\n\n\n\ncount\n564516.000000\n564516.000000\n\n\nmean\n40.740005\n-73.976817\n\n\nstd\n0.036083\n0.050426\n\n\nmin\n40.072900\n-74.773300\n\n\n25%\n40.722500\n-73.997700\n\n\n50%\n40.742500\n-73.984800\n\n\n75%\n40.760700\n-73.970000\n\n\nmax\n42.116600\n-72.066600"
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/data_analysis_uber.html#데이터의-기본적인-indexing-및-slicing",
    "href": "Data_Mining/Geospatial_Analysis/data_analysis_uber.html#데이터의-기본적인-indexing-및-slicing",
    "title": "Uber Data를 활용한 분석",
    "section": "1. 데이터의 기본적인 indexing 및 slicing",
    "text": "1. 데이터의 기본적인 indexing 및 slicing\n\n# 처음 5개의 행을 출력\ndf.head()\n\n\n\n\n\n\n\n\nDate/Time\nLat\nLon\nBase\n\n\n\n\n0\n4/1/2014 0:11:00\n40.7690\n-73.9549\nB02512\n\n\n1\n4/1/2014 0:17:00\n40.7267\n-74.0345\nB02512\n\n\n2\n4/1/2014 0:21:00\n40.7316\n-73.9873\nB02512\n\n\n3\n4/1/2014 0:28:00\n40.7588\n-73.9776\nB02512\n\n\n4\n4/1/2014 0:33:00\n40.7594\n-73.9722\nB02512\n\n\n\n\n\n\n\n\n# 'Lat' 열의 값만 출력\ndf['Lat']\n\n0         40.7690\n1         40.7267\n2         40.7316\n3         40.7588\n4         40.7594\n           ...   \n564511    40.7640\n564512    40.7629\n564513    40.7443\n564514    40.6756\n564515    40.6880\nName: Lat, Length: 564516, dtype: float64\n\n\n\n# 10행부터 20행까지 출력\ndf.iloc[10:21]\n\n\n\n\n\n\n\n\nDate/Time\nLat\nLon\nBase\n\n\n\n\n10\n4/1/2014 1:19:00\n40.7256\n-73.9869\nB02512\n\n\n11\n4/1/2014 1:48:00\n40.7591\n-73.9684\nB02512\n\n\n12\n4/1/2014 1:49:00\n40.7271\n-73.9803\nB02512\n\n\n13\n4/1/2014 2:11:00\n40.6463\n-73.7896\nB02512\n\n\n14\n4/1/2014 2:25:00\n40.7564\n-73.9167\nB02512\n\n\n15\n4/1/2014 2:31:00\n40.7666\n-73.9531\nB02512\n\n\n16\n4/1/2014 2:43:00\n40.7580\n-73.9761\nB02512\n\n\n17\n4/1/2014 3:22:00\n40.7238\n-73.9821\nB02512\n\n\n18\n4/1/2014 3:35:00\n40.7531\n-74.0039\nB02512\n\n\n19\n4/1/2014 3:35:00\n40.7389\n-74.0393\nB02512\n\n\n20\n4/1/2014 3:41:00\n40.7619\n-73.9715\nB02512\n\n\n\n\n\n\n\n\n# Base 갯수 확인\ndf['Base'].value_counts()\n\nBase\nB02682    227808\nB02598    183263\nB02617    108001\nB02512     35536\nB02764      9908\nName: count, dtype: int64"
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/data_analysis_uber.html#결측치에-대한-처리",
    "href": "Data_Mining/Geospatial_Analysis/data_analysis_uber.html#결측치에-대한-처리",
    "title": "Uber Data를 활용한 분석",
    "section": "2. 결측치에 대한 처리",
    "text": "2. 결측치에 대한 처리\n\n# 결측치 개수 확인\ndf.isnull().sum()\n\nDate/Time    0\nLat          0\nLon          0\nBase         0\ndtype: int64"
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/data_analysis_uber.html#기초적인-통계-추출-및-분석",
    "href": "Data_Mining/Geospatial_Analysis/data_analysis_uber.html#기초적인-통계-추출-및-분석",
    "title": "Uber Data를 활용한 분석",
    "section": "3. 기초적인 통계 추출 및 분석",
    "text": "3. 기초적인 통계 추출 및 분석\n\n# 데이터 요약\nprint(df.describe())\n\n# 'Lat' 열의 평균\nprint(df['Lat'].mean())\n\n# 'Lon' 열의 중앙값\nprint(df['Lon'].median())\n\n# 'Base' 열에서 각 값의 빈도수 출력\nprint(df['Base'].value_counts())\n\n                 Lat            Lon\ncount  564516.000000  564516.000000\nmean       40.740005     -73.976817\nstd         0.036083       0.050426\nmin        40.072900     -74.773300\n25%        40.722500     -73.997700\n50%        40.742500     -73.984800\n75%        40.760700     -73.970000\nmax        42.116600     -72.066600\n40.74000520746974\n-73.9848\nBase\nB02682    227808\nB02598    183263\nB02617    108001\nB02512     35536\nB02764      9908\nName: count, dtype: int64"
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/data_analysis_uber.html#데이터에-대한-질문을-던져보고-해답을-찾기",
    "href": "Data_Mining/Geospatial_Analysis/data_analysis_uber.html#데이터에-대한-질문을-던져보고-해답을-찾기",
    "title": "Uber Data를 활용한 분석",
    "section": "4. 데이터에 대한 질문을 던져보고 해답을 찾기",
    "text": "4. 데이터에 대한 질문을 던져보고 해답을 찾기\n\n4.1 월별/요일별 Uber 이용량 비교\n\n가장 Uber 이용량이 많은 요일은 언제일까요?\n\n\ndf['Datetime'] = pd.to_datetime(df['Date/Time'])\ndf['Weekday'] = df['Datetime'].dt.day_name()\nweekday_count = df['Weekday'].value_counts().to_frame().reset_index()\ndisplay(weekday_count)\nprint(f\"Uber 이용량이 가장 많은 요일 : {weekday_count.loc[weekday_count['count'].idxmax(), 'Weekday']}\")\n\n\n\n\n\n\n\n\nWeekday\ncount\n\n\n\n\n0\nWednesday\n108631\n\n\n1\nTuesday\n91185\n\n\n2\nFriday\n90303\n\n\n3\nThursday\n85067\n\n\n4\nSaturday\n77218\n\n\n5\nMonday\n60861\n\n\n6\nSunday\n51251\n\n\n\n\n\n\n\nUber 이용량이 가장 많은 요일 : Wednesday\n\n\n\nfig, ax = plt.subplots(figsize = (8, 6))\nsns.barplot(x = 'Weekday', y = 'count', ax = ax, data = weekday_count, palette = 'Set2')\n\nplt.title('요일별 Uber 이용량')\nplt.show()\n\n\n\n\n\n\n4.2 시간대별 이용량 비교\n\n가장 이용량이 많은 시간대는 언제일까요?\n\n\ndf['Hour'] = df['Datetime'].dt.hour\nhour_count = df['Hour'].value_counts().to_frame().reset_index()\ndisplay(hour_count.head())\nprint(f\"Uber 이용량이 가장 많은 시간대 : {hour_count.loc[hour_count['count'].idxmax(), 'Hour']}\")\n\n\n\n\n\n\n\n\nHour\ncount\n\n\n\n\n0\n17\n45475\n\n\n1\n18\n43003\n\n\n2\n16\n42003\n\n\n3\n19\n38923\n\n\n4\n21\n36964\n\n\n\n\n\n\n\nUber 이용량이 가장 많은 시간대 : 17\n\n\n\nfig, ax = plt.subplots(figsize = (8, 6))\nsns.barplot(x = 'Hour', y = 'count', ax = ax, data = hour_count, color = '#8BB0F5')# palette = 'viridis')\n\nplt.title('시간대별 Uber 이용량')\nplt.show()\n\n\n\n\n\n\n4.3 Uber 수요에 대한 공간적인 시각화\n\n가장 수요가 많은 지역은 어디일까요?\n시간대/지역별로 수요의 변화를 나타내보고, 시사점을 도출해 봅시다\n\n\ndf['hex'] = df.apply(lambda row : h3.geo_to_h3(row['Lat'], row['Lon'], 6), axis = 1)\ndf.head()\n\n\n\n\n\n\n\n\nDate/Time\nLat\nLon\nBase\nDatetime\nWeekday\nHour\nhex\n\n\n\n\n0\n4/1/2014 0:11:00\n40.7690\n-73.9549\nB02512\n2014-04-01 00:11:00\nTuesday\n0\n862a100d7ffffff\n\n\n1\n4/1/2014 0:17:00\n40.7267\n-74.0345\nB02512\n2014-04-01 00:17:00\nTuesday\n0\n862a1072fffffff\n\n\n2\n4/1/2014 0:21:00\n40.7316\n-73.9873\nB02512\n2014-04-01 00:21:00\nTuesday\n0\n862a100d7ffffff\n\n\n3\n4/1/2014 0:28:00\n40.7588\n-73.9776\nB02512\n2014-04-01 00:28:00\nTuesday\n0\n862a100d7ffffff\n\n\n4\n4/1/2014 0:33:00\n40.7594\n-73.9722\nB02512\n2014-04-01 00:33:00\nTuesday\n0\n862a100d7ffffff\n\n\n\n\n\n\n\n\nh3_counts = Counter(df['hex']) # 각 셀에 포함된 데이터 개수 계산\ndf_h3_counts = pd.DataFrame.from_dict(h3_counts, orient = 'index').reset_index()\ndf_h3_counts.columns = ['h3', 'count']\n\ndf_h3_counts['lat'] = df_h3_counts['h3'].apply(lambda x : h3.h3_to_geo(x)[0])\ndf_h3_counts['lon'] = df_h3_counts['h3'].apply(lambda x : h3.h3_to_geo(x)[1])\n\ndf_h3_counts.head()\n\n\n\n\n\n\n\n\nh3\ncount\nlat\nlon\n\n\n\n\n0\n862a100d7ffffff\n247294\n40.742749\n-73.957628\n\n\n1\n862a1072fffffff\n125962\n40.704168\n-74.016008\n\n\n2\n862a10727ffffff\n50036\n40.759208\n-74.033187\n\n\n3\n862a103b7ffffff\n11639\n40.654664\n-73.789791\n\n\n4\n862a100f7ffffff\n10999\n40.781318\n-73.899155\n\n\n\n\n\n\n\n\n# Define a layer to display on a map\nlayer = pdk.Layer(\n    'H3HexagonLayer',\n    df_h3_counts,\n    pickable = True,\n    stroked = True,\n    filled = True,\n    extruded = False,\n    get_hexagon = 'h3',\n    get_fill_color = '[255 - count, 255, count]',\n    get_line_color = [255, 255, 255],\n    line_width_min_pixels = 2,\n)\n\n# Set the viewport location\nview_state = pdk.ViewState(latitude = 40.7425, longitude = -73.9848,\n                           zoom = 8, bearing = 0, pitch = 30)\n\n# Render\nr = pdk.Deck(layers = [layer], initial_view_state = view_state, tooltip = {'text' : 'Count: {count}'})\nr.show()"
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/Exercise2_Coordinate_Reference_Systems.html",
    "href": "Data_Mining/Geospatial_Analysis/Exercise2_Coordinate_Reference_Systems.html",
    "title": "Exercise2 : Coordinate Reference Systems",
    "section": "",
    "text": "Kaggle Geospatial Analysis Exercise 2\n\n이 노트북은 Kaggle Geospatial Analysis의 Exercise 입니다. 이 링크로 튜토리얼을 볼 수 있습니다.\n\n\n소개\n당신은 조류 보호 전문가이며 보라색 담비의 이동 패턴을 이해하고자 합니다. 연구를 통해 이 새가 일반적으로 미국 동부에서 여름 번식기를 보낸 후 겨울을 위해 남미로 이동한다는 사실을 알게 되었습니다. 하지만 이 새는 멸종 위기에 처해 있기 때문에 이 새가 방문할 가능성이 높은 장소를 자세히 살펴보고 싶을 것입니다.\n\n\n\n남아메리카에는 여러 보호 지역이 있으며, 이 지역으로 이동하거나 서식하는 종들이 번성할 수 있는 최상의 기회를 갖도록 특별 규정에 따라 운영되고 있습니다. 보라색 담비가 이러한 지역을 방문하는 경향이 있는지 알고 싶을 것입니다. 이 질문에 답하기 위해 최근에 수집한 11가지 새의 연중 위치를 추적하는 데이터를 사용합니다.\n\nimport warnings\nwarnings.filterwarnings(action = 'ignore')\n\nimport pandas as pd\nimport geopandas as gpd\n\nfrom shapely.geometry import LineString\n\n\n1) 데이터 불러오기\n다음 셀을 실행하여 GPS 데이터를 birds_df DataFrame 에 로드합니다.\n\nbirds_df = pd.read_csv('./geospatial-learn-course-data/purple_martin.csv', parse_dates = ['timestamp'])\nprint(f\"There are {birds_df['tag-local-identifier'].nunique()} different birds in the dataset.\")\nbirds_df.head()\n\nThere are 11 different birds in the dataset.\n\n\n\n\n\n\n\n\n\ntimestamp\nlocation-long\nlocation-lat\ntag-local-identifier\n\n\n\n\n0\n2014-08-15 05:56:00\n-88.146014\n17.513049\n30448\n\n\n1\n2014-09-01 05:59:00\n-85.243501\n13.095782\n30448\n\n\n2\n2014-10-30 23:58:00\n-62.906089\n-7.852436\n30448\n\n\n3\n2014-11-15 04:59:00\n-61.776826\n-11.723898\n30448\n\n\n4\n2014-11-30 09:59:00\n-61.241538\n-11.612237\n30448\n\n\n\n\n\n\n\nbird_df 데이터셋에는 11마리의 새가 있으며, 각 새는 tag-local-identifier 열의 고유 값으로 식별됩니다. 각 새는 일 년 중 다른 시기에 수집된 여러 측정값을 가지고 있습니다.\n다음 셀을 사용하여 GeoDataFrame birds를 만듭니다.\n- birds에는 (경도, 위도) 위치가 있는 포인트 개체를 포함하는 geometry 열과 함께 birds_df의 모든 열이 있어야 합니다.\n- birds의 CRS를 {'init': 'epsg:4326'}로 설정합니다.\n\nbirds = gpd.GeoDataFrame(birds_df, geometry = gpd.points_from_xy(birds_df['location-long'], birds_df['location-lat']))\nbirds.crs = {'init': 'epsg:4326'}\nbirds.head()\n\n\n\n\n\n\n\n\ntimestamp\nlocation-long\nlocation-lat\ntag-local-identifier\ngeometry\n\n\n\n\n0\n2014-08-15 05:56:00\n-88.146014\n17.513049\n30448\nPOINT (-88.14601 17.51305)\n\n\n1\n2014-09-01 05:59:00\n-85.243501\n13.095782\n30448\nPOINT (-85.24350 13.09578)\n\n\n2\n2014-10-30 23:58:00\n-62.906089\n-7.852436\n30448\nPOINT (-62.90609 -7.85244)\n\n\n3\n2014-11-15 04:59:00\n-61.776826\n-11.723898\n30448\nPOINT (-61.77683 -11.72390)\n\n\n4\n2014-11-30 09:59:00\n-61.241538\n-11.612237\n30448\nPOINT (-61.24154 -11.61224)\n\n\n\n\n\n\n\n\n\n2) 데이터 시각화\n다음 셀을 실행하여 GeoPandas에서 'naturalearth_lowres' 데이터를 로드하고 아메리카 대륙(북미와 남미 모두)의 모든 국가의 경계를 포함하는 GeoDataFrame을 americas로 설정합니다.\n\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\namericas = world.loc[world['continent'].isin(['North America', 'South America'])]\namericas.head()\n\n\n\n\n\n\n\n\npop_est\ncontinent\nname\niso_a3\ngdp_md_est\ngeometry\n\n\n\n\n3\n37589262.0\nNorth America\nCanada\nCAN\n1736425\nMULTIPOLYGON (((-122.84000 49.00000, -122.9742...\n\n\n4\n328239523.0\nNorth America\nUnited States of America\nUSA\n21433226\nMULTIPOLYGON (((-122.84000 49.00000, -120.0000...\n\n\n9\n44938712.0\nSouth America\nArgentina\nARG\n445445\nMULTIPOLYGON (((-68.63401 -52.63637, -68.25000...\n\n\n10\n18952038.0\nSouth America\nChile\nCHL\n282318\nMULTIPOLYGON (((-68.63401 -52.63637, -68.63335...\n\n\n16\n11263077.0\nNorth America\nHaiti\nHTI\n14332\nPOLYGON ((-71.71236 19.71446, -71.62487 19.169...\n\n\n\n\n\n\n\n다음 셀을 사용하여 (1) Americas GeoDataFrame의 국가 경계와 (2) birds_gdf GeoDataFrame의 모든 점을 모두 표시하는 단일 플롯을 만듭니다.\n여기서 특별한 스타일링에 대해 걱정할 필요 없이 모든 데이터가 제대로 로드되었는지 간단히 확인하기 위해 예비 플롯을 만들면 됩니다. 특히, 새를 구분하기 위해 점을 색상으로 구분할 필요가 없으며, 시작점과 끝점을 구분할 필요도 없습니다. 이 작업은 다음 Exercise에서 하도록 하겠습니다.\n\nax = americas.plot(figsize = (8, 8), color = 'white', linestyle = ':', edgecolor = 'black')\nbirds.plot(ax = ax, markersize = 10)\n\n&lt;Axes: &gt;\n\n\n\n\n\n\n\n3) 각 새들의 여행의 출발지와 도착지는 어디인가요? (파트 1)\n이제 각 새의 경로를 더 자세히 살펴볼 준비가 되었습니다. 다음 셀을 실행하여 두 개의 GeoDataFrame을 만듭니다. - path_gdf에는 각 새의 경로를 표시하는 LineString 객체가 포함되어 있습니다. 이 셀은 LineString() 메서드를 사용하여 Point 개체 목록에서 LineString 개체를 만듭니다. - start_gdf에는 각 새의 경로의 시작 지점이 포함됩니다.\n\npath_df = birds.groupby('tag-local-identifier')['geometry'].apply(list).apply(lambda x : LineString(x)).reset_index()\npath_gdf = gpd.GeoDataFrame(path_df, geometry = path_df.geometry)\npath_gdf.crs = {'init' :'epsg:4326'}\n\nstart_df = birds.groupby('tag-local-identifier')['geometry'].apply(list).apply(lambda x : x[0]).reset_index()\nstart_gdf = gpd.GeoDataFrame(start_df, geometry = start_df.geometry)\nstart_gdf.crs = {'init' :'epsg:4326'}\n\nstart_gdf.head()\n\n\n\n\n\n\n\n\ntag-local-identifier\ngeometry\n\n\n\n\n0\n30048\nPOINT (-90.12992 20.73242)\n\n\n1\n30054\nPOINT (-93.60861 46.50563)\n\n\n2\n30198\nPOINT (-80.31036 25.92545)\n\n\n3\n30263\nPOINT (-76.78146 42.99209)\n\n\n4\n30275\nPOINT (-76.78213 42.99207)\n\n\n\n\n\n\n\n다음 셀을 사용하여 각 새의 최종 위치가 포함된 end_gdf GeoDataFrame을 만듭니다.\n- 형식은 두 개의 열(tag-local-identifier 및 geometry)이 있는 start_gdf와 동일해야 하며, 여기서 geometry 열에는 포인트 개체가 포함되어야 합니다. - end_gdf의 CRS를 {'init': 'epsg:4326'}로 설정합니다.\n\nend_df = birds.groupby('tag-local-identifier')['geometry'].apply(list).apply(lambda x : x[-1]).reset_index()\nend_gdf = gpd.GeoDataFrame(end_df, geometry = end_df.geometry)\nend_gdf.crs = {'init' :'epsg:4326'}\n\nend_gdf.head()\n\n\n\n\n\n\n\n\ntag-local-identifier\ngeometry\n\n\n\n\n0\n30048\nPOINT (-47.53632 -4.43758)\n\n\n1\n30054\nPOINT (-62.47914 -5.03840)\n\n\n2\n30198\nPOINT (-57.46417 -2.77617)\n\n\n3\n30263\nPOINT (-50.19230 -5.70504)\n\n\n4\n30275\nPOINT (-57.70404 -16.72336)\n\n\n\n\n\n\n\n\n\n4) 각 새들의 여행의 출발지와 도착지는 어디인가요? (파트 2)\n위의 GeoDataFrame(path_gdf, start_gdf, end_gdf)을 사용하여 모든 새의 경로를 단일 맵에 시각화합니다. americas GeoDataFrame을 사용할 수도 있습니다.\n\nax = americas.plot(figsize = (8, 8), color = 'white', linestyle = ':', edgecolor = 'black')\npath_gdf.plot(ax = ax, cmap = 'tab20b', linewidth = 1, linestyle = '-', zorder = 1)\nstart_gdf.plot(ax = ax, color = 'red', markersize = 10)\nend_gdf.plot(ax = ax, color = 'blue', markersize = 10)\n\n&lt;Axes: &gt;\n\n\n\n\n\n\n\n5) 남아메리카의 보호 지역은 어디인가요? (파트 1)\n모든 새들은 남미 어딘가에 있는 것 같습니다. 하지만 새들이 보호 지역으로 갈까요?\n다음 셀에서는 남아메리카의 모든 보호 지역의 위치가 포함된 protected_areas GeoDataFrame을 만듭니다. 해당 shapefile은 파일 경로 protected_filepath에 있습니다.\n\nprotected_filepath = './geospatial-learn-course-data/SAPA_Aug2019-shapefile/SAPA_Aug2019-shapefile/SAPA_Aug2019-shapefile-polygons.shp'\nprotected_areas = gpd.read_file(protected_filepath)\nprotected_areas.head()\n\n\n\n\n\n\n\n\nWDPAID\nWDPA_PID\nPA_DEF\nNAME\nORIG_NAME\nDESIG\nDESIG_ENG\nDESIG_TYPE\nIUCN_CAT\nINT_CRIT\n...\nGOV_TYPE\nOWN_TYPE\nMANG_AUTH\nMANG_PLAN\nVERIF\nMETADATAID\nSUB_LOC\nPARENT_ISO\nISO3\ngeometry\n\n\n\n\n0\n14067.0\n14067\n1\nHet Spaans Lagoen\nHet Spaans Lagoen\nRamsar Site, Wetland of International Importance\nRamsar Site, Wetland of International Importance\nInternational\nNot Reported\nNot Reported\n...\nNot Reported\nNot Reported\nNot Reported\nManagement plan is not implemented and not ava...\nState Verified\n1856\nNot Reported\nNLD\nABW\nPOLYGON ((-69.97523 12.47379, -69.97523 12.473...\n\n\n1\n14003.0\n14003\n1\nBubali Pond Bird Sanctuary\nBubali Pond Bird Sanctuary\nBird Sanctuary\nBird Sanctuary\nNational\nNot Reported\nNot Applicable\n...\nNot Reported\nNot Reported\nNot Reported\nNot Reported\nState Verified\n1899\nNot Reported\nNLD\nABW\nPOLYGON ((-70.04734 12.56329, -70.04615 12.563...\n\n\n2\n555624439.0\n555624439\n1\nArikok National Park\nArikok National Park\nNational Park\nNational Park\nNational\nNot Reported\nNot Applicable\n...\nNon-profit organisations\nNon-profit organisations\nFundacion Parke Nacional Arikok\nNot Reported\nState Verified\n1899\nNot Reported\nNLD\nABW\nMULTIPOLYGON (((-69.96302 12.48384, -69.96295 ...\n\n\n3\n303894.0\n303894\n1\nMadidi\nMadidi\nArea Natural de Manejo Integrado\nNatural Integrated Management Area\nNational\nNot Reported\nNot Applicable\n...\nFederal or national ministry or agency\nNot Reported\nNot Reported\nNot Reported\nState Verified\n1860\nBO-L\nBOL\nBOL\nPOLYGON ((-68.59060 -14.43388, -68.59062 -14.4...\n\n\n4\n303893.0\n303893\n1\nApolobamba\nApolobamba\nArea Natural de Manejo Integado Nacional\nNational Natural Integrated Management Area\nNational\nNot Reported\nNot Applicable\n...\nFederal or national ministry or agency\nNot Reported\nNot Reported\nNot Reported\nState Verified\n1860\nBO-L\nBOL\nBOL\nPOLYGON ((-69.20949 -14.73334, -69.20130 -14.7...\n\n\n\n\n5 rows × 29 columns\n\n\n\n\n\n6) 남아메리카의 보호 지역은 어디인가요? (파트 2)\nprotected_areas GeoDataFrame을 사용하여 남아메리카의 보호 지역 위치를 표시하는 지도를 생성합니다. (일부 보호 지역은 육지에 있는 반면 다른 보호 지역은 해역에 있음을 알 수 있습니다.)\n\nsouth_america = americas.loc[americas['continent'] == 'South America']\n\nax = south_america.plot(figsize = (5, 5), color = 'white', edgecolor = 'gray')\nprotected_areas.plot(ax = ax, alpha = 0.4)\n\n&lt;Axes: &gt;\n\n\n\n\n\n\n\n7) 남아메리카의 몇 퍼센트가 보호되고 있나요?\n남아메리카의 몇 퍼센트가 보호되고 있는지 확인하여 새들이 살기에 적합한 남아메리카의 면적을 파악하고 싶으신가요?\n첫번째 단계로 남아메리카의 모든 보호 지역(해양 지역 제외)의 총 면적을 계산합니다. 이를 위해 각각 총 면적과 총 해양 면적을 km² 단위로 포함하는 REP_AREA 및 REP_M_AREA 열을 사용합니다.\n\nP_Area = sum(protected_areas['REP_AREA'] - protected_areas['REP_M_AREA'])\nprint(f'South America has {P_Area} km² of protected areas.')\n\nSouth America has 5396761.9116883585 km² of protected areas.\n\n\n그리고, south_america GeoDataFrame을 사용하여 계산을 완료합니다.\n\nsouth_america.head()\n\n\n\n\n\n\n\n\npop_est\ncontinent\nname\niso_a3\ngdp_md_est\ngeometry\n\n\n\n\n9\n44938712.0\nSouth America\nArgentina\nARG\n445445\nMULTIPOLYGON (((-68.63401 -52.63637, -68.25000...\n\n\n10\n18952038.0\nSouth America\nChile\nCHL\n282318\nMULTIPOLYGON (((-68.63401 -52.63637, -68.63335...\n\n\n20\n3398.0\nSouth America\nFalkland Is.\nFLK\n282\nPOLYGON ((-61.20000 -51.85000, -60.00000 -51.2...\n\n\n28\n3461734.0\nSouth America\nUruguay\nURY\n56045\nPOLYGON ((-57.62513 -30.21629, -56.97603 -30.1...\n\n\n29\n211049527.0\nSouth America\nBrazil\nBRA\n1839758\nPOLYGON ((-53.37366 -33.76838, -53.65054 -33.2...\n\n\n\n\n\n\n\n다음 단계에 따라 남아메리카의 총 면적을 계산합니다. - 각 Polygon의 area 속성을 사용하여 각 국가의 면적을 계산하고 (CRS로 EPSG:3035를 사용) 결과를 합산합니다. 계산된 면적은 m² 단위로 표시됩니다. - 계산된 값을 km² 단위로 변환합니다.\n\ntotalArea = sum(south_america['geometry'].to_crs(epsg = 3035).area) / 10**6\ntotalArea\n\n17759005.81506123\n\n\n다음 셀을 실행하여 남아메리카의 보호 구역의 비율을 계산합니다.\n\npercentage_protected = P_Area / totalArea\nprint('Approximately {}% of South America is protected.'.format(round(percentage_protected * 100, 2)))\n\nApproximately 30.39% of South America is protected.\n\n\n\n\n8) 남아메리카의 새들은 어디에 있나요?\n새들이 보호 구역에 있을까요?\n모든 새에 대해 남아메리카에서 발견된 모든 위치를 보여주는 지도를 생성합니다. 또한, 남아메리카의 모든 보호 지역의 위치도 시각화합니다.\n육지 구성 요소가 없는 순수 해양 지역인 보호 지역을 제외하려면 MARINE 열을 사용하고 protected_areas GeoDataFrame의 모든 행 대신 protected_areas[protected_areas['MARINE'] != '2']의 행만 시각화하면 됩니다.\n\nax = south_america.plot(figsize = (5, 5), color = 'white', edgecolor = 'gray')\nprotected_areas[protected_areas['MARINE'] != '2'].plot(ax = ax, alpha = 0.4, zorder = 1)\nbirds[birds['geometry'].y &lt; 0].plot(ax = ax, color = 'red', alpha = 0.6, markersize = 10, zorder = 2)\n\n&lt;Axes: &gt;\n\n\n\n\n\n\n\n\n그 다음은?\nLesson 3 : Interactive Maps 를 통해 지리공간 데이터로 대화형 지도를 만들어 보세요.\n\nHave questions or comments? Visit the course discussion forum to chat with other learners."
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/Exercise4_Manipulating_Geospatial_Data.html",
    "href": "Data_Mining/Geospatial_Analysis/Exercise4_Manipulating_Geospatial_Data.html",
    "title": "Exercise4 : Manipulating Geospatial Data",
    "section": "",
    "text": "Kaggle Geospatial Analysis Exercise 4\n\n이 노트북은 Kaggle Geospatial Analysis의 Exercise 입니다. 이 링크로 튜토리얼을 볼 수 있습니다.\n\n\n소개\n당신은 스타벅스 리저브 로스터리로 전환할 다음 매장을 찾고 있는 스타벅스 빅데이터 전문가(실존하는 직업)입니다.\n스타벅스 리저브 로스터리는 일반 스타벅스 매장보다 훨씬 더 크고 다양한 음식과 와인, 고급 라운지 공간 등 여러가지 추가 기능을 갖추고 있습니다.\n캘리포니아 주 내 여러 지방의 인구 통계를 조사하여 잠재적으로 적합한 위치를 결정합니다.\n\n\n\n\nimport warnings\nwarnings.filterwarnings(action = 'ignore')\n\nimport math\nimport numpy as np\nimport pandas as pd\nimport geopandas as gpd\nfrom geopy.geocoders import Nominatim\n\nimport folium \nfrom folium import Marker\nfrom folium.plugins import MarkerCluster\n\nembed_map() 함수를 사용해 지도를 시각화해봅시다.\n\ndef embed_map(m, file_name) :\n    from IPython.display import IFrame\n    m.save(file_name)\n    return IFrame(file_name, width = '100%', height = '500px')\n\n\n1) 누락된 위치 지오코딩\n캘리포니아 주의 스타벅스의 위치를 포함하는 starbucks라는 DataFrame을 생성합니다.\n\nstarbucks = pd.read_csv('./geospatial-learn-course-data/starbucks_locations.csv')\nstarbucks.head()\n\n\n\n\n\n\n\n\nStore Number\nStore Name\nAddress\nCity\nLongitude\nLatitude\n\n\n\n\n0\n10429-100710\nPalmdale & Hwy 395\n14136 US Hwy 395 Adelanto CA\nAdelanto\n-117.40\n34.51\n\n\n1\n635-352\nKanan & Thousand Oaks\n5827 Kanan Road Agoura CA\nAgoura\n-118.76\n34.16\n\n\n2\n74510-27669\nVons-Agoura Hills #2001\n5671 Kanan Rd. Agoura Hills CA\nAgoura Hills\n-118.76\n34.15\n\n\n3\n29839-255026\nTarget Anaheim T-0677\n8148 E SANTA ANA CANYON ROAD AHAHEIM CA\nAHAHEIM\n-117.75\n33.87\n\n\n4\n23463-230284\nSafeway - Alameda 3281\n2600 5th Street Alameda CA\nAlameda\n-122.28\n37.79\n\n\n\n\n\n\n\n대부분의 매장의 위도와 경도는 알고 있습니다. 하지만, 버클리 시의 모든 위치가 누락되어 있습니다.\n\nprint(starbucks[['Longitude', 'Latitude']].isnull().sum(), '\\n')\n\nrows_with_missing = starbucks[starbucks['City'] == 'Berkeley']\nrows_with_missing\n\nLongitude    5\nLatitude     5\ndtype: int64 \n\n\n\n\n\n\n\n\n\n\nStore Number\nStore Name\nAddress\nCity\nLongitude\nLatitude\n\n\n\n\n153\n5406-945\n2224 Shattuck - Berkeley\n2224 Shattuck Avenue Berkeley CA\nBerkeley\nNaN\nNaN\n\n\n154\n570-512\nSolano Ave\n1799 Solano Avenue Berkeley CA\nBerkeley\nNaN\nNaN\n\n\n155\n17877-164526\nSafeway - Berkeley #691\n1444 Shattuck Place Berkeley CA\nBerkeley\nNaN\nNaN\n\n\n156\n19864-202264\nTelegraph & Ashby\n3001 Telegraph Avenue Berkeley CA\nBerkeley\nNaN\nNaN\n\n\n157\n9217-9253\n2128 Oxford St.\n2128 Oxford Street Berkeley CA\nBerkeley\nNaN\nNaN\n\n\n\n\n\n\n\n아래 셀을 사용하여 Nominatim geocoder로 누락된 값을 채우세요.\n\n\n\n\n\n\n튜토리얼에서는 geopy.geocoders의 Nominatim()을 사용하여 값을 지오코딩했으며, 이 강좌 외의 프로젝트에서도 이 함수를 사용할 수 있습니다.\n\n\n이 연습에서는 약간 다른 함수 Nominatim()(learntools.geospatial.tools 내장 함수)을 사용합니다. 이 함수는 GeoPandas의 함수와 동일하게 작동합니다.\n\n\n즉, import 문을 변경하지 않는 한 노트북 상단의 가져오기 문을 변경하지 않고, 아래 코드 셀에서 지오코딩 함수를 geocode()로 호출하기만 하면 됩니다.\n\n\n\n\ngeolocator = Nominatim(user_agent = 'kaggle_learn')\n\ndef my_geocoder(row) :\n    try :\n        point = geolocator.geocode(row).point\n        return pd.Series({'Latitude' : point.latitude, 'Longitude' : point.longitude})\n    except :\n        return None\n\nrows_with_missing[['Latitude', 'Longitude']] = rows_with_missing.apply(lambda x : my_geocoder(x['Address']), axis = 1)\n\nstarbucks.update(rows_with_missing[['Latitude', 'Longitude']])\n\nprint('{}% of addresses were geocoded!'.format(\n    (1 - sum(np.isnan(starbucks['Latitude'])) / len(starbucks)) * 100))\n\n100.0% of addresses were geocoded!\n\n\n\n\n2) 버클리 지역 시각화\n방금 찾은 위치를 살펴봅시다. 버클리의 위도, 경도를 OpenStreetMap 스타일로 시각화해보세요.\n\nm_2 = folium.Map(location = [37.88, -122.26], tiles = 'openstreetmap', zoom_start = 13)\n\nfor idx, row in starbucks[starbucks['City'] == 'Berkeley'].iterrows() :\n    Marker([row['Latitude'], row['Longitude']], popup = row['Store Name']).add_to(m_2)\n    \nm_2 # embed_map(m_2, 'q_2.html')\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n버클리의 5개의 매장만 고려했을 때, 몇 개의 매장이 잠재적으로 정확(정확히 도시에 위치)해 보이나요?\n5개 매장 모두 정확 해 보입니다.\n\n\n3) 데이터 통합\n아래 셀을 사용하여 캘리포니아 주의 각 지방에 대한 이름, 면적(km²) 및 고유ID(GEOID 열)가 포함된 CA_counties GeoDataFrame을 로드합니다.\ngeometry 열에는 각 지방의 경계가 있는 Polygon이 포함되어 있습니다.\n\nCA_counties = gpd.read_file('./geospatial-learn-course-data/CA_county_boundaries/CA_county_boundaries/CA_county_boundaries.shp')\nCA_counties.head()\n\n\n\n\n\n\n\n\nGEOID\nname\narea_sqkm\ngeometry\n\n\n\n\n0\n6091\nSierra County\n2491.995494\nPOLYGON ((-120.65560 39.69357, -120.65554 39.6...\n\n\n1\n6067\nSacramento County\n2575.258262\nPOLYGON ((-121.18858 38.71431, -121.18732 38.7...\n\n\n2\n6083\nSanta Barbara County\n9813.817958\nMULTIPOLYGON (((-120.58191 34.09856, -120.5822...\n\n\n3\n6009\nCalaveras County\n2685.626726\nPOLYGON ((-120.63095 38.34111, -120.63058 38.3...\n\n\n4\n6111\nVentura County\n5719.321379\nMULTIPOLYGON (((-119.63631 33.27304, -119.6360...\n\n\n\n\n\n\n\n다음으로, 우리는 3개의 DataFrame을 생성합니다.\n\nCA_pop에는 각 지방의 인구 추정치가 포함됩니다.\nCA_high_earners에는 연간 소득이 $150,000 이상인 가구 수가 포함됩니다.\nCA_median_age에는 각 지방의 평균 연령을 포함합니다.\n\n\nCA_pop = pd.read_csv('./geospatial-learn-course-data/CA_county_population.csv', index_col = 'GEOID')\nCA_high_earners = pd.read_csv('./geospatial-learn-course-data/CA_county_high_earners.csv', index_col = 'GEOID')\nCA_median_age = pd.read_csv('./geospatial-learn-course-data/CA_county_median_age.csv', index_col = 'GEOID')\n\n아래 셀을 사용하여 CA_counties GeoDataFrame과 CA_pop, CA_high_earners, CA_median_age과 조인하세요.\n조인한 GeoDataFrame의 이름을 CA_stats로 지정하고, GEOID, name, area_sqkm, geometry, population, high_earners, median_age 8개의 열을 가지도록 하세요.\n또한 CRS가 {'init' : 'epsg:4326'}으로 설정되어 있는지 확인하세요.\n\nCA_all = CA_pop.join([CA_high_earners, CA_median_age]).reset_index()\nCA_stats = CA_counties.merge(CA_all, on = 'GEOID')\nCA_stats.crs = {'init' : 'epsg:4326'}\nCA_stats.head()\n\n\n\n\n\n\n\n\nGEOID\nname\narea_sqkm\ngeometry\npopulation\nhigh_earners\nmedian_age\n\n\n\n\n0\n6091\nSierra County\n2491.995494\nPOLYGON ((-120.65560 39.69357, -120.65554 39.6...\n2987\n111\n55.0\n\n\n1\n6067\nSacramento County\n2575.258262\nPOLYGON ((-121.18858 38.71431, -121.18732 38.7...\n1540975\n65768\n35.9\n\n\n2\n6083\nSanta Barbara County\n9813.817958\nMULTIPOLYGON (((-120.58191 34.09856, -120.5822...\n446527\n25231\n33.7\n\n\n3\n6009\nCalaveras County\n2685.626726\nPOLYGON ((-120.63095 38.34111, -120.63058 38.3...\n45602\n2046\n51.6\n\n\n4\n6111\nVentura County\n5719.321379\nMULTIPOLYGON (((-119.63631 33.27304, -119.6360...\n850967\n57121\n37.5\n\n\n\n\n\n\n\n이제 모든 데이터가 한 곳에 있으므로 열의 조합으로 통계량을 계산하는 것이 훨씬 쉬워졌습니다.\n다음 셀을 실행하여 인구 밀도가 포함된 density 열을 만들어보세요.\n\nCA_stats['density'] = CA_stats['population'] / CA_stats['area_sqkm']\nCA_stats.head()\n\n\n\n\n\n\n\n\nGEOID\nname\narea_sqkm\ngeometry\npopulation\nhigh_earners\nmedian_age\ndensity\n\n\n\n\n0\n6091\nSierra County\n2491.995494\nPOLYGON ((-120.65560 39.69357, -120.65554 39.6...\n2987\n111\n55.0\n1.198638\n\n\n1\n6067\nSacramento County\n2575.258262\nPOLYGON ((-121.18858 38.71431, -121.18732 38.7...\n1540975\n65768\n35.9\n598.376878\n\n\n2\n6083\nSanta Barbara County\n9813.817958\nMULTIPOLYGON (((-120.58191 34.09856, -120.5822...\n446527\n25231\n33.7\n45.499825\n\n\n3\n6009\nCalaveras County\n2685.626726\nPOLYGON ((-120.63095 38.34111, -120.63058 38.3...\n45602\n2046\n51.6\n16.980022\n\n\n4\n6111\nVentura County\n5719.321379\nMULTIPOLYGON (((-119.63631 33.27304, -119.6360...\n850967\n57121\n37.5\n148.788107\n\n\n\n\n\n\n\n\n\n4) 어떤 지방이 유망해보이나요?\n모든 정보를 하나의 GeoDataFrame으로 축소하면 특정 기준을 충족하는 지방을 훨씬 쉽게 선택할 수 있습니다.\n다음 셀을 사용하여 CA_stats GeoDataFrame에서 행의 하위 집합 (및 모든 열)을 포함하는 sel_counties GeoDataFrame을 만듭니다.\n특히, 최소 10만 가구가 있는 지방을 선택해야합니다.\n\n연간 소득 $150,000를 버는 가구가 최소 10만 가구 이상\n연령 중앙값이 38.5세 미만\n주민 밀도가 최소 285명(km² 당) 이상\n\n추가적으로, 선정된 지방은 다음 기준 중 하나 이상을 충족해야합니다.\n\n연간 소득이 $150,000 이상인 가구가 최소 50만 가구 이상\n연령 중앙값이 35.5세 미만\n주민 밀도가 최소 1400명(km² 당) 이상\n\n\nsel_counties = CA_stats[(CA_stats['high_earners'] &gt;= 100000) & (CA_stats['median_age'] &lt; 38.5) & (CA_stats['density'] &gt;= 285) &\n                        ((CA_stats['high_earners'] &gt;= 500000) | (CA_stats['median_age'] &lt; 35.5) | (CA_stats['density'] &gt;= 1400))]\nsel_counties\n\n\n\n\n\n\n\n\nGEOID\nname\narea_sqkm\ngeometry\npopulation\nhigh_earners\nmedian_age\ndensity\n\n\n\n\n5\n6037\nLos Angeles County\n12305.376879\nMULTIPOLYGON (((-118.66761 33.47749, -118.6682...\n10105518\n501413\n36.0\n821.227834\n\n\n8\n6073\nSan Diego County\n11721.342229\nPOLYGON ((-117.43744 33.17953, -117.44955 33.1...\n3343364\n194676\n35.4\n285.237299\n\n\n10\n6075\nSan Francisco County\n600.588247\nMULTIPOLYGON (((-122.60025 37.80249, -122.6123...\n883305\n114989\n38.3\n1470.733077\n\n\n\n\n\n\n\n\n\n5) 몇 개의 매장이 식별되었나요?\n다음 스타벅스 리저브 로스터리 매장을 찾을 때 선택한 지방 내의 모든 매장을 고려하고 싶을 것입니다.\n그렇다면, 선택한 지방 내에 몇 개의 매장이 있을까요?\n다음 셀을 실행하여 이 질문에 답을 할 수 있도록 모든 스타벅스 위치가 포함된 starbucks_gdf GeoDataFrame을 생성하세요.\n\nstarbucks_gdf = gpd.GeoDataFrame(starbucks, geometry = gpd.points_from_xy(starbucks['Longitude'], starbucks['Latitude']))\nstarbucks_gdf.crs = {'init' : 'epsg:4326'}\nstarbucks_gdf.head()\n\n\n\n\n\n\n\n\nStore Number\nStore Name\nAddress\nCity\nLongitude\nLatitude\ngeometry\n\n\n\n\n0\n10429-100710\nPalmdale & Hwy 395\n14136 US Hwy 395 Adelanto CA\nAdelanto\n-117.40\n34.51\nPOINT (-117.40000 34.51000)\n\n\n1\n635-352\nKanan & Thousand Oaks\n5827 Kanan Road Agoura CA\nAgoura\n-118.76\n34.16\nPOINT (-118.76000 34.16000)\n\n\n2\n74510-27669\nVons-Agoura Hills #2001\n5671 Kanan Rd. Agoura Hills CA\nAgoura Hills\n-118.76\n34.15\nPOINT (-118.76000 34.15000)\n\n\n3\n29839-255026\nTarget Anaheim T-0677\n8148 E SANTA ANA CANYON ROAD AHAHEIM CA\nAHAHEIM\n-117.75\n33.87\nPOINT (-117.75000 33.87000)\n\n\n4\n23463-230284\nSafeway - Alameda 3281\n2600 5th Street Alameda CA\nAlameda\n-122.28\n37.79\nPOINT (-122.28000 37.79000)\n\n\n\n\n\n\n\n선택한 지방에 몇 개의 매장이 있나요?\n\ncounty_stores = gpd.sjoin(sel_counties, starbucks_gdf)\nnum_stores = len(county_stores)\nprint(num_stores)\n\n1043\n\n\n\n\n6) 매장 위치 시각화\n위에서 식별한 매장의 위치를 표시하는 지도를 만들어보세요.\n\nm_6 = folium.Map(location = [37, -120], zoom_start = 6)\n\nmc = MarkerCluster()\nfor idx, row in county_stores.iterrows() :\n    if not math.isnan(row['Longitude']) and not math.isnan(row['Latitude']):\n        mc.add_child(Marker([row['Latitude'], row['Longitude']]))\nm_6.add_child(mc)\n\nm_6 # embed_map(m_6, 'q_6.html')\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n\n그 다음은?\nLesson 5 : Proximity Analysis 를 통해 지도 상의 Point 간의 관계를 이해하는 것을 배워보세요.\n\nHave questions or comments? Visit the course discussion forum to chat with other learners."
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html",
    "href": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html",
    "title": "Geospatial Analysis",
    "section": "",
    "text": "Kaggle Geospatial Analysis Course"
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#소개",
    "href": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#소개",
    "title": "Geospatial Analysis",
    "section": "소개",
    "text": "소개\n이 과정에서는 지리 공간 데이터 또는 지리적 위치가 있는 데이터를 다루고 시각화하는 다양한 방법에 대해 알아봅니다.\n\n\n\n\n그 과정에서 다음과 같은 몇 가지 실제 문제에 대한 솔루션을 제공하게 됩니다.\n\n글로벌 비영리 단체가 필리핀의 외딴 지역에서 활동 범위를 넓히려면 어디로 가야할까요?\n멸종 위기 조류인 보라색 담비는 북미와 남미를 어떻게 이동하나요? 그 새들은 보호 지역으로 이동하나요?\n일본의 어느 지역을 추가적으로 내진 설계를 해야할까요?\n캘리포니아의 어느 스타벅스 매장이 다음 스타벅스 리저브 로스터리 매장으로 유력한 후보지인가요?\n뉴욕에는 자동차 충돌 사고에 대응할 수 있는 충분한 병원이 있나요? 뉴욕에서 의료 서비스 제공에 공백이 있는 지역은 어디일까요?\n\n또한, 보스턴의 범죄를 시각화하고, 가나의 의료 시설을 조사하고, 유럽의 최고 대학을 탐색하고, 미국의 독성 화학물질 방출을 추적할 수 있습니다.\n이 첫번째 튜토리얼에서는 이 강좌를 완료하는데 필요한 전제 조건을 빠르게 다룹니다. 더 깊이 잇는 복습을 원하신다면, Pandas 강좌를 추천합니다.\n이제, 첫번째 지리공간 데이터 집합을 시각화해보겠습니다."
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#데이터-불러오기",
    "href": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#데이터-불러오기",
    "title": "Geospatial Analysis",
    "section": "데이터 불러오기",
    "text": "데이터 불러오기\n첫번째 단계는 지리공간 데이터를 불러오는 것입니다. 이를 위해 GeoPandas 라이브러리를 사용하겠습니다.\n지리공간 파일 형식에는 shapefile, GeoJSON, KML, GPKG 등의 다양한 형식이 있습니다. 이 강좌에서는 그 차이점에 대해서는 다루지 않겠지만, 중요한 것들은 다음과 같습니다. - shapefile이 가장 흔한 파일 형식입니다. - 지리공간 파일의 모든 형식은 gpd.read_file() 함수를 이용하여 빠르게 불러올 수 있습니다.\n다음 셀은 뉴욕 주 환경보전국에서 관리하는 숲, 야생지대 및 기타 토지에 대한 정보가 포함된 shapefile을 불러옵니다.\n\n# Read in the data\nfull_data = gpd.read_file(\"./geospatial-learn-course-data/DEC_lands/DEC_lands/DEC_lands.shp\")\n\n# View the first five rows of the data\nfull_data.head()\n\n\n\n\n\n\n\n\nOBJECTID\nCATEGORY\nUNIT\nFACILITY\nCLASS\nUMP\nDESCRIPTIO\nREGION\nCOUNTY\nURL\nSOURCE\nUPDATE_\nOFFICE\nACRES\nLANDS_UID\nGREENCERT\nSHAPE_AREA\nSHAPE_LEN\ngeometry\n\n\n\n\n0\n1\nFOR PRES DET PAR\nCFP\nHANCOCK FP DETACHED PARCEL\nWILD FOREST\nNone\nDELAWARE COUNTY DETACHED PARCEL\n4\nDELAWARE\nhttp://www.dec.ny.gov/\nDELAWARE RPP\n5/12\nSTAMFORD\n738.620192\n103\nN\n2.990365e+06\n7927.662385\nPOLYGON ((486093.245 4635308.586, 486787.235 4...\n\n\n1\n2\nFOR PRES DET PAR\nCFP\nHANCOCK FP DETACHED PARCEL\nWILD FOREST\nNone\nDELAWARE COUNTY DETACHED PARCEL\n4\nDELAWARE\nhttp://www.dec.ny.gov/\nDELAWARE RPP\n5/12\nSTAMFORD\n282.553140\n1218\nN\n1.143940e+06\n4776.375600\nPOLYGON ((491931.514 4637416.256, 491305.424 4...\n\n\n2\n3\nFOR PRES DET PAR\nCFP\nHANCOCK FP DETACHED PARCEL\nWILD FOREST\nNone\nDELAWARE COUNTY DETACHED PARCEL\n4\nDELAWARE\nhttp://www.dec.ny.gov/\nDELAWARE RPP\n5/12\nSTAMFORD\n234.291262\n1780\nN\n9.485476e+05\n5783.070364\nPOLYGON ((486000.287 4635834.453, 485007.550 4...\n\n\n3\n4\nFOR PRES DET PAR\nCFP\nGREENE COUNTY FP DETACHED PARCEL\nWILD FOREST\nNone\nNone\n4\nGREENE\nhttp://www.dec.ny.gov/\nGREENE RPP\n5/12\nSTAMFORD\n450.106464\n2060\nN\n1.822293e+06\n7021.644833\nPOLYGON ((541716.775 4675243.268, 541217.579 4...\n\n\n4\n6\nFOREST PRESERVE\nAFP\nSARANAC LAKES WILD FOREST\nWILD FOREST\nSARANAC LAKES\nNone\n5\nESSEX\nhttp://www.dec.ny.gov/lands/22593.html\nDECRP, ESSEX RPP\n12/96\nRAY BROOK\n69.702387\n1517\nN\n2.821959e+05\n2663.909932\nPOLYGON ((583896.043 4909643.187, 583891.200 4...\n\n\n\n\n\n\n\nCLASS 열에서 볼 수 있듯이, 처음 5개 행은 각각 다른 숲에 해당합니다.\n이 튜토리얼의 나머지 부분에서는 이 데이터를 사용하여 주말 캠핑 여행을 계획하는 시나리오를 고려해보겠습니다.\n온라인에서 크라우드 소싱된 리뷰에 의존하는 대신 자신만의 지도를 만들어봅시다.\n이렇게 하면 특정 관심사에 맞게 여행을 조정할 수 있습니다."
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#전제-조건",
    "href": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#전제-조건",
    "title": "Geospatial Analysis",
    "section": "전제 조건",
    "text": "전제 조건\n데이터의 처음 5개의 행을 보기 위해 head() 함수를 사용했습니다. 이 함수는 Pandas DataFrame에서도 사용된다는 것을 알고 있을 것입니다.\n사실, 모든 명령어는 Pandas DataFrame에서도 함께 작동합니다.\n이는, 데이터가 (Pandas) DataFrame의 모든 기능을 갖춘 (GeoPandas) GeoDataFrame 객체로 로드되었기 때문입니다.\n\ntype(full_data)\n\ngeopandas.geodataframe.GeoDataFrame\n\n\n예를 들어, 모든 열을 사용하지 않으려는 경우 열의 하위 집합을 선택할 수 있습니다. (데이터를 선택하는 다른 방법을 복습하려면, Pandas 강좌의 튜토리얼을 확인하세요.)\n\ndata = full_data.loc[:, [\"CLASS\", \"COUNTY\", \"geometry\"]].copy()\n\nvalue_counts() 함수를 사용하여 다양한 토지 유형 목록과 함께 데이터 집합에 나타나는 횟수를 확인합니다. (이 함수 (관련 함수)를 복습하려면, Pandas 강좌의 튜토리얼을 확인하세요.)\n\n# 각 유형별로 토지의 개수는 몇개인가요?\ndata['CLASS'].value_counts()\n\nWILD FOREST                   965\nINTENSIVE USE                 108\nPRIMITIVE                      60\nWILDERNESS                     52\nADMINISTRATIVE                 17\nUNCLASSIFIED                    7\nHISTORIC                        5\nPRIMITIVE BICYCLE CORRIDOR      4\nCANOE AREA                      1\nName: CLASS, dtype: int64\n\n\nloc(iloc)를 사용하여 데이터의 하위 집합을 선택할 수도 있습니다. (이 함수를 복습하려면, Pandas 강좌의 튜토리얼을 확인하세요.)\n\n# \"WILD FOREST\" 또는 \"WILDERNESS\"에 해당하는 토지를 선택합니다.\nwild_lands = data.loc[data['CLASS'].isin(['WILD FOREST', 'WILDERNESS'])].copy()\nwild_lands.head()\n\n\n\n\n\n\n\n\nCLASS\nCOUNTY\ngeometry\n\n\n\n\n0\nWILD FOREST\nDELAWARE\nPOLYGON ((486093.245 4635308.586, 486787.235 4...\n\n\n1\nWILD FOREST\nDELAWARE\nPOLYGON ((491931.514 4637416.256, 491305.424 4...\n\n\n2\nWILD FOREST\nDELAWARE\nPOLYGON ((486000.287 4635834.453, 485007.550 4...\n\n\n3\nWILD FOREST\nGREENE\nPOLYGON ((541716.775 4675243.268, 541217.579 4...\n\n\n4\nWILD FOREST\nESSEX\nPOLYGON ((583896.043 4909643.187, 583891.200 4..."
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#첫번째-지도를-만들어보세요",
    "href": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#첫번째-지도를-만들어보세요",
    "title": "Geospatial Analysis",
    "section": "첫번째 지도를 만들어보세요!",
    "text": "첫번째 지도를 만들어보세요!\nplot() 함수를 사용하여 데이터를 빠르게 시각화할 수 있습니다.\n\nwild_lands.plot()\n\n&lt;Axes: &gt;\n\n\n\n\n\n모든 GeoDataFrame에는 특별한 geometry 열이 포함되어 있습니다. 이 열에는 plot() 메서드를 호출할 때 표시되는 모든 기하학적 개체가 포함됩니다.\n\nwild_lands['geometry'].head()\n\n0    POLYGON ((486093.245 4635308.586, 486787.235 4...\n1    POLYGON ((491931.514 4637416.256, 491305.424 4...\n2    POLYGON ((486000.287 4635834.453, 485007.550 4...\n3    POLYGON ((541716.775 4675243.268, 541217.579 4...\n4    POLYGON ((583896.043 4909643.187, 583891.200 4...\nName: geometry, dtype: geometry\n\n\n이 열에는 다양한 데이터 유형이 포함될 수 있지만, 일반적으로 Point, LineString, or Polygon 입니다.\n\n\n\n이 데이터의 geometry 열에는 2,983개의 서로 다른 Polygon 객체가 포함되어 있고, 각 객체는 plot에서 서로 다른 모양에 해당합니다.\n아래 셀을 통해 우리는 캠프장 위치 (Point), 도보 경로 (LineString), 지역 경계 (Polygon)를 포함한 3개의 GeoDataFrame을 더 생성합니다.\n\n# 뉴욕 주의 캠프장 위치 (Point)\nPOI_data = gpd.read_file('./geospatial-learn-course-data/DEC_pointsinterest/DEC_pointsinterest/Decptsofinterest.shp')\ncampsites = POI_data.loc[POI_data['ASSET'] == 'PRIMITIVE CAMPSITE'].copy()\n\n# 뉴욕 주의 도보 경로 (LineString)\nroads_trails = gpd.read_file('./geospatial-learn-course-data/DEC_roadstrails/DEC_roadstrails/Decroadstrails.shp')\ntrails = roads_trails.loc[roads_trails['ASSET'] == 'FOOT TRAIL'].copy()\n\n# 뉴욕 주의 지역 경계 (Polygon)\ncounties = gpd.read_file('./geospatial-learn-course-data/NY_county_boundaries/NY_county_boundaries/NY_county_boundaries.shp')\n\n다음으로, 4개의 GeoDataFrame을 모두 사용하여 지도를 만들어봅시다.\nplot() 함수는 지도를 커스터마이징하는데 필요로 하는 데 사용할 수 있는 몇가지 파라미터(선택사항)를 입력으로 받습니다.\n가장 중요한 것은 ax에 값을 설정하면, 모든 정보가 동일한 지도에 그려진다는 것입니다.\n\n# Base Map을 지역 경계로 설정\nax = counties.plot(figsize = (10, 10), color = 'none', edgecolor = 'gainsboro', zorder = 3)\n\n# 토지와 캠프장 위치, 도보 경로를 Base Map에 추가\nwild_lands.plot(color = 'lightgreen', ax = ax)\ncampsites.plot(color = 'maroon', markersize = 2, ax = ax)\ntrails.plot(color = 'black', markersize = 1, ax = ax)\n\n&lt;Axes: &gt;\n\n\n\n\n\n북동부 지역 이 캠핑 여행지에 좋은 선택지가 될 것 같습니다!"
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#실습",
    "href": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#실습",
    "title": "Geospatial Analysis",
    "section": "실습",
    "text": "실습\n처음엔 복잡하게 느껴지겠지만, 이미 중요한 분석을 수행할 수 있을만큼 충분히 배웠을 것입니다.\nExercise1 : Your First Map를 통해 비영리 단체가 사업을 확장할 수 있는 필리핀의 외딴 지역을 직접 찾아보세요."
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#소개-1",
    "href": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#소개-1",
    "title": "Geospatial Analysis",
    "section": "소개",
    "text": "소개\n이 강좌에서 만드는 지도는 지구 표면을 2차원으로 묘사합니다. 하지만 아시다시피 지구는 실제로 3차원입니다. 따라서, 지구를 평면으로 렌더링하려면 Map Projection(지도 투영) 이라는 방법을 사용해야합니다.\nMap Projection은 100% 정확할 수 없습니다. 각 투영법은 지구 표면을 중요한 속성은 유지하지만, 어떤 식으로든 왜곡합니다.\n예를 들어,\n\nequal-area projections(등면적 투영, ‘Lambert Cylindrical Equal Area’, or ‘Africa Albers Equal Area Conic’ 등)은 면적을 보존합니다.\n\n국가나 도시의 면적을 계산하려는 경우 이 투영법을 선택하는 것이 좋습니다.\n\nequidstant projections(등거리 투영, ‘Azimuthal Equidistant projection’)은 거리를 보존합니다.\n\n비행 거리를 계산할 때 좋은 투영법입니다.\n\n\n\n\n\n\n투영된 점이 지구상의 실제 위치와 어떻게 일치하는지 보여주기 위해 좌표 참조 체계 (CRS) 를 사용합니다. 이 튜토리얼에서는 좌표 참조계에 대해 자세히 알아보고 GeoPandas에서 좌표 참조계를 사용하는 방법을 알아봅시다."
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#crs-설정",
    "href": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#crs-설정",
    "title": "Geospatial Analysis",
    "section": "CRS 설정",
    "text": "CRS 설정\nshapefile에서 GeoDataFrame을 만들 때, CRS는 이미 로드되어 있습니다.\n\n# 가나의 지역이 포함된 GeoDataFrame 불러오기\nregions = gpd.read_file('./geospatial-learn-course-data/ghana/ghana/Regions/Map_of_Regions_in_Ghana.shp')\nprint(regions.crs)\n\nepsg:32630\n\n\n이를 어떻게 해석해야하나요?\n좌표 참조 시스템은 유럽 석유 측량 그룹 (EPSG) 코드에 의해 참조됩니다.\n이 GeoDataFrame은 일반적으로 ‘Mercator (메르카토르)’ 투영법이라고 더 많이 불리는 EPSG 32630을 사용합니다. 이 투영법은 각도를 보존하고 (해상 항해에 유용) 면적을 약간 왜곡합니다.\n그러나, CSV 파일에서 GeoDataFrame을 만들 때, CRS를 설정해야합니다. EPSG 4326은 위도 및 경도 좌표에 해당합니다.\n\n# 가나의 의료 시설로 DataFrame을 만들기\nfacilities_df = pd.read_csv('./geospatial-learn-course-data/ghana/ghana/health_facilities.csv')\n\n# DataFrame을 GeoDataFrame으로 변환하기\nfacilities = gpd.GeoDataFrame(facilities_df, geometry = gpd.points_from_xy(facilities_df['Longitude'], facilities_df['Latitude']))\n\n# 좌표 참조 시스템 (CRS) EPSG 4326으로 설정\nfacilities.crs = {'init': 'epsg:4326'}\n\n# GeoDataFrame의 첫 5개 행 출력\nfacilities.head()\n\n\n\n\n\n\n\n\nRegion\nDistrict\nFacilityName\nType\nTown\nOwnership\nLatitude\nLongitude\ngeometry\n\n\n\n\n0\nAshanti\nOffinso North\nA.M.E Zion Clinic\nClinic\nAfrancho\nCHAG\n7.40801\n-1.96317\nPOINT (-1.96317 7.40801)\n\n\n1\nAshanti\nBekwai Municipal\nAbenkyiman Clinic\nClinic\nAnwiankwanta\nPrivate\n6.46312\n-1.58592\nPOINT (-1.58592 6.46312)\n\n\n2\nAshanti\nAdansi North\nAboabo Health Centre\nHealth Centre\nAboabo No 2\nGovernment\n6.22393\n-1.34982\nPOINT (-1.34982 6.22393)\n\n\n3\nAshanti\nAfigya-Kwabre\nAboabogya Health Centre\nHealth Centre\nAboabogya\nGovernment\n6.84177\n-1.61098\nPOINT (-1.61098 6.84177)\n\n\n4\nAshanti\nKwabre\nAboaso Health Centre\nHealth Centre\nAboaso\nGovernment\n6.84177\n-1.61098\nPOINT (-1.61098 6.84177)\n\n\n\n\n\n\n\n위의 셀 CSV 파일에서 GeoDataFrame을 만들려면 Pandas와 GeoPandas를 모두 사용해야했습니다.\n\n먼저 위도 및 경도 좌표가 포함된 열을 포함하는 DataFrame 만듭니다.\n이를 GeoDataFrame으로 변환하기 위해 gpd.GeoDataFrame()을 사용합니다.\ngpd.points_from_xy() 함수는 위도 및 경도 열에서 Point 개체를 생성합니다."
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#재투영-re-projecting",
    "href": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#재투영-re-projecting",
    "title": "Geospatial Analysis",
    "section": "재투영 (Re-projecting)",
    "text": "재투영 (Re-projecting)\n재투영은 CRS를 변경하는 과정을 말합니다. 이 작업은 GeoPandas에서 to_crs() 함수를 사용하여 수행됩니다.\n여러 개의 GeoDataFrame을 plot할 때 모두 동일한 CRS를 사용하는 것이 중요합니다. 아래 셀에서는 facilities GeoDataFrame의 CRS를 regions의 CRS와 일치하도록 변경한 후 plot합니다.\n\n# 지도 만들기\nax = regions.plot(figsize = (8, 8), color = 'whitesmoke', linestyle = ':', edgecolor = 'black')\nfacilities.to_crs(epsg = 32630).plot(markersize = 1, ax = ax)\n\n&lt;Axes: &gt;\n\n\n\n\n\nto_crs() 함수는 geometry 열만 수정하고 다른 모든 열은 그대로 유지합니다.\n\n# `Latitude`와 `Longitude` 열은 변경 X\nfacilities.to_crs(epsg = 32630).head()\n\n\n\n\n\n\n\n\nRegion\nDistrict\nFacilityName\nType\nTown\nOwnership\nLatitude\nLongitude\ngeometry\n\n\n\n\n0\nAshanti\nOffinso North\nA.M.E Zion Clinic\nClinic\nAfrancho\nCHAG\n7.40801\n-1.96317\nPOINT (614422.662 818986.851)\n\n\n1\nAshanti\nBekwai Municipal\nAbenkyiman Clinic\nClinic\nAnwiankwanta\nPrivate\n6.46312\n-1.58592\nPOINT (656373.863 714616.547)\n\n\n2\nAshanti\nAdansi North\nAboabo Health Centre\nHealth Centre\nAboabo No 2\nGovernment\n6.22393\n-1.34982\nPOINT (682573.395 688243.477)\n\n\n3\nAshanti\nAfigya-Kwabre\nAboabogya Health Centre\nHealth Centre\nAboabogya\nGovernment\n6.84177\n-1.61098\nPOINT (653484.490 756478.812)\n\n\n4\nAshanti\nKwabre\nAboaso Health Centre\nHealth Centre\nAboaso\nGovernment\n6.84177\n-1.61098\nPOINT (653484.490 756478.812)\n\n\n\n\n\n\n\nGeoPandas에서 EPSG 코드를 사용할 수 없는 경우, CRS의 ’proj4 string’을 사용하여 CRS를 변경할 수 있습니다.\n예를 들어, 위도/경도 좌표로 변환하는 proj4 string은 다음과 같습니다.\n+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs\n\n# CRS를 EPSG 4326로 변경\nregions.to_crs('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs').head()\n\n\n\n\n\n\n\n\nRegion\ngeometry\n\n\n\n\n0\nAshanti\nPOLYGON ((-1.30985 7.62302, -1.30786 7.62198, ...\n\n\n1\nBrong Ahafo\nPOLYGON ((-2.54567 8.76089, -2.54473 8.76071, ...\n\n\n2\nCentral\nPOLYGON ((-2.06723 6.29473, -2.06658 6.29420, ...\n\n\n3\nEastern\nPOLYGON ((-0.21751 7.21009, -0.21747 7.20993, ...\n\n\n4\nGreater Accra\nPOLYGON ((0.23456 6.10986, 0.23484 6.10974, 0...."
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#기하학적-개체의-속성",
    "href": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#기하학적-개체의-속성",
    "title": "Geospatial Analysis",
    "section": "기하학적 개체의 속성",
    "text": "기하학적 개체의 속성\n첫번째 튜토리얼에서 배운 것처럼, 임의의 GeoDataFrame의 경우 geometry 열의 유형은 표시하려는 대상에 따라 달라집니다.\n\n지진의 진원지를 나타내는 Point\n거리의 경우 Street\n국가 경계를 표시하는 Polygon\n\n세 가지 유형의 기하학적 객체 모두 데이터 집합을 빠르게 분석하는데 사용할 수 있는 기본 속성이 있습니다.\n예를 들어, x와 y 속성에서 각 Point의 x좌표와 y좌표를 얻을 수 있습니다.\n\n# 각 Point에서 x좌표\nfacilities['geometry'].head().x\n\n0   -1.96317\n1   -1.58592\n2   -1.34982\n3   -1.61098\n4   -1.61098\ndtype: float64\n\n\n그리고, length 속성에서 LineString의 길이를 얻을 수 있습니다.\n또는, area 속성에서 Polygon의 면적을 구할 수 있습니다.\n\n# GeoDataFrame에서 각 Polygon의 면적(km²) 계산\nregions.loc[:, 'AREA'] = regions['geometry'].area / 10**6\n\nprint('Area of Ghana : {} km²'.format(regions['AREA'].sum()))\nprint('CRS : ', regions.crs)\nregions.head()\n\nArea of Ghana : 239584.5760055668 km²\nCRS :  epsg:32630\n\n\n\n\n\n\n\n\n\nRegion\ngeometry\nAREA\n\n\n\n\n0\nAshanti\nPOLYGON ((686446.075 842986.894, 686666.193 84...\n24379.017777\n\n\n1\nBrong Ahafo\nPOLYGON ((549970.457 968447.094, 550073.003 96...\n40098.168231\n\n\n2\nCentral\nPOLYGON ((603176.584 695877.238, 603248.424 69...\n9665.626760\n\n\n3\nEastern\nPOLYGON ((807307.254 797910.553, 807311.908 79...\n18987.625847\n\n\n4\nGreater Accra\nPOLYGON ((858081.638 676424.913, 858113.115 67...\n3706.511145\n\n\n\n\n\n\n\n위의 셀에서, regions GeoDataFrame의 CRS가 EPSG 32630(메르카토르 투영법)으로 설정되어 있기 때문에 면적 계산은 ’Africa Albers Equal Area Conic’과 같은 등면적 투영법을 사용한 경우보다 약간 덜 정확합니다.\n하지만, 이렇게 하면 가나의 면적은 약 239,584km²로 계산되며, 이는 정답과 크게 다르지 않습니다."
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#실습-1",
    "href": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#실습-1",
    "title": "Geospatial Analysis",
    "section": "실습",
    "text": "실습\nExercise2 : Coordinate Reference Systems를 배운 내용을 사용하여 남미로 이주하는 조류를 추적해보세요."
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#소개-2",
    "href": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#소개-2",
    "title": "Geospatial Analysis",
    "section": "소개",
    "text": "소개\n이 튜토리얼에서는 folium 패키지로 대화형 지도 (Interactive Maps) 를 만드는 방법을 배웁니다. 이 과정에서, 새로운 기술을 적용하여 보스턴 범죄 데이터를 시각화합니다.\n\n# MapBox API를 활용하여 지도 만들기\nmap = folium.Map(location=[36.3504119, 127.3845475], zoom_start=14,\n                 tiles='https://api.mapbox.com/styles/v1/jw0112/cl1yi61ue002z14ojne3qrry8/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoiancwMTEyIiwiYSI6ImNsaDhzcDhkMTAwcGwzY2xnenhscjZxaTMifQ.kyL3owKwnt5Ewy58TbmlGQ',\n                 attr='Mapbox Attribution')\nmap\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook"
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#첫번째-대화형-지도",
    "href": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#첫번째-대화형-지도",
    "title": "Geospatial Analysis",
    "section": "첫번째 대화형 지도",
    "text": "첫번째 대화형 지도\nfolium.Map() 함수로 비교적 간단한 지도를 만들어보겠습니다.\n\n# 지도 생성\nm_1 = folium.Map(\n    location = [42.32, -71.0589],\n    tiles = 'openstreetmap',\n    zoom_start = 10)\n\n# 지도 표현\nm_1\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n 여러 인수들을 활용하여 지도의 모양을 커스터마이징할 수 있습니다.\n\nlocation은 지도의 초기 중심을 설정합니다. 여기서는 보스턴 시의 위도(42.32° N)와 경도(-71.0589° E)를 사용합니다.\ntiles은 지도의 스타일을 변경합니다. 여기서는 OpenStreetMap스타일을 사용합니다. 다른 옵션이 궁금하다면 이 링크에서 나열된 다른 옵션을 찾을 수 있습니다.\nzoom_start은 지도의 초기 줌 레벨을 설정하며, 값이 클 수록 지도가 더 가까이 확대됩니다."
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#데이터",
    "href": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#데이터",
    "title": "Geospatial Analysis",
    "section": "데이터",
    "text": "데이터\n이제, 지도에 범죄 데이터를 추가하겠습니다!\n여기서는 데이터 불러오는 것에 집중하지 않고 이미 crimes라는 Pandas DataFrame을 이미 가지고 있다고 생각하고, DataFrame의 처음 5개의 행을 보겠습니다.\n\n# 데이터 불러오기\ncrimes = pd.read_csv('./geospatial-learn-course-data/crimes-in-boston/crimes-in-boston/crime.csv', encoding = 'latin-1')\n\n# 결측치가 존재하는 행 제거\ncrimes.dropna(subset = ['Lat', 'Long', 'DISTRICT'], inplace = True)\n\n# 2018년의 주요 범죄만 추출\ncrimes = crimes[crimes['OFFENSE_CODE_GROUP'].isin([\n    'Larceny', 'Auto Theft', 'Robbery', 'Larceny From Motor Vehicle',\n    'Residential Burglary', 'Simple Assault', 'Harassment', 'Ballistics',\n    'Aggravated Assault', 'Other Burglary', 'Arson', 'Commercial Burglary',\n    'HOME INVASION', 'Homicide', 'Criminal Harassment', 'Manslaughter'])]\ncrimes = crimes[crimes['YEAR'] &gt;= 2018]\n\n# 처음 5개 행 출력\ncrimes.head()\n\n\n\n\n\n\n\n\nINCIDENT_NUMBER\nOFFENSE_CODE\nOFFENSE_CODE_GROUP\nOFFENSE_DESCRIPTION\nDISTRICT\nREPORTING_AREA\nSHOOTING\nOCCURRED_ON_DATE\nYEAR\nMONTH\nDAY_OF_WEEK\nHOUR\nUCR_PART\nSTREET\nLat\nLong\nLocation\n\n\n\n\n0\nI182070945\n619\nLarceny\nLARCENY ALL OTHERS\nD14\n808\nNaN\n2018-09-02 13:00:00\n2018\n9\nSunday\n13\nPart One\nLINCOLN ST\n42.357791\n-71.139371\n(42.35779134, -71.13937053)\n\n\n6\nI182070933\n724\nAuto Theft\nAUTO THEFT\nB2\n330\nNaN\n2018-09-03 21:25:00\n2018\n9\nMonday\n21\nPart One\nNORMANDY ST\n42.306072\n-71.082733\n(42.30607218, -71.08273260)\n\n\n8\nI182070931\n301\nRobbery\nROBBERY - STREET\nC6\n177\nNaN\n2018-09-03 20:48:00\n2018\n9\nMonday\n20\nPart One\nMASSACHUSETTS AVE\n42.331521\n-71.070853\n(42.33152148, -71.07085307)\n\n\n19\nI182070915\n614\nLarceny From Motor Vehicle\nLARCENY THEFT FROM MV - NON-ACCESSORY\nB2\n181\nNaN\n2018-09-02 18:00:00\n2018\n9\nSunday\n18\nPart One\nSHIRLEY ST\n42.325695\n-71.068168\n(42.32569490, -71.06816778)\n\n\n24\nI182070908\n522\nResidential Burglary\nBURGLARY - RESIDENTIAL - NO FORCE\nB2\n911\nNaN\n2018-09-03 18:38:00\n2018\n9\nMonday\n18\nPart One\nANNUNCIATION RD\n42.335062\n-71.093168\n(42.33506218, -71.09316781)"
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#plotting-points-설정",
    "href": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#plotting-points-설정",
    "title": "Geospatial Analysis",
    "section": "Plotting Points 설정",
    "text": "Plotting Points 설정\n지도에 넣어야 하는 데이터의 양을 줄이기 위해 (일시적으로) 낮 시간대 강도 사건으로만 한정하겠습니다.\n\ndaytime_robberies = crimes[((crimes['OFFENSE_CODE_GROUP'] == 'Robbery') & (crimes['HOUR'].isin(range(9, 18))))]\ndaytime_robberies.head(2)\n\n\n\n\n\n\n\n\nINCIDENT_NUMBER\nOFFENSE_CODE\nOFFENSE_CODE_GROUP\nOFFENSE_DESCRIPTION\nDISTRICT\nREPORTING_AREA\nSHOOTING\nOCCURRED_ON_DATE\nYEAR\nMONTH\nDAY_OF_WEEK\nHOUR\nUCR_PART\nSTREET\nLat\nLong\nLocation\n\n\n\n\n299\nI182070598\n311\nRobbery\nROBBERY - COMMERCIAL\nA15\n60\nNaN\n2018-09-02 17:15:00\n2018\n9\nSunday\n17\nPart One\nRUTHERFORD AVE\n42.371673\n-71.063264\n(42.37167264, -71.06326413)\n\n\n527\nI182070342\n381\nRobbery\nROBBERY - CAR JACKING\nE18\n490\nNaN\n2018-09-01 17:05:00\n2018\n9\nSaturday\n17\nPart One\nCUMMINS HWY\n42.276453\n-71.112980\n(42.27645319, -71.11297971)\n\n\n\n\n\n\n\n\n\nfolium.Marker()\nfolium.Marker() 함수로 지도에 Marker를 추가합니다. 아래의 각 Marker는 서로 다른 강도에 해당합니다.\n\n# 지도 생성\nm_2 = folium.Map(\n    location = [42.32, -71.0589], \n    tiles = 'cartodbpositron', \n    zoom_start = 13)\n\n# 지도 + Marker\nfor idx, row in daytime_robberies.iterrows() :\n    Marker([row['Lat'], row['Long']]).add_to(m_2)\n\n# 지도 표현\nm_2\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n\nfolium.plugins.MarkerCluster()\nfolium.plugins.MarkerCluster()를 사용하면 맵을 깔끔하게 정리할 수 있습니다. 각 Marker는 MarkerCluster 객체에 추가됩니다.\n\n# 지도 생성\nm_3 = folium.Map(\n    location = [42.32, -71.0589], \n    tiles = 'cartodbpositron', \n    zoom_start = 13)\n\n# 지도 + MarkerCluster\nmc = MarkerCluster()\nfor idx, row in daytime_robberies.iterrows() :\n    if not math.isnan(row['Long']) and not math.isnan(row['Lat']):\n        mc.add_child(Marker([row['Lat'], row['Long']]))\nm_3.add_child(mc)\n\n# Display the map\nm_3\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook"
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#버블맵-bubble-maps",
    "href": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#버블맵-bubble-maps",
    "title": "Geospatial Analysis",
    "section": "버블맵 (Bubble Maps)",
    "text": "버블맵 (Bubble Maps)\n버블 맵는 Marker 대신 원을 사용합니다. 각 원의 크기와 색상을 변경하여 위치와 다른 두 변수 사이의 관계를 표시할 수도 있습니다.\nfolium.Circle()을 사용하여 원을 반복적으로 추가하여 버블 지도를 만듭니다.\n아래 셀에서 9~12시에 발생한 강도는 녹색으로 표시되고, 13~17시에 발생한 강도는 빨간색으로 표시됩니다.\n\n# 지도 생성\nm_4 = folium.Map(location = [42.32, -71.0589], tiles = 'cartodbpositron', zoom_start = 13)\n\ndef color_producer(val) :\n    if val &lt;= 12 :\n        return 'forestgreen'\n    else :\n        return 'darkred'\n\n# 지도 + 버블맵\nfor i in range(0, len(daytime_robberies)) :\n    Circle(\n        location = [daytime_robberies.iloc[i]['Lat'],\n                    daytime_robberies.iloc[i]['Long']],\n        radius = 20,\n        color = color_producer(daytime_robberies.iloc[i]['HOUR'])).add_to(m_4)\n\n# 지도 표현\nm_4\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nfolium.Circle()은 여러 인수를 받습니다.\n\nlocation은 원의 중심을 위도와 경도로 포함하는 목록입니다.\nradius는 원의 반지름을 설정합니다.\n\n기존 버블맵에서는 각 원의 반지름이 달라질 수 있습니다. 각 원의 색상을 변경하는데 사용되는 color_producer() 함수와 유사한 함수를 정의하여 이를 구현할 수 있습니다.\n\ncolor는 각 원의 색상을 설정합니다.\n\ncolor_producer() 함수는 강도의 위치에 대한 시간의 효과를 시각화하는데 사용됩니다."
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#히트맵-heatmaps",
    "href": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#히트맵-heatmaps",
    "title": "Geospatial Analysis",
    "section": "히트맵 (Heatmaps)",
    "text": "히트맵 (Heatmaps)\n히트맵을 만드려면 folium.plugins.HeatMap()을 사용합니다. 이는 도시 내 여러 지역의 범죄 밀도를 보여주며, 빨간색 영역은 상대적으로 범죄 발생이 더 많습니다.\n대도시에서 예상할 수 있듯이, 대부분의 범죄는 도심 근처에서 발생합니다.\n\n# 지도 생성\nm_5 = folium.Map(location = [42.32, -71.0589], tiles = 'cartodbpositron', zoom_start = 12)\n\n# 지도 + 히트맵\nHeatMap(data = crimes[['Lat', 'Long']], radius = 10).add_to(m_5)\n\n# 지도 표현\nm_5\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nfolium.plugins.HeatMap()은 여러 인수를 받습니다.\n\ndata는 시각화하고자 하는 위치를 포함하는 DataFrame입니다.\nradius는 히트맵의 부드러움 정도를 조정합니다. 값이 클수록 히트맵의 부드러움 정도가 커집니다.(즉, 간격이 줄어듭니다.)"
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#단계구분도-choropleth-maps",
    "href": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#단계구분도-choropleth-maps",
    "title": "Geospatial Analysis",
    "section": "단계구분도 (Choropleth Maps)",
    "text": "단계구분도 (Choropleth Maps)\n경찰 관할 구역별로 범죄가 어떻게 다른지 이해하기 위해 단계구분도를 만들어 보겠습니다.\n첫번째 단계로, 각 구역에서 서로 다른 행이 할당되고 geometry 열에 지리적 경계가 포함된 GeoDataFrame을 만듭니다.\n\n# 보스턴 경찰 관할 구역 지리적 경계가 포함된 GeoDataFrame\ndistricts_full = gpd.read_file('./geospatial-learn-course-data/Police_Districts/Police_Districts/Police_Districts.shp')\ndistricts = districts_full[['DISTRICT', 'geometry']].set_index('DISTRICT')\ndistricts.head()\n\n\n\n\n\n\n\n\ngeometry\n\n\nDISTRICT\n\n\n\n\n\nA15\nMULTIPOLYGON (((-71.07416 42.39051, -71.07415 ...\n\n\nA7\nMULTIPOLYGON (((-70.99644 42.39557, -70.99644 ...\n\n\nA1\nPOLYGON ((-71.05200 42.36884, -71.05169 42.368...\n\n\nC6\nPOLYGON ((-71.04406 42.35403, -71.04412 42.353...\n\n\nD4\nPOLYGON ((-71.07416 42.35724, -71.07359 42.357...\n\n\n\n\n\n\n\n각 구역별 범죄 발생 건수를 보여주는 plot_dict라는 Pandas Series를 만듭니다.\n\n# 각 구역별 범죄 발생 건수\nplot_dict = crimes['DISTRICT'].value_counts()\nplot_dict.head()\n\nD4     2885\nB2     2231\nA1     2130\nC11    1899\nB3     1421\nName: DISTRICT, dtype: int64\n\n\n지리적 경계를 적절한 색상과 일치시키는 방법을 알기 때문에, plot_dict과 districts가 동일한 DISTRICT라는 인덱스를 갖는 것이 매우 중요합니다.\nfolium.Choropleth() 함수를 사용하여 단계구분도를 만들 수 있습니다. 아래 지도가 렌더링되지 않는 경우 다른 웹 브라우저에서 페이지를 확인해보세요.\n\n# 지도 생성\nm_6 = folium.Map(location = [42.32, -71.0589], tiles = 'cartodbpositron', zoom_start = 12)\n\n# 지도 + 단계구분도\nChoropleth(geo_data = districts.__geo_interface__, \n           data = plot_dict, \n           key_on = 'feature.id', \n           fill_color = 'YlGnBu', \n           legend_name = 'Major criminal incidents (Jan-Aug 2018)'\n          ).add_to(m_6)\n\n# 지도 표현\nm_6\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nfolium.Choropleth()는 여러 인수를 받습니다.\n\ngeo_data는 각 지리적 영역의 경계를 포함하는 GeoJSON FeatureCollection입니다.\n\n위 코드에서 districts GeoDataFrame을 __geo_interface__ 속성을 사용하여 GeoJSON FeatureCollection으로 변환합니다.\n\ndata는 각 지리적 영역의 색상을 지정하는데 사용할 값이 포함된 Pandas Series입니다.\nkey_on은 항상 feature.id로 설정됩니다.\n\n이는 geo_data에 사용되는 GeoDataFrame과 data에 사용되는 Pandas Series가 동일한 인덱스를 가지고 있다는 사실을 나타냅니다. 자세한 내용을 이해하려면 GeoJSON Feature Collection의 구조를 좀 더 자세히 살펴봐야합니다. (‘feature’ 키에 해당하는 값은 list이고, 각 항목은 ‘id’ 키가 포함된 dictonary입니다.)\n\nfill_color는 색상 스케일을 설정합니다.\nlegend_name은 맵 오른쪽 상단에 있는 범례에 레이블을 지정합니다."
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#실습-2",
    "href": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#실습-2",
    "title": "Geospatial Analysis",
    "section": "실습",
    "text": "실습\nExercise3 : Interactive Maps을 통해 일본에서 추가적으로 내진 보강이 필요한 지역을 확인해보세요."
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#소개-3",
    "href": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#소개-3",
    "title": "Geospatial Analysis",
    "section": "소개",
    "text": "소개\n이 튜토리얼에서는 지리공간 데이터에 대한 (지오코딩 (Geocoding) 과 테이블 조인 (Table Joins)) 두가지 조작에 대해 알아봅시다."
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#지오코딩-geocoding",
    "href": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#지오코딩-geocoding",
    "title": "Geospatial Analysis",
    "section": "지오코딩 (Geocoding)",
    "text": "지오코딩 (Geocoding)\n지오코딩은 장소 이름이나 주소를 지도 상의 위치로 변환하는 과정입니다. 예를 들어, Google Maps, Bing Maps, Baidu Maps에서 랜드마크 설명을 기반으로 지리적 위치를 찾아본 적이 있다면 지오코딩을 사용해 본 적이 있을 것입니다!\n\n\n\n\n모든 지오코딩에는 geopy가 사용됩니다.\n\nfrom geopy.geocoders import Nominatim\n\n위의 셀에서 Nominatim은 위치를 생성하는데 사용되는 지오코딩 소프트웨어를 나타냅니다.\n지오코더를 인스턴트화하는 것으로 시작합니다. 그런 다음, 이름이나 주소를 Python 문자열로 적용하기만 하면 됩니다. (이 경우, 기자의 대피라미드라고 알려진 \"Pyramid of Khufu\"를 제공합니다.)\n지오코딩이 성공하면 두 가지 중요한 속성을 가진 geopy.location.Location 객체를 반환합니다.\n\npoint 속성에는 (위도, 경도) 위치가 포함합니다.\naddress 속성에는 전체 주소를 포함합니다.\n\n\ngeolocator = Nominatim(user_agent = 'kaggle_learn')\nlocation = geolocator.geocode('Pyramid of Khufu')\n\nprint(location.point)\nprint(location.address)\n\n29 58m 44.976s N, 31 8m 3.17625s E\nهرم خوفو, شارع ابو الهول السياحي, نزلة البطران, الجيزة, 12125, مصر\n\n\npoint 속성의 값은 geopy.point.Point 객체이며 각각 latitude와 longitude 속성에서 위도와 경도를 가져올 수 있습니다.\n\npoint = location.point\nprint('Latitude : ', point.latitude)\nprint('Longitude : ', point.longitude)\n\nLatitude :  29.97916\nLongitude :  31.134215625236113\n\n\n종종 다양한 주소를 지오코딩해야 하는 경우도 있습니다. 예를 들어, 유럽에 있는 상위 100개 대학의 위치를 얻고 싶다고 가정해 보겠습니다.\n\nuniversities = pd.read_csv('./geospatial-learn-course-data/top_universities.csv')\nuniversities.head()\n\n\n\n\n\n\n\n\nName\n\n\n\n\n0\nUniversity of Oxford\n\n\n1\nUniversity of Cambridge\n\n\n2\nImperial College London\n\n\n3\nETH Zurich\n\n\n4\nUCL\n\n\n\n\n\n\n\n그런 다음 lambda 함수를 사용해서 DataFrame의 모든 행에 지오코딩 적용할 수 있습니다. (지오코딩이 실패할 경우를 대비하여 try / except 문을 사용합니다.)\n\ndef my_geocoder(row) :\n    try :\n        point = geolocator.geocode(row).point\n        return pd.Series({'Latitude' : point.latitude, 'Longitude' : point.longitude})\n    except :\n        return None\n\nuniversities[['Latitude', 'Longitude']] = universities.apply(lambda x : my_geocoder(x['Name']), axis = 1)\n\nprint('{}% of addresses were geocoded!'.format(\n    (1 - sum(np.isnan(universities['Latitude'])) / len(universities)) * 100))\n\n# 지오코딩 실패한 행 제거\nuniversities = universities.loc[~np.isnan(universities['Latitude'])]\nuniversities = gpd.GeoDataFrame(\n    universities, geometry = gpd.points_from_xy(universities.Longitude, universities.Latitude))\nuniversities.crs = {'init' : 'epsg:4326'}\nuniversities.head()\n\n91.0% of addresses were geocoded!\n\n\n\n\n\n\n\n\n\nName\nLatitude\nLongitude\ngeometry\n\n\n\n\n0\nUniversity of Oxford\n51.759037\n-1.252430\nPOINT (-1.25243 51.75904)\n\n\n1\nUniversity of Cambridge\n52.200623\n0.110474\nPOINT (0.11047 52.20062)\n\n\n2\nImperial College London\n51.498959\n-0.175641\nPOINT (-0.17564 51.49896)\n\n\n3\nETH Zurich\n47.562772\n7.580947\nPOINT (7.58095 47.56277)\n\n\n4\nUCL\n51.521785\n-0.135151\nPOINT (-0.13515 51.52179)\n\n\n\n\n\n\n\n다음으로, 지오코더가 반환한 모든 위치를 시각화합니다. 몇몇 위치는 유럽에 있지 않기 때문에 확실히 부정확하다는 것을 알 수 있습니다!\n\n# 지도 생성\nm = folium.Map(location = [54, 15], tiles = 'openstreetmap', zoom_start = 2)\n\n# 지도 + Marker\nfor idx, row in universities.iterrows() :\n    Marker([row['Latitude'], row['Longitude']], popup = row['Name']).add_to(m)\n\n# 지도 표현\nm\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook"
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#테이블-조인-table-joins",
    "href": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#테이블-조인-table-joins",
    "title": "Geospatial Analysis",
    "section": "테이블 조인 (Table Joins)",
    "text": "테이블 조인 (Table Joins)\n이제 주제를 전환하여 서로 다른 원본의 데이터를 결합하는 방법에 대해 알아보겠습니다. \n\n특성 조인 (Attribute Join)\n이미 pd.DataFrame.join()을 사용하여 여러 DataFrame의 정보를 동일한 인덱스로 결합하는 방법을 알고 있습니다. 인덱스에서 일치하는 값을 단순화하여 데이터를 조인하는 방법을 특성 조인 (Attribute Join)이라고 합니다.\nGeoDataFrame의 특성 조인을 수행할 때는 gpd.GeoDataFrame.merge()을 사용하는 것이 가장 좋습니다. 이를 설명하기 위해, 유럽의 모든 국가에 대한 경계가 포함된 europe_boundaries GeoDataFrame으로 작업해보겠습니다.\n\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\neurope = world.loc[world.continent == 'Europe'].reset_index(drop = True)\n\neurope_stats = europe[['name', 'pop_est', 'gdp_md_est']]\neurope_boundaries = europe[['name', 'geometry']]\n\neurope_boundaries.head()\n\n\n\n\n\n\n\n\nname\ngeometry\n\n\n\n\n0\nRussia\nMULTIPOLYGON (((180.00000 71.51571, 180.00000 ...\n\n\n1\nNorway\nMULTIPOLYGON (((15.14282 79.67431, 15.52255 80...\n\n\n2\nFrance\nMULTIPOLYGON (((-51.65780 4.15623, -52.24934 3...\n\n\n3\nSweden\nPOLYGON ((11.02737 58.85615, 11.46827 59.43239...\n\n\n4\nBelarus\nPOLYGON ((28.17671 56.16913, 29.22951 55.91834...\n\n\n\n\n\n\n\n각 국가의 예상 인구와 국내총생산(GDP)을 포함하는 DataFrame europe_stats와 결합하겠습니다.\n\neurope_stats.head()\n\n\n\n\n\n\n\n\nname\npop_est\ngdp_md_est\n\n\n\n\n0\nRussia\n144373535.0\n1699876\n\n\n1\nNorway\n5347896.0\n403336\n\n\n2\nFrance\n67059887.0\n2715518\n\n\n3\nSweden\n10285453.0\n530883\n\n\n4\nBelarus\n9466856.0\n63080\n\n\n\n\n\n\n\n아래 셀에서 특성 조인을 수행합니다. on 인수는 europe_boundaries의 행을 europe_stats의 행과 일치시키는데 사용되는 열 이름으로 설정됩니다.\n\n# 특성 조인을 사용하여 유럽 국가에 대한 데이터 병합\neurope = europe_boundaries.merge(europe_stats, on = 'name')\neurope.head()\n\n\n\n\n\n\n\n\nname\ngeometry\npop_est\ngdp_md_est\n\n\n\n\n0\nRussia\nMULTIPOLYGON (((180.00000 71.51571, 180.00000 ...\n144373535.0\n1699876\n\n\n1\nNorway\nMULTIPOLYGON (((15.14282 79.67431, 15.52255 80...\n5347896.0\n403336\n\n\n2\nFrance\nMULTIPOLYGON (((-51.65780 4.15623, -52.24934 3...\n67059887.0\n2715518\n\n\n3\nSweden\nPOLYGON ((11.02737 58.85615, 11.46827 59.43239...\n10285453.0\n530883\n\n\n4\nBelarus\nPOLYGON ((28.17671 56.16913, 29.22951 55.91834...\n9466856.0\n63080\n\n\n\n\n\n\n\n\n\n공간 조인 (Spatial Join)\n또 다른 조인 유형은 공간 조인(Spatial Join)입니다. 공간 조인을 사용하면 geometry 열에 있는 개체 간의 공간 관계를 기반으로 GeoDataFrame을 결합합니다. 예를 들어, 유럽 대학의 지오코딩된 주소가 포함된 GeoDataFrame universities가 이미 있습니다.\n그런 다음 공간 조인을 사용하여 각 대학을 해당 국가에 일치시킬 수 있습니다. 이 작업은 gpd.sjoin()을 사용하여 수행합니다.\n\n# 공간 조인을 사용하여 대학을 유럽의 국가와 일치\neuropean_universities = gpd.sjoin(universities, europe)\n\n# 결과 검토\nprint('We located {} universities.'.format(len(universities)))\nprint('Only {} of the universities were located in Europe (in {} different countries).'.format(\n    len(european_universities), len(european_universities.name.unique())))\n\neuropean_universities.head()\n\nWe located 91 universities.\nOnly 86 of the universities were located in Europe (in 14 different countries).\n\n\n\n\n\n\n\n\n\nName\nLatitude\nLongitude\ngeometry\nindex_right\nname\npop_est\ngdp_md_est\n\n\n\n\n0\nUniversity of Oxford\n51.759037\n-1.252430\nPOINT (-1.25243 51.75904)\n28\nUnited Kingdom\n66834405.0\n2829108\n\n\n1\nUniversity of Cambridge\n52.200623\n0.110474\nPOINT (0.11047 52.20062)\n28\nUnited Kingdom\n66834405.0\n2829108\n\n\n2\nImperial College London\n51.498959\n-0.175641\nPOINT (-0.17564 51.49896)\n28\nUnited Kingdom\n66834405.0\n2829108\n\n\n4\nUCL\n51.521785\n-0.135151\nPOINT (-0.13515 51.52179)\n28\nUnited Kingdom\n66834405.0\n2829108\n\n\n5\nLondon School of Economics and Political Science\n51.514211\n-0.116808\nPOINT (-0.11681 51.51421)\n28\nUnited Kingdom\n66834405.0\n2829108\n\n\n\n\n\n\n\n 위의 공간 조인은 두 GeoDataFrame의 geometry 열을 살펴봅니다. universities GeoDataFrame의 Point 객체가 europe DataFrame의 Polygon 객체와 교차하는 경우, 해당 행이 결합되어 european_universities DataFrame의 단일 행으로 추가됩니다. 그렇지 않으면, 일치하는 대학이 없는 국가(및 일치하는 국가가 없는 대학)는 결과에서 제거됩니다.\ngpd.sjoin() 함수는 how 및 op 인수를 통해 다양한 조인 유형에 맞게 지정할 수 있습니다. 예를 들어, how = left(또는 how = right)를 설정하여 SQL Left (또는 Right) 조인과 동등한 작업을 수행할 수 있습니다. 이 강좌에서는 자세히 설명하지 않겠지만, 이 문서에서 자세한 내용을 확인할 수 있습니다."
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#실습-3",
    "href": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#실습-3",
    "title": "Geospatial Analysis",
    "section": "실습",
    "text": "실습\nExercise 4 : Manipulating Geospatial Data 에서 지오코딩 및 테이블 조인 사용을 사용하여 스타벅스 리저브 로스터리에 적합한 위치를 파악해봅시다."
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#소개-4",
    "href": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#소개-4",
    "title": "Geospatial Analysis",
    "section": "소개",
    "text": "소개\n이 튜토리얼에서는 근접성 분석 을 위한 몇가지 기법을 살펴봅니다. 특히 다음과 같은 작업을 수행하는 방법을 배우게 됩니다.\n\n지도에서 포인트 사이의 거리를 측정\n특정 Feature의 반경 내에 있는 모든 포인트 선택\n\n미국 펜실베니아주 필라델피아의 독성 화학물질 배출을 추적하는 미국 환경보호청 (EPA)의 데이터를 사용하여 작업하겠습니다.\n\nreleases = gpd.read_file('./geospatial-learn-course-data/toxic_release_pennsylvania/toxic_release_pennsylvania/toxic_release_pennsylvania.shp') \nreleases.head()\n\n\n\n\n\n\n\n\nYEAR\nCITY\nCOUNTY\nST\nLATITUDE\nLONGITUDE\nCHEMICAL\nUNIT_OF_ME\nTOTAL_RELE\ngeometry\n\n\n\n\n0\n2016\nPHILADELPHIA\nPHILADELPHIA\nPA\n40.005901\n-75.072103\nFORMIC ACID\nPounds\n0.160\nPOINT (2718560.227 256380.179)\n\n\n1\n2016\nPHILADELPHIA\nPHILADELPHIA\nPA\n39.920120\n-75.146410\nETHYLENE GLYCOL\nPounds\n13353.480\nPOINT (2698674.606 224522.905)\n\n\n2\n2016\nPHILADELPHIA\nPHILADELPHIA\nPA\n40.023880\n-75.220450\nCERTAIN GLYCOL ETHERS\nPounds\n104.135\nPOINT (2676833.394 261701.856)\n\n\n3\n2016\nPHILADELPHIA\nPHILADELPHIA\nPA\n39.913540\n-75.198890\nLEAD COMPOUNDS\nPounds\n1730.280\nPOINT (2684030.004 221697.388)\n\n\n4\n2016\nPHILADELPHIA\nPHILADELPHIA\nPA\n39.913540\n-75.198890\nBENZENE\nPounds\n39863.290\nPOINT (2684030.004 221697.388)\n\n\n\n\n\n\n\n 또한, 같은 도시의 대기질 모니터링 스테이션에서 측정한 수치가 포함된 데이터로 작업하겠습니다.\n\nstations = gpd.read_file('./geospatial-learn-course-data/PhillyHealth_Air_Monitoring_Stations/PhillyHealth_Air_Monitoring_Stations/PhillyHealth_Air_Monitoring_Stations.shp')\nstations.head()\n\n\n\n\n\n\n\n\nSITE_NAME\nADDRESS\nBLACK_CARB\nULTRAFINE_\nCO\nSO2\nOZONE\nNO2\nNOY_NO\nPM10\n...\nPAMS_VOC\nTSP_11101\nTSP_METALS\nTSP_LEAD\nTOXICS_TO1\nMET\nCOMMUNITY_\nLATITUDE\nLONGITUDE\ngeometry\n\n\n\n\n0\nLAB\n1501 East Lycoming Avenue\nN\nN\nY\nN\nY\nY\nY\nN\n...\nY\nN\nY\nN\ny\nN\nN\n40.008606\n-75.097624\nPOINT (2711384.641 257149.310)\n\n\n1\nROX\nEva and Dearnley Streets\nN\nN\nN\nN\nN\nN\nN\nN\n...\nN\nN\nY\nN\nY\nN\nN\n40.050461\n-75.236966\nPOINT (2671934.290 271248.900)\n\n\n2\nNEA\nGrant Avenue and Ashton Street\nN\nN\nN\nN\nY\nN\nN\nN\n...\nN\nN\nN\nN\nN\nY\nN\n40.072073\n-75.013128\nPOINT (2734326.638 280980.247)\n\n\n3\nCHS\n500 South Broad Street\nN\nN\nN\nN\nN\nN\nN\nN\n...\nN\nN\nY\nN\nY\nN\nN\n39.944510\n-75.165442\nPOINT (2693078.580 233247.101)\n\n\n4\nNEW\n2861 Lewis Street\nN\nN\nY\nY\nY\nN\nY\nY\n...\nN\nY\nN\nY\nN\nY\nN\n39.991688\n-75.080378\nPOINT (2716399.773 251134.976)\n\n\n\n\n5 rows × 24 columns"
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#거리-측정",
    "href": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#거리-측정",
    "title": "Geospatial Analysis",
    "section": "거리 측정",
    "text": "거리 측정\n서로 다른 두 GeoDataFrame의 Point 간의 거리를 측정하려면, 먼저 두 GeoDataFrame이 동일한 좌표 참조 시스템(CRS)을 사용하는지 확인해야 합니다.\n다행히도 여기서는 둘 다 EPSG:2272를 사용합니다.\n\nprint(stations.crs)\nprint(releases.crs)\n\nepsg:2272\nepsg:2272\n\n\n또한, CRS가 어떤 단위(meter, feet 또는 다른 단위)를 사용하는지 확인합니다. 이 경우 EPSG:2272는 feet 단위를 사용합니다. (원한다면 여기에서 확인할 수 있습니다.)\nGeoPandas에서 거리를 계산하는 것은 비교적 간단합니다. 아래 셀은 recent_release의 비교적 최근 릴리즈 사건과 stations GeoDataFrame의 모든 스테이션 사이의 거리(피트)를 계산합니다.\n\n# 특정 릴리즈 사건 1개 선택\nrecent_release = releases.iloc[360]\n\n# 릴리즈에서 각 스테이션까지의 거리 측정\ndistances = stations['geometry'].distance(recent_release['geometry'])\ndistances\n\n0     44778.509761\n1     51006.456589\n2     77744.509207\n3     14672.170878\n4     43753.554393\n5      4711.658655\n6     23197.430858\n7     12072.823097\n8     79081.825506\n9      3780.623591\n10    27577.474903\n11    19818.381002\ndtype: float64\n\n\n계산된 거리를 사용하여, 각 스테이션까지의 평균 거리와 같은 통계를 얻을 수 있습니다.\n\nprint('Mean distance to monitoring stations: {} feet'.format(distances.mean()))\n\nMean distance to monitoring stations: 33516.28487007786 feet\n\n\n또한, 가장 가까운 모니터링 스테이션을 찾을 수도 있습니다.\n\nprint('Closest monitoring station ({} feet):'.format(distances.min()))\nprint(stations.iloc[distances.idxmin()][['ADDRESS', 'LATITUDE', 'LONGITUDE']])\n\nClosest monitoring station (3780.623590556444 feet):\nADDRESS      3100 Penrose Ferry Road\nLATITUDE                    39.91279\nLONGITUDE                 -75.185448\nName: 9, dtype: object"
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#버퍼-생성",
    "href": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#버퍼-생성",
    "title": "Geospatial Analysis",
    "section": "버퍼 생성",
    "text": "버퍼 생성\n지도에서 한 점으로부터 일정 반경 떨어진 모든 점을 이해하려면 버퍼를 만드는 것이 가장 간단한 방법입니다.\n아레 셀은 12개의 서로 다른 Polygon 객체를 포함하는 GeoSeries two_mile_buffer를 만듭니다. 각 다각형은 서로 다른 대기 모니터링 스테이션 주변의 2 miles(또는, 2*5280 feet)의 버퍼입니다.\n\ntwo_mile_buffer = stations['geometry'].buffer(2*5280)\ntwo_mile_buffer.head()\n\n0    POLYGON ((2721944.641 257149.310, 2721893.792 ...\n1    POLYGON ((2682494.290 271248.900, 2682443.441 ...\n2    POLYGON ((2744886.638 280980.247, 2744835.789 ...\n3    POLYGON ((2703638.580 233247.101, 2703587.731 ...\n4    POLYGON ((2726959.773 251134.976, 2726908.924 ...\ndtype: geometry\n\n\n각 Polygon을 지도에 그리기 위해 folium.GeoJson()을 사용합니다. folium에는 위도와 경도의 좌표가 필요하므로 시각화 전에 CRS를 EPSG:4326으로 변환해야합니다.\n\n# 최근 릴리즈 사건과 모니터링 스테이션을 포함하여 지도를 생성\nm = folium.Map(location = [39.9526, -75.1652], zoom_start = 11)\nHeatMap(data = releases[['LATITUDE', 'LONGITUDE']], radius = 15).add_to(m)\nfor idx, row in stations.iterrows() :\n    Marker([row['LATITUDE'], row['LONGITUDE']]).add_to(m)\n    \n# 지도 + 버퍼\nGeoJson(two_mile_buffer.to_crs(epsg = 4326)).add_to(m)\n\n# 지도 표현\nm\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n이제 모든 모니터링 스테이션에서 2마일 이내에 독성 물질 방출이 발생했는지 테스트하려면 각 Polygon에 대해 12가지 테스트를 실행하여 해당 지점이 포함되어 있는지 개별적으로 확인할 수 있습니다.\n하지만 더 효율적인 방법은 먼저 모든 Polygon을 MultiPolygon 객체로 축소하는 것입니다. 이 작업은 unary_union 속성을 사용하여 수행합니다.\n\n# Polygon 그룹을 단일 MultiPolygon 객체로 축소\nmy_union = two_mile_buffer.geometry.unary_union\nprint('Type : ', type(my_union))\n\n# MultiPolygon 객체 시각화\nmy_union\n\nType :  &lt;class 'shapely.geometry.multipolygon.MultiPolygon'&gt;\n\n\n\n\n\nMultiPolygon에 Point가 포함되어 있는지 확인하기 위해 contains() 함수를 사용합니다. 튜토리얼 앞부분의 릴리즈 사건을 사용하겠습니다.\n가장 가까운 모니터링 스테이션까지의 거리가 약 3,781피트라는 것을 알고 있습니다.\n하지만 모든 릴리즈가 대기 모니터링 스테이션에서 2마일 이내에 발생한 것은 아닙니다!\n\n# 가장 가까운 스테이션이 2마일 미만인 경우\nprint(my_union.contains(releases.iloc[360].geometry))\n\n# 가장 가까운 스테이션이 2마일 이상 떨어진 경우\nprint(my_union.contains(releases.iloc[358].geometry))\n\nTrue\nFalse"
  },
  {
    "objectID": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#실습-4",
    "href": "Data_Mining/Geospatial_Analysis/Geospatial_Analysis.html#실습-4",
    "title": "Geospatial Analysis",
    "section": "실습",
    "text": "실습\nExercise 5 : Proximity Analysis 에서 뉴욕 시의 병원 서비스 적용 범위를 알아보세요."
  },
  {
    "objectID": "Data_Mining/Loop_Speed/Increase_Loop_Speed.html",
    "href": "Data_Mining/Loop_Speed/Increase_Loop_Speed.html",
    "title": "Increase Loop Speed",
    "section": "",
    "text": "Python For loop\n\n\n자료 출처\n\nhttps://blog.fearcat.in/a?ID=00900-6997c6fb-2680-4531-af1d-73eeccce74ef\nhttps://aldente0630.github.io/data-science/2018/08/05/a-beginners-guide-to-optimizing-pandas-code-for-speed.html\n\n\n\nimport pandas as pd\nimport numpy as np\nfrom math import *\n\n\n\n익스피디아 개발자 사이트에서 제공한 뉴욕 주 내 모든 호텔 좌표가 들어있는 데이터셋\n\ndf = pd.read_csv('./new_york_hotels.csv', encoding='cp1252')\ndf.head(3)\n\n\n\n\n\n\n\n\nean_hotel_id\nname\naddress1\ncity\nstate_province\npostal_code\nlatitude\nlongitude\nstar_rating\nhigh_rate\nlow_rate\n\n\n\n\n0\n269955\nHilton Garden Inn Albany/SUNY Area\n1389 Washington Ave\nAlbany\nNY\n12206\n42.68751\n-73.81643\n3.0\n154.0272\n124.0216\n\n\n1\n113431\nCourtyard by Marriott Albany Thruway\n1455 Washington Avenue\nAlbany\nNY\n12206\n42.68971\n-73.82021\n3.0\n179.0100\n134.0000\n\n\n2\n108151\nRadisson Hotel Albany\n205 Wolf Rd\nAlbany\nNY\n12205\n42.72410\n-73.79822\n3.0\n134.1700\n84.1600\n\n\n\n\n\n\n\n\ndf.describe()\n\n\n\n\n\n\n\n\nean_hotel_id\nlatitude\nlongitude\nstar_rating\nhigh_rate\nlow_rate\n\n\n\n\ncount\n1631.000000\n1631.000000\n1631.000000\n1630.000000\n1631.000000\n1631.000000\n\n\nmean\n302845.515021\n41.851026\n-75.015019\n2.894785\n273.268624\n169.408866\n\n\nstd\n163497.215910\n1.131960\n1.774482\n0.777486\n504.191880\n205.914287\n\n\nmin\n6295.000000\n40.583990\n-79.742010\n1.000000\n0.000000\n0.000000\n\n\n25%\n163765.500000\n40.755540\n-76.142530\n2.500000\n121.400000\n97.318000\n\n\n50%\n252457.000000\n41.558420\n-73.988710\n3.000000\n170.000000\n134.370000\n\n\n75%\n437138.000000\n42.949455\n-73.905340\n3.500000\n279.930000\n195.260000\n\n\nmax\n685047.000000\n44.967850\n-71.933340\n5.000000\n10888.500000\n5990.250000"
  },
  {
    "objectID": "Data_Mining/Loop_Speed/Increase_Loop_Speed.html#for-loop-속도-개선하기",
    "href": "Data_Mining/Loop_Speed/Increase_Loop_Speed.html#for-loop-속도-개선하기",
    "title": "Increase Loop Speed",
    "section": "",
    "text": "Python For loop\n\n\n자료 출처\n\nhttps://blog.fearcat.in/a?ID=00900-6997c6fb-2680-4531-af1d-73eeccce74ef\nhttps://aldente0630.github.io/data-science/2018/08/05/a-beginners-guide-to-optimizing-pandas-code-for-speed.html\n\n\n\nimport pandas as pd\nimport numpy as np\nfrom math import *\n\n\n\n익스피디아 개발자 사이트에서 제공한 뉴욕 주 내 모든 호텔 좌표가 들어있는 데이터셋\n\ndf = pd.read_csv('./new_york_hotels.csv', encoding='cp1252')\ndf.head(3)\n\n\n\n\n\n\n\n\nean_hotel_id\nname\naddress1\ncity\nstate_province\npostal_code\nlatitude\nlongitude\nstar_rating\nhigh_rate\nlow_rate\n\n\n\n\n0\n269955\nHilton Garden Inn Albany/SUNY Area\n1389 Washington Ave\nAlbany\nNY\n12206\n42.68751\n-73.81643\n3.0\n154.0272\n124.0216\n\n\n1\n113431\nCourtyard by Marriott Albany Thruway\n1455 Washington Avenue\nAlbany\nNY\n12206\n42.68971\n-73.82021\n3.0\n179.0100\n134.0000\n\n\n2\n108151\nRadisson Hotel Albany\n205 Wolf Rd\nAlbany\nNY\n12205\n42.72410\n-73.79822\n3.0\n134.1700\n84.1600\n\n\n\n\n\n\n\n\ndf.describe()\n\n\n\n\n\n\n\n\nean_hotel_id\nlatitude\nlongitude\nstar_rating\nhigh_rate\nlow_rate\n\n\n\n\ncount\n1631.000000\n1631.000000\n1631.000000\n1630.000000\n1631.000000\n1631.000000\n\n\nmean\n302845.515021\n41.851026\n-75.015019\n2.894785\n273.268624\n169.408866\n\n\nstd\n163497.215910\n1.131960\n1.774482\n0.777486\n504.191880\n205.914287\n\n\nmin\n6295.000000\n40.583990\n-79.742010\n1.000000\n0.000000\n0.000000\n\n\n25%\n163765.500000\n40.755540\n-76.142530\n2.500000\n121.400000\n97.318000\n\n\n50%\n252457.000000\n41.558420\n-73.988710\n3.000000\n170.000000\n134.370000\n\n\n75%\n437138.000000\n42.949455\n-73.905340\n3.500000\n279.930000\n195.260000\n\n\nmax\n685047.000000\n44.967850\n-71.933340\n5.000000\n10888.500000\n5990.250000"
  },
  {
    "objectID": "Data_Mining/Loop_Speed/Increase_Loop_Speed.html#haversine-definition",
    "href": "Data_Mining/Loop_Speed/Increase_Loop_Speed.html#haversine-definition",
    "title": "Increase Loop Speed",
    "section": "Haversine definition",
    "text": "Haversine definition\n두 위치 사이의 거리를 계산하는 함수 - https://stricky.tistory.com/284\n\ndef haversine(lat1, lon1, lat2, lon2):\n    miles_constant = 3959\n    lat1, lon1, lat2, lon2 = map(np.deg2rad, [lat1, lon1, lat2, lon2])\n    dlat = lat2 - lat1\n    dlon = lon2 - lon1\n    a = np.sin(dlat/2)**2 + np.cos(lat1) * np.cos(lat2) * np.sin(dlon/2)**2\n    c = 2 * np.arcsin(np.sqrt(a))\n    mi = miles_constant * c\n    return mi"
  },
  {
    "objectID": "Data_Mining/Loop_Speed/Increase_Loop_Speed.html#task",
    "href": "Data_Mining/Loop_Speed/Increase_Loop_Speed.html#task",
    "title": "Increase Loop Speed",
    "section": "Task",
    "text": "Task\n어떤 위치, (40.671, -73.985)에서 df에 존재하는 모든 호텔까지의 거리를 구해봅시다."
  },
  {
    "objectID": "Data_Mining/Loop_Speed/Increase_Loop_Speed.html#looping-haversine",
    "href": "Data_Mining/Loop_Speed/Increase_Loop_Speed.html#looping-haversine",
    "title": "Increase Loop Speed",
    "section": "Looping Haversine",
    "text": "Looping Haversine\n\ndef haversine_looping(df):\n    distance_list = []  # 빈 리스트를 생성\n    for i in range(0, len(df)):\n        d = haversine(40.671, -73.985,\n                      df.iloc[i]['latitude'], df.iloc[i]['longitude'])\n        distance_list.append(d)\n    return distance_list\n\n%%timeit은 Jupyter Notebook에서 사용되는 매직 명령어 중 하나로, 코드 실행 시간을 측정하는 도구입니다.\n%%timeit 매직 명령어를 사용하면 해당 셀의 코드를 여러 번 실행하여 실행 시간을 평균적으로 계산합니다. 이를 통해 코드의 실행 성능을 쉽게 측정하고 비교할 수 있습니다.\n\n%%timeit\n# Haversine 반복 함수 실행하기\ndf['distance'] = haversine_looping(df)\n# &gt; 299 ms ± 8.85 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n\n277 ms ± 895 µs per loop (mean ± std. dev. of 7 runs, 1 loop each)\n\n\n\ndf['distance'].describe()\n\ncount    1631.000000\nmean      111.318922\nstd       107.476086\nmin         0.163480\n25%         6.305530\n50%        71.070425\n75%       199.395866\nmax       314.936306\nName: distance, dtype: float64"
  },
  {
    "objectID": "Data_Mining/Loop_Speed/Increase_Loop_Speed.html#iterrows-haversine",
    "href": "Data_Mining/Loop_Speed/Increase_Loop_Speed.html#iterrows-haversine",
    "title": "Increase Loop Speed",
    "section": "Iterrows Haversine",
    "text": "Iterrows Haversine\n반복문을 돌려야 할 때 iterrows() 메서드를 사용하는 건 행을 반복하기 위한 더 좋은 방법이다.\niterrows()는 데이터 프레임의 행을 반복하며 행 자체를 포함하는 객체에 덧붙여 각 행의 색인을 반환하는 제너레이터다.\niterrows()는 판다스 데이터 프레임과 함께 작동하게끔 최적화되어 있으며 표준 함수 대부분을 실행하는 데 가장 효율적인 방법은 아니지만(나중에 자세히 설명) 단순 반복보다는 상당히 개선되었다.\n예제의 경우 iterrows()는 행을 수동으로 반복하는 것보다 거의 똑같은 문제를 약 4배 빠르게 해결한다.\n\nhaversine_series = []\nfor index, row in df.iloc[0:10].iterrows():\n    print(row['latitude'])\n\n42.68751\n42.68971\n42.7241\n42.65157\n42.68873\n42.72874\n42.68031\n42.65334\n42.72111\n42.67807\n\n\n\n%%timeit\n# Haversine applied on rows via iteration\nhaversine_series = []\nfor index, row in df.iterrows():\n    haversine_series.append(\n        haversine(40.671, -73.985, row['latitude'], row['longitude']))\ndf['distance'] = haversine_series\n# &gt; 106 ms ± 6.03 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n\n103 ms ± 760 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)\n\n\nitertuples와 iterrows는 모두 Pandas 데이터프레임의 행을 순회(iterate)하는 메서드입니다. 그러나 itertuples는 iterrows보다 더욱 빠른 속도를 보이므로, 대체로 itertuples를 사용하는 것이 좋습니다.\n이유는 iterrows는 각 행(row)을 Series 객체로 반환하는 반면, itertuples는 각 행을 NamedTuple로 반환합니다.\nNamedTuple은 각 속성(attribute)에 이름이 지정되어 있기 때문에, Series보다 빠르게 데이터에 접근할 수 있습니다\n따라서 대용량의 데이터프레임을 다룰 때는 itertuples를 사용하는 것이 더욱 효율적입니다.\n\n%%timeit\nhaversine_series = []\nfor idx, lat, lon in df[['latitude', 'longitude']].itertuples():\n    haversine_series.append(haversine(40.671, -73.985, lat, lon))\n\ndf['distance'] = haversine_series\n# &gt; 28.2 ms ± 1.66 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n\n18.9 ms ± 80.8 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n\n\n\ndf2 = pd.DataFrame({'A': [1, 2, 3], 'B': ['a', 'b', 'c']})\n\nfor row in df2.itertuples():\n    print(row)\n\nPandas(Index=0, A=1, B='a')\nPandas(Index=1, A=2, B='b')\nPandas(Index=2, A=3, B='c')"
  },
  {
    "objectID": "Data_Mining/Loop_Speed/Increase_Loop_Speed.html#apply-haversine-on-rows",
    "href": "Data_Mining/Loop_Speed/Increase_Loop_Speed.html#apply-haversine-on-rows",
    "title": "Increase Loop Speed",
    "section": "Apply Haversine on rows",
    "text": "Apply Haversine on rows\niterrows()보다 더 좋은 옵션은 데이터 프레임의 특정 축(행 또는 열을 의미)을 따라 함수를 적용하는 apply() 메서드를 사용하는 것이다.\napply()는 본질적으로 행을 반복하지만 Cython에서 이터레이터를 사용하는 것 같이 내부 최적화를 다양하게 활용하므로 iterrows()보다 훨씬 효율적이다.\n익명의 람다 함수를 사용하여 Haversine 함수를 각 행에 적용하며 각 행의 특정 셀을 함수 입력값으로 지정할 수 있다.\n람다 함수는 판다스가 행(axis = 1)과 열(axis = 0) 중 어디에 함수를 적용할지 정할 수 있게 축 매개 변수를 마지막에 포함한다.\n\nTiming “apply”\n\n%%timeit\ndf['distance'] = df.apply(lambda row: haversine(\n    40.671, -73.985, row['latitude'], row['longitude']), axis=1)\n# &gt; 42.3 ms ± 835 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)\n\n32 ms ± 149 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)"
  },
  {
    "objectID": "Data_Mining/Loop_Speed/Increase_Loop_Speed.html#vectorized-implementation-of-haversine-applied-on-pandas-series",
    "href": "Data_Mining/Loop_Speed/Increase_Loop_Speed.html#vectorized-implementation-of-haversine-applied-on-pandas-series",
    "title": "Increase Loop Speed",
    "section": "Vectorized implementation of Haversine applied on Pandas series",
    "text": "Vectorized implementation of Haversine applied on Pandas series\n\nTiming vectorized implementation\n함수 수행의 반복량 줄이는 방법을 이해하기 위해 판다스의 기본 단위, 데이터 프레임과 시리즈가 모두 배열 기반임을 알아둡시다. 기본 단위의 내부 구조는 개별 값(스칼라라고 함)마다 순차적으로 작동하는 대신 전체 배열 위로 작동하도록 설계된 내장 판다스 함수를 위해 변환된다. 벡터화는 전체 배열 위로 작업을 실행하는 프로세스다.\n판다스는 수학 연산에서 집계 및 문자열 함수(사용 가능한 함수의 광범위한 목록은 판다스 문서에서 확인해라)에 이르기까지 다양한 벡터화 함수를 포함하고 있다. 내장 함수는 판다스 시리즈와 데이터 프레임에서 작동하게끔 최적화되어있다. 결과적으로 벡터화 판다스 함수를 사용하는 건 비슷한 목적을 위해 손수 반복시키는 방법보다 거의 항상 바람직하다.\n지금까지는 Haversine 함수에 스칼라를 전달하였다. 그러나 Haversine 함수 내에서 사용하는 모든 함수를 배열 위로 작동시킬 수 있다. 이렇게 하면 거리 함수를 매우 간단하게 벡터화할 수 있다. 스칼라 값으로 각 위도, 경도를 전달하는 대신 전체 시리즈(열)를 전달한다. 이를 통해 판다스는 벡터화 함수에 적용 가능한 모든 최적화 옵션을 활용할 수 있고 특히 전체 배열에 대한 모든 계산을 동시에 수행하게 된다.\n\n%%timeit\n# Vectorized implementation of Haversine applied on Pandas series\ndf['distance'] = haversine(40.671, -73.985, df['latitude'], df['longitude'])\n# &gt; 1.33 ms ± 11.3 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n\n1.32 ms ± 14.9 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n\n\n함수 벡터화를 통해 apply() 메서드 대비 50배 이상 개선시켰고 iterrows() 대비 100배 이상 개선시켰다. 입력 유형 변경하는 것 외에 아무것도 하지 않아도 됐다."
  },
  {
    "objectID": "Data_Mining/Loop_Speed/Increase_Loop_Speed.html#vectorized-implementation-of-haversine-applied-on-numpy-arrays",
    "href": "Data_Mining/Loop_Speed/Increase_Loop_Speed.html#vectorized-implementation-of-haversine-applied-on-numpy-arrays",
    "title": "Increase Loop Speed",
    "section": "Vectorized implementation of Haversine applied on NumPy arrays",
    "text": "Vectorized implementation of Haversine applied on NumPy arrays\n이 지점에서 그만두어도 괜찮다. 판다스 시리즈를 사용해 벡터화하면 상시 계산을 위한 최적화 요구 사항의 거의 대부분을 만족시킬 수 있다. 그러나 속도가 최우선이라면 넘파이 파이썬 라이브러리 형식에 도움을 요청해볼 수 있다.\n넘파이 라이브러리는 “과학 계산을 위한 파이썬 기본 패키지”를 표방하며 내부가 최적화된, 사전 컴파일된 C 코드로 작업을 수행한다. 판다스와 마찬가지로 넘파이는 배열 객체(ndarrays라고 함) 상에서 작동한다. 그러나 색인, 데이터 유형 확인 등과 같이 판다스 시리즈 작업으로 인한 오버헤드가 많이 발생하지 않는다. 결과적으로 넘파이 배열에 대한 작업은 판다스 시리즈에 대한 작업보다 훨씬 빠르다.\n판다스 시리즈가 제공하는 추가 기능이 중요하지 않을 때 넘파이 배열을 판다스 시리즈 대신 사용할 수 있다. 예를 들어 Haversine 함수의 벡터화 구현은 실제로 위도 또는 경도 시리즈의 색인을 사용하지 않으므로 사용할 수 있는 색인이 없어도 함수가 중단되지 않는다. 이에 비해 색인으로 값을 참조해야 하는 데이터 프레임의 조인 같은 작업을 수행한다면 판다스 개체를 계속 사용하는 편이 낫다.\n위도와 경도 배열을 시리즈의 values 메서드를 단순 사용해서 판다스 시리즈에서 넘파이 배열로 변환한다. 시리즈의 벡터화와 마찬가지로 넘파이 배열을 함수에 직접 전달하면 판다스가 전체 벡터에 함수를 적용시킨다.\n\nTiming vectorized implementation\n\n# Vectorized implementation of Haversine applied on NumPy arrays\n%%timeit\ndf['distance'] = haversine(\n    40.671, -73.985, df['latitude'].values, df['longitude'].values)\n# &gt; 150 µs ± 1.57 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n\nUsageError: Line magic function `%%timeit` not found.\n\n\n\n%%timeit\n# Convert pandas arrays to NumPy ndarrays\nnp_lat = df['latitude'].values\nnp_lon = df['longitude'].values\n# &gt; 7.07 µs ± 91.2 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n\n7.77 µs ± 78.6 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)"
  },
  {
    "objectID": "Data_Mining/Loop_Speed/Increase_Loop_Speed.html#summary",
    "href": "Data_Mining/Loop_Speed/Increase_Loop_Speed.html#summary",
    "title": "Increase Loop Speed",
    "section": "Summary",
    "text": "Summary\n판다스 코드 최적화에 관해 몇 가지 기본적인 결론을 내릴 수 있다.\n\n반복을 피해라. 사용 사례 대부분의 경우 반복은 느리고 불필요하다.\n\n반복해야 하는 경우 반복 함수가 아닌 apply()를 사용해라.\n\n보통은 벡터화가 스칼라 연산보다 낫다. 대부분의 판다스 작업은 벡터화시킬 수 있다.\n\n넘파이 배열에서의 벡터 연산은 판다스 시리즈에서 수행하는 것보다 효율적이다.\n\n\n실습\n아래의 조건을 만족하는 호텔의 List를 출력해 봅시다.\n\n현재 나는 (“latitude”, “longitude”) = (40.671, -73.985) 위치에 있고, 숙박할 호텔을 찾고 있습니다.\n직선거리 기준으로 200마일 안쪽에 있었으면 좋겠습니다.\nstar_rating이 4 이상인 호텔을 찾고 있습니다.\n\n해당 조건을 만족하는 호텔들을 출력해봅시다\n\ndf['distance'] = haversine(40.671, -73.985, df['latitude'], df['longitude'])\ndf[(df['distance'] &lt;= 200) & (df['star_rating'] &gt;= 4.0)\n   ][['name', 'distance', 'star_rating']]\n\n\n\n\n\n\n\n\nname\ndistance\nstar_rating\n\n\n\n\n114\nTopping Rose House\n90.001264\n4.5\n\n\n129\nSheraton Brooklyn New York Hotel\n1.423805\n4.0\n\n\n134\nMcCarren Hotel & Pool\n3.786288\n4.0\n\n\n142\nThe Box House Hotel\n4.885345\n4.0\n\n\n154\nNew York Marriott at the Brooklyn Bridge\n1.577023\n4.0\n\n\n...\n...\n...\n...\n\n\n1592\nViana Hotel & Spa, BW Premier Collection\n23.431169\n4.0\n\n\n1600\nThe Ritz-Carlton New York, Westchester\n27.466891\n5.0\n\n\n1601\nFurnished Quarters Bank Street Commons\n27.174550\n4.0\n\n\n1602\nGlobal Luxury Apartments in White Plains\n27.241501\n4.0\n\n\n1603\nGlobal Luxury Suites at White Plains\n27.604500\n4.0\n\n\n\n\n245 rows × 3 columns"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html",
    "href": "Data_Mining/numpy/numpy.html",
    "title": "Numpy 기본",
    "section": "",
    "text": "Numpy 실습\n도구 - 넘파이(NumPy)\nNumPy 라이브러리는 파이썬의 과학 컴퓨팅을 위한 기본 라이브러리입니다. 넘파이의 핵심은 강력한 N-차원 배열 객체입니다. 또한 선형 대수, 푸리에(Fourier) 변환, 유사 난수 생성과 같은 유용한 함수들도 제공합니다."
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#np.zeros",
    "href": "Data_Mining/numpy/numpy.html#np.zeros",
    "title": "Numpy 기본",
    "section": "np.zeros",
    "text": "np.zeros\nzeros 함수는 0으로 채워진 배열을 만듭니다.\n\nnp.zeros(5)\n\narray([0., 0., 0., 0., 0.])\n\n\n2D 배열(즉, 행렬)을 만들려면 원하는 행과 열의 크기를 튜플로 전달합니다. 예를 들어 다음은 \\(3 \\times 4\\) 크기의 행렬입니다.\n\nnp.zeros((3, 4))\n\narray([[0., 0., 0., 0.],\n       [0., 0., 0., 0.],\n       [0., 0., 0., 0.]])"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#용어",
    "href": "Data_Mining/numpy/numpy.html#용어",
    "title": "Numpy 기본",
    "section": "용어",
    "text": "용어\n\n넘파이에서 각 차원을 축(axis) 이라고 합니다.\n축의 개수를 랭크(rank) 라고 합니다.\n\n예를 들어, 위의 \\(3 \\times 4\\) 행렬은 랭크 2인 배열입니다(즉 2차원입니다).\n첫 번째 축의 길이는 3이고 두 번째 축의 길이는 4입니다.\n\n배열의 축 길이를 배열의 크기(shape)라고 합니다.\n\n예를 들어, 위 행렬의 크기는 (3, 4)입니다.\n랭크는 크기의 길이와 같습니다.\n\n배열의 사이즈(size)는 전체 원소의 개수입니다. 축의 길이를 모두 곱해서 구할 수 있습니다(예를 들어, \\(3 \\times 4 = 12\\) 입니다.).\n\n\na = np.zeros((3, 4))\na\n\narray([[0., 0., 0., 0.],\n       [0., 0., 0., 0.],\n       [0., 0., 0., 0.]])\n\n\n\na.shape\n\n(3, 4)\n\n\n\na.ndim  # len(a.shape)와 같음\n\n2\n\n\n\na.size\n\n12"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#n-차원-배열",
    "href": "Data_Mining/numpy/numpy.html#n-차원-배열",
    "title": "Numpy 기본",
    "section": "N-차원 배열",
    "text": "N-차원 배열\n임의의 랭크 수를 가진 N-차원 배열을 만들 수 있습니다. 예를 들어, 다음은 크기가 (2,3,4)인 3D 배열(랭크 = 3)입니다.\n\nnp.zeros((2, 3, 4))\n\narray([[[0., 0., 0., 0.],\n        [0., 0., 0., 0.],\n        [0., 0., 0., 0.]],\n\n       [[0., 0., 0., 0.],\n        [0., 0., 0., 0.],\n        [0., 0., 0., 0.]]])"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#배열-타입",
    "href": "Data_Mining/numpy/numpy.html#배열-타입",
    "title": "Numpy 기본",
    "section": "배열 타입",
    "text": "배열 타입\n넘파이 배열의 타입은 ndarray입니다.\n\ntype(np.zeros((3, 4)))\n\nnumpy.ndarray"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#np.ones",
    "href": "Data_Mining/numpy/numpy.html#np.ones",
    "title": "Numpy 기본",
    "section": "np.ones",
    "text": "np.ones\nndarray를 만들 수 있는 넘파이 함수가 많습니다.\n다음은 1로 채워진 \\(3 \\times 4\\) 크기의 행렬입니다.\n\nnp.ones((3, 4))\n\narray([[1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.]])"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#np.full",
    "href": "Data_Mining/numpy/numpy.html#np.full",
    "title": "Numpy 기본",
    "section": "np.full",
    "text": "np.full\n주어진 값으로 지정된 크기의 배열을 초기화합니다. 다음은 π로 채워진 \\(3 \\times 4\\) 크기의 행렬입니다.\n\nnp.full((3, 4), np.pi)\n\narray([[3.14159265, 3.14159265, 3.14159265, 3.14159265],\n       [3.14159265, 3.14159265, 3.14159265, 3.14159265],\n       [3.14159265, 3.14159265, 3.14159265, 3.14159265]])"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#np.empty",
    "href": "Data_Mining/numpy/numpy.html#np.empty",
    "title": "Numpy 기본",
    "section": "np.empty",
    "text": "np.empty\n초기화되지 않은 \\(2 \\times 3\\) 크기의 배열을 만듭니다. (배열의 내용은 예측이 불가능하며 메모리 상황에 따라 달라집니다.)\n\nnp.empty((2, 3))\n\narray([[ 4.63939877e-308, -5.64938534e+036, -1.78409531e+046],\n       [-4.32950182e-035, -8.72433218e-026, -1.57234264e-063]])"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#np.array",
    "href": "Data_Mining/numpy/numpy.html#np.array",
    "title": "Numpy 기본",
    "section": "np.array",
    "text": "np.array\narray 함수는 파이썬 리스트를 사용하여 ndarray를 초기화합니다.\n\nnp.array([[1, 2, 3, 4], [10, 20, 30, 40]])\n\narray([[ 1,  2,  3,  4],\n       [10, 20, 30, 40]])"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#np.arange",
    "href": "Data_Mining/numpy/numpy.html#np.arange",
    "title": "Numpy 기본",
    "section": "np.arange",
    "text": "np.arange\n파이썬의 기본 range 함수와 비슷한 넘파이 arange 함수를 사용하여 ndarray를 만들 수 있습니다.\n\nnp.arange(1, 5)\n\narray([1, 2, 3, 4])\n\n\n부동 소수도 가능합니다.\n\nnp.arange(1.0, 5.0)\n\narray([1., 2., 3., 4.])\n\n\n파이썬의 기본 range 함수처럼 건너 뛰는 정도를 지정할 수 있습니다.\n\nnp.arange(1, 5, 0.5)\n\narray([1. , 1.5, 2. , 2.5, 3. , 3.5, 4. , 4.5])\n\n\n부동 소수를 사용하면 원소의 개수가 일정하지 않을 수 있습니다. 예를 들면 다음과 같습니다.\n\nprint(np.arange(0, 5/3, 1/3))  # 부동 소수 오차 때문에, 최댓값은 4/3 또는 5/3이 됩니다.\nprint(np.arange(0, 5/3, 0.333333333))\nprint(np.arange(0, 5/3, 0.333333334))\n\n[0.         0.33333333 0.66666667 1.         1.33333333 1.66666667]\n[0.         0.33333333 0.66666667 1.         1.33333333 1.66666667]\n[0.         0.33333333 0.66666667 1.         1.33333334]\n\n\nfor loops를 사용하지 않고 전체 array에 대한 연산 수행이 가능합니다.\n평균적으로 Numpy-based 알고리즘은 10~100배정도 속도가 더 빠르고 적은 메모리를 사용합니다.\n\nmy_arr = np.arange(1000000)\nmy_list = list(range(1000000))\n\n%time for _ in range(10): my_arr2 = my_arr * 2\n%time for _ in range(10): my_list2 = [x * 2 for x in my_list]\n\nCPU times: total: 15.6 ms\nWall time: 11 ms\nCPU times: total: 656 ms\nWall time: 658 ms\n\n\nFor loop를 돌릴 때의 속도 비교\n\nsize = 10\nfor x in range(size):\n    x ** 2\n\n\nsize = 10\n\n%timeit for x in range(size): x ** 2\n# out: 10 loops, best of 3: 136 ms per loop\n\n# avoid this\n%timeit for x in np.arange(size): x ** 2\n# out: 1 loops, best of 3: 1.16 s per loop\n\n# use this\n%timeit np.arange(size) ** 2\n# out: 100 loops, best of 3: 19.5 ms per loop\n\n2.14 µs ± 11.3 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n2.78 µs ± 60 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n1.31 µs ± 22.2 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#np.linspace",
    "href": "Data_Mining/numpy/numpy.html#np.linspace",
    "title": "Numpy 기본",
    "section": "np.linspace",
    "text": "np.linspace\n이런 이유로 부동 소수를 사용할 땐 arange 대신에 linspace 함수를 사용하는 것이 좋습니다. linspace 함수는 지정된 개수만큼 두 값 사이를 나눈 배열을 반환합니다.(arange와는 다르게 최댓값이 포함됩니다.)\n\nprint(np.linspace(0, 5/3, 6))  # np.linespace(min, max, cnt)\n\n[0.         0.33333333 0.66666667 1.         1.33333333 1.66666667]"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#np.rand와-np.randn",
    "href": "Data_Mining/numpy/numpy.html#np.rand와-np.randn",
    "title": "Numpy 기본",
    "section": "np.rand와 np.randn",
    "text": "np.rand와 np.randn\n넘파이의 random 모듈에는 ndarray를 랜덤한 값으로 초기화할 수 있는 함수들이 많이 있습니다. 예를 들어, 다음은 (균등 분포인) 0과 1사이의 랜덤한 부동 소수로 \\(3 \\times 4\\) 행렬을 초기화합니다.\n\nnp.random.rand(3, 4)\n\narray([[0.81111485, 0.03405234, 0.37080688, 0.35296648],\n       [0.94197711, 0.27110999, 0.45094818, 0.9486497 ],\n       [0.62916296, 0.13844609, 0.38923768, 0.68398249]])\n\n\n다음은 평균이 0이고 분산이 1인 일변량 정규 분포(가우시안 분포)에서 샘플링한 랜덤한 부동 소수를 담은 \\(3 \\times 4\\) 행렬입니다.\n\nnp.random.randn(3, 4)\n\narray([[-0.30427505,  0.36393286,  0.10694428, -0.40721469],\n       [-0.68230465,  0.44406968, -0.71094999,  1.98631898],\n       [-1.72188395, -0.42928449,  0.82354692,  0.64813862]])\n\n\n이 분포의 모양을 알려면 맷플롯립을 사용해 그려보는 것이 좋습니다.(더 자세한 것은 맷플롯립 튜토리얼을 참고하세요.)\n\n%matplotlib inline\nplt.hist(np.random.rand(100000), density=True, bins=100,\n         histtype='step', color='blue', label='rand')\nplt.hist(np.random.randn(100000), density=True, bins=100,\n         histtype='step', color='red', label='randn')\nplt.axis([-2.5, 2.5, 0, 1.1])\nplt.legend(loc='upper left')\nplt.title('Random distributions')\nplt.xlabel('Value')\nplt.ylabel('Density')\nplt.show()"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#np.fromfunction",
    "href": "Data_Mining/numpy/numpy.html#np.fromfunction",
    "title": "Numpy 기본",
    "section": "np.fromfunction",
    "text": "np.fromfunction\n함수를 사용하여 ndarray를 초기화할 수도 있습니다.\n\ndef my_function(z, y, x):\n    return x + 10 * y + 100 * z\n\n\nnp.fromfunction(my_function, (3, 2, 10))\n\narray([[[  0.,   1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.],\n        [ 10.,  11.,  12.,  13.,  14.,  15.,  16.,  17.,  18.,  19.]],\n\n       [[100., 101., 102., 103., 104., 105., 106., 107., 108., 109.],\n        [110., 111., 112., 113., 114., 115., 116., 117., 118., 119.]],\n\n       [[200., 201., 202., 203., 204., 205., 206., 207., 208., 209.],\n        [210., 211., 212., 213., 214., 215., 216., 217., 218., 219.]]])\n\n\n넘파이는 먼저 크기가 (3, 2, 10)인 세 개의 ndarray(차원마다 하나씩)를 만듭니다. 각 배열은 축을 따라 좌표 값과 같은 값을 가집니다. 예를 들어, z 축에 있는 배열의 모든 원소는 z-축의 값과 같습니다.\n[[[ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]\n  [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]]\n\n [[ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n  [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]]\n\n [[ 2.  2.  2.  2.  2.  2.  2.  2.  2.  2.]\n  [ 2.  2.  2.  2.  2.  2.  2.  2.  2.  2.]]]\n위의 식 x + 10 * y + 100 * z에서 x, y, z는 사실 ndarray입니다(배열의 산술 연산에 대해서는 아래에서 설명합니다). 중요한 점은 함수 my_function이 원소마다 호출되는 것이 아니고 딱 한 번 호출된다는 점입니다. 그래서 매우 효율적으로 초기화할 수 있습니다."
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#dtype",
    "href": "Data_Mining/numpy/numpy.html#dtype",
    "title": "Numpy 기본",
    "section": "dtype",
    "text": "dtype\n넘파이의 ndarray는 모든 원소가 동일한 타입(보통 숫자)을 가지기 때문에 효율적입니다. dtype 속성으로 쉽게 데이터 타입을 확인할 수 있습니다.\n\nc = np.arange(1, 5)\nprint(c.dtype, c)\n\nint32 [1 2 3 4]\n\n\n\nc = np.arange(1.0, 5.0)\nprint(c.dtype, c)\n\nfloat64 [1. 2. 3. 4.]\n\n\n넘파이가 데이터 타입을 결정하도록 내버려 두는 대신 dtype 매개변수를 사용해서 배열을 만들 때 명시적으로 지정할 수 있습니다.\n\nd = np.arange(1, 5, dtype=np.complex64)\nprint(d.dtype, d)\n\ncomplex64 [1.+0.j 2.+0.j 3.+0.j 4.+0.j]\n\n\n가능한 데이터 타입은 int8, int16, int32, int64, uint8|16|32|64, float16|32|64, complex64|128가 있습니다. 전체 리스트는 온라인 문서를 참고하세요."
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#itemsize",
    "href": "Data_Mining/numpy/numpy.html#itemsize",
    "title": "Numpy 기본",
    "section": "itemsize",
    "text": "itemsize\nitemsize 속성은 각 아이템의 크기(바이트)를 반환합니다.\n\ne = np.arange(1, 5, dtype=np.complex64)\ne.itemsize\n\n8"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#data-버퍼",
    "href": "Data_Mining/numpy/numpy.html#data-버퍼",
    "title": "Numpy 기본",
    "section": "data 버퍼",
    "text": "data 버퍼\n배열의 데이터는 1차원 바이트 버퍼로 메모리에 저장됩니다. data 속성을 사용해 참조할 수 있습니다(사용할 일은 거의 없겠지만요).\n\nf = np.array([[1, 2], [1000, 2000]], dtype=np.int32)\nf.data\n\n&lt;memory at 0x0000017094138520&gt;\n\n\n파이썬 2에서는 f.data가 버퍼이고 파이썬 3에서는 memoryview입니다.\n\nif (hasattr(f.data, 'tobytes')):\n    data_bytes = f.data.tobytes()  # python 3\nelse:\n    data_bytes = memoryview(f.data).tobytes()  # python 2\ndata_bytes\n\nb'\\x01\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\xe8\\x03\\x00\\x00\\xd0\\x07\\x00\\x00'\n\n\n여러 개의 ndarray가 데이터 버퍼를 공유할 수 있습니다. 하나를 수정하면 다른 것도 바뀝니다. 잠시 후에 예를 살펴 보겠습니다."
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#자신을-변경",
    "href": "Data_Mining/numpy/numpy.html#자신을-변경",
    "title": "Numpy 기본",
    "section": "자신을 변경",
    "text": "자신을 변경\nndarray의 shape 속성을 지정하면 간단히 크기를 바꿀 수 있습니다. 배열의 원소 개수는 동일하게 유지됩니다.\n\ng = np.arange(24)\nprint(g)\nprint('랭크 : ', g.ndim)\n\n[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23]\n랭크 :  1\n\n\n\ng.shape = (6, 4)\nprint(g)\nprint('랭크 : ', g.ndim)\n\n[[ 0  1  2  3]\n [ 4  5  6  7]\n [ 8  9 10 11]\n [12 13 14 15]\n [16 17 18 19]\n [20 21 22 23]]\n랭크 :  2\n\n\n\ng.shape = (2, 3, 4)\nprint(g)\nprint('랭크 : ', g.ndim)\n\n[[[ 0  1  2  3]\n  [ 4  5  6  7]\n  [ 8  9 10 11]]\n\n [[12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]]]\n랭크 :  3\n\n\n\ng[1, 1, 1]\n\n17"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#reshape",
    "href": "Data_Mining/numpy/numpy.html#reshape",
    "title": "Numpy 기본",
    "section": "reshape",
    "text": "reshape\nreshape 함수는 동일한 데이터를 가리키는 새로운 ndarray 객체를 반환합니다. 한 배열을 수정하면 다른 것도 함께 바뀝니다.\n\ng2 = g.reshape(4, 6)\nprint(g2)\nprint('랭크 : ', g2.ndim)\n\n[[ 0  1  2  3  4  5]\n [ 6  7  8  9 10 11]\n [12 13 14 15 16 17]\n [18 19 20 21 22 23]]\n랭크 :  2\n\n\n\ng[0, 0, 0] = 10\ng2\n\narray([[10,  1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17],\n       [18, 19, 20, 21, 22, 23]])\n\n\n행 1, 열 2의 원소를 999로 설정합니다. (인덱싱 방식은 아래를 참고하세요.)\n\ng2[1, 2] = 999\ng2\n\narray([[ 10,   1,   2,   3,   4,   5],\n       [  6,   7, 999,   9,  10,  11],\n       [ 12,  13,  14,  15,  16,  17],\n       [ 18,  19,  20,  21,  22,  23]])\n\n\n이에 상응하는 g의 원소도 수정됩니다.\n\ng\n\narray([[[ 10,   1,   2,   3],\n        [  4,   5,   6,   7],\n        [999,   9,  10,  11]],\n\n       [[ 12,  13,  14,  15],\n        [ 16,  17,  18,  19],\n        [ 20,  21,  22,  23]]])\n\n\n완전히 다른 공간에 값만 같게 복사를 하고 싶다면 copy를 사용합니다. 이렇게 할 경우 두 객체는 독립적인 객체로 존재함\n\ng2 = g.copy()"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#ravel",
    "href": "Data_Mining/numpy/numpy.html#ravel",
    "title": "Numpy 기본",
    "section": "ravel",
    "text": "ravel\n마지막으로 ravel 함수는 동일한 데이터를 가리키는 새로운 1차원 ndarray를 반환합니다.\n\ng.ravel()\n\narray([ 10,   1,   2,   3,   4,   5,   6,   7, 999,   9,  10,  11,  12,\n        13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23])"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#규칙-1",
    "href": "Data_Mining/numpy/numpy.html#규칙-1",
    "title": "Numpy 기본",
    "section": "규칙 1",
    "text": "규칙 1\n배열의 랭크가 동일하지 않으면 랭크가 맞을 때까지 랭크가 작은 배열 앞에 1을 추가합니다.\n\nh = np.arange(5).reshape(1, 1, 5)\nh\n\narray([[[0, 1, 2, 3, 4]]])\n\n\n여기에 (1,1,5) 크기의 3D 배열에 (5,) 크기의 1D 배열을 더해 보죠. 브로드캐스팅의 규칙 1이 적용됩니다!\n\nh + [10, 20, 30, 40, 50]  # 다음과 동일합니다: h + [[[10, 20, 30, 40, 50]]]\n\narray([[[10, 21, 32, 43, 54]]])"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#규칙-2",
    "href": "Data_Mining/numpy/numpy.html#규칙-2",
    "title": "Numpy 기본",
    "section": "규칙 2",
    "text": "규칙 2\n특정 차원이 1인 배열은 그 차원에서 크기가 가장 큰 배열의 크기에 맞춰 동작합니다. 배열의 원소가 차원을 따라 반복됩니다.\n\nk = np.arange(6).reshape(2, 3)\nk\n\narray([[0, 1, 2],\n       [3, 4, 5]])\n\n\n(2,3) 크기의 2D ndarray에 (2,1) 크기의 2D 배열을 더해 보죠. 넘파이는 브로드캐스팅 규칙 2를 적용합니다.\n\nk + [[100], [200]]  # 다음과 같습니다: k + [[100, 100, 100], [200, 200, 200]]\n\narray([[100, 101, 102],\n       [203, 204, 205]])\n\n\n규칙 1과 2를 합치면 다음과 같이 동작합니다:\n(2,3) 크기의 ndarray에 (3,) 크기의 ndarray 더하기\n\nk\n\narray([[0, 1, 2],\n       [3, 4, 5]])\n\n\n\n# 규칙 1 적용: [[100, 200, 300]], 규칙 2 적용: [[100, 200, 300], [100, 200, 300]]\nk + [100, 200, 300]\n\narray([[100, 201, 302],\n       [103, 204, 305]])\n\n\n\ntest = np.array([100, 200, 300])\ntest.shape\ntest\n\narray([100, 200, 300])\n\n\n\n# step 1\ntest = test.reshape(1, 3)\ntest\n\narray([[100, 200, 300]])\n\n\n\n# step 2\nnp.vstack((test, test))\n\narray([[100, 200, 300],\n       [100, 200, 300]])\n\n\n\n# step 2\nnp.concatenate((test, test), axis=0)\n\narray([[100, 200, 300],\n       [100, 200, 300]])\n\n\n또 매우 간단히 다음 처럼 해도 됩니다:\n\nk\n\narray([[0, 1, 2],\n       [3, 4, 5]])\n\n\n\nk + 1000  # 다음과 같습니다: k + [[1000, 1000, 1000], [1000, 1000, 1000]]\n\narray([[1000, 1001, 1002],\n       [1003, 1004, 1005]])"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#규칙-3",
    "href": "Data_Mining/numpy/numpy.html#규칙-3",
    "title": "Numpy 기본",
    "section": "규칙 3",
    "text": "규칙 3\n규칙 1 & 2을 적용했을 때 모든 배열의 크기가 맞아야 합니다.\n\nk\n\narray([[0, 1, 2],\n       [3, 4, 5]])\n\n\n\ntry:\n    k + [33, 44]\nexcept ValueError as e:\n    print(e)\n\noperands could not be broadcast together with shapes (2,3) (2,) \n\n\n브로드캐스팅 규칙은 산술 연산 뿐만 아니라 넘파이 연산에서 많이 사용됩니다. 아래에서 더 보도록 하죠. 브로드캐스팅에 관한 더 자세한 정보는 온라인 문서를 참고하세요.\n\na = np.array([[0.0], [10.0], [20.0], [30.0]])\n\n\na\n\narray([[ 0.],\n       [10.],\n       [20.],\n       [30.]])\n\n\n\na = np.array([0.0, 10.0, 20.0, 30.0])\nb = np.array([1.0, 2.0, 3.0])\na[:, np.newaxis] + b\n\narray([[ 1.,  2.,  3.],\n       [11., 12., 13.],\n       [21., 22., 23.],\n       [31., 32., 33.]])"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#업캐스팅",
    "href": "Data_Mining/numpy/numpy.html#업캐스팅",
    "title": "Numpy 기본",
    "section": "업캐스팅",
    "text": "업캐스팅\ndtype이 다른 배열을 합칠 때 넘파이는 (실제 값에 상관없이) 모든 값을 다룰 수 있는 타입으로 업캐스팅합니다.\n\nk1 = np.arange(0, 5, dtype=np.uint8)\nprint(k1.dtype, k1)\n\nuint8 [0 1 2 3 4]\n\n\n\nk2 = k1 + np.array([5, 6, 7, 8, 9], dtype=np.int8)\nprint(k2.dtype, k2)\n\nint16 [ 5  7  9 11 13]\n\n\n모든 int8과 uint8 값(-128에서 255까지)을 표현하기 위해 int16이 필요합니다. 이 코드에서는 uint8이면 충분하지만 업캐스팅되었습니다.\n\nk3 = k1 + 1.5\nprint(k3.dtype, k3)\n\nfloat64 [1.5 2.5 3.5 4.5 5.5]"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#ndarray-메서드",
    "href": "Data_Mining/numpy/numpy.html#ndarray-메서드",
    "title": "Numpy 기본",
    "section": "ndarray 메서드",
    "text": "ndarray 메서드\n일부 함수는 ndarray 메서드로 제공됩니다. 예를 들면,\n\na = np.array([[-2.5, 3.1, 7], [10, 11, 12]])\nprint(a)\nprint('평균 = ', a.mean())\n\n[[-2.5  3.1  7. ]\n [10.  11.  12. ]]\n평균 =  6.766666666666667\n\n\n이 명령은 크기에 상관없이 ndarray에 있는 모든 원소의 평균을 계산합니다.\n다음은 유용한 ndarray 메서드입니다.\n\nfor func in (a.min, a.max, a.sum, a.prod, a.std, a.var):\n    print(func.__name__, '=', func())\n\nmin = -2.5\nmax = 12.0\nsum = 40.6\nprod = -71610.0\nstd = 5.084835843520964\nvar = 25.855555555555554\n\n\n이 함수들은 선택적으로 매개변수 axis를 사용합니다. 지정된 축을 따라 원소에 연산을 적용하는데 사용합니다. 예를 들면,\n\nc = np.arange(24).reshape(2, 3, 4)\nc\n\narray([[[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]],\n\n       [[12, 13, 14, 15],\n        [16, 17, 18, 19],\n        [20, 21, 22, 23]]])\n\n\n\nc.sum(axis=0)  # 첫 번째 축을 따라 더함, 결과는 3x4 배열\n\narray([[12, 14, 16, 18],\n       [20, 22, 24, 26],\n       [28, 30, 32, 34]])\n\n\n\nc.sum(axis=1)  # 두 번째 축을 따라 더함, 결과는 2x4 배열\n\narray([[12, 15, 18, 21],\n       [48, 51, 54, 57]])\n\n\n\nc.sum(axis=2)\n\narray([[ 6, 22, 38],\n       [54, 70, 86]])\n\n\n여러 축에 대해서 더할 수도 있습니다.\n\nc\n\narray([[[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]],\n\n       [[12, 13, 14, 15],\n        [16, 17, 18, 19],\n        [20, 21, 22, 23]]])\n\n\n\nc.sum(axis=(0, 2))  # 첫 번째 축과 세 번째 축을 따라 더함, 결과는 (3,) 배열\n\narray([ 60,  92, 124])\n\n\n\n0+1+2+3 + 12+13+14+15, 4+5+6+7 + 16+17+18+19, 8+9+10+11 + 20+21+22+23\n\n(60, 92, 124)"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#일반-함수",
    "href": "Data_Mining/numpy/numpy.html#일반-함수",
    "title": "Numpy 기본",
    "section": "일반 함수",
    "text": "일반 함수\n넘파이는 일반 함수(universal function) 또는 ufunc라고 부르는 원소별 함수를 제공합니다. 예를 들면 square 함수는 원본 ndarray를 복사하여 각 원소를 제곱한 새로운 ndarray 객체를 반환합니다.\n\na = np.array([[-2.5, 3.1, 7], [10, 11, 12]])\nnp.square(a)\n\narray([[  6.25,   9.61,  49.  ],\n       [100.  , 121.  , 144.  ]])\n\n\n다음은 유용한 단항 일반 함수들입니다.\n\nprint('원본 ndarray')\nprint(a)\nfor func in (np.abs, np.sqrt, np.exp, np.log, np.sign,\n             np.ceil, np.modf, np.isnan, np.cos):\n    print('\\n', func.__name__)\n    print(func(a))\n\n원본 ndarray\n[[-2.5  3.1  7. ]\n [10.  11.  12. ]]\n\n absolute\n[[ 2.5  3.1  7. ]\n [10.  11.  12. ]]\n\n sqrt\n[[       nan 1.76068169 2.64575131]\n [3.16227766 3.31662479 3.46410162]]\n\n exp\n[[8.20849986e-02 2.21979513e+01 1.09663316e+03]\n [2.20264658e+04 5.98741417e+04 1.62754791e+05]]\n\n log\n[[       nan 1.13140211 1.94591015]\n [2.30258509 2.39789527 2.48490665]]\n\n sign\n[[-1.  1.  1.]\n [ 1.  1.  1.]]\n\n ceil\n[[-2.  4.  7.]\n [10. 11. 12.]]\n\n modf\n(array([[-0.5,  0.1,  0. ],\n       [ 0. ,  0. ,  0. ]]), array([[-2.,  3.,  7.],\n       [10., 11., 12.]]))\n\n isnan\n[[False False False]\n [False False False]]\n\n cos\n[[-0.80114362 -0.99913515  0.75390225]\n [-0.83907153  0.0044257   0.84385396]]\n\n\nC:\\Users\\user\\AppData\\Local\\Temp\\ipykernel_16152\\1597707201.py:6: RuntimeWarning: invalid value encountered in sqrt\n  print(func(a))\nC:\\Users\\user\\AppData\\Local\\Temp\\ipykernel_16152\\1597707201.py:6: RuntimeWarning: invalid value encountered in log\n  print(func(a))"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#이항-일반-함수",
    "href": "Data_Mining/numpy/numpy.html#이항-일반-함수",
    "title": "Numpy 기본",
    "section": "이항 일반 함수",
    "text": "이항 일반 함수\n두 개의 ndarray에 원소별로 적용되는 이항 함수도 많습니다. 두 배열이 동일한 크기가 아니면 브로드캐스팅 규칙이 적용됩니다.\n\na = np.array([1, -2, 3, 4])\nb = np.array([2, 8, -1, 7])\nnp.add(a, b)  # a + b 와 동일\n\narray([ 3,  6,  2, 11])\n\n\n\nnp.greater(a, b)  # a &gt; b 와 동일\n\narray([False, False,  True, False])\n\n\n\nnp.maximum(a, b)\n\narray([2, 8, 3, 7])\n\n\n\nnp.copysign(a, b)\n\narray([ 1.,  2., -3.,  4.])"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#차원-배열",
    "href": "Data_Mining/numpy/numpy.html#차원-배열",
    "title": "Numpy 기본",
    "section": "1차원 배열",
    "text": "1차원 배열\n1차원 넘파이 배열은 보통의 파이썬 배열과 비슷하게 사용할 수 있습니다.\n\na = np.array([1, 5, 3, 19, 13, 7, 3])\na[3]\n\n19\n\n\n\na[2:5]\n\narray([ 3, 19, 13])\n\n\n\na[2:-1]\n\narray([ 3, 19, 13,  7])\n\n\n\na[:2]\n\narray([1, 5])\n\n\n\na[2::2]\n\narray([ 3, 13,  3])\n\n\n\na[::-1]\n\narray([ 3,  7, 13, 19,  3,  5,  1])\n\n\n물론 원소도 수정할 수 있습니다.\n\na[3] = 999\na\n\narray([  1,   5,   3, 999,  13,   7,   3])\n\n\n슬라이싱을 사용해 ndarray를 수정할 수 있습니다.\n\na[2:5] = [997, 998, 999]\na\n\narray([  1,   5, 997, 998, 999,   7,   3])"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#보통의-파이썬-배열과-차이점",
    "href": "Data_Mining/numpy/numpy.html#보통의-파이썬-배열과-차이점",
    "title": "Numpy 기본",
    "section": "보통의 파이썬 배열과 차이점",
    "text": "보통의 파이썬 배열과 차이점\n보통의 파이썬 배열과 대조적으로 ndarray 슬라이싱에 하나의 값을 할당하면 슬라이싱 전체에 복사됩니다. 위에서 언급한 브로드캐스팅 덕택입니다.\n\na[2:5] = -1\na\n\narray([ 1,  5, -1, -1, -1,  7,  3])\n\n\nList는 브로드캐스팅으로 할당이 안됩니다.\n\nb = [1, 5, 3, 19, 13, 7, 3]\n# b[2:5] = -1 # 리스트는 브로드캐스팅으로 할당 불가능\n\n또한 이런 식으로 ndarray 크기를 늘리거나 줄일 수 없습니다.\n\ntry:\n    a[2:5] = [1, 2, 3, 4, 5, 6]  # 너무 길어요\nexcept ValueError as e:\n    print(e)\n\ncould not broadcast input array from shape (6,) into shape (3,)\n\n\n원소를 삭제할 수도 없습니다.\n\ntry:\n    del a[2:5]\nexcept ValueError as e:\n    print(e)\n\ncannot delete array elements\n\n\nList에서는 삭제가 가능\n\nb = [1, 5, 3, 19, 13, 7, 3]\ndel b[2:5]\nb\n\n[1, 5, 7, 3]\n\n\n중요한 점은 ndarray의 슬라이싱은 같은 데이터 버퍼를 바라보는 뷰(view)입니다. 슬라이싱된 객체를 수정하면 실제 원본 ndarray가 수정됩니다!\n\na_slice = a[2:6]\na_slice[1] = 1000\na  # 원본 배열이 수정됩니다.\n\narray([   1,    5,   -1, 1000,   -1,    7,    3])\n\n\n\na[3] = 2000\na_slice  # 비슷하게 원본 배열을 수정하면 슬라이싱 객체에도 반영됩니다.\n\narray([  -1, 2000,   -1,    7])\n\n\n데이터를 복사하려면 copy 메서드를 사용해야 합니다:\n\nanother_slice = a[2:6].copy()\nanother_slice[1] = 3000\na  # 원본 배열이 수정되지 않습니다.\n\narray([   1,    5,   -1, 2000,   -1,    7,    3])\n\n\n\na[3] = 4000\nanother_slice  # 마찬가지로 원본 배열을 수정해도 복사된 배열은 바뀌지 않습니다.\n\narray([  -1, 3000,   -1,    7])"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#다차원-배열",
    "href": "Data_Mining/numpy/numpy.html#다차원-배열",
    "title": "Numpy 기본",
    "section": "다차원 배열",
    "text": "다차원 배열\n다차원 배열은 비슷한 방식으로 각 축을 따라 인덱싱 또는 슬라이싱해서 사용합니다. 콤마로 구분합니다:\n\nb = np.arange(48).reshape(4, 12)\nb\n\narray([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23],\n       [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35],\n       [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]])\n\n\n\nb[1, 2]  # 행 1, 열 2\n\n14\n\n\n\nb[1, :]  # 행 1, 모든 열\n\narray([12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n\n\n\nb[:, 1]  # 모든 행, 열 1\n\narray([ 1, 13, 25, 37])\n\n\n주의 : 다음 두 표현에는 미묘한 차이가 있습니다.\n\nb[1, :].shape\n\n(12,)\n\n\n\nb[1:2, :]\n\narray([[12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]])\n\n\n첫 번째 표현식은 (12,) 크기인 1D 배열로 행이 하나입니다. 두 번째는 (1, 12) 크기인 2D 배열로 같은 행을 반환합니다."
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#팬시-인덱싱fancy-indexing",
    "href": "Data_Mining/numpy/numpy.html#팬시-인덱싱fancy-indexing",
    "title": "Numpy 기본",
    "section": "팬시 인덱싱(Fancy indexing)",
    "text": "팬시 인덱싱(Fancy indexing)\n관심 대상의 인덱스 리스트를 지정할 수도 있습니다. 이를 팬시 인덱싱이라고 부릅니다.\n\nb[(0, 2), 2:5]  # 행 0과 2, 열 2에서 4(5-1)까지\n\narray([[ 2,  3,  4],\n       [26, 27, 28]])\n\n\n\nb[:, (-1, 2, -1)]  # 모든 행, 열 -1 (마지막), 2와 -1 (다시 반대 방향으로)\n\narray([[11,  2, 11],\n       [23, 14, 23],\n       [35, 26, 35],\n       [47, 38, 47]])\n\n\n\nb[2:, 0:2]\n\narray([[24, 25],\n       [36, 37]])\n\n\n여러 개의 인덱스 리스트를 지정하면 인덱스에 맞는 값이 포함된 1D ndarray를 반환됩니다.\n\n# returns a 1D array with b[-1, 5], b[2, 9], b[-1, 1] and b[2, 9] (again)\nb[(-1, 2, -1, 2), (5, 9, 1, 9)]\n\narray([41, 33, 37, 33])"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#고차원",
    "href": "Data_Mining/numpy/numpy.html#고차원",
    "title": "Numpy 기본",
    "section": "고차원",
    "text": "고차원\n고차원에서도 동일한 방식이 적용됩니다. 몇 가지 예를 살펴 보겠습니다.\n\nc = b.reshape(4, 2, 6)\nc\n\narray([[[ 0,  1,  2,  3,  4,  5],\n        [ 6,  7,  8,  9, 10, 11]],\n\n       [[12, 13, 14, 15, 16, 17],\n        [18, 19, 20, 21, 22, 23]],\n\n       [[24, 25, 26, 27, 28, 29],\n        [30, 31, 32, 33, 34, 35]],\n\n       [[36, 37, 38, 39, 40, 41],\n        [42, 43, 44, 45, 46, 47]]])\n\n\n\nc[2, 1, 4]  # 행렬 2, 행 1, 열 4\n\n34\n\n\n\nc[2, :, 3]  # 행렬 2, 모든 행, 열 3\n\narray([27, 33])\n\n\n어떤 축에 대한 인덱스를 지정하지 않으면 이 축의 모든 원소가 반환됩니다:\n\nc[2, 1]  # 행렬 2, 행 1, 모든 열이 반환됩니다. c[2, 1, :]와 동일합니다.\n\narray([30, 31, 32, 33, 34, 35])"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#생략-부호-...",
    "href": "Data_Mining/numpy/numpy.html#생략-부호-...",
    "title": "Numpy 기본",
    "section": "생략 부호 (...)",
    "text": "생략 부호 (...)\n생략 부호(...)를 쓰면 모든 지정하지 않은 축의 원소를 포함합니다.\n\nc[2, ...]  # 행렬 2, 모든 행, 모든 열. c[2, :, :]와 동일\n\narray([[24, 25, 26, 27, 28, 29],\n       [30, 31, 32, 33, 34, 35]])\n\n\n\nc[2, 1, ...]  # 행렬 2, 행 1, 모든 열. c[2, 1, :]와 동일\n\narray([30, 31, 32, 33, 34, 35])\n\n\n\nc[2, ..., 3]  # 행렬 2, 모든 행, 열 3. c[2, :, 3]와 동일\n\narray([27, 33])\n\n\n\nc[..., 3]  # 모든 행렬, 모든 행, 열 3. c[:, :, 3]와 동일\n\narray([[ 3,  9],\n       [15, 21],\n       [27, 33],\n       [39, 45]])"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#불리언-인덱싱",
    "href": "Data_Mining/numpy/numpy.html#불리언-인덱싱",
    "title": "Numpy 기본",
    "section": "불리언 인덱싱",
    "text": "불리언 인덱싱\n불리언 값을 가진 ndarray를 사용해 축의 인덱스를 지정할 수 있습니다.\n\nb = np.arange(48).reshape(4, 12)\nb\n\narray([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23],\n       [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35],\n       [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]])\n\n\n\nrows_on = np.array([True, False, True, False])\nb[rows_on, :]  # 행 0과 2, 모든 열. b[(0, 2), :]와 동일\n\narray([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],\n       [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]])\n\n\n\ncols_on = np.array([False, True, False] * 4)\nb[:, cols_on]  # 모든 행, 열 1, 4, 7, 10\n\narray([[ 1,  4,  7, 10],\n       [13, 16, 19, 22],\n       [25, 28, 31, 34],\n       [37, 40, 43, 46]])"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#np.ix_",
    "href": "Data_Mining/numpy/numpy.html#np.ix_",
    "title": "Numpy 기본",
    "section": "np.ix_",
    "text": "np.ix_\n여러 축에 걸쳐서는 불리언 인덱싱을 사용할 수 없고 ix_ 함수를 사용합니다.\n\nb[np.ix_((0, 2), (1, 4, 7, 10))]\n\narray([[ 1,  4,  7, 10],\n       [25, 28, 31, 34]])\n\n\n\nb[np.ix_(rows_on, cols_on)]\n\narray([[ 1,  4,  7, 10],\n       [25, 28, 31, 34]])\n\n\n\nnp.ix_(rows_on, cols_on)\n\n(array([[0],\n        [2]], dtype=int64),\n array([[ 1,  4,  7, 10]], dtype=int64))\n\n\nndarray와 같은 크기의 불리언 배열을 사용하면 해당 위치가 True인 모든 원소를 담은 1D 배열이 반환됩니다. 일반적으로 조건 연산자와 함께 사용합니다.\n\nb.shape\n\n(4, 12)\n\n\n\nb[b % 3 == 1]\n\narray([ 1,  4,  7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46])"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#vstack",
    "href": "Data_Mining/numpy/numpy.html#vstack",
    "title": "Numpy 기본",
    "section": "vstack",
    "text": "vstack\nvstack 함수를 사용하여 수직으로 쌓아보겠습니다.\n\nq4 = np.vstack((q1, q2, q3))\nq4\n\narray([[1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [2., 2., 2., 2.],\n       [2., 2., 2., 2.],\n       [2., 2., 2., 2.],\n       [2., 2., 2., 2.],\n       [3., 3., 3., 3.],\n       [3., 3., 3., 3.],\n       [3., 3., 3., 3.]])\n\n\n\nq4.shape\n\n(10, 4)\n\n\nq1, q2, q3가 모두 같은 크기이므로 가능합니다.(수직으로 쌓기 때문에 수직 축은 크기가 달라도 됩니다.)"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#hstack",
    "href": "Data_Mining/numpy/numpy.html#hstack",
    "title": "Numpy 기본",
    "section": "hstack",
    "text": "hstack\nhstack을 사용해 수평으로도 쌓을 수 있습니다.\n\nnp.concatenate((q1, q3), axis=1)\n\narray([[1., 1., 1., 1., 3., 3., 3., 3.],\n       [1., 1., 1., 1., 3., 3., 3., 3.],\n       [1., 1., 1., 1., 3., 3., 3., 3.]])\n\n\n\nq5 = np.hstack((q1, q3))\nq5\n\narray([[1., 1., 1., 1., 3., 3., 3., 3.],\n       [1., 1., 1., 1., 3., 3., 3., 3.],\n       [1., 1., 1., 1., 3., 3., 3., 3.]])\n\n\n\nq5.shape\n\n(3, 8)\n\n\nq1과 q3가 모두 3개의 행을 가지고 있기 때문에 가능합니다. q2는 4개의 행을 가지고 있기 때문에 q1, q3와 수평으로 쌓을 수 없습니다.\n\ntry:\n    q5 = np.hstack((q1, q2, q3))\nexcept ValueError as e:\n    print(e)\n\nall the input array dimensions except for the concatenation axis must match exactly, but along dimension 0, the array at index 0 has size 3 and the array at index 1 has size 4"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#concatenate",
    "href": "Data_Mining/numpy/numpy.html#concatenate",
    "title": "Numpy 기본",
    "section": "concatenate",
    "text": "concatenate\nconcatenate 함수는 지정한 축으로도 배열을 쌓습니다.\n\nq7 = np.concatenate((q1, q2, q3), axis=0)  # vstack과 동일\nq7\n\narray([[1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [2., 2., 2., 2.],\n       [2., 2., 2., 2.],\n       [2., 2., 2., 2.],\n       [2., 2., 2., 2.],\n       [3., 3., 3., 3.],\n       [3., 3., 3., 3.],\n       [3., 3., 3., 3.]])\n\n\n\nq7.shape\n\n(10, 4)\n\n\n예상했겠지만 hstack은 axis = 1으로 concatenate를 호출하는 것과 같습니다."
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#stack",
    "href": "Data_Mining/numpy/numpy.html#stack",
    "title": "Numpy 기본",
    "section": "stack",
    "text": "stack\nstack 함수는 새로운 축을 따라 배열을 쌓습니다. 모든 배열은 같은 크기를 가져야 합니다.\n\nq1.shape\n\n(3, 4)\n\n\n\nq3.shape\n\n(3, 4)\n\n\n\nq8 = np.stack((q1, q3))\nq8\n\narray([[[1., 1., 1., 1.],\n        [1., 1., 1., 1.],\n        [1., 1., 1., 1.]],\n\n       [[3., 3., 3., 3.],\n        [3., 3., 3., 3.],\n        [3., 3., 3., 3.]]])\n\n\n\nq8.shape\n\n(2, 3, 4)"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#행렬-전치",
    "href": "Data_Mining/numpy/numpy.html#행렬-전치",
    "title": "Numpy 기본",
    "section": "행렬 전치",
    "text": "행렬 전치\nT 속성은 랭크가 2보다 크거나 같을 때 transpose()를 호출하는 것과 같습니다.\n\nm1 = np.arange(10).reshape(2, 5)\nm1\n\narray([[0, 1, 2, 3, 4],\n       [5, 6, 7, 8, 9]])\n\n\n\nm1.T\n\narray([[0, 5],\n       [1, 6],\n       [2, 7],\n       [3, 8],\n       [4, 9]])\n\n\nT 속성은 랭크가 0이거나 1인 배열에는 아무런 영향을 미치지 않습니다.\n\nm2 = np.arange(5)\nm2\n\narray([0, 1, 2, 3, 4])\n\n\n\nm2.T\n\narray([0, 1, 2, 3, 4])\n\n\n먼저 1D 배열을 하나의 행이 있는 행렬(2D)로 바꾼다음 전치를 수행할 수 있습니다.\n\nm2r = m2.reshape(1, 5)\nm2r\n\narray([[0, 1, 2, 3, 4]])\n\n\n\nm2r.T\n\narray([[0],\n       [1],\n       [2],\n       [3],\n       [4]])"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#행렬-곱셈",
    "href": "Data_Mining/numpy/numpy.html#행렬-곱셈",
    "title": "Numpy 기본",
    "section": "행렬 곱셈",
    "text": "행렬 곱셈\n두 개의 행렬을 만들어 dot 메서드로 행렬 곱셈을 실행해봅시다.\n\nn1 = np.arange(10).reshape(2, 5)\nn1\n\narray([[0, 1, 2, 3, 4],\n       [5, 6, 7, 8, 9]])\n\n\n\nn2 = np.arange(15).reshape(5, 3)\nn2\n\narray([[ 0,  1,  2],\n       [ 3,  4,  5],\n       [ 6,  7,  8],\n       [ 9, 10, 11],\n       [12, 13, 14]])\n\n\n\nn1.dot(n2)\n\narray([[ 90, 100, 110],\n       [240, 275, 310]])\n\n\n주의: 앞서 언급한 것처럼 n1*n2는 행렬 곱셈이 아니라 원소별 곱셈(또는 아다마르 곱이라 부릅니다)입니다."
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#역행렬과-유사-역행렬",
    "href": "Data_Mining/numpy/numpy.html#역행렬과-유사-역행렬",
    "title": "Numpy 기본",
    "section": "역행렬과 유사 역행렬",
    "text": "역행렬과 유사 역행렬\nnumpy.linalg 모듈 안에 많은 선형 대수 함수들이 있습니다. 특히 inv 함수는 정방 행렬의 역행렬을 계산합니다.\n\nm3 = np.array([[1, 2, 3], [5, 7, 11], [21, 29, 31]])\nm3\n\narray([[ 1,  2,  3],\n       [ 5,  7, 11],\n       [21, 29, 31]])\n\n\n\nlinalg.inv(m3)\n\narray([[-2.31818182,  0.56818182,  0.02272727],\n       [ 1.72727273, -0.72727273,  0.09090909],\n       [-0.04545455,  0.29545455, -0.06818182]])\n\n\npinv 함수를 사용하여 유사 역행렬을 계산할 수도 있습니다.\n\nlinalg.pinv(m3)\n\narray([[-2.31818182,  0.56818182,  0.02272727],\n       [ 1.72727273, -0.72727273,  0.09090909],\n       [-0.04545455,  0.29545455, -0.06818182]])"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#단위-행렬",
    "href": "Data_Mining/numpy/numpy.html#단위-행렬",
    "title": "Numpy 기본",
    "section": "단위 행렬",
    "text": "단위 행렬\n행렬과 그 행렬의 역행렬을 곱하면 단위 행렬이 됩니다.(작은 소숫점 오차가 있습니다.)\n\nm3.dot(linalg.inv(m3))\n\narray([[ 1.00000000e+00, -1.66533454e-16,  0.00000000e+00],\n       [ 6.31439345e-16,  1.00000000e+00, -1.38777878e-16],\n       [ 5.21110932e-15, -2.38697950e-15,  1.00000000e+00]])\n\n\neye 함수는 NxN 크기의 단위 행렬을 만듭니다.\n\nnp.eye(3)\n\narray([[1., 0., 0.],\n       [0., 1., 0.],\n       [0., 0., 1.]])"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#qr-분해",
    "href": "Data_Mining/numpy/numpy.html#qr-분해",
    "title": "Numpy 기본",
    "section": "QR 분해",
    "text": "QR 분해\nqr 함수는 행렬을 QR 분해합니다.\n\nq, r = linalg.qr(m3)\nq\n\narray([[-0.04627448,  0.98786672,  0.14824986],\n       [-0.23137241,  0.13377362, -0.96362411],\n       [-0.97176411, -0.07889213,  0.22237479]])\n\n\n\nr\n\narray([[-21.61018278, -29.89331494, -32.80860727],\n       [  0.        ,   0.62427688,   1.9894538 ],\n       [  0.        ,   0.        ,  -3.26149699]])\n\n\n\nq.dot(r)  # q.r는 m3와 같습니다\n\narray([[ 1.,  2.,  3.],\n       [ 5.,  7., 11.],\n       [21., 29., 31.]])"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#행렬식",
    "href": "Data_Mining/numpy/numpy.html#행렬식",
    "title": "Numpy 기본",
    "section": "행렬식",
    "text": "행렬식\ndet 함수는 행렬식을 계산합니다.\n\nlinalg.det(m3)  # 행렬식 계산\n\n43.99999999999997"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#고윳값과-고유벡터",
    "href": "Data_Mining/numpy/numpy.html#고윳값과-고유벡터",
    "title": "Numpy 기본",
    "section": "고윳값과 고유벡터",
    "text": "고윳값과 고유벡터\neig 함수는 정방 행렬의 고윳값과 고유벡터를 계산합니다.\n\neigenvalues, eigenvectors = linalg.eig(m3)\neigenvalues  # λ\n\narray([42.26600592, -0.35798416, -2.90802176])\n\n\n\neigenvectors  # v\n\narray([[-0.08381182, -0.76283526, -0.18913107],\n       [-0.3075286 ,  0.64133975, -0.6853186 ],\n       [-0.94784057, -0.08225377,  0.70325518]])\n\n\n\nm3.dot(eigenvectors) - eigenvalues * eigenvectors  # m3.v - λ*v = 0\n\narray([[ 6.21724894e-15,  1.66533454e-15, -3.10862447e-15],\n       [ 3.55271368e-15,  5.30131494e-15, -5.32907052e-15],\n       [ 3.55271368e-14,  5.38458167e-15, -9.76996262e-15]])"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#특잇값-분해",
    "href": "Data_Mining/numpy/numpy.html#특잇값-분해",
    "title": "Numpy 기본",
    "section": "특잇값 분해",
    "text": "특잇값 분해\nsvd 함수는 행렬을 입력으로 받아 그 행렬의 특잇값 분해를 반환합니다.\n\nm4 = np.array([[1, 0, 0, 0, 2], [0, 0, 3, 0, 0],\n               [0, 0, 0, 0, 0], [0, 2, 0, 0, 0]])\nm4\n\narray([[1, 0, 0, 0, 2],\n       [0, 0, 3, 0, 0],\n       [0, 0, 0, 0, 0],\n       [0, 2, 0, 0, 0]])\n\n\n\nU, S_diag, V = linalg.svd(m4)\nU\n\narray([[ 0.,  1.,  0.,  0.],\n       [ 1.,  0.,  0.,  0.],\n       [ 0.,  0.,  0.,  1.],\n       [ 0.,  0., -1.,  0.]])\n\n\n\nS_diag\n\narray([3.        , 2.23606798, 2.        , 0.        ])\n\n\nsvd 함수는 Σ의 대각 원소 값만 반환합니다. 전체 Σ 행렬은 다음과 같이 만듭니다.\n\nS = np.zeros((4, 5))\nS[np.diag_indices(4)] = S_diag\nS  # Σ\n\narray([[3.        , 0.        , 0.        , 0.        , 0.        ],\n       [0.        , 2.23606798, 0.        , 0.        , 0.        ],\n       [0.        , 0.        , 2.        , 0.        , 0.        ],\n       [0.        , 0.        , 0.        , 0.        , 0.        ]])\n\n\n\nV\n\narray([[-0.        ,  0.        ,  1.        , -0.        ,  0.        ],\n       [ 0.4472136 ,  0.        ,  0.        ,  0.        ,  0.89442719],\n       [ 0.        , -1.        ,  0.        ,  0.        ,  0.        ],\n       [ 0.        ,  0.        ,  0.        ,  1.        ,  0.        ],\n       [-0.89442719,  0.        ,  0.        ,  0.        ,  0.4472136 ]])\n\n\n\nU.dot(S).dot(V)  # U.Σ.V == m4\n\narray([[1., 0., 0., 0., 2.],\n       [0., 0., 3., 0., 0.],\n       [0., 0., 0., 0., 0.],\n       [0., 2., 0., 0., 0.]])"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#대각원소와-대각합",
    "href": "Data_Mining/numpy/numpy.html#대각원소와-대각합",
    "title": "Numpy 기본",
    "section": "대각원소와 대각합",
    "text": "대각원소와 대각합\n\nnp.diag(m3)  # m3의 대각 원소입니다(왼쪽 위에서 오른쪽 아래)\n\narray([ 1,  7, 31])\n\n\n\nnp.trace(m3)  # np.diag(m3).sum()와 같습니다\n\n39"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#선형-방정식-풀기",
    "href": "Data_Mining/numpy/numpy.html#선형-방정식-풀기",
    "title": "Numpy 기본",
    "section": "선형 방정식 풀기",
    "text": "선형 방정식 풀기\nsolve 함수는 다음과 같은 선형 방정식을 풉니다.\n\n\\(2x + 6y = 6\\)\n\\(5x + 3y = -9\\)\n\n\ncoeffs = np.array([[2, 6], [5, 3]])\ndepvars = np.array([6, -9])\nsolution = linalg.solve(coeffs, depvars)\nsolution\n\narray([-3.,  2.])\n\n\nsolution을 확인해 봅시다.\n\ncoeffs.dot(solution), depvars  # 동일한 결과\n\n(array([ 6., -9.]), array([ 6, -9]))\n\n\n좋습니다! 다른 방식으로도 solution을 확인해봅시다.\n\nnp.allclose(coeffs.dot(solution), depvars)\n\nTrue"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#바이너리-.npy-포맷",
    "href": "Data_Mining/numpy/numpy.html#바이너리-.npy-포맷",
    "title": "Numpy 기본",
    "section": "바이너리 .npy 포맷",
    "text": "바이너리 .npy 포맷\n랜덤 배열을 만들고 저장해 봅시다.\n\na = np.random.rand(2, 3)\na\n\narray([[0.24493352, 0.04036961, 0.7987492 ],\n       [0.121653  , 0.05816837, 0.57015007]])\n\n\n\nnp.save('my_array', a)\n\n끝입니다! 파일 이름의 확장자를 지정하지 않았기 때문에 넘파이는 자동으로 .npy를 붙입니다. 파일 내용을 확인해 보겠습니다.\n\nwith open('my_array.npy', 'rb') as f:\n    content = f.read()\n\ncontent\n\nb\"\\x93NUMPY\\x01\\x00v\\x00{'descr': '&lt;f8', 'fortran_order': False, 'shape': (2, 3), }                                                          \\npOfJ\\xfbY\\xcf?pBrPS\\xab\\xa4?\\xdb\\xf7h|Z\\x8f\\xe9?Pp\\xc8\\xa9\\xa6$\\xbf?@\\xa3\\xe5\\xc0&gt;\\xc8\\xad?F\\xbb=Z\\xab&gt;\\xe2?\"\n\n\n이 파일을 넘파이 배열로 로드하려면 load 함수를 사용합니다.\n\na_loaded = np.load('my_array.npy')\na_loaded\n\narray([[0.24493352, 0.04036961, 0.7987492 ],\n       [0.121653  , 0.05816837, 0.57015007]])"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#텍스트-포맷",
    "href": "Data_Mining/numpy/numpy.html#텍스트-포맷",
    "title": "Numpy 기본",
    "section": "텍스트 포맷",
    "text": "텍스트 포맷\n배열을 텍스트 포맷으로 저장해봅시다.\n\nnp.savetxt('my_array.csv', a)\n\n파일 내용을 확인해 보겠습니다.\n\nwith open('my_array.csv', 'rt') as f:\n    print(f.read())\n\n2.449335206298388634e-01 4.036960942278688957e-02 7.987492017634808539e-01\n1.216530003079594469e-01 5.816837410640696149e-02 5.701500666162722109e-01\n\n\n\n이 파일은 탭으로 구분된 CSV 파일입니다. 다른 구분자를 지정할 수도 있습니다.\n\nnp.savetxt('my_array.csv', a, delimiter=',')\n\n이 파일을 로드하려면 loadtxt 함수를 사용합니다.\n\na_loaded = np.loadtxt('my_array.csv', delimiter=',')\na_loaded\n\narray([[0.24493352, 0.04036961, 0.7987492 ],\n       [0.121653  , 0.05816837, 0.57015007]])"
  },
  {
    "objectID": "Data_Mining/numpy/numpy.html#압축된-.npz-포맷",
    "href": "Data_Mining/numpy/numpy.html#압축된-.npz-포맷",
    "title": "Numpy 기본",
    "section": "압축된 .npz 포맷",
    "text": "압축된 .npz 포맷\n여러 개의 배열을 압축된 한 파일로 저장하는 것도 가능합니다.\n\nb = np.arange(24, dtype=np.uint8).reshape(2, 3, 4)\nb\n\narray([[[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]],\n\n       [[12, 13, 14, 15],\n        [16, 17, 18, 19],\n        [20, 21, 22, 23]]], dtype=uint8)\n\n\n\nnp.savez('my_arrays', my_a=a, my_b=b)\n\n파일 내용을 확인해 봅시다. .npz 파일 확장자가 자동으로 추가되었습니다.\n\nwith open('my_arrays.npz', 'rb') as f:\n    content = f.read()\n\nrepr(content)[:180] + '[...]'\n\n'b\"PK\\\\x03\\\\x04\\\\x14\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00!\\\\x00\\\\xffD\\\\xd9j\\\\xb0\\\\x00\\\\x00\\\\x00\\\\xb0\\\\x00\\\\x00\\\\x00\\\\x08\\\\x00\\\\x14\\\\x00my_a.npy\\\\x01\\\\x00\\\\x10\\\\x00\\\\xb0\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\xb0\\\\x00\\\\x00\\\\x00\\\\[...]'\n\n\n다음과 같이 이 파일을 로드할 수 있습니다.\n\nmy_arrays = np.load('my_arrays.npz')\nmy_arrays\n\n&lt;numpy.lib.npyio.NpzFile at 0x17090d8fa00&gt;\n\n\n게으른 로딩을 수행하는 딕셔너리와 유사한 객체입니다:\n\nlist(my_arrays.keys())\n\n['my_a', 'my_b']\n\n\n\nmy_arrays['my_a']\n\narray([[0.24493352, 0.04036961, 0.7987492 ],\n       [0.121653  , 0.05816837, 0.57015007]])"
  },
  {
    "objectID": "Data_Mining/seaborn.html",
    "href": "Data_Mining/seaborn.html",
    "title": "Seaborn 기본",
    "section": "",
    "text": "Seaborn 실습"
  },
  {
    "objectID": "Data_Mining/seaborn.html#load-data",
    "href": "Data_Mining/seaborn.html#load-data",
    "title": "Seaborn 기본",
    "section": "1.1 Load data",
    "text": "1.1 Load data\n\n예제로 사용할 펭귄 데이터를 불러옵니다.\nseaborn에 내장되어 있습니다.\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\npenguins = sns.load_dataset(\"penguins\")\npenguins.head()\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nMale\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nFemale\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nFemale\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nFemale"
  },
  {
    "objectID": "Data_Mining/seaborn.html#figure-and-axes",
    "href": "Data_Mining/seaborn.html#figure-and-axes",
    "title": "Seaborn 기본",
    "section": "1.2 Figure and Axes",
    "text": "1.2 Figure and Axes\n\nmatplotlib으로 도화지 figure를 깔고 축공간 axes를 만듭니다.\n1 x 2 축공간을 구성합니다.\n\n\nfig, axes = plt.subplots(ncols=2, figsize=(8,4))\n\nfig.tight_layout()"
  },
  {
    "objectID": "Data_Mining/seaborn.html#plot-with-matplotlib",
    "href": "Data_Mining/seaborn.html#plot-with-matplotlib",
    "title": "Seaborn 기본",
    "section": "1.3 plot with matplotlib",
    "text": "1.3 plot with matplotlib\n\nmatplotlib 기능을 이용해서 산점도를 그립니다.\n\nx축은 부리 길이 bill length\ny축은 부리 위 아래 두께 bill depth\n색상은 종species로 합니다.\nAdelie, Chinstrap, Gentoo이 있습니다.\n\n두 축공간 중 왼쪽에만 그립니다.\n컬러를 다르게 주기 위해 f-string 포맷을 사용했습니다.\n\nf-string 포맷에 대한 설명은 https://blockdmask.tistory.com/429를 참고하세요\n\n\n\nfig, axes = plt.subplots(ncols=2,figsize=(8,4))\n\nspecies_u = penguins[\"species\"].unique()\n\nfor i, s in enumerate(species_u):\n    axes[0].scatter(penguins[\"bill_length_mm\"].loc[penguins[\"species\"]==s],\n                    penguins[\"bill_depth_mm\"].loc[penguins[\"species\"]==s],\n                    c=f\"C{i}\", label=s, alpha=0.3)\n    \naxes[0].legend(species_u, title=\"species\")\naxes[0].set_xlabel(\"Bill Length (mm)\")\naxes[0].set_ylabel(\"Bill Depth (mm)\")\n\n# plt.show()\nfig.tight_layout()\n\n\n\n\n조금 더 간단히 그리는 방법 matplotlib는 기본적으로 Categorical 변수를 color로 바로 사용하지 못함\n\n# We transform text categorical variables into numerical variables\npenguins[\"species_codes\"] = pd.Categorical(penguins[\"species\"]).codes\n\nfig, axes = plt.subplots(ncols=2,figsize=(8,4))\n\naxes[0].scatter(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", c=\"species_codes\", alpha=0.3)\n\n&lt;matplotlib.collections.PathCollection at 0x28659ead930&gt;"
  },
  {
    "objectID": "Data_Mining/seaborn.html#plot-with-seaborn",
    "href": "Data_Mining/seaborn.html#plot-with-seaborn",
    "title": "Seaborn 기본",
    "section": "1.4 Plot with seaborn",
    "text": "1.4 Plot with seaborn\n\nfig, axes = plt.subplots(ncols=2,figsize=(8,4))\n\nspecies_u = penguins[\"species\"].unique()\n\n# plot 0 : matplotlib\n\nfor i, s in enumerate(species_u):\n    axes[0].scatter(penguins[\"bill_length_mm\"].loc[penguins[\"species\"]==s],\n                    penguins[\"bill_depth_mm\"].loc[penguins[\"species\"]==s],\n                    c=f\"C{i}\", label=s, alpha=0.3)\n    \naxes[0].legend(species_u, title=\"species\")\naxes[0].set_xlabel(\"Bill Length (mm)\")\naxes[0].set_ylabel(\"Bill Depth (mm)\")\n\n\n# plot 1 : seaborn\nsns.scatterplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", hue=\"species\", data=penguins, alpha=0.3, ax=axes[1])\naxes[1].set_xlabel(\"Bill Length (mm)\")\naxes[1].set_ylabel(\"Bill Depth (mm)\")\n\nfig.tight_layout()\n\n\n\n\n\n단 세 줄로 거의 동일한 그림이 나왔습니다.\n\nscatter plot의 점 크기만 살짝 작습니다.\nlabel의 투명도만 살짝 다릅니다.\n\nseaborn 명령 scatterplot()을 그대로 사용했습니다.\nx축과 y축 label도 바꾸었습니다.\n\nax=axes[1] 인자에서 볼 수 있듯, 존재하는 axes에 그림만 얹었습니다.\nmatplotlib 틀 + seaborn 그림 이므로, matplotlib 명령이 모두 통합니다."
  },
  {
    "objectID": "Data_Mining/seaborn.html#matplotlib-seaborn-seaborn-matplotlib",
    "href": "Data_Mining/seaborn.html#matplotlib-seaborn-seaborn-matplotlib",
    "title": "Seaborn 기본",
    "section": "1.5 matplotlib + seaborn & seaborn + matplotlib",
    "text": "1.5 matplotlib + seaborn & seaborn + matplotlib\n\nmatplotlib과 seaborn이 자유롭게 섞일 수 있습니다.\n\nmatplotlib 산점도 위에 seaborn 추세선을 얹을 수 있고,\nseaborn 산점도 위에 matplotlib 중심점을 얹을 수 있습니다.\n\n파이썬 코드는 다음과 같습니다.\n\n\nfig, axes = plt.subplots(ncols=2, figsize=(8, 4))\n\nspecies_u = penguins[\"species\"].unique()\n\n# plot 0 : matplotlib + seaborn\nfor i, s in enumerate(species_u):\n    # matplotlib 산점도\n    axes[0].scatter(penguins[\"bill_length_mm\"].loc[penguins[\"species\"]==s],\n                   penguins[\"bill_depth_mm\"].loc[penguins[\"species\"]==s],\n                   c=f\"C{i}\", label=s, alpha=0.3\n                  )\n                  \n    # seaborn 추세선\n    sns.regplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", data=penguins.loc[penguins[\"species\"]==s], \n                scatter=False, ax=axes[0])\n    \naxes[0].legend(species_u, title=\"species\")\naxes[0].set_xlabel(\"Bill Length (mm)\")\naxes[0].set_ylabel(\"Bill Depth (mm)\")\n\n# plot 1 : seaborn + matplotlib\n# seaborn 산점도\nsns.scatterplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", hue=\"species\", data=penguins, alpha=0.3, ax=axes[1])\naxes[1].set_xlabel(\"Bill Length (mm)\")\naxes[1].set_ylabel(\"Bill Depth (mm)\")\n\nfor i, s in enumerate(species_u):\n    # matplotlib 중심점\n    axes[1].scatter(penguins[\"bill_length_mm\"].loc[penguins[\"species\"]==s].mean(),\n                   penguins[\"bill_depth_mm\"].loc[penguins[\"species\"]==s].mean(),\n                   c=f\"C{i}\", alpha=1, marker=\"x\", s=100\n                  )\n\nfig.tight_layout()"
  },
  {
    "objectID": "Data_Mining/seaborn.html#seaborn-seaborn-matplotlib",
    "href": "Data_Mining/seaborn.html#seaborn-seaborn-matplotlib",
    "title": "Seaborn 기본",
    "section": "1.6 seaborn + seaborn + matplotlib",
    "text": "1.6 seaborn + seaborn + matplotlib\n\n안 될 이유가 없습니다.\nseaborn scatterplot + seaborn kdeplot + matplotlib text입니다\n\n\nfig, ax = plt.subplots(figsize=(6,5))\n\n# plot 0: scatter plot\nsns.scatterplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", color=\"k\", data=penguins, alpha=0.3, ax=ax, legend=False)\n\n# plot 1: kde plot\nsns.kdeplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", hue=\"species\", data=penguins, alpha=0.5, ax=ax, legend=False)\n\n# text:\nspecies_u = penguins[\"species\"].unique()\nfor i, s in enumerate(species_u):\n    ax.text(penguins[\"bill_length_mm\"].loc[penguins[\"species\"]==s].mean(),\n            penguins[\"bill_depth_mm\"].loc[penguins[\"species\"]==s].mean(),\n            s = s, fontdict={\"fontsize\":14, \"fontweight\":\"bold\",\"color\":\"k\"}\n            )\n\nax.set_xlabel(\"Bill Length (mm)\")\nax.set_ylabel(\"Bill Depth (mm)\")\n\nfig.tight_layout()"
  },
  {
    "objectID": "Data_Mining/seaborn.html#quiz",
    "href": "Data_Mining/seaborn.html#quiz",
    "title": "Seaborn 기본",
    "section": "Quiz",
    "text": "Quiz\n\nbill length를 10단위로 나눈 후, bill length에 따른 depth의 boxplot을 그려봅시다.\n\n\n# penguins['bill_length'] = (penguins['bill_length_mm'] // 10 * 10)\n# sns.boxplot(x = 'bill_length', y = 'bill_depth_mm', data = penguins)\n# plt.show()\n\npenguins['bill_length_10'] = (penguins['bill_length_mm'] // 10 * 10)\nsns.boxplot(x = 'bill_length_10', y = 'bill_depth_mm', data = penguins)\nsns.stripplot(x = 'bill_length_10', y = 'bill_depth_mm', data = penguins, color = 'black', size = 4)\n\nsns.set_style('whitegrid')\nplt.show()\n\n\n\n\n\nsns.scatterplot(x = 'bill_length_mm', y = 'bill_depth_mm', hue = 'species', data = penguins, alpha = 0.3)\nplt.show()\n\n\n\n\n\ng = sns.FacetGrid(penguins, col = 'species', hue = 'species', col_wrap = 3)\ng.map(sns.scatterplot, 'bill_length_mm', 'bill_depth_mm')\n\nsns.set_style('whitegrid')\nsns.despine()\n\nplt.show()\n\n\n\n\n\npenguins['bill_length_group'] = pd.cut(penguins['bill_length_mm'], bins = 3,\n                                       labels = ['0~40', '40~50', '50~60'])\n\ng = sns.FacetGrid(penguins, col = 'species', col_wrap = 3)\ng.map(sns.boxplot, 'bill_length_group', 'bill_depth_mm', order = ['0~40', '40~50', '50~60'])\ng.map(sns.stripplot, 'bill_length_group', 'bill_depth_mm', color = 'black', size = 4, order = ['0~40', '40~50', '50~60'])\n\nsns.set_style('whitegrid')\nsns.despine()\n\nplt.show()"
  },
  {
    "objectID": "Data_Visualization/Map_in_R.html",
    "href": "Data_Visualization/Map_in_R.html",
    "title": "Map in R",
    "section": "",
    "text": "# 경도와 위도 상자 좌표 계산 함수\nfn_lon_lat_box &lt;- function(lon, lat, dist = 1){\n  h &lt;- 0.0035 *3.5 * dist\n  w &lt;- 0.0035 * 4 * dist\n  c(lon - w, lat - h, lon + w, lat + h)\n}\n\n\n\n\n# 경도와 위도로 표시할 중심 좌표와 거리\nboxLocation &lt;- fn_lon_lat_box(127.385, 36.375, 8)\n\n# 지도 다운로드\nkrMap &lt;- get_map(location = boxLocation, source = 'stamen')\n#&gt; ℹ Map tiles by Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under ODbL.\n\n# 지도 표시\nggmap(krMap)\n\n\n\n\n\n\n\n\n파일 : 소상공인시장진흥공단_상가(상권)정보_대전_202303.csv\n\n\n# Data\nstore.file &lt;- './data/소상공인시장진흥공단_상가(상권)정보_대전_202303.csv'\ndata.store &lt;- read.csv(store.file, header = T, fileEncoding = 'UTF-8')\ndata.store %&gt;% head()\n#&gt;           상가업소번호       상호명 지점명 상권업종대분류코드 상권업종대분류명\n#&gt; 1 MA0101202210A0068117     줄또웰빙                        G2             소매\n#&gt; 2 MA0101202210A0090669   개성칼국수                        I2             음식\n#&gt; 3 MA010120220805430751     엘모바일                        G2             소매\n#&gt; 4 MA010120220805431091     정성약국                        G2             소매\n#&gt; 5 MA010120220805431125 다비치안경원                        G2             소매\n#&gt; 6 MA010120220805431202     베리도넛                        I2             음식\n#&gt;   상권업종중분류코드    상권업종중분류명 상권업종소분류코드    상권업종소분류명\n#&gt; 1               G205         식료품 소매             G20508 건강보조식품 소매업\n#&gt; 2               I201                한식             I20105         국수/칼국수\n#&gt; 3               G208     가전·통신 소매             G20802       핸드폰 소매업\n#&gt; 4               G215   의약·화장품 소매             G21501                약국\n#&gt; 5               G216 안경·정밀기기 소매             G21602     안경렌즈 소매업\n#&gt; 6               I210           기타 간이             I21001             빵/도넛\n#&gt;   표준산업분류코드            표준산업분류명 시도코드     시도명 시군구코드\n#&gt; 1           G47217      건강 보조식품 소매업       30 대전광역시      30110\n#&gt; 2           I56112       한식 면 요리 전문점       30 대전광역시      30140\n#&gt; 3           G47312           통신기기 소매업       30 대전광역시      30170\n#&gt; 4           G47811 의약품 및 의료용품 소매업       30 대전광역시      30140\n#&gt; 5           G47822       안경 및 렌즈 소매업       30 대전광역시      30110\n#&gt; 6           I56191                  제과점업       30 대전광역시      30110\n#&gt;   시군구명 행정동코드 행정동명 법정동코드 법정동명     지번코드 대지구분코드\n#&gt; 1     동구   30110640   용전동 3011011500   용전동 3.011012e+18            1\n#&gt; 2     중구   30140550     목동 3014010300     목동 3.014010e+18            1\n#&gt; 3     서구   30170640  둔산2동 3017011200   둔산동 3.017011e+18            1\n#&gt; 4     중구   30140710  유천2동 3014011500   유천동 3.014012e+18            1\n#&gt; 5     동구   30110515   중앙동 3011012000     중동 3.011012e+18            1\n#&gt; 6     동구   30110515   중앙동 3011011300   소제동 3.011011e+18            1\n#&gt;   대지구분명 지번본번지 지번부번지                      지번주소   도로명코드\n#&gt; 1       대지        145          5  대전광역시 동구 용전동 145-5 301102010003\n#&gt; 2       대지         14          2     대전광역시 중구 목동 14-2 301404295276\n#&gt; 3       대지        970         NA    대전광역시 서구 둔산동 970 301703166019\n#&gt; 4       대지        185          1  대전광역시 중구 유천동 185-1 301403000095\n#&gt; 5       대지         92          1     대전광역시 동구 중동 92-1 301103164033\n#&gt; 6       대지        299         86 대전광역시 동구 소제동 299-86 301104292381\n#&gt;                         도로명 건물본번지 건물부번지 건물관리번호     건물명\n#&gt; 1     대전광역시 동구 동서대로       1641         NA 3.011012e+24   아남빌딩\n#&gt; 2 대전광역시 중구 목중로19번길          7         NA 3.014010e+24           \n#&gt; 3       대전광역시 서구 둔산로         15         NA 3.017011e+24 향촌아파트\n#&gt; 4       대전광역시 중구 계백로       1600         NA 3.014012e+24           \n#&gt; 5       대전광역시 동구 중앙로        198         NA 3.011012e+24           \n#&gt; 6       대전광역시 동구 수향길         97         NA 3.011011e+24           \n#&gt;                       도로명주소 구우편번호 신우편번호 동정보 층정보 호정보\n#&gt; 1  대전광역시 동구 동서대로 1641     300726      34552     NA      8     NA\n#&gt; 2 대전광역시 중구 목중로19번길 7     301808      34815     NA            NA\n#&gt; 3      대전광역시 서구 둔산로 15     302776      35228     NA            NA\n#&gt; 4    대전광역시 중구 계백로 1600     301833      34966     NA            NA\n#&gt; 5     대전광역시 동구 중앙로 198     300160      34628     NA      1     NA\n#&gt; 6      대전광역시 동구 수향길 97     300080      34615     NA            NA\n#&gt;       경도     위도\n#&gt; 1 127.4327 36.34809\n#&gt; 2 127.4113 36.33558\n#&gt; 3 127.3763 36.35323\n#&gt; 4 127.3979 36.31822\n#&gt; 5 127.4312 36.33039\n#&gt; 6 127.4371 36.33588\n\n\n# 자료 추출 - 커피전문점\ndata.cafe &lt;- data.store %&gt;% subset(상권업종소분류명 =='카페')\n\n# 산점도 - ggplot()\nggplot() + geom_point(data = data.cafe, aes(x = 경도, y = 위도, colour = 시군구명))\n\n\n\n\n\n# 지도 표시\nggmap(krMap) + geom_point(data = data.cafe, aes(x = 경도, y = 위도, colour = 시군구명))\n#&gt; Warning: Removed 38 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\nggmap(krMap) + stat_density2d(data = data.cafe, aes(x = 경도, y = 위도))\n#&gt; Warning: Removed 38 rows containing non-finite values (`stat_density2d()`).\n\n\n\n\n\n\n\n\n# 밀도\nggmap(krMap) + \n  stat_density2d(data = data.cafe, aes(x = 경도, y = 위도),\n                 geom = 'polygon', alpha = 0.2)\n#&gt; Warning: Removed 38 rows containing non-finite values (`stat_density2d()`).\n\n\n\n\n# 밀도 + 색상\nggmap(krMap) + \n  stat_density2d(data = data.cafe,\n                 aes(x = 경도, y = 위도, fill = after_stat(level)),\n                 geom = 'polygon', alpha = 0.2) +\n  scale_fill_gradient(low = 'yellow', high = 'red')\n#&gt; Warning: Removed 38 rows containing non-finite values (`stat_density2d()`).\n\n\n\n\n\n\n\n\n파일 : 차량 주행궤적 데이터\n\n\ndata.file &lt;- 'data/차량 주행궤적 데이터.csv'\ndata.line &lt;- read.csv(data.file, header = T, fileEncoding = 'CP949')\ndata.line$차량.ID &lt;- factor(data.line$차량.ID)\nhead(data.line)\n#&gt;   프레임.인덱스 차량.ID     위도     경도 East..TM.좌표. North..TM.좌표. 차선\n#&gt; 1          2777     127 36.46245 127.2764       224774.5        429395.6    1\n#&gt; 2          2778     127 36.46244 127.2764       224775.6        429394.3    1\n#&gt; 3          2779     127 36.46243 127.2764       224776.8        429392.9    1\n#&gt; 4          2780     127 36.46242 127.2764       224777.9        429391.6    1\n#&gt; 5          2781     127 36.46241 127.2764       224779.0        429390.2    1\n#&gt; 6          2782     127 36.46239 127.2765       224780.2        429388.9    1\n#&gt;   차선변경여부\n#&gt; 1            0\n#&gt; 2            0\n#&gt; 3            0\n#&gt; 4            0\n#&gt; 5            0\n#&gt; 6            0\n\n# 선 그림 - ggplot()\nggplot() + geom_line(data = data.line, aes(x = 경도, y = 위도, colour = 차량.ID))\n\n\n\n\n# 지도 다운로드\nkrMap &lt;- get_map(fn_lon_lat_box(127.30, 36.42, 6), source = 'stamen')\n#&gt; ℹ Map tiles by Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under ODbL.\n\n# 선 표시\nggmap(krMap) + geom_path(data = data.line, aes(x = 경도, y = 위도, colour = 차량.ID), size = 2)\n#&gt; Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#&gt; ℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\nterrain\nterrain-background\ntoner\nwatercolor\nterrain-labels\nterrain-lines\ntoner-2010\ntoner-2011\ntoner-background\ntoner-hybrid\ntoner-labels\ntoner-lines\ntoner-lite"
  },
  {
    "objectID": "Data_Visualization/Map_in_R.html#상가상권정보---대전",
    "href": "Data_Visualization/Map_in_R.html#상가상권정보---대전",
    "title": "Map in R",
    "section": "",
    "text": "파일 : 소상공인시장진흥공단_상가(상권)정보_대전_202303.csv\n\n\n# Data\nstore.file &lt;- './data/소상공인시장진흥공단_상가(상권)정보_대전_202303.csv'\ndata.store &lt;- read.csv(store.file, header = T, fileEncoding = 'UTF-8')\ndata.store %&gt;% head()\n#&gt;           상가업소번호       상호명 지점명 상권업종대분류코드 상권업종대분류명\n#&gt; 1 MA0101202210A0068117     줄또웰빙                        G2             소매\n#&gt; 2 MA0101202210A0090669   개성칼국수                        I2             음식\n#&gt; 3 MA010120220805430751     엘모바일                        G2             소매\n#&gt; 4 MA010120220805431091     정성약국                        G2             소매\n#&gt; 5 MA010120220805431125 다비치안경원                        G2             소매\n#&gt; 6 MA010120220805431202     베리도넛                        I2             음식\n#&gt;   상권업종중분류코드    상권업종중분류명 상권업종소분류코드    상권업종소분류명\n#&gt; 1               G205         식료품 소매             G20508 건강보조식품 소매업\n#&gt; 2               I201                한식             I20105         국수/칼국수\n#&gt; 3               G208     가전·통신 소매             G20802       핸드폰 소매업\n#&gt; 4               G215   의약·화장품 소매             G21501                약국\n#&gt; 5               G216 안경·정밀기기 소매             G21602     안경렌즈 소매업\n#&gt; 6               I210           기타 간이             I21001             빵/도넛\n#&gt;   표준산업분류코드            표준산업분류명 시도코드     시도명 시군구코드\n#&gt; 1           G47217      건강 보조식품 소매업       30 대전광역시      30110\n#&gt; 2           I56112       한식 면 요리 전문점       30 대전광역시      30140\n#&gt; 3           G47312           통신기기 소매업       30 대전광역시      30170\n#&gt; 4           G47811 의약품 및 의료용품 소매업       30 대전광역시      30140\n#&gt; 5           G47822       안경 및 렌즈 소매업       30 대전광역시      30110\n#&gt; 6           I56191                  제과점업       30 대전광역시      30110\n#&gt;   시군구명 행정동코드 행정동명 법정동코드 법정동명     지번코드 대지구분코드\n#&gt; 1     동구   30110640   용전동 3011011500   용전동 3.011012e+18            1\n#&gt; 2     중구   30140550     목동 3014010300     목동 3.014010e+18            1\n#&gt; 3     서구   30170640  둔산2동 3017011200   둔산동 3.017011e+18            1\n#&gt; 4     중구   30140710  유천2동 3014011500   유천동 3.014012e+18            1\n#&gt; 5     동구   30110515   중앙동 3011012000     중동 3.011012e+18            1\n#&gt; 6     동구   30110515   중앙동 3011011300   소제동 3.011011e+18            1\n#&gt;   대지구분명 지번본번지 지번부번지                      지번주소   도로명코드\n#&gt; 1       대지        145          5  대전광역시 동구 용전동 145-5 301102010003\n#&gt; 2       대지         14          2     대전광역시 중구 목동 14-2 301404295276\n#&gt; 3       대지        970         NA    대전광역시 서구 둔산동 970 301703166019\n#&gt; 4       대지        185          1  대전광역시 중구 유천동 185-1 301403000095\n#&gt; 5       대지         92          1     대전광역시 동구 중동 92-1 301103164033\n#&gt; 6       대지        299         86 대전광역시 동구 소제동 299-86 301104292381\n#&gt;                         도로명 건물본번지 건물부번지 건물관리번호     건물명\n#&gt; 1     대전광역시 동구 동서대로       1641         NA 3.011012e+24   아남빌딩\n#&gt; 2 대전광역시 중구 목중로19번길          7         NA 3.014010e+24           \n#&gt; 3       대전광역시 서구 둔산로         15         NA 3.017011e+24 향촌아파트\n#&gt; 4       대전광역시 중구 계백로       1600         NA 3.014012e+24           \n#&gt; 5       대전광역시 동구 중앙로        198         NA 3.011012e+24           \n#&gt; 6       대전광역시 동구 수향길         97         NA 3.011011e+24           \n#&gt;                       도로명주소 구우편번호 신우편번호 동정보 층정보 호정보\n#&gt; 1  대전광역시 동구 동서대로 1641     300726      34552     NA      8     NA\n#&gt; 2 대전광역시 중구 목중로19번길 7     301808      34815     NA            NA\n#&gt; 3      대전광역시 서구 둔산로 15     302776      35228     NA            NA\n#&gt; 4    대전광역시 중구 계백로 1600     301833      34966     NA            NA\n#&gt; 5     대전광역시 동구 중앙로 198     300160      34628     NA      1     NA\n#&gt; 6      대전광역시 동구 수향길 97     300080      34615     NA            NA\n#&gt;       경도     위도\n#&gt; 1 127.4327 36.34809\n#&gt; 2 127.4113 36.33558\n#&gt; 3 127.3763 36.35323\n#&gt; 4 127.3979 36.31822\n#&gt; 5 127.4312 36.33039\n#&gt; 6 127.4371 36.33588\n\n\n# 자료 추출 - 커피전문점\ndata.cafe &lt;- data.store %&gt;% subset(상권업종소분류명 =='카페')\n\n# 산점도 - ggplot()\nggplot() + geom_point(data = data.cafe, aes(x = 경도, y = 위도, colour = 시군구명))\n\n\n\n\n\n# 지도 표시\nggmap(krMap) + geom_point(data = data.cafe, aes(x = 경도, y = 위도, colour = 시군구명))\n#&gt; Warning: Removed 38 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\nggmap(krMap) + stat_density2d(data = data.cafe, aes(x = 경도, y = 위도))\n#&gt; Warning: Removed 38 rows containing non-finite values (`stat_density2d()`).\n\n\n\n\n\n\n\n\n# 밀도\nggmap(krMap) + \n  stat_density2d(data = data.cafe, aes(x = 경도, y = 위도),\n                 geom = 'polygon', alpha = 0.2)\n#&gt; Warning: Removed 38 rows containing non-finite values (`stat_density2d()`).\n\n\n\n\n# 밀도 + 색상\nggmap(krMap) + \n  stat_density2d(data = data.cafe,\n                 aes(x = 경도, y = 위도, fill = after_stat(level)),\n                 geom = 'polygon', alpha = 0.2) +\n  scale_fill_gradient(low = 'yellow', high = 'red')\n#&gt; Warning: Removed 38 rows containing non-finite values (`stat_density2d()`).\n\n\n\n\n\n\n\n\n파일 : 차량 주행궤적 데이터\n\n\ndata.file &lt;- 'data/차량 주행궤적 데이터.csv'\ndata.line &lt;- read.csv(data.file, header = T, fileEncoding = 'CP949')\ndata.line$차량.ID &lt;- factor(data.line$차량.ID)\nhead(data.line)\n#&gt;   프레임.인덱스 차량.ID     위도     경도 East..TM.좌표. North..TM.좌표. 차선\n#&gt; 1          2777     127 36.46245 127.2764       224774.5        429395.6    1\n#&gt; 2          2778     127 36.46244 127.2764       224775.6        429394.3    1\n#&gt; 3          2779     127 36.46243 127.2764       224776.8        429392.9    1\n#&gt; 4          2780     127 36.46242 127.2764       224777.9        429391.6    1\n#&gt; 5          2781     127 36.46241 127.2764       224779.0        429390.2    1\n#&gt; 6          2782     127 36.46239 127.2765       224780.2        429388.9    1\n#&gt;   차선변경여부\n#&gt; 1            0\n#&gt; 2            0\n#&gt; 3            0\n#&gt; 4            0\n#&gt; 5            0\n#&gt; 6            0\n\n# 선 그림 - ggplot()\nggplot() + geom_line(data = data.line, aes(x = 경도, y = 위도, colour = 차량.ID))\n\n\n\n\n# 지도 다운로드\nkrMap &lt;- get_map(fn_lon_lat_box(127.30, 36.42, 6), source = 'stamen')\n#&gt; ℹ Map tiles by Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under ODbL.\n\n# 선 표시\nggmap(krMap) + geom_path(data = data.line, aes(x = 경도, y = 위도, colour = 차량.ID), size = 2)\n#&gt; Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#&gt; ℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\nterrain\nterrain-background\ntoner\nwatercolor\nterrain-labels\nterrain-lines\ntoner-2010\ntoner-2011\ntoner-background\ntoner-hybrid\ntoner-labels\ntoner-lines\ntoner-lite"
  },
  {
    "objectID": "Data_Visualization/week10_QQplot.html",
    "href": "Data_Visualization/week10_QQplot.html",
    "title": "QQplot",
    "section": "",
    "text": "# Data\nset.seed(4211)\npoints = round(c(rnorm(47, mean = 82, sd = 10), 45, 51, 67))\npoints[points &gt; 100] &lt;- 100\n\nstudent_data &lt;- data.frame(points, rank = rank(points, ties.method = 'random'))\n\nggplot(student_data, aes(x = points, y = 50 * after_stat(y))) +\n  stat_ecdf(geom = 'step', color = '#0072B2') +\n  geom_point(aes(y = rank), color = '#0072B2') +\n  scale_x_continuous(limits = c(40, 102),\n                     expand = c(0, 0),\n                     breaks = (4:10) * 10) +\n  scale_y_continuous(limits = c(-.5, 55),\n                     expand = c(0, 0),\n                     name = 'Student Rank (Ascending)') +\n  theme_minimal()\n\n\n\n\n\n\n\n\nggplot(student_data, aes (x = points, y = 51 - 50 * after_stat(y))) +\n  stat_ecdf(geom = 'step', color = '#007282') +\n  geom_point(aes(y = 51 - rank), color = '#007282') +\n  scale_x_continuous(limits = c(40, 102),\n                     expand = c(0, 0),\n                     breaks = (4:10) * 10) +\n  scale_y_continuous(limits = c(-.5, 55),\n                     expand = c(0, 0),\n                     name = 'Student Rank (Ascending)') +\n  theme_minimal()\n\n\n\n\n\n\n\n\nggplot(student_data, aes(x = points, y = after_stat(y))) +\n  stat_ecdf(geom = 'step', color = '#087282', linewidth = 0.75) +\n  scale_x_continuous(limits  = c(40, 102),\n                     expand = c(0, 0),\n                     breaks = (4:10) * 10) +\n  scale_y_continuous(limits = c(-.01, 1.01),\n                     expand = c(0, 0),\n                     name = 'Cumulative Frequency') +\n  theme_minimal()"
  },
  {
    "objectID": "Data_Visualization/week10_QQplot.html#empirical-cumulative-distribution-functions---경험적-누적-분포-함수",
    "href": "Data_Visualization/week10_QQplot.html#empirical-cumulative-distribution-functions---경험적-누적-분포-함수",
    "title": "QQplot",
    "section": "",
    "text": "# Data\nset.seed(4211)\npoints = round(c(rnorm(47, mean = 82, sd = 10), 45, 51, 67))\npoints[points &gt; 100] &lt;- 100\n\nstudent_data &lt;- data.frame(points, rank = rank(points, ties.method = 'random'))\n\nggplot(student_data, aes(x = points, y = 50 * after_stat(y))) +\n  stat_ecdf(geom = 'step', color = '#0072B2') +\n  geom_point(aes(y = rank), color = '#0072B2') +\n  scale_x_continuous(limits = c(40, 102),\n                     expand = c(0, 0),\n                     breaks = (4:10) * 10) +\n  scale_y_continuous(limits = c(-.5, 55),\n                     expand = c(0, 0),\n                     name = 'Student Rank (Ascending)') +\n  theme_minimal()\n\n\n\n\n\n\n\n\nggplot(student_data, aes (x = points, y = 51 - 50 * after_stat(y))) +\n  stat_ecdf(geom = 'step', color = '#007282') +\n  geom_point(aes(y = 51 - rank), color = '#007282') +\n  scale_x_continuous(limits = c(40, 102),\n                     expand = c(0, 0),\n                     breaks = (4:10) * 10) +\n  scale_y_continuous(limits = c(-.5, 55),\n                     expand = c(0, 0),\n                     name = 'Student Rank (Ascending)') +\n  theme_minimal()\n\n\n\n\n\n\n\n\nggplot(student_data, aes(x = points, y = after_stat(y))) +\n  stat_ecdf(geom = 'step', color = '#087282', linewidth = 0.75) +\n  scale_x_continuous(limits  = c(40, 102),\n                     expand = c(0, 0),\n                     breaks = (4:10) * 10) +\n  scale_y_continuous(limits = c(-.01, 1.01),\n                     expand = c(0, 0),\n                     name = 'Cumulative Frequency') +\n  theme_minimal()"
  },
  {
    "objectID": "Data_Visualization/week12_Visualizing_proportions.html",
    "href": "Data_Visualization/week12_Visualizing_proportions.html",
    "title": "Visualizing proportions",
    "section": "",
    "text": "# Data\nbundestag &lt;- read.csv('./data/bundestag.csv')\nbundestag$party\n#&gt; [1] \"CDU/CSU\" \"SPD\"     \"FDP\"\n\n# 시작: 12시, 시계 방향, 색상\nbund_pie &lt;- bundestag %&gt;%\n  arrange(seats) %&gt;%\n  mutate(party_fac = factor(party, levels = party[order(seats)]),\n         value = seats,\n         ypos = sum(value) - (cumsum(value) - 0.5 * value), \n         mid_angle = 2 * pi * (ypos / sum(value)),\n         hjust = ifelse(mid_angle &lt; pi, 1, 0),\n         vjust = ifelse(mid_angle &lt; pi, mid_angle / pi, 2 - mid_angle / pi))\n\n# Visualization\nggplot(bund_pie, aes(x = '', y = seats, fill = party_fac)) +\n  geom_bar(stat = 'identity') +\n  geom_text(aes(x = 1, y = ypos, label = seats), color = 'white', size = 5) +\n  geom_text(aes(x = 1.5, y = ypos, label = party, hjust = hjust, vjust = vjust), color = 'black', size = 5) +\n  coord_polar(theta = 'y', start = 0, direction = -1, clip = 'off') + \n  scale_fill_manual(values = bund_pie$colors) +\n  theme_void() +\n  theme(legend.position = 'none')\n\n\n\n\n\n# Figure 10.1 - Label + %\nbund_pie &lt;- bundestag %&gt;%\n  arrange(seats) %&gt;%\n  mutate(party_fac = factor(party, levels = party[order(seats)]),\n         value = seats,\n         labs = paste(party, '\\n', round(value / sum(value) * 100, 0), '%', sep = ''),\n         ypos = sum(value) - (cumsum(value) - 0.5 * value),\n         mid_angle = 2 * pi * (ypos / sum(value)),\n         hjust = ifelse(mid_angle &lt; pi, 1, 0),\n         vjust = ifelse(mid_angle &lt; pi, mid_angle / pi, 2 - mid_angle / pi))\n\n# Visualization\nggplot(bund_pie, aes(x = '', y = seats, fill = party_fac)) +\n  geom_bar(stat = 'identity', color = 'white') +\n  geom_text(aes(x = 1, y = ypos, label = labs), size = 4) +\n  coord_polar(theta = 'y', start = 0, direction = -1, clip = 'off') +\n  scale_fill_brewer(palette = 'Set1') +\n  theme_void() +\n  theme(legend.position = 'none')\n\n\n\n\n\n\n\n\nbundestag %&gt;% mutate(party = factor(party, levels = party)) %&gt;%\n  ggplot(aes(x = party, y = seats, fill = party)) +\n  geom_col() +\n  geom_text(aes(label = seats), size = 5, vjust = 2, color = c('white', 'white', 'black')) +\n  scale_x_discrete(name = NULL) +\n  scale_y_continuous(expand = c(0, 0)) +\n  scale_fill_manual(values = bundestag$colors, guide = 'none') + \n  theme_light() +\n  theme(panel.border = element_blank(), \n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(), \n        panel.grid.minor.y = element_blank(), \n        axis.ticks.x = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n# Data\nmarketshare &lt;- read.csv('./data/marketshare.csv')\n\n# Visualization\nggplot(marketshare, aes(x = company, y = percent, fill = company)) +\n  geom_col() +\n  facet_wrap(~year) +\n  scale_y_continuous(name = 'Market Share',\n                     labels = scales::percent_format(scale = 1),\n                     expand = c(0, 0)) +\n  scale_fill_brewer(palette='Set2', guide = 'none') +\n  theme_classic() +\n  theme(strip.background = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n# Data\nwomen_parliaments &lt;- read.csv('./data/women_parliaments.csv')\nwomen_parliaments %&gt;% sapply(class)\n#&gt;      country country_code         year   perc_women \n#&gt;  \"character\"  \"character\"    \"integer\"    \"numeric\"\n\nwomen_rwanda &lt;- women_parliaments %&gt;%\n  filter(country_code == 'RWA' & year &gt; 1990) %&gt;%\n  mutate(women = perc_women,\n         men = 100 - perc_women) %&gt;%\n  select(-perc_women) %&gt;%\n  tidyr::gather(key = 'gender', value = 'percent', women, men) %&gt;%\n  mutate(gender = factor(gender, levels = c('women', 'men')))\n\n# Visualization\nplot_base &lt;- ggplot(women_rwanda, aes(x = year, y = percent, fill = gender)) +\n  geom_col(position = 'stack', width = 1, color = '#FFFFFF',\n           linewidth = .75, alpha = .8) +\n  geom_hline(yintercept = 50, color = '#000000FF',\n             linewidth = .4, linetype = 2) +\n  geom_hline(yintercept = 100, color = 'black') +\n  scale_x_continuous(expand = c(0, 0)) +\n  scale_y_continuous(name = 'Relative Proportion',\n                     labels = scales::percent_format(scale = 1),\n                     expand = c(0, 0)) +\n  scale_fill_manual(values = c('#D55E00E0', '#0072B2E0'), guide = 'none') +\n  theme_classic() +\n  theme(axis.line.y = element_blank())\n\nplot_base\n\n\n\n\n\n# calculate label position\nlabels &lt;- filter(women_rwanda, year == max(year)) %&gt;%\n  mutate(pos = 100 - cumsum(percent) + 0.5 * percent)\n\nyax &lt;- axis_canvas(plot_base, axis = 'y') +\n  geom_text(data = labels, aes(y = pos, label = paste0(' ', gender)),\n            x = 0, hjust = 0, size = 14/.pt)\n\nggdraw(insert_yaxis_grob(plot_base, yax, grid::unit(.15, 'null')))\n\n\n\n\n\n\n\n\n\n\n\n# Data\nhappy &lt;- read.csv('./data/happy.csv')\nhappy %&gt;% sapply(class)\n#&gt;          id       happy        year         age         sex     marital \n#&gt;   \"integer\" \"character\"   \"integer\"   \"integer\" \"character\" \"character\" \n#&gt;      degree     finrela      health     wtssall \n#&gt; \"character\" \"character\" \"character\"   \"numeric\"\n\ndf_marital &lt;- select(happy, age, marital) %&gt;%\n  na.omit() %&gt;%\n  filter(marital != 'separated') %&gt;%\n  mutate(marital = factor(marital, levels = c('widowed', 'divorced', 'married', 'never married')))\n\n# Visualization\n\n# color brewer 5-class PuBu\ncolors &lt;- RColorBrewer::brewer.pal(5, 'PuBu')[5:1]\n\nggplot(df_marital, aes(x = age, y = after_stat(count),\n                       fill = marital, color = marital)) +\n  geom_density(position = 'fill') +\n  scale_x_continuous(name = 'Age (years)', expand = c(0, 0)) +\n  scale_y_continuous(name = 'Relative Proportion',\n                     labels = scales::percent, expand = c(0, 0)) +\n  scale_color_manual(values = colors, name = 'Marital Status') +\n  scale_fill_manual(values = colors, name = 'Marital Status') +\n  theme_classic() +\n  theme(axis.line.x = element_blank(),\n        axis.line.y = element_blank())\n\n\n\n\n\n\n\n\ndf_marital %&gt;%\n  mutate(marital = forcats::fct_rev(marital)) %&gt;%\n  ggplot(aes(x = age, y = after_stat(count))) +\n  geom_density(data = select(df_marital, -marital),\n               aes(fill = 'All People Surveyed  '), color = 'transparent') +\n  geom_density(aes(fill = 'Highlighted Group'), color = 'transparent') +\n  facet_wrap(~marital, nrow = 1) +\n  scale_x_continuous(name = 'Age (years)', limits = c(15, 98), expand =c(0, 0)) +\n  scale_y_continuous(name = 'Count', expand = c(0, 0)) +\n  scale_fill_manual(values = c('#b3b3b3a0', '#2b8cbed0'),\n                    name = NULL,\n                    guide = guide_legend(direction = 'horizontal')) +\n  theme_classic() +\n  theme(panel.grid.major.y = element_line(colour = '#b3b3b3'),\n        axis.line.x = element_blank(),\n        axis.line.y = element_blank(),\n        strip.background = element_blank(),\n        strip.text = element_text(size = 14),\n        legend.position = 'bottom',\n        legend.justification = 'right')"
  },
  {
    "objectID": "Data_Visualization/week12_Visualizing_proportions.html#a-case-for-pie-charts---파이-차트",
    "href": "Data_Visualization/week12_Visualizing_proportions.html#a-case-for-pie-charts---파이-차트",
    "title": "Visualizing proportions",
    "section": "",
    "text": "# Data\nbundestag &lt;- read.csv('./data/bundestag.csv')\nbundestag$party\n#&gt; [1] \"CDU/CSU\" \"SPD\"     \"FDP\"\n\n# 시작: 12시, 시계 방향, 색상\nbund_pie &lt;- bundestag %&gt;%\n  arrange(seats) %&gt;%\n  mutate(party_fac = factor(party, levels = party[order(seats)]),\n         value = seats,\n         ypos = sum(value) - (cumsum(value) - 0.5 * value), \n         mid_angle = 2 * pi * (ypos / sum(value)),\n         hjust = ifelse(mid_angle &lt; pi, 1, 0),\n         vjust = ifelse(mid_angle &lt; pi, mid_angle / pi, 2 - mid_angle / pi))\n\n# Visualization\nggplot(bund_pie, aes(x = '', y = seats, fill = party_fac)) +\n  geom_bar(stat = 'identity') +\n  geom_text(aes(x = 1, y = ypos, label = seats), color = 'white', size = 5) +\n  geom_text(aes(x = 1.5, y = ypos, label = party, hjust = hjust, vjust = vjust), color = 'black', size = 5) +\n  coord_polar(theta = 'y', start = 0, direction = -1, clip = 'off') + \n  scale_fill_manual(values = bund_pie$colors) +\n  theme_void() +\n  theme(legend.position = 'none')\n\n\n\n\n\n# Figure 10.1 - Label + %\nbund_pie &lt;- bundestag %&gt;%\n  arrange(seats) %&gt;%\n  mutate(party_fac = factor(party, levels = party[order(seats)]),\n         value = seats,\n         labs = paste(party, '\\n', round(value / sum(value) * 100, 0), '%', sep = ''),\n         ypos = sum(value) - (cumsum(value) - 0.5 * value),\n         mid_angle = 2 * pi * (ypos / sum(value)),\n         hjust = ifelse(mid_angle &lt; pi, 1, 0),\n         vjust = ifelse(mid_angle &lt; pi, mid_angle / pi, 2 - mid_angle / pi))\n\n# Visualization\nggplot(bund_pie, aes(x = '', y = seats, fill = party_fac)) +\n  geom_bar(stat = 'identity', color = 'white') +\n  geom_text(aes(x = 1, y = ypos, label = labs), size = 4) +\n  coord_polar(theta = 'y', start = 0, direction = -1, clip = 'off') +\n  scale_fill_brewer(palette = 'Set1') +\n  theme_void() +\n  theme(legend.position = 'none')\n\n\n\n\n\n\n\n\nbundestag %&gt;% mutate(party = factor(party, levels = party)) %&gt;%\n  ggplot(aes(x = party, y = seats, fill = party)) +\n  geom_col() +\n  geom_text(aes(label = seats), size = 5, vjust = 2, color = c('white', 'white', 'black')) +\n  scale_x_discrete(name = NULL) +\n  scale_y_continuous(expand = c(0, 0)) +\n  scale_fill_manual(values = bundestag$colors, guide = 'none') + \n  theme_light() +\n  theme(panel.border = element_blank(), \n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(), \n        panel.grid.minor.y = element_blank(), \n        axis.ticks.x = element_blank())"
  },
  {
    "objectID": "Data_Visualization/week12_Visualizing_proportions.html#a-case-for-side-by-side-bars---병렬-막대-도표",
    "href": "Data_Visualization/week12_Visualizing_proportions.html#a-case-for-side-by-side-bars---병렬-막대-도표",
    "title": "Visualizing proportions",
    "section": "",
    "text": "# Data\nmarketshare &lt;- read.csv('./data/marketshare.csv')\n\n# Visualization\nggplot(marketshare, aes(x = company, y = percent, fill = company)) +\n  geom_col() +\n  facet_wrap(~year) +\n  scale_y_continuous(name = 'Market Share',\n                     labels = scales::percent_format(scale = 1),\n                     expand = c(0, 0)) +\n  scale_fill_brewer(palette='Set2', guide = 'none') +\n  theme_classic() +\n  theme(strip.background = element_blank())"
  },
  {
    "objectID": "Data_Visualization/week12_Visualizing_proportions.html#a-case-for-stacked-bars-and-stacked-densities---누적-막대와-누적-밀도-도표",
    "href": "Data_Visualization/week12_Visualizing_proportions.html#a-case-for-stacked-bars-and-stacked-densities---누적-막대와-누적-밀도-도표",
    "title": "Visualizing proportions",
    "section": "",
    "text": "# Data\nwomen_parliaments &lt;- read.csv('./data/women_parliaments.csv')\nwomen_parliaments %&gt;% sapply(class)\n#&gt;      country country_code         year   perc_women \n#&gt;  \"character\"  \"character\"    \"integer\"    \"numeric\"\n\nwomen_rwanda &lt;- women_parliaments %&gt;%\n  filter(country_code == 'RWA' & year &gt; 1990) %&gt;%\n  mutate(women = perc_women,\n         men = 100 - perc_women) %&gt;%\n  select(-perc_women) %&gt;%\n  tidyr::gather(key = 'gender', value = 'percent', women, men) %&gt;%\n  mutate(gender = factor(gender, levels = c('women', 'men')))\n\n# Visualization\nplot_base &lt;- ggplot(women_rwanda, aes(x = year, y = percent, fill = gender)) +\n  geom_col(position = 'stack', width = 1, color = '#FFFFFF',\n           linewidth = .75, alpha = .8) +\n  geom_hline(yintercept = 50, color = '#000000FF',\n             linewidth = .4, linetype = 2) +\n  geom_hline(yintercept = 100, color = 'black') +\n  scale_x_continuous(expand = c(0, 0)) +\n  scale_y_continuous(name = 'Relative Proportion',\n                     labels = scales::percent_format(scale = 1),\n                     expand = c(0, 0)) +\n  scale_fill_manual(values = c('#D55E00E0', '#0072B2E0'), guide = 'none') +\n  theme_classic() +\n  theme(axis.line.y = element_blank())\n\nplot_base\n\n\n\n\n\n# calculate label position\nlabels &lt;- filter(women_rwanda, year == max(year)) %&gt;%\n  mutate(pos = 100 - cumsum(percent) + 0.5 * percent)\n\nyax &lt;- axis_canvas(plot_base, axis = 'y') +\n  geom_text(data = labels, aes(y = pos, label = paste0(' ', gender)),\n            x = 0, hjust = 0, size = 14/.pt)\n\nggdraw(insert_yaxis_grob(plot_base, yax, grid::unit(.15, 'null')))"
  },
  {
    "objectID": "Data_Visualization/week12_Visualizing_proportions.html#visualizing-proportions-separately-as-parts-of-the-total---전체-대비-부분-비율의-표현",
    "href": "Data_Visualization/week12_Visualizing_proportions.html#visualizing-proportions-separately-as-parts-of-the-total---전체-대비-부분-비율의-표현",
    "title": "Visualizing proportions",
    "section": "",
    "text": "# Data\nhappy &lt;- read.csv('./data/happy.csv')\nhappy %&gt;% sapply(class)\n#&gt;          id       happy        year         age         sex     marital \n#&gt;   \"integer\" \"character\"   \"integer\"   \"integer\" \"character\" \"character\" \n#&gt;      degree     finrela      health     wtssall \n#&gt; \"character\" \"character\" \"character\"   \"numeric\"\n\ndf_marital &lt;- select(happy, age, marital) %&gt;%\n  na.omit() %&gt;%\n  filter(marital != 'separated') %&gt;%\n  mutate(marital = factor(marital, levels = c('widowed', 'divorced', 'married', 'never married')))\n\n# Visualization\n\n# color brewer 5-class PuBu\ncolors &lt;- RColorBrewer::brewer.pal(5, 'PuBu')[5:1]\n\nggplot(df_marital, aes(x = age, y = after_stat(count),\n                       fill = marital, color = marital)) +\n  geom_density(position = 'fill') +\n  scale_x_continuous(name = 'Age (years)', expand = c(0, 0)) +\n  scale_y_continuous(name = 'Relative Proportion',\n                     labels = scales::percent, expand = c(0, 0)) +\n  scale_color_manual(values = colors, name = 'Marital Status') +\n  scale_fill_manual(values = colors, name = 'Marital Status') +\n  theme_classic() +\n  theme(axis.line.x = element_blank(),\n        axis.line.y = element_blank())\n\n\n\n\n\n\n\n\ndf_marital %&gt;%\n  mutate(marital = forcats::fct_rev(marital)) %&gt;%\n  ggplot(aes(x = age, y = after_stat(count))) +\n  geom_density(data = select(df_marital, -marital),\n               aes(fill = 'All People Surveyed  '), color = 'transparent') +\n  geom_density(aes(fill = 'Highlighted Group'), color = 'transparent') +\n  facet_wrap(~marital, nrow = 1) +\n  scale_x_continuous(name = 'Age (years)', limits = c(15, 98), expand =c(0, 0)) +\n  scale_y_continuous(name = 'Count', expand = c(0, 0)) +\n  scale_fill_manual(values = c('#b3b3b3a0', '#2b8cbed0'),\n                    name = NULL,\n                    guide = guide_legend(direction = 'horizontal')) +\n  theme_classic() +\n  theme(panel.grid.major.y = element_line(colour = '#b3b3b3'),\n        axis.line.x = element_blank(),\n        axis.line.y = element_blank(),\n        strip.background = element_blank(),\n        strip.text = element_text(size = 14),\n        legend.position = 'bottom',\n        legend.justification = 'right')"
  },
  {
    "objectID": "Data_Visualization/week14_Visualizing_Association.html",
    "href": "Data_Visualization/week14_Visualizing_Association.html",
    "title": "Visualizing Associations among two or more Quantitative Variables",
    "section": "",
    "text": "# Data\nblue_jays &lt;- read.csv('./data/blue_jays.csv')\nblue_jays$KnownSex &lt;- factor(blue_jays$KnownSex, levels = c('F', 'M'))\nblue_jays %&gt;% sapply(class)\n#&gt;      BirdID    KnownSex   BillDepth   BillWidth  BillLength        Head \n#&gt; \"character\"    \"factor\"   \"numeric\"   \"numeric\"   \"numeric\"   \"numeric\" \n#&gt;        Mass       Skull         Sex \n#&gt;   \"numeric\"   \"numeric\"   \"integer\"\nblue_jays %&gt;% head()\n#&gt;       BirdID KnownSex BillDepth BillWidth BillLength  Head  Mass Skull Sex\n#&gt; 1 0000-00000        M      8.26      9.21      25.92 56.58 73.30 30.66   1\n#&gt; 2 1142-05901        M      8.54      8.76      24.99 56.36 75.10 31.38   1\n#&gt; 3 1142-05905        M      8.39      8.78      26.07 57.32 70.25 31.25   1\n#&gt; 4 1142-05907        F      7.78      9.30      23.48 53.77 65.50 30.29   0\n#&gt; 5 1142-05909        M      8.71      9.84      25.47 57.32 74.90 31.85   1\n#&gt; 6 1142-05911        F      7.28      9.30      22.25 52.25 63.90 30.00   0\n\nggplot(blue_jays, aes(Mass, Head)) +\n  geom_point(pch = 21, fill= 'gray25', color = 'white', size = 3) +\n  xlab('Body Mass (g)') +\n  ylab('Head Length (mm)') +\n  theme_minimal()\n\n\n\n\n\n\n\n\nggplot(blue_jays, aes(Mass, Head, fill = KnownSex))  +\n  geom_point(pch = 21, color = 'white', size = 3) +\n  xlab('Body Mass (g)') +\n  ylab('Head Length (mm)') +\n  scale_fill_manual(values = c(F = '#D55E00', M = '#007282'),\n                    breaks = c('F', 'M'),\n                    labels = c('Female Birds   ', 'Male Birds'),\n                    name = NULL,\n                    guide = guide_legend(direction = 'horizontal')) +\n  theme_minimal() +\n  theme(legend.position = 'top',\n        legend.justification = 'right')\n\n\n\n\n\n\n\n\nblue_jays$sex &lt;- ifelse(blue_jays$KnownSex == 'F', 'Female Birds', 'Male Birds')\nblue_jays$sex &lt;- factor(blue_jays$sex, levels = c('Female Birds', 'Male Birds'))\n\nggplot(blue_jays, aes(Mass, Head, size = Skull, fill = KnownSex)) +\n  geom_point(pch = 21, color = 'white') +\n  facet_wrap(~sex) +\n  xlab('Body Mass (g)') +\n  ylab('Head Length (mm)') +\n  scale_fill_manual(values = c(F = '#D55E00', M = '#007282'), guide = 'none') +\n  scale_radius(name = 'Skull Size (mm)', range = c(2, 7), \n               limits = c(28, 34), breaks = c(28, 30, 32, 34),\n               guide = guide_legend(override.aes = list(fill = 'gray40'))) +\n  theme_minimal() +\n  theme(strip.background = element_rect(fill = 'grey85', colour = 'grey85',\n                                        linetype = 1, size = 0.25))\n#&gt; Warning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\n#&gt; ℹ Please use the `linewidth` argument instead.\n\n\n\n\n\n\n\n\nggpairs(blue_jays, columns = 6:8, aes(color = sex)) +\n  theme_light()\n\n\n\n\n\n\n\n\nload('./data/forensic_glass.rda')\nforensic_glass %&gt;% select(-type, -RI, -Si) %&gt;%\n  ggcorr(palette = 'RdBu', label = TRUE)\n\n\n\n\n\n\n\n\n\n\n\nload('./data/CO2_emissions.rda')\n\nemissions_1970_2010 &lt;- CO2_emissions %&gt;% filter(year %in% c(1970, 2010)) %&gt;% \n  tidyr::spread(year, emissions) %&gt;% \n  na.omit()\n\nggplot(emissions_1970_2010, aes(`1970`, `2010`)) +\n  geom_abline(slope = 1, color = 'grey') +\n  geom_point(pch = 21, fill = '#0072B2D0', color = 'white', size = 3) +\n  scale_x_log10(limits = c(0.008, 125),\n                breaks = c(0.01, 0.1, 1, 10, 100),\n                labels = c('0.01', '0.1', '1.0', '10', '180'),\n                name = parse(text = '`1970 CO`[2]*` emissions (tons / person)`')) +\n  scale_y_log10(limits = c(0.008, 125),\n                breaks = c(0.01, 0.1, 1, 10, 100),\n                labels = c('0.01', '0.1', '1.0', '16', '100'),\n                name = parse(text = '`2010 Co`[2]*` emissions (tons / person)`')) +\n  theme_classic()"
  },
  {
    "objectID": "Data_Visualization/week14_Visualizing_Association.html#scatter-plots---산점도",
    "href": "Data_Visualization/week14_Visualizing_Association.html#scatter-plots---산점도",
    "title": "Visualizing Associations among two or more Quantitative Variables",
    "section": "",
    "text": "# Data\nblue_jays &lt;- read.csv('./data/blue_jays.csv')\nblue_jays$KnownSex &lt;- factor(blue_jays$KnownSex, levels = c('F', 'M'))\nblue_jays %&gt;% sapply(class)\n#&gt;      BirdID    KnownSex   BillDepth   BillWidth  BillLength        Head \n#&gt; \"character\"    \"factor\"   \"numeric\"   \"numeric\"   \"numeric\"   \"numeric\" \n#&gt;        Mass       Skull         Sex \n#&gt;   \"numeric\"   \"numeric\"   \"integer\"\nblue_jays %&gt;% head()\n#&gt;       BirdID KnownSex BillDepth BillWidth BillLength  Head  Mass Skull Sex\n#&gt; 1 0000-00000        M      8.26      9.21      25.92 56.58 73.30 30.66   1\n#&gt; 2 1142-05901        M      8.54      8.76      24.99 56.36 75.10 31.38   1\n#&gt; 3 1142-05905        M      8.39      8.78      26.07 57.32 70.25 31.25   1\n#&gt; 4 1142-05907        F      7.78      9.30      23.48 53.77 65.50 30.29   0\n#&gt; 5 1142-05909        M      8.71      9.84      25.47 57.32 74.90 31.85   1\n#&gt; 6 1142-05911        F      7.28      9.30      22.25 52.25 63.90 30.00   0\n\nggplot(blue_jays, aes(Mass, Head)) +\n  geom_point(pch = 21, fill= 'gray25', color = 'white', size = 3) +\n  xlab('Body Mass (g)') +\n  ylab('Head Length (mm)') +\n  theme_minimal()\n\n\n\n\n\n\n\n\nggplot(blue_jays, aes(Mass, Head, fill = KnownSex))  +\n  geom_point(pch = 21, color = 'white', size = 3) +\n  xlab('Body Mass (g)') +\n  ylab('Head Length (mm)') +\n  scale_fill_manual(values = c(F = '#D55E00', M = '#007282'),\n                    breaks = c('F', 'M'),\n                    labels = c('Female Birds   ', 'Male Birds'),\n                    name = NULL,\n                    guide = guide_legend(direction = 'horizontal')) +\n  theme_minimal() +\n  theme(legend.position = 'top',\n        legend.justification = 'right')\n\n\n\n\n\n\n\n\nblue_jays$sex &lt;- ifelse(blue_jays$KnownSex == 'F', 'Female Birds', 'Male Birds')\nblue_jays$sex &lt;- factor(blue_jays$sex, levels = c('Female Birds', 'Male Birds'))\n\nggplot(blue_jays, aes(Mass, Head, size = Skull, fill = KnownSex)) +\n  geom_point(pch = 21, color = 'white') +\n  facet_wrap(~sex) +\n  xlab('Body Mass (g)') +\n  ylab('Head Length (mm)') +\n  scale_fill_manual(values = c(F = '#D55E00', M = '#007282'), guide = 'none') +\n  scale_radius(name = 'Skull Size (mm)', range = c(2, 7), \n               limits = c(28, 34), breaks = c(28, 30, 32, 34),\n               guide = guide_legend(override.aes = list(fill = 'gray40'))) +\n  theme_minimal() +\n  theme(strip.background = element_rect(fill = 'grey85', colour = 'grey85',\n                                        linetype = 1, size = 0.25))\n#&gt; Warning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\n#&gt; ℹ Please use the `linewidth` argument instead.\n\n\n\n\n\n\n\n\nggpairs(blue_jays, columns = 6:8, aes(color = sex)) +\n  theme_light()\n\n\n\n\n\n\n\n\nload('./data/forensic_glass.rda')\nforensic_glass %&gt;% select(-type, -RI, -Si) %&gt;%\n  ggcorr(palette = 'RdBu', label = TRUE)"
  },
  {
    "objectID": "Data_Visualization/week14_Visualizing_Association.html#paired-data---쌍-데이터",
    "href": "Data_Visualization/week14_Visualizing_Association.html#paired-data---쌍-데이터",
    "title": "Visualizing Associations among two or more Quantitative Variables",
    "section": "",
    "text": "load('./data/CO2_emissions.rda')\n\nemissions_1970_2010 &lt;- CO2_emissions %&gt;% filter(year %in% c(1970, 2010)) %&gt;% \n  tidyr::spread(year, emissions) %&gt;% \n  na.omit()\n\nggplot(emissions_1970_2010, aes(`1970`, `2010`)) +\n  geom_abline(slope = 1, color = 'grey') +\n  geom_point(pch = 21, fill = '#0072B2D0', color = 'white', size = 3) +\n  scale_x_log10(limits = c(0.008, 125),\n                breaks = c(0.01, 0.1, 1, 10, 100),\n                labels = c('0.01', '0.1', '1.0', '10', '180'),\n                name = parse(text = '`1970 CO`[2]*` emissions (tons / person)`')) +\n  scale_y_log10(limits = c(0.008, 125),\n                breaks = c(0.01, 0.1, 1, 10, 100),\n                labels = c('0.01', '0.1', '1.0', '16', '100'),\n                name = parse(text = '`2010 Co`[2]*` emissions (tons / person)`')) +\n  theme_classic()"
  },
  {
    "objectID": "Data_Visualization/week14_Visualizing_Trends.html",
    "href": "Data_Visualization/week14_Visualizing_Trends.html",
    "title": "Visualizing Trends",
    "section": "",
    "text": "load('./data/dow_jones_industrial.rda')\n\ndow_jones_industrial %&gt;% sapply(class)\n#&gt;      date      open      high       low     close    volume \n#&gt;    \"Date\" \"numeric\" \"numeric\" \"numeric\" \"numeric\" \"integer\"\ndow_jones_industrial %&gt;% head()\n#&gt; # A tibble: 6 × 6\n#&gt;   date        open  high   low close   volume\n#&gt;   &lt;date&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;int&gt;\n#&gt; 1 1985-01-29 1278. 1295. 1267. 1293. 13560000\n#&gt; 2 1985-01-30 1297. 1305. 1279. 1288. 16820000\n#&gt; 3 1985-01-31 1283. 1293. 1273. 1287. 14070000\n#&gt; 4 1985-02-01 1277. 1286. 1270. 1278. 10980000\n#&gt; 5 1985-02-04 1272. 1295. 1269. 1290. 11630000\n#&gt; 6 1985-02-05 1294. 1301. 1279. 1285. 13800000\n\n\n\n\ndow_jones_industrial %&gt;%\n  filter(date &gt;= '2008/12/31' & date &lt;= '2010/01/10') %&gt;%\n  ggplot(aes(date, close)) +\n  geom_line(linewidth = 0.75) +\n  ylab('Dow Jones Industrial Average') +\n  scale_x_date(name = NULL, date_labels = '%Y년 %b월') +\n  theme_minimal()\n\n\n\n\n\n\n\n\ndow_jones_industrial %&gt;%\n  filter(date &gt;= '2008/12/31' & date &lt;= '2010/01/10') %&gt;%\n  ggplot(aes(date, close, color = 'close')) +\n  geom_line(linewidth = 0.75) +\n  geom_smooth(aes(color = 'smooth'), size = 1, na.rm = T, se = F) +\n  scale_color_manual(name = NULL,\n                     values = c(close = '#000000', smooth = '#0072b2'),\n                     labels = c('Close', 'LOESS Smoother')) +\n  ylab('Dow Jones Industrial Average') +\n  scale_x_date(name = NULL, date_labels = '%Y년 %b월') +\n  theme_minimal() +\n  theme(legend.position = c(0.8, 0.4))\n#&gt; Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#&gt; ℹ Please use `linewidth` instead.\n#&gt; `geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n# span : Controls the amount of smoothing for the default loess smoother.\ndow_jones_industrial %&gt;%\n  filter(date &gt;= '2008/12/31' & date &lt;= '2010/01/10') %&gt;%\n  ggplot(aes(date, close, color = 'close')) +\n  geom_line(linewidth = 0.75) +\n  geom_smooth(aes(color = 'smooth'), size = 1, na.rm = T, se = F, span = 0.3) +\n  scale_color_manual(name = NULL,\n                     values = c(close = '#000000', smooth = '#0072b2'),\n                     labels = c('Close', 'LOESS Smoother')) +\n  ylab('Dow Jones Industrial Average') +\n  scale_x_date(name = NULL, date_labels = '%Y년 %b월') +\n  theme_minimal() +\n  theme(legend.position = c(0.8, 0.4))\n#&gt; `geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n# gam : Generalized Additive Models - Cubic Regression Splines with 5 knots.\ndow_jones_industrial %&gt;%\n  filter(date &gt;= '2008/12/31' & date &lt;= '2010/01/10') %&gt;%\n  ggplot(aes(date, close, color = 'close')) +\n  geom_line(linewidth = 0.75) +\n  geom_smooth(aes(color = 'smooth'), size = 1, na.rm = T, se = F,\n              method = 'gam', formula = y ~ s(x, k = 5, bs = 'cr')) +\n  scale_color_manual(name = NULL,\n                     values = c(close = '#000000', smooth = '#0072b2'),\n                     labels = c('Close', 'Cubic Regression Splines')) +\n  ylab('Dow Jones Industrial Average') +\n  scale_x_date(name = NULL, date_labels = '%Y년 %b월') +\n  theme_minimal() +\n  theme(legend.position = c(0.8, 0.4))\n\n\n\n\n\n# gam : Generalized Additive Models - Thin-Plate Regression Spline with 3 knots.\ndow_jones_industrial %&gt;%\n  filter(date &gt;= '2008/12/31' & date &lt;= '2010/01/10') %&gt;%\n  ggplot(aes(date, close, color = 'close')) +\n  geom_line(linewidth = 0.75) +\n  geom_smooth(aes(color = 'smooth'), size = 1, na.rm = T, se = F,\n              method = 'gam', formula = y ~ s(x, k = 3)) +\n  scale_color_manual(name = NULL,\n                     values = c(close = '#000000', smooth = '#0072b2'),\n                     labels = c('Close', 'Thin-Plate Regression Spline')) +\n  ylab('Dow Jones Industrial Average') +\n  scale_x_date(name = NULL, date_labels = '%Y년 %b월') +\n  theme_minimal() +\n  theme(legend.position = c(0.8, 0.4))\n\n\n\n\n\n# gam : Generalized Additive Models - Gaussian Process Spline with 3 knots.\ndow_jones_industrial %&gt;%\n  filter(date &gt;= '2008/12/31' & date &lt;= '2010/01/10') %&gt;%\n  ggplot(aes(date, close, color = 'close')) +\n  geom_line(linewidth = 0.75) +\n  geom_smooth(aes(color = 'smooth'), size = 1, na.rm = T, se = F,\n              method = 'gam', formula = y ~ s(x, k = 6, bs = 'gp')) +\n  scale_color_manual(name = NULL,\n                     values = c(close = '#000000', smooth = '#0072b2'),\n                     labels = c('Close', 'Gaussian Process Spline')) +\n  ylab('Dow Jones Industrial Average') +\n  scale_x_date(name = NULL, date_labels = '%Y년 %b월') +\n  theme_minimal() +\n  theme(legend.position = c(0.8, 0.4))\n\n\n\n\n\n\n\n\n\n\n\nload('./data/blue_jays.rda')\n\nggplot(blue_jays, aes(Mass, Head, fill = KnownSex, color = KnownSex)) +\n  geom_point(pch = 21, color = 'white', size = 3) +\n  geom_smooth(method = 'lm', linewidth = 0.75, se = F, fullrange = T) +\n  xlab('Body Mass (g)') +\n  ylab('Head Length (mm)') +\n  scale_fill_manual(values = c(F = '#D55E00', M = '#007282'), \n                    breaks = c('F', 'M'),\n                    labels = c('Female Birds   ', 'Male Birds'),\n                    name = NULL,\n                    guide = guide_legend(direction = 'horizontal')) +\n  scale_color_manual(values = c(F = '#D55E00', M = '#007282'), \n                     breaks = c('F', 'M'),\n                     labels = c('Female Birds   ', 'Male Birds'),\n                     name = NULL) +\n  theme_minimal() +\n  theme(legend.position = 'top',\n        legend.justification = 'right')\n#&gt; `geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\nload('./data/CO2.rda')\n\nCO2 %&gt;% \n  ggplot(aes(date_dec, co2_interp)) +\n  geom_line(linewidth = 0.75, color = '#0072B2') +\n  ylab(parse(text = '`CO`[2]*` Concentration (ppm)`')) +\n  xlab(NULL) +\n  theme_minimal()\n\n\n\n\nCO2 %&gt;%\n  mutate(date = as.Date(paste(year, month, 1, sep = '-'))) %&gt;%\n  ggplot(aes(date, co2_interp)) +\n  geom_line(linewidth = 0.75, color = '#0072B2') +\n  ylab(parse(text = '`CO`[2]*` Concentration (ppm)`')) +\n  scale_x_date(name = NULL, date_labels = '%Y') +\n  theme_minimal()\n\n\n\n\n\n\n\n\n# Use complete years only\nCO2_complete &lt;- filter(CO2, year &gt;= 1959, year &lt; 2018)\n\n# Convert to time series object\nCO2_ts &lt;- ts(data = CO2_complete$co2_interp,\n             start = 1959, end = c(2017, 12), frequency = 12)\n\n# Detrend via STL method\nCO2_stl &lt;- stl(CO2_ts, s.window = 7)\nCO2_detrended &lt;- mutate(CO2_complete,\n                        `monthly average` = co2_interp,\n                        `seasonal fluctuations` = CO2_stl$time.series[, 'seasonal'],\n                        `long-term trend` = CO2_stl$time.series[, 'trend'],\n                        `remainder` = CO2_stl$time.series[, 'remainder'])\n\nfacet_labels &lt;- c('monthly average', 'long-term trend', 'seasonal fluctuations', 'remainder')\n\nggp &lt;- CO2_detrended %&gt;%\n  select(date_dec, `monthly average` : remainder) %&gt;%\n  tidyr::gather('variable', 'value', -date_dec) %&gt;%\n  mutate(variable = factor(variable, levels = facet_labels)) %&gt;%\n  filter(date_dec &gt;= 1989) %&gt;%\n  ggplot(aes(date_dec, value)) +\n  geom_line(linewidth = 0.75, color = '#007282') +\n  facet_wrap(facets = ~variable, ncol =  1, scales = 'free') +\n  theme_minimal()\n#&gt; Warning: attributes are not identical across measure variables; they will be\n#&gt; dropped\n\nggp"
  },
  {
    "objectID": "Data_Visualization/week14_Visualizing_Trends.html#smoothing---평활화를-통한-데이터-보정",
    "href": "Data_Visualization/week14_Visualizing_Trends.html#smoothing---평활화를-통한-데이터-보정",
    "title": "Visualizing Trends",
    "section": "",
    "text": "load('./data/dow_jones_industrial.rda')\n\ndow_jones_industrial %&gt;% sapply(class)\n#&gt;      date      open      high       low     close    volume \n#&gt;    \"Date\" \"numeric\" \"numeric\" \"numeric\" \"numeric\" \"integer\"\ndow_jones_industrial %&gt;% head()\n#&gt; # A tibble: 6 × 6\n#&gt;   date        open  high   low close   volume\n#&gt;   &lt;date&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;int&gt;\n#&gt; 1 1985-01-29 1278. 1295. 1267. 1293. 13560000\n#&gt; 2 1985-01-30 1297. 1305. 1279. 1288. 16820000\n#&gt; 3 1985-01-31 1283. 1293. 1273. 1287. 14070000\n#&gt; 4 1985-02-01 1277. 1286. 1270. 1278. 10980000\n#&gt; 5 1985-02-04 1272. 1295. 1269. 1290. 11630000\n#&gt; 6 1985-02-05 1294. 1301. 1279. 1285. 13800000\n\n\n\n\ndow_jones_industrial %&gt;%\n  filter(date &gt;= '2008/12/31' & date &lt;= '2010/01/10') %&gt;%\n  ggplot(aes(date, close)) +\n  geom_line(linewidth = 0.75) +\n  ylab('Dow Jones Industrial Average') +\n  scale_x_date(name = NULL, date_labels = '%Y년 %b월') +\n  theme_minimal()\n\n\n\n\n\n\n\n\ndow_jones_industrial %&gt;%\n  filter(date &gt;= '2008/12/31' & date &lt;= '2010/01/10') %&gt;%\n  ggplot(aes(date, close, color = 'close')) +\n  geom_line(linewidth = 0.75) +\n  geom_smooth(aes(color = 'smooth'), size = 1, na.rm = T, se = F) +\n  scale_color_manual(name = NULL,\n                     values = c(close = '#000000', smooth = '#0072b2'),\n                     labels = c('Close', 'LOESS Smoother')) +\n  ylab('Dow Jones Industrial Average') +\n  scale_x_date(name = NULL, date_labels = '%Y년 %b월') +\n  theme_minimal() +\n  theme(legend.position = c(0.8, 0.4))\n#&gt; Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#&gt; ℹ Please use `linewidth` instead.\n#&gt; `geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n# span : Controls the amount of smoothing for the default loess smoother.\ndow_jones_industrial %&gt;%\n  filter(date &gt;= '2008/12/31' & date &lt;= '2010/01/10') %&gt;%\n  ggplot(aes(date, close, color = 'close')) +\n  geom_line(linewidth = 0.75) +\n  geom_smooth(aes(color = 'smooth'), size = 1, na.rm = T, se = F, span = 0.3) +\n  scale_color_manual(name = NULL,\n                     values = c(close = '#000000', smooth = '#0072b2'),\n                     labels = c('Close', 'LOESS Smoother')) +\n  ylab('Dow Jones Industrial Average') +\n  scale_x_date(name = NULL, date_labels = '%Y년 %b월') +\n  theme_minimal() +\n  theme(legend.position = c(0.8, 0.4))\n#&gt; `geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n# gam : Generalized Additive Models - Cubic Regression Splines with 5 knots.\ndow_jones_industrial %&gt;%\n  filter(date &gt;= '2008/12/31' & date &lt;= '2010/01/10') %&gt;%\n  ggplot(aes(date, close, color = 'close')) +\n  geom_line(linewidth = 0.75) +\n  geom_smooth(aes(color = 'smooth'), size = 1, na.rm = T, se = F,\n              method = 'gam', formula = y ~ s(x, k = 5, bs = 'cr')) +\n  scale_color_manual(name = NULL,\n                     values = c(close = '#000000', smooth = '#0072b2'),\n                     labels = c('Close', 'Cubic Regression Splines')) +\n  ylab('Dow Jones Industrial Average') +\n  scale_x_date(name = NULL, date_labels = '%Y년 %b월') +\n  theme_minimal() +\n  theme(legend.position = c(0.8, 0.4))\n\n\n\n\n\n# gam : Generalized Additive Models - Thin-Plate Regression Spline with 3 knots.\ndow_jones_industrial %&gt;%\n  filter(date &gt;= '2008/12/31' & date &lt;= '2010/01/10') %&gt;%\n  ggplot(aes(date, close, color = 'close')) +\n  geom_line(linewidth = 0.75) +\n  geom_smooth(aes(color = 'smooth'), size = 1, na.rm = T, se = F,\n              method = 'gam', formula = y ~ s(x, k = 3)) +\n  scale_color_manual(name = NULL,\n                     values = c(close = '#000000', smooth = '#0072b2'),\n                     labels = c('Close', 'Thin-Plate Regression Spline')) +\n  ylab('Dow Jones Industrial Average') +\n  scale_x_date(name = NULL, date_labels = '%Y년 %b월') +\n  theme_minimal() +\n  theme(legend.position = c(0.8, 0.4))\n\n\n\n\n\n# gam : Generalized Additive Models - Gaussian Process Spline with 3 knots.\ndow_jones_industrial %&gt;%\n  filter(date &gt;= '2008/12/31' & date &lt;= '2010/01/10') %&gt;%\n  ggplot(aes(date, close, color = 'close')) +\n  geom_line(linewidth = 0.75) +\n  geom_smooth(aes(color = 'smooth'), size = 1, na.rm = T, se = F,\n              method = 'gam', formula = y ~ s(x, k = 6, bs = 'gp')) +\n  scale_color_manual(name = NULL,\n                     values = c(close = '#000000', smooth = '#0072b2'),\n                     labels = c('Close', 'Gaussian Process Spline')) +\n  ylab('Dow Jones Industrial Average') +\n  scale_x_date(name = NULL, date_labels = '%Y년 %b월') +\n  theme_minimal() +\n  theme(legend.position = c(0.8, 0.4))"
  },
  {
    "objectID": "Data_Visualization/week14_Visualizing_Trends.html#showing-trends-with-a-defined-functional-form---정의된-함수-형식으로-추세-시각화",
    "href": "Data_Visualization/week14_Visualizing_Trends.html#showing-trends-with-a-defined-functional-form---정의된-함수-형식으로-추세-시각화",
    "title": "Visualizing Trends",
    "section": "",
    "text": "load('./data/blue_jays.rda')\n\nggplot(blue_jays, aes(Mass, Head, fill = KnownSex, color = KnownSex)) +\n  geom_point(pch = 21, color = 'white', size = 3) +\n  geom_smooth(method = 'lm', linewidth = 0.75, se = F, fullrange = T) +\n  xlab('Body Mass (g)') +\n  ylab('Head Length (mm)') +\n  scale_fill_manual(values = c(F = '#D55E00', M = '#007282'), \n                    breaks = c('F', 'M'),\n                    labels = c('Female Birds   ', 'Male Birds'),\n                    name = NULL,\n                    guide = guide_legend(direction = 'horizontal')) +\n  scale_color_manual(values = c(F = '#D55E00', M = '#007282'), \n                     breaks = c('F', 'M'),\n                     labels = c('Female Birds   ', 'Male Birds'),\n                     name = NULL) +\n  theme_minimal() +\n  theme(legend.position = 'top',\n        legend.justification = 'right')\n#&gt; `geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Data_Visualization/week14_Visualizing_Trends.html#detrending-and-time-series-decomposition---추세-제거와-시계열-데이터-분해",
    "href": "Data_Visualization/week14_Visualizing_Trends.html#detrending-and-time-series-decomposition---추세-제거와-시계열-데이터-분해",
    "title": "Visualizing Trends",
    "section": "",
    "text": "load('./data/CO2.rda')\n\nCO2 %&gt;% \n  ggplot(aes(date_dec, co2_interp)) +\n  geom_line(linewidth = 0.75, color = '#0072B2') +\n  ylab(parse(text = '`CO`[2]*` Concentration (ppm)`')) +\n  xlab(NULL) +\n  theme_minimal()\n\n\n\n\nCO2 %&gt;%\n  mutate(date = as.Date(paste(year, month, 1, sep = '-'))) %&gt;%\n  ggplot(aes(date, co2_interp)) +\n  geom_line(linewidth = 0.75, color = '#0072B2') +\n  ylab(parse(text = '`CO`[2]*` Concentration (ppm)`')) +\n  scale_x_date(name = NULL, date_labels = '%Y') +\n  theme_minimal()\n\n\n\n\n\n\n\n\n# Use complete years only\nCO2_complete &lt;- filter(CO2, year &gt;= 1959, year &lt; 2018)\n\n# Convert to time series object\nCO2_ts &lt;- ts(data = CO2_complete$co2_interp,\n             start = 1959, end = c(2017, 12), frequency = 12)\n\n# Detrend via STL method\nCO2_stl &lt;- stl(CO2_ts, s.window = 7)\nCO2_detrended &lt;- mutate(CO2_complete,\n                        `monthly average` = co2_interp,\n                        `seasonal fluctuations` = CO2_stl$time.series[, 'seasonal'],\n                        `long-term trend` = CO2_stl$time.series[, 'trend'],\n                        `remainder` = CO2_stl$time.series[, 'remainder'])\n\nfacet_labels &lt;- c('monthly average', 'long-term trend', 'seasonal fluctuations', 'remainder')\n\nggp &lt;- CO2_detrended %&gt;%\n  select(date_dec, `monthly average` : remainder) %&gt;%\n  tidyr::gather('variable', 'value', -date_dec) %&gt;%\n  mutate(variable = factor(variable, levels = facet_labels)) %&gt;%\n  filter(date_dec &gt;= 1989) %&gt;%\n  ggplot(aes(date_dec, value)) +\n  geom_line(linewidth = 0.75, color = '#007282') +\n  facet_wrap(facets = ~variable, ncol =  1, scales = 'free') +\n  theme_minimal()\n#&gt; Warning: attributes are not identical across measure variables; they will be\n#&gt; dropped\n\nggp"
  },
  {
    "objectID": "Data_Visualization/week2_NCDC_normals.html",
    "href": "Data_Visualization/week2_NCDC_normals.html",
    "title": "NCDC Normals with ggplot2",
    "section": "",
    "text": "# Read csv File\nncdc_normals &lt;- read.csv(\"./data/ncdc_normals.csv\")\nncdc_normals %&gt;% head()\n#&gt;    station_id month day temperature flag       date\n#&gt; 1 AQW00061705     1   1        82.4    C 0000-01-01\n#&gt; 2 AQW00061705     1   2        82.4    C 0000-01-02\n#&gt; 3 AQW00061705     1   3        82.4    C 0000-01-03\n#&gt; 4 AQW00061705     1   4        82.4    C 0000-01-04\n#&gt; 5 AQW00061705     1   5        82.4    C 0000-01-05\n#&gt; 6 AQW00061705     1   6        82.4    C 0000-01-06\n\nncdc_normals %&gt;% dim()\n#&gt; [1] 2745366       6\n\nncdc_normals %&gt;% summary()\n#&gt;   station_id            month             day         temperature    \n#&gt;  Length:2745366     Min.   : 1.000   Min.   : 1.00   Min.   :-21.80  \n#&gt;  Class :character   1st Qu.: 4.000   1st Qu.: 8.00   1st Qu.: 39.70  \n#&gt;  Mode  :character   Median : 7.000   Median :16.00   Median : 54.60  \n#&gt;                     Mean   : 6.514   Mean   :15.76   Mean   : 53.17  \n#&gt;                     3rd Qu.:10.000   3rd Qu.:23.00   3rd Qu.: 68.10  \n#&gt;                     Max.   :12.000   Max.   :31.00   Max.   :103.20  \n#&gt;      flag               date          \n#&gt;  Length:2745366     Length:2745366    \n#&gt;  Class :character   Class :character  \n#&gt;  Mode  :character   Mode  :character  \n#&gt;                                       \n#&gt;                                       \n#&gt; \n\nncdc_normals %&gt;% sapply(class)\n#&gt;  station_id       month         day temperature        flag        date \n#&gt; \"character\"   \"integer\"   \"integer\"   \"numeric\" \"character\" \"character\"\n\n\n# `date`열 Datetime type으로 변환\nncdc_normals$date &lt;- ncdc_normals$date %&gt;% as.Date(\"%Y-%m-%d\")\nncdc_normals$date %&gt;% head()\n#&gt; [1] \"0000-01-01\" \"0000-01-02\" \"0000-01-03\" \"0000-01-04\" \"0000-01-05\"\n#&gt; [6] \"0000-01-06\"\n\nncdc_normals %&gt;% sapply(class)\n#&gt;  station_id       month         day temperature        flag        date \n#&gt; \"character\"   \"integer\"   \"integer\"   \"numeric\" \"character\"      \"Date\"\n\nncdc_normals %&gt;% sapply(typeof)\n#&gt;  station_id       month         day temperature        flag        date \n#&gt; \"character\"   \"integer\"   \"integer\"    \"double\" \"character\"    \"double\"\n\n\n# station 개수 확인\nncdc_normals$station_id %&gt;%\n    unique() %&gt;%\n    length()\n#&gt; [1] 7501\n\n# station_loc Dataframe 생성\nstation_loc &lt;- data.frame(\n    station_id = c(\"USW00014819\", \"USC00042319\", \"USW00093107\", \"USW00012918\"),\n    location = c(\"Chicago\", \"Death Valley\", \"San Diego\", \"Houston\")\n)\nstation_loc\n#&gt;    station_id     location\n#&gt; 1 USW00014819      Chicago\n#&gt; 2 USC00042319 Death Valley\n#&gt; 3 USW00093107    San Diego\n#&gt; 4 USW00012918      Houston\n\n# Raw Data와 Inner Join\ntemps_long &lt;- ncdc_normals %&gt;% inner_join(station_loc, by = \"station_id\")\ntemps_long %&gt;% head()\n#&gt;    station_id month day temperature flag       date     location\n#&gt; 1 USC00042319     1   1        51.0    S 0000-01-01 Death Valley\n#&gt; 2 USC00042319     1   2        51.2    S 0000-01-02 Death Valley\n#&gt; 3 USC00042319     1   3        51.3    S 0000-01-03 Death Valley\n#&gt; 4 USC00042319     1   4        51.4    S 0000-01-04 Death Valley\n#&gt; 5 USC00042319     1   5        51.6    S 0000-01-05 Death Valley\n#&gt; 6 USC00042319     1   6        51.7    S 0000-01-06 Death Valley\n\ntemps_long %&gt;% sapply(class)\n#&gt;  station_id       month         day temperature        flag        date \n#&gt; \"character\"   \"integer\"   \"integer\"   \"numeric\" \"character\"      \"Date\" \n#&gt;    location \n#&gt; \"character\"\n\n\n# X축에 표시할 눈금\ndate_s &lt;- \"0000-01-01\" %&gt;% as.Date(\"%Y-%m-%d\")\ndate_e &lt;- \"0001-01-01\" %&gt;% as.Date(\"%Y-%m-%d\")\nbreak_date &lt;- seq.Date(date_s, date_e, by = \"3 month\") # 3달 간격 Date 생성\n\n# ggplot + 축 설정\nggplot(temps_long, aes(x = date, y = temperature, color = location)) +\n    geom_line(linewidth = 1) +\n    scale_x_date(\n        name = \"month\", breaks = break_date,\n        labels = c(\"Jan\", \"Apr\", \"Jul\", \"Oct\", \"Jan\")\n    ) +\n    scale_y_continuous(name = \"temp\") + # limits = c(0, 100) -&gt; y 범위 지정\n    labs(title = \"Fig. 2.3\", subtitle = \"Daily temperature normals\") +\n    theme_light()\n\n\n\n\n\n# 월 평균\nmean_temps &lt;- temps_long %&gt;%\n    group_by(location, month) %&gt;%\n    summarize(mean = mean(temperature)) %&gt;%\n    ungroup() %&gt;%\n    mutate(month = factor(paste(month), levels = paste(1:12)))\n#&gt; `summarise()` has grouped output by 'location'. You can override using the\n#&gt; `.groups` argument.\nmean_temps\n#&gt; # A tibble: 48 × 3\n#&gt;    location month  mean\n#&gt;    &lt;chr&gt;    &lt;fct&gt; &lt;dbl&gt;\n#&gt;  1 Chicago  1      24.8\n#&gt;  2 Chicago  2      28.9\n#&gt;  3 Chicago  3      38.8\n#&gt;  4 Chicago  4      50.4\n#&gt;  5 Chicago  5      60.9\n#&gt;  6 Chicago  6      71.0\n#&gt;  7 Chicago  7      75.8\n#&gt;  8 Chicago  8      74.1\n#&gt;  9 Chicago  9      66.4\n#&gt; 10 Chicago  10     54.3\n#&gt; # ℹ 38 more rows\n\n# ggplot + geom_tile + fill_color\nggplot(mean_temps, aes(x = month, y = location, fill = mean)) +\n    geom_tile(width = .95, height = .95) +\n    scale_fill_viridis_c(\n        option = \"B\", begin = 0.15, end = 0.98,\n        name = \"temperature\"\n    ) +\n    coord_fixed(expand = FALSE) +\n    ylab(NULL)"
  },
  {
    "objectID": "Data_Visualization/week2_NCDC_normals.html#ncdc-normals-데이터를-활용한-ggplot2-실습",
    "href": "Data_Visualization/week2_NCDC_normals.html#ncdc-normals-데이터를-활용한-ggplot2-실습",
    "title": "NCDC Normals with ggplot2",
    "section": "",
    "text": "# Read csv File\nncdc_normals &lt;- read.csv(\"./data/ncdc_normals.csv\")\nncdc_normals %&gt;% head()\n#&gt;    station_id month day temperature flag       date\n#&gt; 1 AQW00061705     1   1        82.4    C 0000-01-01\n#&gt; 2 AQW00061705     1   2        82.4    C 0000-01-02\n#&gt; 3 AQW00061705     1   3        82.4    C 0000-01-03\n#&gt; 4 AQW00061705     1   4        82.4    C 0000-01-04\n#&gt; 5 AQW00061705     1   5        82.4    C 0000-01-05\n#&gt; 6 AQW00061705     1   6        82.4    C 0000-01-06\n\nncdc_normals %&gt;% dim()\n#&gt; [1] 2745366       6\n\nncdc_normals %&gt;% summary()\n#&gt;   station_id            month             day         temperature    \n#&gt;  Length:2745366     Min.   : 1.000   Min.   : 1.00   Min.   :-21.80  \n#&gt;  Class :character   1st Qu.: 4.000   1st Qu.: 8.00   1st Qu.: 39.70  \n#&gt;  Mode  :character   Median : 7.000   Median :16.00   Median : 54.60  \n#&gt;                     Mean   : 6.514   Mean   :15.76   Mean   : 53.17  \n#&gt;                     3rd Qu.:10.000   3rd Qu.:23.00   3rd Qu.: 68.10  \n#&gt;                     Max.   :12.000   Max.   :31.00   Max.   :103.20  \n#&gt;      flag               date          \n#&gt;  Length:2745366     Length:2745366    \n#&gt;  Class :character   Class :character  \n#&gt;  Mode  :character   Mode  :character  \n#&gt;                                       \n#&gt;                                       \n#&gt; \n\nncdc_normals %&gt;% sapply(class)\n#&gt;  station_id       month         day temperature        flag        date \n#&gt; \"character\"   \"integer\"   \"integer\"   \"numeric\" \"character\" \"character\"\n\n\n# `date`열 Datetime type으로 변환\nncdc_normals$date &lt;- ncdc_normals$date %&gt;% as.Date(\"%Y-%m-%d\")\nncdc_normals$date %&gt;% head()\n#&gt; [1] \"0000-01-01\" \"0000-01-02\" \"0000-01-03\" \"0000-01-04\" \"0000-01-05\"\n#&gt; [6] \"0000-01-06\"\n\nncdc_normals %&gt;% sapply(class)\n#&gt;  station_id       month         day temperature        flag        date \n#&gt; \"character\"   \"integer\"   \"integer\"   \"numeric\" \"character\"      \"Date\"\n\nncdc_normals %&gt;% sapply(typeof)\n#&gt;  station_id       month         day temperature        flag        date \n#&gt; \"character\"   \"integer\"   \"integer\"    \"double\" \"character\"    \"double\"\n\n\n# station 개수 확인\nncdc_normals$station_id %&gt;%\n    unique() %&gt;%\n    length()\n#&gt; [1] 7501\n\n# station_loc Dataframe 생성\nstation_loc &lt;- data.frame(\n    station_id = c(\"USW00014819\", \"USC00042319\", \"USW00093107\", \"USW00012918\"),\n    location = c(\"Chicago\", \"Death Valley\", \"San Diego\", \"Houston\")\n)\nstation_loc\n#&gt;    station_id     location\n#&gt; 1 USW00014819      Chicago\n#&gt; 2 USC00042319 Death Valley\n#&gt; 3 USW00093107    San Diego\n#&gt; 4 USW00012918      Houston\n\n# Raw Data와 Inner Join\ntemps_long &lt;- ncdc_normals %&gt;% inner_join(station_loc, by = \"station_id\")\ntemps_long %&gt;% head()\n#&gt;    station_id month day temperature flag       date     location\n#&gt; 1 USC00042319     1   1        51.0    S 0000-01-01 Death Valley\n#&gt; 2 USC00042319     1   2        51.2    S 0000-01-02 Death Valley\n#&gt; 3 USC00042319     1   3        51.3    S 0000-01-03 Death Valley\n#&gt; 4 USC00042319     1   4        51.4    S 0000-01-04 Death Valley\n#&gt; 5 USC00042319     1   5        51.6    S 0000-01-05 Death Valley\n#&gt; 6 USC00042319     1   6        51.7    S 0000-01-06 Death Valley\n\ntemps_long %&gt;% sapply(class)\n#&gt;  station_id       month         day temperature        flag        date \n#&gt; \"character\"   \"integer\"   \"integer\"   \"numeric\" \"character\"      \"Date\" \n#&gt;    location \n#&gt; \"character\"\n\n\n# X축에 표시할 눈금\ndate_s &lt;- \"0000-01-01\" %&gt;% as.Date(\"%Y-%m-%d\")\ndate_e &lt;- \"0001-01-01\" %&gt;% as.Date(\"%Y-%m-%d\")\nbreak_date &lt;- seq.Date(date_s, date_e, by = \"3 month\") # 3달 간격 Date 생성\n\n# ggplot + 축 설정\nggplot(temps_long, aes(x = date, y = temperature, color = location)) +\n    geom_line(linewidth = 1) +\n    scale_x_date(\n        name = \"month\", breaks = break_date,\n        labels = c(\"Jan\", \"Apr\", \"Jul\", \"Oct\", \"Jan\")\n    ) +\n    scale_y_continuous(name = \"temp\") + # limits = c(0, 100) -&gt; y 범위 지정\n    labs(title = \"Fig. 2.3\", subtitle = \"Daily temperature normals\") +\n    theme_light()\n\n\n\n\n\n# 월 평균\nmean_temps &lt;- temps_long %&gt;%\n    group_by(location, month) %&gt;%\n    summarize(mean = mean(temperature)) %&gt;%\n    ungroup() %&gt;%\n    mutate(month = factor(paste(month), levels = paste(1:12)))\n#&gt; `summarise()` has grouped output by 'location'. You can override using the\n#&gt; `.groups` argument.\nmean_temps\n#&gt; # A tibble: 48 × 3\n#&gt;    location month  mean\n#&gt;    &lt;chr&gt;    &lt;fct&gt; &lt;dbl&gt;\n#&gt;  1 Chicago  1      24.8\n#&gt;  2 Chicago  2      28.9\n#&gt;  3 Chicago  3      38.8\n#&gt;  4 Chicago  4      50.4\n#&gt;  5 Chicago  5      60.9\n#&gt;  6 Chicago  6      71.0\n#&gt;  7 Chicago  7      75.8\n#&gt;  8 Chicago  8      74.1\n#&gt;  9 Chicago  9      66.4\n#&gt; 10 Chicago  10     54.3\n#&gt; # ℹ 38 more rows\n\n# ggplot + geom_tile + fill_color\nggplot(mean_temps, aes(x = month, y = location, fill = mean)) +\n    geom_tile(width = .95, height = .95) +\n    scale_fill_viridis_c(\n        option = \"B\", begin = 0.15, end = 0.98,\n        name = \"temperature\"\n    ) +\n    coord_fixed(expand = FALSE) +\n    ylab(NULL)"
  },
  {
    "objectID": "Data_Visualization/week4_Coordinate_systems_and_axes.html",
    "href": "Data_Visualization/week4_Coordinate_systems_and_axes.html",
    "title": "Coordinate systems and axes",
    "section": "",
    "text": "# Read csv File\nncdc_normals &lt;- read.csv(\"./data/ncdc_normals.csv\")\n\n# station_loc Dataframe 생성\nstation_loc &lt;- data.frame(\n    station_id = c(\"USW00014819\", \"USC00042319\", \"USW00093107\", \"USW00012918\"),\n    location = c(\"Chicago\", \"Death Valley\", \"San Diego\", \"Houston\")\n)\nstation_loc\n#&gt;    station_id     location\n#&gt; 1 USW00014819      Chicago\n#&gt; 2 USC00042319 Death Valley\n#&gt; 3 USW00093107    San Diego\n#&gt; 4 USW00012918      Houston\n\n# Raw Data와 Inner Join\ntemps_long &lt;- ncdc_normals %&gt;% inner_join(station_loc, by = \"station_id\")\ntemps_long %&gt;% head()\n#&gt;    station_id month day temperature flag       date     location\n#&gt; 1 USC00042319     1   1        51.0    S 0000-01-01 Death Valley\n#&gt; 2 USC00042319     1   2        51.2    S 0000-01-02 Death Valley\n#&gt; 3 USC00042319     1   3        51.3    S 0000-01-03 Death Valley\n#&gt; 4 USC00042319     1   4        51.4    S 0000-01-04 Death Valley\n#&gt; 5 USC00042319     1   5        51.6    S 0000-01-05 Death Valley\n#&gt; 6 USC00042319     1   6        51.7    S 0000-01-06 Death Valley\ntemps_long %&gt;% sapply(class)\n#&gt;  station_id       month         day temperature        flag        date \n#&gt; \"character\"   \"integer\"   \"integer\"   \"numeric\" \"character\" \"character\" \n#&gt;    location \n#&gt; \"character\"\n\n# Date Type Convert : Character -&gt; Date\ntemps_long$date &lt;- temps_long$date %&gt;% as.Date(\"%Y-%m-%d\")\n\n\n\n\n# Arrange multiple plots into a grid\nlibrary(cowplot) # plot_grid()\n#&gt; \n#&gt; 다음의 패키지를 부착합니다: 'cowplot'\n#&gt; The following object is masked from 'package:lubridate':\n#&gt; \n#&gt;     stamp\n\n# data_Houston 데이터프레임 생성\ndata_Houston &lt;- temps_long %&gt;% filter(location == \"Houston\")\ndata_Houston %&gt;% head()\n#&gt;    station_id month day temperature flag       date location\n#&gt; 1 USW00012918     1   1        53.9    S 0000-01-01  Houston\n#&gt; 2 USW00012918     1   2        53.8    S 0000-01-02  Houston\n#&gt; 3 USW00012918     1   3        53.8    S 0000-01-03  Houston\n#&gt; 4 USW00012918     1   4        53.8    S 0000-01-04  Houston\n#&gt; 5 USW00012918     1   5        53.8    S 0000-01-05  Houston\n#&gt; 6 USW00012918     1   6        53.7    S 0000-01-06  Houston\n\nggplot(data_Houston, aes(x = date, y = temperature)) +\n    geom_line(linewidth = 1, color = \"royalblue\")\n\n\n\n\n# X축에 표시할 눈금\ndate_s &lt;- \"0000-01-01\" %&gt;% as.Date(\"%Y-%m-%d\")\ndate_e &lt;- \"0001-01-01\" %&gt;% as.Date(\"%Y-%m-%d\")\nbreak_date &lt;- seq.Date(date_s, date_e, by = \"3 month\") # 3달 간격 Date 생성\n\n# ggplot + 축 생성\ntemp_plot &lt;- ggplot(data_Houston, aes(x = date, y = temperature)) +\n    geom_line(linewidth = 1, color = \"royalblue\") +\n    scale_x_date(\n        name = \"month\", breaks = break_date,\n        labels = c(\"Jan\", \"Apr\", \"Jul\", \"Oct\", \"Jan\")\n    ) +\n    scale_y_continuous(name = \"temp\") + # limits = c(0, 100) -&gt; y 범위 지정\n    # labs(title = 'Fig. 2.3', subtitle = 'Daily temperature normals') +\n    theme_light()\ntemp_plot\n\n\n\n\n\n# 2 subplots\nplot_ab &lt;- plot_grid(temp_plot, temp_plot,\n    nrow = 1, rel_widths = c(1, 2), labels = c(\"a\", \"b\")\n)\nplot_ab\n\n\n\n\n\n# 3 subplots\nplot_abc &lt;- plot_grid(plot_ab, temp_plot,\n    ncol = 1, rel_widths = c(1, 5, 1), labels = c(\"\", \"c\")\n)\nplot_abc\n\n\n\n\n\n\n\n\nlibrary(ggrepel) # geom_text_repel()\n\n# Read csv File\nUs_census &lt;- read.csv(\"./data/US_census.csv\")\nUs_census %&gt;% head(2)\n#&gt;     state           name FIPS pop2010 pop2000 age_under_5 age_under_18\n#&gt; 1 Alabama Autauga County 1001   54571   43671         6.6         26.8\n#&gt; 2 Alabama Baldwin County 1003  182265  140415         6.1         23.0\n#&gt;   age_over_65 female white black native asian pac_isl two_plus_races hispanic\n#&gt; 1        12.0   51.3  78.5  17.7    0.4   0.9      NA            1.6      2.4\n#&gt; 2        16.8   51.1  85.7   9.4    0.7   0.7      NA            1.5      4.4\n#&gt;   white_not_hispanic no_move_in_one_plus_year foreign_born\n#&gt; 1               77.2                     86.3          2.0\n#&gt; 2               83.5                     83.0          3.6\n#&gt;   foreign_spoken_at_home hs_grad bachelors veterans mean_work_travel\n#&gt; 1                    3.7    85.3      21.7     5817             25.1\n#&gt; 2                    5.5    87.6      26.8    20396             25.8\n#&gt;   housing_units home_ownership housing_multi_unit median_val_owner_occupied\n#&gt; 1         22135           77.5                7.2                    133900\n#&gt; 2        104061           76.7               22.6                    177200\n#&gt;   households persons_per_household per_capita_income median_household_income\n#&gt; 1      19718                   2.7             24568                   53255\n#&gt; 2      69476                   2.5             26469                   50147\n#&gt;   poverty private_nonfarm_establishments private_nonfarm_employment\n#&gt; 1    10.6                            877                      10628\n#&gt; 2    12.2                           4812                      52233\n#&gt;   percent_change_private_nonfarm_employment nonemployment_establishments firms\n#&gt; 1                                      16.6                         2971  4067\n#&gt; 2                                      17.4                        14175 19035\n#&gt;   black_owned_firms native_owned_firms asian_owned_firms pac_isl_owned_firms\n#&gt; 1              15.2                 NA               1.3                  NA\n#&gt; 2               2.7                0.4               1.0                  NA\n#&gt;   hispanic_owned_firms women_owned_firms manufacturer_shipments_2007\n#&gt; 1                  0.7              31.7                          NA\n#&gt; 2                  1.3              27.3                     1410273\n#&gt;   mercent_whole_sales_2007   sales sales_per_capita accommodation_food_service\n#&gt; 1                       NA  598175            12003                      88157\n#&gt; 2                       NA 2966489            17166                     436955\n#&gt;   building_permits fed_spending    area density\n#&gt; 1              191       331142  594.44    91.8\n#&gt; 2              696      1119082 1589.78   114.6\n\ntx_counties &lt;- Us_census %&gt;%\n    filter(state == \"Texas\") %&gt;% # Texas 주만 추출\n    select(name, pop2010) %&gt;% # name과 pop2010 열만 추출\n    mutate(\n        county = gsub(\" County\", \"\", name), # \" County\" 제거하여 county 열 생성\n        popratio = pop2010 / median(pop2010)\n    ) %&gt;% # pop2010을 중앙값으로 나누어 비율 생성\n    arrange(desc(popratio)) %&gt;% # 내림차순으로 정렬\n    mutate(\n        index = 1:n(), # index 열 생성\n        label = ifelse(index &lt;= 3 | index &gt; n() - 3 | runif(n()) &lt; .04, county, \"\")\n    )\n# index 기준으로 상위 3위와 하위 3위인 열만 label을 지정\ntx_counties %&gt;% head()\n#&gt;             name pop2010  county  popratio index   label\n#&gt; 1  Harris County 4092459  Harris 222.64616     1  Harris\n#&gt; 2  Dallas County 2368139  Dallas 128.83624     2  Dallas\n#&gt; 3 Tarrant County 1809034 Tarrant  98.41869     3 Tarrant\n#&gt; 4   Bexar County 1714773   Bexar  93.29052     4        \n#&gt; 5  Travis County 1024266  Travis  55.72417     5        \n#&gt; 6 El Paso County  800647 El Paso  43.55840     6\n\n\n# Figure 3.6\nggplot(tx_counties, aes(x = index, y = popratio)) +\n    geom_hline(yintercept = 0, linetype = 2, color = \"grey40\") +\n    geom_point(size = 1, color = \"royalblue\") +\n    geom_text_repel(aes(label = label),\n        min.segment.length = 0,\n        max.overlaps = 100\n    ) +\n    theme_light() +\n    theme(panel.border = element_blank())\n\n\n\n\n\n# Figure 3.5\nlabel_log10 &lt;- sapply(-2:2, function(i) as.expression(bquote(10^.(i))))\n\nggplot(tx_counties, aes(x = index, y = popratio)) +\n    geom_hline(yintercept = 0, linetype = 2, color = \"grey40\") + # 수평선 생성 (yintercept : y절편)\n    geom_point(size = 1, color = \"royalblue\") +\n    geom_text_repel(aes(label = label),\n        min.segment.length = 0, # label을 표시하기 위해 연결해야하는 최소한의 선분 길이\n        max.overlaps = 100\n    ) + # label 간의 최대 겹침 횟수\n    scale_y_log10(\n        name = \"population number / median\",\n        breaks = 10^(-2:2),\n        labels = label_log10\n    ) +\n    scale_x_continuous(\n        name = \"Texas counties, from most to leas populous\",\n        breaks = NULL\n    ) +\n    theme_light() +\n    theme(panel.border = element_blank())\n#&gt; Warning: Transformation introduced infinite values in continuous y-axis\n\n\n\n\n\n\n\n\ndata_202202 &lt;- read.csv(\"./data/행정구역_시군구_별_주민등록세대수_202302.csv\", encoding = \"UTF-8\")\ndata_202202 %&gt;% head()\n#&gt;   행정구역.시군구.별 X2022.11 X2022.12 X2023.01 X2023.02\n#&gt; 1             종로구    72666    72524    72479    72773\n#&gt; 2               중구    63167    63139    63123    63492\n#&gt; 3             용산구   109905   109805   109734   109778\n#&gt; 4             성동구   133435   133305   133293   133517\n#&gt; 5             광진구   169376   169291   169416   169648\n#&gt; 6           동대문구   170154   169873   169716   170766\n\nkor_census &lt;- data_202202 %&gt;%\n    filter(X2023.02 &gt; 0) %&gt;%\n    mutate(popratio = X2023.02 / median(X2023.02)) %&gt;%\n    arrange(popratio %&gt;% desc()) %&gt;%\n    mutate(index = 1:n(), label = ifelse(index &lt;= 5 | index &gt; n() - 5 | index == median(index), 행정구역.시군구.별, \"\"))\n\nlabel_log10 &lt;- sapply(-2:2, function(i) as.expression(bquote(10^.(i))))\n\nggplot(kor_census, aes(x = index, y = popratio)) +\n    geom_hline(yintercept = 1, linetype = 2, color = \"grey40\") +\n    geom_point(size = 1, color = \"royalblue\") +\n    geom_text_repel(aes(label = label),\n        min.segment.length = 0,\n        max.overlaps = 100\n    ) +\n    scale_y_log10(\n        name = \"인구 수 / 중위 수\",\n        breaks = 10^(-2:2),\n        labels = label_log10,\n        limits = c(10^-1.3, 10^1.3)\n    ) +\n    scale_x_discrete(\n        name = \"행정구역(시군구)별 주민등록세대수\",\n        breaks = NULL\n    ) +\n    theme_light() +\n    theme(panel.border = element_blank())\n\n\n\n\n\n\n\n\n# X축에 표시할 눈금\ndate_s &lt;- \"0000-01-01\" %&gt;% as.Date(\"%Y-%m-%d\")\ndate_e &lt;- \"0001-01-01\" %&gt;% as.Date(\"%Y-%m-%d\")\nbreak_date &lt;- seq.Date(date_s, date_e, by = \"3 month\") # 3달 간격 Date 생성\ndata_lab &lt;- format(break_date, \"%B\")\n\nggplot(temps_long, aes(x = date, y = temperature, color = location)) +\n    geom_line(linewidth = 1.2) +\n    scale_x_date(name = \"month\", breaks = break_date, labels = data_lab) +\n    scale_y_continuous(name = \"temperature\", limits = c(0, 105)) +\n    coord_polar(theta = \"x\", start = pi, direction = -1) + # 6시 위치에서 반시계 방향\n    # coord_polar(theta = \"x\", start = 0, direction = 1) +    # 12시 위치에서 반시계 방향\n    theme_light() +\n    theme(panel.border = element_blank())\n\n\n\n\n\n\n\n\n# Read csv File\ndata_2022 &lt;- read.csv(\"./data/OBS_ASOS_DD_20230322080932.csv\", fileEncoding = \"CP949\")\n\n# '대전', '서울', '세종', '제주'만 추출\ndata_2022 &lt;- data_2022 %&gt;% filter(지점명 %in% c(\"대전\", \"서울\", \"세종\", \"제주\"))\ndata_2022$지점명 %&gt;% unique()\n#&gt; [1] \"서울\" \"대전\" \"제주\" \"세종\"\n\n# Date Type Convert : Character -&gt; Date\ndata_2022$일시 &lt;- data_2022$일시 %&gt;% as.Date(\"%Y-%m-%d\")\ndata_2022 %&gt;% sapply(class)\n#&gt;         지점       지점명         일시 평균기온..C. 최저기온..C. 최고기온..C. \n#&gt;    \"integer\"  \"character\"       \"Date\"    \"numeric\"    \"numeric\"    \"numeric\"\n\n# X축 눈금 지정\ndate_s &lt;- \"2022-01-01\" %&gt;% as.Date(\"%Y-%m-%d\")\ndate_e &lt;- \"2023-01-01\" %&gt;% as.Date(\"%Y-%m-%d\")\nbreak_date &lt;- seq.Date(date_s, date_e, by = \"2 month\") # 2달 간격 Date 생성\ndata_lab &lt;- format(break_date, \"%B\")\n\nggplot(data_2022, aes(x = 일시, y = 평균기온..C., color = 지점명)) +\n    geom_line(linewidth = 1.2) +\n    scale_x_date(name = \"월\", breaks = break_date, labels = data_lab) +\n    scale_y_continuous(name = \"평균기온\", limits = c(-20, 30)) +\n    coord_polar(theta = \"x\", start = pi, direction = -1) + # 6시 위치에서 반시계 방향\n    theme_light() +\n    theme(panel.border = element_blank())"
  },
  {
    "objectID": "Data_Visualization/week4_Coordinate_systems_and_axes.html#figure-3.2",
    "href": "Data_Visualization/week4_Coordinate_systems_and_axes.html#figure-3.2",
    "title": "Coordinate systems and axes",
    "section": "",
    "text": "# Arrange multiple plots into a grid\nlibrary(cowplot) # plot_grid()\n#&gt; \n#&gt; 다음의 패키지를 부착합니다: 'cowplot'\n#&gt; The following object is masked from 'package:lubridate':\n#&gt; \n#&gt;     stamp\n\n# data_Houston 데이터프레임 생성\ndata_Houston &lt;- temps_long %&gt;% filter(location == \"Houston\")\ndata_Houston %&gt;% head()\n#&gt;    station_id month day temperature flag       date location\n#&gt; 1 USW00012918     1   1        53.9    S 0000-01-01  Houston\n#&gt; 2 USW00012918     1   2        53.8    S 0000-01-02  Houston\n#&gt; 3 USW00012918     1   3        53.8    S 0000-01-03  Houston\n#&gt; 4 USW00012918     1   4        53.8    S 0000-01-04  Houston\n#&gt; 5 USW00012918     1   5        53.8    S 0000-01-05  Houston\n#&gt; 6 USW00012918     1   6        53.7    S 0000-01-06  Houston\n\nggplot(data_Houston, aes(x = date, y = temperature)) +\n    geom_line(linewidth = 1, color = \"royalblue\")\n\n\n\n\n# X축에 표시할 눈금\ndate_s &lt;- \"0000-01-01\" %&gt;% as.Date(\"%Y-%m-%d\")\ndate_e &lt;- \"0001-01-01\" %&gt;% as.Date(\"%Y-%m-%d\")\nbreak_date &lt;- seq.Date(date_s, date_e, by = \"3 month\") # 3달 간격 Date 생성\n\n# ggplot + 축 생성\ntemp_plot &lt;- ggplot(data_Houston, aes(x = date, y = temperature)) +\n    geom_line(linewidth = 1, color = \"royalblue\") +\n    scale_x_date(\n        name = \"month\", breaks = break_date,\n        labels = c(\"Jan\", \"Apr\", \"Jul\", \"Oct\", \"Jan\")\n    ) +\n    scale_y_continuous(name = \"temp\") + # limits = c(0, 100) -&gt; y 범위 지정\n    # labs(title = 'Fig. 2.3', subtitle = 'Daily temperature normals') +\n    theme_light()\ntemp_plot\n\n\n\n\n\n# 2 subplots\nplot_ab &lt;- plot_grid(temp_plot, temp_plot,\n    nrow = 1, rel_widths = c(1, 2), labels = c(\"a\", \"b\")\n)\nplot_ab\n\n\n\n\n\n# 3 subplots\nplot_abc &lt;- plot_grid(plot_ab, temp_plot,\n    ncol = 1, rel_widths = c(1, 5, 1), labels = c(\"\", \"c\")\n)\nplot_abc"
  },
  {
    "objectID": "Data_Visualization/week4_Coordinate_systems_and_axes.html#figure-3.5-3.6",
    "href": "Data_Visualization/week4_Coordinate_systems_and_axes.html#figure-3.5-3.6",
    "title": "Coordinate systems and axes",
    "section": "",
    "text": "library(ggrepel) # geom_text_repel()\n\n# Read csv File\nUs_census &lt;- read.csv(\"./data/US_census.csv\")\nUs_census %&gt;% head(2)\n#&gt;     state           name FIPS pop2010 pop2000 age_under_5 age_under_18\n#&gt; 1 Alabama Autauga County 1001   54571   43671         6.6         26.8\n#&gt; 2 Alabama Baldwin County 1003  182265  140415         6.1         23.0\n#&gt;   age_over_65 female white black native asian pac_isl two_plus_races hispanic\n#&gt; 1        12.0   51.3  78.5  17.7    0.4   0.9      NA            1.6      2.4\n#&gt; 2        16.8   51.1  85.7   9.4    0.7   0.7      NA            1.5      4.4\n#&gt;   white_not_hispanic no_move_in_one_plus_year foreign_born\n#&gt; 1               77.2                     86.3          2.0\n#&gt; 2               83.5                     83.0          3.6\n#&gt;   foreign_spoken_at_home hs_grad bachelors veterans mean_work_travel\n#&gt; 1                    3.7    85.3      21.7     5817             25.1\n#&gt; 2                    5.5    87.6      26.8    20396             25.8\n#&gt;   housing_units home_ownership housing_multi_unit median_val_owner_occupied\n#&gt; 1         22135           77.5                7.2                    133900\n#&gt; 2        104061           76.7               22.6                    177200\n#&gt;   households persons_per_household per_capita_income median_household_income\n#&gt; 1      19718                   2.7             24568                   53255\n#&gt; 2      69476                   2.5             26469                   50147\n#&gt;   poverty private_nonfarm_establishments private_nonfarm_employment\n#&gt; 1    10.6                            877                      10628\n#&gt; 2    12.2                           4812                      52233\n#&gt;   percent_change_private_nonfarm_employment nonemployment_establishments firms\n#&gt; 1                                      16.6                         2971  4067\n#&gt; 2                                      17.4                        14175 19035\n#&gt;   black_owned_firms native_owned_firms asian_owned_firms pac_isl_owned_firms\n#&gt; 1              15.2                 NA               1.3                  NA\n#&gt; 2               2.7                0.4               1.0                  NA\n#&gt;   hispanic_owned_firms women_owned_firms manufacturer_shipments_2007\n#&gt; 1                  0.7              31.7                          NA\n#&gt; 2                  1.3              27.3                     1410273\n#&gt;   mercent_whole_sales_2007   sales sales_per_capita accommodation_food_service\n#&gt; 1                       NA  598175            12003                      88157\n#&gt; 2                       NA 2966489            17166                     436955\n#&gt;   building_permits fed_spending    area density\n#&gt; 1              191       331142  594.44    91.8\n#&gt; 2              696      1119082 1589.78   114.6\n\ntx_counties &lt;- Us_census %&gt;%\n    filter(state == \"Texas\") %&gt;% # Texas 주만 추출\n    select(name, pop2010) %&gt;% # name과 pop2010 열만 추출\n    mutate(\n        county = gsub(\" County\", \"\", name), # \" County\" 제거하여 county 열 생성\n        popratio = pop2010 / median(pop2010)\n    ) %&gt;% # pop2010을 중앙값으로 나누어 비율 생성\n    arrange(desc(popratio)) %&gt;% # 내림차순으로 정렬\n    mutate(\n        index = 1:n(), # index 열 생성\n        label = ifelse(index &lt;= 3 | index &gt; n() - 3 | runif(n()) &lt; .04, county, \"\")\n    )\n# index 기준으로 상위 3위와 하위 3위인 열만 label을 지정\ntx_counties %&gt;% head()\n#&gt;             name pop2010  county  popratio index   label\n#&gt; 1  Harris County 4092459  Harris 222.64616     1  Harris\n#&gt; 2  Dallas County 2368139  Dallas 128.83624     2  Dallas\n#&gt; 3 Tarrant County 1809034 Tarrant  98.41869     3 Tarrant\n#&gt; 4   Bexar County 1714773   Bexar  93.29052     4        \n#&gt; 5  Travis County 1024266  Travis  55.72417     5        \n#&gt; 6 El Paso County  800647 El Paso  43.55840     6\n\n\n# Figure 3.6\nggplot(tx_counties, aes(x = index, y = popratio)) +\n    geom_hline(yintercept = 0, linetype = 2, color = \"grey40\") +\n    geom_point(size = 1, color = \"royalblue\") +\n    geom_text_repel(aes(label = label),\n        min.segment.length = 0,\n        max.overlaps = 100\n    ) +\n    theme_light() +\n    theme(panel.border = element_blank())\n\n\n\n\n\n# Figure 3.5\nlabel_log10 &lt;- sapply(-2:2, function(i) as.expression(bquote(10^.(i))))\n\nggplot(tx_counties, aes(x = index, y = popratio)) +\n    geom_hline(yintercept = 0, linetype = 2, color = \"grey40\") + # 수평선 생성 (yintercept : y절편)\n    geom_point(size = 1, color = \"royalblue\") +\n    geom_text_repel(aes(label = label),\n        min.segment.length = 0, # label을 표시하기 위해 연결해야하는 최소한의 선분 길이\n        max.overlaps = 100\n    ) + # label 간의 최대 겹침 횟수\n    scale_y_log10(\n        name = \"population number / median\",\n        breaks = 10^(-2:2),\n        labels = label_log10\n    ) +\n    scale_x_continuous(\n        name = \"Texas counties, from most to leas populous\",\n        breaks = NULL\n    ) +\n    theme_light() +\n    theme(panel.border = element_blank())\n#&gt; Warning: Transformation introduced infinite values in continuous y-axis"
  },
  {
    "objectID": "Data_Visualization/week4_Coordinate_systems_and_axes.html#예제---시군구-인구수-2023년",
    "href": "Data_Visualization/week4_Coordinate_systems_and_axes.html#예제---시군구-인구수-2023년",
    "title": "Coordinate systems and axes",
    "section": "",
    "text": "data_202202 &lt;- read.csv(\"./data/행정구역_시군구_별_주민등록세대수_202302.csv\", encoding = \"UTF-8\")\ndata_202202 %&gt;% head()\n#&gt;   행정구역.시군구.별 X2022.11 X2022.12 X2023.01 X2023.02\n#&gt; 1             종로구    72666    72524    72479    72773\n#&gt; 2               중구    63167    63139    63123    63492\n#&gt; 3             용산구   109905   109805   109734   109778\n#&gt; 4             성동구   133435   133305   133293   133517\n#&gt; 5             광진구   169376   169291   169416   169648\n#&gt; 6           동대문구   170154   169873   169716   170766\n\nkor_census &lt;- data_202202 %&gt;%\n    filter(X2023.02 &gt; 0) %&gt;%\n    mutate(popratio = X2023.02 / median(X2023.02)) %&gt;%\n    arrange(popratio %&gt;% desc()) %&gt;%\n    mutate(index = 1:n(), label = ifelse(index &lt;= 5 | index &gt; n() - 5 | index == median(index), 행정구역.시군구.별, \"\"))\n\nlabel_log10 &lt;- sapply(-2:2, function(i) as.expression(bquote(10^.(i))))\n\nggplot(kor_census, aes(x = index, y = popratio)) +\n    geom_hline(yintercept = 1, linetype = 2, color = \"grey40\") +\n    geom_point(size = 1, color = \"royalblue\") +\n    geom_text_repel(aes(label = label),\n        min.segment.length = 0,\n        max.overlaps = 100\n    ) +\n    scale_y_log10(\n        name = \"인구 수 / 중위 수\",\n        breaks = 10^(-2:2),\n        labels = label_log10,\n        limits = c(10^-1.3, 10^1.3)\n    ) +\n    scale_x_discrete(\n        name = \"행정구역(시군구)별 주민등록세대수\",\n        breaks = NULL\n    ) +\n    theme_light() +\n    theme(panel.border = element_blank())"
  },
  {
    "objectID": "Data_Visualization/week4_Coordinate_systems_and_axes.html#figure-3.10",
    "href": "Data_Visualization/week4_Coordinate_systems_and_axes.html#figure-3.10",
    "title": "Coordinate systems and axes",
    "section": "",
    "text": "# X축에 표시할 눈금\ndate_s &lt;- \"0000-01-01\" %&gt;% as.Date(\"%Y-%m-%d\")\ndate_e &lt;- \"0001-01-01\" %&gt;% as.Date(\"%Y-%m-%d\")\nbreak_date &lt;- seq.Date(date_s, date_e, by = \"3 month\") # 3달 간격 Date 생성\ndata_lab &lt;- format(break_date, \"%B\")\n\nggplot(temps_long, aes(x = date, y = temperature, color = location)) +\n    geom_line(linewidth = 1.2) +\n    scale_x_date(name = \"month\", breaks = break_date, labels = data_lab) +\n    scale_y_continuous(name = \"temperature\", limits = c(0, 105)) +\n    coord_polar(theta = \"x\", start = pi, direction = -1) + # 6시 위치에서 반시계 방향\n    # coord_polar(theta = \"x\", start = 0, direction = 1) +    # 12시 위치에서 반시계 방향\n    theme_light() +\n    theme(panel.border = element_blank())"
  },
  {
    "objectID": "Data_Visualization/week4_Coordinate_systems_and_axes.html#예제---기상청-자료-2022년",
    "href": "Data_Visualization/week4_Coordinate_systems_and_axes.html#예제---기상청-자료-2022년",
    "title": "Coordinate systems and axes",
    "section": "",
    "text": "# Read csv File\ndata_2022 &lt;- read.csv(\"./data/OBS_ASOS_DD_20230322080932.csv\", fileEncoding = \"CP949\")\n\n# '대전', '서울', '세종', '제주'만 추출\ndata_2022 &lt;- data_2022 %&gt;% filter(지점명 %in% c(\"대전\", \"서울\", \"세종\", \"제주\"))\ndata_2022$지점명 %&gt;% unique()\n#&gt; [1] \"서울\" \"대전\" \"제주\" \"세종\"\n\n# Date Type Convert : Character -&gt; Date\ndata_2022$일시 &lt;- data_2022$일시 %&gt;% as.Date(\"%Y-%m-%d\")\ndata_2022 %&gt;% sapply(class)\n#&gt;         지점       지점명         일시 평균기온..C. 최저기온..C. 최고기온..C. \n#&gt;    \"integer\"  \"character\"       \"Date\"    \"numeric\"    \"numeric\"    \"numeric\"\n\n# X축 눈금 지정\ndate_s &lt;- \"2022-01-01\" %&gt;% as.Date(\"%Y-%m-%d\")\ndate_e &lt;- \"2023-01-01\" %&gt;% as.Date(\"%Y-%m-%d\")\nbreak_date &lt;- seq.Date(date_s, date_e, by = \"2 month\") # 2달 간격 Date 생성\ndata_lab &lt;- format(break_date, \"%B\")\n\nggplot(data_2022, aes(x = 일시, y = 평균기온..C., color = 지점명)) +\n    geom_line(linewidth = 1.2) +\n    scale_x_date(name = \"월\", breaks = break_date, labels = data_lab) +\n    scale_y_continuous(name = \"평균기온\", limits = c(-20, 30)) +\n    coord_polar(theta = \"x\", start = pi, direction = -1) + # 6시 위치에서 반시계 방향\n    theme_light() +\n    theme(panel.border = element_blank())"
  },
  {
    "objectID": "Data_Visualization/week8_Barplot.html",
    "href": "Data_Visualization/week8_Barplot.html",
    "title": "Barplot",
    "section": "",
    "text": "# Data Load\nboxoffice &lt;- read.csv('./data/boxoffice.csv')\n\n# 세로 막대\nboxoffice %&gt;%\n  ggplot(aes(x = fct_reorder(title, rank), y = amount)) +\n  geom_col(fill = '#56B4E9', width = 0.6, alpha = 0.9) +\n  scale_y_continuous(expand = c(0, 0),\n                     breaks = c(0, 2e7, 4e7, 6e7),\n                     labels = c('0', '20', '40', '60'),\n                     name = 'Weekend groos(million USD)') +\n  xlab('') +\n  theme_minimal() +\n  theme(axis.ticks.x = element_blank(),\n        panel.grid.major.x = element_blank())\n\n\n\n\n\n\n\n\nhttps://www.kobis.or.kr/kobis/business/stat/boxs/findRealTicketList.do\n조회일: 2023-04-26\n출처: 영화진흥위원회 통합전산망 (http://www.kobis.or.kr)\n\n\n# Data Load\nboxoffice_kor &lt;- read.csv('./data/KOBIS_실시간_예매율_2023-04-26.csv')\n\n# 세로 막대\nboxoffice_kor %&gt;%\n  filter(순위 &lt;= 5) %&gt;%\n  ggplot(aes(x = fct_reorder(영화명, 순위), y = 예매매출액)) +\n  geom_col(fill = '#56B4E9', width = 0.6, alpha = 0.9) +\n  scale_y_continuous(expand = c(0, 0),\n                     breaks = seq(0, 20, 5) * 1e+8,\n                     labels = seq(0, 20, 5),\n                     name = '예매매출액 (억원)') +\n  xlab('') +\n  theme_minimal() +\n  theme(axis.ticks.x = element_blank(),\n        panel.grid.major.x = element_blank())\n\n\n\n\n\n\n\n\nboxoffice %&gt;%\n  ggplot(aes(x = fct_reorder(title, rank %&gt;% desc()), y = amount)) +\n  geom_col(fill = '#56B4E9', width = 0.6, alpha = 0.9) +\n  scale_y_continuous(expand = c(0, 0),\n                     breaks = c(0, 2e7, 4e7, 6e7),\n                     labels = c('0', '20', '40', '60'),\n                     name = 'Weekend groos(million USD)') +\n  xlab('') +\n  coord_flip() +\n  theme_minimal() +\n  theme(axis.ticks.x = element_blank(),\n        panel.grid.major.x = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n# Data Load\nincome_by_age &lt;- read.csv('./data/income_by_age.csv')\nincome_by_age &lt;- income_by_age %&gt;%\n  mutate(age = age %&gt;% factor(levels = c('15 to 24', '25 to 34',\n                                         '35 to 44', '45 to 54',\n                                         '55 to 64', '65 to 64',\n                                         '&gt; 74')))\n\nincome_df &lt;- income_by_age %&gt;%\n  filter(race %in% c('white', 'asian', 'black', 'hispanic')) %&gt;%\n  mutate(race = fct_relevel(race, c('asian', 'white', 'hispanic', 'black')),\n         race = fct_recode(race, 'Asian' = 'asian', 'Hispanic' = 'hispanic'),\n         age = fct_recode(age, '≥ 75'  = '&gt; 74'))\n\n\n# Color Palette\ncolors_four &lt;- RColorBrewer::brewer.pal(5, 'PuBu')[5:2]\n\n# Plot\nggplot(income_df, aes(x = age, y = median_income, fill = race)) +\n  geom_col(position= 'dodge', alpha = 0.9) +\n  scale_y_continuous(expand = c(0, 0),\n                     name = 'Median Income (USD)',\n                     breaks = seq(0, 10, 2) * 1e+4,\n                     labels = paste0('$', format(seq(0, 10, 2) * 1e+4,\n                                                 big.mark = ',',\n                                                 scientific = FALSE))) +\n  scale_fill_manual(values = colors_four, name = NULL) +\n  xlab('Age (years)') +\n  theme_minimal() +\n  theme(panel.grid.major.x = element_blank(),\n        axis.ticks.x = element_blank())\n\n\n\n\n\n\n\n\n# Take  the darkest seven colors from 8-class ColorBrewer palette 'PuBu'\ncolors_seven = RColorBrewer::brewer.pal(8, 'PuBu')[2:8]\n\nggplot(income_df, aes(x = race, y = median_income, fill = age)) +\n  geom_col(position = 'dodge', alpha = 0.9) +\n  scale_y_continuous(expand = c(0, 0),\n                     name = 'Median Income (USD)',\n                     breaks = seq(0, 10, 2) * 1e+4,\n                     labels = paste0('$', format(seq(0, 10, 2) * 1e+4,\n                                                 big.mark = ',',\n                                                 scientific = FALSE))) +\n  scale_fill_manual(values = colors_seven, name = 'Age') +\n  xlab(NULL) +\n  theme_minimal() +\n  theme(panel.grid.major.x = element_blank(),\n        axis.ticks.x = element_blank())\n\n\n\n\n\n\n\n\nggplot(income_df, aes(x = age, y = median_income)) +\n  geom_col(fill ='#56B4E9', alpha = 0.9) +\n  scale_y_continuous(expand = c(0, 0),\n                     name = 'Median Income (USD)',\n                     breaks = seq(0, 10, 2) * 1e+4,\n                     labels = paste0('$', format(seq(0, 10, 2) * 1e+4,\n                                                 big.mark = ',',\n                                                 scientific = FALSE))) +\n  xlab('Age (years)') +\n  facet_wrap(~race, scales = 'free_x') + # 그래프 분할, y축 고정\n  theme_minimal() +\n  theme(panel.grid.major.x = element_blank(),\n        axis.ticks.x = element_blank())  \n\n\n\n\n\n\n\n\n\n\n\n# install.packages('gapminder')\nlibrary(gapminder) # 국가별 기대수명 자료\n\ndf_Americas &lt;- gapminder %&gt;% filter(year == 2007, continent == 'Americas')\n\nggplot(df_Americas, aes(x = lifeExp, y = fct_reorder(country, lifeExp))) +\n  geom_point(color = '#0072B2', size = 3) +\n  scale_x_continuous(name = 'Life Expectancy (years)',\n                     limits = c(59, 82),\n                     expand = c(0, 0)) +\n  scale_y_discrete(name = NULL, expand = c(0, 0.5)) +\n  theme_minimal() +\n  theme(plot.margin = margin(18, 6, 3, 1.5))\n\n\n\n\n\n\n\n\n# Data Load\ninternet &lt;- read.csv('./data/internet.csv')\n\ncountry_list = c('United States', 'China', 'India', 'Japan', 'Algeria',\n                 'Brazil', 'Germany', 'France', 'United Kingdom', 'Italy',\n                 'New Zealand', 'Canada', 'Mexico', 'Chile', 'Argentina',\n                 'Norway', 'South Africa', 'Kenya', 'Israel', 'Iceland')\n\ninternet_short &lt;- filter(internet, country %in% country_list) %&gt;%\n  mutate(users = ifelse(is.na(users), 0, users))\n\n# 인터넷 사용자 비율이 높은 순서\ninternet_summary &lt;- internet_short %&gt;%\n  filter(year == 2016) %&gt;%\n  arrange(users)\n\n# Levels\ninternet_short &lt;- internet_short %&gt;%\n  filter(year &gt; 1993) %&gt;%\n  mutate(country = factor(country, levels = internet_summary$country))\n\n\n# Visualization\nggplot(internet_short, aes(x = year, y = country, fill = users)) +\n  geom_tile(color = 'white', linewidth = 0.25) +\n  scale_fill_viridis_c(option = 'A', begin = 0.05, end = 0.98, limits = c(0, 100),\n                       name = 'Internet Users / 100 people',\n                       guide = guide_colorbar(direction = 'horizontal',\n                                              label.position = 'bottom',\n                                              title.position = 'top',\n                                              ticks = FALSE,\n                                              barwidth = grid::unit(3.5, 'in'),\n                                              barheight = grid::unit(0.2, 'in'))) +\n  scale_x_continuous(expand = c(0, 0), name = NULL) +\n  scale_y_discrete(name = NULL, position = 'right') +\n  theme_minimal() +\n  theme(axis.line = element_blank(),\n        axis.ticks = element_blank(),\n        panel.grid.major.x = element_blank(),\n        axis.ticks.x =  element_blank(),\n        legend.position = 'top',\n        legend.justification = 'left', \n        legend.title.align = 0.5,\n        legend.title = element_text(size = 10))\n\n\n\n\n\n\n\n\n# 인터넷 사용률이 처음으로 20%를 넘긴 해\ninternet_summary &lt;- internet_short %&gt;%\n  filter(users &gt; 20) %&gt;%\n  group_by(country) %&gt;%\n  summarize(year_min = min(year),\n            users_max = max(users)) %&gt;%\n  arrange(year_min %&gt;% desc(), users_max)\n\n# Levels\ninternet_short &lt;- internet_short%&gt;%\n  filter(year &gt; 1993) %&gt;%\n  mutate(country = factor(country, levels = internet_summary$country))\n\n\n# Visualization\nggplot(internet_short, aes(x = year, y = country, fill = users)) +\n  geom_tile(color = 'white', linewidth = 0.25) +\n  scale_fill_viridis_c(option = 'A', begin = 0.05, end = 0.98, limits = c(0, 100),\n                       name = 'Internet Users / 100 people',\n                       guide = guide_colorbar(direction = 'horizontal',\n                                              label.position = 'bottom',\n                                              title.position = 'top',\n                                              ticks = FALSE,\n                                              barwidth = grid::unit(3.5, 'in'),\n                                              barheight = grid::unit(0.2, 'in'))) +\n  scale_x_continuous(expand = c(0, 0), name = NULL) +\n  scale_y_discrete(name = NULL, position = 'right') +\n  theme_minimal() +\n  theme(axis.line = element_blank(),\n        axis.ticks = element_blank(),\n        panel.grid.major.x = element_blank(),\n        axis.ticks.x =  element_blank(),\n        legend.position = 'top',\n        legend.justification = 'left', \n        legend.title.align = 0.5,\n        legend.title = element_text(size = 10))\n\n\n\n\n\n\n\n\n\n\n\nSW기술자_평균임금_20220412145301.csv (fileEncoding = 'CP949')\n2021년만 시각화\n\n\n# 1. SW기술자 평균 임금\ndata_sw_raw &lt;- read.csv('./data/SW기술자_평균임금_20220412145301.csv', fileEncoding = 'CP949')\n\n# Figre 6.11 - 2021년 SW기술자 평균임금\ndata_sw_2021 &lt;- data_sw_raw %&gt;% select(직무별, X2021)\n\nggplot(data_sw_2021, aes(x = X2021, y = fct_reorder(직무별, X2021))) +\n  geom_point(color = '#0072B2', size = 3) +\n  scale_x_continuous(name = '평균임금',\n                     breaks = seq(2, 6, 1) * 1e+5,\n                     labels = format(seq(2, 6, 1) * 1e+5,\n                                     big.mark = ',',\n                                     scientific = FALSE),\n                     expand = c(0, 0),\n                     limits = c(1.5, 6.5) * 1e+5) +\n  scale_y_discrete(name = NULL, expand = c(0, 0.5)) +\n  theme_minimal() +\n  theme(plot.margin = margin(18, 6, 3, 1.5))\n\n\n\n\n\n\n\n\n연령집단별_자살률.csv (fileEncoding = 'UTF-8')\n2000년~2020년\n\n\n# 2. 연령집단별 자살률\ndata_rate_raw &lt;- read.csv('./data/연령집단별_자살률.csv')\n\n# 나이, 성별 분리\ndata_rate_melt &lt;- data_rate_raw %&gt;%\n  reshape2::melt(id.vars = '연령집단',\n                 variable.name = '년도',\n                 value.name = '자살률') %&gt;%\n  mutate(년도 = gsub('\\\\D', '', 년도) %&gt;% as.integer(),\n         자살률 = 자살률 %&gt;% as.integer())\n\n\nggplot(data_rate_melt, aes(x = 년도, y = 연령집단, fill = 자살률)) +\n  geom_tile(color = 'white', linewidth = 0.25) +\n  scale_fill_viridis_c(option = 'A', begin = 0.05, end = 0.98, limits = c(0, 130),\n                       name = '연령집단 (인구 십만 명당)',\n                       guide = guide_colorbar(direction = 'horizontal',\n                                              label.position = 'bottom',\n                                              title.position = 'top',\n                                              ticks = FALSE,\n                                              barwidth = grid::unit(3.5, 'in'),\n                                              barheight = grid::unit(0.2, 'in'))) +\n  scale_x_continuous(expand = c(0, 0), name = NULL) +\n  scale_y_discrete(name = NULL, position = 'right') +\n  theme_minimal() +\n  theme(axis.line = element_blank(),\n        axis.ticks = element_blank(),\n        panel.grid.major.x = element_blank(),\n        axis.ticks.x =  element_blank(),\n        legend.position = 'top',\n        legend.justification = 'left', \n        legend.title.align = 0.5,\n        legend.title = element_text(size = 10))"
  },
  {
    "objectID": "Data_Visualization/week8_Barplot.html#barplots-막대-도표의-다양한-활용",
    "href": "Data_Visualization/week8_Barplot.html#barplots-막대-도표의-다양한-활용",
    "title": "Barplot",
    "section": "",
    "text": "# Data Load\nboxoffice &lt;- read.csv('./data/boxoffice.csv')\n\n# 세로 막대\nboxoffice %&gt;%\n  ggplot(aes(x = fct_reorder(title, rank), y = amount)) +\n  geom_col(fill = '#56B4E9', width = 0.6, alpha = 0.9) +\n  scale_y_continuous(expand = c(0, 0),\n                     breaks = c(0, 2e7, 4e7, 6e7),\n                     labels = c('0', '20', '40', '60'),\n                     name = 'Weekend groos(million USD)') +\n  xlab('') +\n  theme_minimal() +\n  theme(axis.ticks.x = element_blank(),\n        panel.grid.major.x = element_blank())\n\n\n\n\n\n\n\n\nhttps://www.kobis.or.kr/kobis/business/stat/boxs/findRealTicketList.do\n조회일: 2023-04-26\n출처: 영화진흥위원회 통합전산망 (http://www.kobis.or.kr)\n\n\n# Data Load\nboxoffice_kor &lt;- read.csv('./data/KOBIS_실시간_예매율_2023-04-26.csv')\n\n# 세로 막대\nboxoffice_kor %&gt;%\n  filter(순위 &lt;= 5) %&gt;%\n  ggplot(aes(x = fct_reorder(영화명, 순위), y = 예매매출액)) +\n  geom_col(fill = '#56B4E9', width = 0.6, alpha = 0.9) +\n  scale_y_continuous(expand = c(0, 0),\n                     breaks = seq(0, 20, 5) * 1e+8,\n                     labels = seq(0, 20, 5),\n                     name = '예매매출액 (억원)') +\n  xlab('') +\n  theme_minimal() +\n  theme(axis.ticks.x = element_blank(),\n        panel.grid.major.x = element_blank())\n\n\n\n\n\n\n\n\nboxoffice %&gt;%\n  ggplot(aes(x = fct_reorder(title, rank %&gt;% desc()), y = amount)) +\n  geom_col(fill = '#56B4E9', width = 0.6, alpha = 0.9) +\n  scale_y_continuous(expand = c(0, 0),\n                     breaks = c(0, 2e7, 4e7, 6e7),\n                     labels = c('0', '20', '40', '60'),\n                     name = 'Weekend groos(million USD)') +\n  xlab('') +\n  coord_flip() +\n  theme_minimal() +\n  theme(axis.ticks.x = element_blank(),\n        panel.grid.major.x = element_blank())"
  },
  {
    "objectID": "Data_Visualization/week8_Barplot.html#grouped-and-stacked-bars-묶은-막대와-누적-막대",
    "href": "Data_Visualization/week8_Barplot.html#grouped-and-stacked-bars-묶은-막대와-누적-막대",
    "title": "Barplot",
    "section": "",
    "text": "# Data Load\nincome_by_age &lt;- read.csv('./data/income_by_age.csv')\nincome_by_age &lt;- income_by_age %&gt;%\n  mutate(age = age %&gt;% factor(levels = c('15 to 24', '25 to 34',\n                                         '35 to 44', '45 to 54',\n                                         '55 to 64', '65 to 64',\n                                         '&gt; 74')))\n\nincome_df &lt;- income_by_age %&gt;%\n  filter(race %in% c('white', 'asian', 'black', 'hispanic')) %&gt;%\n  mutate(race = fct_relevel(race, c('asian', 'white', 'hispanic', 'black')),\n         race = fct_recode(race, 'Asian' = 'asian', 'Hispanic' = 'hispanic'),\n         age = fct_recode(age, '≥ 75'  = '&gt; 74'))\n\n\n# Color Palette\ncolors_four &lt;- RColorBrewer::brewer.pal(5, 'PuBu')[5:2]\n\n# Plot\nggplot(income_df, aes(x = age, y = median_income, fill = race)) +\n  geom_col(position= 'dodge', alpha = 0.9) +\n  scale_y_continuous(expand = c(0, 0),\n                     name = 'Median Income (USD)',\n                     breaks = seq(0, 10, 2) * 1e+4,\n                     labels = paste0('$', format(seq(0, 10, 2) * 1e+4,\n                                                 big.mark = ',',\n                                                 scientific = FALSE))) +\n  scale_fill_manual(values = colors_four, name = NULL) +\n  xlab('Age (years)') +\n  theme_minimal() +\n  theme(panel.grid.major.x = element_blank(),\n        axis.ticks.x = element_blank())\n\n\n\n\n\n\n\n\n# Take  the darkest seven colors from 8-class ColorBrewer palette 'PuBu'\ncolors_seven = RColorBrewer::brewer.pal(8, 'PuBu')[2:8]\n\nggplot(income_df, aes(x = race, y = median_income, fill = age)) +\n  geom_col(position = 'dodge', alpha = 0.9) +\n  scale_y_continuous(expand = c(0, 0),\n                     name = 'Median Income (USD)',\n                     breaks = seq(0, 10, 2) * 1e+4,\n                     labels = paste0('$', format(seq(0, 10, 2) * 1e+4,\n                                                 big.mark = ',',\n                                                 scientific = FALSE))) +\n  scale_fill_manual(values = colors_seven, name = 'Age') +\n  xlab(NULL) +\n  theme_minimal() +\n  theme(panel.grid.major.x = element_blank(),\n        axis.ticks.x = element_blank())\n\n\n\n\n\n\n\n\nggplot(income_df, aes(x = age, y = median_income)) +\n  geom_col(fill ='#56B4E9', alpha = 0.9) +\n  scale_y_continuous(expand = c(0, 0),\n                     name = 'Median Income (USD)',\n                     breaks = seq(0, 10, 2) * 1e+4,\n                     labels = paste0('$', format(seq(0, 10, 2) * 1e+4,\n                                                 big.mark = ',',\n                                                 scientific = FALSE))) +\n  xlab('Age (years)') +\n  facet_wrap(~race, scales = 'free_x') + # 그래프 분할, y축 고정\n  theme_minimal() +\n  theme(panel.grid.major.x = element_blank(),\n        axis.ticks.x = element_blank())"
  },
  {
    "objectID": "Data_Visualization/week8_Barplot.html#dot-plots-and-heatmaps-점-도표와-히트맵",
    "href": "Data_Visualization/week8_Barplot.html#dot-plots-and-heatmaps-점-도표와-히트맵",
    "title": "Barplot",
    "section": "",
    "text": "# install.packages('gapminder')\nlibrary(gapminder) # 국가별 기대수명 자료\n\ndf_Americas &lt;- gapminder %&gt;% filter(year == 2007, continent == 'Americas')\n\nggplot(df_Americas, aes(x = lifeExp, y = fct_reorder(country, lifeExp))) +\n  geom_point(color = '#0072B2', size = 3) +\n  scale_x_continuous(name = 'Life Expectancy (years)',\n                     limits = c(59, 82),\n                     expand = c(0, 0)) +\n  scale_y_discrete(name = NULL, expand = c(0, 0.5)) +\n  theme_minimal() +\n  theme(plot.margin = margin(18, 6, 3, 1.5))\n\n\n\n\n\n\n\n\n# Data Load\ninternet &lt;- read.csv('./data/internet.csv')\n\ncountry_list = c('United States', 'China', 'India', 'Japan', 'Algeria',\n                 'Brazil', 'Germany', 'France', 'United Kingdom', 'Italy',\n                 'New Zealand', 'Canada', 'Mexico', 'Chile', 'Argentina',\n                 'Norway', 'South Africa', 'Kenya', 'Israel', 'Iceland')\n\ninternet_short &lt;- filter(internet, country %in% country_list) %&gt;%\n  mutate(users = ifelse(is.na(users), 0, users))\n\n# 인터넷 사용자 비율이 높은 순서\ninternet_summary &lt;- internet_short %&gt;%\n  filter(year == 2016) %&gt;%\n  arrange(users)\n\n# Levels\ninternet_short &lt;- internet_short %&gt;%\n  filter(year &gt; 1993) %&gt;%\n  mutate(country = factor(country, levels = internet_summary$country))\n\n\n# Visualization\nggplot(internet_short, aes(x = year, y = country, fill = users)) +\n  geom_tile(color = 'white', linewidth = 0.25) +\n  scale_fill_viridis_c(option = 'A', begin = 0.05, end = 0.98, limits = c(0, 100),\n                       name = 'Internet Users / 100 people',\n                       guide = guide_colorbar(direction = 'horizontal',\n                                              label.position = 'bottom',\n                                              title.position = 'top',\n                                              ticks = FALSE,\n                                              barwidth = grid::unit(3.5, 'in'),\n                                              barheight = grid::unit(0.2, 'in'))) +\n  scale_x_continuous(expand = c(0, 0), name = NULL) +\n  scale_y_discrete(name = NULL, position = 'right') +\n  theme_minimal() +\n  theme(axis.line = element_blank(),\n        axis.ticks = element_blank(),\n        panel.grid.major.x = element_blank(),\n        axis.ticks.x =  element_blank(),\n        legend.position = 'top',\n        legend.justification = 'left', \n        legend.title.align = 0.5,\n        legend.title = element_text(size = 10))\n\n\n\n\n\n\n\n\n# 인터넷 사용률이 처음으로 20%를 넘긴 해\ninternet_summary &lt;- internet_short %&gt;%\n  filter(users &gt; 20) %&gt;%\n  group_by(country) %&gt;%\n  summarize(year_min = min(year),\n            users_max = max(users)) %&gt;%\n  arrange(year_min %&gt;% desc(), users_max)\n\n# Levels\ninternet_short &lt;- internet_short%&gt;%\n  filter(year &gt; 1993) %&gt;%\n  mutate(country = factor(country, levels = internet_summary$country))\n\n\n# Visualization\nggplot(internet_short, aes(x = year, y = country, fill = users)) +\n  geom_tile(color = 'white', linewidth = 0.25) +\n  scale_fill_viridis_c(option = 'A', begin = 0.05, end = 0.98, limits = c(0, 100),\n                       name = 'Internet Users / 100 people',\n                       guide = guide_colorbar(direction = 'horizontal',\n                                              label.position = 'bottom',\n                                              title.position = 'top',\n                                              ticks = FALSE,\n                                              barwidth = grid::unit(3.5, 'in'),\n                                              barheight = grid::unit(0.2, 'in'))) +\n  scale_x_continuous(expand = c(0, 0), name = NULL) +\n  scale_y_discrete(name = NULL, position = 'right') +\n  theme_minimal() +\n  theme(axis.line = element_blank(),\n        axis.ticks = element_blank(),\n        panel.grid.major.x = element_blank(),\n        axis.ticks.x =  element_blank(),\n        legend.position = 'top',\n        legend.justification = 'left', \n        legend.title.align = 0.5,\n        legend.title = element_text(size = 10))"
  },
  {
    "objectID": "Data_Visualization/week8_Barplot.html#연습문제",
    "href": "Data_Visualization/week8_Barplot.html#연습문제",
    "title": "Barplot",
    "section": "",
    "text": "SW기술자_평균임금_20220412145301.csv (fileEncoding = 'CP949')\n2021년만 시각화\n\n\n# 1. SW기술자 평균 임금\ndata_sw_raw &lt;- read.csv('./data/SW기술자_평균임금_20220412145301.csv', fileEncoding = 'CP949')\n\n# Figre 6.11 - 2021년 SW기술자 평균임금\ndata_sw_2021 &lt;- data_sw_raw %&gt;% select(직무별, X2021)\n\nggplot(data_sw_2021, aes(x = X2021, y = fct_reorder(직무별, X2021))) +\n  geom_point(color = '#0072B2', size = 3) +\n  scale_x_continuous(name = '평균임금',\n                     breaks = seq(2, 6, 1) * 1e+5,\n                     labels = format(seq(2, 6, 1) * 1e+5,\n                                     big.mark = ',',\n                                     scientific = FALSE),\n                     expand = c(0, 0),\n                     limits = c(1.5, 6.5) * 1e+5) +\n  scale_y_discrete(name = NULL, expand = c(0, 0.5)) +\n  theme_minimal() +\n  theme(plot.margin = margin(18, 6, 3, 1.5))\n\n\n\n\n\n\n\n\n연령집단별_자살률.csv (fileEncoding = 'UTF-8')\n2000년~2020년\n\n\n# 2. 연령집단별 자살률\ndata_rate_raw &lt;- read.csv('./data/연령집단별_자살률.csv')\n\n# 나이, 성별 분리\ndata_rate_melt &lt;- data_rate_raw %&gt;%\n  reshape2::melt(id.vars = '연령집단',\n                 variable.name = '년도',\n                 value.name = '자살률') %&gt;%\n  mutate(년도 = gsub('\\\\D', '', 년도) %&gt;% as.integer(),\n         자살률 = 자살률 %&gt;% as.integer())\n\n\nggplot(data_rate_melt, aes(x = 년도, y = 연령집단, fill = 자살률)) +\n  geom_tile(color = 'white', linewidth = 0.25) +\n  scale_fill_viridis_c(option = 'A', begin = 0.05, end = 0.98, limits = c(0, 130),\n                       name = '연령집단 (인구 십만 명당)',\n                       guide = guide_colorbar(direction = 'horizontal',\n                                              label.position = 'bottom',\n                                              title.position = 'top',\n                                              ticks = FALSE,\n                                              barwidth = grid::unit(3.5, 'in'),\n                                              barheight = grid::unit(0.2, 'in'))) +\n  scale_x_continuous(expand = c(0, 0), name = NULL) +\n  scale_y_discrete(name = NULL, position = 'right') +\n  theme_minimal() +\n  theme(axis.line = element_blank(),\n        axis.ticks = element_blank(),\n        panel.grid.major.x = element_blank(),\n        axis.ticks.x =  element_blank(),\n        legend.position = 'top',\n        legend.justification = 'left', \n        legend.title.align = 0.5,\n        legend.title = element_text(size = 10))"
  },
  {
    "objectID": "Data_Visualization.html",
    "href": "Data_Visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nMap in R\n\n\n\n\n\n\n\nVisualization\n\n\nCode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nJun 12, 2023\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\nVisualizing Time Series\n\n\n\n\n\n\n\nVisualization\n\n\nCode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nJun 7, 2023\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\nVisualizing Trends\n\n\n\n\n\n\n\nVisualization\n\n\nCode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nJun 7, 2023\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\nVisualizing Associations among two or more Quantitative Variables\n\n\n\n\n\n\n\nVisualization\n\n\nCode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nJun 5, 2023\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\nDistribution Practice\n\n\n\n\n\n\n\nVisualization\n\n\nCode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nMay 17, 2023\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\nVisualizing proportions\n\n\n\n\n\n\n\nVisualization\n\n\nCode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nMay 17, 2023\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\nVisualizing Nested Proportions\n\n\n\n\n\n\n\nVisualization\n\n\nCode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nMay 17, 2023\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\nMany Distribution\n\n\n\n\n\n\n\nVisualization\n\n\nCode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nMay 8, 2023\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\nQQplot\n\n\n\n\n\n\n\nVisualization\n\n\nCode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nMay 8, 2023\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\nDensity Plot\n\n\n\n\n\n\n\nVisualization\n\n\nCode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nMay 8, 2023\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\nBarplot\n\n\n\n\n\n\n\nVisualization\n\n\nCode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nApr 26, 2023\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\nColor Scales\n\n\n\n\n\n\n\nVisualization\n\n\nCode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nApr 5, 2023\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\nCoordinate systems and axes\n\n\n\n\n\n\n\nVisualization\n\n\nCode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nMar 29, 2023\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\nOBS with ggplot2\n\n\n\n\n\n\n\nVisualization\n\n\nCode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nMar 27, 2023\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\nNCDC Normals with ggplot2\n\n\n\n\n\n\n\nVisualization\n\n\nCode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nMar 22, 2023\n\n\nJinwon Lee\n\n\n\n\n\n\n  \n\n\n\n\nggplot2 Tutorial\n\n\n\n\n\n\n\nVisualization\n\n\nCode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nMar 15, 2023\n\n\nJinwon Lee\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "OpenData_Analysis.html",
    "href": "OpenData_Analysis.html",
    "title": "OpenData Analysis",
    "section": "",
    "text": "No matching items"
  },
  {
    "objectID": "R_Basic.html",
    "href": "R_Basic.html",
    "title": "R Basic",
    "section": "",
    "text": "모두를 위한 R 데이터 분석 입문\n\n\n\n\n2 + 3  # 2 더하기 3\n## [1] 5\n(3 + 6) * 8\n## [1] 72\n2 ^ 3  # 2의 세제곱\n## [1] 8\n8 %% 3\n## [1] 2\n\n\n7 + 4\n## [1] 11\n\n\nlog(10) + 5 # 로그함수\n## [1] 7.302585\nsqrt(25) # 제곱근\n## [1] 5\nmax(5, 3, 2) # 가장 큰 값\n## [1] 5\n\n\na &lt;- 10\nb &lt;- 20\nc &lt;- a+b\nprint(c)\n## [1] 30\n\n\na &lt;- 125\na\n## [1] 125\nprint(a)\n## [1] 125\n\n\na &lt;- 10 # a에 숫자 저장\nb &lt;- 20\na + b # a+b의 결과 출력\n## [1] 30\na &lt;- \"A\" # a에 문자 저장\na + b # a+b의 결과 출력. 에러 발생\n## Error in a + b: 이항연산자에 수치가 아닌 인수입니다\n\n\nx &lt;- c(1, 2, 3) # 숫자형 벡터\ny &lt;- c(\"a\", \"b\", \"c\") # 문자형 벡터\nz &lt;- c(TRUE, TRUE, FALSE, TRUE) # 논리형 벡터\nx ; y ;z\n## [1] 1 2 3\n## [1] \"a\" \"b\" \"c\"\n## [1]  TRUE  TRUE FALSE  TRUE\n\n\nw &lt;- c(1, 2, 3, \"a\", \"b\", \"c\")\nw\n## [1] \"1\" \"2\" \"3\" \"a\" \"b\" \"c\"\n\n\nv1 &lt;- 50:90\nv1\n##  [1] 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74\n## [26] 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90\nv2 &lt;- c(1, 2, 5, 50:90)\nv2\n##  [1]  1  2  5 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71\n## [26] 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90\n\n\nv3 &lt;- seq(1, 101, 3)\nv3\n##  [1]   1   4   7  10  13  16  19  22  25  28  31  34  37  40  43  46  49  52  55\n## [20]  58  61  64  67  70  73  76  79  82  85  88  91  94  97 100\nv4 &lt;- seq(0.1, 1.0, 0.1)\nv4\n##  [1] 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0\n\n\nv5 &lt;- rep(1, times = 5) # 1을 5번 반복\nv5\n## [1] 1 1 1 1 1\nv6 &lt;- rep(1:5, times = 3) # 1에서 5까지 3번 반복\nv6\n##  [1] 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5\nv7 &lt;- rep(c(1, 5, 9), times = 3) # 1, 5, 9를 3번 반복\nv7\n## [1] 1 5 9 1 5 9 1 5 9\nv8 &lt;- rep(1:5, each = 3) # 1에서 5를 각각 3번 반복\nv8\n##  [1] 1 1 1 2 2 2 3 3 3 4 4 4 5 5 5\n\nrep(1:3, each = 3, times = 3)\n##  [1] 1 1 1 2 2 2 3 3 3 1 1 1 2 2 2 3 3 3 1 1 1 2 2 2 3 3 3\nrep(1:3, times = 3, each = 3)\n##  [1] 1 1 1 2 2 2 3 3 3 1 1 1 2 2 2 3 3 3 1 1 1 2 2 2 3 3 3\n\n\nscore &lt;- c(90, 85, 70) # 성적\nscore\n## [1] 90 85 70\nnames(score) # score에 저장된 값들의 이름을 보이시오\n## NULL\nnames(score) &lt;- c(\"John\", \"Tom\", \"Jane\") # 값들에 이름을 부여\nnames(score) # score에 저장된 값들의 이름을 보이시오\n## [1] \"John\" \"Tom\"  \"Jane\"\nscore # 이름과 함께 값이 출력\n## John  Tom Jane \n##   90   85   70\n\n\nd &lt;- c(1, 4, 3, 7, 8)\nd[1]\n## [1] 1\nd[2]\n## [1] 4\nd[3]\n## [1] 3\nd[4]\n## [1] 7\nd[5]\n## [1] 8\nd[6]\n## [1] NA\nd[c(2, 4)]\n## [1] 4 7\n\n\nd &lt;- c(1, 4, 3, 7, 8)\nd[c(1, 3, 5)] # 1, 3, 5번째 값 출력\n## [1] 1 3 8\nd[1:3] # 처음 세 개의 값 출력\n## [1] 1 4 3\nd[seq(1, 5, 2)] # 홀수 번째 값 출력\n## [1] 1 3 8\nd[-2] # 2번째 값 제외하고 출력\n## [1] 1 3 7 8\nd[-c(3:5)] # 3~5번째 값은 제외하고 출력\n## [1] 1 4\n\n\nGNP &lt;- c(2000, 2450, 960)\nGNP\n## [1] 2000 2450  960\nnames(GNP) &lt;- c(\"Korea\", \"Japan\", \"Nepal\")\nGNP\n## Korea Japan Nepal \n##  2000  2450   960\nGNP[1]\n## Korea \n##  2000\nGNP[\"Korea\"]\n## Korea \n##  2000\nGNP_NEW &lt;- GNP[c(\"Korea\", \"Nepal\")]\nGNP_NEW\n## Korea Nepal \n##  2000   960\n\n\nv1 &lt;- c(1, 5, 7, 8, 9)\nv1\n## [1] 1 5 7 8 9\nv1[2] &lt;- 3 # v1의 2번째 값을 3으로 변경\nv1\n## [1] 1 3 7 8 9\nv1[c(1, 5)] &lt;- c(10, 20) # v1의 1, 5번째 값을 각각 10, 20으로 변경\nv1\n## [1] 10  3  7  8 20\n\n\nd &lt;- c(1, 4, 3, 7, 8)\n2 * d\n## [1]  2  8  6 14 16\nd - 5\n## [1] -4 -1 -2  2  3\n3 * d + 4\n## [1]  7 16 13 25 28\n\n\nx &lt;- c(1, 2, 3)\ny &lt;- c(4, 5, 6)\nx + y # 대응하는 원소끼리 더하여 출력\n## [1] 5 7 9\nx * y # 대응하는 원소끼리 곱하여 출력\n## [1]  4 10 18\nz &lt;- x + y # x, y를 더하여 z에 저장\nz\n## [1] 5 7 9\n\n\nd &lt;- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nsum(d) # d에 포함된 값들의 합\n## [1] 55\nsum(2 * d) # d에 포함된 값들에 2를 곱한 후 합한 값\n## [1] 110\nlength(d) # d에 포함된 값들의 개수\n## [1] 10\nmean(d[1:5]) # 1~5번째 값들의 평균\n## [1] 3\nmax(d) # d에 포함된 값들의 최댓값\n## [1] 10\nmin(d) # d에 포함된 값들의 최솟값\n## [1] 1\nsort(d) # 오름차순 정렬\n##  [1]  1  2  3  4  5  6  7  8  9 10\nsort(d, decreasing = FALSE) # 오름차순 정렬\n##  [1]  1  2  3  4  5  6  7  8  9 10\nsort(d, decreasing = TRUE) # 내림차순 정렬\n##  [1] 10  9  8  7  6  5  4  3  2  1\nsort(d, TRUE) # 내림차순 정렬\n##  [1] 10  9  8  7  6  5  4  3  2  1\n\nv1 &lt;- median(d)\nv1\n## [1] 5.5\nv2 &lt;- sum(d) / length(d)\nv2\n## [1] 5.5\nmean(d)\n## [1] 5.5\n\n\nd &lt;- c(1, 2, 3, 4, 5, 6, 7, 8, 9)\nd &gt;= 5\n## [1] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE\nd[d &gt; 5] # 5보다 큰 값\n## [1] 6 7 8 9\nsum(d &gt; 5) # 5보다 큰 값의 개수를 출력\n## [1] 4\nsum(d[d &gt; 5]) # 5보다 큰 값의 합계를 출력\n## [1] 30\nd == 5\n## [1] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n\ncondi &lt;- d &gt; 5 & d &lt; 8 # 조건을 변수에 저장\nd[condi] # 조건에 맞는 값들을 선택\n## [1] 6 7\nd[d &gt; 5 & d &lt; 8]\n## [1] 6 7\n\n\nds &lt;- c(90, 85, 70, 84)\nmy.info &lt;- list(name = 'Tom', age = 60, status = TRUE, score = ds)\nmy.info # 리스트에 저장된 내용을 모두 출력\n## $name\n## [1] \"Tom\"\n## \n## $age\n## [1] 60\n## \n## $status\n## [1] TRUE\n## \n## $score\n## [1] 90 85 70 84\nmy.info[1] # 이름이랑 내용 다 출력\n## $name\n## [1] \"Tom\"\nmy.info[[1]] # 리스트의 첫 번째 값을 출력\n## [1] \"Tom\"\nmy.info$name # 리스트에서 값의 이름이 name인 값을 출력\n## [1] \"Tom\"\nmy.info[[4]] # 리스트의 네 번째 값을 출력\n## [1] 90 85 70 84\n\n\nbt &lt;- c('A', 'B', 'B', 'O', 'AB', 'A') # 문자형 벡터 bt 정의\nbt.new &lt;- factor(bt) # 팩터 bt.new 정의\nbt # 벡터 bt의 내용 출력\n## [1] \"A\"  \"B\"  \"B\"  \"O\"  \"AB\" \"A\"\nbt.new # 팩터 bt.new의 내용 출력\n## [1] A  B  B  O  AB A \n## Levels: A AB B O\nbt[5] # 벡터 bt의 5번째 값 출력\n## [1] \"AB\"\nbt.new[5] # 팩터 bt.new의 5번째 값 출력\n## [1] AB\n## Levels: A AB B O\nlevels(bt.new) # 팩터에 저장된 값의 종류를 출력\n## [1] \"A\"  \"AB\" \"B\"  \"O\"\nas.integer(bt.new) # 팩터의 문자값을 숫자로 바꾸어 출력\n## [1] 1 3 3 4 2 1\nbt.new[7] &lt;- 'B' # 팩터 bt.new의 7번째에 'B' 저장\nbt.new[8] &lt;- 'C' # 팩터 bt.new의 8번째에 'C' 저장\n## Warning in `[&lt;-.factor`(`*tmp*`, 8, value = \"C\"): 요인의 수준(factor level)이\n## 올바르지 않아 NA가 생성되었습니다.\nbt.new # 팩터 bt.new의 내용 출력\n## [1] A    B    B    O    AB   A    B    &lt;NA&gt;\n## Levels: A AB B O\n\n\n\n\n\nz &lt;- matrix(1:20, nrow = 4, ncol = 5)\nz # 매트릭스 z의 내용을 출력\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]    1    5    9   13   17\n## [2,]    2    6   10   14   18\n## [3,]    3    7   11   15   19\n## [4,]    4    8   12   16   20\n\n\nz2 &lt;- matrix(1:20, nrow = 4, ncol = 5, byrow = T)\nz2 # 매트릭스 z2의 내용을 출력\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]    1    2    3    4    5\n## [2,]    6    7    8    9   10\n## [3,]   11   12   13   14   15\n## [4,]   16   17   18   19   20\n\nz &lt;- matrix(1:16, nrow = 4, ncol = 5)\n## Warning in matrix(1:16, nrow = 4, ncol = 5): 데이터의 길이[16]가 열의 개수[5]의\n## 배수가 되지 않습니다\nz\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]    1    5    9   13    1\n## [2,]    2    6   10   14    2\n## [3,]    3    7   11   15    3\n## [4,]    4    8   12   16    4\n\n\nx &lt;- 1:4 # 벡터 x 생성\ny &lt;- 5:8 # 벡터 y 생성\nz &lt;- matrix(1:20, nrow = 4, ncol = 5) # 매트릭스 z 생성\n\nm1 &lt;- cbind(x, y) # x와 y를 열 방향으로 결합하여 매트릭스 생성\nm1 # 매트릭스 m1의 내용을 출력\n##      x y\n## [1,] 1 5\n## [2,] 2 6\n## [3,] 3 7\n## [4,] 4 8\nm2 &lt;- rbind(x, y) # x와 y를 행 방향으로 결합하여 매트릭스 생성\nm2 # 매트릭스 m2의 내용을 출력\n##   [,1] [,2] [,3] [,4]\n## x    1    2    3    4\n## y    5    6    7    8\nm3 &lt;- rbind(m2, x) # m2와 벡터 x를 행 방향으로 결합\nm3 # 매트릭스 m3의 내용을 출력\n##   [,1] [,2] [,3] [,4]\n## x    1    2    3    4\n## y    5    6    7    8\n## x    1    2    3    4\nm4 &lt;- cbind(z, x) # 매트릭스 z와 벡터 x를 열 방향으로 결합\nm4 # 매트릭스 m4의 내용을 출력\n##                   x\n## [1,] 1 5  9 13 17 1\n## [2,] 2 6 10 14 18 2\n## [3,] 3 7 11 15 19 3\n## [4,] 4 8 12 16 20 4\n\nx &lt;- 1:5\nm5 &lt;- cbind(z, x)\n## Warning in cbind(z, x): number of rows of result is not a multiple of vector\n## length (arg 2)\nm5\n##                   x\n## [1,] 1 5  9 13 17 1\n## [2,] 2 6 10 14 18 2\n## [3,] 3 7 11 15 19 3\n## [4,] 4 8 12 16 20 4\n\n\nz &lt;- matrix(1:20, nrow = 4, ncol = 5) # 매트릭스 z 생성\nz # 매트릭스 z의 내용 출력\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]    1    5    9   13   17\n## [2,]    2    6   10   14   18\n## [3,]    3    7   11   15   19\n## [4,]    4    8   12   16   20\n\nz[2, 3] # 2행 3열에 있는 값\n## [1] 10\nz[1, 4] # 1행 4열에 있는 값\n## [1] 13\nz[2, ] # 2행에 있는 모든 값\n## [1]  2  6 10 14 18\nz[, 4] # 4열에 있는 모든 값\n## [1] 13 14 15 16\nz[, ]\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]    1    5    9   13   17\n## [2,]    2    6   10   14   18\n## [3,]    3    7   11   15   19\n## [4,]    4    8   12   16   20\nz\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]    1    5    9   13   17\n## [2,]    2    6   10   14   18\n## [3,]    3    7   11   15   19\n## [4,]    4    8   12   16   20\n\n\nz &lt;- matrix(1:20, nrow = 4, ncol = 5) # 매트릭스 z 생성\nz # 매트릭스 z의 내용 출력\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]    1    5    9   13   17\n## [2,]    2    6   10   14   18\n## [3,]    3    7   11   15   19\n## [4,]    4    8   12   16   20\n\nz[2, 1:3] # 2행의 값 중 1~3열에 있는 값\n## [1]  2  6 10\nz[1, c(1, 2, 4)] # 1행의 값 중 1, 2, 4열에 있는 값\n## [1]  1  5 13\nz[1:2, ] # 1, 2행에 있는 모든 값\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]    1    5    9   13   17\n## [2,]    2    6   10   14   18\nz[, c(1, 4)] # 1, 4열에 있는 모든 값\n##      [,1] [,2]\n## [1,]    1   13\n## [2,]    2   14\n## [3,]    3   15\n## [4,]    4   16\n\n\nscore &lt;- matrix(c(90, 85, 69, 78,\n                  85, 96, 49, 95,\n                  90, 80, 70, 60),\n                nrow = 4,\n                ncol = 3)\nscore\n##      [,1] [,2] [,3]\n## [1,]   90   85   90\n## [2,]   85   96   80\n## [3,]   69   49   70\n## [4,]   78   95   60\nrownames(score) &lt;- c('John', 'Tom', 'Mark', 'Jane')\ncolnames(score) &lt;- c('English', 'Math', 'Science')\nscore\n##      English Math Science\n## John      90   85      90\n## Tom       85   96      80\n## Mark      69   49      70\n## Jane      78   95      60\n\n\nscore['John', 'Math'] # John의 수학 성적\n## [1] 85\nscore['Tom', c('Math', 'Science')] # Tom의 수학, 과학 성적\n##    Math Science \n##      96      80\nscore['Mark', ] # Mark의 모든 과목 성적\n## English    Math Science \n##      69      49      70\nscore[, 'English'] # 모든 학생의 영어 성적\n## John  Tom Mark Jane \n##   90   85   69   78\nrownames(score) # score의 행의 이름\n## [1] \"John\" \"Tom\"  \"Mark\" \"Jane\"\ncolnames(score) # score의 열의 이름\n## [1] \"English\" \"Math\"    \"Science\"\ncolnames(score)[2] # score의 열의 이름 중 두 번째 값\n## [1] \"Math\"\n\n\ncity &lt;- c(\"Seoul\", \"Tokyo\", \"Washington\") # 문자로 이루어진 벡터\nrank &lt;- c(1, 3, 2) # 숫자로 이루어진 벡터\ncity.info &lt;- data.frame(city, rank) # 데이터프레임 생성\ncity.info # city.info의 내용 출력\n##         city rank\n## 1      Seoul    1\n## 2      Tokyo    3\n## 3 Washington    2\n\n\niris\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 1            5.1         3.5          1.4         0.2     setosa\n## 2            4.9         3.0          1.4         0.2     setosa\n## 3            4.7         3.2          1.3         0.2     setosa\n## 4            4.6         3.1          1.5         0.2     setosa\n## 5            5.0         3.6          1.4         0.2     setosa\n## 6            5.4         3.9          1.7         0.4     setosa\n## 7            4.6         3.4          1.4         0.3     setosa\n## 8            5.0         3.4          1.5         0.2     setosa\n## 9            4.4         2.9          1.4         0.2     setosa\n## 10           4.9         3.1          1.5         0.1     setosa\n## 11           5.4         3.7          1.5         0.2     setosa\n## 12           4.8         3.4          1.6         0.2     setosa\n## 13           4.8         3.0          1.4         0.1     setosa\n## 14           4.3         3.0          1.1         0.1     setosa\n## 15           5.8         4.0          1.2         0.2     setosa\n## 16           5.7         4.4          1.5         0.4     setosa\n## 17           5.4         3.9          1.3         0.4     setosa\n## 18           5.1         3.5          1.4         0.3     setosa\n## 19           5.7         3.8          1.7         0.3     setosa\n## 20           5.1         3.8          1.5         0.3     setosa\n## 21           5.4         3.4          1.7         0.2     setosa\n## 22           5.1         3.7          1.5         0.4     setosa\n## 23           4.6         3.6          1.0         0.2     setosa\n## 24           5.1         3.3          1.7         0.5     setosa\n## 25           4.8         3.4          1.9         0.2     setosa\n## 26           5.0         3.0          1.6         0.2     setosa\n## 27           5.0         3.4          1.6         0.4     setosa\n## 28           5.2         3.5          1.5         0.2     setosa\n## 29           5.2         3.4          1.4         0.2     setosa\n## 30           4.7         3.2          1.6         0.2     setosa\n## 31           4.8         3.1          1.6         0.2     setosa\n## 32           5.4         3.4          1.5         0.4     setosa\n## 33           5.2         4.1          1.5         0.1     setosa\n## 34           5.5         4.2          1.4         0.2     setosa\n## 35           4.9         3.1          1.5         0.2     setosa\n## 36           5.0         3.2          1.2         0.2     setosa\n## 37           5.5         3.5          1.3         0.2     setosa\n## 38           4.9         3.6          1.4         0.1     setosa\n## 39           4.4         3.0          1.3         0.2     setosa\n## 40           5.1         3.4          1.5         0.2     setosa\n## 41           5.0         3.5          1.3         0.3     setosa\n## 42           4.5         2.3          1.3         0.3     setosa\n## 43           4.4         3.2          1.3         0.2     setosa\n## 44           5.0         3.5          1.6         0.6     setosa\n## 45           5.1         3.8          1.9         0.4     setosa\n## 46           4.8         3.0          1.4         0.3     setosa\n## 47           5.1         3.8          1.6         0.2     setosa\n## 48           4.6         3.2          1.4         0.2     setosa\n## 49           5.3         3.7          1.5         0.2     setosa\n## 50           5.0         3.3          1.4         0.2     setosa\n## 51           7.0         3.2          4.7         1.4 versicolor\n## 52           6.4         3.2          4.5         1.5 versicolor\n## 53           6.9         3.1          4.9         1.5 versicolor\n## 54           5.5         2.3          4.0         1.3 versicolor\n## 55           6.5         2.8          4.6         1.5 versicolor\n## 56           5.7         2.8          4.5         1.3 versicolor\n## 57           6.3         3.3          4.7         1.6 versicolor\n## 58           4.9         2.4          3.3         1.0 versicolor\n## 59           6.6         2.9          4.6         1.3 versicolor\n## 60           5.2         2.7          3.9         1.4 versicolor\n## 61           5.0         2.0          3.5         1.0 versicolor\n## 62           5.9         3.0          4.2         1.5 versicolor\n## 63           6.0         2.2          4.0         1.0 versicolor\n## 64           6.1         2.9          4.7         1.4 versicolor\n## 65           5.6         2.9          3.6         1.3 versicolor\n## 66           6.7         3.1          4.4         1.4 versicolor\n## 67           5.6         3.0          4.5         1.5 versicolor\n## 68           5.8         2.7          4.1         1.0 versicolor\n## 69           6.2         2.2          4.5         1.5 versicolor\n## 70           5.6         2.5          3.9         1.1 versicolor\n## 71           5.9         3.2          4.8         1.8 versicolor\n## 72           6.1         2.8          4.0         1.3 versicolor\n## 73           6.3         2.5          4.9         1.5 versicolor\n## 74           6.1         2.8          4.7         1.2 versicolor\n## 75           6.4         2.9          4.3         1.3 versicolor\n## 76           6.6         3.0          4.4         1.4 versicolor\n## 77           6.8         2.8          4.8         1.4 versicolor\n## 78           6.7         3.0          5.0         1.7 versicolor\n## 79           6.0         2.9          4.5         1.5 versicolor\n## 80           5.7         2.6          3.5         1.0 versicolor\n## 81           5.5         2.4          3.8         1.1 versicolor\n## 82           5.5         2.4          3.7         1.0 versicolor\n## 83           5.8         2.7          3.9         1.2 versicolor\n## 84           6.0         2.7          5.1         1.6 versicolor\n## 85           5.4         3.0          4.5         1.5 versicolor\n## 86           6.0         3.4          4.5         1.6 versicolor\n## 87           6.7         3.1          4.7         1.5 versicolor\n## 88           6.3         2.3          4.4         1.3 versicolor\n## 89           5.6         3.0          4.1         1.3 versicolor\n## 90           5.5         2.5          4.0         1.3 versicolor\n## 91           5.5         2.6          4.4         1.2 versicolor\n## 92           6.1         3.0          4.6         1.4 versicolor\n## 93           5.8         2.6          4.0         1.2 versicolor\n## 94           5.0         2.3          3.3         1.0 versicolor\n## 95           5.6         2.7          4.2         1.3 versicolor\n## 96           5.7         3.0          4.2         1.2 versicolor\n## 97           5.7         2.9          4.2         1.3 versicolor\n## 98           6.2         2.9          4.3         1.3 versicolor\n## 99           5.1         2.5          3.0         1.1 versicolor\n## 100          5.7         2.8          4.1         1.3 versicolor\n## 101          6.3         3.3          6.0         2.5  virginica\n## 102          5.8         2.7          5.1         1.9  virginica\n## 103          7.1         3.0          5.9         2.1  virginica\n## 104          6.3         2.9          5.6         1.8  virginica\n## 105          6.5         3.0          5.8         2.2  virginica\n## 106          7.6         3.0          6.6         2.1  virginica\n## 107          4.9         2.5          4.5         1.7  virginica\n## 108          7.3         2.9          6.3         1.8  virginica\n## 109          6.7         2.5          5.8         1.8  virginica\n## 110          7.2         3.6          6.1         2.5  virginica\n## 111          6.5         3.2          5.1         2.0  virginica\n## 112          6.4         2.7          5.3         1.9  virginica\n## 113          6.8         3.0          5.5         2.1  virginica\n## 114          5.7         2.5          5.0         2.0  virginica\n## 115          5.8         2.8          5.1         2.4  virginica\n## 116          6.4         3.2          5.3         2.3  virginica\n## 117          6.5         3.0          5.5         1.8  virginica\n## 118          7.7         3.8          6.7         2.2  virginica\n## 119          7.7         2.6          6.9         2.3  virginica\n## 120          6.0         2.2          5.0         1.5  virginica\n## 121          6.9         3.2          5.7         2.3  virginica\n## 122          5.6         2.8          4.9         2.0  virginica\n## 123          7.7         2.8          6.7         2.0  virginica\n## 124          6.3         2.7          4.9         1.8  virginica\n## 125          6.7         3.3          5.7         2.1  virginica\n## 126          7.2         3.2          6.0         1.8  virginica\n## 127          6.2         2.8          4.8         1.8  virginica\n## 128          6.1         3.0          4.9         1.8  virginica\n## 129          6.4         2.8          5.6         2.1  virginica\n## 130          7.2         3.0          5.8         1.6  virginica\n## 131          7.4         2.8          6.1         1.9  virginica\n## 132          7.9         3.8          6.4         2.0  virginica\n## 133          6.4         2.8          5.6         2.2  virginica\n## 134          6.3         2.8          5.1         1.5  virginica\n## 135          6.1         2.6          5.6         1.4  virginica\n## 136          7.7         3.0          6.1         2.3  virginica\n## 137          6.3         3.4          5.6         2.4  virginica\n## 138          6.4         3.1          5.5         1.8  virginica\n## 139          6.0         3.0          4.8         1.8  virginica\n## 140          6.9         3.1          5.4         2.1  virginica\n## 141          6.7         3.1          5.6         2.4  virginica\n## 142          6.9         3.1          5.1         2.3  virginica\n## 143          5.8         2.7          5.1         1.9  virginica\n## 144          6.8         3.2          5.9         2.3  virginica\n## 145          6.7         3.3          5.7         2.5  virginica\n## 146          6.7         3.0          5.2         2.3  virginica\n## 147          6.3         2.5          5.0         1.9  virginica\n## 148          6.5         3.0          5.2         2.0  virginica\n## 149          6.2         3.4          5.4         2.3  virginica\n## 150          5.9         3.0          5.1         1.8  virginica\niris[, c(1:2)] # 1, 2열의 모든 데이터\n##     Sepal.Length Sepal.Width\n## 1            5.1         3.5\n## 2            4.9         3.0\n## 3            4.7         3.2\n## 4            4.6         3.1\n## 5            5.0         3.6\n## 6            5.4         3.9\n## 7            4.6         3.4\n## 8            5.0         3.4\n## 9            4.4         2.9\n## 10           4.9         3.1\n## 11           5.4         3.7\n## 12           4.8         3.4\n## 13           4.8         3.0\n## 14           4.3         3.0\n## 15           5.8         4.0\n## 16           5.7         4.4\n## 17           5.4         3.9\n## 18           5.1         3.5\n## 19           5.7         3.8\n## 20           5.1         3.8\n## 21           5.4         3.4\n## 22           5.1         3.7\n## 23           4.6         3.6\n## 24           5.1         3.3\n## 25           4.8         3.4\n## 26           5.0         3.0\n## 27           5.0         3.4\n## 28           5.2         3.5\n## 29           5.2         3.4\n## 30           4.7         3.2\n## 31           4.8         3.1\n## 32           5.4         3.4\n## 33           5.2         4.1\n## 34           5.5         4.2\n## 35           4.9         3.1\n## 36           5.0         3.2\n## 37           5.5         3.5\n## 38           4.9         3.6\n## 39           4.4         3.0\n## 40           5.1         3.4\n## 41           5.0         3.5\n## 42           4.5         2.3\n## 43           4.4         3.2\n## 44           5.0         3.5\n## 45           5.1         3.8\n## 46           4.8         3.0\n## 47           5.1         3.8\n## 48           4.6         3.2\n## 49           5.3         3.7\n## 50           5.0         3.3\n## 51           7.0         3.2\n## 52           6.4         3.2\n## 53           6.9         3.1\n## 54           5.5         2.3\n## 55           6.5         2.8\n## 56           5.7         2.8\n## 57           6.3         3.3\n## 58           4.9         2.4\n## 59           6.6         2.9\n## 60           5.2         2.7\n## 61           5.0         2.0\n## 62           5.9         3.0\n## 63           6.0         2.2\n## 64           6.1         2.9\n## 65           5.6         2.9\n## 66           6.7         3.1\n## 67           5.6         3.0\n## 68           5.8         2.7\n## 69           6.2         2.2\n## 70           5.6         2.5\n## 71           5.9         3.2\n## 72           6.1         2.8\n## 73           6.3         2.5\n## 74           6.1         2.8\n## 75           6.4         2.9\n## 76           6.6         3.0\n## 77           6.8         2.8\n## 78           6.7         3.0\n## 79           6.0         2.9\n## 80           5.7         2.6\n## 81           5.5         2.4\n## 82           5.5         2.4\n## 83           5.8         2.7\n## 84           6.0         2.7\n## 85           5.4         3.0\n## 86           6.0         3.4\n## 87           6.7         3.1\n## 88           6.3         2.3\n## 89           5.6         3.0\n## 90           5.5         2.5\n## 91           5.5         2.6\n## 92           6.1         3.0\n## 93           5.8         2.6\n## 94           5.0         2.3\n## 95           5.6         2.7\n## 96           5.7         3.0\n## 97           5.7         2.9\n## 98           6.2         2.9\n## 99           5.1         2.5\n## 100          5.7         2.8\n## 101          6.3         3.3\n## 102          5.8         2.7\n## 103          7.1         3.0\n## 104          6.3         2.9\n## 105          6.5         3.0\n## 106          7.6         3.0\n## 107          4.9         2.5\n## 108          7.3         2.9\n## 109          6.7         2.5\n## 110          7.2         3.6\n## 111          6.5         3.2\n## 112          6.4         2.7\n## 113          6.8         3.0\n## 114          5.7         2.5\n## 115          5.8         2.8\n## 116          6.4         3.2\n## 117          6.5         3.0\n## 118          7.7         3.8\n## 119          7.7         2.6\n## 120          6.0         2.2\n## 121          6.9         3.2\n## 122          5.6         2.8\n## 123          7.7         2.8\n## 124          6.3         2.7\n## 125          6.7         3.3\n## 126          7.2         3.2\n## 127          6.2         2.8\n## 128          6.1         3.0\n## 129          6.4         2.8\n## 130          7.2         3.0\n## 131          7.4         2.8\n## 132          7.9         3.8\n## 133          6.4         2.8\n## 134          6.3         2.8\n## 135          6.1         2.6\n## 136          7.7         3.0\n## 137          6.3         3.4\n## 138          6.4         3.1\n## 139          6.0         3.0\n## 140          6.9         3.1\n## 141          6.7         3.1\n## 142          6.9         3.1\n## 143          5.8         2.7\n## 144          6.8         3.2\n## 145          6.7         3.3\n## 146          6.7         3.0\n## 147          6.3         2.5\n## 148          6.5         3.0\n## 149          6.2         3.4\n## 150          5.9         3.0\niris[, c(1, 3, 5)] # 1, 3, 5열의 모든 데이터\n##     Sepal.Length Petal.Length    Species\n## 1            5.1          1.4     setosa\n## 2            4.9          1.4     setosa\n## 3            4.7          1.3     setosa\n## 4            4.6          1.5     setosa\n## 5            5.0          1.4     setosa\n## 6            5.4          1.7     setosa\n## 7            4.6          1.4     setosa\n## 8            5.0          1.5     setosa\n## 9            4.4          1.4     setosa\n## 10           4.9          1.5     setosa\n## 11           5.4          1.5     setosa\n## 12           4.8          1.6     setosa\n## 13           4.8          1.4     setosa\n## 14           4.3          1.1     setosa\n## 15           5.8          1.2     setosa\n## 16           5.7          1.5     setosa\n## 17           5.4          1.3     setosa\n## 18           5.1          1.4     setosa\n## 19           5.7          1.7     setosa\n## 20           5.1          1.5     setosa\n## 21           5.4          1.7     setosa\n## 22           5.1          1.5     setosa\n## 23           4.6          1.0     setosa\n## 24           5.1          1.7     setosa\n## 25           4.8          1.9     setosa\n## 26           5.0          1.6     setosa\n## 27           5.0          1.6     setosa\n## 28           5.2          1.5     setosa\n## 29           5.2          1.4     setosa\n## 30           4.7          1.6     setosa\n## 31           4.8          1.6     setosa\n## 32           5.4          1.5     setosa\n## 33           5.2          1.5     setosa\n## 34           5.5          1.4     setosa\n## 35           4.9          1.5     setosa\n## 36           5.0          1.2     setosa\n## 37           5.5          1.3     setosa\n## 38           4.9          1.4     setosa\n## 39           4.4          1.3     setosa\n## 40           5.1          1.5     setosa\n## 41           5.0          1.3     setosa\n## 42           4.5          1.3     setosa\n## 43           4.4          1.3     setosa\n## 44           5.0          1.6     setosa\n## 45           5.1          1.9     setosa\n## 46           4.8          1.4     setosa\n## 47           5.1          1.6     setosa\n## 48           4.6          1.4     setosa\n## 49           5.3          1.5     setosa\n## 50           5.0          1.4     setosa\n## 51           7.0          4.7 versicolor\n## 52           6.4          4.5 versicolor\n## 53           6.9          4.9 versicolor\n## 54           5.5          4.0 versicolor\n## 55           6.5          4.6 versicolor\n## 56           5.7          4.5 versicolor\n## 57           6.3          4.7 versicolor\n## 58           4.9          3.3 versicolor\n## 59           6.6          4.6 versicolor\n## 60           5.2          3.9 versicolor\n## 61           5.0          3.5 versicolor\n## 62           5.9          4.2 versicolor\n## 63           6.0          4.0 versicolor\n## 64           6.1          4.7 versicolor\n## 65           5.6          3.6 versicolor\n## 66           6.7          4.4 versicolor\n## 67           5.6          4.5 versicolor\n## 68           5.8          4.1 versicolor\n## 69           6.2          4.5 versicolor\n## 70           5.6          3.9 versicolor\n## 71           5.9          4.8 versicolor\n## 72           6.1          4.0 versicolor\n## 73           6.3          4.9 versicolor\n## 74           6.1          4.7 versicolor\n## 75           6.4          4.3 versicolor\n## 76           6.6          4.4 versicolor\n## 77           6.8          4.8 versicolor\n## 78           6.7          5.0 versicolor\n## 79           6.0          4.5 versicolor\n## 80           5.7          3.5 versicolor\n## 81           5.5          3.8 versicolor\n## 82           5.5          3.7 versicolor\n## 83           5.8          3.9 versicolor\n## 84           6.0          5.1 versicolor\n## 85           5.4          4.5 versicolor\n## 86           6.0          4.5 versicolor\n## 87           6.7          4.7 versicolor\n## 88           6.3          4.4 versicolor\n## 89           5.6          4.1 versicolor\n## 90           5.5          4.0 versicolor\n## 91           5.5          4.4 versicolor\n## 92           6.1          4.6 versicolor\n## 93           5.8          4.0 versicolor\n## 94           5.0          3.3 versicolor\n## 95           5.6          4.2 versicolor\n## 96           5.7          4.2 versicolor\n## 97           5.7          4.2 versicolor\n## 98           6.2          4.3 versicolor\n## 99           5.1          3.0 versicolor\n## 100          5.7          4.1 versicolor\n## 101          6.3          6.0  virginica\n## 102          5.8          5.1  virginica\n## 103          7.1          5.9  virginica\n## 104          6.3          5.6  virginica\n## 105          6.5          5.8  virginica\n## 106          7.6          6.6  virginica\n## 107          4.9          4.5  virginica\n## 108          7.3          6.3  virginica\n## 109          6.7          5.8  virginica\n## 110          7.2          6.1  virginica\n## 111          6.5          5.1  virginica\n## 112          6.4          5.3  virginica\n## 113          6.8          5.5  virginica\n## 114          5.7          5.0  virginica\n## 115          5.8          5.1  virginica\n## 116          6.4          5.3  virginica\n## 117          6.5          5.5  virginica\n## 118          7.7          6.7  virginica\n## 119          7.7          6.9  virginica\n## 120          6.0          5.0  virginica\n## 121          6.9          5.7  virginica\n## 122          5.6          4.9  virginica\n## 123          7.7          6.7  virginica\n## 124          6.3          4.9  virginica\n## 125          6.7          5.7  virginica\n## 126          7.2          6.0  virginica\n## 127          6.2          4.8  virginica\n## 128          6.1          4.9  virginica\n## 129          6.4          5.6  virginica\n## 130          7.2          5.8  virginica\n## 131          7.4          6.1  virginica\n## 132          7.9          6.4  virginica\n## 133          6.4          5.6  virginica\n## 134          6.3          5.1  virginica\n## 135          6.1          5.6  virginica\n## 136          7.7          6.1  virginica\n## 137          6.3          5.6  virginica\n## 138          6.4          5.5  virginica\n## 139          6.0          4.8  virginica\n## 140          6.9          5.4  virginica\n## 141          6.7          5.6  virginica\n## 142          6.9          5.1  virginica\n## 143          5.8          5.1  virginica\n## 144          6.8          5.9  virginica\n## 145          6.7          5.7  virginica\n## 146          6.7          5.2  virginica\n## 147          6.3          5.0  virginica\n## 148          6.5          5.2  virginica\n## 149          6.2          5.4  virginica\n## 150          5.9          5.1  virginica\niris[, c(\"Sepal.Length\", \"Species\")] # 1, 5열의 모든 데이터\n##     Sepal.Length    Species\n## 1            5.1     setosa\n## 2            4.9     setosa\n## 3            4.7     setosa\n## 4            4.6     setosa\n## 5            5.0     setosa\n## 6            5.4     setosa\n## 7            4.6     setosa\n## 8            5.0     setosa\n## 9            4.4     setosa\n## 10           4.9     setosa\n## 11           5.4     setosa\n## 12           4.8     setosa\n## 13           4.8     setosa\n## 14           4.3     setosa\n## 15           5.8     setosa\n## 16           5.7     setosa\n## 17           5.4     setosa\n## 18           5.1     setosa\n## 19           5.7     setosa\n## 20           5.1     setosa\n## 21           5.4     setosa\n## 22           5.1     setosa\n## 23           4.6     setosa\n## 24           5.1     setosa\n## 25           4.8     setosa\n## 26           5.0     setosa\n## 27           5.0     setosa\n## 28           5.2     setosa\n## 29           5.2     setosa\n## 30           4.7     setosa\n## 31           4.8     setosa\n## 32           5.4     setosa\n## 33           5.2     setosa\n## 34           5.5     setosa\n## 35           4.9     setosa\n## 36           5.0     setosa\n## 37           5.5     setosa\n## 38           4.9     setosa\n## 39           4.4     setosa\n## 40           5.1     setosa\n## 41           5.0     setosa\n## 42           4.5     setosa\n## 43           4.4     setosa\n## 44           5.0     setosa\n## 45           5.1     setosa\n## 46           4.8     setosa\n## 47           5.1     setosa\n## 48           4.6     setosa\n## 49           5.3     setosa\n## 50           5.0     setosa\n## 51           7.0 versicolor\n## 52           6.4 versicolor\n## 53           6.9 versicolor\n## 54           5.5 versicolor\n## 55           6.5 versicolor\n## 56           5.7 versicolor\n## 57           6.3 versicolor\n## 58           4.9 versicolor\n## 59           6.6 versicolor\n## 60           5.2 versicolor\n## 61           5.0 versicolor\n## 62           5.9 versicolor\n## 63           6.0 versicolor\n## 64           6.1 versicolor\n## 65           5.6 versicolor\n## 66           6.7 versicolor\n## 67           5.6 versicolor\n## 68           5.8 versicolor\n## 69           6.2 versicolor\n## 70           5.6 versicolor\n## 71           5.9 versicolor\n## 72           6.1 versicolor\n## 73           6.3 versicolor\n## 74           6.1 versicolor\n## 75           6.4 versicolor\n## 76           6.6 versicolor\n## 77           6.8 versicolor\n## 78           6.7 versicolor\n## 79           6.0 versicolor\n## 80           5.7 versicolor\n## 81           5.5 versicolor\n## 82           5.5 versicolor\n## 83           5.8 versicolor\n## 84           6.0 versicolor\n## 85           5.4 versicolor\n## 86           6.0 versicolor\n## 87           6.7 versicolor\n## 88           6.3 versicolor\n## 89           5.6 versicolor\n## 90           5.5 versicolor\n## 91           5.5 versicolor\n## 92           6.1 versicolor\n## 93           5.8 versicolor\n## 94           5.0 versicolor\n## 95           5.6 versicolor\n## 96           5.7 versicolor\n## 97           5.7 versicolor\n## 98           6.2 versicolor\n## 99           5.1 versicolor\n## 100          5.7 versicolor\n## 101          6.3  virginica\n## 102          5.8  virginica\n## 103          7.1  virginica\n## 104          6.3  virginica\n## 105          6.5  virginica\n## 106          7.6  virginica\n## 107          4.9  virginica\n## 108          7.3  virginica\n## 109          6.7  virginica\n## 110          7.2  virginica\n## 111          6.5  virginica\n## 112          6.4  virginica\n## 113          6.8  virginica\n## 114          5.7  virginica\n## 115          5.8  virginica\n## 116          6.4  virginica\n## 117          6.5  virginica\n## 118          7.7  virginica\n## 119          7.7  virginica\n## 120          6.0  virginica\n## 121          6.9  virginica\n## 122          5.6  virginica\n## 123          7.7  virginica\n## 124          6.3  virginica\n## 125          6.7  virginica\n## 126          7.2  virginica\n## 127          6.2  virginica\n## 128          6.1  virginica\n## 129          6.4  virginica\n## 130          7.2  virginica\n## 131          7.4  virginica\n## 132          7.9  virginica\n## 133          6.4  virginica\n## 134          6.3  virginica\n## 135          6.1  virginica\n## 136          7.7  virginica\n## 137          6.3  virginica\n## 138          6.4  virginica\n## 139          6.0  virginica\n## 140          6.9  virginica\n## 141          6.7  virginica\n## 142          6.9  virginica\n## 143          5.8  virginica\n## 144          6.8  virginica\n## 145          6.7  virginica\n## 146          6.7  virginica\n## 147          6.3  virginica\n## 148          6.5  virginica\n## 149          6.2  virginica\n## 150          5.9  virginica\niris[1:5, ] # 1~5행의 모든 데이터\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1          5.1         3.5          1.4         0.2  setosa\n## 2          4.9         3.0          1.4         0.2  setosa\n## 3          4.7         3.2          1.3         0.2  setosa\n## 4          4.6         3.1          1.5         0.2  setosa\n## 5          5.0         3.6          1.4         0.2  setosa\niris[1:5, c(1, 3)] # 1~5행의 데이터 중 1, 3열의 데이터\n##   Sepal.Length Petal.Length\n## 1          5.1          1.4\n## 2          4.9          1.4\n## 3          4.7          1.3\n## 4          4.6          1.5\n## 5          5.0          1.4\n\n\ndim(iris) # 행과 열의 개수 출력\n## [1] 150   5\nnrow(iris) # 행의 개수 출력\n## [1] 150\nncol(iris) # 열의 개수 출력\n## [1] 5\ncolnames(iris) # 열 이름 출력, names()와 결과 동일\n## [1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"\nhead(iris) # 데이터셋의 앞부분 일부 출력\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1          5.1         3.5          1.4         0.2  setosa\n## 2          4.9         3.0          1.4         0.2  setosa\n## 3          4.7         3.2          1.3         0.2  setosa\n## 4          4.6         3.1          1.5         0.2  setosa\n## 5          5.0         3.6          1.4         0.2  setosa\n## 6          5.4         3.9          1.7         0.4  setosa\ntail(iris) # 데이터셋의 뒷부분 일부 출력\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n## 145          6.7         3.3          5.7         2.5 virginica\n## 146          6.7         3.0          5.2         2.3 virginica\n## 147          6.3         2.5          5.0         1.9 virginica\n## 148          6.5         3.0          5.2         2.0 virginica\n## 149          6.2         3.4          5.4         2.3 virginica\n## 150          5.9         3.0          5.1         1.8 virginica\n\nhead(iris, 10)\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1           5.1         3.5          1.4         0.2  setosa\n## 2           4.9         3.0          1.4         0.2  setosa\n## 3           4.7         3.2          1.3         0.2  setosa\n## 4           4.6         3.1          1.5         0.2  setosa\n## 5           5.0         3.6          1.4         0.2  setosa\n## 6           5.4         3.9          1.7         0.4  setosa\n## 7           4.6         3.4          1.4         0.3  setosa\n## 8           5.0         3.4          1.5         0.2  setosa\n## 9           4.4         2.9          1.4         0.2  setosa\n## 10          4.9         3.1          1.5         0.1  setosa\ntail(iris, 20)\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n## 131          7.4         2.8          6.1         1.9 virginica\n## 132          7.9         3.8          6.4         2.0 virginica\n## 133          6.4         2.8          5.6         2.2 virginica\n## 134          6.3         2.8          5.1         1.5 virginica\n## 135          6.1         2.6          5.6         1.4 virginica\n## 136          7.7         3.0          6.1         2.3 virginica\n## 137          6.3         3.4          5.6         2.4 virginica\n## 138          6.4         3.1          5.5         1.8 virginica\n## 139          6.0         3.0          4.8         1.8 virginica\n## 140          6.9         3.1          5.4         2.1 virginica\n## 141          6.7         3.1          5.6         2.4 virginica\n## 142          6.9         3.1          5.1         2.3 virginica\n## 143          5.8         2.7          5.1         1.9 virginica\n## 144          6.8         3.2          5.9         2.3 virginica\n## 145          6.7         3.3          5.7         2.5 virginica\n## 146          6.7         3.0          5.2         2.3 virginica\n## 147          6.3         2.5          5.0         1.9 virginica\n## 148          6.5         3.0          5.2         2.0 virginica\n## 149          6.2         3.4          5.4         2.3 virginica\n## 150          5.9         3.0          5.1         1.8 virginica\n\n\nstr(iris) # 데이터셋 요약 정보 보기\n## 'data.frame':    150 obs. of  5 variables:\n##  $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n##  $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n##  $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n##  $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n##  $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\niris[, 5] # 품종 데이터 보기\n##   [1] setosa     setosa     setosa     setosa     setosa     setosa    \n##   [7] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [13] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [19] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [25] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [31] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [37] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [43] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [49] setosa     setosa     versicolor versicolor versicolor versicolor\n##  [55] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [61] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [67] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [73] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [79] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [85] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [91] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [97] versicolor versicolor versicolor versicolor virginica  virginica \n## [103] virginica  virginica  virginica  virginica  virginica  virginica \n## [109] virginica  virginica  virginica  virginica  virginica  virginica \n## [115] virginica  virginica  virginica  virginica  virginica  virginica \n## [121] virginica  virginica  virginica  virginica  virginica  virginica \n## [127] virginica  virginica  virginica  virginica  virginica  virginica \n## [133] virginica  virginica  virginica  virginica  virginica  virginica \n## [139] virginica  virginica  virginica  virginica  virginica  virginica \n## [145] virginica  virginica  virginica  virginica  virginica  virginica \n## Levels: setosa versicolor virginica\nunique(iris[, 5]) # 품종의 종류 보기(중복 제거)\n## [1] setosa     versicolor virginica \n## Levels: setosa versicolor virginica\ntable(iris[, \"Species\"]) # 품종의 종류별 행의 개수 세기\n## \n##     setosa versicolor  virginica \n##         50         50         50\n\n\niris[, -5]\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width\n## 1            5.1         3.5          1.4         0.2\n## 2            4.9         3.0          1.4         0.2\n## 3            4.7         3.2          1.3         0.2\n## 4            4.6         3.1          1.5         0.2\n## 5            5.0         3.6          1.4         0.2\n## 6            5.4         3.9          1.7         0.4\n## 7            4.6         3.4          1.4         0.3\n## 8            5.0         3.4          1.5         0.2\n## 9            4.4         2.9          1.4         0.2\n## 10           4.9         3.1          1.5         0.1\n## 11           5.4         3.7          1.5         0.2\n## 12           4.8         3.4          1.6         0.2\n## 13           4.8         3.0          1.4         0.1\n## 14           4.3         3.0          1.1         0.1\n## 15           5.8         4.0          1.2         0.2\n## 16           5.7         4.4          1.5         0.4\n## 17           5.4         3.9          1.3         0.4\n## 18           5.1         3.5          1.4         0.3\n## 19           5.7         3.8          1.7         0.3\n## 20           5.1         3.8          1.5         0.3\n## 21           5.4         3.4          1.7         0.2\n## 22           5.1         3.7          1.5         0.4\n## 23           4.6         3.6          1.0         0.2\n## 24           5.1         3.3          1.7         0.5\n## 25           4.8         3.4          1.9         0.2\n## 26           5.0         3.0          1.6         0.2\n## 27           5.0         3.4          1.6         0.4\n## 28           5.2         3.5          1.5         0.2\n## 29           5.2         3.4          1.4         0.2\n## 30           4.7         3.2          1.6         0.2\n## 31           4.8         3.1          1.6         0.2\n## 32           5.4         3.4          1.5         0.4\n## 33           5.2         4.1          1.5         0.1\n## 34           5.5         4.2          1.4         0.2\n## 35           4.9         3.1          1.5         0.2\n## 36           5.0         3.2          1.2         0.2\n## 37           5.5         3.5          1.3         0.2\n## 38           4.9         3.6          1.4         0.1\n## 39           4.4         3.0          1.3         0.2\n## 40           5.1         3.4          1.5         0.2\n## 41           5.0         3.5          1.3         0.3\n## 42           4.5         2.3          1.3         0.3\n## 43           4.4         3.2          1.3         0.2\n## 44           5.0         3.5          1.6         0.6\n## 45           5.1         3.8          1.9         0.4\n## 46           4.8         3.0          1.4         0.3\n## 47           5.1         3.8          1.6         0.2\n## 48           4.6         3.2          1.4         0.2\n## 49           5.3         3.7          1.5         0.2\n## 50           5.0         3.3          1.4         0.2\n## 51           7.0         3.2          4.7         1.4\n## 52           6.4         3.2          4.5         1.5\n## 53           6.9         3.1          4.9         1.5\n## 54           5.5         2.3          4.0         1.3\n## 55           6.5         2.8          4.6         1.5\n## 56           5.7         2.8          4.5         1.3\n## 57           6.3         3.3          4.7         1.6\n## 58           4.9         2.4          3.3         1.0\n## 59           6.6         2.9          4.6         1.3\n## 60           5.2         2.7          3.9         1.4\n## 61           5.0         2.0          3.5         1.0\n## 62           5.9         3.0          4.2         1.5\n## 63           6.0         2.2          4.0         1.0\n## 64           6.1         2.9          4.7         1.4\n## 65           5.6         2.9          3.6         1.3\n## 66           6.7         3.1          4.4         1.4\n## 67           5.6         3.0          4.5         1.5\n## 68           5.8         2.7          4.1         1.0\n## 69           6.2         2.2          4.5         1.5\n## 70           5.6         2.5          3.9         1.1\n## 71           5.9         3.2          4.8         1.8\n## 72           6.1         2.8          4.0         1.3\n## 73           6.3         2.5          4.9         1.5\n## 74           6.1         2.8          4.7         1.2\n## 75           6.4         2.9          4.3         1.3\n## 76           6.6         3.0          4.4         1.4\n## 77           6.8         2.8          4.8         1.4\n## 78           6.7         3.0          5.0         1.7\n## 79           6.0         2.9          4.5         1.5\n## 80           5.7         2.6          3.5         1.0\n## 81           5.5         2.4          3.8         1.1\n## 82           5.5         2.4          3.7         1.0\n## 83           5.8         2.7          3.9         1.2\n## 84           6.0         2.7          5.1         1.6\n## 85           5.4         3.0          4.5         1.5\n## 86           6.0         3.4          4.5         1.6\n## 87           6.7         3.1          4.7         1.5\n## 88           6.3         2.3          4.4         1.3\n## 89           5.6         3.0          4.1         1.3\n## 90           5.5         2.5          4.0         1.3\n## 91           5.5         2.6          4.4         1.2\n## 92           6.1         3.0          4.6         1.4\n## 93           5.8         2.6          4.0         1.2\n## 94           5.0         2.3          3.3         1.0\n## 95           5.6         2.7          4.2         1.3\n## 96           5.7         3.0          4.2         1.2\n## 97           5.7         2.9          4.2         1.3\n## 98           6.2         2.9          4.3         1.3\n## 99           5.1         2.5          3.0         1.1\n## 100          5.7         2.8          4.1         1.3\n## 101          6.3         3.3          6.0         2.5\n## 102          5.8         2.7          5.1         1.9\n## 103          7.1         3.0          5.9         2.1\n## 104          6.3         2.9          5.6         1.8\n## 105          6.5         3.0          5.8         2.2\n## 106          7.6         3.0          6.6         2.1\n## 107          4.9         2.5          4.5         1.7\n## 108          7.3         2.9          6.3         1.8\n## 109          6.7         2.5          5.8         1.8\n## 110          7.2         3.6          6.1         2.5\n## 111          6.5         3.2          5.1         2.0\n## 112          6.4         2.7          5.3         1.9\n## 113          6.8         3.0          5.5         2.1\n## 114          5.7         2.5          5.0         2.0\n## 115          5.8         2.8          5.1         2.4\n## 116          6.4         3.2          5.3         2.3\n## 117          6.5         3.0          5.5         1.8\n## 118          7.7         3.8          6.7         2.2\n## 119          7.7         2.6          6.9         2.3\n## 120          6.0         2.2          5.0         1.5\n## 121          6.9         3.2          5.7         2.3\n## 122          5.6         2.8          4.9         2.0\n## 123          7.7         2.8          6.7         2.0\n## 124          6.3         2.7          4.9         1.8\n## 125          6.7         3.3          5.7         2.1\n## 126          7.2         3.2          6.0         1.8\n## 127          6.2         2.8          4.8         1.8\n## 128          6.1         3.0          4.9         1.8\n## 129          6.4         2.8          5.6         2.1\n## 130          7.2         3.0          5.8         1.6\n## 131          7.4         2.8          6.1         1.9\n## 132          7.9         3.8          6.4         2.0\n## 133          6.4         2.8          5.6         2.2\n## 134          6.3         2.8          5.1         1.5\n## 135          6.1         2.6          5.6         1.4\n## 136          7.7         3.0          6.1         2.3\n## 137          6.3         3.4          5.6         2.4\n## 138          6.4         3.1          5.5         1.8\n## 139          6.0         3.0          4.8         1.8\n## 140          6.9         3.1          5.4         2.1\n## 141          6.7         3.1          5.6         2.4\n## 142          6.9         3.1          5.1         2.3\n## 143          5.8         2.7          5.1         1.9\n## 144          6.8         3.2          5.9         2.3\n## 145          6.7         3.3          5.7         2.5\n## 146          6.7         3.0          5.2         2.3\n## 147          6.3         2.5          5.0         1.9\n## 148          6.5         3.0          5.2         2.0\n## 149          6.2         3.4          5.4         2.3\n## 150          5.9         3.0          5.1         1.8\ncolSums(iris[, -5]) # 열별 합계\n## Sepal.Length  Sepal.Width Petal.Length  Petal.Width \n##        876.5        458.6        563.7        179.9\ncolMeans(iris[, -5]) # 열별 평균\n## Sepal.Length  Sepal.Width Petal.Length  Petal.Width \n##     5.843333     3.057333     3.758000     1.199333\nrowSums(iris[, -5]) # 행별 합계\n##   [1] 10.2  9.5  9.4  9.4 10.2 11.4  9.7 10.1  8.9  9.6 10.8 10.0  9.3  8.5 11.2\n##  [16] 12.0 11.0 10.3 11.5 10.7 10.7 10.7  9.4 10.6 10.3  9.8 10.4 10.4 10.2  9.7\n##  [31]  9.7 10.7 10.9 11.3  9.7  9.6 10.5 10.0  8.9 10.2 10.1  8.4  9.1 10.7 11.2\n##  [46]  9.5 10.7  9.4 10.7  9.9 16.3 15.6 16.4 13.1 15.4 14.3 15.9 11.6 15.4 13.2\n##  [61] 11.5 14.6 13.2 15.1 13.4 15.6 14.6 13.6 14.4 13.1 15.7 14.2 15.2 14.8 14.9\n##  [76] 15.4 15.8 16.4 14.9 12.8 12.8 12.6 13.6 15.4 14.4 15.5 16.0 14.3 14.0 13.3\n##  [91] 13.7 15.1 13.6 11.6 13.8 14.1 14.1 14.7 11.7 13.9 18.1 15.5 18.1 16.6 17.5\n## [106] 19.3 13.6 18.3 16.8 19.4 16.8 16.3 17.4 15.2 16.1 17.2 16.8 20.4 19.5 14.7\n## [121] 18.1 15.3 19.2 15.7 17.8 18.2 15.6 15.8 16.9 17.6 18.2 20.1 17.0 15.7 15.7\n## [136] 19.1 17.7 16.8 15.6 17.5 17.8 17.4 15.5 18.2 18.2 17.2 15.7 16.7 17.3 15.8\nrowMeans(iris[, -5]) # 행별 평균\n##   [1] 2.550 2.375 2.350 2.350 2.550 2.850 2.425 2.525 2.225 2.400 2.700 2.500\n##  [13] 2.325 2.125 2.800 3.000 2.750 2.575 2.875 2.675 2.675 2.675 2.350 2.650\n##  [25] 2.575 2.450 2.600 2.600 2.550 2.425 2.425 2.675 2.725 2.825 2.425 2.400\n##  [37] 2.625 2.500 2.225 2.550 2.525 2.100 2.275 2.675 2.800 2.375 2.675 2.350\n##  [49] 2.675 2.475 4.075 3.900 4.100 3.275 3.850 3.575 3.975 2.900 3.850 3.300\n##  [61] 2.875 3.650 3.300 3.775 3.350 3.900 3.650 3.400 3.600 3.275 3.925 3.550\n##  [73] 3.800 3.700 3.725 3.850 3.950 4.100 3.725 3.200 3.200 3.150 3.400 3.850\n##  [85] 3.600 3.875 4.000 3.575 3.500 3.325 3.425 3.775 3.400 2.900 3.450 3.525\n##  [97] 3.525 3.675 2.925 3.475 4.525 3.875 4.525 4.150 4.375 4.825 3.400 4.575\n## [109] 4.200 4.850 4.200 4.075 4.350 3.800 4.025 4.300 4.200 5.100 4.875 3.675\n## [121] 4.525 3.825 4.800 3.925 4.450 4.550 3.900 3.950 4.225 4.400 4.550 5.025\n## [133] 4.250 3.925 3.925 4.775 4.425 4.200 3.900 4.375 4.450 4.350 3.875 4.550\n## [145] 4.550 4.300 3.925 4.175 4.325 3.950\n\n\nz &lt;- matrix(1:20, nrow = 4, ncol = 5)\nz\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]    1    5    9   13   17\n## [2,]    2    6   10   14   18\n## [3,]    3    7   11   15   19\n## [4,]    4    8   12   16   20\nt(z) # 행과열 방향 전환\n##      [,1] [,2] [,3] [,4]\n## [1,]    1    2    3    4\n## [2,]    5    6    7    8\n## [3,]    9   10   11   12\n## [4,]   13   14   15   16\n## [5,]   17   18   19   20\n\n\nIR.1 &lt;- subset(iris, Species == \"setosa\")\nIR.1\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1           5.1         3.5          1.4         0.2  setosa\n## 2           4.9         3.0          1.4         0.2  setosa\n## 3           4.7         3.2          1.3         0.2  setosa\n## 4           4.6         3.1          1.5         0.2  setosa\n## 5           5.0         3.6          1.4         0.2  setosa\n## 6           5.4         3.9          1.7         0.4  setosa\n## 7           4.6         3.4          1.4         0.3  setosa\n## 8           5.0         3.4          1.5         0.2  setosa\n## 9           4.4         2.9          1.4         0.2  setosa\n## 10          4.9         3.1          1.5         0.1  setosa\n## 11          5.4         3.7          1.5         0.2  setosa\n## 12          4.8         3.4          1.6         0.2  setosa\n## 13          4.8         3.0          1.4         0.1  setosa\n## 14          4.3         3.0          1.1         0.1  setosa\n## 15          5.8         4.0          1.2         0.2  setosa\n## 16          5.7         4.4          1.5         0.4  setosa\n## 17          5.4         3.9          1.3         0.4  setosa\n## 18          5.1         3.5          1.4         0.3  setosa\n## 19          5.7         3.8          1.7         0.3  setosa\n## 20          5.1         3.8          1.5         0.3  setosa\n## 21          5.4         3.4          1.7         0.2  setosa\n## 22          5.1         3.7          1.5         0.4  setosa\n## 23          4.6         3.6          1.0         0.2  setosa\n## 24          5.1         3.3          1.7         0.5  setosa\n## 25          4.8         3.4          1.9         0.2  setosa\n## 26          5.0         3.0          1.6         0.2  setosa\n## 27          5.0         3.4          1.6         0.4  setosa\n## 28          5.2         3.5          1.5         0.2  setosa\n## 29          5.2         3.4          1.4         0.2  setosa\n## 30          4.7         3.2          1.6         0.2  setosa\n## 31          4.8         3.1          1.6         0.2  setosa\n## 32          5.4         3.4          1.5         0.4  setosa\n## 33          5.2         4.1          1.5         0.1  setosa\n## 34          5.5         4.2          1.4         0.2  setosa\n## 35          4.9         3.1          1.5         0.2  setosa\n## 36          5.0         3.2          1.2         0.2  setosa\n## 37          5.5         3.5          1.3         0.2  setosa\n## 38          4.9         3.6          1.4         0.1  setosa\n## 39          4.4         3.0          1.3         0.2  setosa\n## 40          5.1         3.4          1.5         0.2  setosa\n## 41          5.0         3.5          1.3         0.3  setosa\n## 42          4.5         2.3          1.3         0.3  setosa\n## 43          4.4         3.2          1.3         0.2  setosa\n## 44          5.0         3.5          1.6         0.6  setosa\n## 45          5.1         3.8          1.9         0.4  setosa\n## 46          4.8         3.0          1.4         0.3  setosa\n## 47          5.1         3.8          1.6         0.2  setosa\n## 48          4.6         3.2          1.4         0.2  setosa\n## 49          5.3         3.7          1.5         0.2  setosa\n## 50          5.0         3.3          1.4         0.2  setosa\n\nIR.2 &lt;- subset(iris, Sepal.Length &gt; 5.0 & Sepal.Width &gt; 4.0)\nIR.2\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 16          5.7         4.4          1.5         0.4  setosa\n## 33          5.2         4.1          1.5         0.1  setosa\n## 34          5.5         4.2          1.4         0.2  setosa\nIR.2[, c(2, 4)] # 2, 4열의 값만 추출\n##    Sepal.Width Petal.Width\n## 16         4.4         0.4\n## 33         4.1         0.1\n## 34         4.2         0.2\n\nIR.3 &lt;- subset(iris, Sepal.Length &gt; 5.0 | Sepal.Width &gt; 4.0)\nIR.3\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 1            5.1         3.5          1.4         0.2     setosa\n## 6            5.4         3.9          1.7         0.4     setosa\n## 11           5.4         3.7          1.5         0.2     setosa\n## 15           5.8         4.0          1.2         0.2     setosa\n## 16           5.7         4.4          1.5         0.4     setosa\n## 17           5.4         3.9          1.3         0.4     setosa\n## 18           5.1         3.5          1.4         0.3     setosa\n## 19           5.7         3.8          1.7         0.3     setosa\n## 20           5.1         3.8          1.5         0.3     setosa\n## 21           5.4         3.4          1.7         0.2     setosa\n## 22           5.1         3.7          1.5         0.4     setosa\n## 24           5.1         3.3          1.7         0.5     setosa\n## 28           5.2         3.5          1.5         0.2     setosa\n## 29           5.2         3.4          1.4         0.2     setosa\n## 32           5.4         3.4          1.5         0.4     setosa\n## 33           5.2         4.1          1.5         0.1     setosa\n## 34           5.5         4.2          1.4         0.2     setosa\n## 37           5.5         3.5          1.3         0.2     setosa\n## 40           5.1         3.4          1.5         0.2     setosa\n## 45           5.1         3.8          1.9         0.4     setosa\n## 47           5.1         3.8          1.6         0.2     setosa\n## 49           5.3         3.7          1.5         0.2     setosa\n## 51           7.0         3.2          4.7         1.4 versicolor\n## 52           6.4         3.2          4.5         1.5 versicolor\n## 53           6.9         3.1          4.9         1.5 versicolor\n## 54           5.5         2.3          4.0         1.3 versicolor\n## 55           6.5         2.8          4.6         1.5 versicolor\n## 56           5.7         2.8          4.5         1.3 versicolor\n## 57           6.3         3.3          4.7         1.6 versicolor\n## 59           6.6         2.9          4.6         1.3 versicolor\n## 60           5.2         2.7          3.9         1.4 versicolor\n## 62           5.9         3.0          4.2         1.5 versicolor\n## 63           6.0         2.2          4.0         1.0 versicolor\n## 64           6.1         2.9          4.7         1.4 versicolor\n## 65           5.6         2.9          3.6         1.3 versicolor\n## 66           6.7         3.1          4.4         1.4 versicolor\n## 67           5.6         3.0          4.5         1.5 versicolor\n## 68           5.8         2.7          4.1         1.0 versicolor\n## 69           6.2         2.2          4.5         1.5 versicolor\n## 70           5.6         2.5          3.9         1.1 versicolor\n## 71           5.9         3.2          4.8         1.8 versicolor\n## 72           6.1         2.8          4.0         1.3 versicolor\n## 73           6.3         2.5          4.9         1.5 versicolor\n## 74           6.1         2.8          4.7         1.2 versicolor\n## 75           6.4         2.9          4.3         1.3 versicolor\n## 76           6.6         3.0          4.4         1.4 versicolor\n## 77           6.8         2.8          4.8         1.4 versicolor\n## 78           6.7         3.0          5.0         1.7 versicolor\n## 79           6.0         2.9          4.5         1.5 versicolor\n## 80           5.7         2.6          3.5         1.0 versicolor\n## 81           5.5         2.4          3.8         1.1 versicolor\n## 82           5.5         2.4          3.7         1.0 versicolor\n## 83           5.8         2.7          3.9         1.2 versicolor\n## 84           6.0         2.7          5.1         1.6 versicolor\n## 85           5.4         3.0          4.5         1.5 versicolor\n## 86           6.0         3.4          4.5         1.6 versicolor\n## 87           6.7         3.1          4.7         1.5 versicolor\n## 88           6.3         2.3          4.4         1.3 versicolor\n## 89           5.6         3.0          4.1         1.3 versicolor\n## 90           5.5         2.5          4.0         1.3 versicolor\n## 91           5.5         2.6          4.4         1.2 versicolor\n## 92           6.1         3.0          4.6         1.4 versicolor\n## 93           5.8         2.6          4.0         1.2 versicolor\n## 95           5.6         2.7          4.2         1.3 versicolor\n## 96           5.7         3.0          4.2         1.2 versicolor\n## 97           5.7         2.9          4.2         1.3 versicolor\n## 98           6.2         2.9          4.3         1.3 versicolor\n## 99           5.1         2.5          3.0         1.1 versicolor\n## 100          5.7         2.8          4.1         1.3 versicolor\n## 101          6.3         3.3          6.0         2.5  virginica\n## 102          5.8         2.7          5.1         1.9  virginica\n## 103          7.1         3.0          5.9         2.1  virginica\n## 104          6.3         2.9          5.6         1.8  virginica\n## 105          6.5         3.0          5.8         2.2  virginica\n## 106          7.6         3.0          6.6         2.1  virginica\n## 108          7.3         2.9          6.3         1.8  virginica\n## 109          6.7         2.5          5.8         1.8  virginica\n## 110          7.2         3.6          6.1         2.5  virginica\n## 111          6.5         3.2          5.1         2.0  virginica\n## 112          6.4         2.7          5.3         1.9  virginica\n## 113          6.8         3.0          5.5         2.1  virginica\n## 114          5.7         2.5          5.0         2.0  virginica\n## 115          5.8         2.8          5.1         2.4  virginica\n## 116          6.4         3.2          5.3         2.3  virginica\n## 117          6.5         3.0          5.5         1.8  virginica\n## 118          7.7         3.8          6.7         2.2  virginica\n## 119          7.7         2.6          6.9         2.3  virginica\n## 120          6.0         2.2          5.0         1.5  virginica\n## 121          6.9         3.2          5.7         2.3  virginica\n## 122          5.6         2.8          4.9         2.0  virginica\n## 123          7.7         2.8          6.7         2.0  virginica\n## 124          6.3         2.7          4.9         1.8  virginica\n## 125          6.7         3.3          5.7         2.1  virginica\n## 126          7.2         3.2          6.0         1.8  virginica\n## 127          6.2         2.8          4.8         1.8  virginica\n## 128          6.1         3.0          4.9         1.8  virginica\n## 129          6.4         2.8          5.6         2.1  virginica\n## 130          7.2         3.0          5.8         1.6  virginica\n## 131          7.4         2.8          6.1         1.9  virginica\n## 132          7.9         3.8          6.4         2.0  virginica\n## 133          6.4         2.8          5.6         2.2  virginica\n## 134          6.3         2.8          5.1         1.5  virginica\n## 135          6.1         2.6          5.6         1.4  virginica\n## 136          7.7         3.0          6.1         2.3  virginica\n## 137          6.3         3.4          5.6         2.4  virginica\n## 138          6.4         3.1          5.5         1.8  virginica\n## 139          6.0         3.0          4.8         1.8  virginica\n## 140          6.9         3.1          5.4         2.1  virginica\n## 141          6.7         3.1          5.6         2.4  virginica\n## 142          6.9         3.1          5.1         2.3  virginica\n## 143          5.8         2.7          5.1         1.9  virginica\n## 144          6.8         3.2          5.9         2.3  virginica\n## 145          6.7         3.3          5.7         2.5  virginica\n## 146          6.7         3.0          5.2         2.3  virginica\n## 147          6.3         2.5          5.0         1.9  virginica\n## 148          6.5         3.0          5.2         2.0  virginica\n## 149          6.2         3.4          5.4         2.3  virginica\n## 150          5.9         3.0          5.1         1.8  virginica\n\n\na &lt;- matrix(1:20, 4, 5)\nb &lt;- matrix(21:40, 4, 5)\na ; b\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]    1    5    9   13   17\n## [2,]    2    6   10   14   18\n## [3,]    3    7   11   15   19\n## [4,]    4    8   12   16   20\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]   21   25   29   33   37\n## [2,]   22   26   30   34   38\n## [3,]   23   27   31   35   39\n## [4,]   24   28   32   36   40\n\n2 * a # 매트릭스 a에 저장된 값들에 2를 곱하기\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]    2   10   18   26   34\n## [2,]    4   12   20   28   36\n## [3,]    6   14   22   30   38\n## [4,]    8   16   24   32   40\nb - 5\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]   16   20   24   28   32\n## [2,]   17   21   25   29   33\n## [3,]   18   22   26   30   34\n## [4,]   19   23   27   31   35\n2 * a + 3 * b\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]   65   85  105  125  145\n## [2,]   70   90  110  130  150\n## [3,]   75   95  115  135  155\n## [4,]   80  100  120  140  160\n\na + b\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]   22   30   38   46   54\n## [2,]   24   32   40   48   56\n## [3,]   26   34   42   50   58\n## [4,]   28   36   44   52   60\nb - a\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]   20   20   20   20   20\n## [2,]   20   20   20   20   20\n## [3,]   20   20   20   20   20\n## [4,]   20   20   20   20   20\nb / a\n##           [,1]     [,2]     [,3]     [,4]     [,5]\n## [1,] 21.000000 5.000000 3.222222 2.538462 2.176471\n## [2,] 11.000000 4.333333 3.000000 2.428571 2.111111\n## [3,]  7.666667 3.857143 2.818182 2.333333 2.052632\n## [4,]  6.000000 3.500000 2.666667 2.250000 2.000000\na * b\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]   21  125  261  429  629\n## [2,]   44  156  300  476  684\n## [3,]   69  189  341  525  741\n## [4,]   96  224  384  576  800\n\na &lt;- a * 3\na\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]    3   15   27   39   51\n## [2,]    6   18   30   42   54\n## [3,]    9   21   33   45   57\n## [4,]   12   24   36   48   60\nb &lt;- b - 5\nb\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]   16   20   24   28   32\n## [2,]   17   21   25   29   33\n## [3,]   18   22   26   30   34\n## [4,]   19   23   27   31   35\n\n\nclass(iris) # iris 데이터셋의 자료구조 확인\n## [1] \"data.frame\"\nclass(state.x77) # state.x77 데이터셋의 자료구조 확인\n## [1] \"matrix\" \"array\"\nis.matrix(iris) # 데이터셋이 매트릭스인지를 확인하는 함수\n## [1] FALSE\nis.data.frame(iris) # 데이터셋이 데이터프레임인지를 확인하는 함수\n## [1] TRUE\nis.matrix(state.x77)\n## [1] TRUE\nis.data.frame(state.x77)\n## [1] FALSE\n\n\n# 매트릭스를 데이터프레임으로 변환\nst &lt;- data.frame(state.x77)\nhead(st)\n##            Population Income Illiteracy Life.Exp Murder HS.Grad Frost   Area\n## Alabama          3615   3624        2.1    69.05   15.1    41.3    20  50708\n## Alaska            365   6315        1.5    69.31   11.3    66.7   152 566432\n## Arizona          2212   4530        1.8    70.55    7.8    58.1    15 113417\n## Arkansas         2110   3378        1.9    70.66   10.1    39.9    65  51945\n## California      21198   5114        1.1    71.71   10.3    62.6    20 156361\n## Colorado         2541   4884        0.7    72.06    6.8    63.9   166 103766\nclass(st)\n## [1] \"data.frame\"\n\n\niris[, \"Species\"] # 결과=벡터. 매트릭스와 데이터프레임 모두 가능\n##   [1] setosa     setosa     setosa     setosa     setosa     setosa    \n##   [7] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [13] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [19] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [25] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [31] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [37] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [43] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [49] setosa     setosa     versicolor versicolor versicolor versicolor\n##  [55] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [61] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [67] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [73] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [79] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [85] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [91] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [97] versicolor versicolor versicolor versicolor virginica  virginica \n## [103] virginica  virginica  virginica  virginica  virginica  virginica \n## [109] virginica  virginica  virginica  virginica  virginica  virginica \n## [115] virginica  virginica  virginica  virginica  virginica  virginica \n## [121] virginica  virginica  virginica  virginica  virginica  virginica \n## [127] virginica  virginica  virginica  virginica  virginica  virginica \n## [133] virginica  virginica  virginica  virginica  virginica  virginica \n## [139] virginica  virginica  virginica  virginica  virginica  virginica \n## [145] virginica  virginica  virginica  virginica  virginica  virginica \n## Levels: setosa versicolor virginica\niris[, 5] # 결과=벡터. 매트릭스와 데이터프레임 모두 가능\n##   [1] setosa     setosa     setosa     setosa     setosa     setosa    \n##   [7] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [13] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [19] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [25] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [31] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [37] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [43] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [49] setosa     setosa     versicolor versicolor versicolor versicolor\n##  [55] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [61] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [67] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [73] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [79] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [85] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [91] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [97] versicolor versicolor versicolor versicolor virginica  virginica \n## [103] virginica  virginica  virginica  virginica  virginica  virginica \n## [109] virginica  virginica  virginica  virginica  virginica  virginica \n## [115] virginica  virginica  virginica  virginica  virginica  virginica \n## [121] virginica  virginica  virginica  virginica  virginica  virginica \n## [127] virginica  virginica  virginica  virginica  virginica  virginica \n## [133] virginica  virginica  virginica  virginica  virginica  virginica \n## [139] virginica  virginica  virginica  virginica  virginica  virginica \n## [145] virginica  virginica  virginica  virginica  virginica  virginica \n## Levels: setosa versicolor virginica\niris[\"Species\"] # 결과=데이터프레임. 데이터프레임만 가능\n##        Species\n## 1       setosa\n## 2       setosa\n## 3       setosa\n## 4       setosa\n## 5       setosa\n## 6       setosa\n## 7       setosa\n## 8       setosa\n## 9       setosa\n## 10      setosa\n## 11      setosa\n## 12      setosa\n## 13      setosa\n## 14      setosa\n## 15      setosa\n## 16      setosa\n## 17      setosa\n## 18      setosa\n## 19      setosa\n## 20      setosa\n## 21      setosa\n## 22      setosa\n## 23      setosa\n## 24      setosa\n## 25      setosa\n## 26      setosa\n## 27      setosa\n## 28      setosa\n## 29      setosa\n## 30      setosa\n## 31      setosa\n## 32      setosa\n## 33      setosa\n## 34      setosa\n## 35      setosa\n## 36      setosa\n## 37      setosa\n## 38      setosa\n## 39      setosa\n## 40      setosa\n## 41      setosa\n## 42      setosa\n## 43      setosa\n## 44      setosa\n## 45      setosa\n## 46      setosa\n## 47      setosa\n## 48      setosa\n## 49      setosa\n## 50      setosa\n## 51  versicolor\n## 52  versicolor\n## 53  versicolor\n## 54  versicolor\n## 55  versicolor\n## 56  versicolor\n## 57  versicolor\n## 58  versicolor\n## 59  versicolor\n## 60  versicolor\n## 61  versicolor\n## 62  versicolor\n## 63  versicolor\n## 64  versicolor\n## 65  versicolor\n## 66  versicolor\n## 67  versicolor\n## 68  versicolor\n## 69  versicolor\n## 70  versicolor\n## 71  versicolor\n## 72  versicolor\n## 73  versicolor\n## 74  versicolor\n## 75  versicolor\n## 76  versicolor\n## 77  versicolor\n## 78  versicolor\n## 79  versicolor\n## 80  versicolor\n## 81  versicolor\n## 82  versicolor\n## 83  versicolor\n## 84  versicolor\n## 85  versicolor\n## 86  versicolor\n## 87  versicolor\n## 88  versicolor\n## 89  versicolor\n## 90  versicolor\n## 91  versicolor\n## 92  versicolor\n## 93  versicolor\n## 94  versicolor\n## 95  versicolor\n## 96  versicolor\n## 97  versicolor\n## 98  versicolor\n## 99  versicolor\n## 100 versicolor\n## 101  virginica\n## 102  virginica\n## 103  virginica\n## 104  virginica\n## 105  virginica\n## 106  virginica\n## 107  virginica\n## 108  virginica\n## 109  virginica\n## 110  virginica\n## 111  virginica\n## 112  virginica\n## 113  virginica\n## 114  virginica\n## 115  virginica\n## 116  virginica\n## 117  virginica\n## 118  virginica\n## 119  virginica\n## 120  virginica\n## 121  virginica\n## 122  virginica\n## 123  virginica\n## 124  virginica\n## 125  virginica\n## 126  virginica\n## 127  virginica\n## 128  virginica\n## 129  virginica\n## 130  virginica\n## 131  virginica\n## 132  virginica\n## 133  virginica\n## 134  virginica\n## 135  virginica\n## 136  virginica\n## 137  virginica\n## 138  virginica\n## 139  virginica\n## 140  virginica\n## 141  virginica\n## 142  virginica\n## 143  virginica\n## 144  virginica\n## 145  virginica\n## 146  virginica\n## 147  virginica\n## 148  virginica\n## 149  virginica\n## 150  virginica\niris[5] # 결과=데이터프레임. 데이터프레임만 가능\n##        Species\n## 1       setosa\n## 2       setosa\n## 3       setosa\n## 4       setosa\n## 5       setosa\n## 6       setosa\n## 7       setosa\n## 8       setosa\n## 9       setosa\n## 10      setosa\n## 11      setosa\n## 12      setosa\n## 13      setosa\n## 14      setosa\n## 15      setosa\n## 16      setosa\n## 17      setosa\n## 18      setosa\n## 19      setosa\n## 20      setosa\n## 21      setosa\n## 22      setosa\n## 23      setosa\n## 24      setosa\n## 25      setosa\n## 26      setosa\n## 27      setosa\n## 28      setosa\n## 29      setosa\n## 30      setosa\n## 31      setosa\n## 32      setosa\n## 33      setosa\n## 34      setosa\n## 35      setosa\n## 36      setosa\n## 37      setosa\n## 38      setosa\n## 39      setosa\n## 40      setosa\n## 41      setosa\n## 42      setosa\n## 43      setosa\n## 44      setosa\n## 45      setosa\n## 46      setosa\n## 47      setosa\n## 48      setosa\n## 49      setosa\n## 50      setosa\n## 51  versicolor\n## 52  versicolor\n## 53  versicolor\n## 54  versicolor\n## 55  versicolor\n## 56  versicolor\n## 57  versicolor\n## 58  versicolor\n## 59  versicolor\n## 60  versicolor\n## 61  versicolor\n## 62  versicolor\n## 63  versicolor\n## 64  versicolor\n## 65  versicolor\n## 66  versicolor\n## 67  versicolor\n## 68  versicolor\n## 69  versicolor\n## 70  versicolor\n## 71  versicolor\n## 72  versicolor\n## 73  versicolor\n## 74  versicolor\n## 75  versicolor\n## 76  versicolor\n## 77  versicolor\n## 78  versicolor\n## 79  versicolor\n## 80  versicolor\n## 81  versicolor\n## 82  versicolor\n## 83  versicolor\n## 84  versicolor\n## 85  versicolor\n## 86  versicolor\n## 87  versicolor\n## 88  versicolor\n## 89  versicolor\n## 90  versicolor\n## 91  versicolor\n## 92  versicolor\n## 93  versicolor\n## 94  versicolor\n## 95  versicolor\n## 96  versicolor\n## 97  versicolor\n## 98  versicolor\n## 99  versicolor\n## 100 versicolor\n## 101  virginica\n## 102  virginica\n## 103  virginica\n## 104  virginica\n## 105  virginica\n## 106  virginica\n## 107  virginica\n## 108  virginica\n## 109  virginica\n## 110  virginica\n## 111  virginica\n## 112  virginica\n## 113  virginica\n## 114  virginica\n## 115  virginica\n## 116  virginica\n## 117  virginica\n## 118  virginica\n## 119  virginica\n## 120  virginica\n## 121  virginica\n## 122  virginica\n## 123  virginica\n## 124  virginica\n## 125  virginica\n## 126  virginica\n## 127  virginica\n## 128  virginica\n## 129  virginica\n## 130  virginica\n## 131  virginica\n## 132  virginica\n## 133  virginica\n## 134  virginica\n## 135  virginica\n## 136  virginica\n## 137  virginica\n## 138  virginica\n## 139  virginica\n## 140  virginica\n## 141  virginica\n## 142  virginica\n## 143  virginica\n## 144  virginica\n## 145  virginica\n## 146  virginica\n## 147  virginica\n## 148  virginica\n## 149  virginica\n## 150  virginica\niris$Species # 결과=벡터. 데이터프레임만 가능\n##   [1] setosa     setosa     setosa     setosa     setosa     setosa    \n##   [7] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [13] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [19] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [25] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [31] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [37] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [43] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [49] setosa     setosa     versicolor versicolor versicolor versicolor\n##  [55] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [61] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [67] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [73] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [79] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [85] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [91] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [97] versicolor versicolor versicolor versicolor virginica  virginica \n## [103] virginica  virginica  virginica  virginica  virginica  virginica \n## [109] virginica  virginica  virginica  virginica  virginica  virginica \n## [115] virginica  virginica  virginica  virginica  virginica  virginica \n## [121] virginica  virginica  virginica  virginica  virginica  virginica \n## [127] virginica  virginica  virginica  virginica  virginica  virginica \n## [133] virginica  virginica  virginica  virginica  virginica  virginica \n## [139] virginica  virginica  virginica  virginica  virginica  virginica \n## [145] virginica  virginica  virginica  virginica  virginica  virginica \n## Levels: setosa versicolor virginica\n\n\ngetwd()\n## [1] \"D:/Study-Blog\"\n# setwd(\"G:/내 드라이브/202202/R_Basic/data\") # 작업 폴더 지정\nair &lt;- read.csv(\"./R_Basic/data/airquality.csv\", header = T) # .csv 파일 읽기\nhead(air)\n##   Ozone Solar.R Wind Temp Month Day\n## 1    41     190  7.4   67     5   1\n## 2    36     118  8.0   72     5   2\n## 3    12     149 12.6   74     5   3\n## 4    18     313 11.5   62     5   4\n## 5    NA      NA 14.3   56     5   5\n## 6    28      NA 14.9   66     5   6\n\n\nmy.iris &lt;- subset(iris, Species = 'Setosa') # Setosa 품종 데이터만 추출\n## Warning: In subset.data.frame(iris, Species = \"Setosa\") :\n##  extra argument 'Species' will be disregarded\nwrite.csv(my.iris, \"./R_Basic/data/my_iris_1.csv\") # .csv 파일에 저장하기\n\n\n\n\n\njob.type &lt;- 'A'\nif (job.type == 'B') {\n    bonus &lt;- 200 # 직무 유형이 B일 때 실행\n} else {\n    bonus &lt;- 100 # 직무 유형이 B가 아닌 나머지 경우 실행\n}\nprint(bonus)\n## [1] 100\n\n\njob.type &lt;- 'B'\nbonus &lt;- 100\nif (job.type == 'A') {\n    bonus &lt;- 200 # 직무 유형이 A일 때 실행\n}\nprint(bonus)\n## [1] 100\n\n\nscore &lt;- 85\n\nif (score &gt; 90) {\n    grade &lt;- 'A'\n} else if (score &gt; 80) {\n    grade &lt;- 'B'\n} else if (score &gt; 70) {\n    grade &lt;- 'C'\n} else if (score &gt; 60) {\n    grade &lt;- 'D'\n} else {\n    grade &lt;- 'F'\n}\n\nprint(grade)\n## [1] \"B\"\n\n\na &lt;- 10\nb &lt;- 20\nif (a &gt; 5 & b &gt; 5) {    # and 사용\n    print(a + b)\n}\n## [1] 30\n\nif (a &gt; 5 | b &gt; 30) {   # or 사용\n    print(a * b)\n}\n## [1] 200\n\nif (a &gt; 5 & b &gt; 30) {\n    print(a * b)\n}\n\nif (a &gt; 20 | b &gt; 30) {\n    print(a * b)\n}\n\nif (a &gt; 20 & b &gt; 15) {\n    print(a * b)\n}\n\nr_basic &lt;- 70\npython_basic &lt;- 82\n\nif (r_basic &gt; 80 & python_basic &gt; 80) {\n    grade &lt;- \"Excellent\"\n} else {\n    grade &lt;- \"Good\"\n}\ngrade\n## [1] \"Good\"\n\n\na &lt;- 10\nb &lt;- 20\n\nif (a &gt; b) {\n    c &lt;- a\n} else {\n    c &lt;- b\n}\nprint(c)\n## [1] 20\n\na &lt;- 10\nb &lt;- 20\n\nc &lt;- ifelse(a &gt; b, a, b)\nprint(c)\n## [1] 20\n\n\nfor(i in 1:5) {\n    print('*')\n}\n## [1] \"*\"\n## [1] \"*\"\n## [1] \"*\"\n## [1] \"*\"\n## [1] \"*\"\n\nfor (i in 1:5) {\n    print(i)\n}\n## [1] 1\n## [1] 2\n## [1] 3\n## [1] 4\n## [1] 5\n\nfor (i in 1:5) {\n    a &lt;- i * 2\n    print(a)\n}\n## [1] 2\n## [1] 4\n## [1] 6\n## [1] 8\n## [1] 10\n\nfor (i in 1:10000) {\n    a &lt;- i * 2\n    print(a)\n}\n## [1] 2\n## [1] 4\n## [1] 6\n## [1] 8\n## [1] 10\n## [1] 12\n## [1] 14\n## [1] 16\n## [1] 18\n## [1] 20\n## [1] 22\n## [1] 24\n## [1] 26\n## [1] 28\n## [1] 30\n## [1] 32\n## [1] 34\n## [1] 36\n## [1] 38\n## [1] 40\n## [1] 42\n## [1] 44\n## [1] 46\n## [1] 48\n## [1] 50\n## [1] 52\n## [1] 54\n## [1] 56\n## [1] 58\n## [1] 60\n## [1] 62\n## [1] 64\n## [1] 66\n## [1] 68\n## [1] 70\n## [1] 72\n## [1] 74\n## [1] 76\n## [1] 78\n## [1] 80\n## [1] 82\n## [1] 84\n## [1] 86\n## [1] 88\n## [1] 90\n## [1] 92\n## [1] 94\n## [1] 96\n## [1] 98\n## [1] 100\n## [1] 102\n## [1] 104\n## [1] 106\n## [1] 108\n## [1] 110\n## [1] 112\n## [1] 114\n## [1] 116\n## [1] 118\n## [1] 120\n## [1] 122\n## [1] 124\n## [1] 126\n## [1] 128\n## [1] 130\n## [1] 132\n## [1] 134\n## [1] 136\n## [1] 138\n## [1] 140\n## [1] 142\n## [1] 144\n## [1] 146\n## [1] 148\n## [1] 150\n## [1] 152\n## [1] 154\n## [1] 156\n## [1] 158\n## [1] 160\n## [1] 162\n## [1] 164\n## [1] 166\n## [1] 168\n## [1] 170\n## [1] 172\n## [1] 174\n## [1] 176\n## [1] 178\n## [1] 180\n## [1] 182\n## [1] 184\n## [1] 186\n## [1] 188\n## [1] 190\n## [1] 192\n## [1] 194\n## [1] 196\n## [1] 198\n## [1] 200\n## [1] 202\n## [1] 204\n## [1] 206\n## [1] 208\n## [1] 210\n## [1] 212\n## [1] 214\n## [1] 216\n## [1] 218\n## [1] 220\n## [1] 222\n## [1] 224\n## [1] 226\n## [1] 228\n## [1] 230\n## [1] 232\n## [1] 234\n## [1] 236\n## [1] 238\n## [1] 240\n## [1] 242\n## [1] 244\n## [1] 246\n## [1] 248\n## [1] 250\n## [1] 252\n## [1] 254\n## [1] 256\n## [1] 258\n## [1] 260\n## [1] 262\n## [1] 264\n## [1] 266\n## [1] 268\n## [1] 270\n## [1] 272\n## [1] 274\n## [1] 276\n## [1] 278\n## [1] 280\n## [1] 282\n## [1] 284\n## [1] 286\n## [1] 288\n## [1] 290\n## [1] 292\n## [1] 294\n## [1] 296\n## [1] 298\n## [1] 300\n## [1] 302\n## [1] 304\n## [1] 306\n## [1] 308\n## [1] 310\n## [1] 312\n## [1] 314\n## [1] 316\n## [1] 318\n## [1] 320\n## [1] 322\n## [1] 324\n## [1] 326\n## [1] 328\n## [1] 330\n## [1] 332\n## [1] 334\n## [1] 336\n## [1] 338\n## [1] 340\n## [1] 342\n## [1] 344\n## [1] 346\n## [1] 348\n## [1] 350\n## [1] 352\n## [1] 354\n## [1] 356\n## [1] 358\n## [1] 360\n## [1] 362\n## [1] 364\n## [1] 366\n## [1] 368\n## [1] 370\n## [1] 372\n## [1] 374\n## [1] 376\n## [1] 378\n## [1] 380\n## [1] 382\n## [1] 384\n## [1] 386\n## [1] 388\n## [1] 390\n## [1] 392\n## [1] 394\n## [1] 396\n## [1] 398\n## [1] 400\n## [1] 402\n## [1] 404\n## [1] 406\n## [1] 408\n## [1] 410\n## [1] 412\n## [1] 414\n## [1] 416\n## [1] 418\n## [1] 420\n## [1] 422\n## [1] 424\n## [1] 426\n## [1] 428\n## [1] 430\n## [1] 432\n## [1] 434\n## [1] 436\n## [1] 438\n## [1] 440\n## [1] 442\n## [1] 444\n## [1] 446\n## [1] 448\n## [1] 450\n## [1] 452\n## [1] 454\n## [1] 456\n## [1] 458\n## [1] 460\n## [1] 462\n## [1] 464\n## [1] 466\n## [1] 468\n## [1] 470\n## [1] 472\n## [1] 474\n## [1] 476\n## [1] 478\n## [1] 480\n## [1] 482\n## [1] 484\n## [1] 486\n## [1] 488\n## [1] 490\n## [1] 492\n## [1] 494\n## [1] 496\n## [1] 498\n## [1] 500\n## [1] 502\n## [1] 504\n## [1] 506\n## [1] 508\n## [1] 510\n## [1] 512\n## [1] 514\n## [1] 516\n## [1] 518\n## [1] 520\n## [1] 522\n## [1] 524\n## [1] 526\n## [1] 528\n## [1] 530\n## [1] 532\n## [1] 534\n## [1] 536\n## [1] 538\n## [1] 540\n## [1] 542\n## [1] 544\n## [1] 546\n## [1] 548\n## [1] 550\n## [1] 552\n## [1] 554\n## [1] 556\n## [1] 558\n## [1] 560\n## [1] 562\n## [1] 564\n## [1] 566\n## [1] 568\n## [1] 570\n## [1] 572\n## [1] 574\n## [1] 576\n## [1] 578\n## [1] 580\n## [1] 582\n## [1] 584\n## [1] 586\n## [1] 588\n## [1] 590\n## [1] 592\n## [1] 594\n## [1] 596\n## [1] 598\n## [1] 600\n## [1] 602\n## [1] 604\n## [1] 606\n## [1] 608\n## [1] 610\n## [1] 612\n## [1] 614\n## [1] 616\n## [1] 618\n## [1] 620\n## [1] 622\n## [1] 624\n## [1] 626\n## [1] 628\n## [1] 630\n## [1] 632\n## [1] 634\n## [1] 636\n## [1] 638\n## [1] 640\n## [1] 642\n## [1] 644\n## [1] 646\n## [1] 648\n## [1] 650\n## [1] 652\n## [1] 654\n## [1] 656\n## [1] 658\n## [1] 660\n## [1] 662\n## [1] 664\n## [1] 666\n## [1] 668\n## [1] 670\n## [1] 672\n## [1] 674\n## [1] 676\n## [1] 678\n## [1] 680\n## [1] 682\n## [1] 684\n## [1] 686\n## [1] 688\n## [1] 690\n## [1] 692\n## [1] 694\n## [1] 696\n## [1] 698\n## [1] 700\n## [1] 702\n## [1] 704\n## [1] 706\n## [1] 708\n## [1] 710\n## [1] 712\n## [1] 714\n## [1] 716\n## [1] 718\n## [1] 720\n## [1] 722\n## [1] 724\n## [1] 726\n## [1] 728\n## [1] 730\n## [1] 732\n## [1] 734\n## [1] 736\n## [1] 738\n## [1] 740\n## [1] 742\n## [1] 744\n## [1] 746\n## [1] 748\n## [1] 750\n## [1] 752\n## [1] 754\n## [1] 756\n## [1] 758\n## [1] 760\n## [1] 762\n## [1] 764\n## [1] 766\n## [1] 768\n## [1] 770\n## [1] 772\n## [1] 774\n## [1] 776\n## [1] 778\n## [1] 780\n## [1] 782\n## [1] 784\n## [1] 786\n## [1] 788\n## [1] 790\n## [1] 792\n## [1] 794\n## [1] 796\n## [1] 798\n## [1] 800\n## [1] 802\n## [1] 804\n## [1] 806\n## [1] 808\n## [1] 810\n## [1] 812\n## [1] 814\n## [1] 816\n## [1] 818\n## [1] 820\n## [1] 822\n## [1] 824\n## [1] 826\n## [1] 828\n## [1] 830\n## [1] 832\n## [1] 834\n## [1] 836\n## [1] 838\n## [1] 840\n## [1] 842\n## [1] 844\n## [1] 846\n## [1] 848\n## [1] 850\n## [1] 852\n## [1] 854\n## [1] 856\n## [1] 858\n## [1] 860\n## [1] 862\n## [1] 864\n## [1] 866\n## [1] 868\n## [1] 870\n## [1] 872\n## [1] 874\n## [1] 876\n## [1] 878\n## [1] 880\n## [1] 882\n## [1] 884\n## [1] 886\n## [1] 888\n## [1] 890\n## [1] 892\n## [1] 894\n## [1] 896\n## [1] 898\n## [1] 900\n## [1] 902\n## [1] 904\n## [1] 906\n## [1] 908\n## [1] 910\n## [1] 912\n## [1] 914\n## [1] 916\n## [1] 918\n## [1] 920\n## [1] 922\n## [1] 924\n## [1] 926\n## [1] 928\n## [1] 930\n## [1] 932\n## [1] 934\n## [1] 936\n## [1] 938\n## [1] 940\n## [1] 942\n## [1] 944\n## [1] 946\n## [1] 948\n## [1] 950\n## [1] 952\n## [1] 954\n## [1] 956\n## [1] 958\n## [1] 960\n## [1] 962\n## [1] 964\n## [1] 966\n## [1] 968\n## [1] 970\n## [1] 972\n## [1] 974\n## [1] 976\n## [1] 978\n## [1] 980\n## [1] 982\n## [1] 984\n## [1] 986\n## [1] 988\n## [1] 990\n## [1] 992\n## [1] 994\n## [1] 996\n## [1] 998\n## [1] 1000\n## [1] 1002\n## [1] 1004\n## [1] 1006\n## [1] 1008\n## [1] 1010\n## [1] 1012\n## [1] 1014\n## [1] 1016\n## [1] 1018\n## [1] 1020\n## [1] 1022\n## [1] 1024\n## [1] 1026\n## [1] 1028\n## [1] 1030\n## [1] 1032\n## [1] 1034\n## [1] 1036\n## [1] 1038\n## [1] 1040\n## [1] 1042\n## [1] 1044\n## [1] 1046\n## [1] 1048\n## [1] 1050\n## [1] 1052\n## [1] 1054\n## [1] 1056\n## [1] 1058\n## [1] 1060\n## [1] 1062\n## [1] 1064\n## [1] 1066\n## [1] 1068\n## [1] 1070\n## [1] 1072\n## [1] 1074\n## [1] 1076\n## [1] 1078\n## [1] 1080\n## [1] 1082\n## [1] 1084\n## [1] 1086\n## [1] 1088\n## [1] 1090\n## [1] 1092\n## [1] 1094\n## [1] 1096\n## [1] 1098\n## [1] 1100\n## [1] 1102\n## [1] 1104\n## [1] 1106\n## [1] 1108\n## [1] 1110\n## [1] 1112\n## [1] 1114\n## [1] 1116\n## [1] 1118\n## [1] 1120\n## [1] 1122\n## [1] 1124\n## [1] 1126\n## [1] 1128\n## [1] 1130\n## [1] 1132\n## [1] 1134\n## [1] 1136\n## [1] 1138\n## [1] 1140\n## [1] 1142\n## [1] 1144\n## [1] 1146\n## [1] 1148\n## [1] 1150\n## [1] 1152\n## [1] 1154\n## [1] 1156\n## [1] 1158\n## [1] 1160\n## [1] 1162\n## [1] 1164\n## [1] 1166\n## [1] 1168\n## [1] 1170\n## [1] 1172\n## [1] 1174\n## [1] 1176\n## [1] 1178\n## [1] 1180\n## [1] 1182\n## [1] 1184\n## [1] 1186\n## [1] 1188\n## [1] 1190\n## [1] 1192\n## [1] 1194\n## [1] 1196\n## [1] 1198\n## [1] 1200\n## [1] 1202\n## [1] 1204\n## [1] 1206\n## [1] 1208\n## [1] 1210\n## [1] 1212\n## [1] 1214\n## [1] 1216\n## [1] 1218\n## [1] 1220\n## [1] 1222\n## [1] 1224\n## [1] 1226\n## [1] 1228\n## [1] 1230\n## [1] 1232\n## [1] 1234\n## [1] 1236\n## [1] 1238\n## [1] 1240\n## [1] 1242\n## [1] 1244\n## [1] 1246\n## [1] 1248\n## [1] 1250\n## [1] 1252\n## [1] 1254\n## [1] 1256\n## [1] 1258\n## [1] 1260\n## [1] 1262\n## [1] 1264\n## [1] 1266\n## [1] 1268\n## [1] 1270\n## [1] 1272\n## [1] 1274\n## [1] 1276\n## [1] 1278\n## [1] 1280\n## [1] 1282\n## [1] 1284\n## [1] 1286\n## [1] 1288\n## [1] 1290\n## [1] 1292\n## [1] 1294\n## [1] 1296\n## [1] 1298\n## [1] 1300\n## [1] 1302\n## [1] 1304\n## [1] 1306\n## [1] 1308\n## [1] 1310\n## [1] 1312\n## [1] 1314\n## [1] 1316\n## [1] 1318\n## [1] 1320\n## [1] 1322\n## [1] 1324\n## [1] 1326\n## [1] 1328\n## [1] 1330\n## [1] 1332\n## [1] 1334\n## [1] 1336\n## [1] 1338\n## [1] 1340\n## [1] 1342\n## [1] 1344\n## [1] 1346\n## [1] 1348\n## [1] 1350\n## [1] 1352\n## [1] 1354\n## [1] 1356\n## [1] 1358\n## [1] 1360\n## [1] 1362\n## [1] 1364\n## [1] 1366\n## [1] 1368\n## [1] 1370\n## [1] 1372\n## [1] 1374\n## [1] 1376\n## [1] 1378\n## [1] 1380\n## [1] 1382\n## [1] 1384\n## [1] 1386\n## [1] 1388\n## [1] 1390\n## [1] 1392\n## [1] 1394\n## [1] 1396\n## [1] 1398\n## [1] 1400\n## [1] 1402\n## [1] 1404\n## [1] 1406\n## [1] 1408\n## [1] 1410\n## [1] 1412\n## [1] 1414\n## [1] 1416\n## [1] 1418\n## [1] 1420\n## [1] 1422\n## [1] 1424\n## [1] 1426\n## [1] 1428\n## [1] 1430\n## [1] 1432\n## [1] 1434\n## [1] 1436\n## [1] 1438\n## [1] 1440\n## [1] 1442\n## [1] 1444\n## [1] 1446\n## [1] 1448\n## [1] 1450\n## [1] 1452\n## [1] 1454\n## [1] 1456\n## [1] 1458\n## [1] 1460\n## [1] 1462\n## [1] 1464\n## [1] 1466\n## [1] 1468\n## [1] 1470\n## [1] 1472\n## [1] 1474\n## [1] 1476\n## [1] 1478\n## [1] 1480\n## [1] 1482\n## [1] 1484\n## [1] 1486\n## [1] 1488\n## [1] 1490\n## [1] 1492\n## [1] 1494\n## [1] 1496\n## [1] 1498\n## [1] 1500\n## [1] 1502\n## [1] 1504\n## [1] 1506\n## [1] 1508\n## [1] 1510\n## [1] 1512\n## [1] 1514\n## [1] 1516\n## [1] 1518\n## [1] 1520\n## [1] 1522\n## [1] 1524\n## [1] 1526\n## [1] 1528\n## [1] 1530\n## [1] 1532\n## [1] 1534\n## [1] 1536\n## [1] 1538\n## [1] 1540\n## [1] 1542\n## [1] 1544\n## [1] 1546\n## [1] 1548\n## [1] 1550\n## [1] 1552\n## [1] 1554\n## [1] 1556\n## [1] 1558\n## [1] 1560\n## [1] 1562\n## [1] 1564\n## [1] 1566\n## [1] 1568\n## [1] 1570\n## [1] 1572\n## [1] 1574\n## [1] 1576\n## [1] 1578\n## [1] 1580\n## [1] 1582\n## [1] 1584\n## [1] 1586\n## [1] 1588\n## [1] 1590\n## [1] 1592\n## [1] 1594\n## [1] 1596\n## [1] 1598\n## [1] 1600\n## [1] 1602\n## [1] 1604\n## [1] 1606\n## [1] 1608\n## [1] 1610\n## [1] 1612\n## [1] 1614\n## [1] 1616\n## [1] 1618\n## [1] 1620\n## [1] 1622\n## [1] 1624\n## [1] 1626\n## [1] 1628\n## [1] 1630\n## [1] 1632\n## [1] 1634\n## [1] 1636\n## [1] 1638\n## [1] 1640\n## [1] 1642\n## [1] 1644\n## [1] 1646\n## [1] 1648\n## [1] 1650\n## [1] 1652\n## [1] 1654\n## [1] 1656\n## [1] 1658\n## [1] 1660\n## [1] 1662\n## [1] 1664\n## [1] 1666\n## [1] 1668\n## [1] 1670\n## [1] 1672\n## [1] 1674\n## [1] 1676\n## [1] 1678\n## [1] 1680\n## [1] 1682\n## [1] 1684\n## [1] 1686\n## [1] 1688\n## [1] 1690\n## [1] 1692\n## [1] 1694\n## [1] 1696\n## [1] 1698\n## [1] 1700\n## [1] 1702\n## [1] 1704\n## [1] 1706\n## [1] 1708\n## [1] 1710\n## [1] 1712\n## [1] 1714\n## [1] 1716\n## [1] 1718\n## [1] 1720\n## [1] 1722\n## [1] 1724\n## [1] 1726\n## [1] 1728\n## [1] 1730\n## [1] 1732\n## [1] 1734\n## [1] 1736\n## [1] 1738\n## [1] 1740\n## [1] 1742\n## [1] 1744\n## [1] 1746\n## [1] 1748\n## [1] 1750\n## [1] 1752\n## [1] 1754\n## [1] 1756\n## [1] 1758\n## [1] 1760\n## [1] 1762\n## [1] 1764\n## [1] 1766\n## [1] 1768\n## [1] 1770\n## [1] 1772\n## [1] 1774\n## [1] 1776\n## [1] 1778\n## [1] 1780\n## [1] 1782\n## [1] 1784\n## [1] 1786\n## [1] 1788\n## [1] 1790\n## [1] 1792\n## [1] 1794\n## [1] 1796\n## [1] 1798\n## [1] 1800\n## [1] 1802\n## [1] 1804\n## [1] 1806\n## [1] 1808\n## [1] 1810\n## [1] 1812\n## [1] 1814\n## [1] 1816\n## [1] 1818\n## [1] 1820\n## [1] 1822\n## [1] 1824\n## [1] 1826\n## [1] 1828\n## [1] 1830\n## [1] 1832\n## [1] 1834\n## [1] 1836\n## [1] 1838\n## [1] 1840\n## [1] 1842\n## [1] 1844\n## [1] 1846\n## [1] 1848\n## [1] 1850\n## [1] 1852\n## [1] 1854\n## [1] 1856\n## [1] 1858\n## [1] 1860\n## [1] 1862\n## [1] 1864\n## [1] 1866\n## [1] 1868\n## [1] 1870\n## [1] 1872\n## [1] 1874\n## [1] 1876\n## [1] 1878\n## [1] 1880\n## [1] 1882\n## [1] 1884\n## [1] 1886\n## [1] 1888\n## [1] 1890\n## [1] 1892\n## [1] 1894\n## [1] 1896\n## [1] 1898\n## [1] 1900\n## [1] 1902\n## [1] 1904\n## [1] 1906\n## [1] 1908\n## [1] 1910\n## [1] 1912\n## [1] 1914\n## [1] 1916\n## [1] 1918\n## [1] 1920\n## [1] 1922\n## [1] 1924\n## [1] 1926\n## [1] 1928\n## [1] 1930\n## [1] 1932\n## [1] 1934\n## [1] 1936\n## [1] 1938\n## [1] 1940\n## [1] 1942\n## [1] 1944\n## [1] 1946\n## [1] 1948\n## [1] 1950\n## [1] 1952\n## [1] 1954\n## [1] 1956\n## [1] 1958\n## [1] 1960\n## [1] 1962\n## [1] 1964\n## [1] 1966\n## [1] 1968\n## [1] 1970\n## [1] 1972\n## [1] 1974\n## [1] 1976\n## [1] 1978\n## [1] 1980\n## [1] 1982\n## [1] 1984\n## [1] 1986\n## [1] 1988\n## [1] 1990\n## [1] 1992\n## [1] 1994\n## [1] 1996\n## [1] 1998\n## [1] 2000\n## [1] 2002\n## [1] 2004\n## [1] 2006\n## [1] 2008\n## [1] 2010\n## [1] 2012\n## [1] 2014\n## [1] 2016\n## [1] 2018\n## [1] 2020\n## [1] 2022\n## [1] 2024\n## [1] 2026\n## [1] 2028\n## [1] 2030\n## [1] 2032\n## [1] 2034\n## [1] 2036\n## [1] 2038\n## [1] 2040\n## [1] 2042\n## [1] 2044\n## [1] 2046\n## [1] 2048\n## [1] 2050\n## [1] 2052\n## [1] 2054\n## [1] 2056\n## [1] 2058\n## [1] 2060\n## [1] 2062\n## [1] 2064\n## [1] 2066\n## [1] 2068\n## [1] 2070\n## [1] 2072\n## [1] 2074\n## [1] 2076\n## [1] 2078\n## [1] 2080\n## [1] 2082\n## [1] 2084\n## [1] 2086\n## [1] 2088\n## [1] 2090\n## [1] 2092\n## [1] 2094\n## [1] 2096\n## [1] 2098\n## [1] 2100\n## [1] 2102\n## [1] 2104\n## [1] 2106\n## [1] 2108\n## [1] 2110\n## [1] 2112\n## [1] 2114\n## [1] 2116\n## [1] 2118\n## [1] 2120\n## [1] 2122\n## [1] 2124\n## [1] 2126\n## [1] 2128\n## [1] 2130\n## [1] 2132\n## [1] 2134\n## [1] 2136\n## [1] 2138\n## [1] 2140\n## [1] 2142\n## [1] 2144\n## [1] 2146\n## [1] 2148\n## [1] 2150\n## [1] 2152\n## [1] 2154\n## [1] 2156\n## [1] 2158\n## [1] 2160\n## [1] 2162\n## [1] 2164\n## [1] 2166\n## [1] 2168\n## [1] 2170\n## [1] 2172\n## [1] 2174\n## [1] 2176\n## [1] 2178\n## [1] 2180\n## [1] 2182\n## [1] 2184\n## [1] 2186\n## [1] 2188\n## [1] 2190\n## [1] 2192\n## [1] 2194\n## [1] 2196\n## [1] 2198\n## [1] 2200\n## [1] 2202\n## [1] 2204\n## [1] 2206\n## [1] 2208\n## [1] 2210\n## [1] 2212\n## [1] 2214\n## [1] 2216\n## [1] 2218\n## [1] 2220\n## [1] 2222\n## [1] 2224\n## [1] 2226\n## [1] 2228\n## [1] 2230\n## [1] 2232\n## [1] 2234\n## [1] 2236\n## [1] 2238\n## [1] 2240\n## [1] 2242\n## [1] 2244\n## [1] 2246\n## [1] 2248\n## [1] 2250\n## [1] 2252\n## [1] 2254\n## [1] 2256\n## [1] 2258\n## [1] 2260\n## [1] 2262\n## [1] 2264\n## [1] 2266\n## [1] 2268\n## [1] 2270\n## [1] 2272\n## [1] 2274\n## [1] 2276\n## [1] 2278\n## [1] 2280\n## [1] 2282\n## [1] 2284\n## [1] 2286\n## [1] 2288\n## [1] 2290\n## [1] 2292\n## [1] 2294\n## [1] 2296\n## [1] 2298\n## [1] 2300\n## [1] 2302\n## [1] 2304\n## [1] 2306\n## [1] 2308\n## [1] 2310\n## [1] 2312\n## [1] 2314\n## [1] 2316\n## [1] 2318\n## [1] 2320\n## [1] 2322\n## [1] 2324\n## [1] 2326\n## [1] 2328\n## [1] 2330\n## [1] 2332\n## [1] 2334\n## [1] 2336\n## [1] 2338\n## [1] 2340\n## [1] 2342\n## [1] 2344\n## [1] 2346\n## [1] 2348\n## [1] 2350\n## [1] 2352\n## [1] 2354\n## [1] 2356\n## [1] 2358\n## [1] 2360\n## [1] 2362\n## [1] 2364\n## [1] 2366\n## [1] 2368\n## [1] 2370\n## [1] 2372\n## [1] 2374\n## [1] 2376\n## [1] 2378\n## [1] 2380\n## [1] 2382\n## [1] 2384\n## [1] 2386\n## [1] 2388\n## [1] 2390\n## [1] 2392\n## [1] 2394\n## [1] 2396\n## [1] 2398\n## [1] 2400\n## [1] 2402\n## [1] 2404\n## [1] 2406\n## [1] 2408\n## [1] 2410\n## [1] 2412\n## [1] 2414\n## [1] 2416\n## [1] 2418\n## [1] 2420\n## [1] 2422\n## [1] 2424\n## [1] 2426\n## [1] 2428\n## [1] 2430\n## [1] 2432\n## [1] 2434\n## [1] 2436\n## [1] 2438\n## [1] 2440\n## [1] 2442\n## [1] 2444\n## [1] 2446\n## [1] 2448\n## [1] 2450\n## [1] 2452\n## [1] 2454\n## [1] 2456\n## [1] 2458\n## [1] 2460\n## [1] 2462\n## [1] 2464\n## [1] 2466\n## [1] 2468\n## [1] 2470\n## [1] 2472\n## [1] 2474\n## [1] 2476\n## [1] 2478\n## [1] 2480\n## [1] 2482\n## [1] 2484\n## [1] 2486\n## [1] 2488\n## [1] 2490\n## [1] 2492\n## [1] 2494\n## [1] 2496\n## [1] 2498\n## [1] 2500\n## [1] 2502\n## [1] 2504\n## [1] 2506\n## [1] 2508\n## [1] 2510\n## [1] 2512\n## [1] 2514\n## [1] 2516\n## [1] 2518\n## [1] 2520\n## [1] 2522\n## [1] 2524\n## [1] 2526\n## [1] 2528\n## [1] 2530\n## [1] 2532\n## [1] 2534\n## [1] 2536\n## [1] 2538\n## [1] 2540\n## [1] 2542\n## [1] 2544\n## [1] 2546\n## [1] 2548\n## [1] 2550\n## [1] 2552\n## [1] 2554\n## [1] 2556\n## [1] 2558\n## [1] 2560\n## [1] 2562\n## [1] 2564\n## [1] 2566\n## [1] 2568\n## [1] 2570\n## [1] 2572\n## [1] 2574\n## [1] 2576\n## [1] 2578\n## [1] 2580\n## [1] 2582\n## [1] 2584\n## [1] 2586\n## [1] 2588\n## [1] 2590\n## [1] 2592\n## [1] 2594\n## [1] 2596\n## [1] 2598\n## [1] 2600\n## [1] 2602\n## [1] 2604\n## [1] 2606\n## [1] 2608\n## [1] 2610\n## [1] 2612\n## [1] 2614\n## [1] 2616\n## [1] 2618\n## [1] 2620\n## [1] 2622\n## [1] 2624\n## [1] 2626\n## [1] 2628\n## [1] 2630\n## [1] 2632\n## [1] 2634\n## [1] 2636\n## [1] 2638\n## [1] 2640\n## [1] 2642\n## [1] 2644\n## [1] 2646\n## [1] 2648\n## [1] 2650\n## [1] 2652\n## [1] 2654\n## [1] 2656\n## [1] 2658\n## [1] 2660\n## [1] 2662\n## [1] 2664\n## [1] 2666\n## [1] 2668\n## [1] 2670\n## [1] 2672\n## [1] 2674\n## [1] 2676\n## [1] 2678\n## [1] 2680\n## [1] 2682\n## [1] 2684\n## [1] 2686\n## [1] 2688\n## [1] 2690\n## [1] 2692\n## [1] 2694\n## [1] 2696\n## [1] 2698\n## [1] 2700\n## [1] 2702\n## [1] 2704\n## [1] 2706\n## [1] 2708\n## [1] 2710\n## [1] 2712\n## [1] 2714\n## [1] 2716\n## [1] 2718\n## [1] 2720\n## [1] 2722\n## [1] 2724\n## [1] 2726\n## [1] 2728\n## [1] 2730\n## [1] 2732\n## [1] 2734\n## [1] 2736\n## [1] 2738\n## [1] 2740\n## [1] 2742\n## [1] 2744\n## [1] 2746\n## [1] 2748\n## [1] 2750\n## [1] 2752\n## [1] 2754\n## [1] 2756\n## [1] 2758\n## [1] 2760\n## [1] 2762\n## [1] 2764\n## [1] 2766\n## [1] 2768\n## [1] 2770\n## [1] 2772\n## [1] 2774\n## [1] 2776\n## [1] 2778\n## [1] 2780\n## [1] 2782\n## [1] 2784\n## [1] 2786\n## [1] 2788\n## [1] 2790\n## [1] 2792\n## [1] 2794\n## [1] 2796\n## [1] 2798\n## [1] 2800\n## [1] 2802\n## [1] 2804\n## [1] 2806\n## [1] 2808\n## [1] 2810\n## [1] 2812\n## [1] 2814\n## [1] 2816\n## [1] 2818\n## [1] 2820\n## [1] 2822\n## [1] 2824\n## [1] 2826\n## [1] 2828\n## [1] 2830\n## [1] 2832\n## [1] 2834\n## [1] 2836\n## [1] 2838\n## [1] 2840\n## [1] 2842\n## [1] 2844\n## [1] 2846\n## [1] 2848\n## [1] 2850\n## [1] 2852\n## [1] 2854\n## [1] 2856\n## [1] 2858\n## [1] 2860\n## [1] 2862\n## [1] 2864\n## [1] 2866\n## [1] 2868\n## [1] 2870\n## [1] 2872\n## [1] 2874\n## [1] 2876\n## [1] 2878\n## [1] 2880\n## [1] 2882\n## [1] 2884\n## [1] 2886\n## [1] 2888\n## [1] 2890\n## [1] 2892\n## [1] 2894\n## [1] 2896\n## [1] 2898\n## [1] 2900\n## [1] 2902\n## [1] 2904\n## [1] 2906\n## [1] 2908\n## [1] 2910\n## [1] 2912\n## [1] 2914\n## [1] 2916\n## [1] 2918\n## [1] 2920\n## [1] 2922\n## [1] 2924\n## [1] 2926\n## [1] 2928\n## [1] 2930\n## [1] 2932\n## [1] 2934\n## [1] 2936\n## [1] 2938\n## [1] 2940\n## [1] 2942\n## [1] 2944\n## [1] 2946\n## [1] 2948\n## [1] 2950\n## [1] 2952\n## [1] 2954\n## [1] 2956\n## [1] 2958\n## [1] 2960\n## [1] 2962\n## [1] 2964\n## [1] 2966\n## [1] 2968\n## [1] 2970\n## [1] 2972\n## [1] 2974\n## [1] 2976\n## [1] 2978\n## [1] 2980\n## [1] 2982\n## [1] 2984\n## [1] 2986\n## [1] 2988\n## [1] 2990\n## [1] 2992\n## [1] 2994\n## [1] 2996\n## [1] 2998\n## [1] 3000\n## [1] 3002\n## [1] 3004\n## [1] 3006\n## [1] 3008\n## [1] 3010\n## [1] 3012\n## [1] 3014\n## [1] 3016\n## [1] 3018\n## [1] 3020\n## [1] 3022\n## [1] 3024\n## [1] 3026\n## [1] 3028\n## [1] 3030\n## [1] 3032\n## [1] 3034\n## [1] 3036\n## [1] 3038\n## [1] 3040\n## [1] 3042\n## [1] 3044\n## [1] 3046\n## [1] 3048\n## [1] 3050\n## [1] 3052\n## [1] 3054\n## [1] 3056\n## [1] 3058\n## [1] 3060\n## [1] 3062\n## [1] 3064\n## [1] 3066\n## [1] 3068\n## [1] 3070\n## [1] 3072\n## [1] 3074\n## [1] 3076\n## [1] 3078\n## [1] 3080\n## [1] 3082\n## [1] 3084\n## [1] 3086\n## [1] 3088\n## [1] 3090\n## [1] 3092\n## [1] 3094\n## [1] 3096\n## [1] 3098\n## [1] 3100\n## [1] 3102\n## [1] 3104\n## [1] 3106\n## [1] 3108\n## [1] 3110\n## [1] 3112\n## [1] 3114\n## [1] 3116\n## [1] 3118\n## [1] 3120\n## [1] 3122\n## [1] 3124\n## [1] 3126\n## [1] 3128\n## [1] 3130\n## [1] 3132\n## [1] 3134\n## [1] 3136\n## [1] 3138\n## [1] 3140\n## [1] 3142\n## [1] 3144\n## [1] 3146\n## [1] 3148\n## [1] 3150\n## [1] 3152\n## [1] 3154\n## [1] 3156\n## [1] 3158\n## [1] 3160\n## [1] 3162\n## [1] 3164\n## [1] 3166\n## [1] 3168\n## [1] 3170\n## [1] 3172\n## [1] 3174\n## [1] 3176\n## [1] 3178\n## [1] 3180\n## [1] 3182\n## [1] 3184\n## [1] 3186\n## [1] 3188\n## [1] 3190\n## [1] 3192\n## [1] 3194\n## [1] 3196\n## [1] 3198\n## [1] 3200\n## [1] 3202\n## [1] 3204\n## [1] 3206\n## [1] 3208\n## [1] 3210\n## [1] 3212\n## [1] 3214\n## [1] 3216\n## [1] 3218\n## [1] 3220\n## [1] 3222\n## [1] 3224\n## [1] 3226\n## [1] 3228\n## [1] 3230\n## [1] 3232\n## [1] 3234\n## [1] 3236\n## [1] 3238\n## [1] 3240\n## [1] 3242\n## [1] 3244\n## [1] 3246\n## [1] 3248\n## [1] 3250\n## [1] 3252\n## [1] 3254\n## [1] 3256\n## [1] 3258\n## [1] 3260\n## [1] 3262\n## [1] 3264\n## [1] 3266\n## [1] 3268\n## [1] 3270\n## [1] 3272\n## [1] 3274\n## [1] 3276\n## [1] 3278\n## [1] 3280\n## [1] 3282\n## [1] 3284\n## [1] 3286\n## [1] 3288\n## [1] 3290\n## [1] 3292\n## [1] 3294\n## [1] 3296\n## [1] 3298\n## [1] 3300\n## [1] 3302\n## [1] 3304\n## [1] 3306\n## [1] 3308\n## [1] 3310\n## [1] 3312\n## [1] 3314\n## [1] 3316\n## [1] 3318\n## [1] 3320\n## [1] 3322\n## [1] 3324\n## [1] 3326\n## [1] 3328\n## [1] 3330\n## [1] 3332\n## [1] 3334\n## [1] 3336\n## [1] 3338\n## [1] 3340\n## [1] 3342\n## [1] 3344\n## [1] 3346\n## [1] 3348\n## [1] 3350\n## [1] 3352\n## [1] 3354\n## [1] 3356\n## [1] 3358\n## [1] 3360\n## [1] 3362\n## [1] 3364\n## [1] 3366\n## [1] 3368\n## [1] 3370\n## [1] 3372\n## [1] 3374\n## [1] 3376\n## [1] 3378\n## [1] 3380\n## [1] 3382\n## [1] 3384\n## [1] 3386\n## [1] 3388\n## [1] 3390\n## [1] 3392\n## [1] 3394\n## [1] 3396\n## [1] 3398\n## [1] 3400\n## [1] 3402\n## [1] 3404\n## [1] 3406\n## [1] 3408\n## [1] 3410\n## [1] 3412\n## [1] 3414\n## [1] 3416\n## [1] 3418\n## [1] 3420\n## [1] 3422\n## [1] 3424\n## [1] 3426\n## [1] 3428\n## [1] 3430\n## [1] 3432\n## [1] 3434\n## [1] 3436\n## [1] 3438\n## [1] 3440\n## [1] 3442\n## [1] 3444\n## [1] 3446\n## [1] 3448\n## [1] 3450\n## [1] 3452\n## [1] 3454\n## [1] 3456\n## [1] 3458\n## [1] 3460\n## [1] 3462\n## [1] 3464\n## [1] 3466\n## [1] 3468\n## [1] 3470\n## [1] 3472\n## [1] 3474\n## [1] 3476\n## [1] 3478\n## [1] 3480\n## [1] 3482\n## [1] 3484\n## [1] 3486\n## [1] 3488\n## [1] 3490\n## [1] 3492\n## [1] 3494\n## [1] 3496\n## [1] 3498\n## [1] 3500\n## [1] 3502\n## [1] 3504\n## [1] 3506\n## [1] 3508\n## [1] 3510\n## [1] 3512\n## [1] 3514\n## [1] 3516\n## [1] 3518\n## [1] 3520\n## [1] 3522\n## [1] 3524\n## [1] 3526\n## [1] 3528\n## [1] 3530\n## [1] 3532\n## [1] 3534\n## [1] 3536\n## [1] 3538\n## [1] 3540\n## [1] 3542\n## [1] 3544\n## [1] 3546\n## [1] 3548\n## [1] 3550\n## [1] 3552\n## [1] 3554\n## [1] 3556\n## [1] 3558\n## [1] 3560\n## [1] 3562\n## [1] 3564\n## [1] 3566\n## [1] 3568\n## [1] 3570\n## [1] 3572\n## [1] 3574\n## [1] 3576\n## [1] 3578\n## [1] 3580\n## [1] 3582\n## [1] 3584\n## [1] 3586\n## [1] 3588\n## [1] 3590\n## [1] 3592\n## [1] 3594\n## [1] 3596\n## [1] 3598\n## [1] 3600\n## [1] 3602\n## [1] 3604\n## [1] 3606\n## [1] 3608\n## [1] 3610\n## [1] 3612\n## [1] 3614\n## [1] 3616\n## [1] 3618\n## [1] 3620\n## [1] 3622\n## [1] 3624\n## [1] 3626\n## [1] 3628\n## [1] 3630\n## [1] 3632\n## [1] 3634\n## [1] 3636\n## [1] 3638\n## [1] 3640\n## [1] 3642\n## [1] 3644\n## [1] 3646\n## [1] 3648\n## [1] 3650\n## [1] 3652\n## [1] 3654\n## [1] 3656\n## [1] 3658\n## [1] 3660\n## [1] 3662\n## [1] 3664\n## [1] 3666\n## [1] 3668\n## [1] 3670\n## [1] 3672\n## [1] 3674\n## [1] 3676\n## [1] 3678\n## [1] 3680\n## [1] 3682\n## [1] 3684\n## [1] 3686\n## [1] 3688\n## [1] 3690\n## [1] 3692\n## [1] 3694\n## [1] 3696\n## [1] 3698\n## [1] 3700\n## [1] 3702\n## [1] 3704\n## [1] 3706\n## [1] 3708\n## [1] 3710\n## [1] 3712\n## [1] 3714\n## [1] 3716\n## [1] 3718\n## [1] 3720\n## [1] 3722\n## [1] 3724\n## [1] 3726\n## [1] 3728\n## [1] 3730\n## [1] 3732\n## [1] 3734\n## [1] 3736\n## [1] 3738\n## [1] 3740\n## [1] 3742\n## [1] 3744\n## [1] 3746\n## [1] 3748\n## [1] 3750\n## [1] 3752\n## [1] 3754\n## [1] 3756\n## [1] 3758\n## [1] 3760\n## [1] 3762\n## [1] 3764\n## [1] 3766\n## [1] 3768\n## [1] 3770\n## [1] 3772\n## [1] 3774\n## [1] 3776\n## [1] 3778\n## [1] 3780\n## [1] 3782\n## [1] 3784\n## [1] 3786\n## [1] 3788\n## [1] 3790\n## [1] 3792\n## [1] 3794\n## [1] 3796\n## [1] 3798\n## [1] 3800\n## [1] 3802\n## [1] 3804\n## [1] 3806\n## [1] 3808\n## [1] 3810\n## [1] 3812\n## [1] 3814\n## [1] 3816\n## [1] 3818\n## [1] 3820\n## [1] 3822\n## [1] 3824\n## [1] 3826\n## [1] 3828\n## [1] 3830\n## [1] 3832\n## [1] 3834\n## [1] 3836\n## [1] 3838\n## [1] 3840\n## [1] 3842\n## [1] 3844\n## [1] 3846\n## [1] 3848\n## [1] 3850\n## [1] 3852\n## [1] 3854\n## [1] 3856\n## [1] 3858\n## [1] 3860\n## [1] 3862\n## [1] 3864\n## [1] 3866\n## [1] 3868\n## [1] 3870\n## [1] 3872\n## [1] 3874\n## [1] 3876\n## [1] 3878\n## [1] 3880\n## [1] 3882\n## [1] 3884\n## [1] 3886\n## [1] 3888\n## [1] 3890\n## [1] 3892\n## [1] 3894\n## [1] 3896\n## [1] 3898\n## [1] 3900\n## [1] 3902\n## [1] 3904\n## [1] 3906\n## [1] 3908\n## [1] 3910\n## [1] 3912\n## [1] 3914\n## [1] 3916\n## [1] 3918\n## [1] 3920\n## [1] 3922\n## [1] 3924\n## [1] 3926\n## [1] 3928\n## [1] 3930\n## [1] 3932\n## [1] 3934\n## [1] 3936\n## [1] 3938\n## [1] 3940\n## [1] 3942\n## [1] 3944\n## [1] 3946\n## [1] 3948\n## [1] 3950\n## [1] 3952\n## [1] 3954\n## [1] 3956\n## [1] 3958\n## [1] 3960\n## [1] 3962\n## [1] 3964\n## [1] 3966\n## [1] 3968\n## [1] 3970\n## [1] 3972\n## [1] 3974\n## [1] 3976\n## [1] 3978\n## [1] 3980\n## [1] 3982\n## [1] 3984\n## [1] 3986\n## [1] 3988\n## [1] 3990\n## [1] 3992\n## [1] 3994\n## [1] 3996\n## [1] 3998\n## [1] 4000\n## [1] 4002\n## [1] 4004\n## [1] 4006\n## [1] 4008\n## [1] 4010\n## [1] 4012\n## [1] 4014\n## [1] 4016\n## [1] 4018\n## [1] 4020\n## [1] 4022\n## [1] 4024\n## [1] 4026\n## [1] 4028\n## [1] 4030\n## [1] 4032\n## [1] 4034\n## [1] 4036\n## [1] 4038\n## [1] 4040\n## [1] 4042\n## [1] 4044\n## [1] 4046\n## [1] 4048\n## [1] 4050\n## [1] 4052\n## [1] 4054\n## [1] 4056\n## [1] 4058\n## [1] 4060\n## [1] 4062\n## [1] 4064\n## [1] 4066\n## [1] 4068\n## [1] 4070\n## [1] 4072\n## [1] 4074\n## [1] 4076\n## [1] 4078\n## [1] 4080\n## [1] 4082\n## [1] 4084\n## [1] 4086\n## [1] 4088\n## [1] 4090\n## [1] 4092\n## [1] 4094\n## [1] 4096\n## [1] 4098\n## [1] 4100\n## [1] 4102\n## [1] 4104\n## [1] 4106\n## [1] 4108\n## [1] 4110\n## [1] 4112\n## [1] 4114\n## [1] 4116\n## [1] 4118\n## [1] 4120\n## [1] 4122\n## [1] 4124\n## [1] 4126\n## [1] 4128\n## [1] 4130\n## [1] 4132\n## [1] 4134\n## [1] 4136\n## [1] 4138\n## [1] 4140\n## [1] 4142\n## [1] 4144\n## [1] 4146\n## [1] 4148\n## [1] 4150\n## [1] 4152\n## [1] 4154\n## [1] 4156\n## [1] 4158\n## [1] 4160\n## [1] 4162\n## [1] 4164\n## [1] 4166\n## [1] 4168\n## [1] 4170\n## [1] 4172\n## [1] 4174\n## [1] 4176\n## [1] 4178\n## [1] 4180\n## [1] 4182\n## [1] 4184\n## [1] 4186\n## [1] 4188\n## [1] 4190\n## [1] 4192\n## [1] 4194\n## [1] 4196\n## [1] 4198\n## [1] 4200\n## [1] 4202\n## [1] 4204\n## [1] 4206\n## [1] 4208\n## [1] 4210\n## [1] 4212\n## [1] 4214\n## [1] 4216\n## [1] 4218\n## [1] 4220\n## [1] 4222\n## [1] 4224\n## [1] 4226\n## [1] 4228\n## [1] 4230\n## [1] 4232\n## [1] 4234\n## [1] 4236\n## [1] 4238\n## [1] 4240\n## [1] 4242\n## [1] 4244\n## [1] 4246\n## [1] 4248\n## [1] 4250\n## [1] 4252\n## [1] 4254\n## [1] 4256\n## [1] 4258\n## [1] 4260\n## [1] 4262\n## [1] 4264\n## [1] 4266\n## [1] 4268\n## [1] 4270\n## [1] 4272\n## [1] 4274\n## [1] 4276\n## [1] 4278\n## [1] 4280\n## [1] 4282\n## [1] 4284\n## [1] 4286\n## [1] 4288\n## [1] 4290\n## [1] 4292\n## [1] 4294\n## [1] 4296\n## [1] 4298\n## [1] 4300\n## [1] 4302\n## [1] 4304\n## [1] 4306\n## [1] 4308\n## [1] 4310\n## [1] 4312\n## [1] 4314\n## [1] 4316\n## [1] 4318\n## [1] 4320\n## [1] 4322\n## [1] 4324\n## [1] 4326\n## [1] 4328\n## [1] 4330\n## [1] 4332\n## [1] 4334\n## [1] 4336\n## [1] 4338\n## [1] 4340\n## [1] 4342\n## [1] 4344\n## [1] 4346\n## [1] 4348\n## [1] 4350\n## [1] 4352\n## [1] 4354\n## [1] 4356\n## [1] 4358\n## [1] 4360\n## [1] 4362\n## [1] 4364\n## [1] 4366\n## [1] 4368\n## [1] 4370\n## [1] 4372\n## [1] 4374\n## [1] 4376\n## [1] 4378\n## [1] 4380\n## [1] 4382\n## [1] 4384\n## [1] 4386\n## [1] 4388\n## [1] 4390\n## [1] 4392\n## [1] 4394\n## [1] 4396\n## [1] 4398\n## [1] 4400\n## [1] 4402\n## [1] 4404\n## [1] 4406\n## [1] 4408\n## [1] 4410\n## [1] 4412\n## [1] 4414\n## [1] 4416\n## [1] 4418\n## [1] 4420\n## [1] 4422\n## [1] 4424\n## [1] 4426\n## [1] 4428\n## [1] 4430\n## [1] 4432\n## [1] 4434\n## [1] 4436\n## [1] 4438\n## [1] 4440\n## [1] 4442\n## [1] 4444\n## [1] 4446\n## [1] 4448\n## [1] 4450\n## [1] 4452\n## [1] 4454\n## [1] 4456\n## [1] 4458\n## [1] 4460\n## [1] 4462\n## [1] 4464\n## [1] 4466\n## [1] 4468\n## [1] 4470\n## [1] 4472\n## [1] 4474\n## [1] 4476\n## [1] 4478\n## [1] 4480\n## [1] 4482\n## [1] 4484\n## [1] 4486\n## [1] 4488\n## [1] 4490\n## [1] 4492\n## [1] 4494\n## [1] 4496\n## [1] 4498\n## [1] 4500\n## [1] 4502\n## [1] 4504\n## [1] 4506\n## [1] 4508\n## [1] 4510\n## [1] 4512\n## [1] 4514\n## [1] 4516\n## [1] 4518\n## [1] 4520\n## [1] 4522\n## [1] 4524\n## [1] 4526\n## [1] 4528\n## [1] 4530\n## [1] 4532\n## [1] 4534\n## [1] 4536\n## [1] 4538\n## [1] 4540\n## [1] 4542\n## [1] 4544\n## [1] 4546\n## [1] 4548\n## [1] 4550\n## [1] 4552\n## [1] 4554\n## [1] 4556\n## [1] 4558\n## [1] 4560\n## [1] 4562\n## [1] 4564\n## [1] 4566\n## [1] 4568\n## [1] 4570\n## [1] 4572\n## [1] 4574\n## [1] 4576\n## [1] 4578\n## [1] 4580\n## [1] 4582\n## [1] 4584\n## [1] 4586\n## [1] 4588\n## [1] 4590\n## [1] 4592\n## [1] 4594\n## [1] 4596\n## [1] 4598\n## [1] 4600\n## [1] 4602\n## [1] 4604\n## [1] 4606\n## [1] 4608\n## [1] 4610\n## [1] 4612\n## [1] 4614\n## [1] 4616\n## [1] 4618\n## [1] 4620\n## [1] 4622\n## [1] 4624\n## [1] 4626\n## [1] 4628\n## [1] 4630\n## [1] 4632\n## [1] 4634\n## [1] 4636\n## [1] 4638\n## [1] 4640\n## [1] 4642\n## [1] 4644\n## [1] 4646\n## [1] 4648\n## [1] 4650\n## [1] 4652\n## [1] 4654\n## [1] 4656\n## [1] 4658\n## [1] 4660\n## [1] 4662\n## [1] 4664\n## [1] 4666\n## [1] 4668\n## [1] 4670\n## [1] 4672\n## [1] 4674\n## [1] 4676\n## [1] 4678\n## [1] 4680\n## [1] 4682\n## [1] 4684\n## [1] 4686\n## [1] 4688\n## [1] 4690\n## [1] 4692\n## [1] 4694\n## [1] 4696\n## [1] 4698\n## [1] 4700\n## [1] 4702\n## [1] 4704\n## [1] 4706\n## [1] 4708\n## [1] 4710\n## [1] 4712\n## [1] 4714\n## [1] 4716\n## [1] 4718\n## [1] 4720\n## [1] 4722\n## [1] 4724\n## [1] 4726\n## [1] 4728\n## [1] 4730\n## [1] 4732\n## [1] 4734\n## [1] 4736\n## [1] 4738\n## [1] 4740\n## [1] 4742\n## [1] 4744\n## [1] 4746\n## [1] 4748\n## [1] 4750\n## [1] 4752\n## [1] 4754\n## [1] 4756\n## [1] 4758\n## [1] 4760\n## [1] 4762\n## [1] 4764\n## [1] 4766\n## [1] 4768\n## [1] 4770\n## [1] 4772\n## [1] 4774\n## [1] 4776\n## [1] 4778\n## [1] 4780\n## [1] 4782\n## [1] 4784\n## [1] 4786\n## [1] 4788\n## [1] 4790\n## [1] 4792\n## [1] 4794\n## [1] 4796\n## [1] 4798\n## [1] 4800\n## [1] 4802\n## [1] 4804\n## [1] 4806\n## [1] 4808\n## [1] 4810\n## [1] 4812\n## [1] 4814\n## [1] 4816\n## [1] 4818\n## [1] 4820\n## [1] 4822\n## [1] 4824\n## [1] 4826\n## [1] 4828\n## [1] 4830\n## [1] 4832\n## [1] 4834\n## [1] 4836\n## [1] 4838\n## [1] 4840\n## [1] 4842\n## [1] 4844\n## [1] 4846\n## [1] 4848\n## [1] 4850\n## [1] 4852\n## [1] 4854\n## [1] 4856\n## [1] 4858\n## [1] 4860\n## [1] 4862\n## [1] 4864\n## [1] 4866\n## [1] 4868\n## [1] 4870\n## [1] 4872\n## [1] 4874\n## [1] 4876\n## [1] 4878\n## [1] 4880\n## [1] 4882\n## [1] 4884\n## [1] 4886\n## [1] 4888\n## [1] 4890\n## [1] 4892\n## [1] 4894\n## [1] 4896\n## [1] 4898\n## [1] 4900\n## [1] 4902\n## [1] 4904\n## [1] 4906\n## [1] 4908\n## [1] 4910\n## [1] 4912\n## [1] 4914\n## [1] 4916\n## [1] 4918\n## [1] 4920\n## [1] 4922\n## [1] 4924\n## [1] 4926\n## [1] 4928\n## [1] 4930\n## [1] 4932\n## [1] 4934\n## [1] 4936\n## [1] 4938\n## [1] 4940\n## [1] 4942\n## [1] 4944\n## [1] 4946\n## [1] 4948\n## [1] 4950\n## [1] 4952\n## [1] 4954\n## [1] 4956\n## [1] 4958\n## [1] 4960\n## [1] 4962\n## [1] 4964\n## [1] 4966\n## [1] 4968\n## [1] 4970\n## [1] 4972\n## [1] 4974\n## [1] 4976\n## [1] 4978\n## [1] 4980\n## [1] 4982\n## [1] 4984\n## [1] 4986\n## [1] 4988\n## [1] 4990\n## [1] 4992\n## [1] 4994\n## [1] 4996\n## [1] 4998\n## [1] 5000\n## [1] 5002\n## [1] 5004\n## [1] 5006\n## [1] 5008\n## [1] 5010\n## [1] 5012\n## [1] 5014\n## [1] 5016\n## [1] 5018\n## [1] 5020\n## [1] 5022\n## [1] 5024\n## [1] 5026\n## [1] 5028\n## [1] 5030\n## [1] 5032\n## [1] 5034\n## [1] 5036\n## [1] 5038\n## [1] 5040\n## [1] 5042\n## [1] 5044\n## [1] 5046\n## [1] 5048\n## [1] 5050\n## [1] 5052\n## [1] 5054\n## [1] 5056\n## [1] 5058\n## [1] 5060\n## [1] 5062\n## [1] 5064\n## [1] 5066\n## [1] 5068\n## [1] 5070\n## [1] 5072\n## [1] 5074\n## [1] 5076\n## [1] 5078\n## [1] 5080\n## [1] 5082\n## [1] 5084\n## [1] 5086\n## [1] 5088\n## [1] 5090\n## [1] 5092\n## [1] 5094\n## [1] 5096\n## [1] 5098\n## [1] 5100\n## [1] 5102\n## [1] 5104\n## [1] 5106\n## [1] 5108\n## [1] 5110\n## [1] 5112\n## [1] 5114\n## [1] 5116\n## [1] 5118\n## [1] 5120\n## [1] 5122\n## [1] 5124\n## [1] 5126\n## [1] 5128\n## [1] 5130\n## [1] 5132\n## [1] 5134\n## [1] 5136\n## [1] 5138\n## [1] 5140\n## [1] 5142\n## [1] 5144\n## [1] 5146\n## [1] 5148\n## [1] 5150\n## [1] 5152\n## [1] 5154\n## [1] 5156\n## [1] 5158\n## [1] 5160\n## [1] 5162\n## [1] 5164\n## [1] 5166\n## [1] 5168\n## [1] 5170\n## [1] 5172\n## [1] 5174\n## [1] 5176\n## [1] 5178\n## [1] 5180\n## [1] 5182\n## [1] 5184\n## [1] 5186\n## [1] 5188\n## [1] 5190\n## [1] 5192\n## [1] 5194\n## [1] 5196\n## [1] 5198\n## [1] 5200\n## [1] 5202\n## [1] 5204\n## [1] 5206\n## [1] 5208\n## [1] 5210\n## [1] 5212\n## [1] 5214\n## [1] 5216\n## [1] 5218\n## [1] 5220\n## [1] 5222\n## [1] 5224\n## [1] 5226\n## [1] 5228\n## [1] 5230\n## [1] 5232\n## [1] 5234\n## [1] 5236\n## [1] 5238\n## [1] 5240\n## [1] 5242\n## [1] 5244\n## [1] 5246\n## [1] 5248\n## [1] 5250\n## [1] 5252\n## [1] 5254\n## [1] 5256\n## [1] 5258\n## [1] 5260\n## [1] 5262\n## [1] 5264\n## [1] 5266\n## [1] 5268\n## [1] 5270\n## [1] 5272\n## [1] 5274\n## [1] 5276\n## [1] 5278\n## [1] 5280\n## [1] 5282\n## [1] 5284\n## [1] 5286\n## [1] 5288\n## [1] 5290\n## [1] 5292\n## [1] 5294\n## [1] 5296\n## [1] 5298\n## [1] 5300\n## [1] 5302\n## [1] 5304\n## [1] 5306\n## [1] 5308\n## [1] 5310\n## [1] 5312\n## [1] 5314\n## [1] 5316\n## [1] 5318\n## [1] 5320\n## [1] 5322\n## [1] 5324\n## [1] 5326\n## [1] 5328\n## [1] 5330\n## [1] 5332\n## [1] 5334\n## [1] 5336\n## [1] 5338\n## [1] 5340\n## [1] 5342\n## [1] 5344\n## [1] 5346\n## [1] 5348\n## [1] 5350\n## [1] 5352\n## [1] 5354\n## [1] 5356\n## [1] 5358\n## [1] 5360\n## [1] 5362\n## [1] 5364\n## [1] 5366\n## [1] 5368\n## [1] 5370\n## [1] 5372\n## [1] 5374\n## [1] 5376\n## [1] 5378\n## [1] 5380\n## [1] 5382\n## [1] 5384\n## [1] 5386\n## [1] 5388\n## [1] 5390\n## [1] 5392\n## [1] 5394\n## [1] 5396\n## [1] 5398\n## [1] 5400\n## [1] 5402\n## [1] 5404\n## [1] 5406\n## [1] 5408\n## [1] 5410\n## [1] 5412\n## [1] 5414\n## [1] 5416\n## [1] 5418\n## [1] 5420\n## [1] 5422\n## [1] 5424\n## [1] 5426\n## [1] 5428\n## [1] 5430\n## [1] 5432\n## [1] 5434\n## [1] 5436\n## [1] 5438\n## [1] 5440\n## [1] 5442\n## [1] 5444\n## [1] 5446\n## [1] 5448\n## [1] 5450\n## [1] 5452\n## [1] 5454\n## [1] 5456\n## [1] 5458\n## [1] 5460\n## [1] 5462\n## [1] 5464\n## [1] 5466\n## [1] 5468\n## [1] 5470\n## [1] 5472\n## [1] 5474\n## [1] 5476\n## [1] 5478\n## [1] 5480\n## [1] 5482\n## [1] 5484\n## [1] 5486\n## [1] 5488\n## [1] 5490\n## [1] 5492\n## [1] 5494\n## [1] 5496\n## [1] 5498\n## [1] 5500\n## [1] 5502\n## [1] 5504\n## [1] 5506\n## [1] 5508\n## [1] 5510\n## [1] 5512\n## [1] 5514\n## [1] 5516\n## [1] 5518\n## [1] 5520\n## [1] 5522\n## [1] 5524\n## [1] 5526\n## [1] 5528\n## [1] 5530\n## [1] 5532\n## [1] 5534\n## [1] 5536\n## [1] 5538\n## [1] 5540\n## [1] 5542\n## [1] 5544\n## [1] 5546\n## [1] 5548\n## [1] 5550\n## [1] 5552\n## [1] 5554\n## [1] 5556\n## [1] 5558\n## [1] 5560\n## [1] 5562\n## [1] 5564\n## [1] 5566\n## [1] 5568\n## [1] 5570\n## [1] 5572\n## [1] 5574\n## [1] 5576\n## [1] 5578\n## [1] 5580\n## [1] 5582\n## [1] 5584\n## [1] 5586\n## [1] 5588\n## [1] 5590\n## [1] 5592\n## [1] 5594\n## [1] 5596\n## [1] 5598\n## [1] 5600\n## [1] 5602\n## [1] 5604\n## [1] 5606\n## [1] 5608\n## [1] 5610\n## [1] 5612\n## [1] 5614\n## [1] 5616\n## [1] 5618\n## [1] 5620\n## [1] 5622\n## [1] 5624\n## [1] 5626\n## [1] 5628\n## [1] 5630\n## [1] 5632\n## [1] 5634\n## [1] 5636\n## [1] 5638\n## [1] 5640\n## [1] 5642\n## [1] 5644\n## [1] 5646\n## [1] 5648\n## [1] 5650\n## [1] 5652\n## [1] 5654\n## [1] 5656\n## [1] 5658\n## [1] 5660\n## [1] 5662\n## [1] 5664\n## [1] 5666\n## [1] 5668\n## [1] 5670\n## [1] 5672\n## [1] 5674\n## [1] 5676\n## [1] 5678\n## [1] 5680\n## [1] 5682\n## [1] 5684\n## [1] 5686\n## [1] 5688\n## [1] 5690\n## [1] 5692\n## [1] 5694\n## [1] 5696\n## [1] 5698\n## [1] 5700\n## [1] 5702\n## [1] 5704\n## [1] 5706\n## [1] 5708\n## [1] 5710\n## [1] 5712\n## [1] 5714\n## [1] 5716\n## [1] 5718\n## [1] 5720\n## [1] 5722\n## [1] 5724\n## [1] 5726\n## [1] 5728\n## [1] 5730\n## [1] 5732\n## [1] 5734\n## [1] 5736\n## [1] 5738\n## [1] 5740\n## [1] 5742\n## [1] 5744\n## [1] 5746\n## [1] 5748\n## [1] 5750\n## [1] 5752\n## [1] 5754\n## [1] 5756\n## [1] 5758\n## [1] 5760\n## [1] 5762\n## [1] 5764\n## [1] 5766\n## [1] 5768\n## [1] 5770\n## [1] 5772\n## [1] 5774\n## [1] 5776\n## [1] 5778\n## [1] 5780\n## [1] 5782\n## [1] 5784\n## [1] 5786\n## [1] 5788\n## [1] 5790\n## [1] 5792\n## [1] 5794\n## [1] 5796\n## [1] 5798\n## [1] 5800\n## [1] 5802\n## [1] 5804\n## [1] 5806\n## [1] 5808\n## [1] 5810\n## [1] 5812\n## [1] 5814\n## [1] 5816\n## [1] 5818\n## [1] 5820\n## [1] 5822\n## [1] 5824\n## [1] 5826\n## [1] 5828\n## [1] 5830\n## [1] 5832\n## [1] 5834\n## [1] 5836\n## [1] 5838\n## [1] 5840\n## [1] 5842\n## [1] 5844\n## [1] 5846\n## [1] 5848\n## [1] 5850\n## [1] 5852\n## [1] 5854\n## [1] 5856\n## [1] 5858\n## [1] 5860\n## [1] 5862\n## [1] 5864\n## [1] 5866\n## [1] 5868\n## [1] 5870\n## [1] 5872\n## [1] 5874\n## [1] 5876\n## [1] 5878\n## [1] 5880\n## [1] 5882\n## [1] 5884\n## [1] 5886\n## [1] 5888\n## [1] 5890\n## [1] 5892\n## [1] 5894\n## [1] 5896\n## [1] 5898\n## [1] 5900\n## [1] 5902\n## [1] 5904\n## [1] 5906\n## [1] 5908\n## [1] 5910\n## [1] 5912\n## [1] 5914\n## [1] 5916\n## [1] 5918\n## [1] 5920\n## [1] 5922\n## [1] 5924\n## [1] 5926\n## [1] 5928\n## [1] 5930\n## [1] 5932\n## [1] 5934\n## [1] 5936\n## [1] 5938\n## [1] 5940\n## [1] 5942\n## [1] 5944\n## [1] 5946\n## [1] 5948\n## [1] 5950\n## [1] 5952\n## [1] 5954\n## [1] 5956\n## [1] 5958\n## [1] 5960\n## [1] 5962\n## [1] 5964\n## [1] 5966\n## [1] 5968\n## [1] 5970\n## [1] 5972\n## [1] 5974\n## [1] 5976\n## [1] 5978\n## [1] 5980\n## [1] 5982\n## [1] 5984\n## [1] 5986\n## [1] 5988\n## [1] 5990\n## [1] 5992\n## [1] 5994\n## [1] 5996\n## [1] 5998\n## [1] 6000\n## [1] 6002\n## [1] 6004\n## [1] 6006\n## [1] 6008\n## [1] 6010\n## [1] 6012\n## [1] 6014\n## [1] 6016\n## [1] 6018\n## [1] 6020\n## [1] 6022\n## [1] 6024\n## [1] 6026\n## [1] 6028\n## [1] 6030\n## [1] 6032\n## [1] 6034\n## [1] 6036\n## [1] 6038\n## [1] 6040\n## [1] 6042\n## [1] 6044\n## [1] 6046\n## [1] 6048\n## [1] 6050\n## [1] 6052\n## [1] 6054\n## [1] 6056\n## [1] 6058\n## [1] 6060\n## [1] 6062\n## [1] 6064\n## [1] 6066\n## [1] 6068\n## [1] 6070\n## [1] 6072\n## [1] 6074\n## [1] 6076\n## [1] 6078\n## [1] 6080\n## [1] 6082\n## [1] 6084\n## [1] 6086\n## [1] 6088\n## [1] 6090\n## [1] 6092\n## [1] 6094\n## [1] 6096\n## [1] 6098\n## [1] 6100\n## [1] 6102\n## [1] 6104\n## [1] 6106\n## [1] 6108\n## [1] 6110\n## [1] 6112\n## [1] 6114\n## [1] 6116\n## [1] 6118\n## [1] 6120\n## [1] 6122\n## [1] 6124\n## [1] 6126\n## [1] 6128\n## [1] 6130\n## [1] 6132\n## [1] 6134\n## [1] 6136\n## [1] 6138\n## [1] 6140\n## [1] 6142\n## [1] 6144\n## [1] 6146\n## [1] 6148\n## [1] 6150\n## [1] 6152\n## [1] 6154\n## [1] 6156\n## [1] 6158\n## [1] 6160\n## [1] 6162\n## [1] 6164\n## [1] 6166\n## [1] 6168\n## [1] 6170\n## [1] 6172\n## [1] 6174\n## [1] 6176\n## [1] 6178\n## [1] 6180\n## [1] 6182\n## [1] 6184\n## [1] 6186\n## [1] 6188\n## [1] 6190\n## [1] 6192\n## [1] 6194\n## [1] 6196\n## [1] 6198\n## [1] 6200\n## [1] 6202\n## [1] 6204\n## [1] 6206\n## [1] 6208\n## [1] 6210\n## [1] 6212\n## [1] 6214\n## [1] 6216\n## [1] 6218\n## [1] 6220\n## [1] 6222\n## [1] 6224\n## [1] 6226\n## [1] 6228\n## [1] 6230\n## [1] 6232\n## [1] 6234\n## [1] 6236\n## [1] 6238\n## [1] 6240\n## [1] 6242\n## [1] 6244\n## [1] 6246\n## [1] 6248\n## [1] 6250\n## [1] 6252\n## [1] 6254\n## [1] 6256\n## [1] 6258\n## [1] 6260\n## [1] 6262\n## [1] 6264\n## [1] 6266\n## [1] 6268\n## [1] 6270\n## [1] 6272\n## [1] 6274\n## [1] 6276\n## [1] 6278\n## [1] 6280\n## [1] 6282\n## [1] 6284\n## [1] 6286\n## [1] 6288\n## [1] 6290\n## [1] 6292\n## [1] 6294\n## [1] 6296\n## [1] 6298\n## [1] 6300\n## [1] 6302\n## [1] 6304\n## [1] 6306\n## [1] 6308\n## [1] 6310\n## [1] 6312\n## [1] 6314\n## [1] 6316\n## [1] 6318\n## [1] 6320\n## [1] 6322\n## [1] 6324\n## [1] 6326\n## [1] 6328\n## [1] 6330\n## [1] 6332\n## [1] 6334\n## [1] 6336\n## [1] 6338\n## [1] 6340\n## [1] 6342\n## [1] 6344\n## [1] 6346\n## [1] 6348\n## [1] 6350\n## [1] 6352\n## [1] 6354\n## [1] 6356\n## [1] 6358\n## [1] 6360\n## [1] 6362\n## [1] 6364\n## [1] 6366\n## [1] 6368\n## [1] 6370\n## [1] 6372\n## [1] 6374\n## [1] 6376\n## [1] 6378\n## [1] 6380\n## [1] 6382\n## [1] 6384\n## [1] 6386\n## [1] 6388\n## [1] 6390\n## [1] 6392\n## [1] 6394\n## [1] 6396\n## [1] 6398\n## [1] 6400\n## [1] 6402\n## [1] 6404\n## [1] 6406\n## [1] 6408\n## [1] 6410\n## [1] 6412\n## [1] 6414\n## [1] 6416\n## [1] 6418\n## [1] 6420\n## [1] 6422\n## [1] 6424\n## [1] 6426\n## [1] 6428\n## [1] 6430\n## [1] 6432\n## [1] 6434\n## [1] 6436\n## [1] 6438\n## [1] 6440\n## [1] 6442\n## [1] 6444\n## [1] 6446\n## [1] 6448\n## [1] 6450\n## [1] 6452\n## [1] 6454\n## [1] 6456\n## [1] 6458\n## [1] 6460\n## [1] 6462\n## [1] 6464\n## [1] 6466\n## [1] 6468\n## [1] 6470\n## [1] 6472\n## [1] 6474\n## [1] 6476\n## [1] 6478\n## [1] 6480\n## [1] 6482\n## [1] 6484\n## [1] 6486\n## [1] 6488\n## [1] 6490\n## [1] 6492\n## [1] 6494\n## [1] 6496\n## [1] 6498\n## [1] 6500\n## [1] 6502\n## [1] 6504\n## [1] 6506\n## [1] 6508\n## [1] 6510\n## [1] 6512\n## [1] 6514\n## [1] 6516\n## [1] 6518\n## [1] 6520\n## [1] 6522\n## [1] 6524\n## [1] 6526\n## [1] 6528\n## [1] 6530\n## [1] 6532\n## [1] 6534\n## [1] 6536\n## [1] 6538\n## [1] 6540\n## [1] 6542\n## [1] 6544\n## [1] 6546\n## [1] 6548\n## [1] 6550\n## [1] 6552\n## [1] 6554\n## [1] 6556\n## [1] 6558\n## [1] 6560\n## [1] 6562\n## [1] 6564\n## [1] 6566\n## [1] 6568\n## [1] 6570\n## [1] 6572\n## [1] 6574\n## [1] 6576\n## [1] 6578\n## [1] 6580\n## [1] 6582\n## [1] 6584\n## [1] 6586\n## [1] 6588\n## [1] 6590\n## [1] 6592\n## [1] 6594\n## [1] 6596\n## [1] 6598\n## [1] 6600\n## [1] 6602\n## [1] 6604\n## [1] 6606\n## [1] 6608\n## [1] 6610\n## [1] 6612\n## [1] 6614\n## [1] 6616\n## [1] 6618\n## [1] 6620\n## [1] 6622\n## [1] 6624\n## [1] 6626\n## [1] 6628\n## [1] 6630\n## [1] 6632\n## [1] 6634\n## [1] 6636\n## [1] 6638\n## [1] 6640\n## [1] 6642\n## [1] 6644\n## [1] 6646\n## [1] 6648\n## [1] 6650\n## [1] 6652\n## [1] 6654\n## [1] 6656\n## [1] 6658\n## [1] 6660\n## [1] 6662\n## [1] 6664\n## [1] 6666\n## [1] 6668\n## [1] 6670\n## [1] 6672\n## [1] 6674\n## [1] 6676\n## [1] 6678\n## [1] 6680\n## [1] 6682\n## [1] 6684\n## [1] 6686\n## [1] 6688\n## [1] 6690\n## [1] 6692\n## [1] 6694\n## [1] 6696\n## [1] 6698\n## [1] 6700\n## [1] 6702\n## [1] 6704\n## [1] 6706\n## [1] 6708\n## [1] 6710\n## [1] 6712\n## [1] 6714\n## [1] 6716\n## [1] 6718\n## [1] 6720\n## [1] 6722\n## [1] 6724\n## [1] 6726\n## [1] 6728\n## [1] 6730\n## [1] 6732\n## [1] 6734\n## [1] 6736\n## [1] 6738\n## [1] 6740\n## [1] 6742\n## [1] 6744\n## [1] 6746\n## [1] 6748\n## [1] 6750\n## [1] 6752\n## [1] 6754\n## [1] 6756\n## [1] 6758\n## [1] 6760\n## [1] 6762\n## [1] 6764\n## [1] 6766\n## [1] 6768\n## [1] 6770\n## [1] 6772\n## [1] 6774\n## [1] 6776\n## [1] 6778\n## [1] 6780\n## [1] 6782\n## [1] 6784\n## [1] 6786\n## [1] 6788\n## [1] 6790\n## [1] 6792\n## [1] 6794\n## [1] 6796\n## [1] 6798\n## [1] 6800\n## [1] 6802\n## [1] 6804\n## [1] 6806\n## [1] 6808\n## [1] 6810\n## [1] 6812\n## [1] 6814\n## [1] 6816\n## [1] 6818\n## [1] 6820\n## [1] 6822\n## [1] 6824\n## [1] 6826\n## [1] 6828\n## [1] 6830\n## [1] 6832\n## [1] 6834\n## [1] 6836\n## [1] 6838\n## [1] 6840\n## [1] 6842\n## [1] 6844\n## [1] 6846\n## [1] 6848\n## [1] 6850\n## [1] 6852\n## [1] 6854\n## [1] 6856\n## [1] 6858\n## [1] 6860\n## [1] 6862\n## [1] 6864\n## [1] 6866\n## [1] 6868\n## [1] 6870\n## [1] 6872\n## [1] 6874\n## [1] 6876\n## [1] 6878\n## [1] 6880\n## [1] 6882\n## [1] 6884\n## [1] 6886\n## [1] 6888\n## [1] 6890\n## [1] 6892\n## [1] 6894\n## [1] 6896\n## [1] 6898\n## [1] 6900\n## [1] 6902\n## [1] 6904\n## [1] 6906\n## [1] 6908\n## [1] 6910\n## [1] 6912\n## [1] 6914\n## [1] 6916\n## [1] 6918\n## [1] 6920\n## [1] 6922\n## [1] 6924\n## [1] 6926\n## [1] 6928\n## [1] 6930\n## [1] 6932\n## [1] 6934\n## [1] 6936\n## [1] 6938\n## [1] 6940\n## [1] 6942\n## [1] 6944\n## [1] 6946\n## [1] 6948\n## [1] 6950\n## [1] 6952\n## [1] 6954\n## [1] 6956\n## [1] 6958\n## [1] 6960\n## [1] 6962\n## [1] 6964\n## [1] 6966\n## [1] 6968\n## [1] 6970\n## [1] 6972\n## [1] 6974\n## [1] 6976\n## [1] 6978\n## [1] 6980\n## [1] 6982\n## [1] 6984\n## [1] 6986\n## [1] 6988\n## [1] 6990\n## [1] 6992\n## [1] 6994\n## [1] 6996\n## [1] 6998\n## [1] 7000\n## [1] 7002\n## [1] 7004\n## [1] 7006\n## [1] 7008\n## [1] 7010\n## [1] 7012\n## [1] 7014\n## [1] 7016\n## [1] 7018\n## [1] 7020\n## [1] 7022\n## [1] 7024\n## [1] 7026\n## [1] 7028\n## [1] 7030\n## [1] 7032\n## [1] 7034\n## [1] 7036\n## [1] 7038\n## [1] 7040\n## [1] 7042\n## [1] 7044\n## [1] 7046\n## [1] 7048\n## [1] 7050\n## [1] 7052\n## [1] 7054\n## [1] 7056\n## [1] 7058\n## [1] 7060\n## [1] 7062\n## [1] 7064\n## [1] 7066\n## [1] 7068\n## [1] 7070\n## [1] 7072\n## [1] 7074\n## [1] 7076\n## [1] 7078\n## [1] 7080\n## [1] 7082\n## [1] 7084\n## [1] 7086\n## [1] 7088\n## [1] 7090\n## [1] 7092\n## [1] 7094\n## [1] 7096\n## [1] 7098\n## [1] 7100\n## [1] 7102\n## [1] 7104\n## [1] 7106\n## [1] 7108\n## [1] 7110\n## [1] 7112\n## [1] 7114\n## [1] 7116\n## [1] 7118\n## [1] 7120\n## [1] 7122\n## [1] 7124\n## [1] 7126\n## [1] 7128\n## [1] 7130\n## [1] 7132\n## [1] 7134\n## [1] 7136\n## [1] 7138\n## [1] 7140\n## [1] 7142\n## [1] 7144\n## [1] 7146\n## [1] 7148\n## [1] 7150\n## [1] 7152\n## [1] 7154\n## [1] 7156\n## [1] 7158\n## [1] 7160\n## [1] 7162\n## [1] 7164\n## [1] 7166\n## [1] 7168\n## [1] 7170\n## [1] 7172\n## [1] 7174\n## [1] 7176\n## [1] 7178\n## [1] 7180\n## [1] 7182\n## [1] 7184\n## [1] 7186\n## [1] 7188\n## [1] 7190\n## [1] 7192\n## [1] 7194\n## [1] 7196\n## [1] 7198\n## [1] 7200\n## [1] 7202\n## [1] 7204\n## [1] 7206\n## [1] 7208\n## [1] 7210\n## [1] 7212\n## [1] 7214\n## [1] 7216\n## [1] 7218\n## [1] 7220\n## [1] 7222\n## [1] 7224\n## [1] 7226\n## [1] 7228\n## [1] 7230\n## [1] 7232\n## [1] 7234\n## [1] 7236\n## [1] 7238\n## [1] 7240\n## [1] 7242\n## [1] 7244\n## [1] 7246\n## [1] 7248\n## [1] 7250\n## [1] 7252\n## [1] 7254\n## [1] 7256\n## [1] 7258\n## [1] 7260\n## [1] 7262\n## [1] 7264\n## [1] 7266\n## [1] 7268\n## [1] 7270\n## [1] 7272\n## [1] 7274\n## [1] 7276\n## [1] 7278\n## [1] 7280\n## [1] 7282\n## [1] 7284\n## [1] 7286\n## [1] 7288\n## [1] 7290\n## [1] 7292\n## [1] 7294\n## [1] 7296\n## [1] 7298\n## [1] 7300\n## [1] 7302\n## [1] 7304\n## [1] 7306\n## [1] 7308\n## [1] 7310\n## [1] 7312\n## [1] 7314\n## [1] 7316\n## [1] 7318\n## [1] 7320\n## [1] 7322\n## [1] 7324\n## [1] 7326\n## [1] 7328\n## [1] 7330\n## [1] 7332\n## [1] 7334\n## [1] 7336\n## [1] 7338\n## [1] 7340\n## [1] 7342\n## [1] 7344\n## [1] 7346\n## [1] 7348\n## [1] 7350\n## [1] 7352\n## [1] 7354\n## [1] 7356\n## [1] 7358\n## [1] 7360\n## [1] 7362\n## [1] 7364\n## [1] 7366\n## [1] 7368\n## [1] 7370\n## [1] 7372\n## [1] 7374\n## [1] 7376\n## [1] 7378\n## [1] 7380\n## [1] 7382\n## [1] 7384\n## [1] 7386\n## [1] 7388\n## [1] 7390\n## [1] 7392\n## [1] 7394\n## [1] 7396\n## [1] 7398\n## [1] 7400\n## [1] 7402\n## [1] 7404\n## [1] 7406\n## [1] 7408\n## [1] 7410\n## [1] 7412\n## [1] 7414\n## [1] 7416\n## [1] 7418\n## [1] 7420\n## [1] 7422\n## [1] 7424\n## [1] 7426\n## [1] 7428\n## [1] 7430\n## [1] 7432\n## [1] 7434\n## [1] 7436\n## [1] 7438\n## [1] 7440\n## [1] 7442\n## [1] 7444\n## [1] 7446\n## [1] 7448\n## [1] 7450\n## [1] 7452\n## [1] 7454\n## [1] 7456\n## [1] 7458\n## [1] 7460\n## [1] 7462\n## [1] 7464\n## [1] 7466\n## [1] 7468\n## [1] 7470\n## [1] 7472\n## [1] 7474\n## [1] 7476\n## [1] 7478\n## [1] 7480\n## [1] 7482\n## [1] 7484\n## [1] 7486\n## [1] 7488\n## [1] 7490\n## [1] 7492\n## [1] 7494\n## [1] 7496\n## [1] 7498\n## [1] 7500\n## [1] 7502\n## [1] 7504\n## [1] 7506\n## [1] 7508\n## [1] 7510\n## [1] 7512\n## [1] 7514\n## [1] 7516\n## [1] 7518\n## [1] 7520\n## [1] 7522\n## [1] 7524\n## [1] 7526\n## [1] 7528\n## [1] 7530\n## [1] 7532\n## [1] 7534\n## [1] 7536\n## [1] 7538\n## [1] 7540\n## [1] 7542\n## [1] 7544\n## [1] 7546\n## [1] 7548\n## [1] 7550\n## [1] 7552\n## [1] 7554\n## [1] 7556\n## [1] 7558\n## [1] 7560\n## [1] 7562\n## [1] 7564\n## [1] 7566\n## [1] 7568\n## [1] 7570\n## [1] 7572\n## [1] 7574\n## [1] 7576\n## [1] 7578\n## [1] 7580\n## [1] 7582\n## [1] 7584\n## [1] 7586\n## [1] 7588\n## [1] 7590\n## [1] 7592\n## [1] 7594\n## [1] 7596\n## [1] 7598\n## [1] 7600\n## [1] 7602\n## [1] 7604\n## [1] 7606\n## [1] 7608\n## [1] 7610\n## [1] 7612\n## [1] 7614\n## [1] 7616\n## [1] 7618\n## [1] 7620\n## [1] 7622\n## [1] 7624\n## [1] 7626\n## [1] 7628\n## [1] 7630\n## [1] 7632\n## [1] 7634\n## [1] 7636\n## [1] 7638\n## [1] 7640\n## [1] 7642\n## [1] 7644\n## [1] 7646\n## [1] 7648\n## [1] 7650\n## [1] 7652\n## [1] 7654\n## [1] 7656\n## [1] 7658\n## [1] 7660\n## [1] 7662\n## [1] 7664\n## [1] 7666\n## [1] 7668\n## [1] 7670\n## [1] 7672\n## [1] 7674\n## [1] 7676\n## [1] 7678\n## [1] 7680\n## [1] 7682\n## [1] 7684\n## [1] 7686\n## [1] 7688\n## [1] 7690\n## [1] 7692\n## [1] 7694\n## [1] 7696\n## [1] 7698\n## [1] 7700\n## [1] 7702\n## [1] 7704\n## [1] 7706\n## [1] 7708\n## [1] 7710\n## [1] 7712\n## [1] 7714\n## [1] 7716\n## [1] 7718\n## [1] 7720\n## [1] 7722\n## [1] 7724\n## [1] 7726\n## [1] 7728\n## [1] 7730\n## [1] 7732\n## [1] 7734\n## [1] 7736\n## [1] 7738\n## [1] 7740\n## [1] 7742\n## [1] 7744\n## [1] 7746\n## [1] 7748\n## [1] 7750\n## [1] 7752\n## [1] 7754\n## [1] 7756\n## [1] 7758\n## [1] 7760\n## [1] 7762\n## [1] 7764\n## [1] 7766\n## [1] 7768\n## [1] 7770\n## [1] 7772\n## [1] 7774\n## [1] 7776\n## [1] 7778\n## [1] 7780\n## [1] 7782\n## [1] 7784\n## [1] 7786\n## [1] 7788\n## [1] 7790\n## [1] 7792\n## [1] 7794\n## [1] 7796\n## [1] 7798\n## [1] 7800\n## [1] 7802\n## [1] 7804\n## [1] 7806\n## [1] 7808\n## [1] 7810\n## [1] 7812\n## [1] 7814\n## [1] 7816\n## [1] 7818\n## [1] 7820\n## [1] 7822\n## [1] 7824\n## [1] 7826\n## [1] 7828\n## [1] 7830\n## [1] 7832\n## [1] 7834\n## [1] 7836\n## [1] 7838\n## [1] 7840\n## [1] 7842\n## [1] 7844\n## [1] 7846\n## [1] 7848\n## [1] 7850\n## [1] 7852\n## [1] 7854\n## [1] 7856\n## [1] 7858\n## [1] 7860\n## [1] 7862\n## [1] 7864\n## [1] 7866\n## [1] 7868\n## [1] 7870\n## [1] 7872\n## [1] 7874\n## [1] 7876\n## [1] 7878\n## [1] 7880\n## [1] 7882\n## [1] 7884\n## [1] 7886\n## [1] 7888\n## [1] 7890\n## [1] 7892\n## [1] 7894\n## [1] 7896\n## [1] 7898\n## [1] 7900\n## [1] 7902\n## [1] 7904\n## [1] 7906\n## [1] 7908\n## [1] 7910\n## [1] 7912\n## [1] 7914\n## [1] 7916\n## [1] 7918\n## [1] 7920\n## [1] 7922\n## [1] 7924\n## [1] 7926\n## [1] 7928\n## [1] 7930\n## [1] 7932\n## [1] 7934\n## [1] 7936\n## [1] 7938\n## [1] 7940\n## [1] 7942\n## [1] 7944\n## [1] 7946\n## [1] 7948\n## [1] 7950\n## [1] 7952\n## [1] 7954\n## [1] 7956\n## [1] 7958\n## [1] 7960\n## [1] 7962\n## [1] 7964\n## [1] 7966\n## [1] 7968\n## [1] 7970\n## [1] 7972\n## [1] 7974\n## [1] 7976\n## [1] 7978\n## [1] 7980\n## [1] 7982\n## [1] 7984\n## [1] 7986\n## [1] 7988\n## [1] 7990\n## [1] 7992\n## [1] 7994\n## [1] 7996\n## [1] 7998\n## [1] 8000\n## [1] 8002\n## [1] 8004\n## [1] 8006\n## [1] 8008\n## [1] 8010\n## [1] 8012\n## [1] 8014\n## [1] 8016\n## [1] 8018\n## [1] 8020\n## [1] 8022\n## [1] 8024\n## [1] 8026\n## [1] 8028\n## [1] 8030\n## [1] 8032\n## [1] 8034\n## [1] 8036\n## [1] 8038\n## [1] 8040\n## [1] 8042\n## [1] 8044\n## [1] 8046\n## [1] 8048\n## [1] 8050\n## [1] 8052\n## [1] 8054\n## [1] 8056\n## [1] 8058\n## [1] 8060\n## [1] 8062\n## [1] 8064\n## [1] 8066\n## [1] 8068\n## [1] 8070\n## [1] 8072\n## [1] 8074\n## [1] 8076\n## [1] 8078\n## [1] 8080\n## [1] 8082\n## [1] 8084\n## [1] 8086\n## [1] 8088\n## [1] 8090\n## [1] 8092\n## [1] 8094\n## [1] 8096\n## [1] 8098\n## [1] 8100\n## [1] 8102\n## [1] 8104\n## [1] 8106\n## [1] 8108\n## [1] 8110\n## [1] 8112\n## [1] 8114\n## [1] 8116\n## [1] 8118\n## [1] 8120\n## [1] 8122\n## [1] 8124\n## [1] 8126\n## [1] 8128\n## [1] 8130\n## [1] 8132\n## [1] 8134\n## [1] 8136\n## [1] 8138\n## [1] 8140\n## [1] 8142\n## [1] 8144\n## [1] 8146\n## [1] 8148\n## [1] 8150\n## [1] 8152\n## [1] 8154\n## [1] 8156\n## [1] 8158\n## [1] 8160\n## [1] 8162\n## [1] 8164\n## [1] 8166\n## [1] 8168\n## [1] 8170\n## [1] 8172\n## [1] 8174\n## [1] 8176\n## [1] 8178\n## [1] 8180\n## [1] 8182\n## [1] 8184\n## [1] 8186\n## [1] 8188\n## [1] 8190\n## [1] 8192\n## [1] 8194\n## [1] 8196\n## [1] 8198\n## [1] 8200\n## [1] 8202\n## [1] 8204\n## [1] 8206\n## [1] 8208\n## [1] 8210\n## [1] 8212\n## [1] 8214\n## [1] 8216\n## [1] 8218\n## [1] 8220\n## [1] 8222\n## [1] 8224\n## [1] 8226\n## [1] 8228\n## [1] 8230\n## [1] 8232\n## [1] 8234\n## [1] 8236\n## [1] 8238\n## [1] 8240\n## [1] 8242\n## [1] 8244\n## [1] 8246\n## [1] 8248\n## [1] 8250\n## [1] 8252\n## [1] 8254\n## [1] 8256\n## [1] 8258\n## [1] 8260\n## [1] 8262\n## [1] 8264\n## [1] 8266\n## [1] 8268\n## [1] 8270\n## [1] 8272\n## [1] 8274\n## [1] 8276\n## [1] 8278\n## [1] 8280\n## [1] 8282\n## [1] 8284\n## [1] 8286\n## [1] 8288\n## [1] 8290\n## [1] 8292\n## [1] 8294\n## [1] 8296\n## [1] 8298\n## [1] 8300\n## [1] 8302\n## [1] 8304\n## [1] 8306\n## [1] 8308\n## [1] 8310\n## [1] 8312\n## [1] 8314\n## [1] 8316\n## [1] 8318\n## [1] 8320\n## [1] 8322\n## [1] 8324\n## [1] 8326\n## [1] 8328\n## [1] 8330\n## [1] 8332\n## [1] 8334\n## [1] 8336\n## [1] 8338\n## [1] 8340\n## [1] 8342\n## [1] 8344\n## [1] 8346\n## [1] 8348\n## [1] 8350\n## [1] 8352\n## [1] 8354\n## [1] 8356\n## [1] 8358\n## [1] 8360\n## [1] 8362\n## [1] 8364\n## [1] 8366\n## [1] 8368\n## [1] 8370\n## [1] 8372\n## [1] 8374\n## [1] 8376\n## [1] 8378\n## [1] 8380\n## [1] 8382\n## [1] 8384\n## [1] 8386\n## [1] 8388\n## [1] 8390\n## [1] 8392\n## [1] 8394\n## [1] 8396\n## [1] 8398\n## [1] 8400\n## [1] 8402\n## [1] 8404\n## [1] 8406\n## [1] 8408\n## [1] 8410\n## [1] 8412\n## [1] 8414\n## [1] 8416\n## [1] 8418\n## [1] 8420\n## [1] 8422\n## [1] 8424\n## [1] 8426\n## [1] 8428\n## [1] 8430\n## [1] 8432\n## [1] 8434\n## [1] 8436\n## [1] 8438\n## [1] 8440\n## [1] 8442\n## [1] 8444\n## [1] 8446\n## [1] 8448\n## [1] 8450\n## [1] 8452\n## [1] 8454\n## [1] 8456\n## [1] 8458\n## [1] 8460\n## [1] 8462\n## [1] 8464\n## [1] 8466\n## [1] 8468\n## [1] 8470\n## [1] 8472\n## [1] 8474\n## [1] 8476\n## [1] 8478\n## [1] 8480\n## [1] 8482\n## [1] 8484\n## [1] 8486\n## [1] 8488\n## [1] 8490\n## [1] 8492\n## [1] 8494\n## [1] 8496\n## [1] 8498\n## [1] 8500\n## [1] 8502\n## [1] 8504\n## [1] 8506\n## [1] 8508\n## [1] 8510\n## [1] 8512\n## [1] 8514\n## [1] 8516\n## [1] 8518\n## [1] 8520\n## [1] 8522\n## [1] 8524\n## [1] 8526\n## [1] 8528\n## [1] 8530\n## [1] 8532\n## [1] 8534\n## [1] 8536\n## [1] 8538\n## [1] 8540\n## [1] 8542\n## [1] 8544\n## [1] 8546\n## [1] 8548\n## [1] 8550\n## [1] 8552\n## [1] 8554\n## [1] 8556\n## [1] 8558\n## [1] 8560\n## [1] 8562\n## [1] 8564\n## [1] 8566\n## [1] 8568\n## [1] 8570\n## [1] 8572\n## [1] 8574\n## [1] 8576\n## [1] 8578\n## [1] 8580\n## [1] 8582\n## [1] 8584\n## [1] 8586\n## [1] 8588\n## [1] 8590\n## [1] 8592\n## [1] 8594\n## [1] 8596\n## [1] 8598\n## [1] 8600\n## [1] 8602\n## [1] 8604\n## [1] 8606\n## [1] 8608\n## [1] 8610\n## [1] 8612\n## [1] 8614\n## [1] 8616\n## [1] 8618\n## [1] 8620\n## [1] 8622\n## [1] 8624\n## [1] 8626\n## [1] 8628\n## [1] 8630\n## [1] 8632\n## [1] 8634\n## [1] 8636\n## [1] 8638\n## [1] 8640\n## [1] 8642\n## [1] 8644\n## [1] 8646\n## [1] 8648\n## [1] 8650\n## [1] 8652\n## [1] 8654\n## [1] 8656\n## [1] 8658\n## [1] 8660\n## [1] 8662\n## [1] 8664\n## [1] 8666\n## [1] 8668\n## [1] 8670\n## [1] 8672\n## [1] 8674\n## [1] 8676\n## [1] 8678\n## [1] 8680\n## [1] 8682\n## [1] 8684\n## [1] 8686\n## [1] 8688\n## [1] 8690\n## [1] 8692\n## [1] 8694\n## [1] 8696\n## [1] 8698\n## [1] 8700\n## [1] 8702\n## [1] 8704\n## [1] 8706\n## [1] 8708\n## [1] 8710\n## [1] 8712\n## [1] 8714\n## [1] 8716\n## [1] 8718\n## [1] 8720\n## [1] 8722\n## [1] 8724\n## [1] 8726\n## [1] 8728\n## [1] 8730\n## [1] 8732\n## [1] 8734\n## [1] 8736\n## [1] 8738\n## [1] 8740\n## [1] 8742\n## [1] 8744\n## [1] 8746\n## [1] 8748\n## [1] 8750\n## [1] 8752\n## [1] 8754\n## [1] 8756\n## [1] 8758\n## [1] 8760\n## [1] 8762\n## [1] 8764\n## [1] 8766\n## [1] 8768\n## [1] 8770\n## [1] 8772\n## [1] 8774\n## [1] 8776\n## [1] 8778\n## [1] 8780\n## [1] 8782\n## [1] 8784\n## [1] 8786\n## [1] 8788\n## [1] 8790\n## [1] 8792\n## [1] 8794\n## [1] 8796\n## [1] 8798\n## [1] 8800\n## [1] 8802\n## [1] 8804\n## [1] 8806\n## [1] 8808\n## [1] 8810\n## [1] 8812\n## [1] 8814\n## [1] 8816\n## [1] 8818\n## [1] 8820\n## [1] 8822\n## [1] 8824\n## [1] 8826\n## [1] 8828\n## [1] 8830\n## [1] 8832\n## [1] 8834\n## [1] 8836\n## [1] 8838\n## [1] 8840\n## [1] 8842\n## [1] 8844\n## [1] 8846\n## [1] 8848\n## [1] 8850\n## [1] 8852\n## [1] 8854\n## [1] 8856\n## [1] 8858\n## [1] 8860\n## [1] 8862\n## [1] 8864\n## [1] 8866\n## [1] 8868\n## [1] 8870\n## [1] 8872\n## [1] 8874\n## [1] 8876\n## [1] 8878\n## [1] 8880\n## [1] 8882\n## [1] 8884\n## [1] 8886\n## [1] 8888\n## [1] 8890\n## [1] 8892\n## [1] 8894\n## [1] 8896\n## [1] 8898\n## [1] 8900\n## [1] 8902\n## [1] 8904\n## [1] 8906\n## [1] 8908\n## [1] 8910\n## [1] 8912\n## [1] 8914\n## [1] 8916\n## [1] 8918\n## [1] 8920\n## [1] 8922\n## [1] 8924\n## [1] 8926\n## [1] 8928\n## [1] 8930\n## [1] 8932\n## [1] 8934\n## [1] 8936\n## [1] 8938\n## [1] 8940\n## [1] 8942\n## [1] 8944\n## [1] 8946\n## [1] 8948\n## [1] 8950\n## [1] 8952\n## [1] 8954\n## [1] 8956\n## [1] 8958\n## [1] 8960\n## [1] 8962\n## [1] 8964\n## [1] 8966\n## [1] 8968\n## [1] 8970\n## [1] 8972\n## [1] 8974\n## [1] 8976\n## [1] 8978\n## [1] 8980\n## [1] 8982\n## [1] 8984\n## [1] 8986\n## [1] 8988\n## [1] 8990\n## [1] 8992\n## [1] 8994\n## [1] 8996\n## [1] 8998\n## [1] 9000\n## [1] 9002\n## [1] 9004\n## [1] 9006\n## [1] 9008\n## [1] 9010\n## [1] 9012\n## [1] 9014\n## [1] 9016\n## [1] 9018\n## [1] 9020\n## [1] 9022\n## [1] 9024\n## [1] 9026\n## [1] 9028\n## [1] 9030\n## [1] 9032\n## [1] 9034\n## [1] 9036\n## [1] 9038\n## [1] 9040\n## [1] 9042\n## [1] 9044\n## [1] 9046\n## [1] 9048\n## [1] 9050\n## [1] 9052\n## [1] 9054\n## [1] 9056\n## [1] 9058\n## [1] 9060\n## [1] 9062\n## [1] 9064\n## [1] 9066\n## [1] 9068\n## [1] 9070\n## [1] 9072\n## [1] 9074\n## [1] 9076\n## [1] 9078\n## [1] 9080\n## [1] 9082\n## [1] 9084\n## [1] 9086\n## [1] 9088\n## [1] 9090\n## [1] 9092\n## [1] 9094\n## [1] 9096\n## [1] 9098\n## [1] 9100\n## [1] 9102\n## [1] 9104\n## [1] 9106\n## [1] 9108\n## [1] 9110\n## [1] 9112\n## [1] 9114\n## [1] 9116\n## [1] 9118\n## [1] 9120\n## [1] 9122\n## [1] 9124\n## [1] 9126\n## [1] 9128\n## [1] 9130\n## [1] 9132\n## [1] 9134\n## [1] 9136\n## [1] 9138\n## [1] 9140\n## [1] 9142\n## [1] 9144\n## [1] 9146\n## [1] 9148\n## [1] 9150\n## [1] 9152\n## [1] 9154\n## [1] 9156\n## [1] 9158\n## [1] 9160\n## [1] 9162\n## [1] 9164\n## [1] 9166\n## [1] 9168\n## [1] 9170\n## [1] 9172\n## [1] 9174\n## [1] 9176\n## [1] 9178\n## [1] 9180\n## [1] 9182\n## [1] 9184\n## [1] 9186\n## [1] 9188\n## [1] 9190\n## [1] 9192\n## [1] 9194\n## [1] 9196\n## [1] 9198\n## [1] 9200\n## [1] 9202\n## [1] 9204\n## [1] 9206\n## [1] 9208\n## [1] 9210\n## [1] 9212\n## [1] 9214\n## [1] 9216\n## [1] 9218\n## [1] 9220\n## [1] 9222\n## [1] 9224\n## [1] 9226\n## [1] 9228\n## [1] 9230\n## [1] 9232\n## [1] 9234\n## [1] 9236\n## [1] 9238\n## [1] 9240\n## [1] 9242\n## [1] 9244\n## [1] 9246\n## [1] 9248\n## [1] 9250\n## [1] 9252\n## [1] 9254\n## [1] 9256\n## [1] 9258\n## [1] 9260\n## [1] 9262\n## [1] 9264\n## [1] 9266\n## [1] 9268\n## [1] 9270\n## [1] 9272\n## [1] 9274\n## [1] 9276\n## [1] 9278\n## [1] 9280\n## [1] 9282\n## [1] 9284\n## [1] 9286\n## [1] 9288\n## [1] 9290\n## [1] 9292\n## [1] 9294\n## [1] 9296\n## [1] 9298\n## [1] 9300\n## [1] 9302\n## [1] 9304\n## [1] 9306\n## [1] 9308\n## [1] 9310\n## [1] 9312\n## [1] 9314\n## [1] 9316\n## [1] 9318\n## [1] 9320\n## [1] 9322\n## [1] 9324\n## [1] 9326\n## [1] 9328\n## [1] 9330\n## [1] 9332\n## [1] 9334\n## [1] 9336\n## [1] 9338\n## [1] 9340\n## [1] 9342\n## [1] 9344\n## [1] 9346\n## [1] 9348\n## [1] 9350\n## [1] 9352\n## [1] 9354\n## [1] 9356\n## [1] 9358\n## [1] 9360\n## [1] 9362\n## [1] 9364\n## [1] 9366\n## [1] 9368\n## [1] 9370\n## [1] 9372\n## [1] 9374\n## [1] 9376\n## [1] 9378\n## [1] 9380\n## [1] 9382\n## [1] 9384\n## [1] 9386\n## [1] 9388\n## [1] 9390\n## [1] 9392\n## [1] 9394\n## [1] 9396\n## [1] 9398\n## [1] 9400\n## [1] 9402\n## [1] 9404\n## [1] 9406\n## [1] 9408\n## [1] 9410\n## [1] 9412\n## [1] 9414\n## [1] 9416\n## [1] 9418\n## [1] 9420\n## [1] 9422\n## [1] 9424\n## [1] 9426\n## [1] 9428\n## [1] 9430\n## [1] 9432\n## [1] 9434\n## [1] 9436\n## [1] 9438\n## [1] 9440\n## [1] 9442\n## [1] 9444\n## [1] 9446\n## [1] 9448\n## [1] 9450\n## [1] 9452\n## [1] 9454\n## [1] 9456\n## [1] 9458\n## [1] 9460\n## [1] 9462\n## [1] 9464\n## [1] 9466\n## [1] 9468\n## [1] 9470\n## [1] 9472\n## [1] 9474\n## [1] 9476\n## [1] 9478\n## [1] 9480\n## [1] 9482\n## [1] 9484\n## [1] 9486\n## [1] 9488\n## [1] 9490\n## [1] 9492\n## [1] 9494\n## [1] 9496\n## [1] 9498\n## [1] 9500\n## [1] 9502\n## [1] 9504\n## [1] 9506\n## [1] 9508\n## [1] 9510\n## [1] 9512\n## [1] 9514\n## [1] 9516\n## [1] 9518\n## [1] 9520\n## [1] 9522\n## [1] 9524\n## [1] 9526\n## [1] 9528\n## [1] 9530\n## [1] 9532\n## [1] 9534\n## [1] 9536\n## [1] 9538\n## [1] 9540\n## [1] 9542\n## [1] 9544\n## [1] 9546\n## [1] 9548\n## [1] 9550\n## [1] 9552\n## [1] 9554\n## [1] 9556\n## [1] 9558\n## [1] 9560\n## [1] 9562\n## [1] 9564\n## [1] 9566\n## [1] 9568\n## [1] 9570\n## [1] 9572\n## [1] 9574\n## [1] 9576\n## [1] 9578\n## [1] 9580\n## [1] 9582\n## [1] 9584\n## [1] 9586\n## [1] 9588\n## [1] 9590\n## [1] 9592\n## [1] 9594\n## [1] 9596\n## [1] 9598\n## [1] 9600\n## [1] 9602\n## [1] 9604\n## [1] 9606\n## [1] 9608\n## [1] 9610\n## [1] 9612\n## [1] 9614\n## [1] 9616\n## [1] 9618\n## [1] 9620\n## [1] 9622\n## [1] 9624\n## [1] 9626\n## [1] 9628\n## [1] 9630\n## [1] 9632\n## [1] 9634\n## [1] 9636\n## [1] 9638\n## [1] 9640\n## [1] 9642\n## [1] 9644\n## [1] 9646\n## [1] 9648\n## [1] 9650\n## [1] 9652\n## [1] 9654\n## [1] 9656\n## [1] 9658\n## [1] 9660\n## [1] 9662\n## [1] 9664\n## [1] 9666\n## [1] 9668\n## [1] 9670\n## [1] 9672\n## [1] 9674\n## [1] 9676\n## [1] 9678\n## [1] 9680\n## [1] 9682\n## [1] 9684\n## [1] 9686\n## [1] 9688\n## [1] 9690\n## [1] 9692\n## [1] 9694\n## [1] 9696\n## [1] 9698\n## [1] 9700\n## [1] 9702\n## [1] 9704\n## [1] 9706\n## [1] 9708\n## [1] 9710\n## [1] 9712\n## [1] 9714\n## [1] 9716\n## [1] 9718\n## [1] 9720\n## [1] 9722\n## [1] 9724\n## [1] 9726\n## [1] 9728\n## [1] 9730\n## [1] 9732\n## [1] 9734\n## [1] 9736\n## [1] 9738\n## [1] 9740\n## [1] 9742\n## [1] 9744\n## [1] 9746\n## [1] 9748\n## [1] 9750\n## [1] 9752\n## [1] 9754\n## [1] 9756\n## [1] 9758\n## [1] 9760\n## [1] 9762\n## [1] 9764\n## [1] 9766\n## [1] 9768\n## [1] 9770\n## [1] 9772\n## [1] 9774\n## [1] 9776\n## [1] 9778\n## [1] 9780\n## [1] 9782\n## [1] 9784\n## [1] 9786\n## [1] 9788\n## [1] 9790\n## [1] 9792\n## [1] 9794\n## [1] 9796\n## [1] 9798\n## [1] 9800\n## [1] 9802\n## [1] 9804\n## [1] 9806\n## [1] 9808\n## [1] 9810\n## [1] 9812\n## [1] 9814\n## [1] 9816\n## [1] 9818\n## [1] 9820\n## [1] 9822\n## [1] 9824\n## [1] 9826\n## [1] 9828\n## [1] 9830\n## [1] 9832\n## [1] 9834\n## [1] 9836\n## [1] 9838\n## [1] 9840\n## [1] 9842\n## [1] 9844\n## [1] 9846\n## [1] 9848\n## [1] 9850\n## [1] 9852\n## [1] 9854\n## [1] 9856\n## [1] 9858\n## [1] 9860\n## [1] 9862\n## [1] 9864\n## [1] 9866\n## [1] 9868\n## [1] 9870\n## [1] 9872\n## [1] 9874\n## [1] 9876\n## [1] 9878\n## [1] 9880\n## [1] 9882\n## [1] 9884\n## [1] 9886\n## [1] 9888\n## [1] 9890\n## [1] 9892\n## [1] 9894\n## [1] 9896\n## [1] 9898\n## [1] 9900\n## [1] 9902\n## [1] 9904\n## [1] 9906\n## [1] 9908\n## [1] 9910\n## [1] 9912\n## [1] 9914\n## [1] 9916\n## [1] 9918\n## [1] 9920\n## [1] 9922\n## [1] 9924\n## [1] 9926\n## [1] 9928\n## [1] 9930\n## [1] 9932\n## [1] 9934\n## [1] 9936\n## [1] 9938\n## [1] 9940\n## [1] 9942\n## [1] 9944\n## [1] 9946\n## [1] 9948\n## [1] 9950\n## [1] 9952\n## [1] 9954\n## [1] 9956\n## [1] 9958\n## [1] 9960\n## [1] 9962\n## [1] 9964\n## [1] 9966\n## [1] 9968\n## [1] 9970\n## [1] 9972\n## [1] 9974\n## [1] 9976\n## [1] 9978\n## [1] 9980\n## [1] 9982\n## [1] 9984\n## [1] 9986\n## [1] 9988\n## [1] 9990\n## [1] 9992\n## [1] 9994\n## [1] 9996\n## [1] 9998\n## [1] 10000\n## [1] 10002\n## [1] 10004\n## [1] 10006\n## [1] 10008\n## [1] 10010\n## [1] 10012\n## [1] 10014\n## [1] 10016\n## [1] 10018\n## [1] 10020\n## [1] 10022\n## [1] 10024\n## [1] 10026\n## [1] 10028\n## [1] 10030\n## [1] 10032\n## [1] 10034\n## [1] 10036\n## [1] 10038\n## [1] 10040\n## [1] 10042\n## [1] 10044\n## [1] 10046\n## [1] 10048\n## [1] 10050\n## [1] 10052\n## [1] 10054\n## [1] 10056\n## [1] 10058\n## [1] 10060\n## [1] 10062\n## [1] 10064\n## [1] 10066\n## [1] 10068\n## [1] 10070\n## [1] 10072\n## [1] 10074\n## [1] 10076\n## [1] 10078\n## [1] 10080\n## [1] 10082\n## [1] 10084\n## [1] 10086\n## [1] 10088\n## [1] 10090\n## [1] 10092\n## [1] 10094\n## [1] 10096\n## [1] 10098\n## [1] 10100\n## [1] 10102\n## [1] 10104\n## [1] 10106\n## [1] 10108\n## [1] 10110\n## [1] 10112\n## [1] 10114\n## [1] 10116\n## [1] 10118\n## [1] 10120\n## [1] 10122\n## [1] 10124\n## [1] 10126\n## [1] 10128\n## [1] 10130\n## [1] 10132\n## [1] 10134\n## [1] 10136\n## [1] 10138\n## [1] 10140\n## [1] 10142\n## [1] 10144\n## [1] 10146\n## [1] 10148\n## [1] 10150\n## [1] 10152\n## [1] 10154\n## [1] 10156\n## [1] 10158\n## [1] 10160\n## [1] 10162\n## [1] 10164\n## [1] 10166\n## [1] 10168\n## [1] 10170\n## [1] 10172\n## [1] 10174\n## [1] 10176\n## [1] 10178\n## [1] 10180\n## [1] 10182\n## [1] 10184\n## [1] 10186\n## [1] 10188\n## [1] 10190\n## [1] 10192\n## [1] 10194\n## [1] 10196\n## [1] 10198\n## [1] 10200\n## [1] 10202\n## [1] 10204\n## [1] 10206\n## [1] 10208\n## [1] 10210\n## [1] 10212\n## [1] 10214\n## [1] 10216\n## [1] 10218\n## [1] 10220\n## [1] 10222\n## [1] 10224\n## [1] 10226\n## [1] 10228\n## [1] 10230\n## [1] 10232\n## [1] 10234\n## [1] 10236\n## [1] 10238\n## [1] 10240\n## [1] 10242\n## [1] 10244\n## [1] 10246\n## [1] 10248\n## [1] 10250\n## [1] 10252\n## [1] 10254\n## [1] 10256\n## [1] 10258\n## [1] 10260\n## [1] 10262\n## [1] 10264\n## [1] 10266\n## [1] 10268\n## [1] 10270\n## [1] 10272\n## [1] 10274\n## [1] 10276\n## [1] 10278\n## [1] 10280\n## [1] 10282\n## [1] 10284\n## [1] 10286\n## [1] 10288\n## [1] 10290\n## [1] 10292\n## [1] 10294\n## [1] 10296\n## [1] 10298\n## [1] 10300\n## [1] 10302\n## [1] 10304\n## [1] 10306\n## [1] 10308\n## [1] 10310\n## [1] 10312\n## [1] 10314\n## [1] 10316\n## [1] 10318\n## [1] 10320\n## [1] 10322\n## [1] 10324\n## [1] 10326\n## [1] 10328\n## [1] 10330\n## [1] 10332\n## [1] 10334\n## [1] 10336\n## [1] 10338\n## [1] 10340\n## [1] 10342\n## [1] 10344\n## [1] 10346\n## [1] 10348\n## [1] 10350\n## [1] 10352\n## [1] 10354\n## [1] 10356\n## [1] 10358\n## [1] 10360\n## [1] 10362\n## [1] 10364\n## [1] 10366\n## [1] 10368\n## [1] 10370\n## [1] 10372\n## [1] 10374\n## [1] 10376\n## [1] 10378\n## [1] 10380\n## [1] 10382\n## [1] 10384\n## [1] 10386\n## [1] 10388\n## [1] 10390\n## [1] 10392\n## [1] 10394\n## [1] 10396\n## [1] 10398\n## [1] 10400\n## [1] 10402\n## [1] 10404\n## [1] 10406\n## [1] 10408\n## [1] 10410\n## [1] 10412\n## [1] 10414\n## [1] 10416\n## [1] 10418\n## [1] 10420\n## [1] 10422\n## [1] 10424\n## [1] 10426\n## [1] 10428\n## [1] 10430\n## [1] 10432\n## [1] 10434\n## [1] 10436\n## [1] 10438\n## [1] 10440\n## [1] 10442\n## [1] 10444\n## [1] 10446\n## [1] 10448\n## [1] 10450\n## [1] 10452\n## [1] 10454\n## [1] 10456\n## [1] 10458\n## [1] 10460\n## [1] 10462\n## [1] 10464\n## [1] 10466\n## [1] 10468\n## [1] 10470\n## [1] 10472\n## [1] 10474\n## [1] 10476\n## [1] 10478\n## [1] 10480\n## [1] 10482\n## [1] 10484\n## [1] 10486\n## [1] 10488\n## [1] 10490\n## [1] 10492\n## [1] 10494\n## [1] 10496\n## [1] 10498\n## [1] 10500\n## [1] 10502\n## [1] 10504\n## [1] 10506\n## [1] 10508\n## [1] 10510\n## [1] 10512\n## [1] 10514\n## [1] 10516\n## [1] 10518\n## [1] 10520\n## [1] 10522\n## [1] 10524\n## [1] 10526\n## [1] 10528\n## [1] 10530\n## [1] 10532\n## [1] 10534\n## [1] 10536\n## [1] 10538\n## [1] 10540\n## [1] 10542\n## [1] 10544\n## [1] 10546\n## [1] 10548\n## [1] 10550\n## [1] 10552\n## [1] 10554\n## [1] 10556\n## [1] 10558\n## [1] 10560\n## [1] 10562\n## [1] 10564\n## [1] 10566\n## [1] 10568\n## [1] 10570\n## [1] 10572\n## [1] 10574\n## [1] 10576\n## [1] 10578\n## [1] 10580\n## [1] 10582\n## [1] 10584\n## [1] 10586\n## [1] 10588\n## [1] 10590\n## [1] 10592\n## [1] 10594\n## [1] 10596\n## [1] 10598\n## [1] 10600\n## [1] 10602\n## [1] 10604\n## [1] 10606\n## [1] 10608\n## [1] 10610\n## [1] 10612\n## [1] 10614\n## [1] 10616\n## [1] 10618\n## [1] 10620\n## [1] 10622\n## [1] 10624\n## [1] 10626\n## [1] 10628\n## [1] 10630\n## [1] 10632\n## [1] 10634\n## [1] 10636\n## [1] 10638\n## [1] 10640\n## [1] 10642\n## [1] 10644\n## [1] 10646\n## [1] 10648\n## [1] 10650\n## [1] 10652\n## [1] 10654\n## [1] 10656\n## [1] 10658\n## [1] 10660\n## [1] 10662\n## [1] 10664\n## [1] 10666\n## [1] 10668\n## [1] 10670\n## [1] 10672\n## [1] 10674\n## [1] 10676\n## [1] 10678\n## [1] 10680\n## [1] 10682\n## [1] 10684\n## [1] 10686\n## [1] 10688\n## [1] 10690\n## [1] 10692\n## [1] 10694\n## [1] 10696\n## [1] 10698\n## [1] 10700\n## [1] 10702\n## [1] 10704\n## [1] 10706\n## [1] 10708\n## [1] 10710\n## [1] 10712\n## [1] 10714\n## [1] 10716\n## [1] 10718\n## [1] 10720\n## [1] 10722\n## [1] 10724\n## [1] 10726\n## [1] 10728\n## [1] 10730\n## [1] 10732\n## [1] 10734\n## [1] 10736\n## [1] 10738\n## [1] 10740\n## [1] 10742\n## [1] 10744\n## [1] 10746\n## [1] 10748\n## [1] 10750\n## [1] 10752\n## [1] 10754\n## [1] 10756\n## [1] 10758\n## [1] 10760\n## [1] 10762\n## [1] 10764\n## [1] 10766\n## [1] 10768\n## [1] 10770\n## [1] 10772\n## [1] 10774\n## [1] 10776\n## [1] 10778\n## [1] 10780\n## [1] 10782\n## [1] 10784\n## [1] 10786\n## [1] 10788\n## [1] 10790\n## [1] 10792\n## [1] 10794\n## [1] 10796\n## [1] 10798\n## [1] 10800\n## [1] 10802\n## [1] 10804\n## [1] 10806\n## [1] 10808\n## [1] 10810\n## [1] 10812\n## [1] 10814\n## [1] 10816\n## [1] 10818\n## [1] 10820\n## [1] 10822\n## [1] 10824\n## [1] 10826\n## [1] 10828\n## [1] 10830\n## [1] 10832\n## [1] 10834\n## [1] 10836\n## [1] 10838\n## [1] 10840\n## [1] 10842\n## [1] 10844\n## [1] 10846\n## [1] 10848\n## [1] 10850\n## [1] 10852\n## [1] 10854\n## [1] 10856\n## [1] 10858\n## [1] 10860\n## [1] 10862\n## [1] 10864\n## [1] 10866\n## [1] 10868\n## [1] 10870\n## [1] 10872\n## [1] 10874\n## [1] 10876\n## [1] 10878\n## [1] 10880\n## [1] 10882\n## [1] 10884\n## [1] 10886\n## [1] 10888\n## [1] 10890\n## [1] 10892\n## [1] 10894\n## [1] 10896\n## [1] 10898\n## [1] 10900\n## [1] 10902\n## [1] 10904\n## [1] 10906\n## [1] 10908\n## [1] 10910\n## [1] 10912\n## [1] 10914\n## [1] 10916\n## [1] 10918\n## [1] 10920\n## [1] 10922\n## [1] 10924\n## [1] 10926\n## [1] 10928\n## [1] 10930\n## [1] 10932\n## [1] 10934\n## [1] 10936\n## [1] 10938\n## [1] 10940\n## [1] 10942\n## [1] 10944\n## [1] 10946\n## [1] 10948\n## [1] 10950\n## [1] 10952\n## [1] 10954\n## [1] 10956\n## [1] 10958\n## [1] 10960\n## [1] 10962\n## [1] 10964\n## [1] 10966\n## [1] 10968\n## [1] 10970\n## [1] 10972\n## [1] 10974\n## [1] 10976\n## [1] 10978\n## [1] 10980\n## [1] 10982\n## [1] 10984\n## [1] 10986\n## [1] 10988\n## [1] 10990\n## [1] 10992\n## [1] 10994\n## [1] 10996\n## [1] 10998\n## [1] 11000\n## [1] 11002\n## [1] 11004\n## [1] 11006\n## [1] 11008\n## [1] 11010\n## [1] 11012\n## [1] 11014\n## [1] 11016\n## [1] 11018\n## [1] 11020\n## [1] 11022\n## [1] 11024\n## [1] 11026\n## [1] 11028\n## [1] 11030\n## [1] 11032\n## [1] 11034\n## [1] 11036\n## [1] 11038\n## [1] 11040\n## [1] 11042\n## [1] 11044\n## [1] 11046\n## [1] 11048\n## [1] 11050\n## [1] 11052\n## [1] 11054\n## [1] 11056\n## [1] 11058\n## [1] 11060\n## [1] 11062\n## [1] 11064\n## [1] 11066\n## [1] 11068\n## [1] 11070\n## [1] 11072\n## [1] 11074\n## [1] 11076\n## [1] 11078\n## [1] 11080\n## [1] 11082\n## [1] 11084\n## [1] 11086\n## [1] 11088\n## [1] 11090\n## [1] 11092\n## [1] 11094\n## [1] 11096\n## [1] 11098\n## [1] 11100\n## [1] 11102\n## [1] 11104\n## [1] 11106\n## [1] 11108\n## [1] 11110\n## [1] 11112\n## [1] 11114\n## [1] 11116\n## [1] 11118\n## [1] 11120\n## [1] 11122\n## [1] 11124\n## [1] 11126\n## [1] 11128\n## [1] 11130\n## [1] 11132\n## [1] 11134\n## [1] 11136\n## [1] 11138\n## [1] 11140\n## [1] 11142\n## [1] 11144\n## [1] 11146\n## [1] 11148\n## [1] 11150\n## [1] 11152\n## [1] 11154\n## [1] 11156\n## [1] 11158\n## [1] 11160\n## [1] 11162\n## [1] 11164\n## [1] 11166\n## [1] 11168\n## [1] 11170\n## [1] 11172\n## [1] 11174\n## [1] 11176\n## [1] 11178\n## [1] 11180\n## [1] 11182\n## [1] 11184\n## [1] 11186\n## [1] 11188\n## [1] 11190\n## [1] 11192\n## [1] 11194\n## [1] 11196\n## [1] 11198\n## [1] 11200\n## [1] 11202\n## [1] 11204\n## [1] 11206\n## [1] 11208\n## [1] 11210\n## [1] 11212\n## [1] 11214\n## [1] 11216\n## [1] 11218\n## [1] 11220\n## [1] 11222\n## [1] 11224\n## [1] 11226\n## [1] 11228\n## [1] 11230\n## [1] 11232\n## [1] 11234\n## [1] 11236\n## [1] 11238\n## [1] 11240\n## [1] 11242\n## [1] 11244\n## [1] 11246\n## [1] 11248\n## [1] 11250\n## [1] 11252\n## [1] 11254\n## [1] 11256\n## [1] 11258\n## [1] 11260\n## [1] 11262\n## [1] 11264\n## [1] 11266\n## [1] 11268\n## [1] 11270\n## [1] 11272\n## [1] 11274\n## [1] 11276\n## [1] 11278\n## [1] 11280\n## [1] 11282\n## [1] 11284\n## [1] 11286\n## [1] 11288\n## [1] 11290\n## [1] 11292\n## [1] 11294\n## [1] 11296\n## [1] 11298\n## [1] 11300\n## [1] 11302\n## [1] 11304\n## [1] 11306\n## [1] 11308\n## [1] 11310\n## [1] 11312\n## [1] 11314\n## [1] 11316\n## [1] 11318\n## [1] 11320\n## [1] 11322\n## [1] 11324\n## [1] 11326\n## [1] 11328\n## [1] 11330\n## [1] 11332\n## [1] 11334\n## [1] 11336\n## [1] 11338\n## [1] 11340\n## [1] 11342\n## [1] 11344\n## [1] 11346\n## [1] 11348\n## [1] 11350\n## [1] 11352\n## [1] 11354\n## [1] 11356\n## [1] 11358\n## [1] 11360\n## [1] 11362\n## [1] 11364\n## [1] 11366\n## [1] 11368\n## [1] 11370\n## [1] 11372\n## [1] 11374\n## [1] 11376\n## [1] 11378\n## [1] 11380\n## [1] 11382\n## [1] 11384\n## [1] 11386\n## [1] 11388\n## [1] 11390\n## [1] 11392\n## [1] 11394\n## [1] 11396\n## [1] 11398\n## [1] 11400\n## [1] 11402\n## [1] 11404\n## [1] 11406\n## [1] 11408\n## [1] 11410\n## [1] 11412\n## [1] 11414\n## [1] 11416\n## [1] 11418\n## [1] 11420\n## [1] 11422\n## [1] 11424\n## [1] 11426\n## [1] 11428\n## [1] 11430\n## [1] 11432\n## [1] 11434\n## [1] 11436\n## [1] 11438\n## [1] 11440\n## [1] 11442\n## [1] 11444\n## [1] 11446\n## [1] 11448\n## [1] 11450\n## [1] 11452\n## [1] 11454\n## [1] 11456\n## [1] 11458\n## [1] 11460\n## [1] 11462\n## [1] 11464\n## [1] 11466\n## [1] 11468\n## [1] 11470\n## [1] 11472\n## [1] 11474\n## [1] 11476\n## [1] 11478\n## [1] 11480\n## [1] 11482\n## [1] 11484\n## [1] 11486\n## [1] 11488\n## [1] 11490\n## [1] 11492\n## [1] 11494\n## [1] 11496\n## [1] 11498\n## [1] 11500\n## [1] 11502\n## [1] 11504\n## [1] 11506\n## [1] 11508\n## [1] 11510\n## [1] 11512\n## [1] 11514\n## [1] 11516\n## [1] 11518\n## [1] 11520\n## [1] 11522\n## [1] 11524\n## [1] 11526\n## [1] 11528\n## [1] 11530\n## [1] 11532\n## [1] 11534\n## [1] 11536\n## [1] 11538\n## [1] 11540\n## [1] 11542\n## [1] 11544\n## [1] 11546\n## [1] 11548\n## [1] 11550\n## [1] 11552\n## [1] 11554\n## [1] 11556\n## [1] 11558\n## [1] 11560\n## [1] 11562\n## [1] 11564\n## [1] 11566\n## [1] 11568\n## [1] 11570\n## [1] 11572\n## [1] 11574\n## [1] 11576\n## [1] 11578\n## [1] 11580\n## [1] 11582\n## [1] 11584\n## [1] 11586\n## [1] 11588\n## [1] 11590\n## [1] 11592\n## [1] 11594\n## [1] 11596\n## [1] 11598\n## [1] 11600\n## [1] 11602\n## [1] 11604\n## [1] 11606\n## [1] 11608\n## [1] 11610\n## [1] 11612\n## [1] 11614\n## [1] 11616\n## [1] 11618\n## [1] 11620\n## [1] 11622\n## [1] 11624\n## [1] 11626\n## [1] 11628\n## [1] 11630\n## [1] 11632\n## [1] 11634\n## [1] 11636\n## [1] 11638\n## [1] 11640\n## [1] 11642\n## [1] 11644\n## [1] 11646\n## [1] 11648\n## [1] 11650\n## [1] 11652\n## [1] 11654\n## [1] 11656\n## [1] 11658\n## [1] 11660\n## [1] 11662\n## [1] 11664\n## [1] 11666\n## [1] 11668\n## [1] 11670\n## [1] 11672\n## [1] 11674\n## [1] 11676\n## [1] 11678\n## [1] 11680\n## [1] 11682\n## [1] 11684\n## [1] 11686\n## [1] 11688\n## [1] 11690\n## [1] 11692\n## [1] 11694\n## [1] 11696\n## [1] 11698\n## [1] 11700\n## [1] 11702\n## [1] 11704\n## [1] 11706\n## [1] 11708\n## [1] 11710\n## [1] 11712\n## [1] 11714\n## [1] 11716\n## [1] 11718\n## [1] 11720\n## [1] 11722\n## [1] 11724\n## [1] 11726\n## [1] 11728\n## [1] 11730\n## [1] 11732\n## [1] 11734\n## [1] 11736\n## [1] 11738\n## [1] 11740\n## [1] 11742\n## [1] 11744\n## [1] 11746\n## [1] 11748\n## [1] 11750\n## [1] 11752\n## [1] 11754\n## [1] 11756\n## [1] 11758\n## [1] 11760\n## [1] 11762\n## [1] 11764\n## [1] 11766\n## [1] 11768\n## [1] 11770\n## [1] 11772\n## [1] 11774\n## [1] 11776\n## [1] 11778\n## [1] 11780\n## [1] 11782\n## [1] 11784\n## [1] 11786\n## [1] 11788\n## [1] 11790\n## [1] 11792\n## [1] 11794\n## [1] 11796\n## [1] 11798\n## [1] 11800\n## [1] 11802\n## [1] 11804\n## [1] 11806\n## [1] 11808\n## [1] 11810\n## [1] 11812\n## [1] 11814\n## [1] 11816\n## [1] 11818\n## [1] 11820\n## [1] 11822\n## [1] 11824\n## [1] 11826\n## [1] 11828\n## [1] 11830\n## [1] 11832\n## [1] 11834\n## [1] 11836\n## [1] 11838\n## [1] 11840\n## [1] 11842\n## [1] 11844\n## [1] 11846\n## [1] 11848\n## [1] 11850\n## [1] 11852\n## [1] 11854\n## [1] 11856\n## [1] 11858\n## [1] 11860\n## [1] 11862\n## [1] 11864\n## [1] 11866\n## [1] 11868\n## [1] 11870\n## [1] 11872\n## [1] 11874\n## [1] 11876\n## [1] 11878\n## [1] 11880\n## [1] 11882\n## [1] 11884\n## [1] 11886\n## [1] 11888\n## [1] 11890\n## [1] 11892\n## [1] 11894\n## [1] 11896\n## [1] 11898\n## [1] 11900\n## [1] 11902\n## [1] 11904\n## [1] 11906\n## [1] 11908\n## [1] 11910\n## [1] 11912\n## [1] 11914\n## [1] 11916\n## [1] 11918\n## [1] 11920\n## [1] 11922\n## [1] 11924\n## [1] 11926\n## [1] 11928\n## [1] 11930\n## [1] 11932\n## [1] 11934\n## [1] 11936\n## [1] 11938\n## [1] 11940\n## [1] 11942\n## [1] 11944\n## [1] 11946\n## [1] 11948\n## [1] 11950\n## [1] 11952\n## [1] 11954\n## [1] 11956\n## [1] 11958\n## [1] 11960\n## [1] 11962\n## [1] 11964\n## [1] 11966\n## [1] 11968\n## [1] 11970\n## [1] 11972\n## [1] 11974\n## [1] 11976\n## [1] 11978\n## [1] 11980\n## [1] 11982\n## [1] 11984\n## [1] 11986\n## [1] 11988\n## [1] 11990\n## [1] 11992\n## [1] 11994\n## [1] 11996\n## [1] 11998\n## [1] 12000\n## [1] 12002\n## [1] 12004\n## [1] 12006\n## [1] 12008\n## [1] 12010\n## [1] 12012\n## [1] 12014\n## [1] 12016\n## [1] 12018\n## [1] 12020\n## [1] 12022\n## [1] 12024\n## [1] 12026\n## [1] 12028\n## [1] 12030\n## [1] 12032\n## [1] 12034\n## [1] 12036\n## [1] 12038\n## [1] 12040\n## [1] 12042\n## [1] 12044\n## [1] 12046\n## [1] 12048\n## [1] 12050\n## [1] 12052\n## [1] 12054\n## [1] 12056\n## [1] 12058\n## [1] 12060\n## [1] 12062\n## [1] 12064\n## [1] 12066\n## [1] 12068\n## [1] 12070\n## [1] 12072\n## [1] 12074\n## [1] 12076\n## [1] 12078\n## [1] 12080\n## [1] 12082\n## [1] 12084\n## [1] 12086\n## [1] 12088\n## [1] 12090\n## [1] 12092\n## [1] 12094\n## [1] 12096\n## [1] 12098\n## [1] 12100\n## [1] 12102\n## [1] 12104\n## [1] 12106\n## [1] 12108\n## [1] 12110\n## [1] 12112\n## [1] 12114\n## [1] 12116\n## [1] 12118\n## [1] 12120\n## [1] 12122\n## [1] 12124\n## [1] 12126\n## [1] 12128\n## [1] 12130\n## [1] 12132\n## [1] 12134\n## [1] 12136\n## [1] 12138\n## [1] 12140\n## [1] 12142\n## [1] 12144\n## [1] 12146\n## [1] 12148\n## [1] 12150\n## [1] 12152\n## [1] 12154\n## [1] 12156\n## [1] 12158\n## [1] 12160\n## [1] 12162\n## [1] 12164\n## [1] 12166\n## [1] 12168\n## [1] 12170\n## [1] 12172\n## [1] 12174\n## [1] 12176\n## [1] 12178\n## [1] 12180\n## [1] 12182\n## [1] 12184\n## [1] 12186\n## [1] 12188\n## [1] 12190\n## [1] 12192\n## [1] 12194\n## [1] 12196\n## [1] 12198\n## [1] 12200\n## [1] 12202\n## [1] 12204\n## [1] 12206\n## [1] 12208\n## [1] 12210\n## [1] 12212\n## [1] 12214\n## [1] 12216\n## [1] 12218\n## [1] 12220\n## [1] 12222\n## [1] 12224\n## [1] 12226\n## [1] 12228\n## [1] 12230\n## [1] 12232\n## [1] 12234\n## [1] 12236\n## [1] 12238\n## [1] 12240\n## [1] 12242\n## [1] 12244\n## [1] 12246\n## [1] 12248\n## [1] 12250\n## [1] 12252\n## [1] 12254\n## [1] 12256\n## [1] 12258\n## [1] 12260\n## [1] 12262\n## [1] 12264\n## [1] 12266\n## [1] 12268\n## [1] 12270\n## [1] 12272\n## [1] 12274\n## [1] 12276\n## [1] 12278\n## [1] 12280\n## [1] 12282\n## [1] 12284\n## [1] 12286\n## [1] 12288\n## [1] 12290\n## [1] 12292\n## [1] 12294\n## [1] 12296\n## [1] 12298\n## [1] 12300\n## [1] 12302\n## [1] 12304\n## [1] 12306\n## [1] 12308\n## [1] 12310\n## [1] 12312\n## [1] 12314\n## [1] 12316\n## [1] 12318\n## [1] 12320\n## [1] 12322\n## [1] 12324\n## [1] 12326\n## [1] 12328\n## [1] 12330\n## [1] 12332\n## [1] 12334\n## [1] 12336\n## [1] 12338\n## [1] 12340\n## [1] 12342\n## [1] 12344\n## [1] 12346\n## [1] 12348\n## [1] 12350\n## [1] 12352\n## [1] 12354\n## [1] 12356\n## [1] 12358\n## [1] 12360\n## [1] 12362\n## [1] 12364\n## [1] 12366\n## [1] 12368\n## [1] 12370\n## [1] 12372\n## [1] 12374\n## [1] 12376\n## [1] 12378\n## [1] 12380\n## [1] 12382\n## [1] 12384\n## [1] 12386\n## [1] 12388\n## [1] 12390\n## [1] 12392\n## [1] 12394\n## [1] 12396\n## [1] 12398\n## [1] 12400\n## [1] 12402\n## [1] 12404\n## [1] 12406\n## [1] 12408\n## [1] 12410\n## [1] 12412\n## [1] 12414\n## [1] 12416\n## [1] 12418\n## [1] 12420\n## [1] 12422\n## [1] 12424\n## [1] 12426\n## [1] 12428\n## [1] 12430\n## [1] 12432\n## [1] 12434\n## [1] 12436\n## [1] 12438\n## [1] 12440\n## [1] 12442\n## [1] 12444\n## [1] 12446\n## [1] 12448\n## [1] 12450\n## [1] 12452\n## [1] 12454\n## [1] 12456\n## [1] 12458\n## [1] 12460\n## [1] 12462\n## [1] 12464\n## [1] 12466\n## [1] 12468\n## [1] 12470\n## [1] 12472\n## [1] 12474\n## [1] 12476\n## [1] 12478\n## [1] 12480\n## [1] 12482\n## [1] 12484\n## [1] 12486\n## [1] 12488\n## [1] 12490\n## [1] 12492\n## [1] 12494\n## [1] 12496\n## [1] 12498\n## [1] 12500\n## [1] 12502\n## [1] 12504\n## [1] 12506\n## [1] 12508\n## [1] 12510\n## [1] 12512\n## [1] 12514\n## [1] 12516\n## [1] 12518\n## [1] 12520\n## [1] 12522\n## [1] 12524\n## [1] 12526\n## [1] 12528\n## [1] 12530\n## [1] 12532\n## [1] 12534\n## [1] 12536\n## [1] 12538\n## [1] 12540\n## [1] 12542\n## [1] 12544\n## [1] 12546\n## [1] 12548\n## [1] 12550\n## [1] 12552\n## [1] 12554\n## [1] 12556\n## [1] 12558\n## [1] 12560\n## [1] 12562\n## [1] 12564\n## [1] 12566\n## [1] 12568\n## [1] 12570\n## [1] 12572\n## [1] 12574\n## [1] 12576\n## [1] 12578\n## [1] 12580\n## [1] 12582\n## [1] 12584\n## [1] 12586\n## [1] 12588\n## [1] 12590\n## [1] 12592\n## [1] 12594\n## [1] 12596\n## [1] 12598\n## [1] 12600\n## [1] 12602\n## [1] 12604\n## [1] 12606\n## [1] 12608\n## [1] 12610\n## [1] 12612\n## [1] 12614\n## [1] 12616\n## [1] 12618\n## [1] 12620\n## [1] 12622\n## [1] 12624\n## [1] 12626\n## [1] 12628\n## [1] 12630\n## [1] 12632\n## [1] 12634\n## [1] 12636\n## [1] 12638\n## [1] 12640\n## [1] 12642\n## [1] 12644\n## [1] 12646\n## [1] 12648\n## [1] 12650\n## [1] 12652\n## [1] 12654\n## [1] 12656\n## [1] 12658\n## [1] 12660\n## [1] 12662\n## [1] 12664\n## [1] 12666\n## [1] 12668\n## [1] 12670\n## [1] 12672\n## [1] 12674\n## [1] 12676\n## [1] 12678\n## [1] 12680\n## [1] 12682\n## [1] 12684\n## [1] 12686\n## [1] 12688\n## [1] 12690\n## [1] 12692\n## [1] 12694\n## [1] 12696\n## [1] 12698\n## [1] 12700\n## [1] 12702\n## [1] 12704\n## [1] 12706\n## [1] 12708\n## [1] 12710\n## [1] 12712\n## [1] 12714\n## [1] 12716\n## [1] 12718\n## [1] 12720\n## [1] 12722\n## [1] 12724\n## [1] 12726\n## [1] 12728\n## [1] 12730\n## [1] 12732\n## [1] 12734\n## [1] 12736\n## [1] 12738\n## [1] 12740\n## [1] 12742\n## [1] 12744\n## [1] 12746\n## [1] 12748\n## [1] 12750\n## [1] 12752\n## [1] 12754\n## [1] 12756\n## [1] 12758\n## [1] 12760\n## [1] 12762\n## [1] 12764\n## [1] 12766\n## [1] 12768\n## [1] 12770\n## [1] 12772\n## [1] 12774\n## [1] 12776\n## [1] 12778\n## [1] 12780\n## [1] 12782\n## [1] 12784\n## [1] 12786\n## [1] 12788\n## [1] 12790\n## [1] 12792\n## [1] 12794\n## [1] 12796\n## [1] 12798\n## [1] 12800\n## [1] 12802\n## [1] 12804\n## [1] 12806\n## [1] 12808\n## [1] 12810\n## [1] 12812\n## [1] 12814\n## [1] 12816\n## [1] 12818\n## [1] 12820\n## [1] 12822\n## [1] 12824\n## [1] 12826\n## [1] 12828\n## [1] 12830\n## [1] 12832\n## [1] 12834\n## [1] 12836\n## [1] 12838\n## [1] 12840\n## [1] 12842\n## [1] 12844\n## [1] 12846\n## [1] 12848\n## [1] 12850\n## [1] 12852\n## [1] 12854\n## [1] 12856\n## [1] 12858\n## [1] 12860\n## [1] 12862\n## [1] 12864\n## [1] 12866\n## [1] 12868\n## [1] 12870\n## [1] 12872\n## [1] 12874\n## [1] 12876\n## [1] 12878\n## [1] 12880\n## [1] 12882\n## [1] 12884\n## [1] 12886\n## [1] 12888\n## [1] 12890\n## [1] 12892\n## [1] 12894\n## [1] 12896\n## [1] 12898\n## [1] 12900\n## [1] 12902\n## [1] 12904\n## [1] 12906\n## [1] 12908\n## [1] 12910\n## [1] 12912\n## [1] 12914\n## [1] 12916\n## [1] 12918\n## [1] 12920\n## [1] 12922\n## [1] 12924\n## [1] 12926\n## [1] 12928\n## [1] 12930\n## [1] 12932\n## [1] 12934\n## [1] 12936\n## [1] 12938\n## [1] 12940\n## [1] 12942\n## [1] 12944\n## [1] 12946\n## [1] 12948\n## [1] 12950\n## [1] 12952\n## [1] 12954\n## [1] 12956\n## [1] 12958\n## [1] 12960\n## [1] 12962\n## [1] 12964\n## [1] 12966\n## [1] 12968\n## [1] 12970\n## [1] 12972\n## [1] 12974\n## [1] 12976\n## [1] 12978\n## [1] 12980\n## [1] 12982\n## [1] 12984\n## [1] 12986\n## [1] 12988\n## [1] 12990\n## [1] 12992\n## [1] 12994\n## [1] 12996\n## [1] 12998\n## [1] 13000\n## [1] 13002\n## [1] 13004\n## [1] 13006\n## [1] 13008\n## [1] 13010\n## [1] 13012\n## [1] 13014\n## [1] 13016\n## [1] 13018\n## [1] 13020\n## [1] 13022\n## [1] 13024\n## [1] 13026\n## [1] 13028\n## [1] 13030\n## [1] 13032\n## [1] 13034\n## [1] 13036\n## [1] 13038\n## [1] 13040\n## [1] 13042\n## [1] 13044\n## [1] 13046\n## [1] 13048\n## [1] 13050\n## [1] 13052\n## [1] 13054\n## [1] 13056\n## [1] 13058\n## [1] 13060\n## [1] 13062\n## [1] 13064\n## [1] 13066\n## [1] 13068\n## [1] 13070\n## [1] 13072\n## [1] 13074\n## [1] 13076\n## [1] 13078\n## [1] 13080\n## [1] 13082\n## [1] 13084\n## [1] 13086\n## [1] 13088\n## [1] 13090\n## [1] 13092\n## [1] 13094\n## [1] 13096\n## [1] 13098\n## [1] 13100\n## [1] 13102\n## [1] 13104\n## [1] 13106\n## [1] 13108\n## [1] 13110\n## [1] 13112\n## [1] 13114\n## [1] 13116\n## [1] 13118\n## [1] 13120\n## [1] 13122\n## [1] 13124\n## [1] 13126\n## [1] 13128\n## [1] 13130\n## [1] 13132\n## [1] 13134\n## [1] 13136\n## [1] 13138\n## [1] 13140\n## [1] 13142\n## [1] 13144\n## [1] 13146\n## [1] 13148\n## [1] 13150\n## [1] 13152\n## [1] 13154\n## [1] 13156\n## [1] 13158\n## [1] 13160\n## [1] 13162\n## [1] 13164\n## [1] 13166\n## [1] 13168\n## [1] 13170\n## [1] 13172\n## [1] 13174\n## [1] 13176\n## [1] 13178\n## [1] 13180\n## [1] 13182\n## [1] 13184\n## [1] 13186\n## [1] 13188\n## [1] 13190\n## [1] 13192\n## [1] 13194\n## [1] 13196\n## [1] 13198\n## [1] 13200\n## [1] 13202\n## [1] 13204\n## [1] 13206\n## [1] 13208\n## [1] 13210\n## [1] 13212\n## [1] 13214\n## [1] 13216\n## [1] 13218\n## [1] 13220\n## [1] 13222\n## [1] 13224\n## [1] 13226\n## [1] 13228\n## [1] 13230\n## [1] 13232\n## [1] 13234\n## [1] 13236\n## [1] 13238\n## [1] 13240\n## [1] 13242\n## [1] 13244\n## [1] 13246\n## [1] 13248\n## [1] 13250\n## [1] 13252\n## [1] 13254\n## [1] 13256\n## [1] 13258\n## [1] 13260\n## [1] 13262\n## [1] 13264\n## [1] 13266\n## [1] 13268\n## [1] 13270\n## [1] 13272\n## [1] 13274\n## [1] 13276\n## [1] 13278\n## [1] 13280\n## [1] 13282\n## [1] 13284\n## [1] 13286\n## [1] 13288\n## [1] 13290\n## [1] 13292\n## [1] 13294\n## [1] 13296\n## [1] 13298\n## [1] 13300\n## [1] 13302\n## [1] 13304\n## [1] 13306\n## [1] 13308\n## [1] 13310\n## [1] 13312\n## [1] 13314\n## [1] 13316\n## [1] 13318\n## [1] 13320\n## [1] 13322\n## [1] 13324\n## [1] 13326\n## [1] 13328\n## [1] 13330\n## [1] 13332\n## [1] 13334\n## [1] 13336\n## [1] 13338\n## [1] 13340\n## [1] 13342\n## [1] 13344\n## [1] 13346\n## [1] 13348\n## [1] 13350\n## [1] 13352\n## [1] 13354\n## [1] 13356\n## [1] 13358\n## [1] 13360\n## [1] 13362\n## [1] 13364\n## [1] 13366\n## [1] 13368\n## [1] 13370\n## [1] 13372\n## [1] 13374\n## [1] 13376\n## [1] 13378\n## [1] 13380\n## [1] 13382\n## [1] 13384\n## [1] 13386\n## [1] 13388\n## [1] 13390\n## [1] 13392\n## [1] 13394\n## [1] 13396\n## [1] 13398\n## [1] 13400\n## [1] 13402\n## [1] 13404\n## [1] 13406\n## [1] 13408\n## [1] 13410\n## [1] 13412\n## [1] 13414\n## [1] 13416\n## [1] 13418\n## [1] 13420\n## [1] 13422\n## [1] 13424\n## [1] 13426\n## [1] 13428\n## [1] 13430\n## [1] 13432\n## [1] 13434\n## [1] 13436\n## [1] 13438\n## [1] 13440\n## [1] 13442\n## [1] 13444\n## [1] 13446\n## [1] 13448\n## [1] 13450\n## [1] 13452\n## [1] 13454\n## [1] 13456\n## [1] 13458\n## [1] 13460\n## [1] 13462\n## [1] 13464\n## [1] 13466\n## [1] 13468\n## [1] 13470\n## [1] 13472\n## [1] 13474\n## [1] 13476\n## [1] 13478\n## [1] 13480\n## [1] 13482\n## [1] 13484\n## [1] 13486\n## [1] 13488\n## [1] 13490\n## [1] 13492\n## [1] 13494\n## [1] 13496\n## [1] 13498\n## [1] 13500\n## [1] 13502\n## [1] 13504\n## [1] 13506\n## [1] 13508\n## [1] 13510\n## [1] 13512\n## [1] 13514\n## [1] 13516\n## [1] 13518\n## [1] 13520\n## [1] 13522\n## [1] 13524\n## [1] 13526\n## [1] 13528\n## [1] 13530\n## [1] 13532\n## [1] 13534\n## [1] 13536\n## [1] 13538\n## [1] 13540\n## [1] 13542\n## [1] 13544\n## [1] 13546\n## [1] 13548\n## [1] 13550\n## [1] 13552\n## [1] 13554\n## [1] 13556\n## [1] 13558\n## [1] 13560\n## [1] 13562\n## [1] 13564\n## [1] 13566\n## [1] 13568\n## [1] 13570\n## [1] 13572\n## [1] 13574\n## [1] 13576\n## [1] 13578\n## [1] 13580\n## [1] 13582\n## [1] 13584\n## [1] 13586\n## [1] 13588\n## [1] 13590\n## [1] 13592\n## [1] 13594\n## [1] 13596\n## [1] 13598\n## [1] 13600\n## [1] 13602\n## [1] 13604\n## [1] 13606\n## [1] 13608\n## [1] 13610\n## [1] 13612\n## [1] 13614\n## [1] 13616\n## [1] 13618\n## [1] 13620\n## [1] 13622\n## [1] 13624\n## [1] 13626\n## [1] 13628\n## [1] 13630\n## [1] 13632\n## [1] 13634\n## [1] 13636\n## [1] 13638\n## [1] 13640\n## [1] 13642\n## [1] 13644\n## [1] 13646\n## [1] 13648\n## [1] 13650\n## [1] 13652\n## [1] 13654\n## [1] 13656\n## [1] 13658\n## [1] 13660\n## [1] 13662\n## [1] 13664\n## [1] 13666\n## [1] 13668\n## [1] 13670\n## [1] 13672\n## [1] 13674\n## [1] 13676\n## [1] 13678\n## [1] 13680\n## [1] 13682\n## [1] 13684\n## [1] 13686\n## [1] 13688\n## [1] 13690\n## [1] 13692\n## [1] 13694\n## [1] 13696\n## [1] 13698\n## [1] 13700\n## [1] 13702\n## [1] 13704\n## [1] 13706\n## [1] 13708\n## [1] 13710\n## [1] 13712\n## [1] 13714\n## [1] 13716\n## [1] 13718\n## [1] 13720\n## [1] 13722\n## [1] 13724\n## [1] 13726\n## [1] 13728\n## [1] 13730\n## [1] 13732\n## [1] 13734\n## [1] 13736\n## [1] 13738\n## [1] 13740\n## [1] 13742\n## [1] 13744\n## [1] 13746\n## [1] 13748\n## [1] 13750\n## [1] 13752\n## [1] 13754\n## [1] 13756\n## [1] 13758\n## [1] 13760\n## [1] 13762\n## [1] 13764\n## [1] 13766\n## [1] 13768\n## [1] 13770\n## [1] 13772\n## [1] 13774\n## [1] 13776\n## [1] 13778\n## [1] 13780\n## [1] 13782\n## [1] 13784\n## [1] 13786\n## [1] 13788\n## [1] 13790\n## [1] 13792\n## [1] 13794\n## [1] 13796\n## [1] 13798\n## [1] 13800\n## [1] 13802\n## [1] 13804\n## [1] 13806\n## [1] 13808\n## [1] 13810\n## [1] 13812\n## [1] 13814\n## [1] 13816\n## [1] 13818\n## [1] 13820\n## [1] 13822\n## [1] 13824\n## [1] 13826\n## [1] 13828\n## [1] 13830\n## [1] 13832\n## [1] 13834\n## [1] 13836\n## [1] 13838\n## [1] 13840\n## [1] 13842\n## [1] 13844\n## [1] 13846\n## [1] 13848\n## [1] 13850\n## [1] 13852\n## [1] 13854\n## [1] 13856\n## [1] 13858\n## [1] 13860\n## [1] 13862\n## [1] 13864\n## [1] 13866\n## [1] 13868\n## [1] 13870\n## [1] 13872\n## [1] 13874\n## [1] 13876\n## [1] 13878\n## [1] 13880\n## [1] 13882\n## [1] 13884\n## [1] 13886\n## [1] 13888\n## [1] 13890\n## [1] 13892\n## [1] 13894\n## [1] 13896\n## [1] 13898\n## [1] 13900\n## [1] 13902\n## [1] 13904\n## [1] 13906\n## [1] 13908\n## [1] 13910\n## [1] 13912\n## [1] 13914\n## [1] 13916\n## [1] 13918\n## [1] 13920\n## [1] 13922\n## [1] 13924\n## [1] 13926\n## [1] 13928\n## [1] 13930\n## [1] 13932\n## [1] 13934\n## [1] 13936\n## [1] 13938\n## [1] 13940\n## [1] 13942\n## [1] 13944\n## [1] 13946\n## [1] 13948\n## [1] 13950\n## [1] 13952\n## [1] 13954\n## [1] 13956\n## [1] 13958\n## [1] 13960\n## [1] 13962\n## [1] 13964\n## [1] 13966\n## [1] 13968\n## [1] 13970\n## [1] 13972\n## [1] 13974\n## [1] 13976\n## [1] 13978\n## [1] 13980\n## [1] 13982\n## [1] 13984\n## [1] 13986\n## [1] 13988\n## [1] 13990\n## [1] 13992\n## [1] 13994\n## [1] 13996\n## [1] 13998\n## [1] 14000\n## [1] 14002\n## [1] 14004\n## [1] 14006\n## [1] 14008\n## [1] 14010\n## [1] 14012\n## [1] 14014\n## [1] 14016\n## [1] 14018\n## [1] 14020\n## [1] 14022\n## [1] 14024\n## [1] 14026\n## [1] 14028\n## [1] 14030\n## [1] 14032\n## [1] 14034\n## [1] 14036\n## [1] 14038\n## [1] 14040\n## [1] 14042\n## [1] 14044\n## [1] 14046\n## [1] 14048\n## [1] 14050\n## [1] 14052\n## [1] 14054\n## [1] 14056\n## [1] 14058\n## [1] 14060\n## [1] 14062\n## [1] 14064\n## [1] 14066\n## [1] 14068\n## [1] 14070\n## [1] 14072\n## [1] 14074\n## [1] 14076\n## [1] 14078\n## [1] 14080\n## [1] 14082\n## [1] 14084\n## [1] 14086\n## [1] 14088\n## [1] 14090\n## [1] 14092\n## [1] 14094\n## [1] 14096\n## [1] 14098\n## [1] 14100\n## [1] 14102\n## [1] 14104\n## [1] 14106\n## [1] 14108\n## [1] 14110\n## [1] 14112\n## [1] 14114\n## [1] 14116\n## [1] 14118\n## [1] 14120\n## [1] 14122\n## [1] 14124\n## [1] 14126\n## [1] 14128\n## [1] 14130\n## [1] 14132\n## [1] 14134\n## [1] 14136\n## [1] 14138\n## [1] 14140\n## [1] 14142\n## [1] 14144\n## [1] 14146\n## [1] 14148\n## [1] 14150\n## [1] 14152\n## [1] 14154\n## [1] 14156\n## [1] 14158\n## [1] 14160\n## [1] 14162\n## [1] 14164\n## [1] 14166\n## [1] 14168\n## [1] 14170\n## [1] 14172\n## [1] 14174\n## [1] 14176\n## [1] 14178\n## [1] 14180\n## [1] 14182\n## [1] 14184\n## [1] 14186\n## [1] 14188\n## [1] 14190\n## [1] 14192\n## [1] 14194\n## [1] 14196\n## [1] 14198\n## [1] 14200\n## [1] 14202\n## [1] 14204\n## [1] 14206\n## [1] 14208\n## [1] 14210\n## [1] 14212\n## [1] 14214\n## [1] 14216\n## [1] 14218\n## [1] 14220\n## [1] 14222\n## [1] 14224\n## [1] 14226\n## [1] 14228\n## [1] 14230\n## [1] 14232\n## [1] 14234\n## [1] 14236\n## [1] 14238\n## [1] 14240\n## [1] 14242\n## [1] 14244\n## [1] 14246\n## [1] 14248\n## [1] 14250\n## [1] 14252\n## [1] 14254\n## [1] 14256\n## [1] 14258\n## [1] 14260\n## [1] 14262\n## [1] 14264\n## [1] 14266\n## [1] 14268\n## [1] 14270\n## [1] 14272\n## [1] 14274\n## [1] 14276\n## [1] 14278\n## [1] 14280\n## [1] 14282\n## [1] 14284\n## [1] 14286\n## [1] 14288\n## [1] 14290\n## [1] 14292\n## [1] 14294\n## [1] 14296\n## [1] 14298\n## [1] 14300\n## [1] 14302\n## [1] 14304\n## [1] 14306\n## [1] 14308\n## [1] 14310\n## [1] 14312\n## [1] 14314\n## [1] 14316\n## [1] 14318\n## [1] 14320\n## [1] 14322\n## [1] 14324\n## [1] 14326\n## [1] 14328\n## [1] 14330\n## [1] 14332\n## [1] 14334\n## [1] 14336\n## [1] 14338\n## [1] 14340\n## [1] 14342\n## [1] 14344\n## [1] 14346\n## [1] 14348\n## [1] 14350\n## [1] 14352\n## [1] 14354\n## [1] 14356\n## [1] 14358\n## [1] 14360\n## [1] 14362\n## [1] 14364\n## [1] 14366\n## [1] 14368\n## [1] 14370\n## [1] 14372\n## [1] 14374\n## [1] 14376\n## [1] 14378\n## [1] 14380\n## [1] 14382\n## [1] 14384\n## [1] 14386\n## [1] 14388\n## [1] 14390\n## [1] 14392\n## [1] 14394\n## [1] 14396\n## [1] 14398\n## [1] 14400\n## [1] 14402\n## [1] 14404\n## [1] 14406\n## [1] 14408\n## [1] 14410\n## [1] 14412\n## [1] 14414\n## [1] 14416\n## [1] 14418\n## [1] 14420\n## [1] 14422\n## [1] 14424\n## [1] 14426\n## [1] 14428\n## [1] 14430\n## [1] 14432\n## [1] 14434\n## [1] 14436\n## [1] 14438\n## [1] 14440\n## [1] 14442\n## [1] 14444\n## [1] 14446\n## [1] 14448\n## [1] 14450\n## [1] 14452\n## [1] 14454\n## [1] 14456\n## [1] 14458\n## [1] 14460\n## [1] 14462\n## [1] 14464\n## [1] 14466\n## [1] 14468\n## [1] 14470\n## [1] 14472\n## [1] 14474\n## [1] 14476\n## [1] 14478\n## [1] 14480\n## [1] 14482\n## [1] 14484\n## [1] 14486\n## [1] 14488\n## [1] 14490\n## [1] 14492\n## [1] 14494\n## [1] 14496\n## [1] 14498\n## [1] 14500\n## [1] 14502\n## [1] 14504\n## [1] 14506\n## [1] 14508\n## [1] 14510\n## [1] 14512\n## [1] 14514\n## [1] 14516\n## [1] 14518\n## [1] 14520\n## [1] 14522\n## [1] 14524\n## [1] 14526\n## [1] 14528\n## [1] 14530\n## [1] 14532\n## [1] 14534\n## [1] 14536\n## [1] 14538\n## [1] 14540\n## [1] 14542\n## [1] 14544\n## [1] 14546\n## [1] 14548\n## [1] 14550\n## [1] 14552\n## [1] 14554\n## [1] 14556\n## [1] 14558\n## [1] 14560\n## [1] 14562\n## [1] 14564\n## [1] 14566\n## [1] 14568\n## [1] 14570\n## [1] 14572\n## [1] 14574\n## [1] 14576\n## [1] 14578\n## [1] 14580\n## [1] 14582\n## [1] 14584\n## [1] 14586\n## [1] 14588\n## [1] 14590\n## [1] 14592\n## [1] 14594\n## [1] 14596\n## [1] 14598\n## [1] 14600\n## [1] 14602\n## [1] 14604\n## [1] 14606\n## [1] 14608\n## [1] 14610\n## [1] 14612\n## [1] 14614\n## [1] 14616\n## [1] 14618\n## [1] 14620\n## [1] 14622\n## [1] 14624\n## [1] 14626\n## [1] 14628\n## [1] 14630\n## [1] 14632\n## [1] 14634\n## [1] 14636\n## [1] 14638\n## [1] 14640\n## [1] 14642\n## [1] 14644\n## [1] 14646\n## [1] 14648\n## [1] 14650\n## [1] 14652\n## [1] 14654\n## [1] 14656\n## [1] 14658\n## [1] 14660\n## [1] 14662\n## [1] 14664\n## [1] 14666\n## [1] 14668\n## [1] 14670\n## [1] 14672\n## [1] 14674\n## [1] 14676\n## [1] 14678\n## [1] 14680\n## [1] 14682\n## [1] 14684\n## [1] 14686\n## [1] 14688\n## [1] 14690\n## [1] 14692\n## [1] 14694\n## [1] 14696\n## [1] 14698\n## [1] 14700\n## [1] 14702\n## [1] 14704\n## [1] 14706\n## [1] 14708\n## [1] 14710\n## [1] 14712\n## [1] 14714\n## [1] 14716\n## [1] 14718\n## [1] 14720\n## [1] 14722\n## [1] 14724\n## [1] 14726\n## [1] 14728\n## [1] 14730\n## [1] 14732\n## [1] 14734\n## [1] 14736\n## [1] 14738\n## [1] 14740\n## [1] 14742\n## [1] 14744\n## [1] 14746\n## [1] 14748\n## [1] 14750\n## [1] 14752\n## [1] 14754\n## [1] 14756\n## [1] 14758\n## [1] 14760\n## [1] 14762\n## [1] 14764\n## [1] 14766\n## [1] 14768\n## [1] 14770\n## [1] 14772\n## [1] 14774\n## [1] 14776\n## [1] 14778\n## [1] 14780\n## [1] 14782\n## [1] 14784\n## [1] 14786\n## [1] 14788\n## [1] 14790\n## [1] 14792\n## [1] 14794\n## [1] 14796\n## [1] 14798\n## [1] 14800\n## [1] 14802\n## [1] 14804\n## [1] 14806\n## [1] 14808\n## [1] 14810\n## [1] 14812\n## [1] 14814\n## [1] 14816\n## [1] 14818\n## [1] 14820\n## [1] 14822\n## [1] 14824\n## [1] 14826\n## [1] 14828\n## [1] 14830\n## [1] 14832\n## [1] 14834\n## [1] 14836\n## [1] 14838\n## [1] 14840\n## [1] 14842\n## [1] 14844\n## [1] 14846\n## [1] 14848\n## [1] 14850\n## [1] 14852\n## [1] 14854\n## [1] 14856\n## [1] 14858\n## [1] 14860\n## [1] 14862\n## [1] 14864\n## [1] 14866\n## [1] 14868\n## [1] 14870\n## [1] 14872\n## [1] 14874\n## [1] 14876\n## [1] 14878\n## [1] 14880\n## [1] 14882\n## [1] 14884\n## [1] 14886\n## [1] 14888\n## [1] 14890\n## [1] 14892\n## [1] 14894\n## [1] 14896\n## [1] 14898\n## [1] 14900\n## [1] 14902\n## [1] 14904\n## [1] 14906\n## [1] 14908\n## [1] 14910\n## [1] 14912\n## [1] 14914\n## [1] 14916\n## [1] 14918\n## [1] 14920\n## [1] 14922\n## [1] 14924\n## [1] 14926\n## [1] 14928\n## [1] 14930\n## [1] 14932\n## [1] 14934\n## [1] 14936\n## [1] 14938\n## [1] 14940\n## [1] 14942\n## [1] 14944\n## [1] 14946\n## [1] 14948\n## [1] 14950\n## [1] 14952\n## [1] 14954\n## [1] 14956\n## [1] 14958\n## [1] 14960\n## [1] 14962\n## [1] 14964\n## [1] 14966\n## [1] 14968\n## [1] 14970\n## [1] 14972\n## [1] 14974\n## [1] 14976\n## [1] 14978\n## [1] 14980\n## [1] 14982\n## [1] 14984\n## [1] 14986\n## [1] 14988\n## [1] 14990\n## [1] 14992\n## [1] 14994\n## [1] 14996\n## [1] 14998\n## [1] 15000\n## [1] 15002\n## [1] 15004\n## [1] 15006\n## [1] 15008\n## [1] 15010\n## [1] 15012\n## [1] 15014\n## [1] 15016\n## [1] 15018\n## [1] 15020\n## [1] 15022\n## [1] 15024\n## [1] 15026\n## [1] 15028\n## [1] 15030\n## [1] 15032\n## [1] 15034\n## [1] 15036\n## [1] 15038\n## [1] 15040\n## [1] 15042\n## [1] 15044\n## [1] 15046\n## [1] 15048\n## [1] 15050\n## [1] 15052\n## [1] 15054\n## [1] 15056\n## [1] 15058\n## [1] 15060\n## [1] 15062\n## [1] 15064\n## [1] 15066\n## [1] 15068\n## [1] 15070\n## [1] 15072\n## [1] 15074\n## [1] 15076\n## [1] 15078\n## [1] 15080\n## [1] 15082\n## [1] 15084\n## [1] 15086\n## [1] 15088\n## [1] 15090\n## [1] 15092\n## [1] 15094\n## [1] 15096\n## [1] 15098\n## [1] 15100\n## [1] 15102\n## [1] 15104\n## [1] 15106\n## [1] 15108\n## [1] 15110\n## [1] 15112\n## [1] 15114\n## [1] 15116\n## [1] 15118\n## [1] 15120\n## [1] 15122\n## [1] 15124\n## [1] 15126\n## [1] 15128\n## [1] 15130\n## [1] 15132\n## [1] 15134\n## [1] 15136\n## [1] 15138\n## [1] 15140\n## [1] 15142\n## [1] 15144\n## [1] 15146\n## [1] 15148\n## [1] 15150\n## [1] 15152\n## [1] 15154\n## [1] 15156\n## [1] 15158\n## [1] 15160\n## [1] 15162\n## [1] 15164\n## [1] 15166\n## [1] 15168\n## [1] 15170\n## [1] 15172\n## [1] 15174\n## [1] 15176\n## [1] 15178\n## [1] 15180\n## [1] 15182\n## [1] 15184\n## [1] 15186\n## [1] 15188\n## [1] 15190\n## [1] 15192\n## [1] 15194\n## [1] 15196\n## [1] 15198\n## [1] 15200\n## [1] 15202\n## [1] 15204\n## [1] 15206\n## [1] 15208\n## [1] 15210\n## [1] 15212\n## [1] 15214\n## [1] 15216\n## [1] 15218\n## [1] 15220\n## [1] 15222\n## [1] 15224\n## [1] 15226\n## [1] 15228\n## [1] 15230\n## [1] 15232\n## [1] 15234\n## [1] 15236\n## [1] 15238\n## [1] 15240\n## [1] 15242\n## [1] 15244\n## [1] 15246\n## [1] 15248\n## [1] 15250\n## [1] 15252\n## [1] 15254\n## [1] 15256\n## [1] 15258\n## [1] 15260\n## [1] 15262\n## [1] 15264\n## [1] 15266\n## [1] 15268\n## [1] 15270\n## [1] 15272\n## [1] 15274\n## [1] 15276\n## [1] 15278\n## [1] 15280\n## [1] 15282\n## [1] 15284\n## [1] 15286\n## [1] 15288\n## [1] 15290\n## [1] 15292\n## [1] 15294\n## [1] 15296\n## [1] 15298\n## [1] 15300\n## [1] 15302\n## [1] 15304\n## [1] 15306\n## [1] 15308\n## [1] 15310\n## [1] 15312\n## [1] 15314\n## [1] 15316\n## [1] 15318\n## [1] 15320\n## [1] 15322\n## [1] 15324\n## [1] 15326\n## [1] 15328\n## [1] 15330\n## [1] 15332\n## [1] 15334\n## [1] 15336\n## [1] 15338\n## [1] 15340\n## [1] 15342\n## [1] 15344\n## [1] 15346\n## [1] 15348\n## [1] 15350\n## [1] 15352\n## [1] 15354\n## [1] 15356\n## [1] 15358\n## [1] 15360\n## [1] 15362\n## [1] 15364\n## [1] 15366\n## [1] 15368\n## [1] 15370\n## [1] 15372\n## [1] 15374\n## [1] 15376\n## [1] 15378\n## [1] 15380\n## [1] 15382\n## [1] 15384\n## [1] 15386\n## [1] 15388\n## [1] 15390\n## [1] 15392\n## [1] 15394\n## [1] 15396\n## [1] 15398\n## [1] 15400\n## [1] 15402\n## [1] 15404\n## [1] 15406\n## [1] 15408\n## [1] 15410\n## [1] 15412\n## [1] 15414\n## [1] 15416\n## [1] 15418\n## [1] 15420\n## [1] 15422\n## [1] 15424\n## [1] 15426\n## [1] 15428\n## [1] 15430\n## [1] 15432\n## [1] 15434\n## [1] 15436\n## [1] 15438\n## [1] 15440\n## [1] 15442\n## [1] 15444\n## [1] 15446\n## [1] 15448\n## [1] 15450\n## [1] 15452\n## [1] 15454\n## [1] 15456\n## [1] 15458\n## [1] 15460\n## [1] 15462\n## [1] 15464\n## [1] 15466\n## [1] 15468\n## [1] 15470\n## [1] 15472\n## [1] 15474\n## [1] 15476\n## [1] 15478\n## [1] 15480\n## [1] 15482\n## [1] 15484\n## [1] 15486\n## [1] 15488\n## [1] 15490\n## [1] 15492\n## [1] 15494\n## [1] 15496\n## [1] 15498\n## [1] 15500\n## [1] 15502\n## [1] 15504\n## [1] 15506\n## [1] 15508\n## [1] 15510\n## [1] 15512\n## [1] 15514\n## [1] 15516\n## [1] 15518\n## [1] 15520\n## [1] 15522\n## [1] 15524\n## [1] 15526\n## [1] 15528\n## [1] 15530\n## [1] 15532\n## [1] 15534\n## [1] 15536\n## [1] 15538\n## [1] 15540\n## [1] 15542\n## [1] 15544\n## [1] 15546\n## [1] 15548\n## [1] 15550\n## [1] 15552\n## [1] 15554\n## [1] 15556\n## [1] 15558\n## [1] 15560\n## [1] 15562\n## [1] 15564\n## [1] 15566\n## [1] 15568\n## [1] 15570\n## [1] 15572\n## [1] 15574\n## [1] 15576\n## [1] 15578\n## [1] 15580\n## [1] 15582\n## [1] 15584\n## [1] 15586\n## [1] 15588\n## [1] 15590\n## [1] 15592\n## [1] 15594\n## [1] 15596\n## [1] 15598\n## [1] 15600\n## [1] 15602\n## [1] 15604\n## [1] 15606\n## [1] 15608\n## [1] 15610\n## [1] 15612\n## [1] 15614\n## [1] 15616\n## [1] 15618\n## [1] 15620\n## [1] 15622\n## [1] 15624\n## [1] 15626\n## [1] 15628\n## [1] 15630\n## [1] 15632\n## [1] 15634\n## [1] 15636\n## [1] 15638\n## [1] 15640\n## [1] 15642\n## [1] 15644\n## [1] 15646\n## [1] 15648\n## [1] 15650\n## [1] 15652\n## [1] 15654\n## [1] 15656\n## [1] 15658\n## [1] 15660\n## [1] 15662\n## [1] 15664\n## [1] 15666\n## [1] 15668\n## [1] 15670\n## [1] 15672\n## [1] 15674\n## [1] 15676\n## [1] 15678\n## [1] 15680\n## [1] 15682\n## [1] 15684\n## [1] 15686\n## [1] 15688\n## [1] 15690\n## [1] 15692\n## [1] 15694\n## [1] 15696\n## [1] 15698\n## [1] 15700\n## [1] 15702\n## [1] 15704\n## [1] 15706\n## [1] 15708\n## [1] 15710\n## [1] 15712\n## [1] 15714\n## [1] 15716\n## [1] 15718\n## [1] 15720\n## [1] 15722\n## [1] 15724\n## [1] 15726\n## [1] 15728\n## [1] 15730\n## [1] 15732\n## [1] 15734\n## [1] 15736\n## [1] 15738\n## [1] 15740\n## [1] 15742\n## [1] 15744\n## [1] 15746\n## [1] 15748\n## [1] 15750\n## [1] 15752\n## [1] 15754\n## [1] 15756\n## [1] 15758\n## [1] 15760\n## [1] 15762\n## [1] 15764\n## [1] 15766\n## [1] 15768\n## [1] 15770\n## [1] 15772\n## [1] 15774\n## [1] 15776\n## [1] 15778\n## [1] 15780\n## [1] 15782\n## [1] 15784\n## [1] 15786\n## [1] 15788\n## [1] 15790\n## [1] 15792\n## [1] 15794\n## [1] 15796\n## [1] 15798\n## [1] 15800\n## [1] 15802\n## [1] 15804\n## [1] 15806\n## [1] 15808\n## [1] 15810\n## [1] 15812\n## [1] 15814\n## [1] 15816\n## [1] 15818\n## [1] 15820\n## [1] 15822\n## [1] 15824\n## [1] 15826\n## [1] 15828\n## [1] 15830\n## [1] 15832\n## [1] 15834\n## [1] 15836\n## [1] 15838\n## [1] 15840\n## [1] 15842\n## [1] 15844\n## [1] 15846\n## [1] 15848\n## [1] 15850\n## [1] 15852\n## [1] 15854\n## [1] 15856\n## [1] 15858\n## [1] 15860\n## [1] 15862\n## [1] 15864\n## [1] 15866\n## [1] 15868\n## [1] 15870\n## [1] 15872\n## [1] 15874\n## [1] 15876\n## [1] 15878\n## [1] 15880\n## [1] 15882\n## [1] 15884\n## [1] 15886\n## [1] 15888\n## [1] 15890\n## [1] 15892\n## [1] 15894\n## [1] 15896\n## [1] 15898\n## [1] 15900\n## [1] 15902\n## [1] 15904\n## [1] 15906\n## [1] 15908\n## [1] 15910\n## [1] 15912\n## [1] 15914\n## [1] 15916\n## [1] 15918\n## [1] 15920\n## [1] 15922\n## [1] 15924\n## [1] 15926\n## [1] 15928\n## [1] 15930\n## [1] 15932\n## [1] 15934\n## [1] 15936\n## [1] 15938\n## [1] 15940\n## [1] 15942\n## [1] 15944\n## [1] 15946\n## [1] 15948\n## [1] 15950\n## [1] 15952\n## [1] 15954\n## [1] 15956\n## [1] 15958\n## [1] 15960\n## [1] 15962\n## [1] 15964\n## [1] 15966\n## [1] 15968\n## [1] 15970\n## [1] 15972\n## [1] 15974\n## [1] 15976\n## [1] 15978\n## [1] 15980\n## [1] 15982\n## [1] 15984\n## [1] 15986\n## [1] 15988\n## [1] 15990\n## [1] 15992\n## [1] 15994\n## [1] 15996\n## [1] 15998\n## [1] 16000\n## [1] 16002\n## [1] 16004\n## [1] 16006\n## [1] 16008\n## [1] 16010\n## [1] 16012\n## [1] 16014\n## [1] 16016\n## [1] 16018\n## [1] 16020\n## [1] 16022\n## [1] 16024\n## [1] 16026\n## [1] 16028\n## [1] 16030\n## [1] 16032\n## [1] 16034\n## [1] 16036\n## [1] 16038\n## [1] 16040\n## [1] 16042\n## [1] 16044\n## [1] 16046\n## [1] 16048\n## [1] 16050\n## [1] 16052\n## [1] 16054\n## [1] 16056\n## [1] 16058\n## [1] 16060\n## [1] 16062\n## [1] 16064\n## [1] 16066\n## [1] 16068\n## [1] 16070\n## [1] 16072\n## [1] 16074\n## [1] 16076\n## [1] 16078\n## [1] 16080\n## [1] 16082\n## [1] 16084\n## [1] 16086\n## [1] 16088\n## [1] 16090\n## [1] 16092\n## [1] 16094\n## [1] 16096\n## [1] 16098\n## [1] 16100\n## [1] 16102\n## [1] 16104\n## [1] 16106\n## [1] 16108\n## [1] 16110\n## [1] 16112\n## [1] 16114\n## [1] 16116\n## [1] 16118\n## [1] 16120\n## [1] 16122\n## [1] 16124\n## [1] 16126\n## [1] 16128\n## [1] 16130\n## [1] 16132\n## [1] 16134\n## [1] 16136\n## [1] 16138\n## [1] 16140\n## [1] 16142\n## [1] 16144\n## [1] 16146\n## [1] 16148\n## [1] 16150\n## [1] 16152\n## [1] 16154\n## [1] 16156\n## [1] 16158\n## [1] 16160\n## [1] 16162\n## [1] 16164\n## [1] 16166\n## [1] 16168\n## [1] 16170\n## [1] 16172\n## [1] 16174\n## [1] 16176\n## [1] 16178\n## [1] 16180\n## [1] 16182\n## [1] 16184\n## [1] 16186\n## [1] 16188\n## [1] 16190\n## [1] 16192\n## [1] 16194\n## [1] 16196\n## [1] 16198\n## [1] 16200\n## [1] 16202\n## [1] 16204\n## [1] 16206\n## [1] 16208\n## [1] 16210\n## [1] 16212\n## [1] 16214\n## [1] 16216\n## [1] 16218\n## [1] 16220\n## [1] 16222\n## [1] 16224\n## [1] 16226\n## [1] 16228\n## [1] 16230\n## [1] 16232\n## [1] 16234\n## [1] 16236\n## [1] 16238\n## [1] 16240\n## [1] 16242\n## [1] 16244\n## [1] 16246\n## [1] 16248\n## [1] 16250\n## [1] 16252\n## [1] 16254\n## [1] 16256\n## [1] 16258\n## [1] 16260\n## [1] 16262\n## [1] 16264\n## [1] 16266\n## [1] 16268\n## [1] 16270\n## [1] 16272\n## [1] 16274\n## [1] 16276\n## [1] 16278\n## [1] 16280\n## [1] 16282\n## [1] 16284\n## [1] 16286\n## [1] 16288\n## [1] 16290\n## [1] 16292\n## [1] 16294\n## [1] 16296\n## [1] 16298\n## [1] 16300\n## [1] 16302\n## [1] 16304\n## [1] 16306\n## [1] 16308\n## [1] 16310\n## [1] 16312\n## [1] 16314\n## [1] 16316\n## [1] 16318\n## [1] 16320\n## [1] 16322\n## [1] 16324\n## [1] 16326\n## [1] 16328\n## [1] 16330\n## [1] 16332\n## [1] 16334\n## [1] 16336\n## [1] 16338\n## [1] 16340\n## [1] 16342\n## [1] 16344\n## [1] 16346\n## [1] 16348\n## [1] 16350\n## [1] 16352\n## [1] 16354\n## [1] 16356\n## [1] 16358\n## [1] 16360\n## [1] 16362\n## [1] 16364\n## [1] 16366\n## [1] 16368\n## [1] 16370\n## [1] 16372\n## [1] 16374\n## [1] 16376\n## [1] 16378\n## [1] 16380\n## [1] 16382\n## [1] 16384\n## [1] 16386\n## [1] 16388\n## [1] 16390\n## [1] 16392\n## [1] 16394\n## [1] 16396\n## [1] 16398\n## [1] 16400\n## [1] 16402\n## [1] 16404\n## [1] 16406\n## [1] 16408\n## [1] 16410\n## [1] 16412\n## [1] 16414\n## [1] 16416\n## [1] 16418\n## [1] 16420\n## [1] 16422\n## [1] 16424\n## [1] 16426\n## [1] 16428\n## [1] 16430\n## [1] 16432\n## [1] 16434\n## [1] 16436\n## [1] 16438\n## [1] 16440\n## [1] 16442\n## [1] 16444\n## [1] 16446\n## [1] 16448\n## [1] 16450\n## [1] 16452\n## [1] 16454\n## [1] 16456\n## [1] 16458\n## [1] 16460\n## [1] 16462\n## [1] 16464\n## [1] 16466\n## [1] 16468\n## [1] 16470\n## [1] 16472\n## [1] 16474\n## [1] 16476\n## [1] 16478\n## [1] 16480\n## [1] 16482\n## [1] 16484\n## [1] 16486\n## [1] 16488\n## [1] 16490\n## [1] 16492\n## [1] 16494\n## [1] 16496\n## [1] 16498\n## [1] 16500\n## [1] 16502\n## [1] 16504\n## [1] 16506\n## [1] 16508\n## [1] 16510\n## [1] 16512\n## [1] 16514\n## [1] 16516\n## [1] 16518\n## [1] 16520\n## [1] 16522\n## [1] 16524\n## [1] 16526\n## [1] 16528\n## [1] 16530\n## [1] 16532\n## [1] 16534\n## [1] 16536\n## [1] 16538\n## [1] 16540\n## [1] 16542\n## [1] 16544\n## [1] 16546\n## [1] 16548\n## [1] 16550\n## [1] 16552\n## [1] 16554\n## [1] 16556\n## [1] 16558\n## [1] 16560\n## [1] 16562\n## [1] 16564\n## [1] 16566\n## [1] 16568\n## [1] 16570\n## [1] 16572\n## [1] 16574\n## [1] 16576\n## [1] 16578\n## [1] 16580\n## [1] 16582\n## [1] 16584\n## [1] 16586\n## [1] 16588\n## [1] 16590\n## [1] 16592\n## [1] 16594\n## [1] 16596\n## [1] 16598\n## [1] 16600\n## [1] 16602\n## [1] 16604\n## [1] 16606\n## [1] 16608\n## [1] 16610\n## [1] 16612\n## [1] 16614\n## [1] 16616\n## [1] 16618\n## [1] 16620\n## [1] 16622\n## [1] 16624\n## [1] 16626\n## [1] 16628\n## [1] 16630\n## [1] 16632\n## [1] 16634\n## [1] 16636\n## [1] 16638\n## [1] 16640\n## [1] 16642\n## [1] 16644\n## [1] 16646\n## [1] 16648\n## [1] 16650\n## [1] 16652\n## [1] 16654\n## [1] 16656\n## [1] 16658\n## [1] 16660\n## [1] 16662\n## [1] 16664\n## [1] 16666\n## [1] 16668\n## [1] 16670\n## [1] 16672\n## [1] 16674\n## [1] 16676\n## [1] 16678\n## [1] 16680\n## [1] 16682\n## [1] 16684\n## [1] 16686\n## [1] 16688\n## [1] 16690\n## [1] 16692\n## [1] 16694\n## [1] 16696\n## [1] 16698\n## [1] 16700\n## [1] 16702\n## [1] 16704\n## [1] 16706\n## [1] 16708\n## [1] 16710\n## [1] 16712\n## [1] 16714\n## [1] 16716\n## [1] 16718\n## [1] 16720\n## [1] 16722\n## [1] 16724\n## [1] 16726\n## [1] 16728\n## [1] 16730\n## [1] 16732\n## [1] 16734\n## [1] 16736\n## [1] 16738\n## [1] 16740\n## [1] 16742\n## [1] 16744\n## [1] 16746\n## [1] 16748\n## [1] 16750\n## [1] 16752\n## [1] 16754\n## [1] 16756\n## [1] 16758\n## [1] 16760\n## [1] 16762\n## [1] 16764\n## [1] 16766\n## [1] 16768\n## [1] 16770\n## [1] 16772\n## [1] 16774\n## [1] 16776\n## [1] 16778\n## [1] 16780\n## [1] 16782\n## [1] 16784\n## [1] 16786\n## [1] 16788\n## [1] 16790\n## [1] 16792\n## [1] 16794\n## [1] 16796\n## [1] 16798\n## [1] 16800\n## [1] 16802\n## [1] 16804\n## [1] 16806\n## [1] 16808\n## [1] 16810\n## [1] 16812\n## [1] 16814\n## [1] 16816\n## [1] 16818\n## [1] 16820\n## [1] 16822\n## [1] 16824\n## [1] 16826\n## [1] 16828\n## [1] 16830\n## [1] 16832\n## [1] 16834\n## [1] 16836\n## [1] 16838\n## [1] 16840\n## [1] 16842\n## [1] 16844\n## [1] 16846\n## [1] 16848\n## [1] 16850\n## [1] 16852\n## [1] 16854\n## [1] 16856\n## [1] 16858\n## [1] 16860\n## [1] 16862\n## [1] 16864\n## [1] 16866\n## [1] 16868\n## [1] 16870\n## [1] 16872\n## [1] 16874\n## [1] 16876\n## [1] 16878\n## [1] 16880\n## [1] 16882\n## [1] 16884\n## [1] 16886\n## [1] 16888\n## [1] 16890\n## [1] 16892\n## [1] 16894\n## [1] 16896\n## [1] 16898\n## [1] 16900\n## [1] 16902\n## [1] 16904\n## [1] 16906\n## [1] 16908\n## [1] 16910\n## [1] 16912\n## [1] 16914\n## [1] 16916\n## [1] 16918\n## [1] 16920\n## [1] 16922\n## [1] 16924\n## [1] 16926\n## [1] 16928\n## [1] 16930\n## [1] 16932\n## [1] 16934\n## [1] 16936\n## [1] 16938\n## [1] 16940\n## [1] 16942\n## [1] 16944\n## [1] 16946\n## [1] 16948\n## [1] 16950\n## [1] 16952\n## [1] 16954\n## [1] 16956\n## [1] 16958\n## [1] 16960\n## [1] 16962\n## [1] 16964\n## [1] 16966\n## [1] 16968\n## [1] 16970\n## [1] 16972\n## [1] 16974\n## [1] 16976\n## [1] 16978\n## [1] 16980\n## [1] 16982\n## [1] 16984\n## [1] 16986\n## [1] 16988\n## [1] 16990\n## [1] 16992\n## [1] 16994\n## [1] 16996\n## [1] 16998\n## [1] 17000\n## [1] 17002\n## [1] 17004\n## [1] 17006\n## [1] 17008\n## [1] 17010\n## [1] 17012\n## [1] 17014\n## [1] 17016\n## [1] 17018\n## [1] 17020\n## [1] 17022\n## [1] 17024\n## [1] 17026\n## [1] 17028\n## [1] 17030\n## [1] 17032\n## [1] 17034\n## [1] 17036\n## [1] 17038\n## [1] 17040\n## [1] 17042\n## [1] 17044\n## [1] 17046\n## [1] 17048\n## [1] 17050\n## [1] 17052\n## [1] 17054\n## [1] 17056\n## [1] 17058\n## [1] 17060\n## [1] 17062\n## [1] 17064\n## [1] 17066\n## [1] 17068\n## [1] 17070\n## [1] 17072\n## [1] 17074\n## [1] 17076\n## [1] 17078\n## [1] 17080\n## [1] 17082\n## [1] 17084\n## [1] 17086\n## [1] 17088\n## [1] 17090\n## [1] 17092\n## [1] 17094\n## [1] 17096\n## [1] 17098\n## [1] 17100\n## [1] 17102\n## [1] 17104\n## [1] 17106\n## [1] 17108\n## [1] 17110\n## [1] 17112\n## [1] 17114\n## [1] 17116\n## [1] 17118\n## [1] 17120\n## [1] 17122\n## [1] 17124\n## [1] 17126\n## [1] 17128\n## [1] 17130\n## [1] 17132\n## [1] 17134\n## [1] 17136\n## [1] 17138\n## [1] 17140\n## [1] 17142\n## [1] 17144\n## [1] 17146\n## [1] 17148\n## [1] 17150\n## [1] 17152\n## [1] 17154\n## [1] 17156\n## [1] 17158\n## [1] 17160\n## [1] 17162\n## [1] 17164\n## [1] 17166\n## [1] 17168\n## [1] 17170\n## [1] 17172\n## [1] 17174\n## [1] 17176\n## [1] 17178\n## [1] 17180\n## [1] 17182\n## [1] 17184\n## [1] 17186\n## [1] 17188\n## [1] 17190\n## [1] 17192\n## [1] 17194\n## [1] 17196\n## [1] 17198\n## [1] 17200\n## [1] 17202\n## [1] 17204\n## [1] 17206\n## [1] 17208\n## [1] 17210\n## [1] 17212\n## [1] 17214\n## [1] 17216\n## [1] 17218\n## [1] 17220\n## [1] 17222\n## [1] 17224\n## [1] 17226\n## [1] 17228\n## [1] 17230\n## [1] 17232\n## [1] 17234\n## [1] 17236\n## [1] 17238\n## [1] 17240\n## [1] 17242\n## [1] 17244\n## [1] 17246\n## [1] 17248\n## [1] 17250\n## [1] 17252\n## [1] 17254\n## [1] 17256\n## [1] 17258\n## [1] 17260\n## [1] 17262\n## [1] 17264\n## [1] 17266\n## [1] 17268\n## [1] 17270\n## [1] 17272\n## [1] 17274\n## [1] 17276\n## [1] 17278\n## [1] 17280\n## [1] 17282\n## [1] 17284\n## [1] 17286\n## [1] 17288\n## [1] 17290\n## [1] 17292\n## [1] 17294\n## [1] 17296\n## [1] 17298\n## [1] 17300\n## [1] 17302\n## [1] 17304\n## [1] 17306\n## [1] 17308\n## [1] 17310\n## [1] 17312\n## [1] 17314\n## [1] 17316\n## [1] 17318\n## [1] 17320\n## [1] 17322\n## [1] 17324\n## [1] 17326\n## [1] 17328\n## [1] 17330\n## [1] 17332\n## [1] 17334\n## [1] 17336\n## [1] 17338\n## [1] 17340\n## [1] 17342\n## [1] 17344\n## [1] 17346\n## [1] 17348\n## [1] 17350\n## [1] 17352\n## [1] 17354\n## [1] 17356\n## [1] 17358\n## [1] 17360\n## [1] 17362\n## [1] 17364\n## [1] 17366\n## [1] 17368\n## [1] 17370\n## [1] 17372\n## [1] 17374\n## [1] 17376\n## [1] 17378\n## [1] 17380\n## [1] 17382\n## [1] 17384\n## [1] 17386\n## [1] 17388\n## [1] 17390\n## [1] 17392\n## [1] 17394\n## [1] 17396\n## [1] 17398\n## [1] 17400\n## [1] 17402\n## [1] 17404\n## [1] 17406\n## [1] 17408\n## [1] 17410\n## [1] 17412\n## [1] 17414\n## [1] 17416\n## [1] 17418\n## [1] 17420\n## [1] 17422\n## [1] 17424\n## [1] 17426\n## [1] 17428\n## [1] 17430\n## [1] 17432\n## [1] 17434\n## [1] 17436\n## [1] 17438\n## [1] 17440\n## [1] 17442\n## [1] 17444\n## [1] 17446\n## [1] 17448\n## [1] 17450\n## [1] 17452\n## [1] 17454\n## [1] 17456\n## [1] 17458\n## [1] 17460\n## [1] 17462\n## [1] 17464\n## [1] 17466\n## [1] 17468\n## [1] 17470\n## [1] 17472\n## [1] 17474\n## [1] 17476\n## [1] 17478\n## [1] 17480\n## [1] 17482\n## [1] 17484\n## [1] 17486\n## [1] 17488\n## [1] 17490\n## [1] 17492\n## [1] 17494\n## [1] 17496\n## [1] 17498\n## [1] 17500\n## [1] 17502\n## [1] 17504\n## [1] 17506\n## [1] 17508\n## [1] 17510\n## [1] 17512\n## [1] 17514\n## [1] 17516\n## [1] 17518\n## [1] 17520\n## [1] 17522\n## [1] 17524\n## [1] 17526\n## [1] 17528\n## [1] 17530\n## [1] 17532\n## [1] 17534\n## [1] 17536\n## [1] 17538\n## [1] 17540\n## [1] 17542\n## [1] 17544\n## [1] 17546\n## [1] 17548\n## [1] 17550\n## [1] 17552\n## [1] 17554\n## [1] 17556\n## [1] 17558\n## [1] 17560\n## [1] 17562\n## [1] 17564\n## [1] 17566\n## [1] 17568\n## [1] 17570\n## [1] 17572\n## [1] 17574\n## [1] 17576\n## [1] 17578\n## [1] 17580\n## [1] 17582\n## [1] 17584\n## [1] 17586\n## [1] 17588\n## [1] 17590\n## [1] 17592\n## [1] 17594\n## [1] 17596\n## [1] 17598\n## [1] 17600\n## [1] 17602\n## [1] 17604\n## [1] 17606\n## [1] 17608\n## [1] 17610\n## [1] 17612\n## [1] 17614\n## [1] 17616\n## [1] 17618\n## [1] 17620\n## [1] 17622\n## [1] 17624\n## [1] 17626\n## [1] 17628\n## [1] 17630\n## [1] 17632\n## [1] 17634\n## [1] 17636\n## [1] 17638\n## [1] 17640\n## [1] 17642\n## [1] 17644\n## [1] 17646\n## [1] 17648\n## [1] 17650\n## [1] 17652\n## [1] 17654\n## [1] 17656\n## [1] 17658\n## [1] 17660\n## [1] 17662\n## [1] 17664\n## [1] 17666\n## [1] 17668\n## [1] 17670\n## [1] 17672\n## [1] 17674\n## [1] 17676\n## [1] 17678\n## [1] 17680\n## [1] 17682\n## [1] 17684\n## [1] 17686\n## [1] 17688\n## [1] 17690\n## [1] 17692\n## [1] 17694\n## [1] 17696\n## [1] 17698\n## [1] 17700\n## [1] 17702\n## [1] 17704\n## [1] 17706\n## [1] 17708\n## [1] 17710\n## [1] 17712\n## [1] 17714\n## [1] 17716\n## [1] 17718\n## [1] 17720\n## [1] 17722\n## [1] 17724\n## [1] 17726\n## [1] 17728\n## [1] 17730\n## [1] 17732\n## [1] 17734\n## [1] 17736\n## [1] 17738\n## [1] 17740\n## [1] 17742\n## [1] 17744\n## [1] 17746\n## [1] 17748\n## [1] 17750\n## [1] 17752\n## [1] 17754\n## [1] 17756\n## [1] 17758\n## [1] 17760\n## [1] 17762\n## [1] 17764\n## [1] 17766\n## [1] 17768\n## [1] 17770\n## [1] 17772\n## [1] 17774\n## [1] 17776\n## [1] 17778\n## [1] 17780\n## [1] 17782\n## [1] 17784\n## [1] 17786\n## [1] 17788\n## [1] 17790\n## [1] 17792\n## [1] 17794\n## [1] 17796\n## [1] 17798\n## [1] 17800\n## [1] 17802\n## [1] 17804\n## [1] 17806\n## [1] 17808\n## [1] 17810\n## [1] 17812\n## [1] 17814\n## [1] 17816\n## [1] 17818\n## [1] 17820\n## [1] 17822\n## [1] 17824\n## [1] 17826\n## [1] 17828\n## [1] 17830\n## [1] 17832\n## [1] 17834\n## [1] 17836\n## [1] 17838\n## [1] 17840\n## [1] 17842\n## [1] 17844\n## [1] 17846\n## [1] 17848\n## [1] 17850\n## [1] 17852\n## [1] 17854\n## [1] 17856\n## [1] 17858\n## [1] 17860\n## [1] 17862\n## [1] 17864\n## [1] 17866\n## [1] 17868\n## [1] 17870\n## [1] 17872\n## [1] 17874\n## [1] 17876\n## [1] 17878\n## [1] 17880\n## [1] 17882\n## [1] 17884\n## [1] 17886\n## [1] 17888\n## [1] 17890\n## [1] 17892\n## [1] 17894\n## [1] 17896\n## [1] 17898\n## [1] 17900\n## [1] 17902\n## [1] 17904\n## [1] 17906\n## [1] 17908\n## [1] 17910\n## [1] 17912\n## [1] 17914\n## [1] 17916\n## [1] 17918\n## [1] 17920\n## [1] 17922\n## [1] 17924\n## [1] 17926\n## [1] 17928\n## [1] 17930\n## [1] 17932\n## [1] 17934\n## [1] 17936\n## [1] 17938\n## [1] 17940\n## [1] 17942\n## [1] 17944\n## [1] 17946\n## [1] 17948\n## [1] 17950\n## [1] 17952\n## [1] 17954\n## [1] 17956\n## [1] 17958\n## [1] 17960\n## [1] 17962\n## [1] 17964\n## [1] 17966\n## [1] 17968\n## [1] 17970\n## [1] 17972\n## [1] 17974\n## [1] 17976\n## [1] 17978\n## [1] 17980\n## [1] 17982\n## [1] 17984\n## [1] 17986\n## [1] 17988\n## [1] 17990\n## [1] 17992\n## [1] 17994\n## [1] 17996\n## [1] 17998\n## [1] 18000\n## [1] 18002\n## [1] 18004\n## [1] 18006\n## [1] 18008\n## [1] 18010\n## [1] 18012\n## [1] 18014\n## [1] 18016\n## [1] 18018\n## [1] 18020\n## [1] 18022\n## [1] 18024\n## [1] 18026\n## [1] 18028\n## [1] 18030\n## [1] 18032\n## [1] 18034\n## [1] 18036\n## [1] 18038\n## [1] 18040\n## [1] 18042\n## [1] 18044\n## [1] 18046\n## [1] 18048\n## [1] 18050\n## [1] 18052\n## [1] 18054\n## [1] 18056\n## [1] 18058\n## [1] 18060\n## [1] 18062\n## [1] 18064\n## [1] 18066\n## [1] 18068\n## [1] 18070\n## [1] 18072\n## [1] 18074\n## [1] 18076\n## [1] 18078\n## [1] 18080\n## [1] 18082\n## [1] 18084\n## [1] 18086\n## [1] 18088\n## [1] 18090\n## [1] 18092\n## [1] 18094\n## [1] 18096\n## [1] 18098\n## [1] 18100\n## [1] 18102\n## [1] 18104\n## [1] 18106\n## [1] 18108\n## [1] 18110\n## [1] 18112\n## [1] 18114\n## [1] 18116\n## [1] 18118\n## [1] 18120\n## [1] 18122\n## [1] 18124\n## [1] 18126\n## [1] 18128\n## [1] 18130\n## [1] 18132\n## [1] 18134\n## [1] 18136\n## [1] 18138\n## [1] 18140\n## [1] 18142\n## [1] 18144\n## [1] 18146\n## [1] 18148\n## [1] 18150\n## [1] 18152\n## [1] 18154\n## [1] 18156\n## [1] 18158\n## [1] 18160\n## [1] 18162\n## [1] 18164\n## [1] 18166\n## [1] 18168\n## [1] 18170\n## [1] 18172\n## [1] 18174\n## [1] 18176\n## [1] 18178\n## [1] 18180\n## [1] 18182\n## [1] 18184\n## [1] 18186\n## [1] 18188\n## [1] 18190\n## [1] 18192\n## [1] 18194\n## [1] 18196\n## [1] 18198\n## [1] 18200\n## [1] 18202\n## [1] 18204\n## [1] 18206\n## [1] 18208\n## [1] 18210\n## [1] 18212\n## [1] 18214\n## [1] 18216\n## [1] 18218\n## [1] 18220\n## [1] 18222\n## [1] 18224\n## [1] 18226\n## [1] 18228\n## [1] 18230\n## [1] 18232\n## [1] 18234\n## [1] 18236\n## [1] 18238\n## [1] 18240\n## [1] 18242\n## [1] 18244\n## [1] 18246\n## [1] 18248\n## [1] 18250\n## [1] 18252\n## [1] 18254\n## [1] 18256\n## [1] 18258\n## [1] 18260\n## [1] 18262\n## [1] 18264\n## [1] 18266\n## [1] 18268\n## [1] 18270\n## [1] 18272\n## [1] 18274\n## [1] 18276\n## [1] 18278\n## [1] 18280\n## [1] 18282\n## [1] 18284\n## [1] 18286\n## [1] 18288\n## [1] 18290\n## [1] 18292\n## [1] 18294\n## [1] 18296\n## [1] 18298\n## [1] 18300\n## [1] 18302\n## [1] 18304\n## [1] 18306\n## [1] 18308\n## [1] 18310\n## [1] 18312\n## [1] 18314\n## [1] 18316\n## [1] 18318\n## [1] 18320\n## [1] 18322\n## [1] 18324\n## [1] 18326\n## [1] 18328\n## [1] 18330\n## [1] 18332\n## [1] 18334\n## [1] 18336\n## [1] 18338\n## [1] 18340\n## [1] 18342\n## [1] 18344\n## [1] 18346\n## [1] 18348\n## [1] 18350\n## [1] 18352\n## [1] 18354\n## [1] 18356\n## [1] 18358\n## [1] 18360\n## [1] 18362\n## [1] 18364\n## [1] 18366\n## [1] 18368\n## [1] 18370\n## [1] 18372\n## [1] 18374\n## [1] 18376\n## [1] 18378\n## [1] 18380\n## [1] 18382\n## [1] 18384\n## [1] 18386\n## [1] 18388\n## [1] 18390\n## [1] 18392\n## [1] 18394\n## [1] 18396\n## [1] 18398\n## [1] 18400\n## [1] 18402\n## [1] 18404\n## [1] 18406\n## [1] 18408\n## [1] 18410\n## [1] 18412\n## [1] 18414\n## [1] 18416\n## [1] 18418\n## [1] 18420\n## [1] 18422\n## [1] 18424\n## [1] 18426\n## [1] 18428\n## [1] 18430\n## [1] 18432\n## [1] 18434\n## [1] 18436\n## [1] 18438\n## [1] 18440\n## [1] 18442\n## [1] 18444\n## [1] 18446\n## [1] 18448\n## [1] 18450\n## [1] 18452\n## [1] 18454\n## [1] 18456\n## [1] 18458\n## [1] 18460\n## [1] 18462\n## [1] 18464\n## [1] 18466\n## [1] 18468\n## [1] 18470\n## [1] 18472\n## [1] 18474\n## [1] 18476\n## [1] 18478\n## [1] 18480\n## [1] 18482\n## [1] 18484\n## [1] 18486\n## [1] 18488\n## [1] 18490\n## [1] 18492\n## [1] 18494\n## [1] 18496\n## [1] 18498\n## [1] 18500\n## [1] 18502\n## [1] 18504\n## [1] 18506\n## [1] 18508\n## [1] 18510\n## [1] 18512\n## [1] 18514\n## [1] 18516\n## [1] 18518\n## [1] 18520\n## [1] 18522\n## [1] 18524\n## [1] 18526\n## [1] 18528\n## [1] 18530\n## [1] 18532\n## [1] 18534\n## [1] 18536\n## [1] 18538\n## [1] 18540\n## [1] 18542\n## [1] 18544\n## [1] 18546\n## [1] 18548\n## [1] 18550\n## [1] 18552\n## [1] 18554\n## [1] 18556\n## [1] 18558\n## [1] 18560\n## [1] 18562\n## [1] 18564\n## [1] 18566\n## [1] 18568\n## [1] 18570\n## [1] 18572\n## [1] 18574\n## [1] 18576\n## [1] 18578\n## [1] 18580\n## [1] 18582\n## [1] 18584\n## [1] 18586\n## [1] 18588\n## [1] 18590\n## [1] 18592\n## [1] 18594\n## [1] 18596\n## [1] 18598\n## [1] 18600\n## [1] 18602\n## [1] 18604\n## [1] 18606\n## [1] 18608\n## [1] 18610\n## [1] 18612\n## [1] 18614\n## [1] 18616\n## [1] 18618\n## [1] 18620\n## [1] 18622\n## [1] 18624\n## [1] 18626\n## [1] 18628\n## [1] 18630\n## [1] 18632\n## [1] 18634\n## [1] 18636\n## [1] 18638\n## [1] 18640\n## [1] 18642\n## [1] 18644\n## [1] 18646\n## [1] 18648\n## [1] 18650\n## [1] 18652\n## [1] 18654\n## [1] 18656\n## [1] 18658\n## [1] 18660\n## [1] 18662\n## [1] 18664\n## [1] 18666\n## [1] 18668\n## [1] 18670\n## [1] 18672\n## [1] 18674\n## [1] 18676\n## [1] 18678\n## [1] 18680\n## [1] 18682\n## [1] 18684\n## [1] 18686\n## [1] 18688\n## [1] 18690\n## [1] 18692\n## [1] 18694\n## [1] 18696\n## [1] 18698\n## [1] 18700\n## [1] 18702\n## [1] 18704\n## [1] 18706\n## [1] 18708\n## [1] 18710\n## [1] 18712\n## [1] 18714\n## [1] 18716\n## [1] 18718\n## [1] 18720\n## [1] 18722\n## [1] 18724\n## [1] 18726\n## [1] 18728\n## [1] 18730\n## [1] 18732\n## [1] 18734\n## [1] 18736\n## [1] 18738\n## [1] 18740\n## [1] 18742\n## [1] 18744\n## [1] 18746\n## [1] 18748\n## [1] 18750\n## [1] 18752\n## [1] 18754\n## [1] 18756\n## [1] 18758\n## [1] 18760\n## [1] 18762\n## [1] 18764\n## [1] 18766\n## [1] 18768\n## [1] 18770\n## [1] 18772\n## [1] 18774\n## [1] 18776\n## [1] 18778\n## [1] 18780\n## [1] 18782\n## [1] 18784\n## [1] 18786\n## [1] 18788\n## [1] 18790\n## [1] 18792\n## [1] 18794\n## [1] 18796\n## [1] 18798\n## [1] 18800\n## [1] 18802\n## [1] 18804\n## [1] 18806\n## [1] 18808\n## [1] 18810\n## [1] 18812\n## [1] 18814\n## [1] 18816\n## [1] 18818\n## [1] 18820\n## [1] 18822\n## [1] 18824\n## [1] 18826\n## [1] 18828\n## [1] 18830\n## [1] 18832\n## [1] 18834\n## [1] 18836\n## [1] 18838\n## [1] 18840\n## [1] 18842\n## [1] 18844\n## [1] 18846\n## [1] 18848\n## [1] 18850\n## [1] 18852\n## [1] 18854\n## [1] 18856\n## [1] 18858\n## [1] 18860\n## [1] 18862\n## [1] 18864\n## [1] 18866\n## [1] 18868\n## [1] 18870\n## [1] 18872\n## [1] 18874\n## [1] 18876\n## [1] 18878\n## [1] 18880\n## [1] 18882\n## [1] 18884\n## [1] 18886\n## [1] 18888\n## [1] 18890\n## [1] 18892\n## [1] 18894\n## [1] 18896\n## [1] 18898\n## [1] 18900\n## [1] 18902\n## [1] 18904\n## [1] 18906\n## [1] 18908\n## [1] 18910\n## [1] 18912\n## [1] 18914\n## [1] 18916\n## [1] 18918\n## [1] 18920\n## [1] 18922\n## [1] 18924\n## [1] 18926\n## [1] 18928\n## [1] 18930\n## [1] 18932\n## [1] 18934\n## [1] 18936\n## [1] 18938\n## [1] 18940\n## [1] 18942\n## [1] 18944\n## [1] 18946\n## [1] 18948\n## [1] 18950\n## [1] 18952\n## [1] 18954\n## [1] 18956\n## [1] 18958\n## [1] 18960\n## [1] 18962\n## [1] 18964\n## [1] 18966\n## [1] 18968\n## [1] 18970\n## [1] 18972\n## [1] 18974\n## [1] 18976\n## [1] 18978\n## [1] 18980\n## [1] 18982\n## [1] 18984\n## [1] 18986\n## [1] 18988\n## [1] 18990\n## [1] 18992\n## [1] 18994\n## [1] 18996\n## [1] 18998\n## [1] 19000\n## [1] 19002\n## [1] 19004\n## [1] 19006\n## [1] 19008\n## [1] 19010\n## [1] 19012\n## [1] 19014\n## [1] 19016\n## [1] 19018\n## [1] 19020\n## [1] 19022\n## [1] 19024\n## [1] 19026\n## [1] 19028\n## [1] 19030\n## [1] 19032\n## [1] 19034\n## [1] 19036\n## [1] 19038\n## [1] 19040\n## [1] 19042\n## [1] 19044\n## [1] 19046\n## [1] 19048\n## [1] 19050\n## [1] 19052\n## [1] 19054\n## [1] 19056\n## [1] 19058\n## [1] 19060\n## [1] 19062\n## [1] 19064\n## [1] 19066\n## [1] 19068\n## [1] 19070\n## [1] 19072\n## [1] 19074\n## [1] 19076\n## [1] 19078\n## [1] 19080\n## [1] 19082\n## [1] 19084\n## [1] 19086\n## [1] 19088\n## [1] 19090\n## [1] 19092\n## [1] 19094\n## [1] 19096\n## [1] 19098\n## [1] 19100\n## [1] 19102\n## [1] 19104\n## [1] 19106\n## [1] 19108\n## [1] 19110\n## [1] 19112\n## [1] 19114\n## [1] 19116\n## [1] 19118\n## [1] 19120\n## [1] 19122\n## [1] 19124\n## [1] 19126\n## [1] 19128\n## [1] 19130\n## [1] 19132\n## [1] 19134\n## [1] 19136\n## [1] 19138\n## [1] 19140\n## [1] 19142\n## [1] 19144\n## [1] 19146\n## [1] 19148\n## [1] 19150\n## [1] 19152\n## [1] 19154\n## [1] 19156\n## [1] 19158\n## [1] 19160\n## [1] 19162\n## [1] 19164\n## [1] 19166\n## [1] 19168\n## [1] 19170\n## [1] 19172\n## [1] 19174\n## [1] 19176\n## [1] 19178\n## [1] 19180\n## [1] 19182\n## [1] 19184\n## [1] 19186\n## [1] 19188\n## [1] 19190\n## [1] 19192\n## [1] 19194\n## [1] 19196\n## [1] 19198\n## [1] 19200\n## [1] 19202\n## [1] 19204\n## [1] 19206\n## [1] 19208\n## [1] 19210\n## [1] 19212\n## [1] 19214\n## [1] 19216\n## [1] 19218\n## [1] 19220\n## [1] 19222\n## [1] 19224\n## [1] 19226\n## [1] 19228\n## [1] 19230\n## [1] 19232\n## [1] 19234\n## [1] 19236\n## [1] 19238\n## [1] 19240\n## [1] 19242\n## [1] 19244\n## [1] 19246\n## [1] 19248\n## [1] 19250\n## [1] 19252\n## [1] 19254\n## [1] 19256\n## [1] 19258\n## [1] 19260\n## [1] 19262\n## [1] 19264\n## [1] 19266\n## [1] 19268\n## [1] 19270\n## [1] 19272\n## [1] 19274\n## [1] 19276\n## [1] 19278\n## [1] 19280\n## [1] 19282\n## [1] 19284\n## [1] 19286\n## [1] 19288\n## [1] 19290\n## [1] 19292\n## [1] 19294\n## [1] 19296\n## [1] 19298\n## [1] 19300\n## [1] 19302\n## [1] 19304\n## [1] 19306\n## [1] 19308\n## [1] 19310\n## [1] 19312\n## [1] 19314\n## [1] 19316\n## [1] 19318\n## [1] 19320\n## [1] 19322\n## [1] 19324\n## [1] 19326\n## [1] 19328\n## [1] 19330\n## [1] 19332\n## [1] 19334\n## [1] 19336\n## [1] 19338\n## [1] 19340\n## [1] 19342\n## [1] 19344\n## [1] 19346\n## [1] 19348\n## [1] 19350\n## [1] 19352\n## [1] 19354\n## [1] 19356\n## [1] 19358\n## [1] 19360\n## [1] 19362\n## [1] 19364\n## [1] 19366\n## [1] 19368\n## [1] 19370\n## [1] 19372\n## [1] 19374\n## [1] 19376\n## [1] 19378\n## [1] 19380\n## [1] 19382\n## [1] 19384\n## [1] 19386\n## [1] 19388\n## [1] 19390\n## [1] 19392\n## [1] 19394\n## [1] 19396\n## [1] 19398\n## [1] 19400\n## [1] 19402\n## [1] 19404\n## [1] 19406\n## [1] 19408\n## [1] 19410\n## [1] 19412\n## [1] 19414\n## [1] 19416\n## [1] 19418\n## [1] 19420\n## [1] 19422\n## [1] 19424\n## [1] 19426\n## [1] 19428\n## [1] 19430\n## [1] 19432\n## [1] 19434\n## [1] 19436\n## [1] 19438\n## [1] 19440\n## [1] 19442\n## [1] 19444\n## [1] 19446\n## [1] 19448\n## [1] 19450\n## [1] 19452\n## [1] 19454\n## [1] 19456\n## [1] 19458\n## [1] 19460\n## [1] 19462\n## [1] 19464\n## [1] 19466\n## [1] 19468\n## [1] 19470\n## [1] 19472\n## [1] 19474\n## [1] 19476\n## [1] 19478\n## [1] 19480\n## [1] 19482\n## [1] 19484\n## [1] 19486\n## [1] 19488\n## [1] 19490\n## [1] 19492\n## [1] 19494\n## [1] 19496\n## [1] 19498\n## [1] 19500\n## [1] 19502\n## [1] 19504\n## [1] 19506\n## [1] 19508\n## [1] 19510\n## [1] 19512\n## [1] 19514\n## [1] 19516\n## [1] 19518\n## [1] 19520\n## [1] 19522\n## [1] 19524\n## [1] 19526\n## [1] 19528\n## [1] 19530\n## [1] 19532\n## [1] 19534\n## [1] 19536\n## [1] 19538\n## [1] 19540\n## [1] 19542\n## [1] 19544\n## [1] 19546\n## [1] 19548\n## [1] 19550\n## [1] 19552\n## [1] 19554\n## [1] 19556\n## [1] 19558\n## [1] 19560\n## [1] 19562\n## [1] 19564\n## [1] 19566\n## [1] 19568\n## [1] 19570\n## [1] 19572\n## [1] 19574\n## [1] 19576\n## [1] 19578\n## [1] 19580\n## [1] 19582\n## [1] 19584\n## [1] 19586\n## [1] 19588\n## [1] 19590\n## [1] 19592\n## [1] 19594\n## [1] 19596\n## [1] 19598\n## [1] 19600\n## [1] 19602\n## [1] 19604\n## [1] 19606\n## [1] 19608\n## [1] 19610\n## [1] 19612\n## [1] 19614\n## [1] 19616\n## [1] 19618\n## [1] 19620\n## [1] 19622\n## [1] 19624\n## [1] 19626\n## [1] 19628\n## [1] 19630\n## [1] 19632\n## [1] 19634\n## [1] 19636\n## [1] 19638\n## [1] 19640\n## [1] 19642\n## [1] 19644\n## [1] 19646\n## [1] 19648\n## [1] 19650\n## [1] 19652\n## [1] 19654\n## [1] 19656\n## [1] 19658\n## [1] 19660\n## [1] 19662\n## [1] 19664\n## [1] 19666\n## [1] 19668\n## [1] 19670\n## [1] 19672\n## [1] 19674\n## [1] 19676\n## [1] 19678\n## [1] 19680\n## [1] 19682\n## [1] 19684\n## [1] 19686\n## [1] 19688\n## [1] 19690\n## [1] 19692\n## [1] 19694\n## [1] 19696\n## [1] 19698\n## [1] 19700\n## [1] 19702\n## [1] 19704\n## [1] 19706\n## [1] 19708\n## [1] 19710\n## [1] 19712\n## [1] 19714\n## [1] 19716\n## [1] 19718\n## [1] 19720\n## [1] 19722\n## [1] 19724\n## [1] 19726\n## [1] 19728\n## [1] 19730\n## [1] 19732\n## [1] 19734\n## [1] 19736\n## [1] 19738\n## [1] 19740\n## [1] 19742\n## [1] 19744\n## [1] 19746\n## [1] 19748\n## [1] 19750\n## [1] 19752\n## [1] 19754\n## [1] 19756\n## [1] 19758\n## [1] 19760\n## [1] 19762\n## [1] 19764\n## [1] 19766\n## [1] 19768\n## [1] 19770\n## [1] 19772\n## [1] 19774\n## [1] 19776\n## [1] 19778\n## [1] 19780\n## [1] 19782\n## [1] 19784\n## [1] 19786\n## [1] 19788\n## [1] 19790\n## [1] 19792\n## [1] 19794\n## [1] 19796\n## [1] 19798\n## [1] 19800\n## [1] 19802\n## [1] 19804\n## [1] 19806\n## [1] 19808\n## [1] 19810\n## [1] 19812\n## [1] 19814\n## [1] 19816\n## [1] 19818\n## [1] 19820\n## [1] 19822\n## [1] 19824\n## [1] 19826\n## [1] 19828\n## [1] 19830\n## [1] 19832\n## [1] 19834\n## [1] 19836\n## [1] 19838\n## [1] 19840\n## [1] 19842\n## [1] 19844\n## [1] 19846\n## [1] 19848\n## [1] 19850\n## [1] 19852\n## [1] 19854\n## [1] 19856\n## [1] 19858\n## [1] 19860\n## [1] 19862\n## [1] 19864\n## [1] 19866\n## [1] 19868\n## [1] 19870\n## [1] 19872\n## [1] 19874\n## [1] 19876\n## [1] 19878\n## [1] 19880\n## [1] 19882\n## [1] 19884\n## [1] 19886\n## [1] 19888\n## [1] 19890\n## [1] 19892\n## [1] 19894\n## [1] 19896\n## [1] 19898\n## [1] 19900\n## [1] 19902\n## [1] 19904\n## [1] 19906\n## [1] 19908\n## [1] 19910\n## [1] 19912\n## [1] 19914\n## [1] 19916\n## [1] 19918\n## [1] 19920\n## [1] 19922\n## [1] 19924\n## [1] 19926\n## [1] 19928\n## [1] 19930\n## [1] 19932\n## [1] 19934\n## [1] 19936\n## [1] 19938\n## [1] 19940\n## [1] 19942\n## [1] 19944\n## [1] 19946\n## [1] 19948\n## [1] 19950\n## [1] 19952\n## [1] 19954\n## [1] 19956\n## [1] 19958\n## [1] 19960\n## [1] 19962\n## [1] 19964\n## [1] 19966\n## [1] 19968\n## [1] 19970\n## [1] 19972\n## [1] 19974\n## [1] 19976\n## [1] 19978\n## [1] 19980\n## [1] 19982\n## [1] 19984\n## [1] 19986\n## [1] 19988\n## [1] 19990\n## [1] 19992\n## [1] 19994\n## [1] 19996\n## [1] 19998\n## [1] 20000\n\nfor (i in 1:10000) {\n    a &lt;- i * 2 / 1521 + 10000\n    print(a)\n}\n## [1] 10000\n## [1] 10000\n## [1] 10000\n## [1] 10000.01\n## [1] 10000.01\n## [1] 10000.01\n## [1] 10000.01\n## [1] 10000.01\n## [1] 10000.01\n## [1] 10000.01\n## [1] 10000.01\n## [1] 10000.02\n## [1] 10000.02\n## [1] 10000.02\n## [1] 10000.02\n## [1] 10000.02\n## [1] 10000.02\n## [1] 10000.02\n## [1] 10000.02\n## [1] 10000.03\n## [1] 10000.03\n## [1] 10000.03\n## [1] 10000.03\n## [1] 10000.03\n## [1] 10000.03\n## [1] 10000.03\n## [1] 10000.04\n## [1] 10000.04\n## [1] 10000.04\n## [1] 10000.04\n## [1] 10000.04\n## [1] 10000.04\n## [1] 10000.04\n## [1] 10000.04\n## [1] 10000.05\n## [1] 10000.05\n## [1] 10000.05\n## [1] 10000.05\n## [1] 10000.05\n## [1] 10000.05\n## [1] 10000.05\n## [1] 10000.06\n## [1] 10000.06\n## [1] 10000.06\n## [1] 10000.06\n## [1] 10000.06\n## [1] 10000.06\n## [1] 10000.06\n## [1] 10000.06\n## [1] 10000.07\n## [1] 10000.07\n## [1] 10000.07\n## [1] 10000.07\n## [1] 10000.07\n## [1] 10000.07\n## [1] 10000.07\n## [1] 10000.07\n## [1] 10000.08\n## [1] 10000.08\n## [1] 10000.08\n## [1] 10000.08\n## [1] 10000.08\n## [1] 10000.08\n## [1] 10000.08\n## [1] 10000.09\n## [1] 10000.09\n## [1] 10000.09\n## [1] 10000.09\n## [1] 10000.09\n## [1] 10000.09\n## [1] 10000.09\n## [1] 10000.09\n## [1] 10000.1\n## [1] 10000.1\n## [1] 10000.1\n## [1] 10000.1\n## [1] 10000.1\n## [1] 10000.1\n## [1] 10000.1\n## [1] 10000.11\n## [1] 10000.11\n## [1] 10000.11\n## [1] 10000.11\n## [1] 10000.11\n## [1] 10000.11\n## [1] 10000.11\n## [1] 10000.11\n## [1] 10000.12\n## [1] 10000.12\n## [1] 10000.12\n## [1] 10000.12\n## [1] 10000.12\n## [1] 10000.12\n## [1] 10000.12\n## [1] 10000.12\n## [1] 10000.13\n## [1] 10000.13\n## [1] 10000.13\n## [1] 10000.13\n## [1] 10000.13\n## [1] 10000.13\n## [1] 10000.13\n## [1] 10000.14\n## [1] 10000.14\n## [1] 10000.14\n## [1] 10000.14\n## [1] 10000.14\n## [1] 10000.14\n## [1] 10000.14\n## [1] 10000.14\n## [1] 10000.15\n## [1] 10000.15\n## [1] 10000.15\n## [1] 10000.15\n## [1] 10000.15\n## [1] 10000.15\n## [1] 10000.15\n## [1] 10000.16\n## [1] 10000.16\n## [1] 10000.16\n## [1] 10000.16\n## [1] 10000.16\n## [1] 10000.16\n## [1] 10000.16\n## [1] 10000.16\n## [1] 10000.17\n## [1] 10000.17\n## [1] 10000.17\n## [1] 10000.17\n## [1] 10000.17\n## [1] 10000.17\n## [1] 10000.17\n## [1] 10000.17\n## [1] 10000.18\n## [1] 10000.18\n## [1] 10000.18\n## [1] 10000.18\n## [1] 10000.18\n## [1] 10000.18\n## [1] 10000.18\n## [1] 10000.19\n## [1] 10000.19\n## [1] 10000.19\n## [1] 10000.19\n## [1] 10000.19\n## [1] 10000.19\n## [1] 10000.19\n## [1] 10000.19\n## [1] 10000.2\n## [1] 10000.2\n## [1] 10000.2\n## [1] 10000.2\n## [1] 10000.2\n## [1] 10000.2\n## [1] 10000.2\n## [1] 10000.21\n## [1] 10000.21\n## [1] 10000.21\n## [1] 10000.21\n## [1] 10000.21\n## [1] 10000.21\n## [1] 10000.21\n## [1] 10000.21\n## [1] 10000.22\n## [1] 10000.22\n## [1] 10000.22\n## [1] 10000.22\n## [1] 10000.22\n## [1] 10000.22\n## [1] 10000.22\n## [1] 10000.22\n## [1] 10000.23\n## [1] 10000.23\n## [1] 10000.23\n## [1] 10000.23\n## [1] 10000.23\n## [1] 10000.23\n## [1] 10000.23\n## [1] 10000.24\n## [1] 10000.24\n## [1] 10000.24\n## [1] 10000.24\n## [1] 10000.24\n## [1] 10000.24\n## [1] 10000.24\n## [1] 10000.24\n## [1] 10000.25\n## [1] 10000.25\n## [1] 10000.25\n## [1] 10000.25\n## [1] 10000.25\n## [1] 10000.25\n## [1] 10000.25\n## [1] 10000.26\n## [1] 10000.26\n## [1] 10000.26\n## [1] 10000.26\n## [1] 10000.26\n## [1] 10000.26\n## [1] 10000.26\n## [1] 10000.26\n## [1] 10000.27\n## [1] 10000.27\n## [1] 10000.27\n## [1] 10000.27\n## [1] 10000.27\n## [1] 10000.27\n## [1] 10000.27\n## [1] 10000.27\n## [1] 10000.28\n## [1] 10000.28\n## [1] 10000.28\n## [1] 10000.28\n## [1] 10000.28\n## [1] 10000.28\n## [1] 10000.28\n## [1] 10000.29\n## [1] 10000.29\n## [1] 10000.29\n## [1] 10000.29\n## [1] 10000.29\n## [1] 10000.29\n## [1] 10000.29\n## [1] 10000.29\n## [1] 10000.3\n## [1] 10000.3\n## [1] 10000.3\n## [1] 10000.3\n## [1] 10000.3\n## [1] 10000.3\n## [1] 10000.3\n## [1] 10000.31\n## [1] 10000.31\n## [1] 10000.31\n## [1] 10000.31\n## [1] 10000.31\n## [1] 10000.31\n## [1] 10000.31\n## [1] 10000.31\n## [1] 10000.32\n## [1] 10000.32\n## [1] 10000.32\n## [1] 10000.32\n## [1] 10000.32\n## [1] 10000.32\n## [1] 10000.32\n## [1] 10000.32\n## [1] 10000.33\n## [1] 10000.33\n## [1] 10000.33\n## [1] 10000.33\n## [1] 10000.33\n## [1] 10000.33\n## [1] 10000.33\n## [1] 10000.34\n## [1] 10000.34\n## [1] 10000.34\n## [1] 10000.34\n## [1] 10000.34\n## [1] 10000.34\n## [1] 10000.34\n## [1] 10000.34\n## [1] 10000.35\n## [1] 10000.35\n## [1] 10000.35\n## [1] 10000.35\n## [1] 10000.35\n## [1] 10000.35\n## [1] 10000.35\n## [1] 10000.36\n## [1] 10000.36\n## [1] 10000.36\n## [1] 10000.36\n## [1] 10000.36\n## [1] 10000.36\n## [1] 10000.36\n## [1] 10000.36\n## [1] 10000.37\n## [1] 10000.37\n## [1] 10000.37\n## [1] 10000.37\n## [1] 10000.37\n## [1] 10000.37\n## [1] 10000.37\n## [1] 10000.37\n## [1] 10000.38\n## [1] 10000.38\n## [1] 10000.38\n## [1] 10000.38\n## [1] 10000.38\n## [1] 10000.38\n## [1] 10000.38\n## [1] 10000.39\n## [1] 10000.39\n## [1] 10000.39\n## [1] 10000.39\n## [1] 10000.39\n## [1] 10000.39\n## [1] 10000.39\n## [1] 10000.39\n## [1] 10000.4\n## [1] 10000.4\n## [1] 10000.4\n## [1] 10000.4\n## [1] 10000.4\n## [1] 10000.4\n## [1] 10000.4\n## [1] 10000.4\n## [1] 10000.41\n## [1] 10000.41\n## [1] 10000.41\n## [1] 10000.41\n## [1] 10000.41\n## [1] 10000.41\n## [1] 10000.41\n## [1] 10000.42\n## [1] 10000.42\n## [1] 10000.42\n## [1] 10000.42\n## [1] 10000.42\n## [1] 10000.42\n## [1] 10000.42\n## [1] 10000.42\n## [1] 10000.43\n## [1] 10000.43\n## [1] 10000.43\n## [1] 10000.43\n## [1] 10000.43\n## [1] 10000.43\n## [1] 10000.43\n## [1] 10000.44\n## [1] 10000.44\n## [1] 10000.44\n## [1] 10000.44\n## [1] 10000.44\n## [1] 10000.44\n## [1] 10000.44\n## [1] 10000.44\n## [1] 10000.45\n## [1] 10000.45\n## [1] 10000.45\n## [1] 10000.45\n## [1] 10000.45\n## [1] 10000.45\n## [1] 10000.45\n## [1] 10000.45\n## [1] 10000.46\n## [1] 10000.46\n## [1] 10000.46\n## [1] 10000.46\n## [1] 10000.46\n## [1] 10000.46\n## [1] 10000.46\n## [1] 10000.47\n## [1] 10000.47\n## [1] 10000.47\n## [1] 10000.47\n## [1] 10000.47\n## [1] 10000.47\n## [1] 10000.47\n## [1] 10000.47\n## [1] 10000.48\n## [1] 10000.48\n## [1] 10000.48\n## [1] 10000.48\n## [1] 10000.48\n## [1] 10000.48\n## [1] 10000.48\n## [1] 10000.49\n## [1] 10000.49\n## [1] 10000.49\n## [1] 10000.49\n## [1] 10000.49\n## [1] 10000.49\n## [1] 10000.49\n## [1] 10000.49\n## [1] 10000.5\n## [1] 10000.5\n## [1] 10000.5\n## [1] 10000.5\n## [1] 10000.5\n## [1] 10000.5\n## [1] 10000.5\n## [1] 10000.5\n## [1] 10000.51\n## [1] 10000.51\n## [1] 10000.51\n## [1] 10000.51\n## [1] 10000.51\n## [1] 10000.51\n## [1] 10000.51\n## [1] 10000.52\n## [1] 10000.52\n## [1] 10000.52\n## [1] 10000.52\n## [1] 10000.52\n## [1] 10000.52\n## [1] 10000.52\n## [1] 10000.52\n## [1] 10000.53\n## [1] 10000.53\n## [1] 10000.53\n## [1] 10000.53\n## [1] 10000.53\n## [1] 10000.53\n## [1] 10000.53\n## [1] 10000.54\n## [1] 10000.54\n## [1] 10000.54\n## [1] 10000.54\n## [1] 10000.54\n## [1] 10000.54\n## [1] 10000.54\n## [1] 10000.54\n## [1] 10000.55\n## [1] 10000.55\n## [1] 10000.55\n## [1] 10000.55\n## [1] 10000.55\n## [1] 10000.55\n## [1] 10000.55\n## [1] 10000.55\n## [1] 10000.56\n## [1] 10000.56\n## [1] 10000.56\n## [1] 10000.56\n## [1] 10000.56\n## [1] 10000.56\n## [1] 10000.56\n## [1] 10000.57\n## [1] 10000.57\n## [1] 10000.57\n## [1] 10000.57\n## [1] 10000.57\n## [1] 10000.57\n## [1] 10000.57\n## [1] 10000.57\n## [1] 10000.58\n## [1] 10000.58\n## [1] 10000.58\n## [1] 10000.58\n## [1] 10000.58\n## [1] 10000.58\n## [1] 10000.58\n## [1] 10000.59\n## [1] 10000.59\n## [1] 10000.59\n## [1] 10000.59\n## [1] 10000.59\n## [1] 10000.59\n## [1] 10000.59\n## [1] 10000.59\n## [1] 10000.6\n## [1] 10000.6\n## [1] 10000.6\n## [1] 10000.6\n## [1] 10000.6\n## [1] 10000.6\n## [1] 10000.6\n## [1] 10000.6\n## [1] 10000.61\n## [1] 10000.61\n## [1] 10000.61\n## [1] 10000.61\n## [1] 10000.61\n## [1] 10000.61\n## [1] 10000.61\n## [1] 10000.62\n## [1] 10000.62\n## [1] 10000.62\n## [1] 10000.62\n## [1] 10000.62\n## [1] 10000.62\n## [1] 10000.62\n## [1] 10000.62\n## [1] 10000.63\n## [1] 10000.63\n## [1] 10000.63\n## [1] 10000.63\n## [1] 10000.63\n## [1] 10000.63\n## [1] 10000.63\n## [1] 10000.64\n## [1] 10000.64\n## [1] 10000.64\n## [1] 10000.64\n## [1] 10000.64\n## [1] 10000.64\n## [1] 10000.64\n## [1] 10000.64\n## [1] 10000.65\n## [1] 10000.65\n## [1] 10000.65\n## [1] 10000.65\n## [1] 10000.65\n## [1] 10000.65\n## [1] 10000.65\n## [1] 10000.65\n## [1] 10000.66\n## [1] 10000.66\n## [1] 10000.66\n## [1] 10000.66\n## [1] 10000.66\n## [1] 10000.66\n## [1] 10000.66\n## [1] 10000.67\n## [1] 10000.67\n## [1] 10000.67\n## [1] 10000.67\n## [1] 10000.67\n## [1] 10000.67\n## [1] 10000.67\n## [1] 10000.67\n## [1] 10000.68\n## [1] 10000.68\n## [1] 10000.68\n## [1] 10000.68\n## [1] 10000.68\n## [1] 10000.68\n## [1] 10000.68\n## [1] 10000.69\n## [1] 10000.69\n## [1] 10000.69\n## [1] 10000.69\n## [1] 10000.69\n## [1] 10000.69\n## [1] 10000.69\n## [1] 10000.69\n## [1] 10000.7\n## [1] 10000.7\n## [1] 10000.7\n## [1] 10000.7\n## [1] 10000.7\n## [1] 10000.7\n## [1] 10000.7\n## [1] 10000.7\n## [1] 10000.71\n## [1] 10000.71\n## [1] 10000.71\n## [1] 10000.71\n## [1] 10000.71\n## [1] 10000.71\n## [1] 10000.71\n## [1] 10000.72\n## [1] 10000.72\n## [1] 10000.72\n## [1] 10000.72\n## [1] 10000.72\n## [1] 10000.72\n## [1] 10000.72\n## [1] 10000.72\n## [1] 10000.73\n## [1] 10000.73\n## [1] 10000.73\n## [1] 10000.73\n## [1] 10000.73\n## [1] 10000.73\n## [1] 10000.73\n## [1] 10000.74\n## [1] 10000.74\n## [1] 10000.74\n## [1] 10000.74\n## [1] 10000.74\n## [1] 10000.74\n## [1] 10000.74\n## [1] 10000.74\n## [1] 10000.75\n## [1] 10000.75\n## [1] 10000.75\n## [1] 10000.75\n## [1] 10000.75\n## [1] 10000.75\n## [1] 10000.75\n## [1] 10000.75\n## [1] 10000.76\n## [1] 10000.76\n## [1] 10000.76\n## [1] 10000.76\n## [1] 10000.76\n## [1] 10000.76\n## [1] 10000.76\n## [1] 10000.77\n## [1] 10000.77\n## [1] 10000.77\n## [1] 10000.77\n## [1] 10000.77\n## [1] 10000.77\n## [1] 10000.77\n## [1] 10000.77\n## [1] 10000.78\n## [1] 10000.78\n## [1] 10000.78\n## [1] 10000.78\n## [1] 10000.78\n## [1] 10000.78\n## [1] 10000.78\n## [1] 10000.79\n## [1] 10000.79\n## [1] 10000.79\n## [1] 10000.79\n## [1] 10000.79\n## [1] 10000.79\n## [1] 10000.79\n## [1] 10000.79\n## [1] 10000.8\n## [1] 10000.8\n## [1] 10000.8\n## [1] 10000.8\n## [1] 10000.8\n## [1] 10000.8\n## [1] 10000.8\n## [1] 10000.8\n## [1] 10000.81\n## [1] 10000.81\n## [1] 10000.81\n## [1] 10000.81\n## [1] 10000.81\n## [1] 10000.81\n## [1] 10000.81\n## [1] 10000.82\n## [1] 10000.82\n## [1] 10000.82\n## [1] 10000.82\n## [1] 10000.82\n## [1] 10000.82\n## [1] 10000.82\n## [1] 10000.82\n## [1] 10000.83\n## [1] 10000.83\n## [1] 10000.83\n## [1] 10000.83\n## [1] 10000.83\n## [1] 10000.83\n## [1] 10000.83\n## [1] 10000.83\n## [1] 10000.84\n## [1] 10000.84\n## [1] 10000.84\n## [1] 10000.84\n## [1] 10000.84\n## [1] 10000.84\n## [1] 10000.84\n## [1] 10000.85\n## [1] 10000.85\n## [1] 10000.85\n## [1] 10000.85\n## [1] 10000.85\n## [1] 10000.85\n## [1] 10000.85\n## [1] 10000.85\n## [1] 10000.86\n## [1] 10000.86\n## [1] 10000.86\n## [1] 10000.86\n## [1] 10000.86\n## [1] 10000.86\n## [1] 10000.86\n## [1] 10000.87\n## [1] 10000.87\n## [1] 10000.87\n## [1] 10000.87\n## [1] 10000.87\n## [1] 10000.87\n## [1] 10000.87\n## [1] 10000.87\n## [1] 10000.88\n## [1] 10000.88\n## [1] 10000.88\n## [1] 10000.88\n## [1] 10000.88\n## [1] 10000.88\n## [1] 10000.88\n## [1] 10000.88\n## [1] 10000.89\n## [1] 10000.89\n## [1] 10000.89\n## [1] 10000.89\n## [1] 10000.89\n## [1] 10000.89\n## [1] 10000.89\n## [1] 10000.9\n## [1] 10000.9\n## [1] 10000.9\n## [1] 10000.9\n## [1] 10000.9\n## [1] 10000.9\n## [1] 10000.9\n## [1] 10000.9\n## [1] 10000.91\n## [1] 10000.91\n## [1] 10000.91\n## [1] 10000.91\n## [1] 10000.91\n## [1] 10000.91\n## [1] 10000.91\n## [1] 10000.92\n## [1] 10000.92\n## [1] 10000.92\n## [1] 10000.92\n## [1] 10000.92\n## [1] 10000.92\n## [1] 10000.92\n## [1] 10000.92\n## [1] 10000.93\n## [1] 10000.93\n## [1] 10000.93\n## [1] 10000.93\n## [1] 10000.93\n## [1] 10000.93\n## [1] 10000.93\n## [1] 10000.93\n## [1] 10000.94\n## [1] 10000.94\n## [1] 10000.94\n## [1] 10000.94\n## [1] 10000.94\n## [1] 10000.94\n## [1] 10000.94\n## [1] 10000.95\n## [1] 10000.95\n## [1] 10000.95\n## [1] 10000.95\n## [1] 10000.95\n## [1] 10000.95\n## [1] 10000.95\n## [1] 10000.95\n## [1] 10000.96\n## [1] 10000.96\n## [1] 10000.96\n## [1] 10000.96\n## [1] 10000.96\n## [1] 10000.96\n## [1] 10000.96\n## [1] 10000.97\n## [1] 10000.97\n## [1] 10000.97\n## [1] 10000.97\n## [1] 10000.97\n## [1] 10000.97\n## [1] 10000.97\n## [1] 10000.97\n## [1] 10000.98\n## [1] 10000.98\n## [1] 10000.98\n## [1] 10000.98\n## [1] 10000.98\n## [1] 10000.98\n## [1] 10000.98\n## [1] 10000.98\n## [1] 10000.99\n## [1] 10000.99\n## [1] 10000.99\n## [1] 10000.99\n## [1] 10000.99\n## [1] 10000.99\n## [1] 10000.99\n## [1] 10001\n## [1] 10001\n## [1] 10001\n## [1] 10001\n## [1] 10001\n## [1] 10001\n## [1] 10001\n## [1] 10001\n## [1] 10001.01\n## [1] 10001.01\n## [1] 10001.01\n## [1] 10001.01\n## [1] 10001.01\n## [1] 10001.01\n## [1] 10001.01\n## [1] 10001.02\n## [1] 10001.02\n## [1] 10001.02\n## [1] 10001.02\n## [1] 10001.02\n## [1] 10001.02\n## [1] 10001.02\n## [1] 10001.02\n## [1] 10001.03\n## [1] 10001.03\n## [1] 10001.03\n## [1] 10001.03\n## [1] 10001.03\n## [1] 10001.03\n## [1] 10001.03\n## [1] 10001.03\n## [1] 10001.04\n## [1] 10001.04\n## [1] 10001.04\n## [1] 10001.04\n## [1] 10001.04\n## [1] 10001.04\n## [1] 10001.04\n## [1] 10001.05\n## [1] 10001.05\n## [1] 10001.05\n## [1] 10001.05\n## [1] 10001.05\n## [1] 10001.05\n## [1] 10001.05\n## [1] 10001.05\n## [1] 10001.06\n## [1] 10001.06\n## [1] 10001.06\n## [1] 10001.06\n## [1] 10001.06\n## [1] 10001.06\n## [1] 10001.06\n## [1] 10001.07\n## [1] 10001.07\n## [1] 10001.07\n## [1] 10001.07\n## [1] 10001.07\n## [1] 10001.07\n## [1] 10001.07\n## [1] 10001.07\n## [1] 10001.08\n## [1] 10001.08\n## [1] 10001.08\n## [1] 10001.08\n## [1] 10001.08\n## [1] 10001.08\n## [1] 10001.08\n## [1] 10001.08\n## [1] 10001.09\n## [1] 10001.09\n## [1] 10001.09\n## [1] 10001.09\n## [1] 10001.09\n## [1] 10001.09\n## [1] 10001.09\n## [1] 10001.1\n## [1] 10001.1\n## [1] 10001.1\n## [1] 10001.1\n## [1] 10001.1\n## [1] 10001.1\n## [1] 10001.1\n## [1] 10001.1\n## [1] 10001.11\n## [1] 10001.11\n## [1] 10001.11\n## [1] 10001.11\n## [1] 10001.11\n## [1] 10001.11\n## [1] 10001.11\n## [1] 10001.12\n## [1] 10001.12\n## [1] 10001.12\n## [1] 10001.12\n## [1] 10001.12\n## [1] 10001.12\n## [1] 10001.12\n## [1] 10001.12\n## [1] 10001.13\n## [1] 10001.13\n## [1] 10001.13\n## [1] 10001.13\n## [1] 10001.13\n## [1] 10001.13\n## [1] 10001.13\n## [1] 10001.13\n## [1] 10001.14\n## [1] 10001.14\n## [1] 10001.14\n## [1] 10001.14\n## [1] 10001.14\n## [1] 10001.14\n## [1] 10001.14\n## [1] 10001.15\n## [1] 10001.15\n## [1] 10001.15\n## [1] 10001.15\n## [1] 10001.15\n## [1] 10001.15\n## [1] 10001.15\n## [1] 10001.15\n## [1] 10001.16\n## [1] 10001.16\n## [1] 10001.16\n## [1] 10001.16\n## [1] 10001.16\n## [1] 10001.16\n## [1] 10001.16\n## [1] 10001.17\n## [1] 10001.17\n## [1] 10001.17\n## [1] 10001.17\n## [1] 10001.17\n## [1] 10001.17\n## [1] 10001.17\n## [1] 10001.17\n## [1] 10001.18\n## [1] 10001.18\n## [1] 10001.18\n## [1] 10001.18\n## [1] 10001.18\n## [1] 10001.18\n## [1] 10001.18\n## [1] 10001.18\n## [1] 10001.19\n## [1] 10001.19\n## [1] 10001.19\n## [1] 10001.19\n## [1] 10001.19\n## [1] 10001.19\n## [1] 10001.19\n## [1] 10001.2\n## [1] 10001.2\n## [1] 10001.2\n## [1] 10001.2\n## [1] 10001.2\n## [1] 10001.2\n## [1] 10001.2\n## [1] 10001.2\n## [1] 10001.21\n## [1] 10001.21\n## [1] 10001.21\n## [1] 10001.21\n## [1] 10001.21\n## [1] 10001.21\n## [1] 10001.21\n## [1] 10001.21\n## [1] 10001.22\n## [1] 10001.22\n## [1] 10001.22\n## [1] 10001.22\n## [1] 10001.22\n## [1] 10001.22\n## [1] 10001.22\n## [1] 10001.23\n## [1] 10001.23\n## [1] 10001.23\n## [1] 10001.23\n## [1] 10001.23\n## [1] 10001.23\n## [1] 10001.23\n## [1] 10001.23\n## [1] 10001.24\n## [1] 10001.24\n## [1] 10001.24\n## [1] 10001.24\n## [1] 10001.24\n## [1] 10001.24\n## [1] 10001.24\n## [1] 10001.25\n## [1] 10001.25\n## [1] 10001.25\n## [1] 10001.25\n## [1] 10001.25\n## [1] 10001.25\n## [1] 10001.25\n## [1] 10001.25\n## [1] 10001.26\n## [1] 10001.26\n## [1] 10001.26\n## [1] 10001.26\n## [1] 10001.26\n## [1] 10001.26\n## [1] 10001.26\n## [1] 10001.26\n## [1] 10001.27\n## [1] 10001.27\n## [1] 10001.27\n## [1] 10001.27\n## [1] 10001.27\n## [1] 10001.27\n## [1] 10001.27\n## [1] 10001.28\n## [1] 10001.28\n## [1] 10001.28\n## [1] 10001.28\n## [1] 10001.28\n## [1] 10001.28\n## [1] 10001.28\n## [1] 10001.28\n## [1] 10001.29\n## [1] 10001.29\n## [1] 10001.29\n## [1] 10001.29\n## [1] 10001.29\n## [1] 10001.29\n## [1] 10001.29\n## [1] 10001.3\n## [1] 10001.3\n## [1] 10001.3\n## [1] 10001.3\n## [1] 10001.3\n## [1] 10001.3\n## [1] 10001.3\n## [1] 10001.3\n## [1] 10001.31\n## [1] 10001.31\n## [1] 10001.31\n## [1] 10001.31\n## [1] 10001.31\n## [1] 10001.31\n## [1] 10001.31\n## [1] 10001.31\n## [1] 10001.32\n## [1] 10001.32\n## [1] 10001.32\n## [1] 10001.32\n## [1] 10001.32\n## [1] 10001.32\n## [1] 10001.32\n## [1] 10001.33\n## [1] 10001.33\n## [1] 10001.33\n## [1] 10001.33\n## [1] 10001.33\n## [1] 10001.33\n## [1] 10001.33\n## [1] 10001.33\n## [1] 10001.34\n## [1] 10001.34\n## [1] 10001.34\n## [1] 10001.34\n## [1] 10001.34\n## [1] 10001.34\n## [1] 10001.34\n## [1] 10001.35\n## [1] 10001.35\n## [1] 10001.35\n## [1] 10001.35\n## [1] 10001.35\n## [1] 10001.35\n## [1] 10001.35\n## [1] 10001.35\n## [1] 10001.36\n## [1] 10001.36\n## [1] 10001.36\n## [1] 10001.36\n## [1] 10001.36\n## [1] 10001.36\n## [1] 10001.36\n## [1] 10001.36\n## [1] 10001.37\n## [1] 10001.37\n## [1] 10001.37\n## [1] 10001.37\n## [1] 10001.37\n## [1] 10001.37\n## [1] 10001.37\n## [1] 10001.38\n## [1] 10001.38\n## [1] 10001.38\n## [1] 10001.38\n## [1] 10001.38\n## [1] 10001.38\n## [1] 10001.38\n## [1] 10001.38\n## [1] 10001.39\n## [1] 10001.39\n## [1] 10001.39\n## [1] 10001.39\n## [1] 10001.39\n## [1] 10001.39\n## [1] 10001.39\n## [1] 10001.4\n## [1] 10001.4\n## [1] 10001.4\n## [1] 10001.4\n## [1] 10001.4\n## [1] 10001.4\n## [1] 10001.4\n## [1] 10001.4\n## [1] 10001.41\n## [1] 10001.41\n## [1] 10001.41\n## [1] 10001.41\n## [1] 10001.41\n## [1] 10001.41\n## [1] 10001.41\n## [1] 10001.41\n## [1] 10001.42\n## [1] 10001.42\n## [1] 10001.42\n## [1] 10001.42\n## [1] 10001.42\n## [1] 10001.42\n## [1] 10001.42\n## [1] 10001.43\n## [1] 10001.43\n## [1] 10001.43\n## [1] 10001.43\n## [1] 10001.43\n## [1] 10001.43\n## [1] 10001.43\n## [1] 10001.43\n## [1] 10001.44\n## [1] 10001.44\n## [1] 10001.44\n## [1] 10001.44\n## [1] 10001.44\n## [1] 10001.44\n## [1] 10001.44\n## [1] 10001.45\n## [1] 10001.45\n## [1] 10001.45\n## [1] 10001.45\n## [1] 10001.45\n## [1] 10001.45\n## [1] 10001.45\n## [1] 10001.45\n## [1] 10001.46\n## [1] 10001.46\n## [1] 10001.46\n## [1] 10001.46\n## [1] 10001.46\n## [1] 10001.46\n## [1] 10001.46\n## [1] 10001.46\n## [1] 10001.47\n## [1] 10001.47\n## [1] 10001.47\n## [1] 10001.47\n## [1] 10001.47\n## [1] 10001.47\n## [1] 10001.47\n## [1] 10001.48\n## [1] 10001.48\n## [1] 10001.48\n## [1] 10001.48\n## [1] 10001.48\n## [1] 10001.48\n## [1] 10001.48\n## [1] 10001.48\n## [1] 10001.49\n## [1] 10001.49\n## [1] 10001.49\n## [1] 10001.49\n## [1] 10001.49\n## [1] 10001.49\n## [1] 10001.49\n## [1] 10001.5\n## [1] 10001.5\n## [1] 10001.5\n## [1] 10001.5\n## [1] 10001.5\n## [1] 10001.5\n## [1] 10001.5\n## [1] 10001.5\n## [1] 10001.51\n## [1] 10001.51\n## [1] 10001.51\n## [1] 10001.51\n## [1] 10001.51\n## [1] 10001.51\n## [1] 10001.51\n## [1] 10001.51\n## [1] 10001.52\n## [1] 10001.52\n## [1] 10001.52\n## [1] 10001.52\n## [1] 10001.52\n## [1] 10001.52\n## [1] 10001.52\n## [1] 10001.53\n## [1] 10001.53\n## [1] 10001.53\n## [1] 10001.53\n## [1] 10001.53\n## [1] 10001.53\n## [1] 10001.53\n## [1] 10001.53\n## [1] 10001.54\n## [1] 10001.54\n## [1] 10001.54\n## [1] 10001.54\n## [1] 10001.54\n## [1] 10001.54\n## [1] 10001.54\n## [1] 10001.55\n## [1] 10001.55\n## [1] 10001.55\n## [1] 10001.55\n## [1] 10001.55\n## [1] 10001.55\n## [1] 10001.55\n## [1] 10001.55\n## [1] 10001.56\n## [1] 10001.56\n## [1] 10001.56\n## [1] 10001.56\n## [1] 10001.56\n## [1] 10001.56\n## [1] 10001.56\n## [1] 10001.56\n## [1] 10001.57\n## [1] 10001.57\n## [1] 10001.57\n## [1] 10001.57\n## [1] 10001.57\n## [1] 10001.57\n## [1] 10001.57\n## [1] 10001.58\n## [1] 10001.58\n## [1] 10001.58\n## [1] 10001.58\n## [1] 10001.58\n## [1] 10001.58\n## [1] 10001.58\n## [1] 10001.58\n## [1] 10001.59\n## [1] 10001.59\n## [1] 10001.59\n## [1] 10001.59\n## [1] 10001.59\n## [1] 10001.59\n## [1] 10001.59\n## [1] 10001.6\n## [1] 10001.6\n## [1] 10001.6\n## [1] 10001.6\n## [1] 10001.6\n## [1] 10001.6\n## [1] 10001.6\n## [1] 10001.6\n## [1] 10001.61\n## [1] 10001.61\n## [1] 10001.61\n## [1] 10001.61\n## [1] 10001.61\n## [1] 10001.61\n## [1] 10001.61\n## [1] 10001.61\n## [1] 10001.62\n## [1] 10001.62\n## [1] 10001.62\n## [1] 10001.62\n## [1] 10001.62\n## [1] 10001.62\n## [1] 10001.62\n## [1] 10001.63\n## [1] 10001.63\n## [1] 10001.63\n## [1] 10001.63\n## [1] 10001.63\n## [1] 10001.63\n## [1] 10001.63\n## [1] 10001.63\n## [1] 10001.64\n## [1] 10001.64\n## [1] 10001.64\n## [1] 10001.64\n## [1] 10001.64\n## [1] 10001.64\n## [1] 10001.64\n## [1] 10001.64\n## [1] 10001.65\n## [1] 10001.65\n## [1] 10001.65\n## [1] 10001.65\n## [1] 10001.65\n## [1] 10001.65\n## [1] 10001.65\n## [1] 10001.66\n## [1] 10001.66\n## [1] 10001.66\n## [1] 10001.66\n## [1] 10001.66\n## [1] 10001.66\n## [1] 10001.66\n## [1] 10001.66\n## [1] 10001.67\n## [1] 10001.67\n## [1] 10001.67\n## [1] 10001.67\n## [1] 10001.67\n## [1] 10001.67\n## [1] 10001.67\n## [1] 10001.68\n## [1] 10001.68\n## [1] 10001.68\n## [1] 10001.68\n## [1] 10001.68\n## [1] 10001.68\n## [1] 10001.68\n## [1] 10001.68\n## [1] 10001.69\n## [1] 10001.69\n## [1] 10001.69\n## [1] 10001.69\n## [1] 10001.69\n## [1] 10001.69\n## [1] 10001.69\n## [1] 10001.69\n## [1] 10001.7\n## [1] 10001.7\n## [1] 10001.7\n## [1] 10001.7\n## [1] 10001.7\n## [1] 10001.7\n## [1] 10001.7\n## [1] 10001.71\n## [1] 10001.71\n## [1] 10001.71\n## [1] 10001.71\n## [1] 10001.71\n## [1] 10001.71\n## [1] 10001.71\n## [1] 10001.71\n## [1] 10001.72\n## [1] 10001.72\n## [1] 10001.72\n## [1] 10001.72\n## [1] 10001.72\n## [1] 10001.72\n## [1] 10001.72\n## [1] 10001.73\n## [1] 10001.73\n## [1] 10001.73\n## [1] 10001.73\n## [1] 10001.73\n## [1] 10001.73\n## [1] 10001.73\n## [1] 10001.73\n## [1] 10001.74\n## [1] 10001.74\n## [1] 10001.74\n## [1] 10001.74\n## [1] 10001.74\n## [1] 10001.74\n## [1] 10001.74\n## [1] 10001.74\n## [1] 10001.75\n## [1] 10001.75\n## [1] 10001.75\n## [1] 10001.75\n## [1] 10001.75\n## [1] 10001.75\n## [1] 10001.75\n## [1] 10001.76\n## [1] 10001.76\n## [1] 10001.76\n## [1] 10001.76\n## [1] 10001.76\n## [1] 10001.76\n## [1] 10001.76\n## [1] 10001.76\n## [1] 10001.77\n## [1] 10001.77\n## [1] 10001.77\n## [1] 10001.77\n## [1] 10001.77\n## [1] 10001.77\n## [1] 10001.77\n## [1] 10001.78\n## [1] 10001.78\n## [1] 10001.78\n## [1] 10001.78\n## [1] 10001.78\n## [1] 10001.78\n## [1] 10001.78\n## [1] 10001.78\n## [1] 10001.79\n## [1] 10001.79\n## [1] 10001.79\n## [1] 10001.79\n## [1] 10001.79\n## [1] 10001.79\n## [1] 10001.79\n## [1] 10001.79\n## [1] 10001.8\n## [1] 10001.8\n## [1] 10001.8\n## [1] 10001.8\n## [1] 10001.8\n## [1] 10001.8\n## [1] 10001.8\n## [1] 10001.81\n## [1] 10001.81\n## [1] 10001.81\n## [1] 10001.81\n## [1] 10001.81\n## [1] 10001.81\n## [1] 10001.81\n## [1] 10001.81\n## [1] 10001.82\n## [1] 10001.82\n## [1] 10001.82\n## [1] 10001.82\n## [1] 10001.82\n## [1] 10001.82\n## [1] 10001.82\n## [1] 10001.83\n## [1] 10001.83\n## [1] 10001.83\n## [1] 10001.83\n## [1] 10001.83\n## [1] 10001.83\n## [1] 10001.83\n## [1] 10001.83\n## [1] 10001.84\n## [1] 10001.84\n## [1] 10001.84\n## [1] 10001.84\n## [1] 10001.84\n## [1] 10001.84\n## [1] 10001.84\n## [1] 10001.84\n## [1] 10001.85\n## [1] 10001.85\n## [1] 10001.85\n## [1] 10001.85\n## [1] 10001.85\n## [1] 10001.85\n## [1] 10001.85\n## [1] 10001.86\n## [1] 10001.86\n## [1] 10001.86\n## [1] 10001.86\n## [1] 10001.86\n## [1] 10001.86\n## [1] 10001.86\n## [1] 10001.86\n## [1] 10001.87\n## [1] 10001.87\n## [1] 10001.87\n## [1] 10001.87\n## [1] 10001.87\n## [1] 10001.87\n## [1] 10001.87\n## [1] 10001.88\n## [1] 10001.88\n## [1] 10001.88\n## [1] 10001.88\n## [1] 10001.88\n## [1] 10001.88\n## [1] 10001.88\n## [1] 10001.88\n## [1] 10001.89\n## [1] 10001.89\n## [1] 10001.89\n## [1] 10001.89\n## [1] 10001.89\n## [1] 10001.89\n## [1] 10001.89\n## [1] 10001.89\n## [1] 10001.9\n## [1] 10001.9\n## [1] 10001.9\n## [1] 10001.9\n## [1] 10001.9\n## [1] 10001.9\n## [1] 10001.9\n## [1] 10001.91\n## [1] 10001.91\n## [1] 10001.91\n## [1] 10001.91\n## [1] 10001.91\n## [1] 10001.91\n## [1] 10001.91\n## [1] 10001.91\n## [1] 10001.92\n## [1] 10001.92\n## [1] 10001.92\n## [1] 10001.92\n## [1] 10001.92\n## [1] 10001.92\n## [1] 10001.92\n## [1] 10001.93\n## [1] 10001.93\n## [1] 10001.93\n## [1] 10001.93\n## [1] 10001.93\n## [1] 10001.93\n## [1] 10001.93\n## [1] 10001.93\n## [1] 10001.94\n## [1] 10001.94\n## [1] 10001.94\n## [1] 10001.94\n## [1] 10001.94\n## [1] 10001.94\n## [1] 10001.94\n## [1] 10001.94\n## [1] 10001.95\n## [1] 10001.95\n## [1] 10001.95\n## [1] 10001.95\n## [1] 10001.95\n## [1] 10001.95\n## [1] 10001.95\n## [1] 10001.96\n## [1] 10001.96\n## [1] 10001.96\n## [1] 10001.96\n## [1] 10001.96\n## [1] 10001.96\n## [1] 10001.96\n## [1] 10001.96\n## [1] 10001.97\n## [1] 10001.97\n## [1] 10001.97\n## [1] 10001.97\n## [1] 10001.97\n## [1] 10001.97\n## [1] 10001.97\n## [1] 10001.98\n## [1] 10001.98\n## [1] 10001.98\n## [1] 10001.98\n## [1] 10001.98\n## [1] 10001.98\n## [1] 10001.98\n## [1] 10001.98\n## [1] 10001.99\n## [1] 10001.99\n## [1] 10001.99\n## [1] 10001.99\n## [1] 10001.99\n## [1] 10001.99\n## [1] 10001.99\n## [1] 10001.99\n## [1] 10002\n## [1] 10002\n## [1] 10002\n## [1] 10002\n## [1] 10002\n## [1] 10002\n## [1] 10002\n## [1] 10002.01\n## [1] 10002.01\n## [1] 10002.01\n## [1] 10002.01\n## [1] 10002.01\n## [1] 10002.01\n## [1] 10002.01\n## [1] 10002.01\n## [1] 10002.02\n## [1] 10002.02\n## [1] 10002.02\n## [1] 10002.02\n## [1] 10002.02\n## [1] 10002.02\n## [1] 10002.02\n## [1] 10002.02\n## [1] 10002.03\n## [1] 10002.03\n## [1] 10002.03\n## [1] 10002.03\n## [1] 10002.03\n## [1] 10002.03\n## [1] 10002.03\n## [1] 10002.04\n## [1] 10002.04\n## [1] 10002.04\n## [1] 10002.04\n## [1] 10002.04\n## [1] 10002.04\n## [1] 10002.04\n## [1] 10002.04\n## [1] 10002.05\n## [1] 10002.05\n## [1] 10002.05\n## [1] 10002.05\n## [1] 10002.05\n## [1] 10002.05\n## [1] 10002.05\n## [1] 10002.06\n## [1] 10002.06\n## [1] 10002.06\n## [1] 10002.06\n## [1] 10002.06\n## [1] 10002.06\n## [1] 10002.06\n## [1] 10002.06\n## [1] 10002.07\n## [1] 10002.07\n## [1] 10002.07\n## [1] 10002.07\n## [1] 10002.07\n## [1] 10002.07\n## [1] 10002.07\n## [1] 10002.07\n## [1] 10002.08\n## [1] 10002.08\n## [1] 10002.08\n## [1] 10002.08\n## [1] 10002.08\n## [1] 10002.08\n## [1] 10002.08\n## [1] 10002.09\n## [1] 10002.09\n## [1] 10002.09\n## [1] 10002.09\n## [1] 10002.09\n## [1] 10002.09\n## [1] 10002.09\n## [1] 10002.09\n## [1] 10002.1\n## [1] 10002.1\n## [1] 10002.1\n## [1] 10002.1\n## [1] 10002.1\n## [1] 10002.1\n## [1] 10002.1\n## [1] 10002.11\n## [1] 10002.11\n## [1] 10002.11\n## [1] 10002.11\n## [1] 10002.11\n## [1] 10002.11\n## [1] 10002.11\n## [1] 10002.11\n## [1] 10002.12\n## [1] 10002.12\n## [1] 10002.12\n## [1] 10002.12\n## [1] 10002.12\n## [1] 10002.12\n## [1] 10002.12\n## [1] 10002.12\n## [1] 10002.13\n## [1] 10002.13\n## [1] 10002.13\n## [1] 10002.13\n## [1] 10002.13\n## [1] 10002.13\n## [1] 10002.13\n## [1] 10002.14\n## [1] 10002.14\n## [1] 10002.14\n## [1] 10002.14\n## [1] 10002.14\n## [1] 10002.14\n## [1] 10002.14\n## [1] 10002.14\n## [1] 10002.15\n## [1] 10002.15\n## [1] 10002.15\n## [1] 10002.15\n## [1] 10002.15\n## [1] 10002.15\n## [1] 10002.15\n## [1] 10002.16\n## [1] 10002.16\n## [1] 10002.16\n## [1] 10002.16\n## [1] 10002.16\n## [1] 10002.16\n## [1] 10002.16\n## [1] 10002.16\n## [1] 10002.17\n## [1] 10002.17\n## [1] 10002.17\n## [1] 10002.17\n## [1] 10002.17\n## [1] 10002.17\n## [1] 10002.17\n## [1] 10002.17\n## [1] 10002.18\n## [1] 10002.18\n## [1] 10002.18\n## [1] 10002.18\n## [1] 10002.18\n## [1] 10002.18\n## [1] 10002.18\n## [1] 10002.19\n## [1] 10002.19\n## [1] 10002.19\n## [1] 10002.19\n## [1] 10002.19\n## [1] 10002.19\n## [1] 10002.19\n## [1] 10002.19\n## [1] 10002.2\n## [1] 10002.2\n## [1] 10002.2\n## [1] 10002.2\n## [1] 10002.2\n## [1] 10002.2\n## [1] 10002.2\n## [1] 10002.21\n## [1] 10002.21\n## [1] 10002.21\n## [1] 10002.21\n## [1] 10002.21\n## [1] 10002.21\n## [1] 10002.21\n## [1] 10002.21\n## [1] 10002.22\n## [1] 10002.22\n## [1] 10002.22\n## [1] 10002.22\n## [1] 10002.22\n## [1] 10002.22\n## [1] 10002.22\n## [1] 10002.22\n## [1] 10002.23\n## [1] 10002.23\n## [1] 10002.23\n## [1] 10002.23\n## [1] 10002.23\n## [1] 10002.23\n## [1] 10002.23\n## [1] 10002.24\n## [1] 10002.24\n## [1] 10002.24\n## [1] 10002.24\n## [1] 10002.24\n## [1] 10002.24\n## [1] 10002.24\n## [1] 10002.24\n## [1] 10002.25\n## [1] 10002.25\n## [1] 10002.25\n## [1] 10002.25\n## [1] 10002.25\n## [1] 10002.25\n## [1] 10002.25\n## [1] 10002.26\n## [1] 10002.26\n## [1] 10002.26\n## [1] 10002.26\n## [1] 10002.26\n## [1] 10002.26\n## [1] 10002.26\n## [1] 10002.26\n## [1] 10002.27\n## [1] 10002.27\n## [1] 10002.27\n## [1] 10002.27\n## [1] 10002.27\n## [1] 10002.27\n## [1] 10002.27\n## [1] 10002.27\n## [1] 10002.28\n## [1] 10002.28\n## [1] 10002.28\n## [1] 10002.28\n## [1] 10002.28\n## [1] 10002.28\n## [1] 10002.28\n## [1] 10002.29\n## [1] 10002.29\n## [1] 10002.29\n## [1] 10002.29\n## [1] 10002.29\n## [1] 10002.29\n## [1] 10002.29\n## [1] 10002.29\n## [1] 10002.3\n## [1] 10002.3\n## [1] 10002.3\n## [1] 10002.3\n## [1] 10002.3\n## [1] 10002.3\n## [1] 10002.3\n## [1] 10002.31\n## [1] 10002.31\n## [1] 10002.31\n## [1] 10002.31\n## [1] 10002.31\n## [1] 10002.31\n## [1] 10002.31\n## [1] 10002.31\n## [1] 10002.32\n## [1] 10002.32\n## [1] 10002.32\n## [1] 10002.32\n## [1] 10002.32\n## [1] 10002.32\n## [1] 10002.32\n## [1] 10002.32\n## [1] 10002.33\n## [1] 10002.33\n## [1] 10002.33\n## [1] 10002.33\n## [1] 10002.33\n## [1] 10002.33\n## [1] 10002.33\n## [1] 10002.34\n## [1] 10002.34\n## [1] 10002.34\n## [1] 10002.34\n## [1] 10002.34\n## [1] 10002.34\n## [1] 10002.34\n## [1] 10002.34\n## [1] 10002.35\n## [1] 10002.35\n## [1] 10002.35\n## [1] 10002.35\n## [1] 10002.35\n## [1] 10002.35\n## [1] 10002.35\n## [1] 10002.36\n## [1] 10002.36\n## [1] 10002.36\n## [1] 10002.36\n## [1] 10002.36\n## [1] 10002.36\n## [1] 10002.36\n## [1] 10002.36\n## [1] 10002.37\n## [1] 10002.37\n## [1] 10002.37\n## [1] 10002.37\n## [1] 10002.37\n## [1] 10002.37\n## [1] 10002.37\n## [1] 10002.37\n## [1] 10002.38\n## [1] 10002.38\n## [1] 10002.38\n## [1] 10002.38\n## [1] 10002.38\n## [1] 10002.38\n## [1] 10002.38\n## [1] 10002.39\n## [1] 10002.39\n## [1] 10002.39\n## [1] 10002.39\n## [1] 10002.39\n## [1] 10002.39\n## [1] 10002.39\n## [1] 10002.39\n## [1] 10002.4\n## [1] 10002.4\n## [1] 10002.4\n## [1] 10002.4\n## [1] 10002.4\n## [1] 10002.4\n## [1] 10002.4\n## [1] 10002.4\n## [1] 10002.41\n## [1] 10002.41\n## [1] 10002.41\n## [1] 10002.41\n## [1] 10002.41\n## [1] 10002.41\n## [1] 10002.41\n## [1] 10002.42\n## [1] 10002.42\n## [1] 10002.42\n## [1] 10002.42\n## [1] 10002.42\n## [1] 10002.42\n## [1] 10002.42\n## [1] 10002.42\n## [1] 10002.43\n## [1] 10002.43\n## [1] 10002.43\n## [1] 10002.43\n## [1] 10002.43\n## [1] 10002.43\n## [1] 10002.43\n## [1] 10002.44\n## [1] 10002.44\n## [1] 10002.44\n## [1] 10002.44\n## [1] 10002.44\n## [1] 10002.44\n## [1] 10002.44\n## [1] 10002.44\n## [1] 10002.45\n## [1] 10002.45\n## [1] 10002.45\n## [1] 10002.45\n## [1] 10002.45\n## [1] 10002.45\n## [1] 10002.45\n## [1] 10002.45\n## [1] 10002.46\n## [1] 10002.46\n## [1] 10002.46\n## [1] 10002.46\n## [1] 10002.46\n## [1] 10002.46\n## [1] 10002.46\n## [1] 10002.47\n## [1] 10002.47\n## [1] 10002.47\n## [1] 10002.47\n## [1] 10002.47\n## [1] 10002.47\n## [1] 10002.47\n## [1] 10002.47\n## [1] 10002.48\n## [1] 10002.48\n## [1] 10002.48\n## [1] 10002.48\n## [1] 10002.48\n## [1] 10002.48\n## [1] 10002.48\n## [1] 10002.49\n## [1] 10002.49\n## [1] 10002.49\n## [1] 10002.49\n## [1] 10002.49\n## [1] 10002.49\n## [1] 10002.49\n## [1] 10002.49\n## [1] 10002.5\n## [1] 10002.5\n## [1] 10002.5\n## [1] 10002.5\n## [1] 10002.5\n## [1] 10002.5\n## [1] 10002.5\n## [1] 10002.5\n## [1] 10002.51\n## [1] 10002.51\n## [1] 10002.51\n## [1] 10002.51\n## [1] 10002.51\n## [1] 10002.51\n## [1] 10002.51\n## [1] 10002.52\n## [1] 10002.52\n## [1] 10002.52\n## [1] 10002.52\n## [1] 10002.52\n## [1] 10002.52\n## [1] 10002.52\n## [1] 10002.52\n## [1] 10002.53\n## [1] 10002.53\n## [1] 10002.53\n## [1] 10002.53\n## [1] 10002.53\n## [1] 10002.53\n## [1] 10002.53\n## [1] 10002.54\n## [1] 10002.54\n## [1] 10002.54\n## [1] 10002.54\n## [1] 10002.54\n## [1] 10002.54\n## [1] 10002.54\n## [1] 10002.54\n## [1] 10002.55\n## [1] 10002.55\n## [1] 10002.55\n## [1] 10002.55\n## [1] 10002.55\n## [1] 10002.55\n## [1] 10002.55\n## [1] 10002.55\n## [1] 10002.56\n## [1] 10002.56\n## [1] 10002.56\n## [1] 10002.56\n## [1] 10002.56\n## [1] 10002.56\n## [1] 10002.56\n## [1] 10002.57\n## [1] 10002.57\n## [1] 10002.57\n## [1] 10002.57\n## [1] 10002.57\n## [1] 10002.57\n## [1] 10002.57\n## [1] 10002.57\n## [1] 10002.58\n## [1] 10002.58\n## [1] 10002.58\n## [1] 10002.58\n## [1] 10002.58\n## [1] 10002.58\n## [1] 10002.58\n## [1] 10002.59\n## [1] 10002.59\n## [1] 10002.59\n## [1] 10002.59\n## [1] 10002.59\n## [1] 10002.59\n## [1] 10002.59\n## [1] 10002.59\n## [1] 10002.6\n## [1] 10002.6\n## [1] 10002.6\n## [1] 10002.6\n## [1] 10002.6\n## [1] 10002.6\n## [1] 10002.6\n## [1] 10002.6\n## [1] 10002.61\n## [1] 10002.61\n## [1] 10002.61\n## [1] 10002.61\n## [1] 10002.61\n## [1] 10002.61\n## [1] 10002.61\n## [1] 10002.62\n## [1] 10002.62\n## [1] 10002.62\n## [1] 10002.62\n## [1] 10002.62\n## [1] 10002.62\n## [1] 10002.62\n## [1] 10002.62\n## [1] 10002.63\n## [1] 10002.63\n## [1] 10002.63\n## [1] 10002.63\n## [1] 10002.63\n## [1] 10002.63\n## [1] 10002.63\n## [1] 10002.64\n## [1] 10002.64\n## [1] 10002.64\n## [1] 10002.64\n## [1] 10002.64\n## [1] 10002.64\n## [1] 10002.64\n## [1] 10002.64\n## [1] 10002.65\n## [1] 10002.65\n## [1] 10002.65\n## [1] 10002.65\n## [1] 10002.65\n## [1] 10002.65\n## [1] 10002.65\n## [1] 10002.65\n## [1] 10002.66\n## [1] 10002.66\n## [1] 10002.66\n## [1] 10002.66\n## [1] 10002.66\n## [1] 10002.66\n## [1] 10002.66\n## [1] 10002.67\n## [1] 10002.67\n## [1] 10002.67\n## [1] 10002.67\n## [1] 10002.67\n## [1] 10002.67\n## [1] 10002.67\n## [1] 10002.67\n## [1] 10002.68\n## [1] 10002.68\n## [1] 10002.68\n## [1] 10002.68\n## [1] 10002.68\n## [1] 10002.68\n## [1] 10002.68\n## [1] 10002.69\n## [1] 10002.69\n## [1] 10002.69\n## [1] 10002.69\n## [1] 10002.69\n## [1] 10002.69\n## [1] 10002.69\n## [1] 10002.69\n## [1] 10002.7\n## [1] 10002.7\n## [1] 10002.7\n## [1] 10002.7\n## [1] 10002.7\n## [1] 10002.7\n## [1] 10002.7\n## [1] 10002.7\n## [1] 10002.71\n## [1] 10002.71\n## [1] 10002.71\n## [1] 10002.71\n## [1] 10002.71\n## [1] 10002.71\n## [1] 10002.71\n## [1] 10002.72\n## [1] 10002.72\n## [1] 10002.72\n## [1] 10002.72\n## [1] 10002.72\n## [1] 10002.72\n## [1] 10002.72\n## [1] 10002.72\n## [1] 10002.73\n## [1] 10002.73\n## [1] 10002.73\n## [1] 10002.73\n## [1] 10002.73\n## [1] 10002.73\n## [1] 10002.73\n## [1] 10002.74\n## [1] 10002.74\n## [1] 10002.74\n## [1] 10002.74\n## [1] 10002.74\n## [1] 10002.74\n## [1] 10002.74\n## [1] 10002.74\n## [1] 10002.75\n## [1] 10002.75\n## [1] 10002.75\n## [1] 10002.75\n## [1] 10002.75\n## [1] 10002.75\n## [1] 10002.75\n## [1] 10002.75\n## [1] 10002.76\n## [1] 10002.76\n## [1] 10002.76\n## [1] 10002.76\n## [1] 10002.76\n## [1] 10002.76\n## [1] 10002.76\n## [1] 10002.77\n## [1] 10002.77\n## [1] 10002.77\n## [1] 10002.77\n## [1] 10002.77\n## [1] 10002.77\n## [1] 10002.77\n## [1] 10002.77\n## [1] 10002.78\n## [1] 10002.78\n## [1] 10002.78\n## [1] 10002.78\n## [1] 10002.78\n## [1] 10002.78\n## [1] 10002.78\n## [1] 10002.79\n## [1] 10002.79\n## [1] 10002.79\n## [1] 10002.79\n## [1] 10002.79\n## [1] 10002.79\n## [1] 10002.79\n## [1] 10002.79\n## [1] 10002.8\n## [1] 10002.8\n## [1] 10002.8\n## [1] 10002.8\n## [1] 10002.8\n## [1] 10002.8\n## [1] 10002.8\n## [1] 10002.8\n## [1] 10002.81\n## [1] 10002.81\n## [1] 10002.81\n## [1] 10002.81\n## [1] 10002.81\n## [1] 10002.81\n## [1] 10002.81\n## [1] 10002.82\n## [1] 10002.82\n## [1] 10002.82\n## [1] 10002.82\n## [1] 10002.82\n## [1] 10002.82\n## [1] 10002.82\n## [1] 10002.82\n## [1] 10002.83\n## [1] 10002.83\n## [1] 10002.83\n## [1] 10002.83\n## [1] 10002.83\n## [1] 10002.83\n## [1] 10002.83\n## [1] 10002.83\n## [1] 10002.84\n## [1] 10002.84\n## [1] 10002.84\n## [1] 10002.84\n## [1] 10002.84\n## [1] 10002.84\n## [1] 10002.84\n## [1] 10002.85\n## [1] 10002.85\n## [1] 10002.85\n## [1] 10002.85\n## [1] 10002.85\n## [1] 10002.85\n## [1] 10002.85\n## [1] 10002.85\n## [1] 10002.86\n## [1] 10002.86\n## [1] 10002.86\n## [1] 10002.86\n## [1] 10002.86\n## [1] 10002.86\n## [1] 10002.86\n## [1] 10002.87\n## [1] 10002.87\n## [1] 10002.87\n## [1] 10002.87\n## [1] 10002.87\n## [1] 10002.87\n## [1] 10002.87\n## [1] 10002.87\n## [1] 10002.88\n## [1] 10002.88\n## [1] 10002.88\n## [1] 10002.88\n## [1] 10002.88\n## [1] 10002.88\n## [1] 10002.88\n## [1] 10002.88\n## [1] 10002.89\n## [1] 10002.89\n## [1] 10002.89\n## [1] 10002.89\n## [1] 10002.89\n## [1] 10002.89\n## [1] 10002.89\n## [1] 10002.9\n## [1] 10002.9\n## [1] 10002.9\n## [1] 10002.9\n## [1] 10002.9\n## [1] 10002.9\n## [1] 10002.9\n## [1] 10002.9\n## [1] 10002.91\n## [1] 10002.91\n## [1] 10002.91\n## [1] 10002.91\n## [1] 10002.91\n## [1] 10002.91\n## [1] 10002.91\n## [1] 10002.92\n## [1] 10002.92\n## [1] 10002.92\n## [1] 10002.92\n## [1] 10002.92\n## [1] 10002.92\n## [1] 10002.92\n## [1] 10002.92\n## [1] 10002.93\n## [1] 10002.93\n## [1] 10002.93\n## [1] 10002.93\n## [1] 10002.93\n## [1] 10002.93\n## [1] 10002.93\n## [1] 10002.93\n## [1] 10002.94\n## [1] 10002.94\n## [1] 10002.94\n## [1] 10002.94\n## [1] 10002.94\n## [1] 10002.94\n## [1] 10002.94\n## [1] 10002.95\n## [1] 10002.95\n## [1] 10002.95\n## [1] 10002.95\n## [1] 10002.95\n## [1] 10002.95\n## [1] 10002.95\n## [1] 10002.95\n## [1] 10002.96\n## [1] 10002.96\n## [1] 10002.96\n## [1] 10002.96\n## [1] 10002.96\n## [1] 10002.96\n## [1] 10002.96\n## [1] 10002.97\n## [1] 10002.97\n## [1] 10002.97\n## [1] 10002.97\n## [1] 10002.97\n## [1] 10002.97\n## [1] 10002.97\n## [1] 10002.97\n## [1] 10002.98\n## [1] 10002.98\n## [1] 10002.98\n## [1] 10002.98\n## [1] 10002.98\n## [1] 10002.98\n## [1] 10002.98\n## [1] 10002.98\n## [1] 10002.99\n## [1] 10002.99\n## [1] 10002.99\n## [1] 10002.99\n## [1] 10002.99\n## [1] 10002.99\n## [1] 10002.99\n## [1] 10003\n## [1] 10003\n## [1] 10003\n## [1] 10003\n## [1] 10003\n## [1] 10003\n## [1] 10003\n## [1] 10003\n## [1] 10003.01\n## [1] 10003.01\n## [1] 10003.01\n## [1] 10003.01\n## [1] 10003.01\n## [1] 10003.01\n## [1] 10003.01\n## [1] 10003.02\n## [1] 10003.02\n## [1] 10003.02\n## [1] 10003.02\n## [1] 10003.02\n## [1] 10003.02\n## [1] 10003.02\n## [1] 10003.02\n## [1] 10003.03\n## [1] 10003.03\n## [1] 10003.03\n## [1] 10003.03\n## [1] 10003.03\n## [1] 10003.03\n## [1] 10003.03\n## [1] 10003.03\n## [1] 10003.04\n## [1] 10003.04\n## [1] 10003.04\n## [1] 10003.04\n## [1] 10003.04\n## [1] 10003.04\n## [1] 10003.04\n## [1] 10003.05\n## [1] 10003.05\n## [1] 10003.05\n## [1] 10003.05\n## [1] 10003.05\n## [1] 10003.05\n## [1] 10003.05\n## [1] 10003.05\n## [1] 10003.06\n## [1] 10003.06\n## [1] 10003.06\n## [1] 10003.06\n## [1] 10003.06\n## [1] 10003.06\n## [1] 10003.06\n## [1] 10003.07\n## [1] 10003.07\n## [1] 10003.07\n## [1] 10003.07\n## [1] 10003.07\n## [1] 10003.07\n## [1] 10003.07\n## [1] 10003.07\n## [1] 10003.08\n## [1] 10003.08\n## [1] 10003.08\n## [1] 10003.08\n## [1] 10003.08\n## [1] 10003.08\n## [1] 10003.08\n## [1] 10003.08\n## [1] 10003.09\n## [1] 10003.09\n## [1] 10003.09\n## [1] 10003.09\n## [1] 10003.09\n## [1] 10003.09\n## [1] 10003.09\n## [1] 10003.1\n## [1] 10003.1\n## [1] 10003.1\n## [1] 10003.1\n## [1] 10003.1\n## [1] 10003.1\n## [1] 10003.1\n## [1] 10003.1\n## [1] 10003.11\n## [1] 10003.11\n## [1] 10003.11\n## [1] 10003.11\n## [1] 10003.11\n## [1] 10003.11\n## [1] 10003.11\n## [1] 10003.12\n## [1] 10003.12\n## [1] 10003.12\n## [1] 10003.12\n## [1] 10003.12\n## [1] 10003.12\n## [1] 10003.12\n## [1] 10003.12\n## [1] 10003.13\n## [1] 10003.13\n## [1] 10003.13\n## [1] 10003.13\n## [1] 10003.13\n## [1] 10003.13\n## [1] 10003.13\n## [1] 10003.13\n## [1] 10003.14\n## [1] 10003.14\n## [1] 10003.14\n## [1] 10003.14\n## [1] 10003.14\n## [1] 10003.14\n## [1] 10003.14\n## [1] 10003.15\n## [1] 10003.15\n## [1] 10003.15\n## [1] 10003.15\n## [1] 10003.15\n## [1] 10003.15\n## [1] 10003.15\n## [1] 10003.15\n## [1] 10003.16\n## [1] 10003.16\n## [1] 10003.16\n## [1] 10003.16\n## [1] 10003.16\n## [1] 10003.16\n## [1] 10003.16\n## [1] 10003.17\n## [1] 10003.17\n## [1] 10003.17\n## [1] 10003.17\n## [1] 10003.17\n## [1] 10003.17\n## [1] 10003.17\n## [1] 10003.17\n## [1] 10003.18\n## [1] 10003.18\n## [1] 10003.18\n## [1] 10003.18\n## [1] 10003.18\n## [1] 10003.18\n## [1] 10003.18\n## [1] 10003.18\n## [1] 10003.19\n## [1] 10003.19\n## [1] 10003.19\n## [1] 10003.19\n## [1] 10003.19\n## [1] 10003.19\n## [1] 10003.19\n## [1] 10003.2\n## [1] 10003.2\n## [1] 10003.2\n## [1] 10003.2\n## [1] 10003.2\n## [1] 10003.2\n## [1] 10003.2\n## [1] 10003.2\n## [1] 10003.21\n## [1] 10003.21\n## [1] 10003.21\n## [1] 10003.21\n## [1] 10003.21\n## [1] 10003.21\n## [1] 10003.21\n## [1] 10003.21\n## [1] 10003.22\n## [1] 10003.22\n## [1] 10003.22\n## [1] 10003.22\n## [1] 10003.22\n## [1] 10003.22\n## [1] 10003.22\n## [1] 10003.23\n## [1] 10003.23\n## [1] 10003.23\n## [1] 10003.23\n## [1] 10003.23\n## [1] 10003.23\n## [1] 10003.23\n## [1] 10003.23\n## [1] 10003.24\n## [1] 10003.24\n## [1] 10003.24\n## [1] 10003.24\n## [1] 10003.24\n## [1] 10003.24\n## [1] 10003.24\n## [1] 10003.25\n## [1] 10003.25\n## [1] 10003.25\n## [1] 10003.25\n## [1] 10003.25\n## [1] 10003.25\n## [1] 10003.25\n## [1] 10003.25\n## [1] 10003.26\n## [1] 10003.26\n## [1] 10003.26\n## [1] 10003.26\n## [1] 10003.26\n## [1] 10003.26\n## [1] 10003.26\n## [1] 10003.26\n## [1] 10003.27\n## [1] 10003.27\n## [1] 10003.27\n## [1] 10003.27\n## [1] 10003.27\n## [1] 10003.27\n## [1] 10003.27\n## [1] 10003.28\n## [1] 10003.28\n## [1] 10003.28\n## [1] 10003.28\n## [1] 10003.28\n## [1] 10003.28\n## [1] 10003.28\n## [1] 10003.28\n## [1] 10003.29\n## [1] 10003.29\n## [1] 10003.29\n## [1] 10003.29\n## [1] 10003.29\n## [1] 10003.29\n## [1] 10003.29\n## [1] 10003.3\n## [1] 10003.3\n## [1] 10003.3\n## [1] 10003.3\n## [1] 10003.3\n## [1] 10003.3\n## [1] 10003.3\n## [1] 10003.3\n## [1] 10003.31\n## [1] 10003.31\n## [1] 10003.31\n## [1] 10003.31\n## [1] 10003.31\n## [1] 10003.31\n## [1] 10003.31\n## [1] 10003.31\n## [1] 10003.32\n## [1] 10003.32\n## [1] 10003.32\n## [1] 10003.32\n## [1] 10003.32\n## [1] 10003.32\n## [1] 10003.32\n## [1] 10003.33\n## [1] 10003.33\n## [1] 10003.33\n## [1] 10003.33\n## [1] 10003.33\n## [1] 10003.33\n## [1] 10003.33\n## [1] 10003.33\n## [1] 10003.34\n## [1] 10003.34\n## [1] 10003.34\n## [1] 10003.34\n## [1] 10003.34\n## [1] 10003.34\n## [1] 10003.34\n## [1] 10003.35\n## [1] 10003.35\n## [1] 10003.35\n## [1] 10003.35\n## [1] 10003.35\n## [1] 10003.35\n## [1] 10003.35\n## [1] 10003.35\n## [1] 10003.36\n## [1] 10003.36\n## [1] 10003.36\n## [1] 10003.36\n## [1] 10003.36\n## [1] 10003.36\n## [1] 10003.36\n## [1] 10003.36\n## [1] 10003.37\n## [1] 10003.37\n## [1] 10003.37\n## [1] 10003.37\n## [1] 10003.37\n## [1] 10003.37\n## [1] 10003.37\n## [1] 10003.38\n## [1] 10003.38\n## [1] 10003.38\n## [1] 10003.38\n## [1] 10003.38\n## [1] 10003.38\n## [1] 10003.38\n## [1] 10003.38\n## [1] 10003.39\n## [1] 10003.39\n## [1] 10003.39\n## [1] 10003.39\n## [1] 10003.39\n## [1] 10003.39\n## [1] 10003.39\n## [1] 10003.4\n## [1] 10003.4\n## [1] 10003.4\n## [1] 10003.4\n## [1] 10003.4\n## [1] 10003.4\n## [1] 10003.4\n## [1] 10003.4\n## [1] 10003.41\n## [1] 10003.41\n## [1] 10003.41\n## [1] 10003.41\n## [1] 10003.41\n## [1] 10003.41\n## [1] 10003.41\n## [1] 10003.41\n## [1] 10003.42\n## [1] 10003.42\n## [1] 10003.42\n## [1] 10003.42\n## [1] 10003.42\n## [1] 10003.42\n## [1] 10003.42\n## [1] 10003.43\n## [1] 10003.43\n## [1] 10003.43\n## [1] 10003.43\n## [1] 10003.43\n## [1] 10003.43\n## [1] 10003.43\n## [1] 10003.43\n## [1] 10003.44\n## [1] 10003.44\n## [1] 10003.44\n## [1] 10003.44\n## [1] 10003.44\n## [1] 10003.44\n## [1] 10003.44\n## [1] 10003.45\n## [1] 10003.45\n## [1] 10003.45\n## [1] 10003.45\n## [1] 10003.45\n## [1] 10003.45\n## [1] 10003.45\n## [1] 10003.45\n## [1] 10003.46\n## [1] 10003.46\n## [1] 10003.46\n## [1] 10003.46\n## [1] 10003.46\n## [1] 10003.46\n## [1] 10003.46\n## [1] 10003.46\n## [1] 10003.47\n## [1] 10003.47\n## [1] 10003.47\n## [1] 10003.47\n## [1] 10003.47\n## [1] 10003.47\n## [1] 10003.47\n## [1] 10003.48\n## [1] 10003.48\n## [1] 10003.48\n## [1] 10003.48\n## [1] 10003.48\n## [1] 10003.48\n## [1] 10003.48\n## [1] 10003.48\n## [1] 10003.49\n## [1] 10003.49\n## [1] 10003.49\n## [1] 10003.49\n## [1] 10003.49\n## [1] 10003.49\n## [1] 10003.49\n## [1] 10003.5\n## [1] 10003.5\n## [1] 10003.5\n## [1] 10003.5\n## [1] 10003.5\n## [1] 10003.5\n## [1] 10003.5\n## [1] 10003.5\n## [1] 10003.51\n## [1] 10003.51\n## [1] 10003.51\n## [1] 10003.51\n## [1] 10003.51\n## [1] 10003.51\n## [1] 10003.51\n## [1] 10003.51\n## [1] 10003.52\n## [1] 10003.52\n## [1] 10003.52\n## [1] 10003.52\n## [1] 10003.52\n## [1] 10003.52\n## [1] 10003.52\n## [1] 10003.53\n## [1] 10003.53\n## [1] 10003.53\n## [1] 10003.53\n## [1] 10003.53\n## [1] 10003.53\n## [1] 10003.53\n## [1] 10003.53\n## [1] 10003.54\n## [1] 10003.54\n## [1] 10003.54\n## [1] 10003.54\n## [1] 10003.54\n## [1] 10003.54\n## [1] 10003.54\n## [1] 10003.55\n## [1] 10003.55\n## [1] 10003.55\n## [1] 10003.55\n## [1] 10003.55\n## [1] 10003.55\n## [1] 10003.55\n## [1] 10003.55\n## [1] 10003.56\n## [1] 10003.56\n## [1] 10003.56\n## [1] 10003.56\n## [1] 10003.56\n## [1] 10003.56\n## [1] 10003.56\n## [1] 10003.56\n## [1] 10003.57\n## [1] 10003.57\n## [1] 10003.57\n## [1] 10003.57\n## [1] 10003.57\n## [1] 10003.57\n## [1] 10003.57\n## [1] 10003.58\n## [1] 10003.58\n## [1] 10003.58\n## [1] 10003.58\n## [1] 10003.58\n## [1] 10003.58\n## [1] 10003.58\n## [1] 10003.58\n## [1] 10003.59\n## [1] 10003.59\n## [1] 10003.59\n## [1] 10003.59\n## [1] 10003.59\n## [1] 10003.59\n## [1] 10003.59\n## [1] 10003.6\n## [1] 10003.6\n## [1] 10003.6\n## [1] 10003.6\n## [1] 10003.6\n## [1] 10003.6\n## [1] 10003.6\n## [1] 10003.6\n## [1] 10003.61\n## [1] 10003.61\n## [1] 10003.61\n## [1] 10003.61\n## [1] 10003.61\n## [1] 10003.61\n## [1] 10003.61\n## [1] 10003.61\n## [1] 10003.62\n## [1] 10003.62\n## [1] 10003.62\n## [1] 10003.62\n## [1] 10003.62\n## [1] 10003.62\n## [1] 10003.62\n## [1] 10003.63\n## [1] 10003.63\n## [1] 10003.63\n## [1] 10003.63\n## [1] 10003.63\n## [1] 10003.63\n## [1] 10003.63\n## [1] 10003.63\n## [1] 10003.64\n## [1] 10003.64\n## [1] 10003.64\n## [1] 10003.64\n## [1] 10003.64\n## [1] 10003.64\n## [1] 10003.64\n## [1] 10003.64\n## [1] 10003.65\n## [1] 10003.65\n## [1] 10003.65\n## [1] 10003.65\n## [1] 10003.65\n## [1] 10003.65\n## [1] 10003.65\n## [1] 10003.66\n## [1] 10003.66\n## [1] 10003.66\n## [1] 10003.66\n## [1] 10003.66\n## [1] 10003.66\n## [1] 10003.66\n## [1] 10003.66\n## [1] 10003.67\n## [1] 10003.67\n## [1] 10003.67\n## [1] 10003.67\n## [1] 10003.67\n## [1] 10003.67\n## [1] 10003.67\n## [1] 10003.68\n## [1] 10003.68\n## [1] 10003.68\n## [1] 10003.68\n## [1] 10003.68\n## [1] 10003.68\n## [1] 10003.68\n## [1] 10003.68\n## [1] 10003.69\n## [1] 10003.69\n## [1] 10003.69\n## [1] 10003.69\n## [1] 10003.69\n## [1] 10003.69\n## [1] 10003.69\n## [1] 10003.69\n## [1] 10003.7\n## [1] 10003.7\n## [1] 10003.7\n## [1] 10003.7\n## [1] 10003.7\n## [1] 10003.7\n## [1] 10003.7\n## [1] 10003.71\n## [1] 10003.71\n## [1] 10003.71\n## [1] 10003.71\n## [1] 10003.71\n## [1] 10003.71\n## [1] 10003.71\n## [1] 10003.71\n## [1] 10003.72\n## [1] 10003.72\n## [1] 10003.72\n## [1] 10003.72\n## [1] 10003.72\n## [1] 10003.72\n## [1] 10003.72\n## [1] 10003.73\n## [1] 10003.73\n## [1] 10003.73\n## [1] 10003.73\n## [1] 10003.73\n## [1] 10003.73\n## [1] 10003.73\n## [1] 10003.73\n## [1] 10003.74\n## [1] 10003.74\n## [1] 10003.74\n## [1] 10003.74\n## [1] 10003.74\n## [1] 10003.74\n## [1] 10003.74\n## [1] 10003.74\n## [1] 10003.75\n## [1] 10003.75\n## [1] 10003.75\n## [1] 10003.75\n## [1] 10003.75\n## [1] 10003.75\n## [1] 10003.75\n## [1] 10003.76\n## [1] 10003.76\n## [1] 10003.76\n## [1] 10003.76\n## [1] 10003.76\n## [1] 10003.76\n## [1] 10003.76\n## [1] 10003.76\n## [1] 10003.77\n## [1] 10003.77\n## [1] 10003.77\n## [1] 10003.77\n## [1] 10003.77\n## [1] 10003.77\n## [1] 10003.77\n## [1] 10003.78\n## [1] 10003.78\n## [1] 10003.78\n## [1] 10003.78\n## [1] 10003.78\n## [1] 10003.78\n## [1] 10003.78\n## [1] 10003.78\n## [1] 10003.79\n## [1] 10003.79\n## [1] 10003.79\n## [1] 10003.79\n## [1] 10003.79\n## [1] 10003.79\n## [1] 10003.79\n## [1] 10003.79\n## [1] 10003.8\n## [1] 10003.8\n## [1] 10003.8\n## [1] 10003.8\n## [1] 10003.8\n## [1] 10003.8\n## [1] 10003.8\n## [1] 10003.81\n## [1] 10003.81\n## [1] 10003.81\n## [1] 10003.81\n## [1] 10003.81\n## [1] 10003.81\n## [1] 10003.81\n## [1] 10003.81\n## [1] 10003.82\n## [1] 10003.82\n## [1] 10003.82\n## [1] 10003.82\n## [1] 10003.82\n## [1] 10003.82\n## [1] 10003.82\n## [1] 10003.83\n## [1] 10003.83\n## [1] 10003.83\n## [1] 10003.83\n## [1] 10003.83\n## [1] 10003.83\n## [1] 10003.83\n## [1] 10003.83\n## [1] 10003.84\n## [1] 10003.84\n## [1] 10003.84\n## [1] 10003.84\n## [1] 10003.84\n## [1] 10003.84\n## [1] 10003.84\n## [1] 10003.84\n## [1] 10003.85\n## [1] 10003.85\n## [1] 10003.85\n## [1] 10003.85\n## [1] 10003.85\n## [1] 10003.85\n## [1] 10003.85\n## [1] 10003.86\n## [1] 10003.86\n## [1] 10003.86\n## [1] 10003.86\n## [1] 10003.86\n## [1] 10003.86\n## [1] 10003.86\n## [1] 10003.86\n## [1] 10003.87\n## [1] 10003.87\n## [1] 10003.87\n## [1] 10003.87\n## [1] 10003.87\n## [1] 10003.87\n## [1] 10003.87\n## [1] 10003.88\n## [1] 10003.88\n## [1] 10003.88\n## [1] 10003.88\n## [1] 10003.88\n## [1] 10003.88\n## [1] 10003.88\n## [1] 10003.88\n## [1] 10003.89\n## [1] 10003.89\n## [1] 10003.89\n## [1] 10003.89\n## [1] 10003.89\n## [1] 10003.89\n## [1] 10003.89\n## [1] 10003.89\n## [1] 10003.9\n## [1] 10003.9\n## [1] 10003.9\n## [1] 10003.9\n## [1] 10003.9\n## [1] 10003.9\n## [1] 10003.9\n## [1] 10003.91\n## [1] 10003.91\n## [1] 10003.91\n## [1] 10003.91\n## [1] 10003.91\n## [1] 10003.91\n## [1] 10003.91\n## [1] 10003.91\n## [1] 10003.92\n## [1] 10003.92\n## [1] 10003.92\n## [1] 10003.92\n## [1] 10003.92\n## [1] 10003.92\n## [1] 10003.92\n## [1] 10003.93\n## [1] 10003.93\n## [1] 10003.93\n## [1] 10003.93\n## [1] 10003.93\n## [1] 10003.93\n## [1] 10003.93\n## [1] 10003.93\n## [1] 10003.94\n## [1] 10003.94\n## [1] 10003.94\n## [1] 10003.94\n## [1] 10003.94\n## [1] 10003.94\n## [1] 10003.94\n## [1] 10003.94\n## [1] 10003.95\n## [1] 10003.95\n## [1] 10003.95\n## [1] 10003.95\n## [1] 10003.95\n## [1] 10003.95\n## [1] 10003.95\n## [1] 10003.96\n## [1] 10003.96\n## [1] 10003.96\n## [1] 10003.96\n## [1] 10003.96\n## [1] 10003.96\n## [1] 10003.96\n## [1] 10003.96\n## [1] 10003.97\n## [1] 10003.97\n## [1] 10003.97\n## [1] 10003.97\n## [1] 10003.97\n## [1] 10003.97\n## [1] 10003.97\n## [1] 10003.98\n## [1] 10003.98\n## [1] 10003.98\n## [1] 10003.98\n## [1] 10003.98\n## [1] 10003.98\n## [1] 10003.98\n## [1] 10003.98\n## [1] 10003.99\n## [1] 10003.99\n## [1] 10003.99\n## [1] 10003.99\n## [1] 10003.99\n## [1] 10003.99\n## [1] 10003.99\n## [1] 10003.99\n## [1] 10004\n## [1] 10004\n## [1] 10004\n## [1] 10004\n## [1] 10004\n## [1] 10004\n## [1] 10004\n## [1] 10004.01\n## [1] 10004.01\n## [1] 10004.01\n## [1] 10004.01\n## [1] 10004.01\n## [1] 10004.01\n## [1] 10004.01\n## [1] 10004.01\n## [1] 10004.02\n## [1] 10004.02\n## [1] 10004.02\n## [1] 10004.02\n## [1] 10004.02\n## [1] 10004.02\n## [1] 10004.02\n## [1] 10004.02\n## [1] 10004.03\n## [1] 10004.03\n## [1] 10004.03\n## [1] 10004.03\n## [1] 10004.03\n## [1] 10004.03\n## [1] 10004.03\n## [1] 10004.04\n## [1] 10004.04\n## [1] 10004.04\n## [1] 10004.04\n## [1] 10004.04\n## [1] 10004.04\n## [1] 10004.04\n## [1] 10004.04\n## [1] 10004.05\n## [1] 10004.05\n## [1] 10004.05\n## [1] 10004.05\n## [1] 10004.05\n## [1] 10004.05\n## [1] 10004.05\n## [1] 10004.06\n## [1] 10004.06\n## [1] 10004.06\n## [1] 10004.06\n## [1] 10004.06\n## [1] 10004.06\n## [1] 10004.06\n## [1] 10004.06\n## [1] 10004.07\n## [1] 10004.07\n## [1] 10004.07\n## [1] 10004.07\n## [1] 10004.07\n## [1] 10004.07\n## [1] 10004.07\n## [1] 10004.07\n## [1] 10004.08\n## [1] 10004.08\n## [1] 10004.08\n## [1] 10004.08\n## [1] 10004.08\n## [1] 10004.08\n## [1] 10004.08\n## [1] 10004.09\n## [1] 10004.09\n## [1] 10004.09\n## [1] 10004.09\n## [1] 10004.09\n## [1] 10004.09\n## [1] 10004.09\n## [1] 10004.09\n## [1] 10004.1\n## [1] 10004.1\n## [1] 10004.1\n## [1] 10004.1\n## [1] 10004.1\n## [1] 10004.1\n## [1] 10004.1\n## [1] 10004.11\n## [1] 10004.11\n## [1] 10004.11\n## [1] 10004.11\n## [1] 10004.11\n## [1] 10004.11\n## [1] 10004.11\n## [1] 10004.11\n## [1] 10004.12\n## [1] 10004.12\n## [1] 10004.12\n## [1] 10004.12\n## [1] 10004.12\n## [1] 10004.12\n## [1] 10004.12\n## [1] 10004.12\n## [1] 10004.13\n## [1] 10004.13\n## [1] 10004.13\n## [1] 10004.13\n## [1] 10004.13\n## [1] 10004.13\n## [1] 10004.13\n## [1] 10004.14\n## [1] 10004.14\n## [1] 10004.14\n## [1] 10004.14\n## [1] 10004.14\n## [1] 10004.14\n## [1] 10004.14\n## [1] 10004.14\n## [1] 10004.15\n## [1] 10004.15\n## [1] 10004.15\n## [1] 10004.15\n## [1] 10004.15\n## [1] 10004.15\n## [1] 10004.15\n## [1] 10004.16\n## [1] 10004.16\n## [1] 10004.16\n## [1] 10004.16\n## [1] 10004.16\n## [1] 10004.16\n## [1] 10004.16\n## [1] 10004.16\n## [1] 10004.17\n## [1] 10004.17\n## [1] 10004.17\n## [1] 10004.17\n## [1] 10004.17\n## [1] 10004.17\n## [1] 10004.17\n## [1] 10004.17\n## [1] 10004.18\n## [1] 10004.18\n## [1] 10004.18\n## [1] 10004.18\n## [1] 10004.18\n## [1] 10004.18\n## [1] 10004.18\n## [1] 10004.19\n## [1] 10004.19\n## [1] 10004.19\n## [1] 10004.19\n## [1] 10004.19\n## [1] 10004.19\n## [1] 10004.19\n## [1] 10004.19\n## [1] 10004.2\n## [1] 10004.2\n## [1] 10004.2\n## [1] 10004.2\n## [1] 10004.2\n## [1] 10004.2\n## [1] 10004.2\n## [1] 10004.21\n## [1] 10004.21\n## [1] 10004.21\n## [1] 10004.21\n## [1] 10004.21\n## [1] 10004.21\n## [1] 10004.21\n## [1] 10004.21\n## [1] 10004.22\n## [1] 10004.22\n## [1] 10004.22\n## [1] 10004.22\n## [1] 10004.22\n## [1] 10004.22\n## [1] 10004.22\n## [1] 10004.22\n## [1] 10004.23\n## [1] 10004.23\n## [1] 10004.23\n## [1] 10004.23\n## [1] 10004.23\n## [1] 10004.23\n## [1] 10004.23\n## [1] 10004.24\n## [1] 10004.24\n## [1] 10004.24\n## [1] 10004.24\n## [1] 10004.24\n## [1] 10004.24\n## [1] 10004.24\n## [1] 10004.24\n## [1] 10004.25\n## [1] 10004.25\n## [1] 10004.25\n## [1] 10004.25\n## [1] 10004.25\n## [1] 10004.25\n## [1] 10004.25\n## [1] 10004.26\n## [1] 10004.26\n## [1] 10004.26\n## [1] 10004.26\n## [1] 10004.26\n## [1] 10004.26\n## [1] 10004.26\n## [1] 10004.26\n## [1] 10004.27\n## [1] 10004.27\n## [1] 10004.27\n## [1] 10004.27\n## [1] 10004.27\n## [1] 10004.27\n## [1] 10004.27\n## [1] 10004.27\n## [1] 10004.28\n## [1] 10004.28\n## [1] 10004.28\n## [1] 10004.28\n## [1] 10004.28\n## [1] 10004.28\n## [1] 10004.28\n## [1] 10004.29\n## [1] 10004.29\n## [1] 10004.29\n## [1] 10004.29\n## [1] 10004.29\n## [1] 10004.29\n## [1] 10004.29\n## [1] 10004.29\n## [1] 10004.3\n## [1] 10004.3\n## [1] 10004.3\n## [1] 10004.3\n## [1] 10004.3\n## [1] 10004.3\n## [1] 10004.3\n## [1] 10004.31\n## [1] 10004.31\n## [1] 10004.31\n## [1] 10004.31\n## [1] 10004.31\n## [1] 10004.31\n## [1] 10004.31\n## [1] 10004.31\n## [1] 10004.32\n## [1] 10004.32\n## [1] 10004.32\n## [1] 10004.32\n## [1] 10004.32\n## [1] 10004.32\n## [1] 10004.32\n## [1] 10004.32\n## [1] 10004.33\n## [1] 10004.33\n## [1] 10004.33\n## [1] 10004.33\n## [1] 10004.33\n## [1] 10004.33\n## [1] 10004.33\n## [1] 10004.34\n## [1] 10004.34\n## [1] 10004.34\n## [1] 10004.34\n## [1] 10004.34\n## [1] 10004.34\n## [1] 10004.34\n## [1] 10004.34\n## [1] 10004.35\n## [1] 10004.35\n## [1] 10004.35\n## [1] 10004.35\n## [1] 10004.35\n## [1] 10004.35\n## [1] 10004.35\n## [1] 10004.36\n## [1] 10004.36\n## [1] 10004.36\n## [1] 10004.36\n## [1] 10004.36\n## [1] 10004.36\n## [1] 10004.36\n## [1] 10004.36\n## [1] 10004.37\n## [1] 10004.37\n## [1] 10004.37\n## [1] 10004.37\n## [1] 10004.37\n## [1] 10004.37\n## [1] 10004.37\n## [1] 10004.37\n## [1] 10004.38\n## [1] 10004.38\n## [1] 10004.38\n## [1] 10004.38\n## [1] 10004.38\n## [1] 10004.38\n## [1] 10004.38\n## [1] 10004.39\n## [1] 10004.39\n## [1] 10004.39\n## [1] 10004.39\n## [1] 10004.39\n## [1] 10004.39\n## [1] 10004.39\n## [1] 10004.39\n## [1] 10004.4\n## [1] 10004.4\n## [1] 10004.4\n## [1] 10004.4\n## [1] 10004.4\n## [1] 10004.4\n## [1] 10004.4\n## [1] 10004.4\n## [1] 10004.41\n## [1] 10004.41\n## [1] 10004.41\n## [1] 10004.41\n## [1] 10004.41\n## [1] 10004.41\n## [1] 10004.41\n## [1] 10004.42\n## [1] 10004.42\n## [1] 10004.42\n## [1] 10004.42\n## [1] 10004.42\n## [1] 10004.42\n## [1] 10004.42\n## [1] 10004.42\n## [1] 10004.43\n## [1] 10004.43\n## [1] 10004.43\n## [1] 10004.43\n## [1] 10004.43\n## [1] 10004.43\n## [1] 10004.43\n## [1] 10004.44\n## [1] 10004.44\n## [1] 10004.44\n## [1] 10004.44\n## [1] 10004.44\n## [1] 10004.44\n## [1] 10004.44\n## [1] 10004.44\n## [1] 10004.45\n## [1] 10004.45\n## [1] 10004.45\n## [1] 10004.45\n## [1] 10004.45\n## [1] 10004.45\n## [1] 10004.45\n## [1] 10004.45\n## [1] 10004.46\n## [1] 10004.46\n## [1] 10004.46\n## [1] 10004.46\n## [1] 10004.46\n## [1] 10004.46\n## [1] 10004.46\n## [1] 10004.47\n## [1] 10004.47\n## [1] 10004.47\n## [1] 10004.47\n## [1] 10004.47\n## [1] 10004.47\n## [1] 10004.47\n## [1] 10004.47\n## [1] 10004.48\n## [1] 10004.48\n## [1] 10004.48\n## [1] 10004.48\n## [1] 10004.48\n## [1] 10004.48\n## [1] 10004.48\n## [1] 10004.49\n## [1] 10004.49\n## [1] 10004.49\n## [1] 10004.49\n## [1] 10004.49\n## [1] 10004.49\n## [1] 10004.49\n## [1] 10004.49\n## [1] 10004.5\n## [1] 10004.5\n## [1] 10004.5\n## [1] 10004.5\n## [1] 10004.5\n## [1] 10004.5\n## [1] 10004.5\n## [1] 10004.5\n## [1] 10004.51\n## [1] 10004.51\n## [1] 10004.51\n## [1] 10004.51\n## [1] 10004.51\n## [1] 10004.51\n## [1] 10004.51\n## [1] 10004.52\n## [1] 10004.52\n## [1] 10004.52\n## [1] 10004.52\n## [1] 10004.52\n## [1] 10004.52\n## [1] 10004.52\n## [1] 10004.52\n## [1] 10004.53\n## [1] 10004.53\n## [1] 10004.53\n## [1] 10004.53\n## [1] 10004.53\n## [1] 10004.53\n## [1] 10004.53\n## [1] 10004.54\n## [1] 10004.54\n## [1] 10004.54\n## [1] 10004.54\n## [1] 10004.54\n## [1] 10004.54\n## [1] 10004.54\n## [1] 10004.54\n## [1] 10004.55\n## [1] 10004.55\n## [1] 10004.55\n## [1] 10004.55\n## [1] 10004.55\n## [1] 10004.55\n## [1] 10004.55\n## [1] 10004.55\n## [1] 10004.56\n## [1] 10004.56\n## [1] 10004.56\n## [1] 10004.56\n## [1] 10004.56\n## [1] 10004.56\n## [1] 10004.56\n## [1] 10004.57\n## [1] 10004.57\n## [1] 10004.57\n## [1] 10004.57\n## [1] 10004.57\n## [1] 10004.57\n## [1] 10004.57\n## [1] 10004.57\n## [1] 10004.58\n## [1] 10004.58\n## [1] 10004.58\n## [1] 10004.58\n## [1] 10004.58\n## [1] 10004.58\n## [1] 10004.58\n## [1] 10004.59\n## [1] 10004.59\n## [1] 10004.59\n## [1] 10004.59\n## [1] 10004.59\n## [1] 10004.59\n## [1] 10004.59\n## [1] 10004.59\n## [1] 10004.6\n## [1] 10004.6\n## [1] 10004.6\n## [1] 10004.6\n## [1] 10004.6\n## [1] 10004.6\n## [1] 10004.6\n## [1] 10004.6\n## [1] 10004.61\n## [1] 10004.61\n## [1] 10004.61\n## [1] 10004.61\n## [1] 10004.61\n## [1] 10004.61\n## [1] 10004.61\n## [1] 10004.62\n## [1] 10004.62\n## [1] 10004.62\n## [1] 10004.62\n## [1] 10004.62\n## [1] 10004.62\n## [1] 10004.62\n## [1] 10004.62\n## [1] 10004.63\n## [1] 10004.63\n## [1] 10004.63\n## [1] 10004.63\n## [1] 10004.63\n## [1] 10004.63\n## [1] 10004.63\n## [1] 10004.64\n## [1] 10004.64\n## [1] 10004.64\n## [1] 10004.64\n## [1] 10004.64\n## [1] 10004.64\n## [1] 10004.64\n## [1] 10004.64\n## [1] 10004.65\n## [1] 10004.65\n## [1] 10004.65\n## [1] 10004.65\n## [1] 10004.65\n## [1] 10004.65\n## [1] 10004.65\n## [1] 10004.65\n## [1] 10004.66\n## [1] 10004.66\n## [1] 10004.66\n## [1] 10004.66\n## [1] 10004.66\n## [1] 10004.66\n## [1] 10004.66\n## [1] 10004.67\n## [1] 10004.67\n## [1] 10004.67\n## [1] 10004.67\n## [1] 10004.67\n## [1] 10004.67\n## [1] 10004.67\n## [1] 10004.67\n## [1] 10004.68\n## [1] 10004.68\n## [1] 10004.68\n## [1] 10004.68\n## [1] 10004.68\n## [1] 10004.68\n## [1] 10004.68\n## [1] 10004.69\n## [1] 10004.69\n## [1] 10004.69\n## [1] 10004.69\n## [1] 10004.69\n## [1] 10004.69\n## [1] 10004.69\n## [1] 10004.69\n## [1] 10004.7\n## [1] 10004.7\n## [1] 10004.7\n## [1] 10004.7\n## [1] 10004.7\n## [1] 10004.7\n## [1] 10004.7\n## [1] 10004.7\n## [1] 10004.71\n## [1] 10004.71\n## [1] 10004.71\n## [1] 10004.71\n## [1] 10004.71\n## [1] 10004.71\n## [1] 10004.71\n## [1] 10004.72\n## [1] 10004.72\n## [1] 10004.72\n## [1] 10004.72\n## [1] 10004.72\n## [1] 10004.72\n## [1] 10004.72\n## [1] 10004.72\n## [1] 10004.73\n## [1] 10004.73\n## [1] 10004.73\n## [1] 10004.73\n## [1] 10004.73\n## [1] 10004.73\n## [1] 10004.73\n## [1] 10004.74\n## [1] 10004.74\n## [1] 10004.74\n## [1] 10004.74\n## [1] 10004.74\n## [1] 10004.74\n## [1] 10004.74\n## [1] 10004.74\n## [1] 10004.75\n## [1] 10004.75\n## [1] 10004.75\n## [1] 10004.75\n## [1] 10004.75\n## [1] 10004.75\n## [1] 10004.75\n## [1] 10004.75\n## [1] 10004.76\n## [1] 10004.76\n## [1] 10004.76\n## [1] 10004.76\n## [1] 10004.76\n## [1] 10004.76\n## [1] 10004.76\n## [1] 10004.77\n## [1] 10004.77\n## [1] 10004.77\n## [1] 10004.77\n## [1] 10004.77\n## [1] 10004.77\n## [1] 10004.77\n## [1] 10004.77\n## [1] 10004.78\n## [1] 10004.78\n## [1] 10004.78\n## [1] 10004.78\n## [1] 10004.78\n## [1] 10004.78\n## [1] 10004.78\n## [1] 10004.79\n## [1] 10004.79\n## [1] 10004.79\n## [1] 10004.79\n## [1] 10004.79\n## [1] 10004.79\n## [1] 10004.79\n## [1] 10004.79\n## [1] 10004.8\n## [1] 10004.8\n## [1] 10004.8\n## [1] 10004.8\n## [1] 10004.8\n## [1] 10004.8\n## [1] 10004.8\n## [1] 10004.8\n## [1] 10004.81\n## [1] 10004.81\n## [1] 10004.81\n## [1] 10004.81\n## [1] 10004.81\n## [1] 10004.81\n## [1] 10004.81\n## [1] 10004.82\n## [1] 10004.82\n## [1] 10004.82\n## [1] 10004.82\n## [1] 10004.82\n## [1] 10004.82\n## [1] 10004.82\n## [1] 10004.82\n## [1] 10004.83\n## [1] 10004.83\n## [1] 10004.83\n## [1] 10004.83\n## [1] 10004.83\n## [1] 10004.83\n## [1] 10004.83\n## [1] 10004.83\n## [1] 10004.84\n## [1] 10004.84\n## [1] 10004.84\n## [1] 10004.84\n## [1] 10004.84\n## [1] 10004.84\n## [1] 10004.84\n## [1] 10004.85\n## [1] 10004.85\n## [1] 10004.85\n## [1] 10004.85\n## [1] 10004.85\n## [1] 10004.85\n## [1] 10004.85\n## [1] 10004.85\n## [1] 10004.86\n## [1] 10004.86\n## [1] 10004.86\n## [1] 10004.86\n## [1] 10004.86\n## [1] 10004.86\n## [1] 10004.86\n## [1] 10004.87\n## [1] 10004.87\n## [1] 10004.87\n## [1] 10004.87\n## [1] 10004.87\n## [1] 10004.87\n## [1] 10004.87\n## [1] 10004.87\n## [1] 10004.88\n## [1] 10004.88\n## [1] 10004.88\n## [1] 10004.88\n## [1] 10004.88\n## [1] 10004.88\n## [1] 10004.88\n## [1] 10004.88\n## [1] 10004.89\n## [1] 10004.89\n## [1] 10004.89\n## [1] 10004.89\n## [1] 10004.89\n## [1] 10004.89\n## [1] 10004.89\n## [1] 10004.9\n## [1] 10004.9\n## [1] 10004.9\n## [1] 10004.9\n## [1] 10004.9\n## [1] 10004.9\n## [1] 10004.9\n## [1] 10004.9\n## [1] 10004.91\n## [1] 10004.91\n## [1] 10004.91\n## [1] 10004.91\n## [1] 10004.91\n## [1] 10004.91\n## [1] 10004.91\n## [1] 10004.92\n## [1] 10004.92\n## [1] 10004.92\n## [1] 10004.92\n## [1] 10004.92\n## [1] 10004.92\n## [1] 10004.92\n## [1] 10004.92\n## [1] 10004.93\n## [1] 10004.93\n## [1] 10004.93\n## [1] 10004.93\n## [1] 10004.93\n## [1] 10004.93\n## [1] 10004.93\n## [1] 10004.93\n## [1] 10004.94\n## [1] 10004.94\n## [1] 10004.94\n## [1] 10004.94\n## [1] 10004.94\n## [1] 10004.94\n## [1] 10004.94\n## [1] 10004.95\n## [1] 10004.95\n## [1] 10004.95\n## [1] 10004.95\n## [1] 10004.95\n## [1] 10004.95\n## [1] 10004.95\n## [1] 10004.95\n## [1] 10004.96\n## [1] 10004.96\n## [1] 10004.96\n## [1] 10004.96\n## [1] 10004.96\n## [1] 10004.96\n## [1] 10004.96\n## [1] 10004.97\n## [1] 10004.97\n## [1] 10004.97\n## [1] 10004.97\n## [1] 10004.97\n## [1] 10004.97\n## [1] 10004.97\n## [1] 10004.97\n## [1] 10004.98\n## [1] 10004.98\n## [1] 10004.98\n## [1] 10004.98\n## [1] 10004.98\n## [1] 10004.98\n## [1] 10004.98\n## [1] 10004.98\n## [1] 10004.99\n## [1] 10004.99\n## [1] 10004.99\n## [1] 10004.99\n## [1] 10004.99\n## [1] 10004.99\n## [1] 10004.99\n## [1] 10005\n## [1] 10005\n## [1] 10005\n## [1] 10005\n## [1] 10005\n## [1] 10005\n## [1] 10005\n## [1] 10005\n## [1] 10005.01\n## [1] 10005.01\n## [1] 10005.01\n## [1] 10005.01\n## [1] 10005.01\n## [1] 10005.01\n## [1] 10005.01\n## [1] 10005.02\n## [1] 10005.02\n## [1] 10005.02\n## [1] 10005.02\n## [1] 10005.02\n## [1] 10005.02\n## [1] 10005.02\n## [1] 10005.02\n## [1] 10005.03\n## [1] 10005.03\n## [1] 10005.03\n## [1] 10005.03\n## [1] 10005.03\n## [1] 10005.03\n## [1] 10005.03\n## [1] 10005.03\n## [1] 10005.04\n## [1] 10005.04\n## [1] 10005.04\n## [1] 10005.04\n## [1] 10005.04\n## [1] 10005.04\n## [1] 10005.04\n## [1] 10005.05\n## [1] 10005.05\n## [1] 10005.05\n## [1] 10005.05\n## [1] 10005.05\n## [1] 10005.05\n## [1] 10005.05\n## [1] 10005.05\n## [1] 10005.06\n## [1] 10005.06\n## [1] 10005.06\n## [1] 10005.06\n## [1] 10005.06\n## [1] 10005.06\n## [1] 10005.06\n## [1] 10005.07\n## [1] 10005.07\n## [1] 10005.07\n## [1] 10005.07\n## [1] 10005.07\n## [1] 10005.07\n## [1] 10005.07\n## [1] 10005.07\n## [1] 10005.08\n## [1] 10005.08\n## [1] 10005.08\n## [1] 10005.08\n## [1] 10005.08\n## [1] 10005.08\n## [1] 10005.08\n## [1] 10005.08\n## [1] 10005.09\n## [1] 10005.09\n## [1] 10005.09\n## [1] 10005.09\n## [1] 10005.09\n## [1] 10005.09\n## [1] 10005.09\n## [1] 10005.1\n## [1] 10005.1\n## [1] 10005.1\n## [1] 10005.1\n## [1] 10005.1\n## [1] 10005.1\n## [1] 10005.1\n## [1] 10005.1\n## [1] 10005.11\n## [1] 10005.11\n## [1] 10005.11\n## [1] 10005.11\n## [1] 10005.11\n## [1] 10005.11\n## [1] 10005.11\n## [1] 10005.12\n## [1] 10005.12\n## [1] 10005.12\n## [1] 10005.12\n## [1] 10005.12\n## [1] 10005.12\n## [1] 10005.12\n## [1] 10005.12\n## [1] 10005.13\n## [1] 10005.13\n## [1] 10005.13\n## [1] 10005.13\n## [1] 10005.13\n## [1] 10005.13\n## [1] 10005.13\n## [1] 10005.13\n## [1] 10005.14\n## [1] 10005.14\n## [1] 10005.14\n## [1] 10005.14\n## [1] 10005.14\n## [1] 10005.14\n## [1] 10005.14\n## [1] 10005.15\n## [1] 10005.15\n## [1] 10005.15\n## [1] 10005.15\n## [1] 10005.15\n## [1] 10005.15\n## [1] 10005.15\n## [1] 10005.15\n## [1] 10005.16\n## [1] 10005.16\n## [1] 10005.16\n## [1] 10005.16\n## [1] 10005.16\n## [1] 10005.16\n## [1] 10005.16\n## [1] 10005.17\n## [1] 10005.17\n## [1] 10005.17\n## [1] 10005.17\n## [1] 10005.17\n## [1] 10005.17\n## [1] 10005.17\n## [1] 10005.17\n## [1] 10005.18\n## [1] 10005.18\n## [1] 10005.18\n## [1] 10005.18\n## [1] 10005.18\n## [1] 10005.18\n## [1] 10005.18\n## [1] 10005.18\n## [1] 10005.19\n## [1] 10005.19\n## [1] 10005.19\n## [1] 10005.19\n## [1] 10005.19\n## [1] 10005.19\n## [1] 10005.19\n## [1] 10005.2\n## [1] 10005.2\n## [1] 10005.2\n## [1] 10005.2\n## [1] 10005.2\n## [1] 10005.2\n## [1] 10005.2\n## [1] 10005.2\n## [1] 10005.21\n## [1] 10005.21\n## [1] 10005.21\n## [1] 10005.21\n## [1] 10005.21\n## [1] 10005.21\n## [1] 10005.21\n## [1] 10005.21\n## [1] 10005.22\n## [1] 10005.22\n## [1] 10005.22\n## [1] 10005.22\n## [1] 10005.22\n## [1] 10005.22\n## [1] 10005.22\n## [1] 10005.23\n## [1] 10005.23\n## [1] 10005.23\n## [1] 10005.23\n## [1] 10005.23\n## [1] 10005.23\n## [1] 10005.23\n## [1] 10005.23\n## [1] 10005.24\n## [1] 10005.24\n## [1] 10005.24\n## [1] 10005.24\n## [1] 10005.24\n## [1] 10005.24\n## [1] 10005.24\n## [1] 10005.25\n## [1] 10005.25\n## [1] 10005.25\n## [1] 10005.25\n## [1] 10005.25\n## [1] 10005.25\n## [1] 10005.25\n## [1] 10005.25\n## [1] 10005.26\n## [1] 10005.26\n## [1] 10005.26\n## [1] 10005.26\n## [1] 10005.26\n## [1] 10005.26\n## [1] 10005.26\n## [1] 10005.26\n## [1] 10005.27\n## [1] 10005.27\n## [1] 10005.27\n## [1] 10005.27\n## [1] 10005.27\n## [1] 10005.27\n## [1] 10005.27\n## [1] 10005.28\n## [1] 10005.28\n## [1] 10005.28\n## [1] 10005.28\n## [1] 10005.28\n## [1] 10005.28\n## [1] 10005.28\n## [1] 10005.28\n## [1] 10005.29\n## [1] 10005.29\n## [1] 10005.29\n## [1] 10005.29\n## [1] 10005.29\n## [1] 10005.29\n## [1] 10005.29\n## [1] 10005.3\n## [1] 10005.3\n## [1] 10005.3\n## [1] 10005.3\n## [1] 10005.3\n## [1] 10005.3\n## [1] 10005.3\n## [1] 10005.3\n## [1] 10005.31\n## [1] 10005.31\n## [1] 10005.31\n## [1] 10005.31\n## [1] 10005.31\n## [1] 10005.31\n## [1] 10005.31\n## [1] 10005.31\n## [1] 10005.32\n## [1] 10005.32\n## [1] 10005.32\n## [1] 10005.32\n## [1] 10005.32\n## [1] 10005.32\n## [1] 10005.32\n## [1] 10005.33\n## [1] 10005.33\n## [1] 10005.33\n## [1] 10005.33\n## [1] 10005.33\n## [1] 10005.33\n## [1] 10005.33\n## [1] 10005.33\n## [1] 10005.34\n## [1] 10005.34\n## [1] 10005.34\n## [1] 10005.34\n## [1] 10005.34\n## [1] 10005.34\n## [1] 10005.34\n## [1] 10005.35\n## [1] 10005.35\n## [1] 10005.35\n## [1] 10005.35\n## [1] 10005.35\n## [1] 10005.35\n## [1] 10005.35\n## [1] 10005.35\n## [1] 10005.36\n## [1] 10005.36\n## [1] 10005.36\n## [1] 10005.36\n## [1] 10005.36\n## [1] 10005.36\n## [1] 10005.36\n## [1] 10005.36\n## [1] 10005.37\n## [1] 10005.37\n## [1] 10005.37\n## [1] 10005.37\n## [1] 10005.37\n## [1] 10005.37\n## [1] 10005.37\n## [1] 10005.38\n## [1] 10005.38\n## [1] 10005.38\n## [1] 10005.38\n## [1] 10005.38\n## [1] 10005.38\n## [1] 10005.38\n## [1] 10005.38\n## [1] 10005.39\n## [1] 10005.39\n## [1] 10005.39\n## [1] 10005.39\n## [1] 10005.39\n## [1] 10005.39\n## [1] 10005.39\n## [1] 10005.4\n## [1] 10005.4\n## [1] 10005.4\n## [1] 10005.4\n## [1] 10005.4\n## [1] 10005.4\n## [1] 10005.4\n## [1] 10005.4\n## [1] 10005.41\n## [1] 10005.41\n## [1] 10005.41\n## [1] 10005.41\n## [1] 10005.41\n## [1] 10005.41\n## [1] 10005.41\n## [1] 10005.41\n## [1] 10005.42\n## [1] 10005.42\n## [1] 10005.42\n## [1] 10005.42\n## [1] 10005.42\n## [1] 10005.42\n## [1] 10005.42\n## [1] 10005.43\n## [1] 10005.43\n## [1] 10005.43\n## [1] 10005.43\n## [1] 10005.43\n## [1] 10005.43\n## [1] 10005.43\n## [1] 10005.43\n## [1] 10005.44\n## [1] 10005.44\n## [1] 10005.44\n## [1] 10005.44\n## [1] 10005.44\n## [1] 10005.44\n## [1] 10005.44\n## [1] 10005.45\n## [1] 10005.45\n## [1] 10005.45\n## [1] 10005.45\n## [1] 10005.45\n## [1] 10005.45\n## [1] 10005.45\n## [1] 10005.45\n## [1] 10005.46\n## [1] 10005.46\n## [1] 10005.46\n## [1] 10005.46\n## [1] 10005.46\n## [1] 10005.46\n## [1] 10005.46\n## [1] 10005.46\n## [1] 10005.47\n## [1] 10005.47\n## [1] 10005.47\n## [1] 10005.47\n## [1] 10005.47\n## [1] 10005.47\n## [1] 10005.47\n## [1] 10005.48\n## [1] 10005.48\n## [1] 10005.48\n## [1] 10005.48\n## [1] 10005.48\n## [1] 10005.48\n## [1] 10005.48\n## [1] 10005.48\n## [1] 10005.49\n## [1] 10005.49\n## [1] 10005.49\n## [1] 10005.49\n## [1] 10005.49\n## [1] 10005.49\n## [1] 10005.49\n## [1] 10005.5\n## [1] 10005.5\n## [1] 10005.5\n## [1] 10005.5\n## [1] 10005.5\n## [1] 10005.5\n## [1] 10005.5\n## [1] 10005.5\n## [1] 10005.51\n## [1] 10005.51\n## [1] 10005.51\n## [1] 10005.51\n## [1] 10005.51\n## [1] 10005.51\n## [1] 10005.51\n## [1] 10005.51\n## [1] 10005.52\n## [1] 10005.52\n## [1] 10005.52\n## [1] 10005.52\n## [1] 10005.52\n## [1] 10005.52\n## [1] 10005.52\n## [1] 10005.53\n## [1] 10005.53\n## [1] 10005.53\n## [1] 10005.53\n## [1] 10005.53\n## [1] 10005.53\n## [1] 10005.53\n## [1] 10005.53\n## [1] 10005.54\n## [1] 10005.54\n## [1] 10005.54\n## [1] 10005.54\n## [1] 10005.54\n## [1] 10005.54\n## [1] 10005.54\n## [1] 10005.55\n## [1] 10005.55\n## [1] 10005.55\n## [1] 10005.55\n## [1] 10005.55\n## [1] 10005.55\n## [1] 10005.55\n## [1] 10005.55\n## [1] 10005.56\n## [1] 10005.56\n## [1] 10005.56\n## [1] 10005.56\n## [1] 10005.56\n## [1] 10005.56\n## [1] 10005.56\n## [1] 10005.56\n## [1] 10005.57\n## [1] 10005.57\n## [1] 10005.57\n## [1] 10005.57\n## [1] 10005.57\n## [1] 10005.57\n## [1] 10005.57\n## [1] 10005.58\n## [1] 10005.58\n## [1] 10005.58\n## [1] 10005.58\n## [1] 10005.58\n## [1] 10005.58\n## [1] 10005.58\n## [1] 10005.58\n## [1] 10005.59\n## [1] 10005.59\n## [1] 10005.59\n## [1] 10005.59\n## [1] 10005.59\n## [1] 10005.59\n## [1] 10005.59\n## [1] 10005.6\n## [1] 10005.6\n## [1] 10005.6\n## [1] 10005.6\n## [1] 10005.6\n## [1] 10005.6\n## [1] 10005.6\n## [1] 10005.6\n## [1] 10005.61\n## [1] 10005.61\n## [1] 10005.61\n## [1] 10005.61\n## [1] 10005.61\n## [1] 10005.61\n## [1] 10005.61\n## [1] 10005.61\n## [1] 10005.62\n## [1] 10005.62\n## [1] 10005.62\n## [1] 10005.62\n## [1] 10005.62\n## [1] 10005.62\n## [1] 10005.62\n## [1] 10005.63\n## [1] 10005.63\n## [1] 10005.63\n## [1] 10005.63\n## [1] 10005.63\n## [1] 10005.63\n## [1] 10005.63\n## [1] 10005.63\n## [1] 10005.64\n## [1] 10005.64\n## [1] 10005.64\n## [1] 10005.64\n## [1] 10005.64\n## [1] 10005.64\n## [1] 10005.64\n## [1] 10005.64\n## [1] 10005.65\n## [1] 10005.65\n## [1] 10005.65\n## [1] 10005.65\n## [1] 10005.65\n## [1] 10005.65\n## [1] 10005.65\n## [1] 10005.66\n## [1] 10005.66\n## [1] 10005.66\n## [1] 10005.66\n## [1] 10005.66\n## [1] 10005.66\n## [1] 10005.66\n## [1] 10005.66\n## [1] 10005.67\n## [1] 10005.67\n## [1] 10005.67\n## [1] 10005.67\n## [1] 10005.67\n## [1] 10005.67\n## [1] 10005.67\n## [1] 10005.68\n## [1] 10005.68\n## [1] 10005.68\n## [1] 10005.68\n## [1] 10005.68\n## [1] 10005.68\n## [1] 10005.68\n## [1] 10005.68\n## [1] 10005.69\n## [1] 10005.69\n## [1] 10005.69\n## [1] 10005.69\n## [1] 10005.69\n## [1] 10005.69\n## [1] 10005.69\n## [1] 10005.69\n## [1] 10005.7\n## [1] 10005.7\n## [1] 10005.7\n## [1] 10005.7\n## [1] 10005.7\n## [1] 10005.7\n## [1] 10005.7\n## [1] 10005.71\n## [1] 10005.71\n## [1] 10005.71\n## [1] 10005.71\n## [1] 10005.71\n## [1] 10005.71\n## [1] 10005.71\n## [1] 10005.71\n## [1] 10005.72\n## [1] 10005.72\n## [1] 10005.72\n## [1] 10005.72\n## [1] 10005.72\n## [1] 10005.72\n## [1] 10005.72\n## [1] 10005.73\n## [1] 10005.73\n## [1] 10005.73\n## [1] 10005.73\n## [1] 10005.73\n## [1] 10005.73\n## [1] 10005.73\n## [1] 10005.73\n## [1] 10005.74\n## [1] 10005.74\n## [1] 10005.74\n## [1] 10005.74\n## [1] 10005.74\n## [1] 10005.74\n## [1] 10005.74\n## [1] 10005.74\n## [1] 10005.75\n## [1] 10005.75\n## [1] 10005.75\n## [1] 10005.75\n## [1] 10005.75\n## [1] 10005.75\n## [1] 10005.75\n## [1] 10005.76\n## [1] 10005.76\n## [1] 10005.76\n## [1] 10005.76\n## [1] 10005.76\n## [1] 10005.76\n## [1] 10005.76\n## [1] 10005.76\n## [1] 10005.77\n## [1] 10005.77\n## [1] 10005.77\n## [1] 10005.77\n## [1] 10005.77\n## [1] 10005.77\n## [1] 10005.77\n## [1] 10005.78\n## [1] 10005.78\n## [1] 10005.78\n## [1] 10005.78\n## [1] 10005.78\n## [1] 10005.78\n## [1] 10005.78\n## [1] 10005.78\n## [1] 10005.79\n## [1] 10005.79\n## [1] 10005.79\n## [1] 10005.79\n## [1] 10005.79\n## [1] 10005.79\n## [1] 10005.79\n## [1] 10005.79\n## [1] 10005.8\n## [1] 10005.8\n## [1] 10005.8\n## [1] 10005.8\n## [1] 10005.8\n## [1] 10005.8\n## [1] 10005.8\n## [1] 10005.81\n## [1] 10005.81\n## [1] 10005.81\n## [1] 10005.81\n## [1] 10005.81\n## [1] 10005.81\n## [1] 10005.81\n## [1] 10005.81\n## [1] 10005.82\n## [1] 10005.82\n## [1] 10005.82\n## [1] 10005.82\n## [1] 10005.82\n## [1] 10005.82\n## [1] 10005.82\n## [1] 10005.83\n## [1] 10005.83\n## [1] 10005.83\n## [1] 10005.83\n## [1] 10005.83\n## [1] 10005.83\n## [1] 10005.83\n## [1] 10005.83\n## [1] 10005.84\n## [1] 10005.84\n## [1] 10005.84\n## [1] 10005.84\n## [1] 10005.84\n## [1] 10005.84\n## [1] 10005.84\n## [1] 10005.84\n## [1] 10005.85\n## [1] 10005.85\n## [1] 10005.85\n## [1] 10005.85\n## [1] 10005.85\n## [1] 10005.85\n## [1] 10005.85\n## [1] 10005.86\n## [1] 10005.86\n## [1] 10005.86\n## [1] 10005.86\n## [1] 10005.86\n## [1] 10005.86\n## [1] 10005.86\n## [1] 10005.86\n## [1] 10005.87\n## [1] 10005.87\n## [1] 10005.87\n## [1] 10005.87\n## [1] 10005.87\n## [1] 10005.87\n## [1] 10005.87\n## [1] 10005.88\n## [1] 10005.88\n## [1] 10005.88\n## [1] 10005.88\n## [1] 10005.88\n## [1] 10005.88\n## [1] 10005.88\n## [1] 10005.88\n## [1] 10005.89\n## [1] 10005.89\n## [1] 10005.89\n## [1] 10005.89\n## [1] 10005.89\n## [1] 10005.89\n## [1] 10005.89\n## [1] 10005.89\n## [1] 10005.9\n## [1] 10005.9\n## [1] 10005.9\n## [1] 10005.9\n## [1] 10005.9\n## [1] 10005.9\n## [1] 10005.9\n## [1] 10005.91\n## [1] 10005.91\n## [1] 10005.91\n## [1] 10005.91\n## [1] 10005.91\n## [1] 10005.91\n## [1] 10005.91\n## [1] 10005.91\n## [1] 10005.92\n## [1] 10005.92\n## [1] 10005.92\n## [1] 10005.92\n## [1] 10005.92\n## [1] 10005.92\n## [1] 10005.92\n## [1] 10005.93\n## [1] 10005.93\n## [1] 10005.93\n## [1] 10005.93\n## [1] 10005.93\n## [1] 10005.93\n## [1] 10005.93\n## [1] 10005.93\n## [1] 10005.94\n## [1] 10005.94\n## [1] 10005.94\n## [1] 10005.94\n## [1] 10005.94\n## [1] 10005.94\n## [1] 10005.94\n## [1] 10005.94\n## [1] 10005.95\n## [1] 10005.95\n## [1] 10005.95\n## [1] 10005.95\n## [1] 10005.95\n## [1] 10005.95\n## [1] 10005.95\n## [1] 10005.96\n## [1] 10005.96\n## [1] 10005.96\n## [1] 10005.96\n## [1] 10005.96\n## [1] 10005.96\n## [1] 10005.96\n## [1] 10005.96\n## [1] 10005.97\n## [1] 10005.97\n## [1] 10005.97\n## [1] 10005.97\n## [1] 10005.97\n## [1] 10005.97\n## [1] 10005.97\n## [1] 10005.98\n## [1] 10005.98\n## [1] 10005.98\n## [1] 10005.98\n## [1] 10005.98\n## [1] 10005.98\n## [1] 10005.98\n## [1] 10005.98\n## [1] 10005.99\n## [1] 10005.99\n## [1] 10005.99\n## [1] 10005.99\n## [1] 10005.99\n## [1] 10005.99\n## [1] 10005.99\n## [1] 10005.99\n## [1] 10006\n## [1] 10006\n## [1] 10006\n## [1] 10006\n## [1] 10006\n## [1] 10006\n## [1] 10006\n## [1] 10006.01\n## [1] 10006.01\n## [1] 10006.01\n## [1] 10006.01\n## [1] 10006.01\n## [1] 10006.01\n## [1] 10006.01\n## [1] 10006.01\n## [1] 10006.02\n## [1] 10006.02\n## [1] 10006.02\n## [1] 10006.02\n## [1] 10006.02\n## [1] 10006.02\n## [1] 10006.02\n## [1] 10006.02\n## [1] 10006.03\n## [1] 10006.03\n## [1] 10006.03\n## [1] 10006.03\n## [1] 10006.03\n## [1] 10006.03\n## [1] 10006.03\n## [1] 10006.04\n## [1] 10006.04\n## [1] 10006.04\n## [1] 10006.04\n## [1] 10006.04\n## [1] 10006.04\n## [1] 10006.04\n## [1] 10006.04\n## [1] 10006.05\n## [1] 10006.05\n## [1] 10006.05\n## [1] 10006.05\n## [1] 10006.05\n## [1] 10006.05\n## [1] 10006.05\n## [1] 10006.06\n## [1] 10006.06\n## [1] 10006.06\n## [1] 10006.06\n## [1] 10006.06\n## [1] 10006.06\n## [1] 10006.06\n## [1] 10006.06\n## [1] 10006.07\n## [1] 10006.07\n## [1] 10006.07\n## [1] 10006.07\n## [1] 10006.07\n## [1] 10006.07\n## [1] 10006.07\n## [1] 10006.07\n## [1] 10006.08\n## [1] 10006.08\n## [1] 10006.08\n## [1] 10006.08\n## [1] 10006.08\n## [1] 10006.08\n## [1] 10006.08\n## [1] 10006.09\n## [1] 10006.09\n## [1] 10006.09\n## [1] 10006.09\n## [1] 10006.09\n## [1] 10006.09\n## [1] 10006.09\n## [1] 10006.09\n## [1] 10006.1\n## [1] 10006.1\n## [1] 10006.1\n## [1] 10006.1\n## [1] 10006.1\n## [1] 10006.1\n## [1] 10006.1\n## [1] 10006.11\n## [1] 10006.11\n## [1] 10006.11\n## [1] 10006.11\n## [1] 10006.11\n## [1] 10006.11\n## [1] 10006.11\n## [1] 10006.11\n## [1] 10006.12\n## [1] 10006.12\n## [1] 10006.12\n## [1] 10006.12\n## [1] 10006.12\n## [1] 10006.12\n## [1] 10006.12\n## [1] 10006.12\n## [1] 10006.13\n## [1] 10006.13\n## [1] 10006.13\n## [1] 10006.13\n## [1] 10006.13\n## [1] 10006.13\n## [1] 10006.13\n## [1] 10006.14\n## [1] 10006.14\n## [1] 10006.14\n## [1] 10006.14\n## [1] 10006.14\n## [1] 10006.14\n## [1] 10006.14\n## [1] 10006.14\n## [1] 10006.15\n## [1] 10006.15\n## [1] 10006.15\n## [1] 10006.15\n## [1] 10006.15\n## [1] 10006.15\n## [1] 10006.15\n## [1] 10006.16\n## [1] 10006.16\n## [1] 10006.16\n## [1] 10006.16\n## [1] 10006.16\n## [1] 10006.16\n## [1] 10006.16\n## [1] 10006.16\n## [1] 10006.17\n## [1] 10006.17\n## [1] 10006.17\n## [1] 10006.17\n## [1] 10006.17\n## [1] 10006.17\n## [1] 10006.17\n## [1] 10006.17\n## [1] 10006.18\n## [1] 10006.18\n## [1] 10006.18\n## [1] 10006.18\n## [1] 10006.18\n## [1] 10006.18\n## [1] 10006.18\n## [1] 10006.19\n## [1] 10006.19\n## [1] 10006.19\n## [1] 10006.19\n## [1] 10006.19\n## [1] 10006.19\n## [1] 10006.19\n## [1] 10006.19\n## [1] 10006.2\n## [1] 10006.2\n## [1] 10006.2\n## [1] 10006.2\n## [1] 10006.2\n## [1] 10006.2\n## [1] 10006.2\n## [1] 10006.21\n## [1] 10006.21\n## [1] 10006.21\n## [1] 10006.21\n## [1] 10006.21\n## [1] 10006.21\n## [1] 10006.21\n## [1] 10006.21\n## [1] 10006.22\n## [1] 10006.22\n## [1] 10006.22\n## [1] 10006.22\n## [1] 10006.22\n## [1] 10006.22\n## [1] 10006.22\n## [1] 10006.22\n## [1] 10006.23\n## [1] 10006.23\n## [1] 10006.23\n## [1] 10006.23\n## [1] 10006.23\n## [1] 10006.23\n## [1] 10006.23\n## [1] 10006.24\n## [1] 10006.24\n## [1] 10006.24\n## [1] 10006.24\n## [1] 10006.24\n## [1] 10006.24\n## [1] 10006.24\n## [1] 10006.24\n## [1] 10006.25\n## [1] 10006.25\n## [1] 10006.25\n## [1] 10006.25\n## [1] 10006.25\n## [1] 10006.25\n## [1] 10006.25\n## [1] 10006.26\n## [1] 10006.26\n## [1] 10006.26\n## [1] 10006.26\n## [1] 10006.26\n## [1] 10006.26\n## [1] 10006.26\n## [1] 10006.26\n## [1] 10006.27\n## [1] 10006.27\n## [1] 10006.27\n## [1] 10006.27\n## [1] 10006.27\n## [1] 10006.27\n## [1] 10006.27\n## [1] 10006.27\n## [1] 10006.28\n## [1] 10006.28\n## [1] 10006.28\n## [1] 10006.28\n## [1] 10006.28\n## [1] 10006.28\n## [1] 10006.28\n## [1] 10006.29\n## [1] 10006.29\n## [1] 10006.29\n## [1] 10006.29\n## [1] 10006.29\n## [1] 10006.29\n## [1] 10006.29\n## [1] 10006.29\n## [1] 10006.3\n## [1] 10006.3\n## [1] 10006.3\n## [1] 10006.3\n## [1] 10006.3\n## [1] 10006.3\n## [1] 10006.3\n## [1] 10006.31\n## [1] 10006.31\n## [1] 10006.31\n## [1] 10006.31\n## [1] 10006.31\n## [1] 10006.31\n## [1] 10006.31\n## [1] 10006.31\n## [1] 10006.32\n## [1] 10006.32\n## [1] 10006.32\n## [1] 10006.32\n## [1] 10006.32\n## [1] 10006.32\n## [1] 10006.32\n## [1] 10006.32\n## [1] 10006.33\n## [1] 10006.33\n## [1] 10006.33\n## [1] 10006.33\n## [1] 10006.33\n## [1] 10006.33\n## [1] 10006.33\n## [1] 10006.34\n## [1] 10006.34\n## [1] 10006.34\n## [1] 10006.34\n## [1] 10006.34\n## [1] 10006.34\n## [1] 10006.34\n## [1] 10006.34\n## [1] 10006.35\n## [1] 10006.35\n## [1] 10006.35\n## [1] 10006.35\n## [1] 10006.35\n## [1] 10006.35\n## [1] 10006.35\n## [1] 10006.36\n## [1] 10006.36\n## [1] 10006.36\n## [1] 10006.36\n## [1] 10006.36\n## [1] 10006.36\n## [1] 10006.36\n## [1] 10006.36\n## [1] 10006.37\n## [1] 10006.37\n## [1] 10006.37\n## [1] 10006.37\n## [1] 10006.37\n## [1] 10006.37\n## [1] 10006.37\n## [1] 10006.37\n## [1] 10006.38\n## [1] 10006.38\n## [1] 10006.38\n## [1] 10006.38\n## [1] 10006.38\n## [1] 10006.38\n## [1] 10006.38\n## [1] 10006.39\n## [1] 10006.39\n## [1] 10006.39\n## [1] 10006.39\n## [1] 10006.39\n## [1] 10006.39\n## [1] 10006.39\n## [1] 10006.39\n## [1] 10006.4\n## [1] 10006.4\n## [1] 10006.4\n## [1] 10006.4\n## [1] 10006.4\n## [1] 10006.4\n## [1] 10006.4\n## [1] 10006.4\n## [1] 10006.41\n## [1] 10006.41\n## [1] 10006.41\n## [1] 10006.41\n## [1] 10006.41\n## [1] 10006.41\n## [1] 10006.41\n## [1] 10006.42\n## [1] 10006.42\n## [1] 10006.42\n## [1] 10006.42\n## [1] 10006.42\n## [1] 10006.42\n## [1] 10006.42\n## [1] 10006.42\n## [1] 10006.43\n## [1] 10006.43\n## [1] 10006.43\n## [1] 10006.43\n## [1] 10006.43\n## [1] 10006.43\n## [1] 10006.43\n## [1] 10006.44\n## [1] 10006.44\n## [1] 10006.44\n## [1] 10006.44\n## [1] 10006.44\n## [1] 10006.44\n## [1] 10006.44\n## [1] 10006.44\n## [1] 10006.45\n## [1] 10006.45\n## [1] 10006.45\n## [1] 10006.45\n## [1] 10006.45\n## [1] 10006.45\n## [1] 10006.45\n## [1] 10006.45\n## [1] 10006.46\n## [1] 10006.46\n## [1] 10006.46\n## [1] 10006.46\n## [1] 10006.46\n## [1] 10006.46\n## [1] 10006.46\n## [1] 10006.47\n## [1] 10006.47\n## [1] 10006.47\n## [1] 10006.47\n## [1] 10006.47\n## [1] 10006.47\n## [1] 10006.47\n## [1] 10006.47\n## [1] 10006.48\n## [1] 10006.48\n## [1] 10006.48\n## [1] 10006.48\n## [1] 10006.48\n## [1] 10006.48\n## [1] 10006.48\n## [1] 10006.49\n## [1] 10006.49\n## [1] 10006.49\n## [1] 10006.49\n## [1] 10006.49\n## [1] 10006.49\n## [1] 10006.49\n## [1] 10006.49\n## [1] 10006.5\n## [1] 10006.5\n## [1] 10006.5\n## [1] 10006.5\n## [1] 10006.5\n## [1] 10006.5\n## [1] 10006.5\n## [1] 10006.5\n## [1] 10006.51\n## [1] 10006.51\n## [1] 10006.51\n## [1] 10006.51\n## [1] 10006.51\n## [1] 10006.51\n## [1] 10006.51\n## [1] 10006.52\n## [1] 10006.52\n## [1] 10006.52\n## [1] 10006.52\n## [1] 10006.52\n## [1] 10006.52\n## [1] 10006.52\n## [1] 10006.52\n## [1] 10006.53\n## [1] 10006.53\n## [1] 10006.53\n## [1] 10006.53\n## [1] 10006.53\n## [1] 10006.53\n## [1] 10006.53\n## [1] 10006.54\n## [1] 10006.54\n## [1] 10006.54\n## [1] 10006.54\n## [1] 10006.54\n## [1] 10006.54\n## [1] 10006.54\n## [1] 10006.54\n## [1] 10006.55\n## [1] 10006.55\n## [1] 10006.55\n## [1] 10006.55\n## [1] 10006.55\n## [1] 10006.55\n## [1] 10006.55\n## [1] 10006.55\n## [1] 10006.56\n## [1] 10006.56\n## [1] 10006.56\n## [1] 10006.56\n## [1] 10006.56\n## [1] 10006.56\n## [1] 10006.56\n## [1] 10006.57\n## [1] 10006.57\n## [1] 10006.57\n## [1] 10006.57\n## [1] 10006.57\n## [1] 10006.57\n## [1] 10006.57\n## [1] 10006.57\n## [1] 10006.58\n## [1] 10006.58\n## [1] 10006.58\n## [1] 10006.58\n## [1] 10006.58\n## [1] 10006.58\n## [1] 10006.58\n## [1] 10006.59\n## [1] 10006.59\n## [1] 10006.59\n## [1] 10006.59\n## [1] 10006.59\n## [1] 10006.59\n## [1] 10006.59\n## [1] 10006.59\n## [1] 10006.6\n## [1] 10006.6\n## [1] 10006.6\n## [1] 10006.6\n## [1] 10006.6\n## [1] 10006.6\n## [1] 10006.6\n## [1] 10006.6\n## [1] 10006.61\n## [1] 10006.61\n## [1] 10006.61\n## [1] 10006.61\n## [1] 10006.61\n## [1] 10006.61\n## [1] 10006.61\n## [1] 10006.62\n## [1] 10006.62\n## [1] 10006.62\n## [1] 10006.62\n## [1] 10006.62\n## [1] 10006.62\n## [1] 10006.62\n## [1] 10006.62\n## [1] 10006.63\n## [1] 10006.63\n## [1] 10006.63\n## [1] 10006.63\n## [1] 10006.63\n## [1] 10006.63\n## [1] 10006.63\n## [1] 10006.64\n## [1] 10006.64\n## [1] 10006.64\n## [1] 10006.64\n## [1] 10006.64\n## [1] 10006.64\n## [1] 10006.64\n## [1] 10006.64\n## [1] 10006.65\n## [1] 10006.65\n## [1] 10006.65\n## [1] 10006.65\n## [1] 10006.65\n## [1] 10006.65\n## [1] 10006.65\n## [1] 10006.65\n## [1] 10006.66\n## [1] 10006.66\n## [1] 10006.66\n## [1] 10006.66\n## [1] 10006.66\n## [1] 10006.66\n## [1] 10006.66\n## [1] 10006.67\n## [1] 10006.67\n## [1] 10006.67\n## [1] 10006.67\n## [1] 10006.67\n## [1] 10006.67\n## [1] 10006.67\n## [1] 10006.67\n## [1] 10006.68\n## [1] 10006.68\n## [1] 10006.68\n## [1] 10006.68\n## [1] 10006.68\n## [1] 10006.68\n## [1] 10006.68\n## [1] 10006.69\n## [1] 10006.69\n## [1] 10006.69\n## [1] 10006.69\n## [1] 10006.69\n## [1] 10006.69\n## [1] 10006.69\n## [1] 10006.69\n## [1] 10006.7\n## [1] 10006.7\n## [1] 10006.7\n## [1] 10006.7\n## [1] 10006.7\n## [1] 10006.7\n## [1] 10006.7\n## [1] 10006.7\n## [1] 10006.71\n## [1] 10006.71\n## [1] 10006.71\n## [1] 10006.71\n## [1] 10006.71\n## [1] 10006.71\n## [1] 10006.71\n## [1] 10006.72\n## [1] 10006.72\n## [1] 10006.72\n## [1] 10006.72\n## [1] 10006.72\n## [1] 10006.72\n## [1] 10006.72\n## [1] 10006.72\n## [1] 10006.73\n## [1] 10006.73\n## [1] 10006.73\n## [1] 10006.73\n## [1] 10006.73\n## [1] 10006.73\n## [1] 10006.73\n## [1] 10006.74\n## [1] 10006.74\n## [1] 10006.74\n## [1] 10006.74\n## [1] 10006.74\n## [1] 10006.74\n## [1] 10006.74\n## [1] 10006.74\n## [1] 10006.75\n## [1] 10006.75\n## [1] 10006.75\n## [1] 10006.75\n## [1] 10006.75\n## [1] 10006.75\n## [1] 10006.75\n## [1] 10006.75\n## [1] 10006.76\n## [1] 10006.76\n## [1] 10006.76\n## [1] 10006.76\n## [1] 10006.76\n## [1] 10006.76\n## [1] 10006.76\n## [1] 10006.77\n## [1] 10006.77\n## [1] 10006.77\n## [1] 10006.77\n## [1] 10006.77\n## [1] 10006.77\n## [1] 10006.77\n## [1] 10006.77\n## [1] 10006.78\n## [1] 10006.78\n## [1] 10006.78\n## [1] 10006.78\n## [1] 10006.78\n## [1] 10006.78\n## [1] 10006.78\n## [1] 10006.79\n## [1] 10006.79\n## [1] 10006.79\n## [1] 10006.79\n## [1] 10006.79\n## [1] 10006.79\n## [1] 10006.79\n## [1] 10006.79\n## [1] 10006.8\n## [1] 10006.8\n## [1] 10006.8\n## [1] 10006.8\n## [1] 10006.8\n## [1] 10006.8\n## [1] 10006.8\n## [1] 10006.8\n## [1] 10006.81\n## [1] 10006.81\n## [1] 10006.81\n## [1] 10006.81\n## [1] 10006.81\n## [1] 10006.81\n## [1] 10006.81\n## [1] 10006.82\n## [1] 10006.82\n## [1] 10006.82\n## [1] 10006.82\n## [1] 10006.82\n## [1] 10006.82\n## [1] 10006.82\n## [1] 10006.82\n## [1] 10006.83\n## [1] 10006.83\n## [1] 10006.83\n## [1] 10006.83\n## [1] 10006.83\n## [1] 10006.83\n## [1] 10006.83\n## [1] 10006.83\n## [1] 10006.84\n## [1] 10006.84\n## [1] 10006.84\n## [1] 10006.84\n## [1] 10006.84\n## [1] 10006.84\n## [1] 10006.84\n## [1] 10006.85\n## [1] 10006.85\n## [1] 10006.85\n## [1] 10006.85\n## [1] 10006.85\n## [1] 10006.85\n## [1] 10006.85\n## [1] 10006.85\n## [1] 10006.86\n## [1] 10006.86\n## [1] 10006.86\n## [1] 10006.86\n## [1] 10006.86\n## [1] 10006.86\n## [1] 10006.86\n## [1] 10006.87\n## [1] 10006.87\n## [1] 10006.87\n## [1] 10006.87\n## [1] 10006.87\n## [1] 10006.87\n## [1] 10006.87\n## [1] 10006.87\n## [1] 10006.88\n## [1] 10006.88\n## [1] 10006.88\n## [1] 10006.88\n## [1] 10006.88\n## [1] 10006.88\n## [1] 10006.88\n## [1] 10006.88\n## [1] 10006.89\n## [1] 10006.89\n## [1] 10006.89\n## [1] 10006.89\n## [1] 10006.89\n## [1] 10006.89\n## [1] 10006.89\n## [1] 10006.9\n## [1] 10006.9\n## [1] 10006.9\n## [1] 10006.9\n## [1] 10006.9\n## [1] 10006.9\n## [1] 10006.9\n## [1] 10006.9\n## [1] 10006.91\n## [1] 10006.91\n## [1] 10006.91\n## [1] 10006.91\n## [1] 10006.91\n## [1] 10006.91\n## [1] 10006.91\n## [1] 10006.92\n## [1] 10006.92\n## [1] 10006.92\n## [1] 10006.92\n## [1] 10006.92\n## [1] 10006.92\n## [1] 10006.92\n## [1] 10006.92\n## [1] 10006.93\n## [1] 10006.93\n## [1] 10006.93\n## [1] 10006.93\n## [1] 10006.93\n## [1] 10006.93\n## [1] 10006.93\n## [1] 10006.93\n## [1] 10006.94\n## [1] 10006.94\n## [1] 10006.94\n## [1] 10006.94\n## [1] 10006.94\n## [1] 10006.94\n## [1] 10006.94\n## [1] 10006.95\n## [1] 10006.95\n## [1] 10006.95\n## [1] 10006.95\n## [1] 10006.95\n## [1] 10006.95\n## [1] 10006.95\n## [1] 10006.95\n## [1] 10006.96\n## [1] 10006.96\n## [1] 10006.96\n## [1] 10006.96\n## [1] 10006.96\n## [1] 10006.96\n## [1] 10006.96\n## [1] 10006.97\n## [1] 10006.97\n## [1] 10006.97\n## [1] 10006.97\n## [1] 10006.97\n## [1] 10006.97\n## [1] 10006.97\n## [1] 10006.97\n## [1] 10006.98\n## [1] 10006.98\n## [1] 10006.98\n## [1] 10006.98\n## [1] 10006.98\n## [1] 10006.98\n## [1] 10006.98\n## [1] 10006.98\n## [1] 10006.99\n## [1] 10006.99\n## [1] 10006.99\n## [1] 10006.99\n## [1] 10006.99\n## [1] 10006.99\n## [1] 10006.99\n## [1] 10007\n## [1] 10007\n## [1] 10007\n## [1] 10007\n## [1] 10007\n## [1] 10007\n## [1] 10007\n## [1] 10007\n## [1] 10007.01\n## [1] 10007.01\n## [1] 10007.01\n## [1] 10007.01\n## [1] 10007.01\n## [1] 10007.01\n## [1] 10007.01\n## [1] 10007.02\n## [1] 10007.02\n## [1] 10007.02\n## [1] 10007.02\n## [1] 10007.02\n## [1] 10007.02\n## [1] 10007.02\n## [1] 10007.02\n## [1] 10007.03\n## [1] 10007.03\n## [1] 10007.03\n## [1] 10007.03\n## [1] 10007.03\n## [1] 10007.03\n## [1] 10007.03\n## [1] 10007.03\n## [1] 10007.04\n## [1] 10007.04\n## [1] 10007.04\n## [1] 10007.04\n## [1] 10007.04\n## [1] 10007.04\n## [1] 10007.04\n## [1] 10007.05\n## [1] 10007.05\n## [1] 10007.05\n## [1] 10007.05\n## [1] 10007.05\n## [1] 10007.05\n## [1] 10007.05\n## [1] 10007.05\n## [1] 10007.06\n## [1] 10007.06\n## [1] 10007.06\n## [1] 10007.06\n## [1] 10007.06\n## [1] 10007.06\n## [1] 10007.06\n## [1] 10007.07\n## [1] 10007.07\n## [1] 10007.07\n## [1] 10007.07\n## [1] 10007.07\n## [1] 10007.07\n## [1] 10007.07\n## [1] 10007.07\n## [1] 10007.08\n## [1] 10007.08\n## [1] 10007.08\n## [1] 10007.08\n## [1] 10007.08\n## [1] 10007.08\n## [1] 10007.08\n## [1] 10007.08\n## [1] 10007.09\n## [1] 10007.09\n## [1] 10007.09\n## [1] 10007.09\n## [1] 10007.09\n## [1] 10007.09\n## [1] 10007.09\n## [1] 10007.1\n## [1] 10007.1\n## [1] 10007.1\n## [1] 10007.1\n## [1] 10007.1\n## [1] 10007.1\n## [1] 10007.1\n## [1] 10007.1\n## [1] 10007.11\n## [1] 10007.11\n## [1] 10007.11\n## [1] 10007.11\n## [1] 10007.11\n## [1] 10007.11\n## [1] 10007.11\n## [1] 10007.12\n## [1] 10007.12\n## [1] 10007.12\n## [1] 10007.12\n## [1] 10007.12\n## [1] 10007.12\n## [1] 10007.12\n## [1] 10007.12\n## [1] 10007.13\n## [1] 10007.13\n## [1] 10007.13\n## [1] 10007.13\n## [1] 10007.13\n## [1] 10007.13\n## [1] 10007.13\n## [1] 10007.13\n## [1] 10007.14\n## [1] 10007.14\n## [1] 10007.14\n## [1] 10007.14\n## [1] 10007.14\n## [1] 10007.14\n## [1] 10007.14\n## [1] 10007.15\n## [1] 10007.15\n## [1] 10007.15\n## [1] 10007.15\n## [1] 10007.15\n## [1] 10007.15\n## [1] 10007.15\n## [1] 10007.15\n## [1] 10007.16\n## [1] 10007.16\n## [1] 10007.16\n## [1] 10007.16\n## [1] 10007.16\n## [1] 10007.16\n## [1] 10007.16\n## [1] 10007.17\n## [1] 10007.17\n## [1] 10007.17\n## [1] 10007.17\n## [1] 10007.17\n## [1] 10007.17\n## [1] 10007.17\n## [1] 10007.17\n## [1] 10007.18\n## [1] 10007.18\n## [1] 10007.18\n## [1] 10007.18\n## [1] 10007.18\n## [1] 10007.18\n## [1] 10007.18\n## [1] 10007.18\n## [1] 10007.19\n## [1] 10007.19\n## [1] 10007.19\n## [1] 10007.19\n## [1] 10007.19\n## [1] 10007.19\n## [1] 10007.19\n## [1] 10007.2\n## [1] 10007.2\n## [1] 10007.2\n## [1] 10007.2\n## [1] 10007.2\n## [1] 10007.2\n## [1] 10007.2\n## [1] 10007.2\n## [1] 10007.21\n## [1] 10007.21\n## [1] 10007.21\n## [1] 10007.21\n## [1] 10007.21\n## [1] 10007.21\n## [1] 10007.21\n## [1] 10007.21\n## [1] 10007.22\n## [1] 10007.22\n## [1] 10007.22\n## [1] 10007.22\n## [1] 10007.22\n## [1] 10007.22\n## [1] 10007.22\n## [1] 10007.23\n## [1] 10007.23\n## [1] 10007.23\n## [1] 10007.23\n## [1] 10007.23\n## [1] 10007.23\n## [1] 10007.23\n## [1] 10007.23\n## [1] 10007.24\n## [1] 10007.24\n## [1] 10007.24\n## [1] 10007.24\n## [1] 10007.24\n## [1] 10007.24\n## [1] 10007.24\n## [1] 10007.25\n## [1] 10007.25\n## [1] 10007.25\n## [1] 10007.25\n## [1] 10007.25\n## [1] 10007.25\n## [1] 10007.25\n## [1] 10007.25\n## [1] 10007.26\n## [1] 10007.26\n## [1] 10007.26\n## [1] 10007.26\n## [1] 10007.26\n## [1] 10007.26\n## [1] 10007.26\n## [1] 10007.26\n## [1] 10007.27\n## [1] 10007.27\n## [1] 10007.27\n## [1] 10007.27\n## [1] 10007.27\n## [1] 10007.27\n## [1] 10007.27\n## [1] 10007.28\n## [1] 10007.28\n## [1] 10007.28\n## [1] 10007.28\n## [1] 10007.28\n## [1] 10007.28\n## [1] 10007.28\n## [1] 10007.28\n## [1] 10007.29\n## [1] 10007.29\n## [1] 10007.29\n## [1] 10007.29\n## [1] 10007.29\n## [1] 10007.29\n## [1] 10007.29\n## [1] 10007.3\n## [1] 10007.3\n## [1] 10007.3\n## [1] 10007.3\n## [1] 10007.3\n## [1] 10007.3\n## [1] 10007.3\n## [1] 10007.3\n## [1] 10007.31\n## [1] 10007.31\n## [1] 10007.31\n## [1] 10007.31\n## [1] 10007.31\n## [1] 10007.31\n## [1] 10007.31\n## [1] 10007.31\n## [1] 10007.32\n## [1] 10007.32\n## [1] 10007.32\n## [1] 10007.32\n## [1] 10007.32\n## [1] 10007.32\n## [1] 10007.32\n## [1] 10007.33\n## [1] 10007.33\n## [1] 10007.33\n## [1] 10007.33\n## [1] 10007.33\n## [1] 10007.33\n## [1] 10007.33\n## [1] 10007.33\n## [1] 10007.34\n## [1] 10007.34\n## [1] 10007.34\n## [1] 10007.34\n## [1] 10007.34\n## [1] 10007.34\n## [1] 10007.34\n## [1] 10007.35\n## [1] 10007.35\n## [1] 10007.35\n## [1] 10007.35\n## [1] 10007.35\n## [1] 10007.35\n## [1] 10007.35\n## [1] 10007.35\n## [1] 10007.36\n## [1] 10007.36\n## [1] 10007.36\n## [1] 10007.36\n## [1] 10007.36\n## [1] 10007.36\n## [1] 10007.36\n## [1] 10007.36\n## [1] 10007.37\n## [1] 10007.37\n## [1] 10007.37\n## [1] 10007.37\n## [1] 10007.37\n## [1] 10007.37\n## [1] 10007.37\n## [1] 10007.38\n## [1] 10007.38\n## [1] 10007.38\n## [1] 10007.38\n## [1] 10007.38\n## [1] 10007.38\n## [1] 10007.38\n## [1] 10007.38\n## [1] 10007.39\n## [1] 10007.39\n## [1] 10007.39\n## [1] 10007.39\n## [1] 10007.39\n## [1] 10007.39\n## [1] 10007.39\n## [1] 10007.4\n## [1] 10007.4\n## [1] 10007.4\n## [1] 10007.4\n## [1] 10007.4\n## [1] 10007.4\n## [1] 10007.4\n## [1] 10007.4\n## [1] 10007.41\n## [1] 10007.41\n## [1] 10007.41\n## [1] 10007.41\n## [1] 10007.41\n## [1] 10007.41\n## [1] 10007.41\n## [1] 10007.41\n## [1] 10007.42\n## [1] 10007.42\n## [1] 10007.42\n## [1] 10007.42\n## [1] 10007.42\n## [1] 10007.42\n## [1] 10007.42\n## [1] 10007.43\n## [1] 10007.43\n## [1] 10007.43\n## [1] 10007.43\n## [1] 10007.43\n## [1] 10007.43\n## [1] 10007.43\n## [1] 10007.43\n## [1] 10007.44\n## [1] 10007.44\n## [1] 10007.44\n## [1] 10007.44\n## [1] 10007.44\n## [1] 10007.44\n## [1] 10007.44\n## [1] 10007.45\n## [1] 10007.45\n## [1] 10007.45\n## [1] 10007.45\n## [1] 10007.45\n## [1] 10007.45\n## [1] 10007.45\n## [1] 10007.45\n## [1] 10007.46\n## [1] 10007.46\n## [1] 10007.46\n## [1] 10007.46\n## [1] 10007.46\n## [1] 10007.46\n## [1] 10007.46\n## [1] 10007.46\n## [1] 10007.47\n## [1] 10007.47\n## [1] 10007.47\n## [1] 10007.47\n## [1] 10007.47\n## [1] 10007.47\n## [1] 10007.47\n## [1] 10007.48\n## [1] 10007.48\n## [1] 10007.48\n## [1] 10007.48\n## [1] 10007.48\n## [1] 10007.48\n## [1] 10007.48\n## [1] 10007.48\n## [1] 10007.49\n## [1] 10007.49\n## [1] 10007.49\n## [1] 10007.49\n## [1] 10007.49\n## [1] 10007.49\n## [1] 10007.49\n## [1] 10007.5\n## [1] 10007.5\n## [1] 10007.5\n## [1] 10007.5\n## [1] 10007.5\n## [1] 10007.5\n## [1] 10007.5\n## [1] 10007.5\n## [1] 10007.51\n## [1] 10007.51\n## [1] 10007.51\n## [1] 10007.51\n## [1] 10007.51\n## [1] 10007.51\n## [1] 10007.51\n## [1] 10007.51\n## [1] 10007.52\n## [1] 10007.52\n## [1] 10007.52\n## [1] 10007.52\n## [1] 10007.52\n## [1] 10007.52\n## [1] 10007.52\n## [1] 10007.53\n## [1] 10007.53\n## [1] 10007.53\n## [1] 10007.53\n## [1] 10007.53\n## [1] 10007.53\n## [1] 10007.53\n## [1] 10007.53\n## [1] 10007.54\n## [1] 10007.54\n## [1] 10007.54\n## [1] 10007.54\n## [1] 10007.54\n## [1] 10007.54\n## [1] 10007.54\n## [1] 10007.55\n## [1] 10007.55\n## [1] 10007.55\n## [1] 10007.55\n## [1] 10007.55\n## [1] 10007.55\n## [1] 10007.55\n## [1] 10007.55\n## [1] 10007.56\n## [1] 10007.56\n## [1] 10007.56\n## [1] 10007.56\n## [1] 10007.56\n## [1] 10007.56\n## [1] 10007.56\n## [1] 10007.56\n## [1] 10007.57\n## [1] 10007.57\n## [1] 10007.57\n## [1] 10007.57\n## [1] 10007.57\n## [1] 10007.57\n## [1] 10007.57\n## [1] 10007.58\n## [1] 10007.58\n## [1] 10007.58\n## [1] 10007.58\n## [1] 10007.58\n## [1] 10007.58\n## [1] 10007.58\n## [1] 10007.58\n## [1] 10007.59\n## [1] 10007.59\n## [1] 10007.59\n## [1] 10007.59\n## [1] 10007.59\n## [1] 10007.59\n## [1] 10007.59\n## [1] 10007.6\n## [1] 10007.6\n## [1] 10007.6\n## [1] 10007.6\n## [1] 10007.6\n## [1] 10007.6\n## [1] 10007.6\n## [1] 10007.6\n## [1] 10007.61\n## [1] 10007.61\n## [1] 10007.61\n## [1] 10007.61\n## [1] 10007.61\n## [1] 10007.61\n## [1] 10007.61\n## [1] 10007.61\n## [1] 10007.62\n## [1] 10007.62\n## [1] 10007.62\n## [1] 10007.62\n## [1] 10007.62\n## [1] 10007.62\n## [1] 10007.62\n## [1] 10007.63\n## [1] 10007.63\n## [1] 10007.63\n## [1] 10007.63\n## [1] 10007.63\n## [1] 10007.63\n## [1] 10007.63\n## [1] 10007.63\n## [1] 10007.64\n## [1] 10007.64\n## [1] 10007.64\n## [1] 10007.64\n## [1] 10007.64\n## [1] 10007.64\n## [1] 10007.64\n## [1] 10007.64\n## [1] 10007.65\n## [1] 10007.65\n## [1] 10007.65\n## [1] 10007.65\n## [1] 10007.65\n## [1] 10007.65\n## [1] 10007.65\n## [1] 10007.66\n## [1] 10007.66\n## [1] 10007.66\n## [1] 10007.66\n## [1] 10007.66\n## [1] 10007.66\n## [1] 10007.66\n## [1] 10007.66\n## [1] 10007.67\n## [1] 10007.67\n## [1] 10007.67\n## [1] 10007.67\n## [1] 10007.67\n## [1] 10007.67\n## [1] 10007.67\n## [1] 10007.68\n## [1] 10007.68\n## [1] 10007.68\n## [1] 10007.68\n## [1] 10007.68\n## [1] 10007.68\n## [1] 10007.68\n## [1] 10007.68\n## [1] 10007.69\n## [1] 10007.69\n## [1] 10007.69\n## [1] 10007.69\n## [1] 10007.69\n## [1] 10007.69\n## [1] 10007.69\n## [1] 10007.69\n## [1] 10007.7\n## [1] 10007.7\n## [1] 10007.7\n## [1] 10007.7\n## [1] 10007.7\n## [1] 10007.7\n## [1] 10007.7\n## [1] 10007.71\n## [1] 10007.71\n## [1] 10007.71\n## [1] 10007.71\n## [1] 10007.71\n## [1] 10007.71\n## [1] 10007.71\n## [1] 10007.71\n## [1] 10007.72\n## [1] 10007.72\n## [1] 10007.72\n## [1] 10007.72\n## [1] 10007.72\n## [1] 10007.72\n## [1] 10007.72\n## [1] 10007.73\n## [1] 10007.73\n## [1] 10007.73\n## [1] 10007.73\n## [1] 10007.73\n## [1] 10007.73\n## [1] 10007.73\n## [1] 10007.73\n## [1] 10007.74\n## [1] 10007.74\n## [1] 10007.74\n## [1] 10007.74\n## [1] 10007.74\n## [1] 10007.74\n## [1] 10007.74\n## [1] 10007.74\n## [1] 10007.75\n## [1] 10007.75\n## [1] 10007.75\n## [1] 10007.75\n## [1] 10007.75\n## [1] 10007.75\n## [1] 10007.75\n## [1] 10007.76\n## [1] 10007.76\n## [1] 10007.76\n## [1] 10007.76\n## [1] 10007.76\n## [1] 10007.76\n## [1] 10007.76\n## [1] 10007.76\n## [1] 10007.77\n## [1] 10007.77\n## [1] 10007.77\n## [1] 10007.77\n## [1] 10007.77\n## [1] 10007.77\n## [1] 10007.77\n## [1] 10007.78\n## [1] 10007.78\n## [1] 10007.78\n## [1] 10007.78\n## [1] 10007.78\n## [1] 10007.78\n## [1] 10007.78\n## [1] 10007.78\n## [1] 10007.79\n## [1] 10007.79\n## [1] 10007.79\n## [1] 10007.79\n## [1] 10007.79\n## [1] 10007.79\n## [1] 10007.79\n## [1] 10007.79\n## [1] 10007.8\n## [1] 10007.8\n## [1] 10007.8\n## [1] 10007.8\n## [1] 10007.8\n## [1] 10007.8\n## [1] 10007.8\n## [1] 10007.81\n## [1] 10007.81\n## [1] 10007.81\n## [1] 10007.81\n## [1] 10007.81\n## [1] 10007.81\n## [1] 10007.81\n## [1] 10007.81\n## [1] 10007.82\n## [1] 10007.82\n## [1] 10007.82\n## [1] 10007.82\n## [1] 10007.82\n## [1] 10007.82\n## [1] 10007.82\n## [1] 10007.83\n## [1] 10007.83\n## [1] 10007.83\n## [1] 10007.83\n## [1] 10007.83\n## [1] 10007.83\n## [1] 10007.83\n## [1] 10007.83\n## [1] 10007.84\n## [1] 10007.84\n## [1] 10007.84\n## [1] 10007.84\n## [1] 10007.84\n## [1] 10007.84\n## [1] 10007.84\n## [1] 10007.84\n## [1] 10007.85\n## [1] 10007.85\n## [1] 10007.85\n## [1] 10007.85\n## [1] 10007.85\n## [1] 10007.85\n## [1] 10007.85\n## [1] 10007.86\n## [1] 10007.86\n## [1] 10007.86\n## [1] 10007.86\n## [1] 10007.86\n## [1] 10007.86\n## [1] 10007.86\n## [1] 10007.86\n## [1] 10007.87\n## [1] 10007.87\n## [1] 10007.87\n## [1] 10007.87\n## [1] 10007.87\n## [1] 10007.87\n## [1] 10007.87\n## [1] 10007.88\n## [1] 10007.88\n## [1] 10007.88\n## [1] 10007.88\n## [1] 10007.88\n## [1] 10007.88\n## [1] 10007.88\n## [1] 10007.88\n## [1] 10007.89\n## [1] 10007.89\n## [1] 10007.89\n## [1] 10007.89\n## [1] 10007.89\n## [1] 10007.89\n## [1] 10007.89\n## [1] 10007.89\n## [1] 10007.9\n## [1] 10007.9\n## [1] 10007.9\n## [1] 10007.9\n## [1] 10007.9\n## [1] 10007.9\n## [1] 10007.9\n## [1] 10007.91\n## [1] 10007.91\n## [1] 10007.91\n## [1] 10007.91\n## [1] 10007.91\n## [1] 10007.91\n## [1] 10007.91\n## [1] 10007.91\n## [1] 10007.92\n## [1] 10007.92\n## [1] 10007.92\n## [1] 10007.92\n## [1] 10007.92\n## [1] 10007.92\n## [1] 10007.92\n## [1] 10007.93\n## [1] 10007.93\n## [1] 10007.93\n## [1] 10007.93\n## [1] 10007.93\n## [1] 10007.93\n## [1] 10007.93\n## [1] 10007.93\n## [1] 10007.94\n## [1] 10007.94\n## [1] 10007.94\n## [1] 10007.94\n## [1] 10007.94\n## [1] 10007.94\n## [1] 10007.94\n## [1] 10007.94\n## [1] 10007.95\n## [1] 10007.95\n## [1] 10007.95\n## [1] 10007.95\n## [1] 10007.95\n## [1] 10007.95\n## [1] 10007.95\n## [1] 10007.96\n## [1] 10007.96\n## [1] 10007.96\n## [1] 10007.96\n## [1] 10007.96\n## [1] 10007.96\n## [1] 10007.96\n## [1] 10007.96\n## [1] 10007.97\n## [1] 10007.97\n## [1] 10007.97\n## [1] 10007.97\n## [1] 10007.97\n## [1] 10007.97\n## [1] 10007.97\n## [1] 10007.98\n## [1] 10007.98\n## [1] 10007.98\n## [1] 10007.98\n## [1] 10007.98\n## [1] 10007.98\n## [1] 10007.98\n## [1] 10007.98\n## [1] 10007.99\n## [1] 10007.99\n## [1] 10007.99\n## [1] 10007.99\n## [1] 10007.99\n## [1] 10007.99\n## [1] 10007.99\n## [1] 10007.99\n## [1] 10008\n## [1] 10008\n## [1] 10008\n## [1] 10008\n## [1] 10008\n## [1] 10008\n## [1] 10008\n## [1] 10008.01\n## [1] 10008.01\n## [1] 10008.01\n## [1] 10008.01\n## [1] 10008.01\n## [1] 10008.01\n## [1] 10008.01\n## [1] 10008.01\n## [1] 10008.02\n## [1] 10008.02\n## [1] 10008.02\n## [1] 10008.02\n## [1] 10008.02\n## [1] 10008.02\n## [1] 10008.02\n## [1] 10008.02\n## [1] 10008.03\n## [1] 10008.03\n## [1] 10008.03\n## [1] 10008.03\n## [1] 10008.03\n## [1] 10008.03\n## [1] 10008.03\n## [1] 10008.04\n## [1] 10008.04\n## [1] 10008.04\n## [1] 10008.04\n## [1] 10008.04\n## [1] 10008.04\n## [1] 10008.04\n## [1] 10008.04\n## [1] 10008.05\n## [1] 10008.05\n## [1] 10008.05\n## [1] 10008.05\n## [1] 10008.05\n## [1] 10008.05\n## [1] 10008.05\n## [1] 10008.06\n## [1] 10008.06\n## [1] 10008.06\n## [1] 10008.06\n## [1] 10008.06\n## [1] 10008.06\n## [1] 10008.06\n## [1] 10008.06\n## [1] 10008.07\n## [1] 10008.07\n## [1] 10008.07\n## [1] 10008.07\n## [1] 10008.07\n## [1] 10008.07\n## [1] 10008.07\n## [1] 10008.07\n## [1] 10008.08\n## [1] 10008.08\n## [1] 10008.08\n## [1] 10008.08\n## [1] 10008.08\n## [1] 10008.08\n## [1] 10008.08\n## [1] 10008.09\n## [1] 10008.09\n## [1] 10008.09\n## [1] 10008.09\n## [1] 10008.09\n## [1] 10008.09\n## [1] 10008.09\n## [1] 10008.09\n## [1] 10008.1\n## [1] 10008.1\n## [1] 10008.1\n## [1] 10008.1\n## [1] 10008.1\n## [1] 10008.1\n## [1] 10008.1\n## [1] 10008.11\n## [1] 10008.11\n## [1] 10008.11\n## [1] 10008.11\n## [1] 10008.11\n## [1] 10008.11\n## [1] 10008.11\n## [1] 10008.11\n## [1] 10008.12\n## [1] 10008.12\n## [1] 10008.12\n## [1] 10008.12\n## [1] 10008.12\n## [1] 10008.12\n## [1] 10008.12\n## [1] 10008.12\n## [1] 10008.13\n## [1] 10008.13\n## [1] 10008.13\n## [1] 10008.13\n## [1] 10008.13\n## [1] 10008.13\n## [1] 10008.13\n## [1] 10008.14\n## [1] 10008.14\n## [1] 10008.14\n## [1] 10008.14\n## [1] 10008.14\n## [1] 10008.14\n## [1] 10008.14\n## [1] 10008.14\n## [1] 10008.15\n## [1] 10008.15\n## [1] 10008.15\n## [1] 10008.15\n## [1] 10008.15\n## [1] 10008.15\n## [1] 10008.15\n## [1] 10008.16\n## [1] 10008.16\n## [1] 10008.16\n## [1] 10008.16\n## [1] 10008.16\n## [1] 10008.16\n## [1] 10008.16\n## [1] 10008.16\n## [1] 10008.17\n## [1] 10008.17\n## [1] 10008.17\n## [1] 10008.17\n## [1] 10008.17\n## [1] 10008.17\n## [1] 10008.17\n## [1] 10008.17\n## [1] 10008.18\n## [1] 10008.18\n## [1] 10008.18\n## [1] 10008.18\n## [1] 10008.18\n## [1] 10008.18\n## [1] 10008.18\n## [1] 10008.19\n## [1] 10008.19\n## [1] 10008.19\n## [1] 10008.19\n## [1] 10008.19\n## [1] 10008.19\n## [1] 10008.19\n## [1] 10008.19\n## [1] 10008.2\n## [1] 10008.2\n## [1] 10008.2\n## [1] 10008.2\n## [1] 10008.2\n## [1] 10008.2\n## [1] 10008.2\n## [1] 10008.21\n## [1] 10008.21\n## [1] 10008.21\n## [1] 10008.21\n## [1] 10008.21\n## [1] 10008.21\n## [1] 10008.21\n## [1] 10008.21\n## [1] 10008.22\n## [1] 10008.22\n## [1] 10008.22\n## [1] 10008.22\n## [1] 10008.22\n## [1] 10008.22\n## [1] 10008.22\n## [1] 10008.22\n## [1] 10008.23\n## [1] 10008.23\n## [1] 10008.23\n## [1] 10008.23\n## [1] 10008.23\n## [1] 10008.23\n## [1] 10008.23\n## [1] 10008.24\n## [1] 10008.24\n## [1] 10008.24\n## [1] 10008.24\n## [1] 10008.24\n## [1] 10008.24\n## [1] 10008.24\n## [1] 10008.24\n## [1] 10008.25\n## [1] 10008.25\n## [1] 10008.25\n## [1] 10008.25\n## [1] 10008.25\n## [1] 10008.25\n## [1] 10008.25\n## [1] 10008.26\n## [1] 10008.26\n## [1] 10008.26\n## [1] 10008.26\n## [1] 10008.26\n## [1] 10008.26\n## [1] 10008.26\n## [1] 10008.26\n## [1] 10008.27\n## [1] 10008.27\n## [1] 10008.27\n## [1] 10008.27\n## [1] 10008.27\n## [1] 10008.27\n## [1] 10008.27\n## [1] 10008.27\n## [1] 10008.28\n## [1] 10008.28\n## [1] 10008.28\n## [1] 10008.28\n## [1] 10008.28\n## [1] 10008.28\n## [1] 10008.28\n## [1] 10008.29\n## [1] 10008.29\n## [1] 10008.29\n## [1] 10008.29\n## [1] 10008.29\n## [1] 10008.29\n## [1] 10008.29\n## [1] 10008.29\n## [1] 10008.3\n## [1] 10008.3\n## [1] 10008.3\n## [1] 10008.3\n## [1] 10008.3\n## [1] 10008.3\n## [1] 10008.3\n## [1] 10008.31\n## [1] 10008.31\n## [1] 10008.31\n## [1] 10008.31\n## [1] 10008.31\n## [1] 10008.31\n## [1] 10008.31\n## [1] 10008.31\n## [1] 10008.32\n## [1] 10008.32\n## [1] 10008.32\n## [1] 10008.32\n## [1] 10008.32\n## [1] 10008.32\n## [1] 10008.32\n## [1] 10008.32\n## [1] 10008.33\n## [1] 10008.33\n## [1] 10008.33\n## [1] 10008.33\n## [1] 10008.33\n## [1] 10008.33\n## [1] 10008.33\n## [1] 10008.34\n## [1] 10008.34\n## [1] 10008.34\n## [1] 10008.34\n## [1] 10008.34\n## [1] 10008.34\n## [1] 10008.34\n## [1] 10008.34\n## [1] 10008.35\n## [1] 10008.35\n## [1] 10008.35\n## [1] 10008.35\n## [1] 10008.35\n## [1] 10008.35\n## [1] 10008.35\n## [1] 10008.36\n## [1] 10008.36\n## [1] 10008.36\n## [1] 10008.36\n## [1] 10008.36\n## [1] 10008.36\n## [1] 10008.36\n## [1] 10008.36\n## [1] 10008.37\n## [1] 10008.37\n## [1] 10008.37\n## [1] 10008.37\n## [1] 10008.37\n## [1] 10008.37\n## [1] 10008.37\n## [1] 10008.37\n## [1] 10008.38\n## [1] 10008.38\n## [1] 10008.38\n## [1] 10008.38\n## [1] 10008.38\n## [1] 10008.38\n## [1] 10008.38\n## [1] 10008.39\n## [1] 10008.39\n## [1] 10008.39\n## [1] 10008.39\n## [1] 10008.39\n## [1] 10008.39\n## [1] 10008.39\n## [1] 10008.39\n## [1] 10008.4\n## [1] 10008.4\n## [1] 10008.4\n## [1] 10008.4\n## [1] 10008.4\n## [1] 10008.4\n## [1] 10008.4\n## [1] 10008.4\n## [1] 10008.41\n## [1] 10008.41\n## [1] 10008.41\n## [1] 10008.41\n## [1] 10008.41\n## [1] 10008.41\n## [1] 10008.41\n## [1] 10008.42\n## [1] 10008.42\n## [1] 10008.42\n## [1] 10008.42\n## [1] 10008.42\n## [1] 10008.42\n## [1] 10008.42\n## [1] 10008.42\n## [1] 10008.43\n## [1] 10008.43\n## [1] 10008.43\n## [1] 10008.43\n## [1] 10008.43\n## [1] 10008.43\n## [1] 10008.43\n## [1] 10008.44\n## [1] 10008.44\n## [1] 10008.44\n## [1] 10008.44\n## [1] 10008.44\n## [1] 10008.44\n## [1] 10008.44\n## [1] 10008.44\n## [1] 10008.45\n## [1] 10008.45\n## [1] 10008.45\n## [1] 10008.45\n## [1] 10008.45\n## [1] 10008.45\n## [1] 10008.45\n## [1] 10008.45\n## [1] 10008.46\n## [1] 10008.46\n## [1] 10008.46\n## [1] 10008.46\n## [1] 10008.46\n## [1] 10008.46\n## [1] 10008.46\n## [1] 10008.47\n## [1] 10008.47\n## [1] 10008.47\n## [1] 10008.47\n## [1] 10008.47\n## [1] 10008.47\n## [1] 10008.47\n## [1] 10008.47\n## [1] 10008.48\n## [1] 10008.48\n## [1] 10008.48\n## [1] 10008.48\n## [1] 10008.48\n## [1] 10008.48\n## [1] 10008.48\n## [1] 10008.49\n## [1] 10008.49\n## [1] 10008.49\n## [1] 10008.49\n## [1] 10008.49\n## [1] 10008.49\n## [1] 10008.49\n## [1] 10008.49\n## [1] 10008.5\n## [1] 10008.5\n## [1] 10008.5\n## [1] 10008.5\n## [1] 10008.5\n## [1] 10008.5\n## [1] 10008.5\n## [1] 10008.5\n## [1] 10008.51\n## [1] 10008.51\n## [1] 10008.51\n## [1] 10008.51\n## [1] 10008.51\n## [1] 10008.51\n## [1] 10008.51\n## [1] 10008.52\n## [1] 10008.52\n## [1] 10008.52\n## [1] 10008.52\n## [1] 10008.52\n## [1] 10008.52\n## [1] 10008.52\n## [1] 10008.52\n## [1] 10008.53\n## [1] 10008.53\n## [1] 10008.53\n## [1] 10008.53\n## [1] 10008.53\n## [1] 10008.53\n## [1] 10008.53\n## [1] 10008.54\n## [1] 10008.54\n## [1] 10008.54\n## [1] 10008.54\n## [1] 10008.54\n## [1] 10008.54\n## [1] 10008.54\n## [1] 10008.54\n## [1] 10008.55\n## [1] 10008.55\n## [1] 10008.55\n## [1] 10008.55\n## [1] 10008.55\n## [1] 10008.55\n## [1] 10008.55\n## [1] 10008.55\n## [1] 10008.56\n## [1] 10008.56\n## [1] 10008.56\n## [1] 10008.56\n## [1] 10008.56\n## [1] 10008.56\n## [1] 10008.56\n## [1] 10008.57\n## [1] 10008.57\n## [1] 10008.57\n## [1] 10008.57\n## [1] 10008.57\n## [1] 10008.57\n## [1] 10008.57\n## [1] 10008.57\n## [1] 10008.58\n## [1] 10008.58\n## [1] 10008.58\n## [1] 10008.58\n## [1] 10008.58\n## [1] 10008.58\n## [1] 10008.58\n## [1] 10008.59\n## [1] 10008.59\n## [1] 10008.59\n## [1] 10008.59\n## [1] 10008.59\n## [1] 10008.59\n## [1] 10008.59\n## [1] 10008.59\n## [1] 10008.6\n## [1] 10008.6\n## [1] 10008.6\n## [1] 10008.6\n## [1] 10008.6\n## [1] 10008.6\n## [1] 10008.6\n## [1] 10008.6\n## [1] 10008.61\n## [1] 10008.61\n## [1] 10008.61\n## [1] 10008.61\n## [1] 10008.61\n## [1] 10008.61\n## [1] 10008.61\n## [1] 10008.62\n## [1] 10008.62\n## [1] 10008.62\n## [1] 10008.62\n## [1] 10008.62\n## [1] 10008.62\n## [1] 10008.62\n## [1] 10008.62\n## [1] 10008.63\n## [1] 10008.63\n## [1] 10008.63\n## [1] 10008.63\n## [1] 10008.63\n## [1] 10008.63\n## [1] 10008.63\n## [1] 10008.64\n## [1] 10008.64\n## [1] 10008.64\n## [1] 10008.64\n## [1] 10008.64\n## [1] 10008.64\n## [1] 10008.64\n## [1] 10008.64\n## [1] 10008.65\n## [1] 10008.65\n## [1] 10008.65\n## [1] 10008.65\n## [1] 10008.65\n## [1] 10008.65\n## [1] 10008.65\n## [1] 10008.65\n## [1] 10008.66\n## [1] 10008.66\n## [1] 10008.66\n## [1] 10008.66\n## [1] 10008.66\n## [1] 10008.66\n## [1] 10008.66\n## [1] 10008.67\n## [1] 10008.67\n## [1] 10008.67\n## [1] 10008.67\n## [1] 10008.67\n## [1] 10008.67\n## [1] 10008.67\n## [1] 10008.67\n## [1] 10008.68\n## [1] 10008.68\n## [1] 10008.68\n## [1] 10008.68\n## [1] 10008.68\n## [1] 10008.68\n## [1] 10008.68\n## [1] 10008.69\n## [1] 10008.69\n## [1] 10008.69\n## [1] 10008.69\n## [1] 10008.69\n## [1] 10008.69\n## [1] 10008.69\n## [1] 10008.69\n## [1] 10008.7\n## [1] 10008.7\n## [1] 10008.7\n## [1] 10008.7\n## [1] 10008.7\n## [1] 10008.7\n## [1] 10008.7\n## [1] 10008.7\n## [1] 10008.71\n## [1] 10008.71\n## [1] 10008.71\n## [1] 10008.71\n## [1] 10008.71\n## [1] 10008.71\n## [1] 10008.71\n## [1] 10008.72\n## [1] 10008.72\n## [1] 10008.72\n## [1] 10008.72\n## [1] 10008.72\n## [1] 10008.72\n## [1] 10008.72\n## [1] 10008.72\n## [1] 10008.73\n## [1] 10008.73\n## [1] 10008.73\n## [1] 10008.73\n## [1] 10008.73\n## [1] 10008.73\n## [1] 10008.73\n## [1] 10008.74\n## [1] 10008.74\n## [1] 10008.74\n## [1] 10008.74\n## [1] 10008.74\n## [1] 10008.74\n## [1] 10008.74\n## [1] 10008.74\n## [1] 10008.75\n## [1] 10008.75\n## [1] 10008.75\n## [1] 10008.75\n## [1] 10008.75\n## [1] 10008.75\n## [1] 10008.75\n## [1] 10008.75\n## [1] 10008.76\n## [1] 10008.76\n## [1] 10008.76\n## [1] 10008.76\n## [1] 10008.76\n## [1] 10008.76\n## [1] 10008.76\n## [1] 10008.77\n## [1] 10008.77\n## [1] 10008.77\n## [1] 10008.77\n## [1] 10008.77\n## [1] 10008.77\n## [1] 10008.77\n## [1] 10008.77\n## [1] 10008.78\n## [1] 10008.78\n## [1] 10008.78\n## [1] 10008.78\n## [1] 10008.78\n## [1] 10008.78\n## [1] 10008.78\n## [1] 10008.79\n## [1] 10008.79\n## [1] 10008.79\n## [1] 10008.79\n## [1] 10008.79\n## [1] 10008.79\n## [1] 10008.79\n## [1] 10008.79\n## [1] 10008.8\n## [1] 10008.8\n## [1] 10008.8\n## [1] 10008.8\n## [1] 10008.8\n## [1] 10008.8\n## [1] 10008.8\n## [1] 10008.8\n## [1] 10008.81\n## [1] 10008.81\n## [1] 10008.81\n## [1] 10008.81\n## [1] 10008.81\n## [1] 10008.81\n## [1] 10008.81\n## [1] 10008.82\n## [1] 10008.82\n## [1] 10008.82\n## [1] 10008.82\n## [1] 10008.82\n## [1] 10008.82\n## [1] 10008.82\n## [1] 10008.82\n## [1] 10008.83\n## [1] 10008.83\n## [1] 10008.83\n## [1] 10008.83\n## [1] 10008.83\n## [1] 10008.83\n## [1] 10008.83\n## [1] 10008.83\n## [1] 10008.84\n## [1] 10008.84\n## [1] 10008.84\n## [1] 10008.84\n## [1] 10008.84\n## [1] 10008.84\n## [1] 10008.84\n## [1] 10008.85\n## [1] 10008.85\n## [1] 10008.85\n## [1] 10008.85\n## [1] 10008.85\n## [1] 10008.85\n## [1] 10008.85\n## [1] 10008.85\n## [1] 10008.86\n## [1] 10008.86\n## [1] 10008.86\n## [1] 10008.86\n## [1] 10008.86\n## [1] 10008.86\n## [1] 10008.86\n## [1] 10008.87\n## [1] 10008.87\n## [1] 10008.87\n## [1] 10008.87\n## [1] 10008.87\n## [1] 10008.87\n## [1] 10008.87\n## [1] 10008.87\n## [1] 10008.88\n## [1] 10008.88\n## [1] 10008.88\n## [1] 10008.88\n## [1] 10008.88\n## [1] 10008.88\n## [1] 10008.88\n## [1] 10008.88\n## [1] 10008.89\n## [1] 10008.89\n## [1] 10008.89\n## [1] 10008.89\n## [1] 10008.89\n## [1] 10008.89\n## [1] 10008.89\n## [1] 10008.9\n## [1] 10008.9\n## [1] 10008.9\n## [1] 10008.9\n## [1] 10008.9\n## [1] 10008.9\n## [1] 10008.9\n## [1] 10008.9\n## [1] 10008.91\n## [1] 10008.91\n## [1] 10008.91\n## [1] 10008.91\n## [1] 10008.91\n## [1] 10008.91\n## [1] 10008.91\n## [1] 10008.92\n## [1] 10008.92\n## [1] 10008.92\n## [1] 10008.92\n## [1] 10008.92\n## [1] 10008.92\n## [1] 10008.92\n## [1] 10008.92\n## [1] 10008.93\n## [1] 10008.93\n## [1] 10008.93\n## [1] 10008.93\n## [1] 10008.93\n## [1] 10008.93\n## [1] 10008.93\n## [1] 10008.93\n## [1] 10008.94\n## [1] 10008.94\n## [1] 10008.94\n## [1] 10008.94\n## [1] 10008.94\n## [1] 10008.94\n## [1] 10008.94\n## [1] 10008.95\n## [1] 10008.95\n## [1] 10008.95\n## [1] 10008.95\n## [1] 10008.95\n## [1] 10008.95\n## [1] 10008.95\n## [1] 10008.95\n## [1] 10008.96\n## [1] 10008.96\n## [1] 10008.96\n## [1] 10008.96\n## [1] 10008.96\n## [1] 10008.96\n## [1] 10008.96\n## [1] 10008.97\n## [1] 10008.97\n## [1] 10008.97\n## [1] 10008.97\n## [1] 10008.97\n## [1] 10008.97\n## [1] 10008.97\n## [1] 10008.97\n## [1] 10008.98\n## [1] 10008.98\n## [1] 10008.98\n## [1] 10008.98\n## [1] 10008.98\n## [1] 10008.98\n## [1] 10008.98\n## [1] 10008.98\n## [1] 10008.99\n## [1] 10008.99\n## [1] 10008.99\n## [1] 10008.99\n## [1] 10008.99\n## [1] 10008.99\n## [1] 10008.99\n## [1] 10009\n## [1] 10009\n## [1] 10009\n## [1] 10009\n## [1] 10009\n## [1] 10009\n## [1] 10009\n## [1] 10009\n## [1] 10009.01\n## [1] 10009.01\n## [1] 10009.01\n## [1] 10009.01\n## [1] 10009.01\n## [1] 10009.01\n## [1] 10009.01\n## [1] 10009.02\n## [1] 10009.02\n## [1] 10009.02\n## [1] 10009.02\n## [1] 10009.02\n## [1] 10009.02\n## [1] 10009.02\n## [1] 10009.02\n## [1] 10009.03\n## [1] 10009.03\n## [1] 10009.03\n## [1] 10009.03\n## [1] 10009.03\n## [1] 10009.03\n## [1] 10009.03\n## [1] 10009.03\n## [1] 10009.04\n## [1] 10009.04\n## [1] 10009.04\n## [1] 10009.04\n## [1] 10009.04\n## [1] 10009.04\n## [1] 10009.04\n## [1] 10009.05\n## [1] 10009.05\n## [1] 10009.05\n## [1] 10009.05\n## [1] 10009.05\n## [1] 10009.05\n## [1] 10009.05\n## [1] 10009.05\n## [1] 10009.06\n## [1] 10009.06\n## [1] 10009.06\n## [1] 10009.06\n## [1] 10009.06\n## [1] 10009.06\n## [1] 10009.06\n## [1] 10009.07\n## [1] 10009.07\n## [1] 10009.07\n## [1] 10009.07\n## [1] 10009.07\n## [1] 10009.07\n## [1] 10009.07\n## [1] 10009.07\n## [1] 10009.08\n## [1] 10009.08\n## [1] 10009.08\n## [1] 10009.08\n## [1] 10009.08\n## [1] 10009.08\n## [1] 10009.08\n## [1] 10009.08\n## [1] 10009.09\n## [1] 10009.09\n## [1] 10009.09\n## [1] 10009.09\n## [1] 10009.09\n## [1] 10009.09\n## [1] 10009.09\n## [1] 10009.1\n## [1] 10009.1\n## [1] 10009.1\n## [1] 10009.1\n## [1] 10009.1\n## [1] 10009.1\n## [1] 10009.1\n## [1] 10009.1\n## [1] 10009.11\n## [1] 10009.11\n## [1] 10009.11\n## [1] 10009.11\n## [1] 10009.11\n## [1] 10009.11\n## [1] 10009.11\n## [1] 10009.12\n## [1] 10009.12\n## [1] 10009.12\n## [1] 10009.12\n## [1] 10009.12\n## [1] 10009.12\n## [1] 10009.12\n## [1] 10009.12\n## [1] 10009.13\n## [1] 10009.13\n## [1] 10009.13\n## [1] 10009.13\n## [1] 10009.13\n## [1] 10009.13\n## [1] 10009.13\n## [1] 10009.13\n## [1] 10009.14\n## [1] 10009.14\n## [1] 10009.14\n## [1] 10009.14\n## [1] 10009.14\n## [1] 10009.14\n## [1] 10009.14\n## [1] 10009.15\n## [1] 10009.15\n## [1] 10009.15\n## [1] 10009.15\n## [1] 10009.15\n## [1] 10009.15\n## [1] 10009.15\n## [1] 10009.15\n## [1] 10009.16\n## [1] 10009.16\n## [1] 10009.16\n## [1] 10009.16\n## [1] 10009.16\n## [1] 10009.16\n## [1] 10009.16\n## [1] 10009.17\n## [1] 10009.17\n## [1] 10009.17\n## [1] 10009.17\n## [1] 10009.17\n## [1] 10009.17\n## [1] 10009.17\n## [1] 10009.17\n## [1] 10009.18\n## [1] 10009.18\n## [1] 10009.18\n## [1] 10009.18\n## [1] 10009.18\n## [1] 10009.18\n## [1] 10009.18\n## [1] 10009.18\n## [1] 10009.19\n## [1] 10009.19\n## [1] 10009.19\n## [1] 10009.19\n## [1] 10009.19\n## [1] 10009.19\n## [1] 10009.19\n## [1] 10009.2\n## [1] 10009.2\n## [1] 10009.2\n## [1] 10009.2\n## [1] 10009.2\n## [1] 10009.2\n## [1] 10009.2\n## [1] 10009.2\n## [1] 10009.21\n## [1] 10009.21\n## [1] 10009.21\n## [1] 10009.21\n## [1] 10009.21\n## [1] 10009.21\n## [1] 10009.21\n## [1] 10009.21\n## [1] 10009.22\n## [1] 10009.22\n## [1] 10009.22\n## [1] 10009.22\n## [1] 10009.22\n## [1] 10009.22\n## [1] 10009.22\n## [1] 10009.23\n## [1] 10009.23\n## [1] 10009.23\n## [1] 10009.23\n## [1] 10009.23\n## [1] 10009.23\n## [1] 10009.23\n## [1] 10009.23\n## [1] 10009.24\n## [1] 10009.24\n## [1] 10009.24\n## [1] 10009.24\n## [1] 10009.24\n## [1] 10009.24\n## [1] 10009.24\n## [1] 10009.25\n## [1] 10009.25\n## [1] 10009.25\n## [1] 10009.25\n## [1] 10009.25\n## [1] 10009.25\n## [1] 10009.25\n## [1] 10009.25\n## [1] 10009.26\n## [1] 10009.26\n## [1] 10009.26\n## [1] 10009.26\n## [1] 10009.26\n## [1] 10009.26\n## [1] 10009.26\n## [1] 10009.26\n## [1] 10009.27\n## [1] 10009.27\n## [1] 10009.27\n## [1] 10009.27\n## [1] 10009.27\n## [1] 10009.27\n## [1] 10009.27\n## [1] 10009.28\n## [1] 10009.28\n## [1] 10009.28\n## [1] 10009.28\n## [1] 10009.28\n## [1] 10009.28\n## [1] 10009.28\n## [1] 10009.28\n## [1] 10009.29\n## [1] 10009.29\n## [1] 10009.29\n## [1] 10009.29\n## [1] 10009.29\n## [1] 10009.29\n## [1] 10009.29\n## [1] 10009.3\n## [1] 10009.3\n## [1] 10009.3\n## [1] 10009.3\n## [1] 10009.3\n## [1] 10009.3\n## [1] 10009.3\n## [1] 10009.3\n## [1] 10009.31\n## [1] 10009.31\n## [1] 10009.31\n## [1] 10009.31\n## [1] 10009.31\n## [1] 10009.31\n## [1] 10009.31\n## [1] 10009.31\n## [1] 10009.32\n## [1] 10009.32\n## [1] 10009.32\n## [1] 10009.32\n## [1] 10009.32\n## [1] 10009.32\n## [1] 10009.32\n## [1] 10009.33\n## [1] 10009.33\n## [1] 10009.33\n## [1] 10009.33\n## [1] 10009.33\n## [1] 10009.33\n## [1] 10009.33\n## [1] 10009.33\n## [1] 10009.34\n## [1] 10009.34\n## [1] 10009.34\n## [1] 10009.34\n## [1] 10009.34\n## [1] 10009.34\n## [1] 10009.34\n## [1] 10009.35\n## [1] 10009.35\n## [1] 10009.35\n## [1] 10009.35\n## [1] 10009.35\n## [1] 10009.35\n## [1] 10009.35\n## [1] 10009.35\n## [1] 10009.36\n## [1] 10009.36\n## [1] 10009.36\n## [1] 10009.36\n## [1] 10009.36\n## [1] 10009.36\n## [1] 10009.36\n## [1] 10009.36\n## [1] 10009.37\n## [1] 10009.37\n## [1] 10009.37\n## [1] 10009.37\n## [1] 10009.37\n## [1] 10009.37\n## [1] 10009.37\n## [1] 10009.38\n## [1] 10009.38\n## [1] 10009.38\n## [1] 10009.38\n## [1] 10009.38\n## [1] 10009.38\n## [1] 10009.38\n## [1] 10009.38\n## [1] 10009.39\n## [1] 10009.39\n## [1] 10009.39\n## [1] 10009.39\n## [1] 10009.39\n## [1] 10009.39\n## [1] 10009.39\n## [1] 10009.4\n## [1] 10009.4\n## [1] 10009.4\n## [1] 10009.4\n## [1] 10009.4\n## [1] 10009.4\n## [1] 10009.4\n## [1] 10009.4\n## [1] 10009.41\n## [1] 10009.41\n## [1] 10009.41\n## [1] 10009.41\n## [1] 10009.41\n## [1] 10009.41\n## [1] 10009.41\n## [1] 10009.41\n## [1] 10009.42\n## [1] 10009.42\n## [1] 10009.42\n## [1] 10009.42\n## [1] 10009.42\n## [1] 10009.42\n## [1] 10009.42\n## [1] 10009.43\n## [1] 10009.43\n## [1] 10009.43\n## [1] 10009.43\n## [1] 10009.43\n## [1] 10009.43\n## [1] 10009.43\n## [1] 10009.43\n## [1] 10009.44\n## [1] 10009.44\n## [1] 10009.44\n## [1] 10009.44\n## [1] 10009.44\n## [1] 10009.44\n## [1] 10009.44\n## [1] 10009.45\n## [1] 10009.45\n## [1] 10009.45\n## [1] 10009.45\n## [1] 10009.45\n## [1] 10009.45\n## [1] 10009.45\n## [1] 10009.45\n## [1] 10009.46\n## [1] 10009.46\n## [1] 10009.46\n## [1] 10009.46\n## [1] 10009.46\n## [1] 10009.46\n## [1] 10009.46\n## [1] 10009.46\n## [1] 10009.47\n## [1] 10009.47\n## [1] 10009.47\n## [1] 10009.47\n## [1] 10009.47\n## [1] 10009.47\n## [1] 10009.47\n## [1] 10009.48\n## [1] 10009.48\n## [1] 10009.48\n## [1] 10009.48\n## [1] 10009.48\n## [1] 10009.48\n## [1] 10009.48\n## [1] 10009.48\n## [1] 10009.49\n## [1] 10009.49\n## [1] 10009.49\n## [1] 10009.49\n## [1] 10009.49\n## [1] 10009.49\n## [1] 10009.49\n## [1] 10009.5\n## [1] 10009.5\n## [1] 10009.5\n## [1] 10009.5\n## [1] 10009.5\n## [1] 10009.5\n## [1] 10009.5\n## [1] 10009.5\n## [1] 10009.51\n## [1] 10009.51\n## [1] 10009.51\n## [1] 10009.51\n## [1] 10009.51\n## [1] 10009.51\n## [1] 10009.51\n## [1] 10009.51\n## [1] 10009.52\n## [1] 10009.52\n## [1] 10009.52\n## [1] 10009.52\n## [1] 10009.52\n## [1] 10009.52\n## [1] 10009.52\n## [1] 10009.53\n## [1] 10009.53\n## [1] 10009.53\n## [1] 10009.53\n## [1] 10009.53\n## [1] 10009.53\n## [1] 10009.53\n## [1] 10009.53\n## [1] 10009.54\n## [1] 10009.54\n## [1] 10009.54\n## [1] 10009.54\n## [1] 10009.54\n## [1] 10009.54\n## [1] 10009.54\n## [1] 10009.55\n## [1] 10009.55\n## [1] 10009.55\n## [1] 10009.55\n## [1] 10009.55\n## [1] 10009.55\n## [1] 10009.55\n## [1] 10009.55\n## [1] 10009.56\n## [1] 10009.56\n## [1] 10009.56\n## [1] 10009.56\n## [1] 10009.56\n## [1] 10009.56\n## [1] 10009.56\n## [1] 10009.56\n## [1] 10009.57\n## [1] 10009.57\n## [1] 10009.57\n## [1] 10009.57\n## [1] 10009.57\n## [1] 10009.57\n## [1] 10009.57\n## [1] 10009.58\n## [1] 10009.58\n## [1] 10009.58\n## [1] 10009.58\n## [1] 10009.58\n## [1] 10009.58\n## [1] 10009.58\n## [1] 10009.58\n## [1] 10009.59\n## [1] 10009.59\n## [1] 10009.59\n## [1] 10009.59\n## [1] 10009.59\n## [1] 10009.59\n## [1] 10009.59\n## [1] 10009.6\n## [1] 10009.6\n## [1] 10009.6\n## [1] 10009.6\n## [1] 10009.6\n## [1] 10009.6\n## [1] 10009.6\n## [1] 10009.6\n## [1] 10009.61\n## [1] 10009.61\n## [1] 10009.61\n## [1] 10009.61\n## [1] 10009.61\n## [1] 10009.61\n## [1] 10009.61\n## [1] 10009.61\n## [1] 10009.62\n## [1] 10009.62\n## [1] 10009.62\n## [1] 10009.62\n## [1] 10009.62\n## [1] 10009.62\n## [1] 10009.62\n## [1] 10009.63\n## [1] 10009.63\n## [1] 10009.63\n## [1] 10009.63\n## [1] 10009.63\n## [1] 10009.63\n## [1] 10009.63\n## [1] 10009.63\n## [1] 10009.64\n## [1] 10009.64\n## [1] 10009.64\n## [1] 10009.64\n## [1] 10009.64\n## [1] 10009.64\n## [1] 10009.64\n## [1] 10009.64\n## [1] 10009.65\n## [1] 10009.65\n## [1] 10009.65\n## [1] 10009.65\n## [1] 10009.65\n## [1] 10009.65\n## [1] 10009.65\n## [1] 10009.66\n## [1] 10009.66\n## [1] 10009.66\n## [1] 10009.66\n## [1] 10009.66\n## [1] 10009.66\n## [1] 10009.66\n## [1] 10009.66\n## [1] 10009.67\n## [1] 10009.67\n## [1] 10009.67\n## [1] 10009.67\n## [1] 10009.67\n## [1] 10009.67\n## [1] 10009.67\n## [1] 10009.68\n## [1] 10009.68\n## [1] 10009.68\n## [1] 10009.68\n## [1] 10009.68\n## [1] 10009.68\n## [1] 10009.68\n## [1] 10009.68\n## [1] 10009.69\n## [1] 10009.69\n## [1] 10009.69\n## [1] 10009.69\n## [1] 10009.69\n## [1] 10009.69\n## [1] 10009.69\n## [1] 10009.69\n## [1] 10009.7\n## [1] 10009.7\n## [1] 10009.7\n## [1] 10009.7\n## [1] 10009.7\n## [1] 10009.7\n## [1] 10009.7\n## [1] 10009.71\n## [1] 10009.71\n## [1] 10009.71\n## [1] 10009.71\n## [1] 10009.71\n## [1] 10009.71\n## [1] 10009.71\n## [1] 10009.71\n## [1] 10009.72\n## [1] 10009.72\n## [1] 10009.72\n## [1] 10009.72\n## [1] 10009.72\n## [1] 10009.72\n## [1] 10009.72\n## [1] 10009.73\n## [1] 10009.73\n## [1] 10009.73\n## [1] 10009.73\n## [1] 10009.73\n## [1] 10009.73\n## [1] 10009.73\n## [1] 10009.73\n## [1] 10009.74\n## [1] 10009.74\n## [1] 10009.74\n## [1] 10009.74\n## [1] 10009.74\n## [1] 10009.74\n## [1] 10009.74\n## [1] 10009.74\n## [1] 10009.75\n## [1] 10009.75\n## [1] 10009.75\n## [1] 10009.75\n## [1] 10009.75\n## [1] 10009.75\n## [1] 10009.75\n## [1] 10009.76\n## [1] 10009.76\n## [1] 10009.76\n## [1] 10009.76\n## [1] 10009.76\n## [1] 10009.76\n## [1] 10009.76\n## [1] 10009.76\n## [1] 10009.77\n## [1] 10009.77\n## [1] 10009.77\n## [1] 10009.77\n## [1] 10009.77\n## [1] 10009.77\n## [1] 10009.77\n## [1] 10009.78\n## [1] 10009.78\n## [1] 10009.78\n## [1] 10009.78\n## [1] 10009.78\n## [1] 10009.78\n## [1] 10009.78\n## [1] 10009.78\n## [1] 10009.79\n## [1] 10009.79\n## [1] 10009.79\n## [1] 10009.79\n## [1] 10009.79\n## [1] 10009.79\n## [1] 10009.79\n## [1] 10009.79\n## [1] 10009.8\n## [1] 10009.8\n## [1] 10009.8\n## [1] 10009.8\n## [1] 10009.8\n## [1] 10009.8\n## [1] 10009.8\n## [1] 10009.81\n## [1] 10009.81\n## [1] 10009.81\n## [1] 10009.81\n## [1] 10009.81\n## [1] 10009.81\n## [1] 10009.81\n## [1] 10009.81\n## [1] 10009.82\n## [1] 10009.82\n## [1] 10009.82\n## [1] 10009.82\n## [1] 10009.82\n## [1] 10009.82\n## [1] 10009.82\n## [1] 10009.83\n## [1] 10009.83\n## [1] 10009.83\n## [1] 10009.83\n## [1] 10009.83\n## [1] 10009.83\n## [1] 10009.83\n## [1] 10009.83\n## [1] 10009.84\n## [1] 10009.84\n## [1] 10009.84\n## [1] 10009.84\n## [1] 10009.84\n## [1] 10009.84\n## [1] 10009.84\n## [1] 10009.84\n## [1] 10009.85\n## [1] 10009.85\n## [1] 10009.85\n## [1] 10009.85\n## [1] 10009.85\n## [1] 10009.85\n## [1] 10009.85\n## [1] 10009.86\n## [1] 10009.86\n## [1] 10009.86\n## [1] 10009.86\n## [1] 10009.86\n## [1] 10009.86\n## [1] 10009.86\n## [1] 10009.86\n## [1] 10009.87\n## [1] 10009.87\n## [1] 10009.87\n## [1] 10009.87\n## [1] 10009.87\n## [1] 10009.87\n## [1] 10009.87\n## [1] 10009.88\n## [1] 10009.88\n## [1] 10009.88\n## [1] 10009.88\n## [1] 10009.88\n## [1] 10009.88\n## [1] 10009.88\n## [1] 10009.88\n## [1] 10009.89\n## [1] 10009.89\n## [1] 10009.89\n## [1] 10009.89\n## [1] 10009.89\n## [1] 10009.89\n## [1] 10009.89\n## [1] 10009.89\n## [1] 10009.9\n## [1] 10009.9\n## [1] 10009.9\n## [1] 10009.9\n## [1] 10009.9\n## [1] 10009.9\n## [1] 10009.9\n## [1] 10009.91\n## [1] 10009.91\n## [1] 10009.91\n## [1] 10009.91\n## [1] 10009.91\n## [1] 10009.91\n## [1] 10009.91\n## [1] 10009.91\n## [1] 10009.92\n## [1] 10009.92\n## [1] 10009.92\n## [1] 10009.92\n## [1] 10009.92\n## [1] 10009.92\n## [1] 10009.92\n## [1] 10009.93\n## [1] 10009.93\n## [1] 10009.93\n## [1] 10009.93\n## [1] 10009.93\n## [1] 10009.93\n## [1] 10009.93\n## [1] 10009.93\n## [1] 10009.94\n## [1] 10009.94\n## [1] 10009.94\n## [1] 10009.94\n## [1] 10009.94\n## [1] 10009.94\n## [1] 10009.94\n## [1] 10009.94\n## [1] 10009.95\n## [1] 10009.95\n## [1] 10009.95\n## [1] 10009.95\n## [1] 10009.95\n## [1] 10009.95\n## [1] 10009.95\n## [1] 10009.96\n## [1] 10009.96\n## [1] 10009.96\n## [1] 10009.96\n## [1] 10009.96\n## [1] 10009.96\n## [1] 10009.96\n## [1] 10009.96\n## [1] 10009.97\n## [1] 10009.97\n## [1] 10009.97\n## [1] 10009.97\n## [1] 10009.97\n## [1] 10009.97\n## [1] 10009.97\n## [1] 10009.98\n## [1] 10009.98\n## [1] 10009.98\n## [1] 10009.98\n## [1] 10009.98\n## [1] 10009.98\n## [1] 10009.98\n## [1] 10009.98\n## [1] 10009.99\n## [1] 10009.99\n## [1] 10009.99\n## [1] 10009.99\n## [1] 10009.99\n## [1] 10009.99\n## [1] 10009.99\n## [1] 10009.99\n## [1] 10010\n## [1] 10010\n## [1] 10010\n## [1] 10010\n## [1] 10010\n## [1] 10010\n## [1] 10010\n## [1] 10010.01\n## [1] 10010.01\n## [1] 10010.01\n## [1] 10010.01\n## [1] 10010.01\n## [1] 10010.01\n## [1] 10010.01\n## [1] 10010.01\n## [1] 10010.02\n## [1] 10010.02\n## [1] 10010.02\n## [1] 10010.02\n## [1] 10010.02\n## [1] 10010.02\n## [1] 10010.02\n## [1] 10010.02\n## [1] 10010.03\n## [1] 10010.03\n## [1] 10010.03\n## [1] 10010.03\n## [1] 10010.03\n## [1] 10010.03\n## [1] 10010.03\n## [1] 10010.04\n## [1] 10010.04\n## [1] 10010.04\n## [1] 10010.04\n## [1] 10010.04\n## [1] 10010.04\n## [1] 10010.04\n## [1] 10010.04\n## [1] 10010.05\n## [1] 10010.05\n## [1] 10010.05\n## [1] 10010.05\n## [1] 10010.05\n## [1] 10010.05\n## [1] 10010.05\n## [1] 10010.06\n## [1] 10010.06\n## [1] 10010.06\n## [1] 10010.06\n## [1] 10010.06\n## [1] 10010.06\n## [1] 10010.06\n## [1] 10010.06\n## [1] 10010.07\n## [1] 10010.07\n## [1] 10010.07\n## [1] 10010.07\n## [1] 10010.07\n## [1] 10010.07\n## [1] 10010.07\n## [1] 10010.07\n## [1] 10010.08\n## [1] 10010.08\n## [1] 10010.08\n## [1] 10010.08\n## [1] 10010.08\n## [1] 10010.08\n## [1] 10010.08\n## [1] 10010.09\n## [1] 10010.09\n## [1] 10010.09\n## [1] 10010.09\n## [1] 10010.09\n## [1] 10010.09\n## [1] 10010.09\n## [1] 10010.09\n## [1] 10010.1\n## [1] 10010.1\n## [1] 10010.1\n## [1] 10010.1\n## [1] 10010.1\n## [1] 10010.1\n## [1] 10010.1\n## [1] 10010.11\n## [1] 10010.11\n## [1] 10010.11\n## [1] 10010.11\n## [1] 10010.11\n## [1] 10010.11\n## [1] 10010.11\n## [1] 10010.11\n## [1] 10010.12\n## [1] 10010.12\n## [1] 10010.12\n## [1] 10010.12\n## [1] 10010.12\n## [1] 10010.12\n## [1] 10010.12\n## [1] 10010.12\n## [1] 10010.13\n## [1] 10010.13\n## [1] 10010.13\n## [1] 10010.13\n## [1] 10010.13\n## [1] 10010.13\n## [1] 10010.13\n## [1] 10010.14\n## [1] 10010.14\n## [1] 10010.14\n## [1] 10010.14\n## [1] 10010.14\n## [1] 10010.14\n## [1] 10010.14\n## [1] 10010.14\n## [1] 10010.15\n## [1] 10010.15\n## [1] 10010.15\n## [1] 10010.15\n## [1] 10010.15\n## [1] 10010.15\n## [1] 10010.15\n## [1] 10010.16\n## [1] 10010.16\n## [1] 10010.16\n## [1] 10010.16\n## [1] 10010.16\n## [1] 10010.16\n## [1] 10010.16\n## [1] 10010.16\n## [1] 10010.17\n## [1] 10010.17\n## [1] 10010.17\n## [1] 10010.17\n## [1] 10010.17\n## [1] 10010.17\n## [1] 10010.17\n## [1] 10010.17\n## [1] 10010.18\n## [1] 10010.18\n## [1] 10010.18\n## [1] 10010.18\n## [1] 10010.18\n## [1] 10010.18\n## [1] 10010.18\n## [1] 10010.19\n## [1] 10010.19\n## [1] 10010.19\n## [1] 10010.19\n## [1] 10010.19\n## [1] 10010.19\n## [1] 10010.19\n## [1] 10010.19\n## [1] 10010.2\n## [1] 10010.2\n## [1] 10010.2\n## [1] 10010.2\n## [1] 10010.2\n## [1] 10010.2\n## [1] 10010.2\n## [1] 10010.21\n## [1] 10010.21\n## [1] 10010.21\n## [1] 10010.21\n## [1] 10010.21\n## [1] 10010.21\n## [1] 10010.21\n## [1] 10010.21\n## [1] 10010.22\n## [1] 10010.22\n## [1] 10010.22\n## [1] 10010.22\n## [1] 10010.22\n## [1] 10010.22\n## [1] 10010.22\n## [1] 10010.22\n## [1] 10010.23\n## [1] 10010.23\n## [1] 10010.23\n## [1] 10010.23\n## [1] 10010.23\n## [1] 10010.23\n## [1] 10010.23\n## [1] 10010.24\n## [1] 10010.24\n## [1] 10010.24\n## [1] 10010.24\n## [1] 10010.24\n## [1] 10010.24\n## [1] 10010.24\n## [1] 10010.24\n## [1] 10010.25\n## [1] 10010.25\n## [1] 10010.25\n## [1] 10010.25\n## [1] 10010.25\n## [1] 10010.25\n## [1] 10010.25\n## [1] 10010.26\n## [1] 10010.26\n## [1] 10010.26\n## [1] 10010.26\n## [1] 10010.26\n## [1] 10010.26\n## [1] 10010.26\n## [1] 10010.26\n## [1] 10010.27\n## [1] 10010.27\n## [1] 10010.27\n## [1] 10010.27\n## [1] 10010.27\n## [1] 10010.27\n## [1] 10010.27\n## [1] 10010.27\n## [1] 10010.28\n## [1] 10010.28\n## [1] 10010.28\n## [1] 10010.28\n## [1] 10010.28\n## [1] 10010.28\n## [1] 10010.28\n## [1] 10010.29\n## [1] 10010.29\n## [1] 10010.29\n## [1] 10010.29\n## [1] 10010.29\n## [1] 10010.29\n## [1] 10010.29\n## [1] 10010.29\n## [1] 10010.3\n## [1] 10010.3\n## [1] 10010.3\n## [1] 10010.3\n## [1] 10010.3\n## [1] 10010.3\n## [1] 10010.3\n## [1] 10010.31\n## [1] 10010.31\n## [1] 10010.31\n## [1] 10010.31\n## [1] 10010.31\n## [1] 10010.31\n## [1] 10010.31\n## [1] 10010.31\n## [1] 10010.32\n## [1] 10010.32\n## [1] 10010.32\n## [1] 10010.32\n## [1] 10010.32\n## [1] 10010.32\n## [1] 10010.32\n## [1] 10010.32\n## [1] 10010.33\n## [1] 10010.33\n## [1] 10010.33\n## [1] 10010.33\n## [1] 10010.33\n## [1] 10010.33\n## [1] 10010.33\n## [1] 10010.34\n## [1] 10010.34\n## [1] 10010.34\n## [1] 10010.34\n## [1] 10010.34\n## [1] 10010.34\n## [1] 10010.34\n## [1] 10010.34\n## [1] 10010.35\n## [1] 10010.35\n## [1] 10010.35\n## [1] 10010.35\n## [1] 10010.35\n## [1] 10010.35\n## [1] 10010.35\n## [1] 10010.36\n## [1] 10010.36\n## [1] 10010.36\n## [1] 10010.36\n## [1] 10010.36\n## [1] 10010.36\n## [1] 10010.36\n## [1] 10010.36\n## [1] 10010.37\n## [1] 10010.37\n## [1] 10010.37\n## [1] 10010.37\n## [1] 10010.37\n## [1] 10010.37\n## [1] 10010.37\n## [1] 10010.37\n## [1] 10010.38\n## [1] 10010.38\n## [1] 10010.38\n## [1] 10010.38\n## [1] 10010.38\n## [1] 10010.38\n## [1] 10010.38\n## [1] 10010.39\n## [1] 10010.39\n## [1] 10010.39\n## [1] 10010.39\n## [1] 10010.39\n## [1] 10010.39\n## [1] 10010.39\n## [1] 10010.39\n## [1] 10010.4\n## [1] 10010.4\n## [1] 10010.4\n## [1] 10010.4\n## [1] 10010.4\n## [1] 10010.4\n## [1] 10010.4\n## [1] 10010.4\n## [1] 10010.41\n## [1] 10010.41\n## [1] 10010.41\n## [1] 10010.41\n## [1] 10010.41\n## [1] 10010.41\n## [1] 10010.41\n## [1] 10010.42\n## [1] 10010.42\n## [1] 10010.42\n## [1] 10010.42\n## [1] 10010.42\n## [1] 10010.42\n## [1] 10010.42\n## [1] 10010.42\n## [1] 10010.43\n## [1] 10010.43\n## [1] 10010.43\n## [1] 10010.43\n## [1] 10010.43\n## [1] 10010.43\n## [1] 10010.43\n## [1] 10010.44\n## [1] 10010.44\n## [1] 10010.44\n## [1] 10010.44\n## [1] 10010.44\n## [1] 10010.44\n## [1] 10010.44\n## [1] 10010.44\n## [1] 10010.45\n## [1] 10010.45\n## [1] 10010.45\n## [1] 10010.45\n## [1] 10010.45\n## [1] 10010.45\n## [1] 10010.45\n## [1] 10010.45\n## [1] 10010.46\n## [1] 10010.46\n## [1] 10010.46\n## [1] 10010.46\n## [1] 10010.46\n## [1] 10010.46\n## [1] 10010.46\n## [1] 10010.47\n## [1] 10010.47\n## [1] 10010.47\n## [1] 10010.47\n## [1] 10010.47\n## [1] 10010.47\n## [1] 10010.47\n## [1] 10010.47\n## [1] 10010.48\n## [1] 10010.48\n## [1] 10010.48\n## [1] 10010.48\n## [1] 10010.48\n## [1] 10010.48\n## [1] 10010.48\n## [1] 10010.49\n## [1] 10010.49\n## [1] 10010.49\n## [1] 10010.49\n## [1] 10010.49\n## [1] 10010.49\n## [1] 10010.49\n## [1] 10010.49\n## [1] 10010.5\n## [1] 10010.5\n## [1] 10010.5\n## [1] 10010.5\n## [1] 10010.5\n## [1] 10010.5\n## [1] 10010.5\n## [1] 10010.5\n## [1] 10010.51\n## [1] 10010.51\n## [1] 10010.51\n## [1] 10010.51\n## [1] 10010.51\n## [1] 10010.51\n## [1] 10010.51\n## [1] 10010.52\n## [1] 10010.52\n## [1] 10010.52\n## [1] 10010.52\n## [1] 10010.52\n## [1] 10010.52\n## [1] 10010.52\n## [1] 10010.52\n## [1] 10010.53\n## [1] 10010.53\n## [1] 10010.53\n## [1] 10010.53\n## [1] 10010.53\n## [1] 10010.53\n## [1] 10010.53\n## [1] 10010.54\n## [1] 10010.54\n## [1] 10010.54\n## [1] 10010.54\n## [1] 10010.54\n## [1] 10010.54\n## [1] 10010.54\n## [1] 10010.54\n## [1] 10010.55\n## [1] 10010.55\n## [1] 10010.55\n## [1] 10010.55\n## [1] 10010.55\n## [1] 10010.55\n## [1] 10010.55\n## [1] 10010.55\n## [1] 10010.56\n## [1] 10010.56\n## [1] 10010.56\n## [1] 10010.56\n## [1] 10010.56\n## [1] 10010.56\n## [1] 10010.56\n## [1] 10010.57\n## [1] 10010.57\n## [1] 10010.57\n## [1] 10010.57\n## [1] 10010.57\n## [1] 10010.57\n## [1] 10010.57\n## [1] 10010.57\n## [1] 10010.58\n## [1] 10010.58\n## [1] 10010.58\n## [1] 10010.58\n## [1] 10010.58\n## [1] 10010.58\n## [1] 10010.58\n## [1] 10010.59\n## [1] 10010.59\n## [1] 10010.59\n## [1] 10010.59\n## [1] 10010.59\n## [1] 10010.59\n## [1] 10010.59\n## [1] 10010.59\n## [1] 10010.6\n## [1] 10010.6\n## [1] 10010.6\n## [1] 10010.6\n## [1] 10010.6\n## [1] 10010.6\n## [1] 10010.6\n## [1] 10010.6\n## [1] 10010.61\n## [1] 10010.61\n## [1] 10010.61\n## [1] 10010.61\n## [1] 10010.61\n## [1] 10010.61\n## [1] 10010.61\n## [1] 10010.62\n## [1] 10010.62\n## [1] 10010.62\n## [1] 10010.62\n## [1] 10010.62\n## [1] 10010.62\n## [1] 10010.62\n## [1] 10010.62\n## [1] 10010.63\n## [1] 10010.63\n## [1] 10010.63\n## [1] 10010.63\n## [1] 10010.63\n## [1] 10010.63\n## [1] 10010.63\n## [1] 10010.64\n## [1] 10010.64\n## [1] 10010.64\n## [1] 10010.64\n## [1] 10010.64\n## [1] 10010.64\n## [1] 10010.64\n## [1] 10010.64\n## [1] 10010.65\n## [1] 10010.65\n## [1] 10010.65\n## [1] 10010.65\n## [1] 10010.65\n## [1] 10010.65\n## [1] 10010.65\n## [1] 10010.65\n## [1] 10010.66\n## [1] 10010.66\n## [1] 10010.66\n## [1] 10010.66\n## [1] 10010.66\n## [1] 10010.66\n## [1] 10010.66\n## [1] 10010.67\n## [1] 10010.67\n## [1] 10010.67\n## [1] 10010.67\n## [1] 10010.67\n## [1] 10010.67\n## [1] 10010.67\n## [1] 10010.67\n## [1] 10010.68\n## [1] 10010.68\n## [1] 10010.68\n## [1] 10010.68\n## [1] 10010.68\n## [1] 10010.68\n## [1] 10010.68\n## [1] 10010.69\n## [1] 10010.69\n## [1] 10010.69\n## [1] 10010.69\n## [1] 10010.69\n## [1] 10010.69\n## [1] 10010.69\n## [1] 10010.69\n## [1] 10010.7\n## [1] 10010.7\n## [1] 10010.7\n## [1] 10010.7\n## [1] 10010.7\n## [1] 10010.7\n## [1] 10010.7\n## [1] 10010.7\n## [1] 10010.71\n## [1] 10010.71\n## [1] 10010.71\n## [1] 10010.71\n## [1] 10010.71\n## [1] 10010.71\n## [1] 10010.71\n## [1] 10010.72\n## [1] 10010.72\n## [1] 10010.72\n## [1] 10010.72\n## [1] 10010.72\n## [1] 10010.72\n## [1] 10010.72\n## [1] 10010.72\n## [1] 10010.73\n## [1] 10010.73\n## [1] 10010.73\n## [1] 10010.73\n## [1] 10010.73\n## [1] 10010.73\n## [1] 10010.73\n## [1] 10010.74\n## [1] 10010.74\n## [1] 10010.74\n## [1] 10010.74\n## [1] 10010.74\n## [1] 10010.74\n## [1] 10010.74\n## [1] 10010.74\n## [1] 10010.75\n## [1] 10010.75\n## [1] 10010.75\n## [1] 10010.75\n## [1] 10010.75\n## [1] 10010.75\n## [1] 10010.75\n## [1] 10010.75\n## [1] 10010.76\n## [1] 10010.76\n## [1] 10010.76\n## [1] 10010.76\n## [1] 10010.76\n## [1] 10010.76\n## [1] 10010.76\n## [1] 10010.77\n## [1] 10010.77\n## [1] 10010.77\n## [1] 10010.77\n## [1] 10010.77\n## [1] 10010.77\n## [1] 10010.77\n## [1] 10010.77\n## [1] 10010.78\n## [1] 10010.78\n## [1] 10010.78\n## [1] 10010.78\n## [1] 10010.78\n## [1] 10010.78\n## [1] 10010.78\n## [1] 10010.79\n## [1] 10010.79\n## [1] 10010.79\n## [1] 10010.79\n## [1] 10010.79\n## [1] 10010.79\n## [1] 10010.79\n## [1] 10010.79\n## [1] 10010.8\n## [1] 10010.8\n## [1] 10010.8\n## [1] 10010.8\n## [1] 10010.8\n## [1] 10010.8\n## [1] 10010.8\n## [1] 10010.8\n## [1] 10010.81\n## [1] 10010.81\n## [1] 10010.81\n## [1] 10010.81\n## [1] 10010.81\n## [1] 10010.81\n## [1] 10010.81\n## [1] 10010.82\n## [1] 10010.82\n## [1] 10010.82\n## [1] 10010.82\n## [1] 10010.82\n## [1] 10010.82\n## [1] 10010.82\n## [1] 10010.82\n## [1] 10010.83\n## [1] 10010.83\n## [1] 10010.83\n## [1] 10010.83\n## [1] 10010.83\n## [1] 10010.83\n## [1] 10010.83\n## [1] 10010.83\n## [1] 10010.84\n## [1] 10010.84\n## [1] 10010.84\n## [1] 10010.84\n## [1] 10010.84\n## [1] 10010.84\n## [1] 10010.84\n## [1] 10010.85\n## [1] 10010.85\n## [1] 10010.85\n## [1] 10010.85\n## [1] 10010.85\n## [1] 10010.85\n## [1] 10010.85\n## [1] 10010.85\n## [1] 10010.86\n## [1] 10010.86\n## [1] 10010.86\n## [1] 10010.86\n## [1] 10010.86\n## [1] 10010.86\n## [1] 10010.86\n## [1] 10010.87\n## [1] 10010.87\n## [1] 10010.87\n## [1] 10010.87\n## [1] 10010.87\n## [1] 10010.87\n## [1] 10010.87\n## [1] 10010.87\n## [1] 10010.88\n## [1] 10010.88\n## [1] 10010.88\n## [1] 10010.88\n## [1] 10010.88\n## [1] 10010.88\n## [1] 10010.88\n## [1] 10010.88\n## [1] 10010.89\n## [1] 10010.89\n## [1] 10010.89\n## [1] 10010.89\n## [1] 10010.89\n## [1] 10010.89\n## [1] 10010.89\n## [1] 10010.9\n## [1] 10010.9\n## [1] 10010.9\n## [1] 10010.9\n## [1] 10010.9\n## [1] 10010.9\n## [1] 10010.9\n## [1] 10010.9\n## [1] 10010.91\n## [1] 10010.91\n## [1] 10010.91\n## [1] 10010.91\n## [1] 10010.91\n## [1] 10010.91\n## [1] 10010.91\n## [1] 10010.92\n## [1] 10010.92\n## [1] 10010.92\n## [1] 10010.92\n## [1] 10010.92\n## [1] 10010.92\n## [1] 10010.92\n## [1] 10010.92\n## [1] 10010.93\n## [1] 10010.93\n## [1] 10010.93\n## [1] 10010.93\n## [1] 10010.93\n## [1] 10010.93\n## [1] 10010.93\n## [1] 10010.93\n## [1] 10010.94\n## [1] 10010.94\n## [1] 10010.94\n## [1] 10010.94\n## [1] 10010.94\n## [1] 10010.94\n## [1] 10010.94\n## [1] 10010.95\n## [1] 10010.95\n## [1] 10010.95\n## [1] 10010.95\n## [1] 10010.95\n## [1] 10010.95\n## [1] 10010.95\n## [1] 10010.95\n## [1] 10010.96\n## [1] 10010.96\n## [1] 10010.96\n## [1] 10010.96\n## [1] 10010.96\n## [1] 10010.96\n## [1] 10010.96\n## [1] 10010.97\n## [1] 10010.97\n## [1] 10010.97\n## [1] 10010.97\n## [1] 10010.97\n## [1] 10010.97\n## [1] 10010.97\n## [1] 10010.97\n## [1] 10010.98\n## [1] 10010.98\n## [1] 10010.98\n## [1] 10010.98\n## [1] 10010.98\n## [1] 10010.98\n## [1] 10010.98\n## [1] 10010.98\n## [1] 10010.99\n## [1] 10010.99\n## [1] 10010.99\n## [1] 10010.99\n## [1] 10010.99\n## [1] 10010.99\n## [1] 10010.99\n## [1] 10011\n## [1] 10011\n## [1] 10011\n## [1] 10011\n## [1] 10011\n## [1] 10011\n## [1] 10011\n## [1] 10011\n## [1] 10011.01\n## [1] 10011.01\n## [1] 10011.01\n## [1] 10011.01\n## [1] 10011.01\n## [1] 10011.01\n## [1] 10011.01\n## [1] 10011.02\n## [1] 10011.02\n## [1] 10011.02\n## [1] 10011.02\n## [1] 10011.02\n## [1] 10011.02\n## [1] 10011.02\n## [1] 10011.02\n## [1] 10011.03\n## [1] 10011.03\n## [1] 10011.03\n## [1] 10011.03\n## [1] 10011.03\n## [1] 10011.03\n## [1] 10011.03\n## [1] 10011.03\n## [1] 10011.04\n## [1] 10011.04\n## [1] 10011.04\n## [1] 10011.04\n## [1] 10011.04\n## [1] 10011.04\n## [1] 10011.04\n## [1] 10011.05\n## [1] 10011.05\n## [1] 10011.05\n## [1] 10011.05\n## [1] 10011.05\n## [1] 10011.05\n## [1] 10011.05\n## [1] 10011.05\n## [1] 10011.06\n## [1] 10011.06\n## [1] 10011.06\n## [1] 10011.06\n## [1] 10011.06\n## [1] 10011.06\n## [1] 10011.06\n## [1] 10011.07\n## [1] 10011.07\n## [1] 10011.07\n## [1] 10011.07\n## [1] 10011.07\n## [1] 10011.07\n## [1] 10011.07\n## [1] 10011.07\n## [1] 10011.08\n## [1] 10011.08\n## [1] 10011.08\n## [1] 10011.08\n## [1] 10011.08\n## [1] 10011.08\n## [1] 10011.08\n## [1] 10011.08\n## [1] 10011.09\n## [1] 10011.09\n## [1] 10011.09\n## [1] 10011.09\n## [1] 10011.09\n## [1] 10011.09\n## [1] 10011.09\n## [1] 10011.1\n## [1] 10011.1\n## [1] 10011.1\n## [1] 10011.1\n## [1] 10011.1\n## [1] 10011.1\n## [1] 10011.1\n## [1] 10011.1\n## [1] 10011.11\n## [1] 10011.11\n## [1] 10011.11\n## [1] 10011.11\n## [1] 10011.11\n## [1] 10011.11\n## [1] 10011.11\n## [1] 10011.12\n## [1] 10011.12\n## [1] 10011.12\n## [1] 10011.12\n## [1] 10011.12\n## [1] 10011.12\n## [1] 10011.12\n## [1] 10011.12\n## [1] 10011.13\n## [1] 10011.13\n## [1] 10011.13\n## [1] 10011.13\n## [1] 10011.13\n## [1] 10011.13\n## [1] 10011.13\n## [1] 10011.13\n## [1] 10011.14\n## [1] 10011.14\n## [1] 10011.14\n## [1] 10011.14\n## [1] 10011.14\n## [1] 10011.14\n## [1] 10011.14\n## [1] 10011.15\n## [1] 10011.15\n## [1] 10011.15\n## [1] 10011.15\n## [1] 10011.15\n## [1] 10011.15\n## [1] 10011.15\n## [1] 10011.15\n## [1] 10011.16\n## [1] 10011.16\n## [1] 10011.16\n## [1] 10011.16\n## [1] 10011.16\n## [1] 10011.16\n## [1] 10011.16\n## [1] 10011.17\n## [1] 10011.17\n## [1] 10011.17\n## [1] 10011.17\n## [1] 10011.17\n## [1] 10011.17\n## [1] 10011.17\n## [1] 10011.17\n## [1] 10011.18\n## [1] 10011.18\n## [1] 10011.18\n## [1] 10011.18\n## [1] 10011.18\n## [1] 10011.18\n## [1] 10011.18\n## [1] 10011.18\n## [1] 10011.19\n## [1] 10011.19\n## [1] 10011.19\n## [1] 10011.19\n## [1] 10011.19\n## [1] 10011.19\n## [1] 10011.19\n## [1] 10011.2\n## [1] 10011.2\n## [1] 10011.2\n## [1] 10011.2\n## [1] 10011.2\n## [1] 10011.2\n## [1] 10011.2\n## [1] 10011.2\n## [1] 10011.21\n## [1] 10011.21\n## [1] 10011.21\n## [1] 10011.21\n## [1] 10011.21\n## [1] 10011.21\n## [1] 10011.21\n## [1] 10011.21\n## [1] 10011.22\n## [1] 10011.22\n## [1] 10011.22\n## [1] 10011.22\n## [1] 10011.22\n## [1] 10011.22\n## [1] 10011.22\n## [1] 10011.23\n## [1] 10011.23\n## [1] 10011.23\n## [1] 10011.23\n## [1] 10011.23\n## [1] 10011.23\n## [1] 10011.23\n## [1] 10011.23\n## [1] 10011.24\n## [1] 10011.24\n## [1] 10011.24\n## [1] 10011.24\n## [1] 10011.24\n## [1] 10011.24\n## [1] 10011.24\n## [1] 10011.25\n## [1] 10011.25\n## [1] 10011.25\n## [1] 10011.25\n## [1] 10011.25\n## [1] 10011.25\n## [1] 10011.25\n## [1] 10011.25\n## [1] 10011.26\n## [1] 10011.26\n## [1] 10011.26\n## [1] 10011.26\n## [1] 10011.26\n## [1] 10011.26\n## [1] 10011.26\n## [1] 10011.26\n## [1] 10011.27\n## [1] 10011.27\n## [1] 10011.27\n## [1] 10011.27\n## [1] 10011.27\n## [1] 10011.27\n## [1] 10011.27\n## [1] 10011.28\n## [1] 10011.28\n## [1] 10011.28\n## [1] 10011.28\n## [1] 10011.28\n## [1] 10011.28\n## [1] 10011.28\n## [1] 10011.28\n## [1] 10011.29\n## [1] 10011.29\n## [1] 10011.29\n## [1] 10011.29\n## [1] 10011.29\n## [1] 10011.29\n## [1] 10011.29\n## [1] 10011.3\n## [1] 10011.3\n## [1] 10011.3\n## [1] 10011.3\n## [1] 10011.3\n## [1] 10011.3\n## [1] 10011.3\n## [1] 10011.3\n## [1] 10011.31\n## [1] 10011.31\n## [1] 10011.31\n## [1] 10011.31\n## [1] 10011.31\n## [1] 10011.31\n## [1] 10011.31\n## [1] 10011.31\n## [1] 10011.32\n## [1] 10011.32\n## [1] 10011.32\n## [1] 10011.32\n## [1] 10011.32\n## [1] 10011.32\n## [1] 10011.32\n## [1] 10011.33\n## [1] 10011.33\n## [1] 10011.33\n## [1] 10011.33\n## [1] 10011.33\n## [1] 10011.33\n## [1] 10011.33\n## [1] 10011.33\n## [1] 10011.34\n## [1] 10011.34\n## [1] 10011.34\n## [1] 10011.34\n## [1] 10011.34\n## [1] 10011.34\n## [1] 10011.34\n## [1] 10011.35\n## [1] 10011.35\n## [1] 10011.35\n## [1] 10011.35\n## [1] 10011.35\n## [1] 10011.35\n## [1] 10011.35\n## [1] 10011.35\n## [1] 10011.36\n## [1] 10011.36\n## [1] 10011.36\n## [1] 10011.36\n## [1] 10011.36\n## [1] 10011.36\n## [1] 10011.36\n## [1] 10011.36\n## [1] 10011.37\n## [1] 10011.37\n## [1] 10011.37\n## [1] 10011.37\n## [1] 10011.37\n## [1] 10011.37\n## [1] 10011.37\n## [1] 10011.38\n## [1] 10011.38\n## [1] 10011.38\n## [1] 10011.38\n## [1] 10011.38\n## [1] 10011.38\n## [1] 10011.38\n## [1] 10011.38\n## [1] 10011.39\n## [1] 10011.39\n## [1] 10011.39\n## [1] 10011.39\n## [1] 10011.39\n## [1] 10011.39\n## [1] 10011.39\n## [1] 10011.4\n## [1] 10011.4\n## [1] 10011.4\n## [1] 10011.4\n## [1] 10011.4\n## [1] 10011.4\n## [1] 10011.4\n## [1] 10011.4\n## [1] 10011.41\n## [1] 10011.41\n## [1] 10011.41\n## [1] 10011.41\n## [1] 10011.41\n## [1] 10011.41\n## [1] 10011.41\n## [1] 10011.41\n## [1] 10011.42\n## [1] 10011.42\n## [1] 10011.42\n## [1] 10011.42\n## [1] 10011.42\n## [1] 10011.42\n## [1] 10011.42\n## [1] 10011.43\n## [1] 10011.43\n## [1] 10011.43\n## [1] 10011.43\n## [1] 10011.43\n## [1] 10011.43\n## [1] 10011.43\n## [1] 10011.43\n## [1] 10011.44\n## [1] 10011.44\n## [1] 10011.44\n## [1] 10011.44\n## [1] 10011.44\n## [1] 10011.44\n## [1] 10011.44\n## [1] 10011.45\n## [1] 10011.45\n## [1] 10011.45\n## [1] 10011.45\n## [1] 10011.45\n## [1] 10011.45\n## [1] 10011.45\n## [1] 10011.45\n## [1] 10011.46\n## [1] 10011.46\n## [1] 10011.46\n## [1] 10011.46\n## [1] 10011.46\n## [1] 10011.46\n## [1] 10011.46\n## [1] 10011.46\n## [1] 10011.47\n## [1] 10011.47\n## [1] 10011.47\n## [1] 10011.47\n## [1] 10011.47\n## [1] 10011.47\n## [1] 10011.47\n## [1] 10011.48\n## [1] 10011.48\n## [1] 10011.48\n## [1] 10011.48\n## [1] 10011.48\n## [1] 10011.48\n## [1] 10011.48\n## [1] 10011.48\n## [1] 10011.49\n## [1] 10011.49\n## [1] 10011.49\n## [1] 10011.49\n## [1] 10011.49\n## [1] 10011.49\n## [1] 10011.49\n## [1] 10011.5\n## [1] 10011.5\n## [1] 10011.5\n## [1] 10011.5\n## [1] 10011.5\n## [1] 10011.5\n## [1] 10011.5\n## [1] 10011.5\n## [1] 10011.51\n## [1] 10011.51\n## [1] 10011.51\n## [1] 10011.51\n## [1] 10011.51\n## [1] 10011.51\n## [1] 10011.51\n## [1] 10011.51\n## [1] 10011.52\n## [1] 10011.52\n## [1] 10011.52\n## [1] 10011.52\n## [1] 10011.52\n## [1] 10011.52\n## [1] 10011.52\n## [1] 10011.53\n## [1] 10011.53\n## [1] 10011.53\n## [1] 10011.53\n## [1] 10011.53\n## [1] 10011.53\n## [1] 10011.53\n## [1] 10011.53\n## [1] 10011.54\n## [1] 10011.54\n## [1] 10011.54\n## [1] 10011.54\n## [1] 10011.54\n## [1] 10011.54\n## [1] 10011.54\n## [1] 10011.55\n## [1] 10011.55\n## [1] 10011.55\n## [1] 10011.55\n## [1] 10011.55\n## [1] 10011.55\n## [1] 10011.55\n## [1] 10011.55\n## [1] 10011.56\n## [1] 10011.56\n## [1] 10011.56\n## [1] 10011.56\n## [1] 10011.56\n## [1] 10011.56\n## [1] 10011.56\n## [1] 10011.56\n## [1] 10011.57\n## [1] 10011.57\n## [1] 10011.57\n## [1] 10011.57\n## [1] 10011.57\n## [1] 10011.57\n## [1] 10011.57\n## [1] 10011.58\n## [1] 10011.58\n## [1] 10011.58\n## [1] 10011.58\n## [1] 10011.58\n## [1] 10011.58\n## [1] 10011.58\n## [1] 10011.58\n## [1] 10011.59\n## [1] 10011.59\n## [1] 10011.59\n## [1] 10011.59\n## [1] 10011.59\n## [1] 10011.59\n## [1] 10011.59\n## [1] 10011.6\n## [1] 10011.6\n## [1] 10011.6\n## [1] 10011.6\n## [1] 10011.6\n## [1] 10011.6\n## [1] 10011.6\n## [1] 10011.6\n## [1] 10011.61\n## [1] 10011.61\n## [1] 10011.61\n## [1] 10011.61\n## [1] 10011.61\n## [1] 10011.61\n## [1] 10011.61\n## [1] 10011.61\n## [1] 10011.62\n## [1] 10011.62\n## [1] 10011.62\n## [1] 10011.62\n## [1] 10011.62\n## [1] 10011.62\n## [1] 10011.62\n## [1] 10011.63\n## [1] 10011.63\n## [1] 10011.63\n## [1] 10011.63\n## [1] 10011.63\n## [1] 10011.63\n## [1] 10011.63\n## [1] 10011.63\n## [1] 10011.64\n## [1] 10011.64\n## [1] 10011.64\n## [1] 10011.64\n## [1] 10011.64\n## [1] 10011.64\n## [1] 10011.64\n## [1] 10011.64\n## [1] 10011.65\n## [1] 10011.65\n## [1] 10011.65\n## [1] 10011.65\n## [1] 10011.65\n## [1] 10011.65\n## [1] 10011.65\n## [1] 10011.66\n## [1] 10011.66\n## [1] 10011.66\n## [1] 10011.66\n## [1] 10011.66\n## [1] 10011.66\n## [1] 10011.66\n## [1] 10011.66\n## [1] 10011.67\n## [1] 10011.67\n## [1] 10011.67\n## [1] 10011.67\n## [1] 10011.67\n## [1] 10011.67\n## [1] 10011.67\n## [1] 10011.68\n## [1] 10011.68\n## [1] 10011.68\n## [1] 10011.68\n## [1] 10011.68\n## [1] 10011.68\n## [1] 10011.68\n## [1] 10011.68\n## [1] 10011.69\n## [1] 10011.69\n## [1] 10011.69\n## [1] 10011.69\n## [1] 10011.69\n## [1] 10011.69\n## [1] 10011.69\n## [1] 10011.69\n## [1] 10011.7\n## [1] 10011.7\n## [1] 10011.7\n## [1] 10011.7\n## [1] 10011.7\n## [1] 10011.7\n## [1] 10011.7\n## [1] 10011.71\n## [1] 10011.71\n## [1] 10011.71\n## [1] 10011.71\n## [1] 10011.71\n## [1] 10011.71\n## [1] 10011.71\n## [1] 10011.71\n## [1] 10011.72\n## [1] 10011.72\n## [1] 10011.72\n## [1] 10011.72\n## [1] 10011.72\n## [1] 10011.72\n## [1] 10011.72\n## [1] 10011.73\n## [1] 10011.73\n## [1] 10011.73\n## [1] 10011.73\n## [1] 10011.73\n## [1] 10011.73\n## [1] 10011.73\n## [1] 10011.73\n## [1] 10011.74\n## [1] 10011.74\n## [1] 10011.74\n## [1] 10011.74\n## [1] 10011.74\n## [1] 10011.74\n## [1] 10011.74\n## [1] 10011.74\n## [1] 10011.75\n## [1] 10011.75\n## [1] 10011.75\n## [1] 10011.75\n## [1] 10011.75\n## [1] 10011.75\n## [1] 10011.75\n## [1] 10011.76\n## [1] 10011.76\n## [1] 10011.76\n## [1] 10011.76\n## [1] 10011.76\n## [1] 10011.76\n## [1] 10011.76\n## [1] 10011.76\n## [1] 10011.77\n## [1] 10011.77\n## [1] 10011.77\n## [1] 10011.77\n## [1] 10011.77\n## [1] 10011.77\n## [1] 10011.77\n## [1] 10011.78\n## [1] 10011.78\n## [1] 10011.78\n## [1] 10011.78\n## [1] 10011.78\n## [1] 10011.78\n## [1] 10011.78\n## [1] 10011.78\n## [1] 10011.79\n## [1] 10011.79\n## [1] 10011.79\n## [1] 10011.79\n## [1] 10011.79\n## [1] 10011.79\n## [1] 10011.79\n## [1] 10011.79\n## [1] 10011.8\n## [1] 10011.8\n## [1] 10011.8\n## [1] 10011.8\n## [1] 10011.8\n## [1] 10011.8\n## [1] 10011.8\n## [1] 10011.81\n## [1] 10011.81\n## [1] 10011.81\n## [1] 10011.81\n## [1] 10011.81\n## [1] 10011.81\n## [1] 10011.81\n## [1] 10011.81\n## [1] 10011.82\n## [1] 10011.82\n## [1] 10011.82\n## [1] 10011.82\n## [1] 10011.82\n## [1] 10011.82\n## [1] 10011.82\n## [1] 10011.83\n## [1] 10011.83\n## [1] 10011.83\n## [1] 10011.83\n## [1] 10011.83\n## [1] 10011.83\n## [1] 10011.83\n## [1] 10011.83\n## [1] 10011.84\n## [1] 10011.84\n## [1] 10011.84\n## [1] 10011.84\n## [1] 10011.84\n## [1] 10011.84\n## [1] 10011.84\n## [1] 10011.84\n## [1] 10011.85\n## [1] 10011.85\n## [1] 10011.85\n## [1] 10011.85\n## [1] 10011.85\n## [1] 10011.85\n## [1] 10011.85\n## [1] 10011.86\n## [1] 10011.86\n## [1] 10011.86\n## [1] 10011.86\n## [1] 10011.86\n## [1] 10011.86\n## [1] 10011.86\n## [1] 10011.86\n## [1] 10011.87\n## [1] 10011.87\n## [1] 10011.87\n## [1] 10011.87\n## [1] 10011.87\n## [1] 10011.87\n## [1] 10011.87\n## [1] 10011.88\n## [1] 10011.88\n## [1] 10011.88\n## [1] 10011.88\n## [1] 10011.88\n## [1] 10011.88\n## [1] 10011.88\n## [1] 10011.88\n## [1] 10011.89\n## [1] 10011.89\n## [1] 10011.89\n## [1] 10011.89\n## [1] 10011.89\n## [1] 10011.89\n## [1] 10011.89\n## [1] 10011.89\n## [1] 10011.9\n## [1] 10011.9\n## [1] 10011.9\n## [1] 10011.9\n## [1] 10011.9\n## [1] 10011.9\n## [1] 10011.9\n## [1] 10011.91\n## [1] 10011.91\n## [1] 10011.91\n## [1] 10011.91\n## [1] 10011.91\n## [1] 10011.91\n## [1] 10011.91\n## [1] 10011.91\n## [1] 10011.92\n## [1] 10011.92\n## [1] 10011.92\n## [1] 10011.92\n## [1] 10011.92\n## [1] 10011.92\n## [1] 10011.92\n## [1] 10011.93\n## [1] 10011.93\n## [1] 10011.93\n## [1] 10011.93\n## [1] 10011.93\n## [1] 10011.93\n## [1] 10011.93\n## [1] 10011.93\n## [1] 10011.94\n## [1] 10011.94\n## [1] 10011.94\n## [1] 10011.94\n## [1] 10011.94\n## [1] 10011.94\n## [1] 10011.94\n## [1] 10011.94\n## [1] 10011.95\n## [1] 10011.95\n## [1] 10011.95\n## [1] 10011.95\n## [1] 10011.95\n## [1] 10011.95\n## [1] 10011.95\n## [1] 10011.96\n## [1] 10011.96\n## [1] 10011.96\n## [1] 10011.96\n## [1] 10011.96\n## [1] 10011.96\n## [1] 10011.96\n## [1] 10011.96\n## [1] 10011.97\n## [1] 10011.97\n## [1] 10011.97\n## [1] 10011.97\n## [1] 10011.97\n## [1] 10011.97\n## [1] 10011.97\n## [1] 10011.98\n## [1] 10011.98\n## [1] 10011.98\n## [1] 10011.98\n## [1] 10011.98\n## [1] 10011.98\n## [1] 10011.98\n## [1] 10011.98\n## [1] 10011.99\n## [1] 10011.99\n## [1] 10011.99\n## [1] 10011.99\n## [1] 10011.99\n## [1] 10011.99\n## [1] 10011.99\n## [1] 10011.99\n## [1] 10012\n## [1] 10012\n## [1] 10012\n## [1] 10012\n## [1] 10012\n## [1] 10012\n## [1] 10012\n## [1] 10012.01\n## [1] 10012.01\n## [1] 10012.01\n## [1] 10012.01\n## [1] 10012.01\n## [1] 10012.01\n## [1] 10012.01\n## [1] 10012.01\n## [1] 10012.02\n## [1] 10012.02\n## [1] 10012.02\n## [1] 10012.02\n## [1] 10012.02\n## [1] 10012.02\n## [1] 10012.02\n## [1] 10012.02\n## [1] 10012.03\n## [1] 10012.03\n## [1] 10012.03\n## [1] 10012.03\n## [1] 10012.03\n## [1] 10012.03\n## [1] 10012.03\n## [1] 10012.04\n## [1] 10012.04\n## [1] 10012.04\n## [1] 10012.04\n## [1] 10012.04\n## [1] 10012.04\n## [1] 10012.04\n## [1] 10012.04\n## [1] 10012.05\n## [1] 10012.05\n## [1] 10012.05\n## [1] 10012.05\n## [1] 10012.05\n## [1] 10012.05\n## [1] 10012.05\n## [1] 10012.06\n## [1] 10012.06\n## [1] 10012.06\n## [1] 10012.06\n## [1] 10012.06\n## [1] 10012.06\n## [1] 10012.06\n## [1] 10012.06\n## [1] 10012.07\n## [1] 10012.07\n## [1] 10012.07\n## [1] 10012.07\n## [1] 10012.07\n## [1] 10012.07\n## [1] 10012.07\n## [1] 10012.07\n## [1] 10012.08\n## [1] 10012.08\n## [1] 10012.08\n## [1] 10012.08\n## [1] 10012.08\n## [1] 10012.08\n## [1] 10012.08\n## [1] 10012.09\n## [1] 10012.09\n## [1] 10012.09\n## [1] 10012.09\n## [1] 10012.09\n## [1] 10012.09\n## [1] 10012.09\n## [1] 10012.09\n## [1] 10012.1\n## [1] 10012.1\n## [1] 10012.1\n## [1] 10012.1\n## [1] 10012.1\n## [1] 10012.1\n## [1] 10012.1\n## [1] 10012.11\n## [1] 10012.11\n## [1] 10012.11\n## [1] 10012.11\n## [1] 10012.11\n## [1] 10012.11\n## [1] 10012.11\n## [1] 10012.11\n## [1] 10012.12\n## [1] 10012.12\n## [1] 10012.12\n## [1] 10012.12\n## [1] 10012.12\n## [1] 10012.12\n## [1] 10012.12\n## [1] 10012.12\n## [1] 10012.13\n## [1] 10012.13\n## [1] 10012.13\n## [1] 10012.13\n## [1] 10012.13\n## [1] 10012.13\n## [1] 10012.13\n## [1] 10012.14\n## [1] 10012.14\n## [1] 10012.14\n## [1] 10012.14\n## [1] 10012.14\n## [1] 10012.14\n## [1] 10012.14\n## [1] 10012.14\n## [1] 10012.15\n## [1] 10012.15\n## [1] 10012.15\n## [1] 10012.15\n## [1] 10012.15\n## [1] 10012.15\n## [1] 10012.15\n## [1] 10012.16\n## [1] 10012.16\n## [1] 10012.16\n## [1] 10012.16\n## [1] 10012.16\n## [1] 10012.16\n## [1] 10012.16\n## [1] 10012.16\n## [1] 10012.17\n## [1] 10012.17\n## [1] 10012.17\n## [1] 10012.17\n## [1] 10012.17\n## [1] 10012.17\n## [1] 10012.17\n## [1] 10012.17\n## [1] 10012.18\n## [1] 10012.18\n## [1] 10012.18\n## [1] 10012.18\n## [1] 10012.18\n## [1] 10012.18\n## [1] 10012.18\n## [1] 10012.19\n## [1] 10012.19\n## [1] 10012.19\n## [1] 10012.19\n## [1] 10012.19\n## [1] 10012.19\n## [1] 10012.19\n## [1] 10012.19\n## [1] 10012.2\n## [1] 10012.2\n## [1] 10012.2\n## [1] 10012.2\n## [1] 10012.2\n## [1] 10012.2\n## [1] 10012.2\n## [1] 10012.21\n## [1] 10012.21\n## [1] 10012.21\n## [1] 10012.21\n## [1] 10012.21\n## [1] 10012.21\n## [1] 10012.21\n## [1] 10012.21\n## [1] 10012.22\n## [1] 10012.22\n## [1] 10012.22\n## [1] 10012.22\n## [1] 10012.22\n## [1] 10012.22\n## [1] 10012.22\n## [1] 10012.22\n## [1] 10012.23\n## [1] 10012.23\n## [1] 10012.23\n## [1] 10012.23\n## [1] 10012.23\n## [1] 10012.23\n## [1] 10012.23\n## [1] 10012.24\n## [1] 10012.24\n## [1] 10012.24\n## [1] 10012.24\n## [1] 10012.24\n## [1] 10012.24\n## [1] 10012.24\n## [1] 10012.24\n## [1] 10012.25\n## [1] 10012.25\n## [1] 10012.25\n## [1] 10012.25\n## [1] 10012.25\n## [1] 10012.25\n## [1] 10012.25\n## [1] 10012.26\n## [1] 10012.26\n## [1] 10012.26\n## [1] 10012.26\n## [1] 10012.26\n## [1] 10012.26\n## [1] 10012.26\n## [1] 10012.26\n## [1] 10012.27\n## [1] 10012.27\n## [1] 10012.27\n## [1] 10012.27\n## [1] 10012.27\n## [1] 10012.27\n## [1] 10012.27\n## [1] 10012.27\n## [1] 10012.28\n## [1] 10012.28\n## [1] 10012.28\n## [1] 10012.28\n## [1] 10012.28\n## [1] 10012.28\n## [1] 10012.28\n## [1] 10012.29\n## [1] 10012.29\n## [1] 10012.29\n## [1] 10012.29\n## [1] 10012.29\n## [1] 10012.29\n## [1] 10012.29\n## [1] 10012.29\n## [1] 10012.3\n## [1] 10012.3\n## [1] 10012.3\n## [1] 10012.3\n## [1] 10012.3\n## [1] 10012.3\n## [1] 10012.3\n## [1] 10012.31\n## [1] 10012.31\n## [1] 10012.31\n## [1] 10012.31\n## [1] 10012.31\n## [1] 10012.31\n## [1] 10012.31\n## [1] 10012.31\n## [1] 10012.32\n## [1] 10012.32\n## [1] 10012.32\n## [1] 10012.32\n## [1] 10012.32\n## [1] 10012.32\n## [1] 10012.32\n## [1] 10012.32\n## [1] 10012.33\n## [1] 10012.33\n## [1] 10012.33\n## [1] 10012.33\n## [1] 10012.33\n## [1] 10012.33\n## [1] 10012.33\n## [1] 10012.34\n## [1] 10012.34\n## [1] 10012.34\n## [1] 10012.34\n## [1] 10012.34\n## [1] 10012.34\n## [1] 10012.34\n## [1] 10012.34\n## [1] 10012.35\n## [1] 10012.35\n## [1] 10012.35\n## [1] 10012.35\n## [1] 10012.35\n## [1] 10012.35\n## [1] 10012.35\n## [1] 10012.36\n## [1] 10012.36\n## [1] 10012.36\n## [1] 10012.36\n## [1] 10012.36\n## [1] 10012.36\n## [1] 10012.36\n## [1] 10012.36\n## [1] 10012.37\n## [1] 10012.37\n## [1] 10012.37\n## [1] 10012.37\n## [1] 10012.37\n## [1] 10012.37\n## [1] 10012.37\n## [1] 10012.37\n## [1] 10012.38\n## [1] 10012.38\n## [1] 10012.38\n## [1] 10012.38\n## [1] 10012.38\n## [1] 10012.38\n## [1] 10012.38\n## [1] 10012.39\n## [1] 10012.39\n## [1] 10012.39\n## [1] 10012.39\n## [1] 10012.39\n## [1] 10012.39\n## [1] 10012.39\n## [1] 10012.39\n## [1] 10012.4\n## [1] 10012.4\n## [1] 10012.4\n## [1] 10012.4\n## [1] 10012.4\n## [1] 10012.4\n## [1] 10012.4\n## [1] 10012.4\n## [1] 10012.41\n## [1] 10012.41\n## [1] 10012.41\n## [1] 10012.41\n## [1] 10012.41\n## [1] 10012.41\n## [1] 10012.41\n## [1] 10012.42\n## [1] 10012.42\n## [1] 10012.42\n## [1] 10012.42\n## [1] 10012.42\n## [1] 10012.42\n## [1] 10012.42\n## [1] 10012.42\n## [1] 10012.43\n## [1] 10012.43\n## [1] 10012.43\n## [1] 10012.43\n## [1] 10012.43\n## [1] 10012.43\n## [1] 10012.43\n## [1] 10012.44\n## [1] 10012.44\n## [1] 10012.44\n## [1] 10012.44\n## [1] 10012.44\n## [1] 10012.44\n## [1] 10012.44\n## [1] 10012.44\n## [1] 10012.45\n## [1] 10012.45\n## [1] 10012.45\n## [1] 10012.45\n## [1] 10012.45\n## [1] 10012.45\n## [1] 10012.45\n## [1] 10012.45\n## [1] 10012.46\n## [1] 10012.46\n## [1] 10012.46\n## [1] 10012.46\n## [1] 10012.46\n## [1] 10012.46\n## [1] 10012.46\n## [1] 10012.47\n## [1] 10012.47\n## [1] 10012.47\n## [1] 10012.47\n## [1] 10012.47\n## [1] 10012.47\n## [1] 10012.47\n## [1] 10012.47\n## [1] 10012.48\n## [1] 10012.48\n## [1] 10012.48\n## [1] 10012.48\n## [1] 10012.48\n## [1] 10012.48\n## [1] 10012.48\n## [1] 10012.49\n## [1] 10012.49\n## [1] 10012.49\n## [1] 10012.49\n## [1] 10012.49\n## [1] 10012.49\n## [1] 10012.49\n## [1] 10012.49\n## [1] 10012.5\n## [1] 10012.5\n## [1] 10012.5\n## [1] 10012.5\n## [1] 10012.5\n## [1] 10012.5\n## [1] 10012.5\n## [1] 10012.5\n## [1] 10012.51\n## [1] 10012.51\n## [1] 10012.51\n## [1] 10012.51\n## [1] 10012.51\n## [1] 10012.51\n## [1] 10012.51\n## [1] 10012.52\n## [1] 10012.52\n## [1] 10012.52\n## [1] 10012.52\n## [1] 10012.52\n## [1] 10012.52\n## [1] 10012.52\n## [1] 10012.52\n## [1] 10012.53\n## [1] 10012.53\n## [1] 10012.53\n## [1] 10012.53\n## [1] 10012.53\n## [1] 10012.53\n## [1] 10012.53\n## [1] 10012.54\n## [1] 10012.54\n## [1] 10012.54\n## [1] 10012.54\n## [1] 10012.54\n## [1] 10012.54\n## [1] 10012.54\n## [1] 10012.54\n## [1] 10012.55\n## [1] 10012.55\n## [1] 10012.55\n## [1] 10012.55\n## [1] 10012.55\n## [1] 10012.55\n## [1] 10012.55\n## [1] 10012.55\n## [1] 10012.56\n## [1] 10012.56\n## [1] 10012.56\n## [1] 10012.56\n## [1] 10012.56\n## [1] 10012.56\n## [1] 10012.56\n## [1] 10012.57\n## [1] 10012.57\n## [1] 10012.57\n## [1] 10012.57\n## [1] 10012.57\n## [1] 10012.57\n## [1] 10012.57\n## [1] 10012.57\n## [1] 10012.58\n## [1] 10012.58\n## [1] 10012.58\n## [1] 10012.58\n## [1] 10012.58\n## [1] 10012.58\n## [1] 10012.58\n## [1] 10012.59\n## [1] 10012.59\n## [1] 10012.59\n## [1] 10012.59\n## [1] 10012.59\n## [1] 10012.59\n## [1] 10012.59\n## [1] 10012.59\n## [1] 10012.6\n## [1] 10012.6\n## [1] 10012.6\n## [1] 10012.6\n## [1] 10012.6\n## [1] 10012.6\n## [1] 10012.6\n## [1] 10012.6\n## [1] 10012.61\n## [1] 10012.61\n## [1] 10012.61\n## [1] 10012.61\n## [1] 10012.61\n## [1] 10012.61\n## [1] 10012.61\n## [1] 10012.62\n## [1] 10012.62\n## [1] 10012.62\n## [1] 10012.62\n## [1] 10012.62\n## [1] 10012.62\n## [1] 10012.62\n## [1] 10012.62\n## [1] 10012.63\n## [1] 10012.63\n## [1] 10012.63\n## [1] 10012.63\n## [1] 10012.63\n## [1] 10012.63\n## [1] 10012.63\n## [1] 10012.64\n## [1] 10012.64\n## [1] 10012.64\n## [1] 10012.64\n## [1] 10012.64\n## [1] 10012.64\n## [1] 10012.64\n## [1] 10012.64\n## [1] 10012.65\n## [1] 10012.65\n## [1] 10012.65\n## [1] 10012.65\n## [1] 10012.65\n## [1] 10012.65\n## [1] 10012.65\n## [1] 10012.65\n## [1] 10012.66\n## [1] 10012.66\n## [1] 10012.66\n## [1] 10012.66\n## [1] 10012.66\n## [1] 10012.66\n## [1] 10012.66\n## [1] 10012.67\n## [1] 10012.67\n## [1] 10012.67\n## [1] 10012.67\n## [1] 10012.67\n## [1] 10012.67\n## [1] 10012.67\n## [1] 10012.67\n## [1] 10012.68\n## [1] 10012.68\n## [1] 10012.68\n## [1] 10012.68\n## [1] 10012.68\n## [1] 10012.68\n## [1] 10012.68\n## [1] 10012.69\n## [1] 10012.69\n## [1] 10012.69\n## [1] 10012.69\n## [1] 10012.69\n## [1] 10012.69\n## [1] 10012.69\n## [1] 10012.69\n## [1] 10012.7\n## [1] 10012.7\n## [1] 10012.7\n## [1] 10012.7\n## [1] 10012.7\n## [1] 10012.7\n## [1] 10012.7\n## [1] 10012.7\n## [1] 10012.71\n## [1] 10012.71\n## [1] 10012.71\n## [1] 10012.71\n## [1] 10012.71\n## [1] 10012.71\n## [1] 10012.71\n## [1] 10012.72\n## [1] 10012.72\n## [1] 10012.72\n## [1] 10012.72\n## [1] 10012.72\n## [1] 10012.72\n## [1] 10012.72\n## [1] 10012.72\n## [1] 10012.73\n## [1] 10012.73\n## [1] 10012.73\n## [1] 10012.73\n## [1] 10012.73\n## [1] 10012.73\n## [1] 10012.73\n## [1] 10012.74\n## [1] 10012.74\n## [1] 10012.74\n## [1] 10012.74\n## [1] 10012.74\n## [1] 10012.74\n## [1] 10012.74\n## [1] 10012.74\n## [1] 10012.75\n## [1] 10012.75\n## [1] 10012.75\n## [1] 10012.75\n## [1] 10012.75\n## [1] 10012.75\n## [1] 10012.75\n## [1] 10012.75\n## [1] 10012.76\n## [1] 10012.76\n## [1] 10012.76\n## [1] 10012.76\n## [1] 10012.76\n## [1] 10012.76\n## [1] 10012.76\n## [1] 10012.77\n## [1] 10012.77\n## [1] 10012.77\n## [1] 10012.77\n## [1] 10012.77\n## [1] 10012.77\n## [1] 10012.77\n## [1] 10012.77\n## [1] 10012.78\n## [1] 10012.78\n## [1] 10012.78\n## [1] 10012.78\n## [1] 10012.78\n## [1] 10012.78\n## [1] 10012.78\n## [1] 10012.79\n## [1] 10012.79\n## [1] 10012.79\n## [1] 10012.79\n## [1] 10012.79\n## [1] 10012.79\n## [1] 10012.79\n## [1] 10012.79\n## [1] 10012.8\n## [1] 10012.8\n## [1] 10012.8\n## [1] 10012.8\n## [1] 10012.8\n## [1] 10012.8\n## [1] 10012.8\n## [1] 10012.8\n## [1] 10012.81\n## [1] 10012.81\n## [1] 10012.81\n## [1] 10012.81\n## [1] 10012.81\n## [1] 10012.81\n## [1] 10012.81\n## [1] 10012.82\n## [1] 10012.82\n## [1] 10012.82\n## [1] 10012.82\n## [1] 10012.82\n## [1] 10012.82\n## [1] 10012.82\n## [1] 10012.82\n## [1] 10012.83\n## [1] 10012.83\n## [1] 10012.83\n## [1] 10012.83\n## [1] 10012.83\n## [1] 10012.83\n## [1] 10012.83\n## [1] 10012.83\n## [1] 10012.84\n## [1] 10012.84\n## [1] 10012.84\n## [1] 10012.84\n## [1] 10012.84\n## [1] 10012.84\n## [1] 10012.84\n## [1] 10012.85\n## [1] 10012.85\n## [1] 10012.85\n## [1] 10012.85\n## [1] 10012.85\n## [1] 10012.85\n## [1] 10012.85\n## [1] 10012.85\n## [1] 10012.86\n## [1] 10012.86\n## [1] 10012.86\n## [1] 10012.86\n## [1] 10012.86\n## [1] 10012.86\n## [1] 10012.86\n## [1] 10012.87\n## [1] 10012.87\n## [1] 10012.87\n## [1] 10012.87\n## [1] 10012.87\n## [1] 10012.87\n## [1] 10012.87\n## [1] 10012.87\n## [1] 10012.88\n## [1] 10012.88\n## [1] 10012.88\n## [1] 10012.88\n## [1] 10012.88\n## [1] 10012.88\n## [1] 10012.88\n## [1] 10012.88\n## [1] 10012.89\n## [1] 10012.89\n## [1] 10012.89\n## [1] 10012.89\n## [1] 10012.89\n## [1] 10012.89\n## [1] 10012.89\n## [1] 10012.9\n## [1] 10012.9\n## [1] 10012.9\n## [1] 10012.9\n## [1] 10012.9\n## [1] 10012.9\n## [1] 10012.9\n## [1] 10012.9\n## [1] 10012.91\n## [1] 10012.91\n## [1] 10012.91\n## [1] 10012.91\n## [1] 10012.91\n## [1] 10012.91\n## [1] 10012.91\n## [1] 10012.92\n## [1] 10012.92\n## [1] 10012.92\n## [1] 10012.92\n## [1] 10012.92\n## [1] 10012.92\n## [1] 10012.92\n## [1] 10012.92\n## [1] 10012.93\n## [1] 10012.93\n## [1] 10012.93\n## [1] 10012.93\n## [1] 10012.93\n## [1] 10012.93\n## [1] 10012.93\n## [1] 10012.93\n## [1] 10012.94\n## [1] 10012.94\n## [1] 10012.94\n## [1] 10012.94\n## [1] 10012.94\n## [1] 10012.94\n## [1] 10012.94\n## [1] 10012.95\n## [1] 10012.95\n## [1] 10012.95\n## [1] 10012.95\n## [1] 10012.95\n## [1] 10012.95\n## [1] 10012.95\n## [1] 10012.95\n## [1] 10012.96\n## [1] 10012.96\n## [1] 10012.96\n## [1] 10012.96\n## [1] 10012.96\n## [1] 10012.96\n## [1] 10012.96\n## [1] 10012.97\n## [1] 10012.97\n## [1] 10012.97\n## [1] 10012.97\n## [1] 10012.97\n## [1] 10012.97\n## [1] 10012.97\n## [1] 10012.97\n## [1] 10012.98\n## [1] 10012.98\n## [1] 10012.98\n## [1] 10012.98\n## [1] 10012.98\n## [1] 10012.98\n## [1] 10012.98\n## [1] 10012.98\n## [1] 10012.99\n## [1] 10012.99\n## [1] 10012.99\n## [1] 10012.99\n## [1] 10012.99\n## [1] 10012.99\n## [1] 10012.99\n## [1] 10013\n## [1] 10013\n## [1] 10013\n## [1] 10013\n## [1] 10013\n## [1] 10013\n## [1] 10013\n## [1] 10013\n## [1] 10013.01\n## [1] 10013.01\n## [1] 10013.01\n## [1] 10013.01\n## [1] 10013.01\n## [1] 10013.01\n## [1] 10013.01\n## [1] 10013.02\n## [1] 10013.02\n## [1] 10013.02\n## [1] 10013.02\n## [1] 10013.02\n## [1] 10013.02\n## [1] 10013.02\n## [1] 10013.02\n## [1] 10013.03\n## [1] 10013.03\n## [1] 10013.03\n## [1] 10013.03\n## [1] 10013.03\n## [1] 10013.03\n## [1] 10013.03\n## [1] 10013.03\n## [1] 10013.04\n## [1] 10013.04\n## [1] 10013.04\n## [1] 10013.04\n## [1] 10013.04\n## [1] 10013.04\n## [1] 10013.04\n## [1] 10013.05\n## [1] 10013.05\n## [1] 10013.05\n## [1] 10013.05\n## [1] 10013.05\n## [1] 10013.05\n## [1] 10013.05\n## [1] 10013.05\n## [1] 10013.06\n## [1] 10013.06\n## [1] 10013.06\n## [1] 10013.06\n## [1] 10013.06\n## [1] 10013.06\n## [1] 10013.06\n## [1] 10013.07\n## [1] 10013.07\n## [1] 10013.07\n## [1] 10013.07\n## [1] 10013.07\n## [1] 10013.07\n## [1] 10013.07\n## [1] 10013.07\n## [1] 10013.08\n## [1] 10013.08\n## [1] 10013.08\n## [1] 10013.08\n## [1] 10013.08\n## [1] 10013.08\n## [1] 10013.08\n## [1] 10013.08\n## [1] 10013.09\n## [1] 10013.09\n## [1] 10013.09\n## [1] 10013.09\n## [1] 10013.09\n## [1] 10013.09\n## [1] 10013.09\n## [1] 10013.1\n## [1] 10013.1\n## [1] 10013.1\n## [1] 10013.1\n## [1] 10013.1\n## [1] 10013.1\n## [1] 10013.1\n## [1] 10013.1\n## [1] 10013.11\n## [1] 10013.11\n## [1] 10013.11\n## [1] 10013.11\n## [1] 10013.11\n## [1] 10013.11\n## [1] 10013.11\n## [1] 10013.12\n## [1] 10013.12\n## [1] 10013.12\n## [1] 10013.12\n## [1] 10013.12\n## [1] 10013.12\n## [1] 10013.12\n## [1] 10013.12\n## [1] 10013.13\n## [1] 10013.13\n## [1] 10013.13\n## [1] 10013.13\n## [1] 10013.13\n## [1] 10013.13\n## [1] 10013.13\n## [1] 10013.13\n## [1] 10013.14\n## [1] 10013.14\n## [1] 10013.14\n## [1] 10013.14\n## [1] 10013.14\n## [1] 10013.14\n## [1] 10013.14\n## [1] 10013.15\n## [1] 10013.15\n## [1] 10013.15\n## [1] 10013.15\n\n\nfor (i in 6:10) {\n    print(i)\n}\n## [1] 6\n## [1] 7\n## [1] 8\n## [1] 9\n## [1] 10\n\n\nfor(i in 1:9) {\n    cat('2 *', i, '=', 2 * i, '\\n')\n}\n## 2 * 1 = 2 \n## 2 * 2 = 4 \n## 2 * 3 = 6 \n## 2 * 4 = 8 \n## 2 * 5 = 10 \n## 2 * 6 = 12 \n## 2 * 7 = 14 \n## 2 * 8 = 16 \n## 2 * 9 = 18\n\nfor (i in 1:9) {\n    cat('2 *', i, '=', 2 * i)\n}\n## 2 * 1 = 22 * 2 = 42 * 3 = 62 * 4 = 82 * 5 = 102 * 6 = 122 * 7 = 142 * 8 = 162 * 9 = 18\n\nfor (i in 1:9) {\n    j &lt;- i:10\n    print(j)\n}\n##  [1]  1  2  3  4  5  6  7  8  9 10\n## [1]  2  3  4  5  6  7  8  9 10\n## [1]  3  4  5  6  7  8  9 10\n## [1]  4  5  6  7  8  9 10\n## [1]  5  6  7  8  9 10\n## [1]  6  7  8  9 10\n## [1]  7  8  9 10\n## [1]  8  9 10\n## [1]  9 10\n\n\nfor(i in 1:20) {\n    if (i %% 2 == 0) {  # 짝수인지 확인\n        print(i)\n    }\n}\n## [1] 2\n## [1] 4\n## [1] 6\n## [1] 8\n## [1] 10\n## [1] 12\n## [1] 14\n## [1] 16\n## [1] 18\n## [1] 20\n\n\nsum &lt;- 0\nfor (i in 1:100) {\n    sum &lt;- sum + i  # sum에 i 값을 누적\n}\nprint(sum)\n## [1] 5050\n\nsum &lt;- 0\nfor (i in 1:100) {\n    sum &lt;- sum + i\n    print(c(sum, i))\n}\n## [1] 1 1\n## [1] 3 2\n## [1] 6 3\n## [1] 10  4\n## [1] 15  5\n## [1] 21  6\n## [1] 28  7\n## [1] 36  8\n## [1] 45  9\n## [1] 55 10\n## [1] 66 11\n## [1] 78 12\n## [1] 91 13\n## [1] 105  14\n## [1] 120  15\n## [1] 136  16\n## [1] 153  17\n## [1] 171  18\n## [1] 190  19\n## [1] 210  20\n## [1] 231  21\n## [1] 253  22\n## [1] 276  23\n## [1] 300  24\n## [1] 325  25\n## [1] 351  26\n## [1] 378  27\n## [1] 406  28\n## [1] 435  29\n## [1] 465  30\n## [1] 496  31\n## [1] 528  32\n## [1] 561  33\n## [1] 595  34\n## [1] 630  35\n## [1] 666  36\n## [1] 703  37\n## [1] 741  38\n## [1] 780  39\n## [1] 820  40\n## [1] 861  41\n## [1] 903  42\n## [1] 946  43\n## [1] 990  44\n## [1] 1035   45\n## [1] 1081   46\n## [1] 1128   47\n## [1] 1176   48\n## [1] 1225   49\n## [1] 1275   50\n## [1] 1326   51\n## [1] 1378   52\n## [1] 1431   53\n## [1] 1485   54\n## [1] 1540   55\n## [1] 1596   56\n## [1] 1653   57\n## [1] 1711   58\n## [1] 1770   59\n## [1] 1830   60\n## [1] 1891   61\n## [1] 1953   62\n## [1] 2016   63\n## [1] 2080   64\n## [1] 2145   65\n## [1] 2211   66\n## [1] 2278   67\n## [1] 2346   68\n## [1] 2415   69\n## [1] 2485   70\n## [1] 2556   71\n## [1] 2628   72\n## [1] 2701   73\n## [1] 2775   74\n## [1] 2850   75\n## [1] 2926   76\n## [1] 3003   77\n## [1] 3081   78\n## [1] 3160   79\n## [1] 3240   80\n## [1] 3321   81\n## [1] 3403   82\n## [1] 3486   83\n## [1] 3570   84\n## [1] 3655   85\n## [1] 3741   86\n## [1] 3828   87\n## [1] 3916   88\n## [1] 4005   89\n## [1] 4095   90\n## [1] 4186   91\n## [1] 4278   92\n## [1] 4371   93\n## [1] 4465   94\n## [1] 4560   95\n## [1] 4656   96\n## [1] 4753   97\n## [1] 4851   98\n## [1] 4950   99\n## [1] 5050  100\nprint(sum)\n## [1] 5050\n\nsum &lt;- 0\nfor (i in 1:100) {\n    print(c(sum, i))\n    sum &lt;- sum + i\n}\n## [1] 0 1\n## [1] 1 2\n## [1] 3 3\n## [1] 6 4\n## [1] 10  5\n## [1] 15  6\n## [1] 21  7\n## [1] 28  8\n## [1] 36  9\n## [1] 45 10\n## [1] 55 11\n## [1] 66 12\n## [1] 78 13\n## [1] 91 14\n## [1] 105  15\n## [1] 120  16\n## [1] 136  17\n## [1] 153  18\n## [1] 171  19\n## [1] 190  20\n## [1] 210  21\n## [1] 231  22\n## [1] 253  23\n## [1] 276  24\n## [1] 300  25\n## [1] 325  26\n## [1] 351  27\n## [1] 378  28\n## [1] 406  29\n## [1] 435  30\n## [1] 465  31\n## [1] 496  32\n## [1] 528  33\n## [1] 561  34\n## [1] 595  35\n## [1] 630  36\n## [1] 666  37\n## [1] 703  38\n## [1] 741  39\n## [1] 780  40\n## [1] 820  41\n## [1] 861  42\n## [1] 903  43\n## [1] 946  44\n## [1] 990  45\n## [1] 1035   46\n## [1] 1081   47\n## [1] 1128   48\n## [1] 1176   49\n## [1] 1225   50\n## [1] 1275   51\n## [1] 1326   52\n## [1] 1378   53\n## [1] 1431   54\n## [1] 1485   55\n## [1] 1540   56\n## [1] 1596   57\n## [1] 1653   58\n## [1] 1711   59\n## [1] 1770   60\n## [1] 1830   61\n## [1] 1891   62\n## [1] 1953   63\n## [1] 2016   64\n## [1] 2080   65\n## [1] 2145   66\n## [1] 2211   67\n## [1] 2278   68\n## [1] 2346   69\n## [1] 2415   70\n## [1] 2485   71\n## [1] 2556   72\n## [1] 2628   73\n## [1] 2701   74\n## [1] 2775   75\n## [1] 2850   76\n## [1] 2926   77\n## [1] 3003   78\n## [1] 3081   79\n## [1] 3160   80\n## [1] 3240   81\n## [1] 3321   82\n## [1] 3403   83\n## [1] 3486   84\n## [1] 3570   85\n## [1] 3655   86\n## [1] 3741   87\n## [1] 3828   88\n## [1] 3916   89\n## [1] 4005   90\n## [1] 4095   91\n## [1] 4186   92\n## [1] 4278   93\n## [1] 4371   94\n## [1] 4465   95\n## [1] 4560   96\n## [1] 4656   97\n## [1] 4753   98\n## [1] 4851   99\n## [1] 4950  100\nprint(sum)\n## [1] 5050\n\n\nnorow &lt;- nrow(iris)                             # iris의 행의 수\nmylabel &lt;- c()                                  # 비어 있는 벡터 선언\nfor (i in 1:norow) {\n    if (iris$Petal.Length[i] &lt;= 1.6) {          # 꽃잎의 길이에 따라 레이블 결정\n        mylabel[i] &lt;- 'L'\n    } else if (iris$Petal.Length[i] &gt;= 5.1) {\n        mylabel[i] &lt;- 'H'\n    } else {\n        mylabel[i] &lt;- 'M'\n    }\n    print(c(iris$Petal.Length[i], mylabel))\n}\n## [1] \"1.4\" \"L\"  \n## [1] \"1.4\" \"L\"   \"L\"  \n## [1] \"1.3\" \"L\"   \"L\"   \"L\"  \n## [1] \"1.5\" \"L\"   \"L\"   \"L\"   \"L\"  \n## [1] \"1.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [1] \"1.7\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"  \n## [1] \"1.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"  \n## [1] \"1.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [1] \"1.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"  \n##  [1] \"1.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"  \n##  [1] \"1.1\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"  \n##  [1] \"1.2\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.3\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.7\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"  \n##  [1] \"1.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"  \n##  [1] \"1.7\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"  \n##  [1] \"1.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"  \n##  [1] \"1\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n## [20] \"M\" \"L\" \"M\" \"L\" \"L\"\n##  [1] \"1.7\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"  \n##  [1] \"1.9\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"  \n##  [1] \"1.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"  \n##  [1] \"1.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"  \n##  [1] \"1.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.2\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"  \n##  [1] \"1.3\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"  \n##  [1] \"1.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"  \n##  [1] \"1.3\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.3\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.3\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.3\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.9\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"  \n##  [1] \"1.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"  \n##  [1] \"1.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [1] \"1.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"  \n##  [1] \"1.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"  \n##  [1] \"1.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"  \n##  [1] \"4.7\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"  \n##  [1] \"4.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"  \n##  [1] \"4.9\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n## [20] \"M\" \"L\" \"M\" \"L\" \"L\" \"M\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n## [39] \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"M\" \"M\" \"M\"\n##  [1] \"4.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4.7\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"3.3\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"3.9\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"  \n##  [1] \"3.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"  \n##  [1] \"4.2\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"  \n##  [1] \"4\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n## [20] \"M\" \"L\" \"M\" \"L\" \"L\" \"M\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n## [39] \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n## [58] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [1] \"4.7\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"3.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4.1\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"3.9\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4.8\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n## [20] \"M\" \"L\" \"M\" \"L\" \"L\" \"M\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n## [39] \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n## [58] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [1] \"4.9\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"  \n##  [1] \"4.7\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"  \n##  [1] \"4.3\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4.8\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"5\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n## [20] \"M\" \"L\" \"M\" \"L\" \"L\" \"M\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n## [39] \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n## [58] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n## [77] \"M\" \"M\" \"M\"\n##  [1] \"4.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"3.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"3.8\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"3.7\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"3.9\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"5.1\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [85] \"H\"  \n##  [1] \"4.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [85] \"H\"   \"M\"  \n##  [1] \"4.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [85] \"H\"   \"M\"   \"M\"  \n##  [1] \"4.7\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [85] \"H\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4.1\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n## [20] \"M\" \"L\" \"M\" \"L\" \"L\" \"M\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n## [39] \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n## [58] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n## [77] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"H\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [1] \"4.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n## [20] \"M\" \"L\" \"M\" \"L\" \"L\" \"M\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n## [39] \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n## [58] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n## [77] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"H\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [1] \"3.3\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4.2\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4.2\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [97] \"M\"  \n##  [1] \"4.2\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [97] \"M\"   \"M\"  \n##  [1] \"4.3\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [97] \"M\"   \"M\"   \"M\"  \n##   [1] \"3\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n##  [19] \"L\" \"M\" \"L\" \"M\" \"L\" \"L\" \"M\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n##  [37] \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"M\" \"M\"\n##  [55] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [73] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"H\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [91] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##   [1] \"4.1\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##   [1] \"6\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n##  [19] \"L\" \"M\" \"L\" \"M\" \"L\" \"L\" \"M\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n##  [37] \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"M\" \"M\"\n##  [55] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [73] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"H\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [91] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"H\"\n##   [1] \"5.1\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"  \n##   [1] \"5.9\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n##   [1] \"5.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"  \n##   [1] \"5.8\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n##   [1] \"6.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n##   [1] \"4.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n##   [1] \"6.3\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"  \n##   [1] \"5.8\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"  \n##   [1] \"6.1\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"  \n##   [1] \"5.1\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"  \n##   [1] \"5.3\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n##   [1] \"5.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n##   [1] \"5\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n##  [19] \"L\" \"M\" \"L\" \"M\" \"L\" \"L\" \"M\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n##  [37] \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"M\" \"M\"\n##  [55] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [73] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"H\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [91] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"M\"\n## [109] \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"M\"\n##   [1] \"5.1\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"  \n##   [1] \"5.3\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"  \n##   [1] \"5.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"  \n##   [1] \"6.7\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"  \n##   [1] \"6.9\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n##   [1] \"5\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n##  [19] \"L\" \"M\" \"L\" \"M\" \"L\" \"L\" \"M\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n##  [37] \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"M\" \"M\"\n##  [55] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [73] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"H\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [91] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"M\"\n## [109] \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"M\" \"H\" \"H\" \"H\" \"H\" \"H\" \"M\"\n##   [1] \"5.7\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"  \n##   [1] \"4.9\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"  \n##   [1] \"6.7\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"  \n##   [1] \"4.9\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"  \n##   [1] \"5.7\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"  \n##   [1] \"6\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n##  [19] \"L\" \"M\" \"L\" \"M\" \"L\" \"L\" \"M\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n##  [37] \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"M\" \"M\"\n##  [55] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [73] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"H\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [91] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"M\"\n## [109] \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"M\" \"H\" \"H\" \"H\" \"H\" \"H\" \"M\" \"H\" \"M\" \"H\" \"M\" \"H\"\n## [127] \"H\"\n##   [1] \"4.8\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"  \n##   [1] \"4.9\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"  \n##   [1] \"5.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"  \n##   [1] \"5.8\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"  \n##   [1] \"6.1\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n##   [1] \"6.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"  \n##   [1] \"5.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"   \"H\"  \n##   [1] \"5.1\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"   \"H\"   \"H\"  \n##   [1] \"5.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"   \"H\"   \"H\"   \"H\"  \n##   [1] \"6.1\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n##   [1] \"5.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n##   [1] \"5.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n##   [1] \"4.8\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n##   [1] \"5.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"  \n##   [1] \"5.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"  \n##   [1] \"5.1\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"  \n##   [1] \"5.1\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"  \n##   [1] \"5.9\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [145] \"H\"  \n##   [1] \"5.7\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [145] \"H\"   \"H\"  \n##   [1] \"5.2\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [145] \"H\"   \"H\"   \"H\"  \n##   [1] \"5\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n##  [19] \"L\" \"M\" \"L\" \"M\" \"L\" \"L\" \"M\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n##  [37] \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"M\" \"M\"\n##  [55] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [73] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"H\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [91] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"M\"\n## [109] \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"M\" \"H\" \"H\" \"H\" \"H\" \"H\" \"M\" \"H\" \"M\" \"H\" \"M\" \"H\"\n## [127] \"H\" \"M\" \"M\" \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"M\" \"H\" \"H\" \"H\" \"H\"\n## [145] \"H\" \"H\" \"H\" \"M\"\n##   [1] \"5.2\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [145] \"H\"   \"H\"   \"H\"   \"M\"   \"H\"  \n##   [1] \"5.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [145] \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"  \n##   [1] \"5.1\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [145] \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"\nprint(mylabel)                                  # 레이블 출력\n##   [1] \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n##  [19] \"M\" \"L\" \"M\" \"L\" \"L\" \"M\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n##  [37] \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"M\" \"M\" \"M\"\n##  [55] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [73] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"H\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [91] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"M\" \"H\"\n## [109] \"H\" \"H\" \"H\" \"H\" \"H\" \"M\" \"H\" \"H\" \"H\" \"H\" \"H\" \"M\" \"H\" \"M\" \"H\" \"M\" \"H\" \"H\"\n## [127] \"M\" \"M\" \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"M\" \"H\" \"H\" \"H\" \"H\" \"H\"\n## [145] \"H\" \"H\" \"M\" \"H\" \"H\" \"H\"\nnewds &lt;- data.frame(iris$Petal.Length, mylabel) # 꽃잎의 길이와 레이블 결합\nhead(newds)                                     # 새로운 데이터셋 내용 출력\n##   iris.Petal.Length mylabel\n## 1               1.4       L\n## 2               1.4       L\n## 3               1.3       L\n## 4               1.5       L\n## 5               1.4       L\n## 6               1.7       M\n\n\nsum &lt;- 0\ni &lt;- 1\nwhile (i &lt;= 100) {\n    sum &lt;- sum + i      # sum에 i 값을 누적\n    i &lt;- i + 1          # i 값을 1 증가시킴\n    print(c(sum, i))\n}\n## [1] 1 2\n## [1] 3 3\n## [1] 6 4\n## [1] 10  5\n## [1] 15  6\n## [1] 21  7\n## [1] 28  8\n## [1] 36  9\n## [1] 45 10\n## [1] 55 11\n## [1] 66 12\n## [1] 78 13\n## [1] 91 14\n## [1] 105  15\n## [1] 120  16\n## [1] 136  17\n## [1] 153  18\n## [1] 171  19\n## [1] 190  20\n## [1] 210  21\n## [1] 231  22\n## [1] 253  23\n## [1] 276  24\n## [1] 300  25\n## [1] 325  26\n## [1] 351  27\n## [1] 378  28\n## [1] 406  29\n## [1] 435  30\n## [1] 465  31\n## [1] 496  32\n## [1] 528  33\n## [1] 561  34\n## [1] 595  35\n## [1] 630  36\n## [1] 666  37\n## [1] 703  38\n## [1] 741  39\n## [1] 780  40\n## [1] 820  41\n## [1] 861  42\n## [1] 903  43\n## [1] 946  44\n## [1] 990  45\n## [1] 1035   46\n## [1] 1081   47\n## [1] 1128   48\n## [1] 1176   49\n## [1] 1225   50\n## [1] 1275   51\n## [1] 1326   52\n## [1] 1378   53\n## [1] 1431   54\n## [1] 1485   55\n## [1] 1540   56\n## [1] 1596   57\n## [1] 1653   58\n## [1] 1711   59\n## [1] 1770   60\n## [1] 1830   61\n## [1] 1891   62\n## [1] 1953   63\n## [1] 2016   64\n## [1] 2080   65\n## [1] 2145   66\n## [1] 2211   67\n## [1] 2278   68\n## [1] 2346   69\n## [1] 2415   70\n## [1] 2485   71\n## [1] 2556   72\n## [1] 2628   73\n## [1] 2701   74\n## [1] 2775   75\n## [1] 2850   76\n## [1] 2926   77\n## [1] 3003   78\n## [1] 3081   79\n## [1] 3160   80\n## [1] 3240   81\n## [1] 3321   82\n## [1] 3403   83\n## [1] 3486   84\n## [1] 3570   85\n## [1] 3655   86\n## [1] 3741   87\n## [1] 3828   88\n## [1] 3916   89\n## [1] 4005   90\n## [1] 4095   91\n## [1] 4186   92\n## [1] 4278   93\n## [1] 4371   94\n## [1] 4465   95\n## [1] 4560   96\n## [1] 4656   97\n## [1] 4753   98\n## [1] 4851   99\n## [1] 4950  100\n## [1] 5050  101\nprint(sum)\n## [1] 5050\n\n#---------------------------------------#\n# 오류 없이 계속 실행됨\n# sum &lt;- 0\n# i &lt;- 1\n# while(i &gt;= 1) {\n#   sum &lt;- sum + i # sum에 i 값을 누적\n#   i &lt;- i + 1 # i 값을 1 증가시킴\n#   print(c(sum,i))\n# }\n# print(sum)\n#---------------------------------------#\n\n\nsum &lt;- 0\nfor (i in 1:10) {\n    sum &lt;- sum + i\n    print(c(sum, i))\n    if (i &gt;= 5)\n        break\n}\n## [1] 1 1\n## [1] 3 2\n## [1] 6 3\n## [1] 10  4\n## [1] 15  5\nsum\n## [1] 15\n\n\nsum &lt;- 0\nfor (i in 1:10) {\n    if (i %% 2 == 0)\n        next # %% = 나머지\n    sum &lt;- sum + i\n    print(c(sum, i))\n}\n## [1] 1 1\n## [1] 4 3\n## [1] 9 5\n## [1] 16  7\n## [1] 25  9\nsum\n## [1] 25\n\n\napply(iris[, 1:4], 1, mean) # row 방향으로 함수 적용\n##   [1] 2.550 2.375 2.350 2.350 2.550 2.850 2.425 2.525 2.225 2.400 2.700 2.500\n##  [13] 2.325 2.125 2.800 3.000 2.750 2.575 2.875 2.675 2.675 2.675 2.350 2.650\n##  [25] 2.575 2.450 2.600 2.600 2.550 2.425 2.425 2.675 2.725 2.825 2.425 2.400\n##  [37] 2.625 2.500 2.225 2.550 2.525 2.100 2.275 2.675 2.800 2.375 2.675 2.350\n##  [49] 2.675 2.475 4.075 3.900 4.100 3.275 3.850 3.575 3.975 2.900 3.850 3.300\n##  [61] 2.875 3.650 3.300 3.775 3.350 3.900 3.650 3.400 3.600 3.275 3.925 3.550\n##  [73] 3.800 3.700 3.725 3.850 3.950 4.100 3.725 3.200 3.200 3.150 3.400 3.850\n##  [85] 3.600 3.875 4.000 3.575 3.500 3.325 3.425 3.775 3.400 2.900 3.450 3.525\n##  [97] 3.525 3.675 2.925 3.475 4.525 3.875 4.525 4.150 4.375 4.825 3.400 4.575\n## [109] 4.200 4.850 4.200 4.075 4.350 3.800 4.025 4.300 4.200 5.100 4.875 3.675\n## [121] 4.525 3.825 4.800 3.925 4.450 4.550 3.900 3.950 4.225 4.400 4.550 5.025\n## [133] 4.250 3.925 3.925 4.775 4.425 4.200 3.900 4.375 4.450 4.350 3.875 4.550\n## [145] 4.550 4.300 3.925 4.175 4.325 3.950\napply(iris[, 1:4], 2, mean) # col 방향으로 함수 적용\n## Sepal.Length  Sepal.Width Petal.Length  Petal.Width \n##     5.843333     3.057333     3.758000     1.199333\n\nresult &lt;- c()\nfor (i in 1:4) {\n    iris_col &lt;- iris[, i]\n    iris_col_mean_temp &lt;- mean(iris_col)\n    result &lt;- c(result, iris_col_mean_temp)\n}\nresult\n## [1] 5.843333 3.057333 3.758000 1.199333\n\n\nmymax &lt;- function(x, y) {\n    num.max &lt;- x\n    if (y &gt; x) {\n        num.max &lt;- y\n    }\n    return(num.max)\n}\n\n\nmymax(10, 15)\n## [1] 15\na &lt;- mymax(20, 15)\nb &lt;- mymax(31, 45)\nprint(a + b)\n## [1] 65\n\n\nmydiv &lt;- function(x, y = 2) {\n    result &lt;- x / y\n    return(result)\n}\n\nmydiv(x = 10, y = 3) # 매개변수 이름과 매개변수값을 쌍으로 입력\n## [1] 3.333333\nmydiv(10, 3) # 매개변수값만 입력\n## [1] 3.333333\nmydiv(10) # x에 대한 값만 입력(y 값이 생략됨)\n## [1] 5\n\n\nmyfunc &lt;- function(x, y) {\n    val.sum &lt;- x + y\n    val.mul &lt;- x * y\n    return(list(sum = val.sum, mul = val.mul))\n}\n\nresult &lt;- myfunc(5, 8)\nresult\n## $sum\n## [1] 13\n## \n## $mul\n## [1] 40\ns &lt;- result$sum # 5, 8의 합\nm &lt;- result$mul # 5, 8의 곱\ncat('5+8=', s, '\\n')\n## 5+8= 13\ncat('5*8=', m, '\\n')\n## 5*8= 40\n\n\ngetwd()\n## [1] \"D:/Study-Blog\"\n# source(\"myfunc.R\") # myfunc.R 안에 있는 함수 실행\n\na &lt;- mydiv(20, 4) # 함수 호출\nb &lt;- mydiv(30, 4) # 함수 호출\na + b\n## [1] 12.5\nmydiv(mydiv(20, 2), 5) # 함수 호출\n## [1] 2\n\n\nscore &lt;- c(76, 84, 69, 50, 95, 60, 82, 71, 88, 84)\nwhich(score == 69) # 성적이 69인 학생은 몇 번째에 있나\n## [1] 3\nwhich(score &gt;= 85) # 성적이 85 이상인 학생은 몇 번째에 있나\n## [1] 5 9\n\nmax(score) # 최고 점수는 몇 점인가\n## [1] 95\nwhich.max(score) # 최고 점수는 몇 번째에 있나\n## [1] 5\nscore[which.max(score)] # 최고 점수는 몇 점인가\n## [1] 95\n\nmin(score) # 최저 점수는 몇 점인가\n## [1] 50\nwhich.min(score) # 최저 점수는 몇 번째에 있나\n## [1] 4\nscore[which.min(score)] # 최저 점수는 몇 점인가\n## [1] 50\n\n\nscore &lt;- c(76, 84, 69, 50, 95, 60, 82, 71, 88, 84)\nidx &lt;- which(score &lt;= 60) # 성적이 60 이하인 값들의 인덱스\nidx\n## [1] 4 6\nscore[idx]\n## [1] 50 60\nscore[idx] &lt;- 61 # 성적이 60 이하인 값들은 61점으로 성적 상향 조정\nscore # 상향 조정된 성적 확인\n##  [1] 76 84 69 61 95 61 82 71 88 84\n\nidx &lt;- which(score &gt;= 80) # 성적이 80 이상인 값들의 인덱스\nidx\n## [1]  2  5  7  9 10\nscore[idx]\n## [1] 84 95 82 88 84\nscore.high &lt;- score[idx] # 성적이 80 이상인 값들만 추출하여 저장\nscore.high # score.high의 내용 확인\n## [1] 84 95 82 88 84\n\n\niris\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 1            5.1         3.5          1.4         0.2     setosa\n## 2            4.9         3.0          1.4         0.2     setosa\n## 3            4.7         3.2          1.3         0.2     setosa\n## 4            4.6         3.1          1.5         0.2     setosa\n## 5            5.0         3.6          1.4         0.2     setosa\n## 6            5.4         3.9          1.7         0.4     setosa\n## 7            4.6         3.4          1.4         0.3     setosa\n## 8            5.0         3.4          1.5         0.2     setosa\n## 9            4.4         2.9          1.4         0.2     setosa\n## 10           4.9         3.1          1.5         0.1     setosa\n## 11           5.4         3.7          1.5         0.2     setosa\n## 12           4.8         3.4          1.6         0.2     setosa\n## 13           4.8         3.0          1.4         0.1     setosa\n## 14           4.3         3.0          1.1         0.1     setosa\n## 15           5.8         4.0          1.2         0.2     setosa\n## 16           5.7         4.4          1.5         0.4     setosa\n## 17           5.4         3.9          1.3         0.4     setosa\n## 18           5.1         3.5          1.4         0.3     setosa\n## 19           5.7         3.8          1.7         0.3     setosa\n## 20           5.1         3.8          1.5         0.3     setosa\n## 21           5.4         3.4          1.7         0.2     setosa\n## 22           5.1         3.7          1.5         0.4     setosa\n## 23           4.6         3.6          1.0         0.2     setosa\n## 24           5.1         3.3          1.7         0.5     setosa\n## 25           4.8         3.4          1.9         0.2     setosa\n## 26           5.0         3.0          1.6         0.2     setosa\n## 27           5.0         3.4          1.6         0.4     setosa\n## 28           5.2         3.5          1.5         0.2     setosa\n## 29           5.2         3.4          1.4         0.2     setosa\n## 30           4.7         3.2          1.6         0.2     setosa\n## 31           4.8         3.1          1.6         0.2     setosa\n## 32           5.4         3.4          1.5         0.4     setosa\n## 33           5.2         4.1          1.5         0.1     setosa\n## 34           5.5         4.2          1.4         0.2     setosa\n## 35           4.9         3.1          1.5         0.2     setosa\n## 36           5.0         3.2          1.2         0.2     setosa\n## 37           5.5         3.5          1.3         0.2     setosa\n## 38           4.9         3.6          1.4         0.1     setosa\n## 39           4.4         3.0          1.3         0.2     setosa\n## 40           5.1         3.4          1.5         0.2     setosa\n## 41           5.0         3.5          1.3         0.3     setosa\n## 42           4.5         2.3          1.3         0.3     setosa\n## 43           4.4         3.2          1.3         0.2     setosa\n## 44           5.0         3.5          1.6         0.6     setosa\n## 45           5.1         3.8          1.9         0.4     setosa\n## 46           4.8         3.0          1.4         0.3     setosa\n## 47           5.1         3.8          1.6         0.2     setosa\n## 48           4.6         3.2          1.4         0.2     setosa\n## 49           5.3         3.7          1.5         0.2     setosa\n## 50           5.0         3.3          1.4         0.2     setosa\n## 51           7.0         3.2          4.7         1.4 versicolor\n## 52           6.4         3.2          4.5         1.5 versicolor\n## 53           6.9         3.1          4.9         1.5 versicolor\n## 54           5.5         2.3          4.0         1.3 versicolor\n## 55           6.5         2.8          4.6         1.5 versicolor\n## 56           5.7         2.8          4.5         1.3 versicolor\n## 57           6.3         3.3          4.7         1.6 versicolor\n## 58           4.9         2.4          3.3         1.0 versicolor\n## 59           6.6         2.9          4.6         1.3 versicolor\n## 60           5.2         2.7          3.9         1.4 versicolor\n## 61           5.0         2.0          3.5         1.0 versicolor\n## 62           5.9         3.0          4.2         1.5 versicolor\n## 63           6.0         2.2          4.0         1.0 versicolor\n## 64           6.1         2.9          4.7         1.4 versicolor\n## 65           5.6         2.9          3.6         1.3 versicolor\n## 66           6.7         3.1          4.4         1.4 versicolor\n## 67           5.6         3.0          4.5         1.5 versicolor\n## 68           5.8         2.7          4.1         1.0 versicolor\n## 69           6.2         2.2          4.5         1.5 versicolor\n## 70           5.6         2.5          3.9         1.1 versicolor\n## 71           5.9         3.2          4.8         1.8 versicolor\n## 72           6.1         2.8          4.0         1.3 versicolor\n## 73           6.3         2.5          4.9         1.5 versicolor\n## 74           6.1         2.8          4.7         1.2 versicolor\n## 75           6.4         2.9          4.3         1.3 versicolor\n## 76           6.6         3.0          4.4         1.4 versicolor\n## 77           6.8         2.8          4.8         1.4 versicolor\n## 78           6.7         3.0          5.0         1.7 versicolor\n## 79           6.0         2.9          4.5         1.5 versicolor\n## 80           5.7         2.6          3.5         1.0 versicolor\n## 81           5.5         2.4          3.8         1.1 versicolor\n## 82           5.5         2.4          3.7         1.0 versicolor\n## 83           5.8         2.7          3.9         1.2 versicolor\n## 84           6.0         2.7          5.1         1.6 versicolor\n## 85           5.4         3.0          4.5         1.5 versicolor\n## 86           6.0         3.4          4.5         1.6 versicolor\n## 87           6.7         3.1          4.7         1.5 versicolor\n## 88           6.3         2.3          4.4         1.3 versicolor\n## 89           5.6         3.0          4.1         1.3 versicolor\n## 90           5.5         2.5          4.0         1.3 versicolor\n## 91           5.5         2.6          4.4         1.2 versicolor\n## 92           6.1         3.0          4.6         1.4 versicolor\n## 93           5.8         2.6          4.0         1.2 versicolor\n## 94           5.0         2.3          3.3         1.0 versicolor\n## 95           5.6         2.7          4.2         1.3 versicolor\n## 96           5.7         3.0          4.2         1.2 versicolor\n## 97           5.7         2.9          4.2         1.3 versicolor\n## 98           6.2         2.9          4.3         1.3 versicolor\n## 99           5.1         2.5          3.0         1.1 versicolor\n## 100          5.7         2.8          4.1         1.3 versicolor\n## 101          6.3         3.3          6.0         2.5  virginica\n## 102          5.8         2.7          5.1         1.9  virginica\n## 103          7.1         3.0          5.9         2.1  virginica\n## 104          6.3         2.9          5.6         1.8  virginica\n## 105          6.5         3.0          5.8         2.2  virginica\n## 106          7.6         3.0          6.6         2.1  virginica\n## 107          4.9         2.5          4.5         1.7  virginica\n## 108          7.3         2.9          6.3         1.8  virginica\n## 109          6.7         2.5          5.8         1.8  virginica\n## 110          7.2         3.6          6.1         2.5  virginica\n## 111          6.5         3.2          5.1         2.0  virginica\n## 112          6.4         2.7          5.3         1.9  virginica\n## 113          6.8         3.0          5.5         2.1  virginica\n## 114          5.7         2.5          5.0         2.0  virginica\n## 115          5.8         2.8          5.1         2.4  virginica\n## 116          6.4         3.2          5.3         2.3  virginica\n## 117          6.5         3.0          5.5         1.8  virginica\n## 118          7.7         3.8          6.7         2.2  virginica\n## 119          7.7         2.6          6.9         2.3  virginica\n## 120          6.0         2.2          5.0         1.5  virginica\n## 121          6.9         3.2          5.7         2.3  virginica\n## 122          5.6         2.8          4.9         2.0  virginica\n## 123          7.7         2.8          6.7         2.0  virginica\n## 124          6.3         2.7          4.9         1.8  virginica\n## 125          6.7         3.3          5.7         2.1  virginica\n## 126          7.2         3.2          6.0         1.8  virginica\n## 127          6.2         2.8          4.8         1.8  virginica\n## 128          6.1         3.0          4.9         1.8  virginica\n## 129          6.4         2.8          5.6         2.1  virginica\n## 130          7.2         3.0          5.8         1.6  virginica\n## 131          7.4         2.8          6.1         1.9  virginica\n## 132          7.9         3.8          6.4         2.0  virginica\n## 133          6.4         2.8          5.6         2.2  virginica\n## 134          6.3         2.8          5.1         1.5  virginica\n## 135          6.1         2.6          5.6         1.4  virginica\n## 136          7.7         3.0          6.1         2.3  virginica\n## 137          6.3         3.4          5.6         2.4  virginica\n## 138          6.4         3.1          5.5         1.8  virginica\n## 139          6.0         3.0          4.8         1.8  virginica\n## 140          6.9         3.1          5.4         2.1  virginica\n## 141          6.7         3.1          5.6         2.4  virginica\n## 142          6.9         3.1          5.1         2.3  virginica\n## 143          5.8         2.7          5.1         1.9  virginica\n## 144          6.8         3.2          5.9         2.3  virginica\n## 145          6.7         3.3          5.7         2.5  virginica\n## 146          6.7         3.0          5.2         2.3  virginica\n## 147          6.3         2.5          5.0         1.9  virginica\n## 148          6.5         3.0          5.2         2.0  virginica\n## 149          6.2         3.4          5.4         2.3  virginica\n## 150          5.9         3.0          5.1         1.8  virginica\niris$Petal.Length\n##   [1] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 1.5 1.6 1.4 1.1 1.2 1.5 1.3 1.4\n##  [19] 1.7 1.5 1.7 1.5 1.0 1.7 1.9 1.6 1.6 1.5 1.4 1.6 1.6 1.5 1.5 1.4 1.5 1.2\n##  [37] 1.3 1.4 1.3 1.5 1.3 1.3 1.3 1.6 1.9 1.4 1.6 1.4 1.5 1.4 4.7 4.5 4.9 4.0\n##  [55] 4.6 4.5 4.7 3.3 4.6 3.9 3.5 4.2 4.0 4.7 3.6 4.4 4.5 4.1 4.5 3.9 4.8 4.0\n##  [73] 4.9 4.7 4.3 4.4 4.8 5.0 4.5 3.5 3.8 3.7 3.9 5.1 4.5 4.5 4.7 4.4 4.1 4.0\n##  [91] 4.4 4.6 4.0 3.3 4.2 4.2 4.2 4.3 3.0 4.1 6.0 5.1 5.9 5.6 5.8 6.6 4.5 6.3\n## [109] 5.8 6.1 5.1 5.3 5.5 5.0 5.1 5.3 5.5 6.7 6.9 5.0 5.7 4.9 6.7 4.9 5.7 6.0\n## [127] 4.8 4.9 5.6 5.8 6.1 6.4 5.6 5.1 5.6 6.1 5.6 5.5 4.8 5.4 5.6 5.1 5.1 5.9\n## [145] 5.7 5.2 5.0 5.2 5.4 5.1\niris$Petal.Length &gt; 5.0\n##   [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [73] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE\n##  [85] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [97] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE\n## [109]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE\n## [121]  TRUE FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE\n## [133]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE\n## [145]  TRUE  TRUE FALSE  TRUE  TRUE  TRUE\nwhich(iris$Petal.Length &gt; 5.0)\n##  [1]  84 101 102 103 104 105 106 108 109 110 111 112 113 115 116 117 118 119 121\n## [20] 123 125 126 129 130 131 132 133 134 135 136 137 138 140 141 142 143 144 145\n## [39] 146 148 149 150\n\niris$Petal.Length[iris$Petal.Length &gt; 5.0]\n##  [1] 5.1 6.0 5.1 5.9 5.6 5.8 6.6 6.3 5.8 6.1 5.1 5.3 5.5 5.1 5.3 5.5 6.7 6.9 5.7\n## [20] 6.7 5.7 6.0 5.6 5.8 6.1 6.4 5.6 5.1 5.6 6.1 5.6 5.5 5.4 5.6 5.1 5.1 5.9 5.7\n## [39] 5.2 5.2 5.4 5.1\n\nidx &lt;- which(iris$Petal.Length &gt; 5.0) # 꽃잎의 길이가 5.0 이상인 값들의 인덱스\nidx\n##  [1]  84 101 102 103 104 105 106 108 109 110 111 112 113 115 116 117 118 119 121\n## [20] 123 125 126 129 130 131 132 133 134 135 136 137 138 140 141 142 143 144 145\n## [39] 146 148 149 150\niris.big &lt;- iris[idx, ] # 인덱스에 해당하는 값만 추출하여 저장\niris.big\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 84           6.0         2.7          5.1         1.6 versicolor\n## 101          6.3         3.3          6.0         2.5  virginica\n## 102          5.8         2.7          5.1         1.9  virginica\n## 103          7.1         3.0          5.9         2.1  virginica\n## 104          6.3         2.9          5.6         1.8  virginica\n## 105          6.5         3.0          5.8         2.2  virginica\n## 106          7.6         3.0          6.6         2.1  virginica\n## 108          7.3         2.9          6.3         1.8  virginica\n## 109          6.7         2.5          5.8         1.8  virginica\n## 110          7.2         3.6          6.1         2.5  virginica\n## 111          6.5         3.2          5.1         2.0  virginica\n## 112          6.4         2.7          5.3         1.9  virginica\n## 113          6.8         3.0          5.5         2.1  virginica\n## 115          5.8         2.8          5.1         2.4  virginica\n## 116          6.4         3.2          5.3         2.3  virginica\n## 117          6.5         3.0          5.5         1.8  virginica\n## 118          7.7         3.8          6.7         2.2  virginica\n## 119          7.7         2.6          6.9         2.3  virginica\n## 121          6.9         3.2          5.7         2.3  virginica\n## 123          7.7         2.8          6.7         2.0  virginica\n## 125          6.7         3.3          5.7         2.1  virginica\n## 126          7.2         3.2          6.0         1.8  virginica\n## 129          6.4         2.8          5.6         2.1  virginica\n## 130          7.2         3.0          5.8         1.6  virginica\n## 131          7.4         2.8          6.1         1.9  virginica\n## 132          7.9         3.8          6.4         2.0  virginica\n## 133          6.4         2.8          5.6         2.2  virginica\n## 134          6.3         2.8          5.1         1.5  virginica\n## 135          6.1         2.6          5.6         1.4  virginica\n## 136          7.7         3.0          6.1         2.3  virginica\n## 137          6.3         3.4          5.6         2.4  virginica\n## 138          6.4         3.1          5.5         1.8  virginica\n## 140          6.9         3.1          5.4         2.1  virginica\n## 141          6.7         3.1          5.6         2.4  virginica\n## 142          6.9         3.1          5.1         2.3  virginica\n## 143          5.8         2.7          5.1         1.9  virginica\n## 144          6.8         3.2          5.9         2.3  virginica\n## 145          6.7         3.3          5.7         2.5  virginica\n## 146          6.7         3.0          5.2         2.3  virginica\n## 148          6.5         3.0          5.2         2.0  virginica\n## 149          6.2         3.4          5.4         2.3  virginica\n## 150          5.9         3.0          5.1         1.8  virginica\n\n\n# 1~4열의 값 중 5보다 큰 값의 행과 열의 위치\nwhich(iris[, 1:4] &gt; 5.0)\n##   [1]   1   6  11  15  16  17  18  19  20  21  22  24  28  29  32  33  34  37\n##  [19]  40  45  47  49  51  52  53  54  55  56  57  59  60  62  63  64  65  66\n##  [37]  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84\n##  [55]  85  86  87  88  89  90  91  92  93  95  96  97  98  99 100 101 102 103\n##  [73] 104 105 106 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122\n##  [91] 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140\n## [109] 141 142 143 144 145 146 147 148 149 150 384 401 402 403 404 405 406 408\n## [127] 409 410 411 412 413 415 416 417 418 419 421 423 425 426 429 430 431 432\n## [145] 433 434 435 436 437 438 440 441 442 443 444 445 446 448 449 450\nwhich(iris[, 1:4] &gt; 5.0, arr.ind = TRUE) # arr.ind = TRUE : 조건에 맞는 인덱스까지 반환\n##        row col\n##   [1,]   1   1\n##   [2,]   6   1\n##   [3,]  11   1\n##   [4,]  15   1\n##   [5,]  16   1\n##   [6,]  17   1\n##   [7,]  18   1\n##   [8,]  19   1\n##   [9,]  20   1\n##  [10,]  21   1\n##  [11,]  22   1\n##  [12,]  24   1\n##  [13,]  28   1\n##  [14,]  29   1\n##  [15,]  32   1\n##  [16,]  33   1\n##  [17,]  34   1\n##  [18,]  37   1\n##  [19,]  40   1\n##  [20,]  45   1\n##  [21,]  47   1\n##  [22,]  49   1\n##  [23,]  51   1\n##  [24,]  52   1\n##  [25,]  53   1\n##  [26,]  54   1\n##  [27,]  55   1\n##  [28,]  56   1\n##  [29,]  57   1\n##  [30,]  59   1\n##  [31,]  60   1\n##  [32,]  62   1\n##  [33,]  63   1\n##  [34,]  64   1\n##  [35,]  65   1\n##  [36,]  66   1\n##  [37,]  67   1\n##  [38,]  68   1\n##  [39,]  69   1\n##  [40,]  70   1\n##  [41,]  71   1\n##  [42,]  72   1\n##  [43,]  73   1\n##  [44,]  74   1\n##  [45,]  75   1\n##  [46,]  76   1\n##  [47,]  77   1\n##  [48,]  78   1\n##  [49,]  79   1\n##  [50,]  80   1\n##  [51,]  81   1\n##  [52,]  82   1\n##  [53,]  83   1\n##  [54,]  84   1\n##  [55,]  85   1\n##  [56,]  86   1\n##  [57,]  87   1\n##  [58,]  88   1\n##  [59,]  89   1\n##  [60,]  90   1\n##  [61,]  91   1\n##  [62,]  92   1\n##  [63,]  93   1\n##  [64,]  95   1\n##  [65,]  96   1\n##  [66,]  97   1\n##  [67,]  98   1\n##  [68,]  99   1\n##  [69,] 100   1\n##  [70,] 101   1\n##  [71,] 102   1\n##  [72,] 103   1\n##  [73,] 104   1\n##  [74,] 105   1\n##  [75,] 106   1\n##  [76,] 108   1\n##  [77,] 109   1\n##  [78,] 110   1\n##  [79,] 111   1\n##  [80,] 112   1\n##  [81,] 113   1\n##  [82,] 114   1\n##  [83,] 115   1\n##  [84,] 116   1\n##  [85,] 117   1\n##  [86,] 118   1\n##  [87,] 119   1\n##  [88,] 120   1\n##  [89,] 121   1\n##  [90,] 122   1\n##  [91,] 123   1\n##  [92,] 124   1\n##  [93,] 125   1\n##  [94,] 126   1\n##  [95,] 127   1\n##  [96,] 128   1\n##  [97,] 129   1\n##  [98,] 130   1\n##  [99,] 131   1\n## [100,] 132   1\n## [101,] 133   1\n## [102,] 134   1\n## [103,] 135   1\n## [104,] 136   1\n## [105,] 137   1\n## [106,] 138   1\n## [107,] 139   1\n## [108,] 140   1\n## [109,] 141   1\n## [110,] 142   1\n## [111,] 143   1\n## [112,] 144   1\n## [113,] 145   1\n## [114,] 146   1\n## [115,] 147   1\n## [116,] 148   1\n## [117,] 149   1\n## [118,] 150   1\n## [119,]  84   3\n## [120,] 101   3\n## [121,] 102   3\n## [122,] 103   3\n## [123,] 104   3\n## [124,] 105   3\n## [125,] 106   3\n## [126,] 108   3\n## [127,] 109   3\n## [128,] 110   3\n## [129,] 111   3\n## [130,] 112   3\n## [131,] 113   3\n## [132,] 115   3\n## [133,] 116   3\n## [134,] 117   3\n## [135,] 118   3\n## [136,] 119   3\n## [137,] 121   3\n## [138,] 123   3\n## [139,] 125   3\n## [140,] 126   3\n## [141,] 129   3\n## [142,] 130   3\n## [143,] 131   3\n## [144,] 132   3\n## [145,] 133   3\n## [146,] 134   3\n## [147,] 135   3\n## [148,] 136   3\n## [149,] 137   3\n## [150,] 138   3\n## [151,] 140   3\n## [152,] 141   3\n## [153,] 142   3\n## [154,] 143   3\n## [155,] 144   3\n## [156,] 145   3\n## [157,] 146   3\n## [158,] 148   3\n## [159,] 149   3\n## [160,] 150   3\n\nidx &lt;- which(iris[, 1:4] &gt; 5.0, arr.ind = TRUE)\niris[idx[, 1], ]\n##       Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 1              5.1         3.5          1.4         0.2     setosa\n## 6              5.4         3.9          1.7         0.4     setosa\n## 11             5.4         3.7          1.5         0.2     setosa\n## 15             5.8         4.0          1.2         0.2     setosa\n## 16             5.7         4.4          1.5         0.4     setosa\n## 17             5.4         3.9          1.3         0.4     setosa\n## 18             5.1         3.5          1.4         0.3     setosa\n## 19             5.7         3.8          1.7         0.3     setosa\n## 20             5.1         3.8          1.5         0.3     setosa\n## 21             5.4         3.4          1.7         0.2     setosa\n## 22             5.1         3.7          1.5         0.4     setosa\n## 24             5.1         3.3          1.7         0.5     setosa\n## 28             5.2         3.5          1.5         0.2     setosa\n## 29             5.2         3.4          1.4         0.2     setosa\n## 32             5.4         3.4          1.5         0.4     setosa\n## 33             5.2         4.1          1.5         0.1     setosa\n## 34             5.5         4.2          1.4         0.2     setosa\n## 37             5.5         3.5          1.3         0.2     setosa\n## 40             5.1         3.4          1.5         0.2     setosa\n## 45             5.1         3.8          1.9         0.4     setosa\n## 47             5.1         3.8          1.6         0.2     setosa\n## 49             5.3         3.7          1.5         0.2     setosa\n## 51             7.0         3.2          4.7         1.4 versicolor\n## 52             6.4         3.2          4.5         1.5 versicolor\n## 53             6.9         3.1          4.9         1.5 versicolor\n## 54             5.5         2.3          4.0         1.3 versicolor\n## 55             6.5         2.8          4.6         1.5 versicolor\n## 56             5.7         2.8          4.5         1.3 versicolor\n## 57             6.3         3.3          4.7         1.6 versicolor\n## 59             6.6         2.9          4.6         1.3 versicolor\n## 60             5.2         2.7          3.9         1.4 versicolor\n## 62             5.9         3.0          4.2         1.5 versicolor\n## 63             6.0         2.2          4.0         1.0 versicolor\n## 64             6.1         2.9          4.7         1.4 versicolor\n## 65             5.6         2.9          3.6         1.3 versicolor\n## 66             6.7         3.1          4.4         1.4 versicolor\n## 67             5.6         3.0          4.5         1.5 versicolor\n## 68             5.8         2.7          4.1         1.0 versicolor\n## 69             6.2         2.2          4.5         1.5 versicolor\n## 70             5.6         2.5          3.9         1.1 versicolor\n## 71             5.9         3.2          4.8         1.8 versicolor\n## 72             6.1         2.8          4.0         1.3 versicolor\n## 73             6.3         2.5          4.9         1.5 versicolor\n## 74             6.1         2.8          4.7         1.2 versicolor\n## 75             6.4         2.9          4.3         1.3 versicolor\n## 76             6.6         3.0          4.4         1.4 versicolor\n## 77             6.8         2.8          4.8         1.4 versicolor\n## 78             6.7         3.0          5.0         1.7 versicolor\n## 79             6.0         2.9          4.5         1.5 versicolor\n## 80             5.7         2.6          3.5         1.0 versicolor\n## 81             5.5         2.4          3.8         1.1 versicolor\n## 82             5.5         2.4          3.7         1.0 versicolor\n## 83             5.8         2.7          3.9         1.2 versicolor\n## 84             6.0         2.7          5.1         1.6 versicolor\n## 85             5.4         3.0          4.5         1.5 versicolor\n## 86             6.0         3.4          4.5         1.6 versicolor\n## 87             6.7         3.1          4.7         1.5 versicolor\n## 88             6.3         2.3          4.4         1.3 versicolor\n## 89             5.6         3.0          4.1         1.3 versicolor\n## 90             5.5         2.5          4.0         1.3 versicolor\n## 91             5.5         2.6          4.4         1.2 versicolor\n## 92             6.1         3.0          4.6         1.4 versicolor\n## 93             5.8         2.6          4.0         1.2 versicolor\n## 95             5.6         2.7          4.2         1.3 versicolor\n## 96             5.7         3.0          4.2         1.2 versicolor\n## 97             5.7         2.9          4.2         1.3 versicolor\n## 98             6.2         2.9          4.3         1.3 versicolor\n## 99             5.1         2.5          3.0         1.1 versicolor\n## 100            5.7         2.8          4.1         1.3 versicolor\n## 101            6.3         3.3          6.0         2.5  virginica\n## 102            5.8         2.7          5.1         1.9  virginica\n## 103            7.1         3.0          5.9         2.1  virginica\n## 104            6.3         2.9          5.6         1.8  virginica\n## 105            6.5         3.0          5.8         2.2  virginica\n## 106            7.6         3.0          6.6         2.1  virginica\n## 108            7.3         2.9          6.3         1.8  virginica\n## 109            6.7         2.5          5.8         1.8  virginica\n## 110            7.2         3.6          6.1         2.5  virginica\n## 111            6.5         3.2          5.1         2.0  virginica\n## 112            6.4         2.7          5.3         1.9  virginica\n## 113            6.8         3.0          5.5         2.1  virginica\n## 114            5.7         2.5          5.0         2.0  virginica\n## 115            5.8         2.8          5.1         2.4  virginica\n## 116            6.4         3.2          5.3         2.3  virginica\n## 117            6.5         3.0          5.5         1.8  virginica\n## 118            7.7         3.8          6.7         2.2  virginica\n## 119            7.7         2.6          6.9         2.3  virginica\n## 120            6.0         2.2          5.0         1.5  virginica\n## 121            6.9         3.2          5.7         2.3  virginica\n## 122            5.6         2.8          4.9         2.0  virginica\n## 123            7.7         2.8          6.7         2.0  virginica\n## 124            6.3         2.7          4.9         1.8  virginica\n## 125            6.7         3.3          5.7         2.1  virginica\n## 126            7.2         3.2          6.0         1.8  virginica\n## 127            6.2         2.8          4.8         1.8  virginica\n## 128            6.1         3.0          4.9         1.8  virginica\n## 129            6.4         2.8          5.6         2.1  virginica\n## 130            7.2         3.0          5.8         1.6  virginica\n## 131            7.4         2.8          6.1         1.9  virginica\n## 132            7.9         3.8          6.4         2.0  virginica\n## 133            6.4         2.8          5.6         2.2  virginica\n## 134            6.3         2.8          5.1         1.5  virginica\n## 135            6.1         2.6          5.6         1.4  virginica\n## 136            7.7         3.0          6.1         2.3  virginica\n## 137            6.3         3.4          5.6         2.4  virginica\n## 138            6.4         3.1          5.5         1.8  virginica\n## 139            6.0         3.0          4.8         1.8  virginica\n## 140            6.9         3.1          5.4         2.1  virginica\n## 141            6.7         3.1          5.6         2.4  virginica\n## 142            6.9         3.1          5.1         2.3  virginica\n## 143            5.8         2.7          5.1         1.9  virginica\n## 144            6.8         3.2          5.9         2.3  virginica\n## 145            6.7         3.3          5.7         2.5  virginica\n## 146            6.7         3.0          5.2         2.3  virginica\n## 147            6.3         2.5          5.0         1.9  virginica\n## 148            6.5         3.0          5.2         2.0  virginica\n## 149            6.2         3.4          5.4         2.3  virginica\n## 150            5.9         3.0          5.1         1.8  virginica\n## 84.1           6.0         2.7          5.1         1.6 versicolor\n## 101.1          6.3         3.3          6.0         2.5  virginica\n## 102.1          5.8         2.7          5.1         1.9  virginica\n## 103.1          7.1         3.0          5.9         2.1  virginica\n## 104.1          6.3         2.9          5.6         1.8  virginica\n## 105.1          6.5         3.0          5.8         2.2  virginica\n## 106.1          7.6         3.0          6.6         2.1  virginica\n## 108.1          7.3         2.9          6.3         1.8  virginica\n## 109.1          6.7         2.5          5.8         1.8  virginica\n## 110.1          7.2         3.6          6.1         2.5  virginica\n## 111.1          6.5         3.2          5.1         2.0  virginica\n## 112.1          6.4         2.7          5.3         1.9  virginica\n## 113.1          6.8         3.0          5.5         2.1  virginica\n## 115.1          5.8         2.8          5.1         2.4  virginica\n## 116.1          6.4         3.2          5.3         2.3  virginica\n## 117.1          6.5         3.0          5.5         1.8  virginica\n## 118.1          7.7         3.8          6.7         2.2  virginica\n## 119.1          7.7         2.6          6.9         2.3  virginica\n## 121.1          6.9         3.2          5.7         2.3  virginica\n## 123.1          7.7         2.8          6.7         2.0  virginica\n## 125.1          6.7         3.3          5.7         2.1  virginica\n## 126.1          7.2         3.2          6.0         1.8  virginica\n## 129.1          6.4         2.8          5.6         2.1  virginica\n## 130.1          7.2         3.0          5.8         1.6  virginica\n## 131.1          7.4         2.8          6.1         1.9  virginica\n## 132.1          7.9         3.8          6.4         2.0  virginica\n## 133.1          6.4         2.8          5.6         2.2  virginica\n## 134.1          6.3         2.8          5.1         1.5  virginica\n## 135.1          6.1         2.6          5.6         1.4  virginica\n## 136.1          7.7         3.0          6.1         2.3  virginica\n## 137.1          6.3         3.4          5.6         2.4  virginica\n## 138.1          6.4         3.1          5.5         1.8  virginica\n## 140.1          6.9         3.1          5.4         2.1  virginica\n## 141.1          6.7         3.1          5.6         2.4  virginica\n## 142.1          6.9         3.1          5.1         2.3  virginica\n## 143.1          5.8         2.7          5.1         1.9  virginica\n## 144.1          6.8         3.2          5.9         2.3  virginica\n## 145.1          6.7         3.3          5.7         2.5  virginica\n## 146.1          6.7         3.0          5.2         2.3  virginica\n## 148.1          6.5         3.0          5.2         2.0  virginica\n## 149.1          6.2         3.4          5.4         2.3  virginica\n## 150.1          5.9         3.0          5.1         1.8  virginica\n\niris[, 1:4][idx]\n##   [1] 5.1 5.4 5.4 5.8 5.7 5.4 5.1 5.7 5.1 5.4 5.1 5.1 5.2 5.2 5.4 5.2 5.5 5.5\n##  [19] 5.1 5.1 5.1 5.3 7.0 6.4 6.9 5.5 6.5 5.7 6.3 6.6 5.2 5.9 6.0 6.1 5.6 6.7\n##  [37] 5.6 5.8 6.2 5.6 5.9 6.1 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0\n##  [55] 5.4 6.0 6.7 6.3 5.6 5.5 5.5 6.1 5.8 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1\n##  [73] 6.3 6.5 7.6 7.3 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6\n##  [91] 7.7 6.3 6.7 7.2 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9\n## [109] 6.7 6.9 5.8 6.8 6.7 6.7 6.3 6.5 6.2 5.9 5.1 6.0 5.1 5.9 5.6 5.8 6.6 6.3\n## [127] 5.8 6.1 5.1 5.3 5.5 5.1 5.3 5.5 6.7 6.9 5.7 6.7 5.7 6.0 5.6 5.8 6.1 6.4\n## [145] 5.6 5.1 5.6 6.1 5.6 5.5 5.4 5.6 5.1 5.1 5.9 5.7 5.2 5.2 5.4 5.1\n\n\n\n\n\nfavorite &lt;- c('WINTER', 'SUMMER', 'SPRING', 'SUMMER', 'SUMMER',\n              'FALL', 'FALL', 'SUMMER', 'SPRING', 'SPRING')\nfavorite # favorite의 내용 출력\n##  [1] \"WINTER\" \"SUMMER\" \"SPRING\" \"SUMMER\" \"SUMMER\" \"FALL\"   \"FALL\"   \"SUMMER\"\n##  [9] \"SPRING\" \"SPRING\"\ntable(favorite) # 도수분포표 계산\n## favorite\n##   FALL SPRING SUMMER WINTER \n##      2      3      4      1\nlength(favorite)\n## [1] 10\ntable(favorite) / length(favorite) # 비율 출력\n## favorite\n##   FALL SPRING SUMMER WINTER \n##    0.2    0.3    0.4    0.1\n\n\nds &lt;- table(favorite)\nds\n## favorite\n##   FALL SPRING SUMMER WINTER \n##      2      3      4      1\nbarplot(ds, main = 'favorite season')\n\n\n\n\n\nds &lt;- table(favorite)\nds\n## favorite\n##   FALL SPRING SUMMER WINTER \n##      2      3      4      1\npie(ds, main = 'favorite season')\n\n\n\n\n\nfavorite.color &lt;- c(2, 3, 2, 1, 1, 2, 2, 1, 3, 2, 1, 3, 2, 1, 2)\nds &lt;- table(favorite.color)\nds\n## favorite.color\n## 1 2 3 \n## 5 7 3\nbarplot(ds, main = 'favorite color')\n\n\n\ncolors &lt;- c('green', 'red', 'blue')\nnames(ds) &lt;- colors # 자료값 1, 2, 3을 green, red, blue로 변경\nds\n## green   red  blue \n##     5     7     3\nbarplot(ds, main = 'favorite color', col = colors) # 색 지정 막대그래프\n\n\n\nbarplot(ds, main = 'favorite color', col = c('green', 'red', 'blue'))\npie(ds, main = 'favorite color', col = colors) # 색 지정 원그래프\n\n\n\n\n\nweight &lt;- c(60, 62, 64, 65, 68, 69)\nweight.heavy &lt;- c(weight, 120)\nweight\n## [1] 60 62 64 65 68 69\nweight.heavy\n## [1]  60  62  64  65  68  69 120\n\nmean(weight) # 평균\n## [1] 64.66667\nmean(weight.heavy) # 평균\n## [1] 72.57143\n\nmedian(weight) # 중앙값\n## [1] 64.5\nmedian(weight.heavy) # 중앙값\n## [1] 65\n\nmean(weight, trim = 0.2) # 절사평균(상하위 20% 제외)\n## [1] 64.75\nmean(weight.heavy, trim = 0.2) # 절사평균(상하위 20% 제외)\n## [1] 65.6\n\n\nmydata &lt;- c(60, 62, 64, 65, 68, 69, 120)\nquantile(mydata)\n##    0%   25%   50%   75%  100% \n##  60.0  63.0  65.0  68.5 120.0\nquantile(mydata, (0:10) / 10) # 10% 단위로 구간을 나누어 계산\n##    0%   10%   20%   30%   40%   50%   60%   70%   80%   90%  100% \n##  60.0  61.2  62.4  63.6  64.4  65.0  66.8  68.2  68.8  89.4 120.0\nsummary(mydata) # 최소값, 중앙값, 평균값, 3분위 값, 최대값\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##   60.00   63.00   65.00   72.57   68.50  120.00\n\nmydata &lt;- 0:1000\nquantile(mydata)\n##   0%  25%  50%  75% 100% \n##    0  250  500  750 1000\nquantile(mydata, (0:10) / 10)\n##   0%  10%  20%  30%  40%  50%  60%  70%  80%  90% 100% \n##    0  100  200  300  400  500  600  700  800  900 1000\nsummary(mydata)\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##       0     250     500     500     750    1000\n?quantile\n## httpd 도움말 서버를 시작합니다 ... 완료\n\n\nmydata &lt;- c(60, 62, 64, 65, 68, 69, 120)\nvar(mydata) # 분산\n## [1] 447.2857\nsd(mydata) # 표준편차\n## [1] 21.14913\nrange(mydata) # 값의 범위\n## [1]  60 120\ndiff(range(mydata)) # 최대값, 최소값의 차이\n## [1] 60\n\n\ndist &lt;- cars[, 2] # 자동차 제동거리\nhist(dist,                            # 자료(data)\n     main = \"Histogram for 제동거리\", # 제목\n     xlab = \"제동거리\",               # x축 레이블\n     ylab = \"빈도수\",                 # y축 레이블\n     border = \"blue\",                 # 막대 테두리색\n     col = rainbow(10),               # 막대 색\n     las = 2,                         # x축 글씨 방향(0~3)\n     breaks = seq(0, 120, 10))        # 막대 개수 조절\n\n\n\n\n\ndist &lt;- cars[,2] # 자동차 제동거리(단위: 피트(ft))\nboxplot(dist, main = \"자동차 제동거리\") # ★★★★★\n\n\n\n\n\nboxplot.stats(dist)\n## $stats\n## [1]  2 26 36 56 93\n## \n## $n\n## [1] 50\n## \n## $conf\n## [1] 29.29663 42.70337\n## \n## $out\n## [1] 120\nboxplot.stats(dist)$stats\n## [1]  2 26 36 56 93\nboxplot.stats(dist)$stats[4]\n## [1] 56\n\n\nboxplot(Petal.Length ~ Species, data = iris, main = \"품종별 꽃잎의 길이\")\n\n\n\n\npar(mfrow = c(1, 3)) # 1*3 가상화면 분할\n\nbarplot(\n    table(mtcars$carb),\n    main = \"Barplot of Carburetors\",\n    xlab = \"#of carburetors\",\n    ylab = \"frequency\",\n    col = \"blue\"\n)\n\nbarplot(\n    table(mtcars$cyl),\n    main = \"Barplot of Cylender\",\n    xlab = \"#of cylender\",\n    ylab = \"frequency\",\n    col = \"red\"\n)\n\nbarplot(\n    table(mtcars$gear),\n    main = \"Barplot of Grar\",\n    xlab = \"#of gears\",\n    ylab = \"frequency\",\n    col = \"green\"\n)\n\n\n\n\npar(mfrow = c(1, 1)) # 가상화면 분할 해제\n\n\n\n\n\nwt &lt;- mtcars$wt                 # 중량 자료\nmpg &lt;- mtcars$mpg               # 연비 자료\nplot(wt, mpg,                   # 2개 변수(x축, y축)\n     main = \"중량-연비 그래프\", # 제목\n     xlab = \"중량\",             # x축 레이블\n     ylab = \"연비(MPG)\",        # y축 레이블\n     col = \"red\",               # point의 color\n     pch = 11)                  # point의 종류\n\n\n\n\n\nvars &lt;- c(\"mpg\", \"disp\", \"drat\", \"wt\") # 대상 변수(연비, 배기량, 후방차측 비율, 중량)\ntarget &lt;- mtcars[, vars]\nhead(target)\n##                    mpg disp drat    wt\n## Mazda RX4         21.0  160 3.90 2.620\n## Mazda RX4 Wag     21.0  160 3.90 2.875\n## Datsun 710        22.8  108 3.85 2.320\n## Hornet 4 Drive    21.4  258 3.08 3.215\n## Hornet Sportabout 18.7  360 3.15 3.440\n## Valiant           18.1  225 2.76 3.460\npairs(target, main = \"Multi Plots\")    # 대상 데이터\n\n\n\n\n\niris.2 &lt;- iris[, 3:4]              # 데이터 준비\npoint &lt;- as.numeric(iris$Species)  # 점의 모양\npoint                              # point 내용 출력\n##   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n##  [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n##  [75] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3\n## [112] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n## [149] 3 3\ncolor &lt;- c(\"red\", \"green\", \"blue\") # 점의 컬러\nplot(iris.2,\n     main = \"Iris plot\",\n     pch = c(point),\n     col = color[point])\n\n\n\n\n\nbeers = c(5, 2, 9, 8, 3, 7, 3, 5, 3, 5) # 자료 입력\nbal &lt;- c(0.1, 0.03, 0.19, 0.12, 0.04, 0.0095, 0.07, 0.06, 0.02, 0.05)\ntbl &lt;- data.frame(beers, bal)           # 데이터프레임 생성\ntbl\n##    beers    bal\n## 1      5 0.1000\n## 2      2 0.0300\n## 3      9 0.1900\n## 4      8 0.1200\n## 5      3 0.0400\n## 6      7 0.0095\n## 7      3 0.0700\n## 8      5 0.0600\n## 9      3 0.0200\n## 10     5 0.0500\nplot(bal ~ beers, data = tbl)           # 산점도 plot(beers, bal)\nres &lt;- lm(bal ~ beers, data = tbl)      # 회귀식 도출\nabline(res)                             # 회귀선 그리기\n\n\n\ncor(beers, bal)                         # 상관계수 계산\n## [1] 0.6797025\n\n\ncor(iris[, 1:4]) # 4개 변수 간 상관성 분석\n##              Sepal.Length Sepal.Width Petal.Length Petal.Width\n## Sepal.Length    1.0000000  -0.1175698    0.8717538   0.8179411\n## Sepal.Width    -0.1175698   1.0000000   -0.4284401  -0.3661259\n## Petal.Length    0.8717538  -0.4284401    1.0000000   0.9628654\n## Petal.Width     0.8179411  -0.3661259    0.9628654   1.0000000\n\n\nmonth = 1:12 # 자료 입력\nlate = c(5, 8, 7, 9, 4, 6, 12, 13, 8, 6, 6, 4) # 자료 입력\nplot(month,                # x data\n     late,                 # y data\n     main = \"지각생 통계\", # 제목\n     type = \"l\",           # 그래프의 종류 선택(알파벳)\n     lty = 1,              # 선의 종류(line type) 선택\n     lwd = 1,              # 선의 굵기 선택\n     xlab = \"Month\",       # x축 레이블\n     ylab = \"Late cnt\")    # y축 레이블\n\n\n\n\n\nmonth = 1:12\nlate1 = c(5, 8, 7, 9, 4, 6, 12, 13, 8, 6, 6, 4)\nlate2 = c(4, 6, 5, 8, 7, 8, 10, 11, 6, 5, 7, 3)\nplot(month,                  # x data\n     late1,                  # y data\n     main = \"Late Students\",\n     type = \"b\",             # 그래프의 종류 선택(알파벳)\n     lty = 1,                # 선의 종류(line type) 선택\n     col = \"red\",            # 선의 색 선택\n     xlab = \"Month\",         # x축 레이블\n     ylab = \"Late cnt\",      # y축 레이블\n     ylim = c(1, 15))        # y축 값의 (하한, 상한)\n\nlines(month,                 # x data\n      late2,                 # y data\n      type = \"b\",            # 선의 종류(line type) 선택\n      col = \"blue\")          # 선의 색 선택\n\n\n\n\n\n## (1) 분석 대상 데이터셋 준비\n# install.packages(\"mlbench\")\nlibrary(mlbench)\ndata(\"BostonHousing\")\nmyds &lt;- BostonHousing[, c(\"crim\", \"rm\", \"dis\", \"tax\", \"medv\")]\n\n## (2) grp 변수 추가 ★★★★★\ngrp &lt;- c()\nfor (i in 1:nrow(myds)) {\n    # myds$medv 값에 따라 그룹 분류\n    if (myds$medv[i] &gt;= 25.0) {\n        grp[i] &lt;- \"H\"\n    } else if (myds$medv[i] &lt;= 17.0) {\n        grp[i] &lt;- \"L\"\n    } else {\n        grp[i] &lt;- \"M\"\n    }\n}\ngrp &lt;- factor(grp) # 문자 벡터를 팩터 타입으로 변경\ngrp &lt;- factor(grp, levels = c(\"H\", \"M\", \"L\")) # 레벨의 순서를 H, L, M -&gt; H, M, L\n\nmyds &lt;- data.frame(myds, grp) # myds에 grp 열 추가\n\n## (3) 데이터셋의 형태와 기본적인 내용 파악\nstr(myds)\n## 'data.frame':    506 obs. of  6 variables:\n##  $ crim: num  0.00632 0.02731 0.02729 0.03237 0.06905 ...\n##  $ rm  : num  6.58 6.42 7.18 7 7.15 ...\n##  $ dis : num  4.09 4.97 4.97 6.06 6.06 ...\n##  $ tax : num  296 242 242 222 222 222 311 311 311 311 ...\n##  $ medv: num  24 21.6 34.7 33.4 36.2 28.7 22.9 27.1 16.5 18.9 ...\n##  $ grp : Factor w/ 3 levels \"H\",\"M\",\"L\": 2 2 1 1 1 1 2 1 3 2 ...\nhead(myds)\n##      crim    rm    dis tax medv grp\n## 1 0.00632 6.575 4.0900 296 24.0   M\n## 2 0.02731 6.421 4.9671 242 21.6   M\n## 3 0.02729 7.185 4.9671 242 34.7   H\n## 4 0.03237 6.998 6.0622 222 33.4   H\n## 5 0.06905 7.147 6.0622 222 36.2   H\n## 6 0.02985 6.430 6.0622 222 28.7   H\ntable(myds$grp) # 주택 가격 그룹별 분포\n## \n##   H   M   L \n## 132 247 127\n\n## (4) 히스토그램에 의한 관측값의 분포 확인\npar(mfrow = c(2, 3)) # 2*3 가상화면 분할\nfor (i in 1:5) {\n    hist(myds[, i], main = colnames(myds)[i], col = \"yellow\")\n}\npar(mfrow = c(1, 1)) # 2*3 가상화면 분할 해제\n\n\n\n\n## (5) 상자그림에 의한 관측값의 분포 확인\npar(mfrow = c(2, 3)) # 2*3 가상화면 분할\nfor (i in 1:5) {\n    boxplot(myds[, i], main = colnames(myds)[i])\n}\npar(mfrow = c(1, 1)) # 2*3 가상화면 분할 해제\n\n\n\n\n## (6) 그룹별 관측값 분포의 확인\nboxplot(myds$crim ~ myds$grp, main = \"1인당 범죄율\")\n\n\n\nboxplot(myds$rm ~ myds$grp, main = \"방의 개수\")\n\n\n\nboxplot(myds$dis ~ myds$grp, main = \"직업 센터까지의 거리\")\n\n\n\nboxplot(myds$tax ~ myds$grp, main = \"재산세율\")\n\n\n\n\n## (7) 다중 산점도를 통한 변수 간 상관 관계의 확인\npairs(myds[, -6]) # 6번째 열 제거(grp)\npairs(myds[, 1:5])\n\n\n\n\n## (8) 그룹 정보를 포함한 변수 간 상관 관계의 확인\npoint &lt;- as.integer(myds$grp) # 점의 모양 지정\ncolor &lt;- c(\"red\", \"green\", \"blue\") # 점의 색 지정\npairs(myds[, -6], pch = point, col = color[point])\n\n\n\n\n## (9) 변수 간 상관계수의 확인\ncor(myds[, -6])\n##            crim         rm        dis        tax       medv\n## crim  1.0000000 -0.2192467 -0.3796701  0.5827643 -0.3883046\n## rm   -0.2192467  1.0000000  0.2052462 -0.2920478  0.6953599\n## dis  -0.3796701  0.2052462  1.0000000 -0.5344316  0.2499287\n## tax   0.5827643 -0.2920478 -0.5344316  1.0000000 -0.4685359\n## medv -0.3883046  0.6953599  0.2499287 -0.4685359  1.0000000\ncor(myds[1:5])\n##            crim         rm        dis        tax       medv\n## crim  1.0000000 -0.2192467 -0.3796701  0.5827643 -0.3883046\n## rm   -0.2192467  1.0000000  0.2052462 -0.2920478  0.6953599\n## dis  -0.3796701  0.2052462  1.0000000 -0.5344316  0.2499287\n## tax   0.5827643 -0.2920478 -0.5344316  1.0000000 -0.4685359\n## medv -0.3883046  0.6953599  0.2499287 -0.4685359  1.0000000\n\n\n\n\n\nz &lt;- c(1, 2, 3, NA, 5, NA, 8)   # 결측값이 포함된 벡터 z\nsum(z)                          # 정상 계산이 안 됨\n## [1] NA\nis.na(z)                        # NA 여부 확인\n## [1] FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE\nsum(is.na(z))                   # NA의 개수 확인\n## [1] 2\nsum(z, na.rm = TRUE)            # NA를 제외하고 합계를 계산\n## [1] 19\n\n\nz1 &lt;- c(1, 2, 3, NA, 5, NA, 8)          # 결측값이 포함된 벡터 z1\nz2 &lt;- c(5, 8, 1, NA, 3, NA, 7)          # 결측값이 포함된 벡터 z2\nz1[is.na(z1)] &lt;- 0                      # NA를 0으로 치환\nz1\n## [1] 1 2 3 0 5 0 8\n\nz1[is.na(z1)] &lt;- mean(z1, na.rm = TRUE) # NA를 z1의 평균값으로 치환\nz1\n## [1] 1 2 3 0 5 0 8\n\nz3 &lt;- as.vector(na.omit(z2))            # NA를 제거하고 새로운 벡터 생성\nz3\n## [1] 5 8 1 3 7\n\n\n# NA를 포함하는 test 데이터 생성\nx &lt;- iris\nx[1, 2] &lt;- NA\nx[1, 3] &lt;- NA\nx[2, 3] &lt;- NA\nx[3, 4] &lt;- NA\nhead(x)\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1          5.1          NA           NA         0.2  setosa\n## 2          4.9         3.0           NA         0.2  setosa\n## 3          4.7         3.2          1.3          NA  setosa\n## 4          4.6         3.1          1.5         0.2  setosa\n## 5          5.0         3.6          1.4         0.2  setosa\n## 6          5.4         3.9          1.7         0.4  setosa\n\n\n# for문을 이용한 방법 ★★★★★\nfor (i in 1:ncol(x)) {\n    this.na &lt;- is.na(x[, i])\n    cat(colnames(x)[i], \"\\t\", sum(this.na), \"\\n\")\n}\n## Sepal.Length      0 \n## Sepal.Width   1 \n## Petal.Length      2 \n## Petal.Width   1 \n## Species   0\n\n# apply를 이용한 방법\ncol_na &lt;- function(y) {\n    return(sum(is.na(y)))\n}\n\nna_count &lt;- apply(x, 2, FUN = col_na)\nna_count\n## Sepal.Length  Sepal.Width Petal.Length  Petal.Width      Species \n##            0            1            2            1            0\n\n\nrowSums(is.na(x))           # 행별 NA의 개수\n##   [1] 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n##  [38] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n##  [75] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n## [112] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n## [149] 0 0\nsum(rowSums(is.na(x)) &gt; 0)  # NA가 포함된 행의 개수\n## [1] 3\n\nsum(is.na(x))               # 데이터셋 전체에서 NA 개수\n## [1] 4\n\n\nhead(x)\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1          5.1          NA           NA         0.2  setosa\n## 2          4.9         3.0           NA         0.2  setosa\n## 3          4.7         3.2          1.3          NA  setosa\n## 4          4.6         3.1          1.5         0.2  setosa\n## 5          5.0         3.6          1.4         0.2  setosa\n## 6          5.4         3.9          1.7         0.4  setosa\nx[!complete.cases(x), ]     # NA가 포함된 행들 출력\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1          5.1          NA           NA         0.2  setosa\n## 2          4.9         3.0           NA         0.2  setosa\n## 3          4.7         3.2          1.3          NA  setosa\ny &lt;- x[complete.cases(x), ] # NA가 포함된 행들 제거\nhead(y)                     # 새로운 데이터셋 y의 내용 확인\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 4          4.6         3.1          1.5         0.2  setosa\n## 5          5.0         3.6          1.4         0.2  setosa\n## 6          5.4         3.9          1.7         0.4  setosa\n## 7          4.6         3.4          1.4         0.3  setosa\n## 8          5.0         3.4          1.5         0.2  setosa\n## 9          4.4         2.9          1.4         0.2  setosa\n\n\nst &lt;- data.frame(state.x77)\nboxplot(st$Income)\n\n\n\nboxplot.stats(st$Income)\n## $stats\n## [1] 3098 3983 4519 4815 5348\n## \n## $n\n## [1] 50\n## \n## $conf\n## [1] 4333.093 4704.907\n## \n## $out\n## [1] 6315\n# stats (각 변수의 최소값, 1사분위수, 2사분위수, 3사분위수, 최대값이 저장되어 있는 행렬)\n# n (각 그룹마다의 관측값 수를 저장한 벡터)\n# conf (중앙값의 95% 신뢰구간, median+-1.58*IQR/(n)^0.5)\n# out (이상치)\nboxplot.stats(st$Income)$out\n## [1] 6315\n\n\nout.val &lt;- boxplot.stats(st$Income)$out     # 특이값 추출\n\nst$Income %in% out.val\n##  [1] FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [49] FALSE FALSE\nst$Income == out.val\n##  [1] FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [49] FALSE FALSE\n\nst$Income[st$Income %in% out.val] &lt;- NA     # 특이값을 NA로 대체\nst$Income[st$Income == out.val] &lt;- NA\n\nhead(st)\n##            Population Income Illiteracy Life.Exp Murder HS.Grad Frost   Area\n## Alabama          3615   3624        2.1    69.05   15.1    41.3    20  50708\n## Alaska            365     NA        1.5    69.31   11.3    66.7   152 566432\n## Arizona          2212   4530        1.8    70.55    7.8    58.1    15 113417\n## Arkansas         2110   3378        1.9    70.66   10.1    39.9    65  51945\n## California      21198   5114        1.1    71.71   10.3    62.6    20 156361\n## Colorado         2541   4884        0.7    72.06    6.8    63.9   166 103766\nnewdata &lt;- st[complete.cases(st), ]         # NA가 포함된 행 제거 ★★★★★\nhead(newdata)\n##             Population Income Illiteracy Life.Exp Murder HS.Grad Frost   Area\n## Alabama           3615   3624        2.1    69.05   15.1    41.3    20  50708\n## Arizona           2212   4530        1.8    70.55    7.8    58.1    15 113417\n## Arkansas          2110   3378        1.9    70.66   10.1    39.9    65  51945\n## California       21198   5114        1.1    71.71   10.3    62.6    20 156361\n## Colorado          2541   4884        0.7    72.06    6.8    63.9   166 103766\n## Connecticut       3100   5348        1.1    72.48    3.1    56.0   139   4862\n\n\nv1 &lt;- c(1, 7, 6, 8, 4, 2, 3)\norder(v1)\n## [1] 1 6 7 5 3 2 4\n\nv1 &lt;- sort(v1) # 오름차순\nv1\n## [1] 1 2 3 4 6 7 8\nv1[order(v1)]\n## [1] 1 2 3 4 6 7 8\n\nv2 &lt;- sort(v1, decreasing = T) # 내림차순\nv2\n## [1] 8 7 6 4 3 2 1\n\n\nhead(iris)\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1          5.1         3.5          1.4         0.2  setosa\n## 2          4.9         3.0          1.4         0.2  setosa\n## 3          4.7         3.2          1.3         0.2  setosa\n## 4          4.6         3.1          1.5         0.2  setosa\n## 5          5.0         3.6          1.4         0.2  setosa\n## 6          5.4         3.9          1.7         0.4  setosa\norder(iris$Sepal.Length)\n##   [1]  14   9  39  43  42   4   7  23  48   3  30  12  13  25  31  46   2  10\n##  [19]  35  38  58 107   5   8  26  27  36  41  44  50  61  94   1  18  20  22\n##  [37]  24  40  45  47  99  28  29  33  60  49   6  11  17  21  32  85  34  37\n##  [55]  54  81  82  90  91  65  67  70  89  95 122  16  19  56  80  96  97 100\n##  [73] 114  15  68  83  93 102 115 143  62  71 150  63  79  84  86 120 139  64\n##  [91]  72  74  92 128 135  69  98 127 149  57  73  88 101 104 124 134 137 147\n## [109]  52  75 112 116 129 133 138  55 105 111 117 148  59  76  66  78  87 109\n## [127] 125 141 145 146  77 113 144  53 121 140 142  51 103 110 126 130 108 131\n## [145] 106 118 119 123 136 132\niris[order(iris$Sepal.Length), ]                    # 오름차순으로 정렬\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 14           4.3         3.0          1.1         0.1     setosa\n## 9            4.4         2.9          1.4         0.2     setosa\n## 39           4.4         3.0          1.3         0.2     setosa\n## 43           4.4         3.2          1.3         0.2     setosa\n## 42           4.5         2.3          1.3         0.3     setosa\n## 4            4.6         3.1          1.5         0.2     setosa\n## 7            4.6         3.4          1.4         0.3     setosa\n## 23           4.6         3.6          1.0         0.2     setosa\n## 48           4.6         3.2          1.4         0.2     setosa\n## 3            4.7         3.2          1.3         0.2     setosa\n## 30           4.7         3.2          1.6         0.2     setosa\n## 12           4.8         3.4          1.6         0.2     setosa\n## 13           4.8         3.0          1.4         0.1     setosa\n## 25           4.8         3.4          1.9         0.2     setosa\n## 31           4.8         3.1          1.6         0.2     setosa\n## 46           4.8         3.0          1.4         0.3     setosa\n## 2            4.9         3.0          1.4         0.2     setosa\n## 10           4.9         3.1          1.5         0.1     setosa\n## 35           4.9         3.1          1.5         0.2     setosa\n## 38           4.9         3.6          1.4         0.1     setosa\n## 58           4.9         2.4          3.3         1.0 versicolor\n## 107          4.9         2.5          4.5         1.7  virginica\n## 5            5.0         3.6          1.4         0.2     setosa\n## 8            5.0         3.4          1.5         0.2     setosa\n## 26           5.0         3.0          1.6         0.2     setosa\n## 27           5.0         3.4          1.6         0.4     setosa\n## 36           5.0         3.2          1.2         0.2     setosa\n## 41           5.0         3.5          1.3         0.3     setosa\n## 44           5.0         3.5          1.6         0.6     setosa\n## 50           5.0         3.3          1.4         0.2     setosa\n## 61           5.0         2.0          3.5         1.0 versicolor\n## 94           5.0         2.3          3.3         1.0 versicolor\n## 1            5.1         3.5          1.4         0.2     setosa\n## 18           5.1         3.5          1.4         0.3     setosa\n## 20           5.1         3.8          1.5         0.3     setosa\n## 22           5.1         3.7          1.5         0.4     setosa\n## 24           5.1         3.3          1.7         0.5     setosa\n## 40           5.1         3.4          1.5         0.2     setosa\n## 45           5.1         3.8          1.9         0.4     setosa\n## 47           5.1         3.8          1.6         0.2     setosa\n## 99           5.1         2.5          3.0         1.1 versicolor\n## 28           5.2         3.5          1.5         0.2     setosa\n## 29           5.2         3.4          1.4         0.2     setosa\n## 33           5.2         4.1          1.5         0.1     setosa\n## 60           5.2         2.7          3.9         1.4 versicolor\n## 49           5.3         3.7          1.5         0.2     setosa\n## 6            5.4         3.9          1.7         0.4     setosa\n## 11           5.4         3.7          1.5         0.2     setosa\n## 17           5.4         3.9          1.3         0.4     setosa\n## 21           5.4         3.4          1.7         0.2     setosa\n## 32           5.4         3.4          1.5         0.4     setosa\n## 85           5.4         3.0          4.5         1.5 versicolor\n## 34           5.5         4.2          1.4         0.2     setosa\n## 37           5.5         3.5          1.3         0.2     setosa\n## 54           5.5         2.3          4.0         1.3 versicolor\n## 81           5.5         2.4          3.8         1.1 versicolor\n## 82           5.5         2.4          3.7         1.0 versicolor\n## 90           5.5         2.5          4.0         1.3 versicolor\n## 91           5.5         2.6          4.4         1.2 versicolor\n## 65           5.6         2.9          3.6         1.3 versicolor\n## 67           5.6         3.0          4.5         1.5 versicolor\n## 70           5.6         2.5          3.9         1.1 versicolor\n## 89           5.6         3.0          4.1         1.3 versicolor\n## 95           5.6         2.7          4.2         1.3 versicolor\n## 122          5.6         2.8          4.9         2.0  virginica\n## 16           5.7         4.4          1.5         0.4     setosa\n## 19           5.7         3.8          1.7         0.3     setosa\n## 56           5.7         2.8          4.5         1.3 versicolor\n## 80           5.7         2.6          3.5         1.0 versicolor\n## 96           5.7         3.0          4.2         1.2 versicolor\n## 97           5.7         2.9          4.2         1.3 versicolor\n## 100          5.7         2.8          4.1         1.3 versicolor\n## 114          5.7         2.5          5.0         2.0  virginica\n## 15           5.8         4.0          1.2         0.2     setosa\n## 68           5.8         2.7          4.1         1.0 versicolor\n## 83           5.8         2.7          3.9         1.2 versicolor\n## 93           5.8         2.6          4.0         1.2 versicolor\n## 102          5.8         2.7          5.1         1.9  virginica\n## 115          5.8         2.8          5.1         2.4  virginica\n## 143          5.8         2.7          5.1         1.9  virginica\n## 62           5.9         3.0          4.2         1.5 versicolor\n## 71           5.9         3.2          4.8         1.8 versicolor\n## 150          5.9         3.0          5.1         1.8  virginica\n## 63           6.0         2.2          4.0         1.0 versicolor\n## 79           6.0         2.9          4.5         1.5 versicolor\n## 84           6.0         2.7          5.1         1.6 versicolor\n## 86           6.0         3.4          4.5         1.6 versicolor\n## 120          6.0         2.2          5.0         1.5  virginica\n## 139          6.0         3.0          4.8         1.8  virginica\n## 64           6.1         2.9          4.7         1.4 versicolor\n## 72           6.1         2.8          4.0         1.3 versicolor\n## 74           6.1         2.8          4.7         1.2 versicolor\n## 92           6.1         3.0          4.6         1.4 versicolor\n## 128          6.1         3.0          4.9         1.8  virginica\n## 135          6.1         2.6          5.6         1.4  virginica\n## 69           6.2         2.2          4.5         1.5 versicolor\n## 98           6.2         2.9          4.3         1.3 versicolor\n## 127          6.2         2.8          4.8         1.8  virginica\n## 149          6.2         3.4          5.4         2.3  virginica\n## 57           6.3         3.3          4.7         1.6 versicolor\n## 73           6.3         2.5          4.9         1.5 versicolor\n## 88           6.3         2.3          4.4         1.3 versicolor\n## 101          6.3         3.3          6.0         2.5  virginica\n## 104          6.3         2.9          5.6         1.8  virginica\n## 124          6.3         2.7          4.9         1.8  virginica\n## 134          6.3         2.8          5.1         1.5  virginica\n## 137          6.3         3.4          5.6         2.4  virginica\n## 147          6.3         2.5          5.0         1.9  virginica\n## 52           6.4         3.2          4.5         1.5 versicolor\n## 75           6.4         2.9          4.3         1.3 versicolor\n## 112          6.4         2.7          5.3         1.9  virginica\n## 116          6.4         3.2          5.3         2.3  virginica\n## 129          6.4         2.8          5.6         2.1  virginica\n## 133          6.4         2.8          5.6         2.2  virginica\n## 138          6.4         3.1          5.5         1.8  virginica\n## 55           6.5         2.8          4.6         1.5 versicolor\n## 105          6.5         3.0          5.8         2.2  virginica\n## 111          6.5         3.2          5.1         2.0  virginica\n## 117          6.5         3.0          5.5         1.8  virginica\n## 148          6.5         3.0          5.2         2.0  virginica\n## 59           6.6         2.9          4.6         1.3 versicolor\n## 76           6.6         3.0          4.4         1.4 versicolor\n## 66           6.7         3.1          4.4         1.4 versicolor\n## 78           6.7         3.0          5.0         1.7 versicolor\n## 87           6.7         3.1          4.7         1.5 versicolor\n## 109          6.7         2.5          5.8         1.8  virginica\n## 125          6.7         3.3          5.7         2.1  virginica\n## 141          6.7         3.1          5.6         2.4  virginica\n## 145          6.7         3.3          5.7         2.5  virginica\n## 146          6.7         3.0          5.2         2.3  virginica\n## 77           6.8         2.8          4.8         1.4 versicolor\n## 113          6.8         3.0          5.5         2.1  virginica\n## 144          6.8         3.2          5.9         2.3  virginica\n## 53           6.9         3.1          4.9         1.5 versicolor\n## 121          6.9         3.2          5.7         2.3  virginica\n## 140          6.9         3.1          5.4         2.1  virginica\n## 142          6.9         3.1          5.1         2.3  virginica\n## 51           7.0         3.2          4.7         1.4 versicolor\n## 103          7.1         3.0          5.9         2.1  virginica\n## 110          7.2         3.6          6.1         2.5  virginica\n## 126          7.2         3.2          6.0         1.8  virginica\n## 130          7.2         3.0          5.8         1.6  virginica\n## 108          7.3         2.9          6.3         1.8  virginica\n## 131          7.4         2.8          6.1         1.9  virginica\n## 106          7.6         3.0          6.6         2.1  virginica\n## 118          7.7         3.8          6.7         2.2  virginica\n## 119          7.7         2.6          6.9         2.3  virginica\n## 123          7.7         2.8          6.7         2.0  virginica\n## 136          7.7         3.0          6.1         2.3  virginica\n## 132          7.9         3.8          6.4         2.0  virginica\niris[order(iris$Sepal.Length, decreasing = T), ]    # 내림차순으로 정렬\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 132          7.9         3.8          6.4         2.0  virginica\n## 118          7.7         3.8          6.7         2.2  virginica\n## 119          7.7         2.6          6.9         2.3  virginica\n## 123          7.7         2.8          6.7         2.0  virginica\n## 136          7.7         3.0          6.1         2.3  virginica\n## 106          7.6         3.0          6.6         2.1  virginica\n## 131          7.4         2.8          6.1         1.9  virginica\n## 108          7.3         2.9          6.3         1.8  virginica\n## 110          7.2         3.6          6.1         2.5  virginica\n## 126          7.2         3.2          6.0         1.8  virginica\n## 130          7.2         3.0          5.8         1.6  virginica\n## 103          7.1         3.0          5.9         2.1  virginica\n## 51           7.0         3.2          4.7         1.4 versicolor\n## 53           6.9         3.1          4.9         1.5 versicolor\n## 121          6.9         3.2          5.7         2.3  virginica\n## 140          6.9         3.1          5.4         2.1  virginica\n## 142          6.9         3.1          5.1         2.3  virginica\n## 77           6.8         2.8          4.8         1.4 versicolor\n## 113          6.8         3.0          5.5         2.1  virginica\n## 144          6.8         3.2          5.9         2.3  virginica\n## 66           6.7         3.1          4.4         1.4 versicolor\n## 78           6.7         3.0          5.0         1.7 versicolor\n## 87           6.7         3.1          4.7         1.5 versicolor\n## 109          6.7         2.5          5.8         1.8  virginica\n## 125          6.7         3.3          5.7         2.1  virginica\n## 141          6.7         3.1          5.6         2.4  virginica\n## 145          6.7         3.3          5.7         2.5  virginica\n## 146          6.7         3.0          5.2         2.3  virginica\n## 59           6.6         2.9          4.6         1.3 versicolor\n## 76           6.6         3.0          4.4         1.4 versicolor\n## 55           6.5         2.8          4.6         1.5 versicolor\n## 105          6.5         3.0          5.8         2.2  virginica\n## 111          6.5         3.2          5.1         2.0  virginica\n## 117          6.5         3.0          5.5         1.8  virginica\n## 148          6.5         3.0          5.2         2.0  virginica\n## 52           6.4         3.2          4.5         1.5 versicolor\n## 75           6.4         2.9          4.3         1.3 versicolor\n## 112          6.4         2.7          5.3         1.9  virginica\n## 116          6.4         3.2          5.3         2.3  virginica\n## 129          6.4         2.8          5.6         2.1  virginica\n## 133          6.4         2.8          5.6         2.2  virginica\n## 138          6.4         3.1          5.5         1.8  virginica\n## 57           6.3         3.3          4.7         1.6 versicolor\n## 73           6.3         2.5          4.9         1.5 versicolor\n## 88           6.3         2.3          4.4         1.3 versicolor\n## 101          6.3         3.3          6.0         2.5  virginica\n## 104          6.3         2.9          5.6         1.8  virginica\n## 124          6.3         2.7          4.9         1.8  virginica\n## 134          6.3         2.8          5.1         1.5  virginica\n## 137          6.3         3.4          5.6         2.4  virginica\n## 147          6.3         2.5          5.0         1.9  virginica\n## 69           6.2         2.2          4.5         1.5 versicolor\n## 98           6.2         2.9          4.3         1.3 versicolor\n## 127          6.2         2.8          4.8         1.8  virginica\n## 149          6.2         3.4          5.4         2.3  virginica\n## 64           6.1         2.9          4.7         1.4 versicolor\n## 72           6.1         2.8          4.0         1.3 versicolor\n## 74           6.1         2.8          4.7         1.2 versicolor\n## 92           6.1         3.0          4.6         1.4 versicolor\n## 128          6.1         3.0          4.9         1.8  virginica\n## 135          6.1         2.6          5.6         1.4  virginica\n## 63           6.0         2.2          4.0         1.0 versicolor\n## 79           6.0         2.9          4.5         1.5 versicolor\n## 84           6.0         2.7          5.1         1.6 versicolor\n## 86           6.0         3.4          4.5         1.6 versicolor\n## 120          6.0         2.2          5.0         1.5  virginica\n## 139          6.0         3.0          4.8         1.8  virginica\n## 62           5.9         3.0          4.2         1.5 versicolor\n## 71           5.9         3.2          4.8         1.8 versicolor\n## 150          5.9         3.0          5.1         1.8  virginica\n## 15           5.8         4.0          1.2         0.2     setosa\n## 68           5.8         2.7          4.1         1.0 versicolor\n## 83           5.8         2.7          3.9         1.2 versicolor\n## 93           5.8         2.6          4.0         1.2 versicolor\n## 102          5.8         2.7          5.1         1.9  virginica\n## 115          5.8         2.8          5.1         2.4  virginica\n## 143          5.8         2.7          5.1         1.9  virginica\n## 16           5.7         4.4          1.5         0.4     setosa\n## 19           5.7         3.8          1.7         0.3     setosa\n## 56           5.7         2.8          4.5         1.3 versicolor\n## 80           5.7         2.6          3.5         1.0 versicolor\n## 96           5.7         3.0          4.2         1.2 versicolor\n## 97           5.7         2.9          4.2         1.3 versicolor\n## 100          5.7         2.8          4.1         1.3 versicolor\n## 114          5.7         2.5          5.0         2.0  virginica\n## 65           5.6         2.9          3.6         1.3 versicolor\n## 67           5.6         3.0          4.5         1.5 versicolor\n## 70           5.6         2.5          3.9         1.1 versicolor\n## 89           5.6         3.0          4.1         1.3 versicolor\n## 95           5.6         2.7          4.2         1.3 versicolor\n## 122          5.6         2.8          4.9         2.0  virginica\n## 34           5.5         4.2          1.4         0.2     setosa\n## 37           5.5         3.5          1.3         0.2     setosa\n## 54           5.5         2.3          4.0         1.3 versicolor\n## 81           5.5         2.4          3.8         1.1 versicolor\n## 82           5.5         2.4          3.7         1.0 versicolor\n## 90           5.5         2.5          4.0         1.3 versicolor\n## 91           5.5         2.6          4.4         1.2 versicolor\n## 6            5.4         3.9          1.7         0.4     setosa\n## 11           5.4         3.7          1.5         0.2     setosa\n## 17           5.4         3.9          1.3         0.4     setosa\n## 21           5.4         3.4          1.7         0.2     setosa\n## 32           5.4         3.4          1.5         0.4     setosa\n## 85           5.4         3.0          4.5         1.5 versicolor\n## 49           5.3         3.7          1.5         0.2     setosa\n## 28           5.2         3.5          1.5         0.2     setosa\n## 29           5.2         3.4          1.4         0.2     setosa\n## 33           5.2         4.1          1.5         0.1     setosa\n## 60           5.2         2.7          3.9         1.4 versicolor\n## 1            5.1         3.5          1.4         0.2     setosa\n## 18           5.1         3.5          1.4         0.3     setosa\n## 20           5.1         3.8          1.5         0.3     setosa\n## 22           5.1         3.7          1.5         0.4     setosa\n## 24           5.1         3.3          1.7         0.5     setosa\n## 40           5.1         3.4          1.5         0.2     setosa\n## 45           5.1         3.8          1.9         0.4     setosa\n## 47           5.1         3.8          1.6         0.2     setosa\n## 99           5.1         2.5          3.0         1.1 versicolor\n## 5            5.0         3.6          1.4         0.2     setosa\n## 8            5.0         3.4          1.5         0.2     setosa\n## 26           5.0         3.0          1.6         0.2     setosa\n## 27           5.0         3.4          1.6         0.4     setosa\n## 36           5.0         3.2          1.2         0.2     setosa\n## 41           5.0         3.5          1.3         0.3     setosa\n## 44           5.0         3.5          1.6         0.6     setosa\n## 50           5.0         3.3          1.4         0.2     setosa\n## 61           5.0         2.0          3.5         1.0 versicolor\n## 94           5.0         2.3          3.3         1.0 versicolor\n## 2            4.9         3.0          1.4         0.2     setosa\n## 10           4.9         3.1          1.5         0.1     setosa\n## 35           4.9         3.1          1.5         0.2     setosa\n## 38           4.9         3.6          1.4         0.1     setosa\n## 58           4.9         2.4          3.3         1.0 versicolor\n## 107          4.9         2.5          4.5         1.7  virginica\n## 12           4.8         3.4          1.6         0.2     setosa\n## 13           4.8         3.0          1.4         0.1     setosa\n## 25           4.8         3.4          1.9         0.2     setosa\n## 31           4.8         3.1          1.6         0.2     setosa\n## 46           4.8         3.0          1.4         0.3     setosa\n## 3            4.7         3.2          1.3         0.2     setosa\n## 30           4.7         3.2          1.6         0.2     setosa\n## 4            4.6         3.1          1.5         0.2     setosa\n## 7            4.6         3.4          1.4         0.3     setosa\n## 23           4.6         3.6          1.0         0.2     setosa\n## 48           4.6         3.2          1.4         0.2     setosa\n## 42           4.5         2.3          1.3         0.3     setosa\n## 9            4.4         2.9          1.4         0.2     setosa\n## 39           4.4         3.0          1.3         0.2     setosa\n## 43           4.4         3.2          1.3         0.2     setosa\n## 14           4.3         3.0          1.1         0.1     setosa\n\niris.new &lt;- iris[order(iris$Sepal.Length), ]        # 정렬된 데이터를 저장\nhead(iris.new)\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 14          4.3         3.0          1.1         0.1  setosa\n## 9           4.4         2.9          1.4         0.2  setosa\n## 39          4.4         3.0          1.3         0.2  setosa\n## 43          4.4         3.2          1.3         0.2  setosa\n## 42          4.5         2.3          1.3         0.3  setosa\n## 4           4.6         3.1          1.5         0.2  setosa\niris[order(iris$Species,-iris$Petal.Length, decreasing = T), ] # 정렬 기준이 2개\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 107          4.9         2.5          4.5         1.7  virginica\n## 127          6.2         2.8          4.8         1.8  virginica\n## 139          6.0         3.0          4.8         1.8  virginica\n## 122          5.6         2.8          4.9         2.0  virginica\n## 124          6.3         2.7          4.9         1.8  virginica\n## 128          6.1         3.0          4.9         1.8  virginica\n## 114          5.7         2.5          5.0         2.0  virginica\n## 120          6.0         2.2          5.0         1.5  virginica\n## 147          6.3         2.5          5.0         1.9  virginica\n## 102          5.8         2.7          5.1         1.9  virginica\n## 111          6.5         3.2          5.1         2.0  virginica\n## 115          5.8         2.8          5.1         2.4  virginica\n## 134          6.3         2.8          5.1         1.5  virginica\n## 142          6.9         3.1          5.1         2.3  virginica\n## 143          5.8         2.7          5.1         1.9  virginica\n## 150          5.9         3.0          5.1         1.8  virginica\n## 146          6.7         3.0          5.2         2.3  virginica\n## 148          6.5         3.0          5.2         2.0  virginica\n## 112          6.4         2.7          5.3         1.9  virginica\n## 116          6.4         3.2          5.3         2.3  virginica\n## 140          6.9         3.1          5.4         2.1  virginica\n## 149          6.2         3.4          5.4         2.3  virginica\n## 113          6.8         3.0          5.5         2.1  virginica\n## 117          6.5         3.0          5.5         1.8  virginica\n## 138          6.4         3.1          5.5         1.8  virginica\n## 104          6.3         2.9          5.6         1.8  virginica\n## 129          6.4         2.8          5.6         2.1  virginica\n## 133          6.4         2.8          5.6         2.2  virginica\n## 135          6.1         2.6          5.6         1.4  virginica\n## 137          6.3         3.4          5.6         2.4  virginica\n## 141          6.7         3.1          5.6         2.4  virginica\n## 121          6.9         3.2          5.7         2.3  virginica\n## 125          6.7         3.3          5.7         2.1  virginica\n## 145          6.7         3.3          5.7         2.5  virginica\n## 105          6.5         3.0          5.8         2.2  virginica\n## 109          6.7         2.5          5.8         1.8  virginica\n## 130          7.2         3.0          5.8         1.6  virginica\n## 103          7.1         3.0          5.9         2.1  virginica\n## 144          6.8         3.2          5.9         2.3  virginica\n## 101          6.3         3.3          6.0         2.5  virginica\n## 126          7.2         3.2          6.0         1.8  virginica\n## 110          7.2         3.6          6.1         2.5  virginica\n## 131          7.4         2.8          6.1         1.9  virginica\n## 136          7.7         3.0          6.1         2.3  virginica\n## 108          7.3         2.9          6.3         1.8  virginica\n## 132          7.9         3.8          6.4         2.0  virginica\n## 106          7.6         3.0          6.6         2.1  virginica\n## 118          7.7         3.8          6.7         2.2  virginica\n## 123          7.7         2.8          6.7         2.0  virginica\n## 119          7.7         2.6          6.9         2.3  virginica\n## 99           5.1         2.5          3.0         1.1 versicolor\n## 58           4.9         2.4          3.3         1.0 versicolor\n## 94           5.0         2.3          3.3         1.0 versicolor\n## 61           5.0         2.0          3.5         1.0 versicolor\n## 80           5.7         2.6          3.5         1.0 versicolor\n## 65           5.6         2.9          3.6         1.3 versicolor\n## 82           5.5         2.4          3.7         1.0 versicolor\n## 81           5.5         2.4          3.8         1.1 versicolor\n## 60           5.2         2.7          3.9         1.4 versicolor\n## 70           5.6         2.5          3.9         1.1 versicolor\n## 83           5.8         2.7          3.9         1.2 versicolor\n## 54           5.5         2.3          4.0         1.3 versicolor\n## 63           6.0         2.2          4.0         1.0 versicolor\n## 72           6.1         2.8          4.0         1.3 versicolor\n## 90           5.5         2.5          4.0         1.3 versicolor\n## 93           5.8         2.6          4.0         1.2 versicolor\n## 68           5.8         2.7          4.1         1.0 versicolor\n## 89           5.6         3.0          4.1         1.3 versicolor\n## 100          5.7         2.8          4.1         1.3 versicolor\n## 62           5.9         3.0          4.2         1.5 versicolor\n## 95           5.6         2.7          4.2         1.3 versicolor\n## 96           5.7         3.0          4.2         1.2 versicolor\n## 97           5.7         2.9          4.2         1.3 versicolor\n## 75           6.4         2.9          4.3         1.3 versicolor\n## 98           6.2         2.9          4.3         1.3 versicolor\n## 66           6.7         3.1          4.4         1.4 versicolor\n## 76           6.6         3.0          4.4         1.4 versicolor\n## 88           6.3         2.3          4.4         1.3 versicolor\n## 91           5.5         2.6          4.4         1.2 versicolor\n## 52           6.4         3.2          4.5         1.5 versicolor\n## 56           5.7         2.8          4.5         1.3 versicolor\n## 67           5.6         3.0          4.5         1.5 versicolor\n## 69           6.2         2.2          4.5         1.5 versicolor\n## 79           6.0         2.9          4.5         1.5 versicolor\n## 85           5.4         3.0          4.5         1.5 versicolor\n## 86           6.0         3.4          4.5         1.6 versicolor\n## 55           6.5         2.8          4.6         1.5 versicolor\n## 59           6.6         2.9          4.6         1.3 versicolor\n## 92           6.1         3.0          4.6         1.4 versicolor\n## 51           7.0         3.2          4.7         1.4 versicolor\n## 57           6.3         3.3          4.7         1.6 versicolor\n## 64           6.1         2.9          4.7         1.4 versicolor\n## 74           6.1         2.8          4.7         1.2 versicolor\n## 87           6.7         3.1          4.7         1.5 versicolor\n## 71           5.9         3.2          4.8         1.8 versicolor\n## 77           6.8         2.8          4.8         1.4 versicolor\n## 53           6.9         3.1          4.9         1.5 versicolor\n## 73           6.3         2.5          4.9         1.5 versicolor\n## 78           6.7         3.0          5.0         1.7 versicolor\n## 84           6.0         2.7          5.1         1.6 versicolor\n## 23           4.6         3.6          1.0         0.2     setosa\n## 14           4.3         3.0          1.1         0.1     setosa\n## 15           5.8         4.0          1.2         0.2     setosa\n## 36           5.0         3.2          1.2         0.2     setosa\n## 3            4.7         3.2          1.3         0.2     setosa\n## 17           5.4         3.9          1.3         0.4     setosa\n## 37           5.5         3.5          1.3         0.2     setosa\n## 39           4.4         3.0          1.3         0.2     setosa\n## 41           5.0         3.5          1.3         0.3     setosa\n## 42           4.5         2.3          1.3         0.3     setosa\n## 43           4.4         3.2          1.3         0.2     setosa\n## 1            5.1         3.5          1.4         0.2     setosa\n## 2            4.9         3.0          1.4         0.2     setosa\n## 5            5.0         3.6          1.4         0.2     setosa\n## 7            4.6         3.4          1.4         0.3     setosa\n## 9            4.4         2.9          1.4         0.2     setosa\n## 13           4.8         3.0          1.4         0.1     setosa\n## 18           5.1         3.5          1.4         0.3     setosa\n## 29           5.2         3.4          1.4         0.2     setosa\n## 34           5.5         4.2          1.4         0.2     setosa\n## 38           4.9         3.6          1.4         0.1     setosa\n## 46           4.8         3.0          1.4         0.3     setosa\n## 48           4.6         3.2          1.4         0.2     setosa\n## 50           5.0         3.3          1.4         0.2     setosa\n## 4            4.6         3.1          1.5         0.2     setosa\n## 8            5.0         3.4          1.5         0.2     setosa\n## 10           4.9         3.1          1.5         0.1     setosa\n## 11           5.4         3.7          1.5         0.2     setosa\n## 16           5.7         4.4          1.5         0.4     setosa\n## 20           5.1         3.8          1.5         0.3     setosa\n## 22           5.1         3.7          1.5         0.4     setosa\n## 28           5.2         3.5          1.5         0.2     setosa\n## 32           5.4         3.4          1.5         0.4     setosa\n## 33           5.2         4.1          1.5         0.1     setosa\n## 35           4.9         3.1          1.5         0.2     setosa\n## 40           5.1         3.4          1.5         0.2     setosa\n## 49           5.3         3.7          1.5         0.2     setosa\n## 12           4.8         3.4          1.6         0.2     setosa\n## 26           5.0         3.0          1.6         0.2     setosa\n## 27           5.0         3.4          1.6         0.4     setosa\n## 30           4.7         3.2          1.6         0.2     setosa\n## 31           4.8         3.1          1.6         0.2     setosa\n## 44           5.0         3.5          1.6         0.6     setosa\n## 47           5.1         3.8          1.6         0.2     setosa\n## 6            5.4         3.9          1.7         0.4     setosa\n## 19           5.7         3.8          1.7         0.3     setosa\n## 21           5.4         3.4          1.7         0.2     setosa\n## 24           5.1         3.3          1.7         0.5     setosa\n## 25           4.8         3.4          1.9         0.2     setosa\n## 45           5.1         3.8          1.9         0.4     setosa\niris[order(iris$Species, decreasing = T, iris$Petal.Length), ]\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 119          7.7         2.6          6.9         2.3  virginica\n## 118          7.7         3.8          6.7         2.2  virginica\n## 123          7.7         2.8          6.7         2.0  virginica\n## 106          7.6         3.0          6.6         2.1  virginica\n## 132          7.9         3.8          6.4         2.0  virginica\n## 108          7.3         2.9          6.3         1.8  virginica\n## 110          7.2         3.6          6.1         2.5  virginica\n## 131          7.4         2.8          6.1         1.9  virginica\n## 136          7.7         3.0          6.1         2.3  virginica\n## 101          6.3         3.3          6.0         2.5  virginica\n## 126          7.2         3.2          6.0         1.8  virginica\n## 103          7.1         3.0          5.9         2.1  virginica\n## 144          6.8         3.2          5.9         2.3  virginica\n## 105          6.5         3.0          5.8         2.2  virginica\n## 109          6.7         2.5          5.8         1.8  virginica\n## 130          7.2         3.0          5.8         1.6  virginica\n## 121          6.9         3.2          5.7         2.3  virginica\n## 125          6.7         3.3          5.7         2.1  virginica\n## 145          6.7         3.3          5.7         2.5  virginica\n## 104          6.3         2.9          5.6         1.8  virginica\n## 129          6.4         2.8          5.6         2.1  virginica\n## 133          6.4         2.8          5.6         2.2  virginica\n## 135          6.1         2.6          5.6         1.4  virginica\n## 137          6.3         3.4          5.6         2.4  virginica\n## 141          6.7         3.1          5.6         2.4  virginica\n## 113          6.8         3.0          5.5         2.1  virginica\n## 117          6.5         3.0          5.5         1.8  virginica\n## 138          6.4         3.1          5.5         1.8  virginica\n## 140          6.9         3.1          5.4         2.1  virginica\n## 149          6.2         3.4          5.4         2.3  virginica\n## 112          6.4         2.7          5.3         1.9  virginica\n## 116          6.4         3.2          5.3         2.3  virginica\n## 146          6.7         3.0          5.2         2.3  virginica\n## 148          6.5         3.0          5.2         2.0  virginica\n## 102          5.8         2.7          5.1         1.9  virginica\n## 111          6.5         3.2          5.1         2.0  virginica\n## 115          5.8         2.8          5.1         2.4  virginica\n## 134          6.3         2.8          5.1         1.5  virginica\n## 142          6.9         3.1          5.1         2.3  virginica\n## 143          5.8         2.7          5.1         1.9  virginica\n## 150          5.9         3.0          5.1         1.8  virginica\n## 114          5.7         2.5          5.0         2.0  virginica\n## 120          6.0         2.2          5.0         1.5  virginica\n## 147          6.3         2.5          5.0         1.9  virginica\n## 122          5.6         2.8          4.9         2.0  virginica\n## 124          6.3         2.7          4.9         1.8  virginica\n## 128          6.1         3.0          4.9         1.8  virginica\n## 127          6.2         2.8          4.8         1.8  virginica\n## 139          6.0         3.0          4.8         1.8  virginica\n## 107          4.9         2.5          4.5         1.7  virginica\n## 84           6.0         2.7          5.1         1.6 versicolor\n## 78           6.7         3.0          5.0         1.7 versicolor\n## 53           6.9         3.1          4.9         1.5 versicolor\n## 73           6.3         2.5          4.9         1.5 versicolor\n## 71           5.9         3.2          4.8         1.8 versicolor\n## 77           6.8         2.8          4.8         1.4 versicolor\n## 51           7.0         3.2          4.7         1.4 versicolor\n## 57           6.3         3.3          4.7         1.6 versicolor\n## 64           6.1         2.9          4.7         1.4 versicolor\n## 74           6.1         2.8          4.7         1.2 versicolor\n## 87           6.7         3.1          4.7         1.5 versicolor\n## 55           6.5         2.8          4.6         1.5 versicolor\n## 59           6.6         2.9          4.6         1.3 versicolor\n## 92           6.1         3.0          4.6         1.4 versicolor\n## 52           6.4         3.2          4.5         1.5 versicolor\n## 56           5.7         2.8          4.5         1.3 versicolor\n## 67           5.6         3.0          4.5         1.5 versicolor\n## 69           6.2         2.2          4.5         1.5 versicolor\n## 79           6.0         2.9          4.5         1.5 versicolor\n## 85           5.4         3.0          4.5         1.5 versicolor\n## 86           6.0         3.4          4.5         1.6 versicolor\n## 66           6.7         3.1          4.4         1.4 versicolor\n## 76           6.6         3.0          4.4         1.4 versicolor\n## 88           6.3         2.3          4.4         1.3 versicolor\n## 91           5.5         2.6          4.4         1.2 versicolor\n## 75           6.4         2.9          4.3         1.3 versicolor\n## 98           6.2         2.9          4.3         1.3 versicolor\n## 62           5.9         3.0          4.2         1.5 versicolor\n## 95           5.6         2.7          4.2         1.3 versicolor\n## 96           5.7         3.0          4.2         1.2 versicolor\n## 97           5.7         2.9          4.2         1.3 versicolor\n## 68           5.8         2.7          4.1         1.0 versicolor\n## 89           5.6         3.0          4.1         1.3 versicolor\n## 100          5.7         2.8          4.1         1.3 versicolor\n## 54           5.5         2.3          4.0         1.3 versicolor\n## 63           6.0         2.2          4.0         1.0 versicolor\n## 72           6.1         2.8          4.0         1.3 versicolor\n## 90           5.5         2.5          4.0         1.3 versicolor\n## 93           5.8         2.6          4.0         1.2 versicolor\n## 60           5.2         2.7          3.9         1.4 versicolor\n## 70           5.6         2.5          3.9         1.1 versicolor\n## 83           5.8         2.7          3.9         1.2 versicolor\n## 81           5.5         2.4          3.8         1.1 versicolor\n## 82           5.5         2.4          3.7         1.0 versicolor\n## 65           5.6         2.9          3.6         1.3 versicolor\n## 61           5.0         2.0          3.5         1.0 versicolor\n## 80           5.7         2.6          3.5         1.0 versicolor\n## 58           4.9         2.4          3.3         1.0 versicolor\n## 94           5.0         2.3          3.3         1.0 versicolor\n## 99           5.1         2.5          3.0         1.1 versicolor\n## 25           4.8         3.4          1.9         0.2     setosa\n## 45           5.1         3.8          1.9         0.4     setosa\n## 6            5.4         3.9          1.7         0.4     setosa\n## 19           5.7         3.8          1.7         0.3     setosa\n## 21           5.4         3.4          1.7         0.2     setosa\n## 24           5.1         3.3          1.7         0.5     setosa\n## 12           4.8         3.4          1.6         0.2     setosa\n## 26           5.0         3.0          1.6         0.2     setosa\n## 27           5.0         3.4          1.6         0.4     setosa\n## 30           4.7         3.2          1.6         0.2     setosa\n## 31           4.8         3.1          1.6         0.2     setosa\n## 44           5.0         3.5          1.6         0.6     setosa\n## 47           5.1         3.8          1.6         0.2     setosa\n## 4            4.6         3.1          1.5         0.2     setosa\n## 8            5.0         3.4          1.5         0.2     setosa\n## 10           4.9         3.1          1.5         0.1     setosa\n## 11           5.4         3.7          1.5         0.2     setosa\n## 16           5.7         4.4          1.5         0.4     setosa\n## 20           5.1         3.8          1.5         0.3     setosa\n## 22           5.1         3.7          1.5         0.4     setosa\n## 28           5.2         3.5          1.5         0.2     setosa\n## 32           5.4         3.4          1.5         0.4     setosa\n## 33           5.2         4.1          1.5         0.1     setosa\n## 35           4.9         3.1          1.5         0.2     setosa\n## 40           5.1         3.4          1.5         0.2     setosa\n## 49           5.3         3.7          1.5         0.2     setosa\n## 1            5.1         3.5          1.4         0.2     setosa\n## 2            4.9         3.0          1.4         0.2     setosa\n## 5            5.0         3.6          1.4         0.2     setosa\n## 7            4.6         3.4          1.4         0.3     setosa\n## 9            4.4         2.9          1.4         0.2     setosa\n## 13           4.8         3.0          1.4         0.1     setosa\n## 18           5.1         3.5          1.4         0.3     setosa\n## 29           5.2         3.4          1.4         0.2     setosa\n## 34           5.5         4.2          1.4         0.2     setosa\n## 38           4.9         3.6          1.4         0.1     setosa\n## 46           4.8         3.0          1.4         0.3     setosa\n## 48           4.6         3.2          1.4         0.2     setosa\n## 50           5.0         3.3          1.4         0.2     setosa\n## 3            4.7         3.2          1.3         0.2     setosa\n## 17           5.4         3.9          1.3         0.4     setosa\n## 37           5.5         3.5          1.3         0.2     setosa\n## 39           4.4         3.0          1.3         0.2     setosa\n## 41           5.0         3.5          1.3         0.3     setosa\n## 42           4.5         2.3          1.3         0.3     setosa\n## 43           4.4         3.2          1.3         0.2     setosa\n## 15           5.8         4.0          1.2         0.2     setosa\n## 36           5.0         3.2          1.2         0.2     setosa\n## 14           4.3         3.0          1.1         0.1     setosa\n## 23           4.6         3.6          1.0         0.2     setosa\n\n\nsp &lt;- split(iris, iris$Species) # 품종별로 데이터 분리\nsp                              # 분리 결과 확인\n## $setosa\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1           5.1         3.5          1.4         0.2  setosa\n## 2           4.9         3.0          1.4         0.2  setosa\n## 3           4.7         3.2          1.3         0.2  setosa\n## 4           4.6         3.1          1.5         0.2  setosa\n## 5           5.0         3.6          1.4         0.2  setosa\n## 6           5.4         3.9          1.7         0.4  setosa\n## 7           4.6         3.4          1.4         0.3  setosa\n## 8           5.0         3.4          1.5         0.2  setosa\n## 9           4.4         2.9          1.4         0.2  setosa\n## 10          4.9         3.1          1.5         0.1  setosa\n## 11          5.4         3.7          1.5         0.2  setosa\n## 12          4.8         3.4          1.6         0.2  setosa\n## 13          4.8         3.0          1.4         0.1  setosa\n## 14          4.3         3.0          1.1         0.1  setosa\n## 15          5.8         4.0          1.2         0.2  setosa\n## 16          5.7         4.4          1.5         0.4  setosa\n## 17          5.4         3.9          1.3         0.4  setosa\n## 18          5.1         3.5          1.4         0.3  setosa\n## 19          5.7         3.8          1.7         0.3  setosa\n## 20          5.1         3.8          1.5         0.3  setosa\n## 21          5.4         3.4          1.7         0.2  setosa\n## 22          5.1         3.7          1.5         0.4  setosa\n## 23          4.6         3.6          1.0         0.2  setosa\n## 24          5.1         3.3          1.7         0.5  setosa\n## 25          4.8         3.4          1.9         0.2  setosa\n## 26          5.0         3.0          1.6         0.2  setosa\n## 27          5.0         3.4          1.6         0.4  setosa\n## 28          5.2         3.5          1.5         0.2  setosa\n## 29          5.2         3.4          1.4         0.2  setosa\n## 30          4.7         3.2          1.6         0.2  setosa\n## 31          4.8         3.1          1.6         0.2  setosa\n## 32          5.4         3.4          1.5         0.4  setosa\n## 33          5.2         4.1          1.5         0.1  setosa\n## 34          5.5         4.2          1.4         0.2  setosa\n## 35          4.9         3.1          1.5         0.2  setosa\n## 36          5.0         3.2          1.2         0.2  setosa\n## 37          5.5         3.5          1.3         0.2  setosa\n## 38          4.9         3.6          1.4         0.1  setosa\n## 39          4.4         3.0          1.3         0.2  setosa\n## 40          5.1         3.4          1.5         0.2  setosa\n## 41          5.0         3.5          1.3         0.3  setosa\n## 42          4.5         2.3          1.3         0.3  setosa\n## 43          4.4         3.2          1.3         0.2  setosa\n## 44          5.0         3.5          1.6         0.6  setosa\n## 45          5.1         3.8          1.9         0.4  setosa\n## 46          4.8         3.0          1.4         0.3  setosa\n## 47          5.1         3.8          1.6         0.2  setosa\n## 48          4.6         3.2          1.4         0.2  setosa\n## 49          5.3         3.7          1.5         0.2  setosa\n## 50          5.0         3.3          1.4         0.2  setosa\n## \n## $versicolor\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 51           7.0         3.2          4.7         1.4 versicolor\n## 52           6.4         3.2          4.5         1.5 versicolor\n## 53           6.9         3.1          4.9         1.5 versicolor\n## 54           5.5         2.3          4.0         1.3 versicolor\n## 55           6.5         2.8          4.6         1.5 versicolor\n## 56           5.7         2.8          4.5         1.3 versicolor\n## 57           6.3         3.3          4.7         1.6 versicolor\n## 58           4.9         2.4          3.3         1.0 versicolor\n## 59           6.6         2.9          4.6         1.3 versicolor\n## 60           5.2         2.7          3.9         1.4 versicolor\n## 61           5.0         2.0          3.5         1.0 versicolor\n## 62           5.9         3.0          4.2         1.5 versicolor\n## 63           6.0         2.2          4.0         1.0 versicolor\n## 64           6.1         2.9          4.7         1.4 versicolor\n## 65           5.6         2.9          3.6         1.3 versicolor\n## 66           6.7         3.1          4.4         1.4 versicolor\n## 67           5.6         3.0          4.5         1.5 versicolor\n## 68           5.8         2.7          4.1         1.0 versicolor\n## 69           6.2         2.2          4.5         1.5 versicolor\n## 70           5.6         2.5          3.9         1.1 versicolor\n## 71           5.9         3.2          4.8         1.8 versicolor\n## 72           6.1         2.8          4.0         1.3 versicolor\n## 73           6.3         2.5          4.9         1.5 versicolor\n## 74           6.1         2.8          4.7         1.2 versicolor\n## 75           6.4         2.9          4.3         1.3 versicolor\n## 76           6.6         3.0          4.4         1.4 versicolor\n## 77           6.8         2.8          4.8         1.4 versicolor\n## 78           6.7         3.0          5.0         1.7 versicolor\n## 79           6.0         2.9          4.5         1.5 versicolor\n## 80           5.7         2.6          3.5         1.0 versicolor\n## 81           5.5         2.4          3.8         1.1 versicolor\n## 82           5.5         2.4          3.7         1.0 versicolor\n## 83           5.8         2.7          3.9         1.2 versicolor\n## 84           6.0         2.7          5.1         1.6 versicolor\n## 85           5.4         3.0          4.5         1.5 versicolor\n## 86           6.0         3.4          4.5         1.6 versicolor\n## 87           6.7         3.1          4.7         1.5 versicolor\n## 88           6.3         2.3          4.4         1.3 versicolor\n## 89           5.6         3.0          4.1         1.3 versicolor\n## 90           5.5         2.5          4.0         1.3 versicolor\n## 91           5.5         2.6          4.4         1.2 versicolor\n## 92           6.1         3.0          4.6         1.4 versicolor\n## 93           5.8         2.6          4.0         1.2 versicolor\n## 94           5.0         2.3          3.3         1.0 versicolor\n## 95           5.6         2.7          4.2         1.3 versicolor\n## 96           5.7         3.0          4.2         1.2 versicolor\n## 97           5.7         2.9          4.2         1.3 versicolor\n## 98           6.2         2.9          4.3         1.3 versicolor\n## 99           5.1         2.5          3.0         1.1 versicolor\n## 100          5.7         2.8          4.1         1.3 versicolor\n## \n## $virginica\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n## 101          6.3         3.3          6.0         2.5 virginica\n## 102          5.8         2.7          5.1         1.9 virginica\n## 103          7.1         3.0          5.9         2.1 virginica\n## 104          6.3         2.9          5.6         1.8 virginica\n## 105          6.5         3.0          5.8         2.2 virginica\n## 106          7.6         3.0          6.6         2.1 virginica\n## 107          4.9         2.5          4.5         1.7 virginica\n## 108          7.3         2.9          6.3         1.8 virginica\n## 109          6.7         2.5          5.8         1.8 virginica\n## 110          7.2         3.6          6.1         2.5 virginica\n## 111          6.5         3.2          5.1         2.0 virginica\n## 112          6.4         2.7          5.3         1.9 virginica\n## 113          6.8         3.0          5.5         2.1 virginica\n## 114          5.7         2.5          5.0         2.0 virginica\n## 115          5.8         2.8          5.1         2.4 virginica\n## 116          6.4         3.2          5.3         2.3 virginica\n## 117          6.5         3.0          5.5         1.8 virginica\n## 118          7.7         3.8          6.7         2.2 virginica\n## 119          7.7         2.6          6.9         2.3 virginica\n## 120          6.0         2.2          5.0         1.5 virginica\n## 121          6.9         3.2          5.7         2.3 virginica\n## 122          5.6         2.8          4.9         2.0 virginica\n## 123          7.7         2.8          6.7         2.0 virginica\n## 124          6.3         2.7          4.9         1.8 virginica\n## 125          6.7         3.3          5.7         2.1 virginica\n## 126          7.2         3.2          6.0         1.8 virginica\n## 127          6.2         2.8          4.8         1.8 virginica\n## 128          6.1         3.0          4.9         1.8 virginica\n## 129          6.4         2.8          5.6         2.1 virginica\n## 130          7.2         3.0          5.8         1.6 virginica\n## 131          7.4         2.8          6.1         1.9 virginica\n## 132          7.9         3.8          6.4         2.0 virginica\n## 133          6.4         2.8          5.6         2.2 virginica\n## 134          6.3         2.8          5.1         1.5 virginica\n## 135          6.1         2.6          5.6         1.4 virginica\n## 136          7.7         3.0          6.1         2.3 virginica\n## 137          6.3         3.4          5.6         2.4 virginica\n## 138          6.4         3.1          5.5         1.8 virginica\n## 139          6.0         3.0          4.8         1.8 virginica\n## 140          6.9         3.1          5.4         2.1 virginica\n## 141          6.7         3.1          5.6         2.4 virginica\n## 142          6.9         3.1          5.1         2.3 virginica\n## 143          5.8         2.7          5.1         1.9 virginica\n## 144          6.8         3.2          5.9         2.3 virginica\n## 145          6.7         3.3          5.7         2.5 virginica\n## 146          6.7         3.0          5.2         2.3 virginica\n## 147          6.3         2.5          5.0         1.9 virginica\n## 148          6.5         3.0          5.2         2.0 virginica\n## 149          6.2         3.4          5.4         2.3 virginica\n## 150          5.9         3.0          5.1         1.8 virginica\nsummary(sp)                     # 분리 결과 요약\n##            Length Class      Mode\n## setosa     5      data.frame list\n## versicolor 5      data.frame list\n## virginica  5      data.frame list\nsp$setosa                       # setosa 품종의 데이터 확인\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1           5.1         3.5          1.4         0.2  setosa\n## 2           4.9         3.0          1.4         0.2  setosa\n## 3           4.7         3.2          1.3         0.2  setosa\n## 4           4.6         3.1          1.5         0.2  setosa\n## 5           5.0         3.6          1.4         0.2  setosa\n## 6           5.4         3.9          1.7         0.4  setosa\n## 7           4.6         3.4          1.4         0.3  setosa\n## 8           5.0         3.4          1.5         0.2  setosa\n## 9           4.4         2.9          1.4         0.2  setosa\n## 10          4.9         3.1          1.5         0.1  setosa\n## 11          5.4         3.7          1.5         0.2  setosa\n## 12          4.8         3.4          1.6         0.2  setosa\n## 13          4.8         3.0          1.4         0.1  setosa\n## 14          4.3         3.0          1.1         0.1  setosa\n## 15          5.8         4.0          1.2         0.2  setosa\n## 16          5.7         4.4          1.5         0.4  setosa\n## 17          5.4         3.9          1.3         0.4  setosa\n## 18          5.1         3.5          1.4         0.3  setosa\n## 19          5.7         3.8          1.7         0.3  setosa\n## 20          5.1         3.8          1.5         0.3  setosa\n## 21          5.4         3.4          1.7         0.2  setosa\n## 22          5.1         3.7          1.5         0.4  setosa\n## 23          4.6         3.6          1.0         0.2  setosa\n## 24          5.1         3.3          1.7         0.5  setosa\n## 25          4.8         3.4          1.9         0.2  setosa\n## 26          5.0         3.0          1.6         0.2  setosa\n## 27          5.0         3.4          1.6         0.4  setosa\n## 28          5.2         3.5          1.5         0.2  setosa\n## 29          5.2         3.4          1.4         0.2  setosa\n## 30          4.7         3.2          1.6         0.2  setosa\n## 31          4.8         3.1          1.6         0.2  setosa\n## 32          5.4         3.4          1.5         0.4  setosa\n## 33          5.2         4.1          1.5         0.1  setosa\n## 34          5.5         4.2          1.4         0.2  setosa\n## 35          4.9         3.1          1.5         0.2  setosa\n## 36          5.0         3.2          1.2         0.2  setosa\n## 37          5.5         3.5          1.3         0.2  setosa\n## 38          4.9         3.6          1.4         0.1  setosa\n## 39          4.4         3.0          1.3         0.2  setosa\n## 40          5.1         3.4          1.5         0.2  setosa\n## 41          5.0         3.5          1.3         0.3  setosa\n## 42          4.5         2.3          1.3         0.3  setosa\n## 43          4.4         3.2          1.3         0.2  setosa\n## 44          5.0         3.5          1.6         0.6  setosa\n## 45          5.1         3.8          1.9         0.4  setosa\n## 46          4.8         3.0          1.4         0.3  setosa\n## 47          5.1         3.8          1.6         0.2  setosa\n## 48          4.6         3.2          1.4         0.2  setosa\n## 49          5.3         3.7          1.5         0.2  setosa\n## 50          5.0         3.3          1.4         0.2  setosa\nsetosa &lt;- sp$setosa\n\n\nsubset(iris, Species == \"setosa\")\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1           5.1         3.5          1.4         0.2  setosa\n## 2           4.9         3.0          1.4         0.2  setosa\n## 3           4.7         3.2          1.3         0.2  setosa\n## 4           4.6         3.1          1.5         0.2  setosa\n## 5           5.0         3.6          1.4         0.2  setosa\n## 6           5.4         3.9          1.7         0.4  setosa\n## 7           4.6         3.4          1.4         0.3  setosa\n## 8           5.0         3.4          1.5         0.2  setosa\n## 9           4.4         2.9          1.4         0.2  setosa\n## 10          4.9         3.1          1.5         0.1  setosa\n## 11          5.4         3.7          1.5         0.2  setosa\n## 12          4.8         3.4          1.6         0.2  setosa\n## 13          4.8         3.0          1.4         0.1  setosa\n## 14          4.3         3.0          1.1         0.1  setosa\n## 15          5.8         4.0          1.2         0.2  setosa\n## 16          5.7         4.4          1.5         0.4  setosa\n## 17          5.4         3.9          1.3         0.4  setosa\n## 18          5.1         3.5          1.4         0.3  setosa\n## 19          5.7         3.8          1.7         0.3  setosa\n## 20          5.1         3.8          1.5         0.3  setosa\n## 21          5.4         3.4          1.7         0.2  setosa\n## 22          5.1         3.7          1.5         0.4  setosa\n## 23          4.6         3.6          1.0         0.2  setosa\n## 24          5.1         3.3          1.7         0.5  setosa\n## 25          4.8         3.4          1.9         0.2  setosa\n## 26          5.0         3.0          1.6         0.2  setosa\n## 27          5.0         3.4          1.6         0.4  setosa\n## 28          5.2         3.5          1.5         0.2  setosa\n## 29          5.2         3.4          1.4         0.2  setosa\n## 30          4.7         3.2          1.6         0.2  setosa\n## 31          4.8         3.1          1.6         0.2  setosa\n## 32          5.4         3.4          1.5         0.4  setosa\n## 33          5.2         4.1          1.5         0.1  setosa\n## 34          5.5         4.2          1.4         0.2  setosa\n## 35          4.9         3.1          1.5         0.2  setosa\n## 36          5.0         3.2          1.2         0.2  setosa\n## 37          5.5         3.5          1.3         0.2  setosa\n## 38          4.9         3.6          1.4         0.1  setosa\n## 39          4.4         3.0          1.3         0.2  setosa\n## 40          5.1         3.4          1.5         0.2  setosa\n## 41          5.0         3.5          1.3         0.3  setosa\n## 42          4.5         2.3          1.3         0.3  setosa\n## 43          4.4         3.2          1.3         0.2  setosa\n## 44          5.0         3.5          1.6         0.6  setosa\n## 45          5.1         3.8          1.9         0.4  setosa\n## 46          4.8         3.0          1.4         0.3  setosa\n## 47          5.1         3.8          1.6         0.2  setosa\n## 48          4.6         3.2          1.4         0.2  setosa\n## 49          5.3         3.7          1.5         0.2  setosa\n## 50          5.0         3.3          1.4         0.2  setosa\nsubset(iris, Sepal.Length &gt; 7.5)\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n## 106          7.6         3.0          6.6         2.1 virginica\n## 118          7.7         3.8          6.7         2.2 virginica\n## 119          7.7         2.6          6.9         2.3 virginica\n## 123          7.7         2.8          6.7         2.0 virginica\n## 132          7.9         3.8          6.4         2.0 virginica\n## 136          7.7         3.0          6.1         2.3 virginica\nsubset(iris, Sepal.Length &gt; 5.1 &\n           Sepal.Width &gt; 3.9)\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 15          5.8         4.0          1.2         0.2  setosa\n## 16          5.7         4.4          1.5         0.4  setosa\n## 33          5.2         4.1          1.5         0.1  setosa\n## 34          5.5         4.2          1.4         0.2  setosa\nsubset(iris, Sepal.Length &gt; 5.1 |\n           Sepal.Width &gt; 3.9)\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 6            5.4         3.9          1.7         0.4     setosa\n## 11           5.4         3.7          1.5         0.2     setosa\n## 15           5.8         4.0          1.2         0.2     setosa\n## 16           5.7         4.4          1.5         0.4     setosa\n## 17           5.4         3.9          1.3         0.4     setosa\n## 19           5.7         3.8          1.7         0.3     setosa\n## 21           5.4         3.4          1.7         0.2     setosa\n## 28           5.2         3.5          1.5         0.2     setosa\n## 29           5.2         3.4          1.4         0.2     setosa\n## 32           5.4         3.4          1.5         0.4     setosa\n## 33           5.2         4.1          1.5         0.1     setosa\n## 34           5.5         4.2          1.4         0.2     setosa\n## 37           5.5         3.5          1.3         0.2     setosa\n## 49           5.3         3.7          1.5         0.2     setosa\n## 51           7.0         3.2          4.7         1.4 versicolor\n## 52           6.4         3.2          4.5         1.5 versicolor\n## 53           6.9         3.1          4.9         1.5 versicolor\n## 54           5.5         2.3          4.0         1.3 versicolor\n## 55           6.5         2.8          4.6         1.5 versicolor\n## 56           5.7         2.8          4.5         1.3 versicolor\n## 57           6.3         3.3          4.7         1.6 versicolor\n## 59           6.6         2.9          4.6         1.3 versicolor\n## 60           5.2         2.7          3.9         1.4 versicolor\n## 62           5.9         3.0          4.2         1.5 versicolor\n## 63           6.0         2.2          4.0         1.0 versicolor\n## 64           6.1         2.9          4.7         1.4 versicolor\n## 65           5.6         2.9          3.6         1.3 versicolor\n## 66           6.7         3.1          4.4         1.4 versicolor\n## 67           5.6         3.0          4.5         1.5 versicolor\n## 68           5.8         2.7          4.1         1.0 versicolor\n## 69           6.2         2.2          4.5         1.5 versicolor\n## 70           5.6         2.5          3.9         1.1 versicolor\n## 71           5.9         3.2          4.8         1.8 versicolor\n## 72           6.1         2.8          4.0         1.3 versicolor\n## 73           6.3         2.5          4.9         1.5 versicolor\n## 74           6.1         2.8          4.7         1.2 versicolor\n## 75           6.4         2.9          4.3         1.3 versicolor\n## 76           6.6         3.0          4.4         1.4 versicolor\n## 77           6.8         2.8          4.8         1.4 versicolor\n## 78           6.7         3.0          5.0         1.7 versicolor\n## 79           6.0         2.9          4.5         1.5 versicolor\n## 80           5.7         2.6          3.5         1.0 versicolor\n## 81           5.5         2.4          3.8         1.1 versicolor\n## 82           5.5         2.4          3.7         1.0 versicolor\n## 83           5.8         2.7          3.9         1.2 versicolor\n## 84           6.0         2.7          5.1         1.6 versicolor\n## 85           5.4         3.0          4.5         1.5 versicolor\n## 86           6.0         3.4          4.5         1.6 versicolor\n## 87           6.7         3.1          4.7         1.5 versicolor\n## 88           6.3         2.3          4.4         1.3 versicolor\n## 89           5.6         3.0          4.1         1.3 versicolor\n## 90           5.5         2.5          4.0         1.3 versicolor\n## 91           5.5         2.6          4.4         1.2 versicolor\n## 92           6.1         3.0          4.6         1.4 versicolor\n## 93           5.8         2.6          4.0         1.2 versicolor\n## 95           5.6         2.7          4.2         1.3 versicolor\n## 96           5.7         3.0          4.2         1.2 versicolor\n## 97           5.7         2.9          4.2         1.3 versicolor\n## 98           6.2         2.9          4.3         1.3 versicolor\n## 100          5.7         2.8          4.1         1.3 versicolor\n## 101          6.3         3.3          6.0         2.5  virginica\n## 102          5.8         2.7          5.1         1.9  virginica\n## 103          7.1         3.0          5.9         2.1  virginica\n## 104          6.3         2.9          5.6         1.8  virginica\n## 105          6.5         3.0          5.8         2.2  virginica\n## 106          7.6         3.0          6.6         2.1  virginica\n## 108          7.3         2.9          6.3         1.8  virginica\n## 109          6.7         2.5          5.8         1.8  virginica\n## 110          7.2         3.6          6.1         2.5  virginica\n## 111          6.5         3.2          5.1         2.0  virginica\n## 112          6.4         2.7          5.3         1.9  virginica\n## 113          6.8         3.0          5.5         2.1  virginica\n## 114          5.7         2.5          5.0         2.0  virginica\n## 115          5.8         2.8          5.1         2.4  virginica\n## 116          6.4         3.2          5.3         2.3  virginica\n## 117          6.5         3.0          5.5         1.8  virginica\n## 118          7.7         3.8          6.7         2.2  virginica\n## 119          7.7         2.6          6.9         2.3  virginica\n## 120          6.0         2.2          5.0         1.5  virginica\n## 121          6.9         3.2          5.7         2.3  virginica\n## 122          5.6         2.8          4.9         2.0  virginica\n## 123          7.7         2.8          6.7         2.0  virginica\n## 124          6.3         2.7          4.9         1.8  virginica\n## 125          6.7         3.3          5.7         2.1  virginica\n## 126          7.2         3.2          6.0         1.8  virginica\n## 127          6.2         2.8          4.8         1.8  virginica\n## 128          6.1         3.0          4.9         1.8  virginica\n## 129          6.4         2.8          5.6         2.1  virginica\n## 130          7.2         3.0          5.8         1.6  virginica\n## 131          7.4         2.8          6.1         1.9  virginica\n## 132          7.9         3.8          6.4         2.0  virginica\n## 133          6.4         2.8          5.6         2.2  virginica\n## 134          6.3         2.8          5.1         1.5  virginica\n## 135          6.1         2.6          5.6         1.4  virginica\n## 136          7.7         3.0          6.1         2.3  virginica\n## 137          6.3         3.4          5.6         2.4  virginica\n## 138          6.4         3.1          5.5         1.8  virginica\n## 139          6.0         3.0          4.8         1.8  virginica\n## 140          6.9         3.1          5.4         2.1  virginica\n## 141          6.7         3.1          5.6         2.4  virginica\n## 142          6.9         3.1          5.1         2.3  virginica\n## 143          5.8         2.7          5.1         1.9  virginica\n## 144          6.8         3.2          5.9         2.3  virginica\n## 145          6.7         3.3          5.7         2.5  virginica\n## 146          6.7         3.0          5.2         2.3  virginica\n## 147          6.3         2.5          5.0         1.9  virginica\n## 148          6.5         3.0          5.2         2.0  virginica\n## 149          6.2         3.4          5.4         2.3  virginica\n## 150          5.9         3.0          5.1         1.8  virginica\nsubset(iris, Sepal.Length &gt; 7.6,\n       select = c(Petal.Length, Petal.Width))\n##     Petal.Length Petal.Width\n## 118          6.7         2.2\n## 119          6.9         2.3\n## 123          6.7         2.0\n## 132          6.4         2.0\n## 136          6.1         2.3\n\n\nx &lt;- 1:10\nsample(x, size = 5, replace = FALSE) # 비복원추출\n## [1] 9 2 4 6 7\nsample(x, size = 5, replace = TRUE)\n## [1] 10  2  5  1  8\n\nx &lt;- 1:45\nsample(x, size = 6, replace = FALSE)\n## [1] 28 41  3 35  5 42\n\n\nidx &lt;- sample(1:nrow(iris), size = 50,\n              replace = FALSE)\niris.50 &lt;- iris[idx, ]  # 50개의 행 추출\ndim(iris.50)            # 행과 열의 개수 확인\n## [1] 50  5\nhead(iris.50)\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 137          6.3         3.4          5.6         2.4  virginica\n## 56           5.7         2.8          4.5         1.3 versicolor\n## 79           6.0         2.9          4.5         1.5 versicolor\n## 107          4.9         2.5          4.5         1.7  virginica\n## 134          6.3         2.8          5.1         1.5  virginica\n## 136          7.7         3.0          6.1         2.3  virginica\n\n\nsample(1:20, size = 5)\n## [1]  2  1  6 10  5\nsample(1:20, size = 5)\n## [1] 20 17 13 18  4\nsample(1:20, size = 5)\n## [1] 13 17  7 18  3\n\n# 같은 값이 추출되도록 고정시키고 싶다면\n# set.seed() 함수를 이용하여 seed값을 지정해주면 된다.\nset.seed(100)\nsample(1:20, size = 5)\n## [1] 10  6 16 14 12\nset.seed(100)\nsample(1:20, size = 5)\n## [1] 10  6 16 14 12\nset.seed(100)\nsample(1:20, size = 5)\n## [1] 10  6 16 14 12\n\n\ncombn(1:5, 3) # 1~5에서 3개를 뽑는 조합\n##      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n## [1,]    1    1    1    1    1    1    2    2    2     3\n## [2,]    2    2    2    3    3    4    3    3    4     4\n## [3,]    3    4    5    4    5    5    4    5    5     5\n\nx = c(\"red\", \"green\", \"blue\", \"black\", \"white\")\ncom &lt;- combn(x, 2) # x의 원소를 2개씩 뽑는 조합\ncom\n##      [,1]    [,2]   [,3]    [,4]    [,5]    [,6]    [,7]    [,8]    [,9]   \n## [1,] \"red\"   \"red\"  \"red\"   \"red\"   \"green\" \"green\" \"green\" \"blue\"  \"blue\" \n## [2,] \"green\" \"blue\" \"black\" \"white\" \"blue\"  \"black\" \"white\" \"black\" \"white\"\n##      [,10]  \n## [1,] \"black\"\n## [2,] \"white\"\n\nfor (i in 1:ncol(com)) {\n    # 조합을 출력\n    cat(com[, i], \"\\n\")\n}\n## red green \n## red blue \n## red black \n## red white \n## green blue \n## green black \n## green white \n## blue black \n## blue white \n## black white\n\n\n# aggregate(data, by = '기준이 되는 컬럼', FUN)\nagg &lt;- aggregate(iris[, -5], by = list(iris$Species), FUN = mean)\nagg\n##      Group.1 Sepal.Length Sepal.Width Petal.Length Petal.Width\n## 1     setosa        5.006       3.428        1.462       0.246\n## 2 versicolor        5.936       2.770        4.260       1.326\n## 3  virginica        6.588       2.974        5.552       2.026\n\n\n# aggregate는 데이터의 특정 컬럼을 기준으로 통계량을 구해주는 함수\nagg &lt;- aggregate(iris[, -5], by = list(표준편차 = iris$Species), FUN = sd)\nagg\n##     표준편차 Sepal.Length Sepal.Width Petal.Length Petal.Width\n## 1     setosa    0.3524897   0.3790644    0.1736640   0.1053856\n## 2 versicolor    0.5161711   0.3137983    0.4699110   0.1977527\n## 3  virginica    0.6358796   0.3224966    0.5518947   0.2746501\n\n\nhead(mtcars)\n##                    mpg cyl disp  hp drat    wt  qsec vs am gear carb\n## Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n## Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n## Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n## Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n## Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n## Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\nagg &lt;- aggregate(mtcars, by = list(cyl = mtcars$cyl, vs = mtcars$vs), FUN = max)\nagg\n##   cyl vs  mpg cyl  disp  hp drat    wt  qsec vs am gear carb\n## 1   4  0 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\n## 2   6  0 21.0   6 160.0 175 3.90 2.875 17.02  0  1    5    6\n## 3   8  0 19.2   8 472.0 335 4.22 5.424 18.00  0  1    5    8\n## 4   4  1 33.9   4 146.7 113 4.93 3.190 22.90  1  1    5    2\n## 5   6  1 21.4   6 258.0 123 3.92 3.460 20.22  1  0    4    4\n\nagg &lt;- aggregate(mtcars, by = list(cyl = mtcars$cyl, vs = mtcars$vs), FUN = mean)\nagg\n##   cyl vs      mpg cyl   disp       hp     drat       wt     qsec vs        am\n## 1   4  0 26.00000   4 120.30  91.0000 4.430000 2.140000 16.70000  0 1.0000000\n## 2   6  0 20.56667   6 155.00 131.6667 3.806667 2.755000 16.32667  0 1.0000000\n## 3   8  0 15.10000   8 353.10 209.2143 3.229286 3.999214 16.77214  0 0.1428571\n## 4   4  1 26.73000   4 103.62  81.8000 4.035000 2.300300 19.38100  1 0.7000000\n## 5   6  1 19.12500   6 204.55 115.2500 3.420000 3.388750 19.21500  1 0.0000000\n##       gear     carb\n## 1 5.000000 2.000000\n## 2 4.333333 4.666667\n## 3 3.285714 3.500000\n## 4 4.000000 1.500000\n## 5 3.500000 2.500000\n\n\nx &lt;- data.frame(name = c(\"a\", \"b\", \"c\"), math = c(90, 80, 40))\ny &lt;- data.frame(name = c(\"a\", \"b\", \"d\"), korean = c(75, 60, 90))\nx ; y\n##   name math\n## 1    a   90\n## 2    b   80\n## 3    c   40\n##   name korean\n## 1    a     75\n## 2    b     60\n## 3    d     90\n\n\nz &lt;- merge(x, y, by = c(\"name\"))\nz\n##   name math korean\n## 1    a   90     75\n## 2    b   80     60\n\n\nmerge(x, y, all.x = T)  # 첫 번째 데이터셋의 행들은 모두 표시되도록\n##   name math korean\n## 1    a   90     75\n## 2    b   80     60\n## 3    c   40     NA\nmerge(x, y, all.y = T)  # 두 번째 데이터셋의 행들은 모두 표시되도록\n##   name math korean\n## 1    a   90     75\n## 2    b   80     60\n## 3    d   NA     90\nmerge(x, y, all = T)    # 두 데이터셋의 모든 행들이 표시되도록\n##   name math korean\n## 1    a   90     75\n## 2    b   80     60\n## 3    c   40     NA\n## 4    d   NA     90\n\n\nx &lt;- data.frame(name = c(\"a\", \"b\", \"c\"), math = c(90, 80, 40))\ny &lt;- data.frame(sname = c(\"a\", \"b\", \"d\"), korean = c(75, 60, 90))\nx # 병합 기준 열의 이름이 name\n##   name math\n## 1    a   90\n## 2    b   80\n## 3    c   40\ny # 병합 기준 열의 이름이 sname\n##   sname korean\n## 1     a     75\n## 2     b     60\n## 3     d     90\nmerge(x, y, by.x = c(\"name\"), by.y = c(\"sname\"))\n##   name math korean\n## 1    a   90     75\n## 2    b   80     60"
  },
  {
    "objectID": "R_Basic.html#장.-변수와-벡터",
    "href": "R_Basic.html#장.-변수와-벡터",
    "title": "R Basic",
    "section": "",
    "text": "2 + 3  # 2 더하기 3\n## [1] 5\n(3 + 6) * 8\n## [1] 72\n2 ^ 3  # 2의 세제곱\n## [1] 8\n8 %% 3\n## [1] 2\n\n\n7 + 4\n## [1] 11\n\n\nlog(10) + 5 # 로그함수\n## [1] 7.302585\nsqrt(25) # 제곱근\n## [1] 5\nmax(5, 3, 2) # 가장 큰 값\n## [1] 5\n\n\na &lt;- 10\nb &lt;- 20\nc &lt;- a+b\nprint(c)\n## [1] 30\n\n\na &lt;- 125\na\n## [1] 125\nprint(a)\n## [1] 125\n\n\na &lt;- 10 # a에 숫자 저장\nb &lt;- 20\na + b # a+b의 결과 출력\n## [1] 30\na &lt;- \"A\" # a에 문자 저장\na + b # a+b의 결과 출력. 에러 발생\n## Error in a + b: 이항연산자에 수치가 아닌 인수입니다\n\n\nx &lt;- c(1, 2, 3) # 숫자형 벡터\ny &lt;- c(\"a\", \"b\", \"c\") # 문자형 벡터\nz &lt;- c(TRUE, TRUE, FALSE, TRUE) # 논리형 벡터\nx ; y ;z\n## [1] 1 2 3\n## [1] \"a\" \"b\" \"c\"\n## [1]  TRUE  TRUE FALSE  TRUE\n\n\nw &lt;- c(1, 2, 3, \"a\", \"b\", \"c\")\nw\n## [1] \"1\" \"2\" \"3\" \"a\" \"b\" \"c\"\n\n\nv1 &lt;- 50:90\nv1\n##  [1] 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74\n## [26] 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90\nv2 &lt;- c(1, 2, 5, 50:90)\nv2\n##  [1]  1  2  5 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71\n## [26] 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90\n\n\nv3 &lt;- seq(1, 101, 3)\nv3\n##  [1]   1   4   7  10  13  16  19  22  25  28  31  34  37  40  43  46  49  52  55\n## [20]  58  61  64  67  70  73  76  79  82  85  88  91  94  97 100\nv4 &lt;- seq(0.1, 1.0, 0.1)\nv4\n##  [1] 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0\n\n\nv5 &lt;- rep(1, times = 5) # 1을 5번 반복\nv5\n## [1] 1 1 1 1 1\nv6 &lt;- rep(1:5, times = 3) # 1에서 5까지 3번 반복\nv6\n##  [1] 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5\nv7 &lt;- rep(c(1, 5, 9), times = 3) # 1, 5, 9를 3번 반복\nv7\n## [1] 1 5 9 1 5 9 1 5 9\nv8 &lt;- rep(1:5, each = 3) # 1에서 5를 각각 3번 반복\nv8\n##  [1] 1 1 1 2 2 2 3 3 3 4 4 4 5 5 5\n\nrep(1:3, each = 3, times = 3)\n##  [1] 1 1 1 2 2 2 3 3 3 1 1 1 2 2 2 3 3 3 1 1 1 2 2 2 3 3 3\nrep(1:3, times = 3, each = 3)\n##  [1] 1 1 1 2 2 2 3 3 3 1 1 1 2 2 2 3 3 3 1 1 1 2 2 2 3 3 3\n\n\nscore &lt;- c(90, 85, 70) # 성적\nscore\n## [1] 90 85 70\nnames(score) # score에 저장된 값들의 이름을 보이시오\n## NULL\nnames(score) &lt;- c(\"John\", \"Tom\", \"Jane\") # 값들에 이름을 부여\nnames(score) # score에 저장된 값들의 이름을 보이시오\n## [1] \"John\" \"Tom\"  \"Jane\"\nscore # 이름과 함께 값이 출력\n## John  Tom Jane \n##   90   85   70\n\n\nd &lt;- c(1, 4, 3, 7, 8)\nd[1]\n## [1] 1\nd[2]\n## [1] 4\nd[3]\n## [1] 3\nd[4]\n## [1] 7\nd[5]\n## [1] 8\nd[6]\n## [1] NA\nd[c(2, 4)]\n## [1] 4 7\n\n\nd &lt;- c(1, 4, 3, 7, 8)\nd[c(1, 3, 5)] # 1, 3, 5번째 값 출력\n## [1] 1 3 8\nd[1:3] # 처음 세 개의 값 출력\n## [1] 1 4 3\nd[seq(1, 5, 2)] # 홀수 번째 값 출력\n## [1] 1 3 8\nd[-2] # 2번째 값 제외하고 출력\n## [1] 1 3 7 8\nd[-c(3:5)] # 3~5번째 값은 제외하고 출력\n## [1] 1 4\n\n\nGNP &lt;- c(2000, 2450, 960)\nGNP\n## [1] 2000 2450  960\nnames(GNP) &lt;- c(\"Korea\", \"Japan\", \"Nepal\")\nGNP\n## Korea Japan Nepal \n##  2000  2450   960\nGNP[1]\n## Korea \n##  2000\nGNP[\"Korea\"]\n## Korea \n##  2000\nGNP_NEW &lt;- GNP[c(\"Korea\", \"Nepal\")]\nGNP_NEW\n## Korea Nepal \n##  2000   960\n\n\nv1 &lt;- c(1, 5, 7, 8, 9)\nv1\n## [1] 1 5 7 8 9\nv1[2] &lt;- 3 # v1의 2번째 값을 3으로 변경\nv1\n## [1] 1 3 7 8 9\nv1[c(1, 5)] &lt;- c(10, 20) # v1의 1, 5번째 값을 각각 10, 20으로 변경\nv1\n## [1] 10  3  7  8 20\n\n\nd &lt;- c(1, 4, 3, 7, 8)\n2 * d\n## [1]  2  8  6 14 16\nd - 5\n## [1] -4 -1 -2  2  3\n3 * d + 4\n## [1]  7 16 13 25 28\n\n\nx &lt;- c(1, 2, 3)\ny &lt;- c(4, 5, 6)\nx + y # 대응하는 원소끼리 더하여 출력\n## [1] 5 7 9\nx * y # 대응하는 원소끼리 곱하여 출력\n## [1]  4 10 18\nz &lt;- x + y # x, y를 더하여 z에 저장\nz\n## [1] 5 7 9\n\n\nd &lt;- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nsum(d) # d에 포함된 값들의 합\n## [1] 55\nsum(2 * d) # d에 포함된 값들에 2를 곱한 후 합한 값\n## [1] 110\nlength(d) # d에 포함된 값들의 개수\n## [1] 10\nmean(d[1:5]) # 1~5번째 값들의 평균\n## [1] 3\nmax(d) # d에 포함된 값들의 최댓값\n## [1] 10\nmin(d) # d에 포함된 값들의 최솟값\n## [1] 1\nsort(d) # 오름차순 정렬\n##  [1]  1  2  3  4  5  6  7  8  9 10\nsort(d, decreasing = FALSE) # 오름차순 정렬\n##  [1]  1  2  3  4  5  6  7  8  9 10\nsort(d, decreasing = TRUE) # 내림차순 정렬\n##  [1] 10  9  8  7  6  5  4  3  2  1\nsort(d, TRUE) # 내림차순 정렬\n##  [1] 10  9  8  7  6  5  4  3  2  1\n\nv1 &lt;- median(d)\nv1\n## [1] 5.5\nv2 &lt;- sum(d) / length(d)\nv2\n## [1] 5.5\nmean(d)\n## [1] 5.5\n\n\nd &lt;- c(1, 2, 3, 4, 5, 6, 7, 8, 9)\nd &gt;= 5\n## [1] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE\nd[d &gt; 5] # 5보다 큰 값\n## [1] 6 7 8 9\nsum(d &gt; 5) # 5보다 큰 값의 개수를 출력\n## [1] 4\nsum(d[d &gt; 5]) # 5보다 큰 값의 합계를 출력\n## [1] 30\nd == 5\n## [1] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n\ncondi &lt;- d &gt; 5 & d &lt; 8 # 조건을 변수에 저장\nd[condi] # 조건에 맞는 값들을 선택\n## [1] 6 7\nd[d &gt; 5 & d &lt; 8]\n## [1] 6 7\n\n\nds &lt;- c(90, 85, 70, 84)\nmy.info &lt;- list(name = 'Tom', age = 60, status = TRUE, score = ds)\nmy.info # 리스트에 저장된 내용을 모두 출력\n## $name\n## [1] \"Tom\"\n## \n## $age\n## [1] 60\n## \n## $status\n## [1] TRUE\n## \n## $score\n## [1] 90 85 70 84\nmy.info[1] # 이름이랑 내용 다 출력\n## $name\n## [1] \"Tom\"\nmy.info[[1]] # 리스트의 첫 번째 값을 출력\n## [1] \"Tom\"\nmy.info$name # 리스트에서 값의 이름이 name인 값을 출력\n## [1] \"Tom\"\nmy.info[[4]] # 리스트의 네 번째 값을 출력\n## [1] 90 85 70 84\n\n\nbt &lt;- c('A', 'B', 'B', 'O', 'AB', 'A') # 문자형 벡터 bt 정의\nbt.new &lt;- factor(bt) # 팩터 bt.new 정의\nbt # 벡터 bt의 내용 출력\n## [1] \"A\"  \"B\"  \"B\"  \"O\"  \"AB\" \"A\"\nbt.new # 팩터 bt.new의 내용 출력\n## [1] A  B  B  O  AB A \n## Levels: A AB B O\nbt[5] # 벡터 bt의 5번째 값 출력\n## [1] \"AB\"\nbt.new[5] # 팩터 bt.new의 5번째 값 출력\n## [1] AB\n## Levels: A AB B O\nlevels(bt.new) # 팩터에 저장된 값의 종류를 출력\n## [1] \"A\"  \"AB\" \"B\"  \"O\"\nas.integer(bt.new) # 팩터의 문자값을 숫자로 바꾸어 출력\n## [1] 1 3 3 4 2 1\nbt.new[7] &lt;- 'B' # 팩터 bt.new의 7번째에 'B' 저장\nbt.new[8] &lt;- 'C' # 팩터 bt.new의 8번째에 'C' 저장\n## Warning in `[&lt;-.factor`(`*tmp*`, 8, value = \"C\"): 요인의 수준(factor level)이\n## 올바르지 않아 NA가 생성되었습니다.\nbt.new # 팩터 bt.new의 내용 출력\n## [1] A    B    B    O    AB   A    B    &lt;NA&gt;\n## Levels: A AB B O"
  },
  {
    "objectID": "R_Basic.html#장.-매트릭스와-데이터프레임",
    "href": "R_Basic.html#장.-매트릭스와-데이터프레임",
    "title": "R Basic",
    "section": "",
    "text": "z &lt;- matrix(1:20, nrow = 4, ncol = 5)\nz # 매트릭스 z의 내용을 출력\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]    1    5    9   13   17\n## [2,]    2    6   10   14   18\n## [3,]    3    7   11   15   19\n## [4,]    4    8   12   16   20\n\n\nz2 &lt;- matrix(1:20, nrow = 4, ncol = 5, byrow = T)\nz2 # 매트릭스 z2의 내용을 출력\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]    1    2    3    4    5\n## [2,]    6    7    8    9   10\n## [3,]   11   12   13   14   15\n## [4,]   16   17   18   19   20\n\nz &lt;- matrix(1:16, nrow = 4, ncol = 5)\n## Warning in matrix(1:16, nrow = 4, ncol = 5): 데이터의 길이[16]가 열의 개수[5]의\n## 배수가 되지 않습니다\nz\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]    1    5    9   13    1\n## [2,]    2    6   10   14    2\n## [3,]    3    7   11   15    3\n## [4,]    4    8   12   16    4\n\n\nx &lt;- 1:4 # 벡터 x 생성\ny &lt;- 5:8 # 벡터 y 생성\nz &lt;- matrix(1:20, nrow = 4, ncol = 5) # 매트릭스 z 생성\n\nm1 &lt;- cbind(x, y) # x와 y를 열 방향으로 결합하여 매트릭스 생성\nm1 # 매트릭스 m1의 내용을 출력\n##      x y\n## [1,] 1 5\n## [2,] 2 6\n## [3,] 3 7\n## [4,] 4 8\nm2 &lt;- rbind(x, y) # x와 y를 행 방향으로 결합하여 매트릭스 생성\nm2 # 매트릭스 m2의 내용을 출력\n##   [,1] [,2] [,3] [,4]\n## x    1    2    3    4\n## y    5    6    7    8\nm3 &lt;- rbind(m2, x) # m2와 벡터 x를 행 방향으로 결합\nm3 # 매트릭스 m3의 내용을 출력\n##   [,1] [,2] [,3] [,4]\n## x    1    2    3    4\n## y    5    6    7    8\n## x    1    2    3    4\nm4 &lt;- cbind(z, x) # 매트릭스 z와 벡터 x를 열 방향으로 결합\nm4 # 매트릭스 m4의 내용을 출력\n##                   x\n## [1,] 1 5  9 13 17 1\n## [2,] 2 6 10 14 18 2\n## [3,] 3 7 11 15 19 3\n## [4,] 4 8 12 16 20 4\n\nx &lt;- 1:5\nm5 &lt;- cbind(z, x)\n## Warning in cbind(z, x): number of rows of result is not a multiple of vector\n## length (arg 2)\nm5\n##                   x\n## [1,] 1 5  9 13 17 1\n## [2,] 2 6 10 14 18 2\n## [3,] 3 7 11 15 19 3\n## [4,] 4 8 12 16 20 4\n\n\nz &lt;- matrix(1:20, nrow = 4, ncol = 5) # 매트릭스 z 생성\nz # 매트릭스 z의 내용 출력\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]    1    5    9   13   17\n## [2,]    2    6   10   14   18\n## [3,]    3    7   11   15   19\n## [4,]    4    8   12   16   20\n\nz[2, 3] # 2행 3열에 있는 값\n## [1] 10\nz[1, 4] # 1행 4열에 있는 값\n## [1] 13\nz[2, ] # 2행에 있는 모든 값\n## [1]  2  6 10 14 18\nz[, 4] # 4열에 있는 모든 값\n## [1] 13 14 15 16\nz[, ]\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]    1    5    9   13   17\n## [2,]    2    6   10   14   18\n## [3,]    3    7   11   15   19\n## [4,]    4    8   12   16   20\nz\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]    1    5    9   13   17\n## [2,]    2    6   10   14   18\n## [3,]    3    7   11   15   19\n## [4,]    4    8   12   16   20\n\n\nz &lt;- matrix(1:20, nrow = 4, ncol = 5) # 매트릭스 z 생성\nz # 매트릭스 z의 내용 출력\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]    1    5    9   13   17\n## [2,]    2    6   10   14   18\n## [3,]    3    7   11   15   19\n## [4,]    4    8   12   16   20\n\nz[2, 1:3] # 2행의 값 중 1~3열에 있는 값\n## [1]  2  6 10\nz[1, c(1, 2, 4)] # 1행의 값 중 1, 2, 4열에 있는 값\n## [1]  1  5 13\nz[1:2, ] # 1, 2행에 있는 모든 값\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]    1    5    9   13   17\n## [2,]    2    6   10   14   18\nz[, c(1, 4)] # 1, 4열에 있는 모든 값\n##      [,1] [,2]\n## [1,]    1   13\n## [2,]    2   14\n## [3,]    3   15\n## [4,]    4   16\n\n\nscore &lt;- matrix(c(90, 85, 69, 78,\n                  85, 96, 49, 95,\n                  90, 80, 70, 60),\n                nrow = 4,\n                ncol = 3)\nscore\n##      [,1] [,2] [,3]\n## [1,]   90   85   90\n## [2,]   85   96   80\n## [3,]   69   49   70\n## [4,]   78   95   60\nrownames(score) &lt;- c('John', 'Tom', 'Mark', 'Jane')\ncolnames(score) &lt;- c('English', 'Math', 'Science')\nscore\n##      English Math Science\n## John      90   85      90\n## Tom       85   96      80\n## Mark      69   49      70\n## Jane      78   95      60\n\n\nscore['John', 'Math'] # John의 수학 성적\n## [1] 85\nscore['Tom', c('Math', 'Science')] # Tom의 수학, 과학 성적\n##    Math Science \n##      96      80\nscore['Mark', ] # Mark의 모든 과목 성적\n## English    Math Science \n##      69      49      70\nscore[, 'English'] # 모든 학생의 영어 성적\n## John  Tom Mark Jane \n##   90   85   69   78\nrownames(score) # score의 행의 이름\n## [1] \"John\" \"Tom\"  \"Mark\" \"Jane\"\ncolnames(score) # score의 열의 이름\n## [1] \"English\" \"Math\"    \"Science\"\ncolnames(score)[2] # score의 열의 이름 중 두 번째 값\n## [1] \"Math\"\n\n\ncity &lt;- c(\"Seoul\", \"Tokyo\", \"Washington\") # 문자로 이루어진 벡터\nrank &lt;- c(1, 3, 2) # 숫자로 이루어진 벡터\ncity.info &lt;- data.frame(city, rank) # 데이터프레임 생성\ncity.info # city.info의 내용 출력\n##         city rank\n## 1      Seoul    1\n## 2      Tokyo    3\n## 3 Washington    2\n\n\niris\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 1            5.1         3.5          1.4         0.2     setosa\n## 2            4.9         3.0          1.4         0.2     setosa\n## 3            4.7         3.2          1.3         0.2     setosa\n## 4            4.6         3.1          1.5         0.2     setosa\n## 5            5.0         3.6          1.4         0.2     setosa\n## 6            5.4         3.9          1.7         0.4     setosa\n## 7            4.6         3.4          1.4         0.3     setosa\n## 8            5.0         3.4          1.5         0.2     setosa\n## 9            4.4         2.9          1.4         0.2     setosa\n## 10           4.9         3.1          1.5         0.1     setosa\n## 11           5.4         3.7          1.5         0.2     setosa\n## 12           4.8         3.4          1.6         0.2     setosa\n## 13           4.8         3.0          1.4         0.1     setosa\n## 14           4.3         3.0          1.1         0.1     setosa\n## 15           5.8         4.0          1.2         0.2     setosa\n## 16           5.7         4.4          1.5         0.4     setosa\n## 17           5.4         3.9          1.3         0.4     setosa\n## 18           5.1         3.5          1.4         0.3     setosa\n## 19           5.7         3.8          1.7         0.3     setosa\n## 20           5.1         3.8          1.5         0.3     setosa\n## 21           5.4         3.4          1.7         0.2     setosa\n## 22           5.1         3.7          1.5         0.4     setosa\n## 23           4.6         3.6          1.0         0.2     setosa\n## 24           5.1         3.3          1.7         0.5     setosa\n## 25           4.8         3.4          1.9         0.2     setosa\n## 26           5.0         3.0          1.6         0.2     setosa\n## 27           5.0         3.4          1.6         0.4     setosa\n## 28           5.2         3.5          1.5         0.2     setosa\n## 29           5.2         3.4          1.4         0.2     setosa\n## 30           4.7         3.2          1.6         0.2     setosa\n## 31           4.8         3.1          1.6         0.2     setosa\n## 32           5.4         3.4          1.5         0.4     setosa\n## 33           5.2         4.1          1.5         0.1     setosa\n## 34           5.5         4.2          1.4         0.2     setosa\n## 35           4.9         3.1          1.5         0.2     setosa\n## 36           5.0         3.2          1.2         0.2     setosa\n## 37           5.5         3.5          1.3         0.2     setosa\n## 38           4.9         3.6          1.4         0.1     setosa\n## 39           4.4         3.0          1.3         0.2     setosa\n## 40           5.1         3.4          1.5         0.2     setosa\n## 41           5.0         3.5          1.3         0.3     setosa\n## 42           4.5         2.3          1.3         0.3     setosa\n## 43           4.4         3.2          1.3         0.2     setosa\n## 44           5.0         3.5          1.6         0.6     setosa\n## 45           5.1         3.8          1.9         0.4     setosa\n## 46           4.8         3.0          1.4         0.3     setosa\n## 47           5.1         3.8          1.6         0.2     setosa\n## 48           4.6         3.2          1.4         0.2     setosa\n## 49           5.3         3.7          1.5         0.2     setosa\n## 50           5.0         3.3          1.4         0.2     setosa\n## 51           7.0         3.2          4.7         1.4 versicolor\n## 52           6.4         3.2          4.5         1.5 versicolor\n## 53           6.9         3.1          4.9         1.5 versicolor\n## 54           5.5         2.3          4.0         1.3 versicolor\n## 55           6.5         2.8          4.6         1.5 versicolor\n## 56           5.7         2.8          4.5         1.3 versicolor\n## 57           6.3         3.3          4.7         1.6 versicolor\n## 58           4.9         2.4          3.3         1.0 versicolor\n## 59           6.6         2.9          4.6         1.3 versicolor\n## 60           5.2         2.7          3.9         1.4 versicolor\n## 61           5.0         2.0          3.5         1.0 versicolor\n## 62           5.9         3.0          4.2         1.5 versicolor\n## 63           6.0         2.2          4.0         1.0 versicolor\n## 64           6.1         2.9          4.7         1.4 versicolor\n## 65           5.6         2.9          3.6         1.3 versicolor\n## 66           6.7         3.1          4.4         1.4 versicolor\n## 67           5.6         3.0          4.5         1.5 versicolor\n## 68           5.8         2.7          4.1         1.0 versicolor\n## 69           6.2         2.2          4.5         1.5 versicolor\n## 70           5.6         2.5          3.9         1.1 versicolor\n## 71           5.9         3.2          4.8         1.8 versicolor\n## 72           6.1         2.8          4.0         1.3 versicolor\n## 73           6.3         2.5          4.9         1.5 versicolor\n## 74           6.1         2.8          4.7         1.2 versicolor\n## 75           6.4         2.9          4.3         1.3 versicolor\n## 76           6.6         3.0          4.4         1.4 versicolor\n## 77           6.8         2.8          4.8         1.4 versicolor\n## 78           6.7         3.0          5.0         1.7 versicolor\n## 79           6.0         2.9          4.5         1.5 versicolor\n## 80           5.7         2.6          3.5         1.0 versicolor\n## 81           5.5         2.4          3.8         1.1 versicolor\n## 82           5.5         2.4          3.7         1.0 versicolor\n## 83           5.8         2.7          3.9         1.2 versicolor\n## 84           6.0         2.7          5.1         1.6 versicolor\n## 85           5.4         3.0          4.5         1.5 versicolor\n## 86           6.0         3.4          4.5         1.6 versicolor\n## 87           6.7         3.1          4.7         1.5 versicolor\n## 88           6.3         2.3          4.4         1.3 versicolor\n## 89           5.6         3.0          4.1         1.3 versicolor\n## 90           5.5         2.5          4.0         1.3 versicolor\n## 91           5.5         2.6          4.4         1.2 versicolor\n## 92           6.1         3.0          4.6         1.4 versicolor\n## 93           5.8         2.6          4.0         1.2 versicolor\n## 94           5.0         2.3          3.3         1.0 versicolor\n## 95           5.6         2.7          4.2         1.3 versicolor\n## 96           5.7         3.0          4.2         1.2 versicolor\n## 97           5.7         2.9          4.2         1.3 versicolor\n## 98           6.2         2.9          4.3         1.3 versicolor\n## 99           5.1         2.5          3.0         1.1 versicolor\n## 100          5.7         2.8          4.1         1.3 versicolor\n## 101          6.3         3.3          6.0         2.5  virginica\n## 102          5.8         2.7          5.1         1.9  virginica\n## 103          7.1         3.0          5.9         2.1  virginica\n## 104          6.3         2.9          5.6         1.8  virginica\n## 105          6.5         3.0          5.8         2.2  virginica\n## 106          7.6         3.0          6.6         2.1  virginica\n## 107          4.9         2.5          4.5         1.7  virginica\n## 108          7.3         2.9          6.3         1.8  virginica\n## 109          6.7         2.5          5.8         1.8  virginica\n## 110          7.2         3.6          6.1         2.5  virginica\n## 111          6.5         3.2          5.1         2.0  virginica\n## 112          6.4         2.7          5.3         1.9  virginica\n## 113          6.8         3.0          5.5         2.1  virginica\n## 114          5.7         2.5          5.0         2.0  virginica\n## 115          5.8         2.8          5.1         2.4  virginica\n## 116          6.4         3.2          5.3         2.3  virginica\n## 117          6.5         3.0          5.5         1.8  virginica\n## 118          7.7         3.8          6.7         2.2  virginica\n## 119          7.7         2.6          6.9         2.3  virginica\n## 120          6.0         2.2          5.0         1.5  virginica\n## 121          6.9         3.2          5.7         2.3  virginica\n## 122          5.6         2.8          4.9         2.0  virginica\n## 123          7.7         2.8          6.7         2.0  virginica\n## 124          6.3         2.7          4.9         1.8  virginica\n## 125          6.7         3.3          5.7         2.1  virginica\n## 126          7.2         3.2          6.0         1.8  virginica\n## 127          6.2         2.8          4.8         1.8  virginica\n## 128          6.1         3.0          4.9         1.8  virginica\n## 129          6.4         2.8          5.6         2.1  virginica\n## 130          7.2         3.0          5.8         1.6  virginica\n## 131          7.4         2.8          6.1         1.9  virginica\n## 132          7.9         3.8          6.4         2.0  virginica\n## 133          6.4         2.8          5.6         2.2  virginica\n## 134          6.3         2.8          5.1         1.5  virginica\n## 135          6.1         2.6          5.6         1.4  virginica\n## 136          7.7         3.0          6.1         2.3  virginica\n## 137          6.3         3.4          5.6         2.4  virginica\n## 138          6.4         3.1          5.5         1.8  virginica\n## 139          6.0         3.0          4.8         1.8  virginica\n## 140          6.9         3.1          5.4         2.1  virginica\n## 141          6.7         3.1          5.6         2.4  virginica\n## 142          6.9         3.1          5.1         2.3  virginica\n## 143          5.8         2.7          5.1         1.9  virginica\n## 144          6.8         3.2          5.9         2.3  virginica\n## 145          6.7         3.3          5.7         2.5  virginica\n## 146          6.7         3.0          5.2         2.3  virginica\n## 147          6.3         2.5          5.0         1.9  virginica\n## 148          6.5         3.0          5.2         2.0  virginica\n## 149          6.2         3.4          5.4         2.3  virginica\n## 150          5.9         3.0          5.1         1.8  virginica\niris[, c(1:2)] # 1, 2열의 모든 데이터\n##     Sepal.Length Sepal.Width\n## 1            5.1         3.5\n## 2            4.9         3.0\n## 3            4.7         3.2\n## 4            4.6         3.1\n## 5            5.0         3.6\n## 6            5.4         3.9\n## 7            4.6         3.4\n## 8            5.0         3.4\n## 9            4.4         2.9\n## 10           4.9         3.1\n## 11           5.4         3.7\n## 12           4.8         3.4\n## 13           4.8         3.0\n## 14           4.3         3.0\n## 15           5.8         4.0\n## 16           5.7         4.4\n## 17           5.4         3.9\n## 18           5.1         3.5\n## 19           5.7         3.8\n## 20           5.1         3.8\n## 21           5.4         3.4\n## 22           5.1         3.7\n## 23           4.6         3.6\n## 24           5.1         3.3\n## 25           4.8         3.4\n## 26           5.0         3.0\n## 27           5.0         3.4\n## 28           5.2         3.5\n## 29           5.2         3.4\n## 30           4.7         3.2\n## 31           4.8         3.1\n## 32           5.4         3.4\n## 33           5.2         4.1\n## 34           5.5         4.2\n## 35           4.9         3.1\n## 36           5.0         3.2\n## 37           5.5         3.5\n## 38           4.9         3.6\n## 39           4.4         3.0\n## 40           5.1         3.4\n## 41           5.0         3.5\n## 42           4.5         2.3\n## 43           4.4         3.2\n## 44           5.0         3.5\n## 45           5.1         3.8\n## 46           4.8         3.0\n## 47           5.1         3.8\n## 48           4.6         3.2\n## 49           5.3         3.7\n## 50           5.0         3.3\n## 51           7.0         3.2\n## 52           6.4         3.2\n## 53           6.9         3.1\n## 54           5.5         2.3\n## 55           6.5         2.8\n## 56           5.7         2.8\n## 57           6.3         3.3\n## 58           4.9         2.4\n## 59           6.6         2.9\n## 60           5.2         2.7\n## 61           5.0         2.0\n## 62           5.9         3.0\n## 63           6.0         2.2\n## 64           6.1         2.9\n## 65           5.6         2.9\n## 66           6.7         3.1\n## 67           5.6         3.0\n## 68           5.8         2.7\n## 69           6.2         2.2\n## 70           5.6         2.5\n## 71           5.9         3.2\n## 72           6.1         2.8\n## 73           6.3         2.5\n## 74           6.1         2.8\n## 75           6.4         2.9\n## 76           6.6         3.0\n## 77           6.8         2.8\n## 78           6.7         3.0\n## 79           6.0         2.9\n## 80           5.7         2.6\n## 81           5.5         2.4\n## 82           5.5         2.4\n## 83           5.8         2.7\n## 84           6.0         2.7\n## 85           5.4         3.0\n## 86           6.0         3.4\n## 87           6.7         3.1\n## 88           6.3         2.3\n## 89           5.6         3.0\n## 90           5.5         2.5\n## 91           5.5         2.6\n## 92           6.1         3.0\n## 93           5.8         2.6\n## 94           5.0         2.3\n## 95           5.6         2.7\n## 96           5.7         3.0\n## 97           5.7         2.9\n## 98           6.2         2.9\n## 99           5.1         2.5\n## 100          5.7         2.8\n## 101          6.3         3.3\n## 102          5.8         2.7\n## 103          7.1         3.0\n## 104          6.3         2.9\n## 105          6.5         3.0\n## 106          7.6         3.0\n## 107          4.9         2.5\n## 108          7.3         2.9\n## 109          6.7         2.5\n## 110          7.2         3.6\n## 111          6.5         3.2\n## 112          6.4         2.7\n## 113          6.8         3.0\n## 114          5.7         2.5\n## 115          5.8         2.8\n## 116          6.4         3.2\n## 117          6.5         3.0\n## 118          7.7         3.8\n## 119          7.7         2.6\n## 120          6.0         2.2\n## 121          6.9         3.2\n## 122          5.6         2.8\n## 123          7.7         2.8\n## 124          6.3         2.7\n## 125          6.7         3.3\n## 126          7.2         3.2\n## 127          6.2         2.8\n## 128          6.1         3.0\n## 129          6.4         2.8\n## 130          7.2         3.0\n## 131          7.4         2.8\n## 132          7.9         3.8\n## 133          6.4         2.8\n## 134          6.3         2.8\n## 135          6.1         2.6\n## 136          7.7         3.0\n## 137          6.3         3.4\n## 138          6.4         3.1\n## 139          6.0         3.0\n## 140          6.9         3.1\n## 141          6.7         3.1\n## 142          6.9         3.1\n## 143          5.8         2.7\n## 144          6.8         3.2\n## 145          6.7         3.3\n## 146          6.7         3.0\n## 147          6.3         2.5\n## 148          6.5         3.0\n## 149          6.2         3.4\n## 150          5.9         3.0\niris[, c(1, 3, 5)] # 1, 3, 5열의 모든 데이터\n##     Sepal.Length Petal.Length    Species\n## 1            5.1          1.4     setosa\n## 2            4.9          1.4     setosa\n## 3            4.7          1.3     setosa\n## 4            4.6          1.5     setosa\n## 5            5.0          1.4     setosa\n## 6            5.4          1.7     setosa\n## 7            4.6          1.4     setosa\n## 8            5.0          1.5     setosa\n## 9            4.4          1.4     setosa\n## 10           4.9          1.5     setosa\n## 11           5.4          1.5     setosa\n## 12           4.8          1.6     setosa\n## 13           4.8          1.4     setosa\n## 14           4.3          1.1     setosa\n## 15           5.8          1.2     setosa\n## 16           5.7          1.5     setosa\n## 17           5.4          1.3     setosa\n## 18           5.1          1.4     setosa\n## 19           5.7          1.7     setosa\n## 20           5.1          1.5     setosa\n## 21           5.4          1.7     setosa\n## 22           5.1          1.5     setosa\n## 23           4.6          1.0     setosa\n## 24           5.1          1.7     setosa\n## 25           4.8          1.9     setosa\n## 26           5.0          1.6     setosa\n## 27           5.0          1.6     setosa\n## 28           5.2          1.5     setosa\n## 29           5.2          1.4     setosa\n## 30           4.7          1.6     setosa\n## 31           4.8          1.6     setosa\n## 32           5.4          1.5     setosa\n## 33           5.2          1.5     setosa\n## 34           5.5          1.4     setosa\n## 35           4.9          1.5     setosa\n## 36           5.0          1.2     setosa\n## 37           5.5          1.3     setosa\n## 38           4.9          1.4     setosa\n## 39           4.4          1.3     setosa\n## 40           5.1          1.5     setosa\n## 41           5.0          1.3     setosa\n## 42           4.5          1.3     setosa\n## 43           4.4          1.3     setosa\n## 44           5.0          1.6     setosa\n## 45           5.1          1.9     setosa\n## 46           4.8          1.4     setosa\n## 47           5.1          1.6     setosa\n## 48           4.6          1.4     setosa\n## 49           5.3          1.5     setosa\n## 50           5.0          1.4     setosa\n## 51           7.0          4.7 versicolor\n## 52           6.4          4.5 versicolor\n## 53           6.9          4.9 versicolor\n## 54           5.5          4.0 versicolor\n## 55           6.5          4.6 versicolor\n## 56           5.7          4.5 versicolor\n## 57           6.3          4.7 versicolor\n## 58           4.9          3.3 versicolor\n## 59           6.6          4.6 versicolor\n## 60           5.2          3.9 versicolor\n## 61           5.0          3.5 versicolor\n## 62           5.9          4.2 versicolor\n## 63           6.0          4.0 versicolor\n## 64           6.1          4.7 versicolor\n## 65           5.6          3.6 versicolor\n## 66           6.7          4.4 versicolor\n## 67           5.6          4.5 versicolor\n## 68           5.8          4.1 versicolor\n## 69           6.2          4.5 versicolor\n## 70           5.6          3.9 versicolor\n## 71           5.9          4.8 versicolor\n## 72           6.1          4.0 versicolor\n## 73           6.3          4.9 versicolor\n## 74           6.1          4.7 versicolor\n## 75           6.4          4.3 versicolor\n## 76           6.6          4.4 versicolor\n## 77           6.8          4.8 versicolor\n## 78           6.7          5.0 versicolor\n## 79           6.0          4.5 versicolor\n## 80           5.7          3.5 versicolor\n## 81           5.5          3.8 versicolor\n## 82           5.5          3.7 versicolor\n## 83           5.8          3.9 versicolor\n## 84           6.0          5.1 versicolor\n## 85           5.4          4.5 versicolor\n## 86           6.0          4.5 versicolor\n## 87           6.7          4.7 versicolor\n## 88           6.3          4.4 versicolor\n## 89           5.6          4.1 versicolor\n## 90           5.5          4.0 versicolor\n## 91           5.5          4.4 versicolor\n## 92           6.1          4.6 versicolor\n## 93           5.8          4.0 versicolor\n## 94           5.0          3.3 versicolor\n## 95           5.6          4.2 versicolor\n## 96           5.7          4.2 versicolor\n## 97           5.7          4.2 versicolor\n## 98           6.2          4.3 versicolor\n## 99           5.1          3.0 versicolor\n## 100          5.7          4.1 versicolor\n## 101          6.3          6.0  virginica\n## 102          5.8          5.1  virginica\n## 103          7.1          5.9  virginica\n## 104          6.3          5.6  virginica\n## 105          6.5          5.8  virginica\n## 106          7.6          6.6  virginica\n## 107          4.9          4.5  virginica\n## 108          7.3          6.3  virginica\n## 109          6.7          5.8  virginica\n## 110          7.2          6.1  virginica\n## 111          6.5          5.1  virginica\n## 112          6.4          5.3  virginica\n## 113          6.8          5.5  virginica\n## 114          5.7          5.0  virginica\n## 115          5.8          5.1  virginica\n## 116          6.4          5.3  virginica\n## 117          6.5          5.5  virginica\n## 118          7.7          6.7  virginica\n## 119          7.7          6.9  virginica\n## 120          6.0          5.0  virginica\n## 121          6.9          5.7  virginica\n## 122          5.6          4.9  virginica\n## 123          7.7          6.7  virginica\n## 124          6.3          4.9  virginica\n## 125          6.7          5.7  virginica\n## 126          7.2          6.0  virginica\n## 127          6.2          4.8  virginica\n## 128          6.1          4.9  virginica\n## 129          6.4          5.6  virginica\n## 130          7.2          5.8  virginica\n## 131          7.4          6.1  virginica\n## 132          7.9          6.4  virginica\n## 133          6.4          5.6  virginica\n## 134          6.3          5.1  virginica\n## 135          6.1          5.6  virginica\n## 136          7.7          6.1  virginica\n## 137          6.3          5.6  virginica\n## 138          6.4          5.5  virginica\n## 139          6.0          4.8  virginica\n## 140          6.9          5.4  virginica\n## 141          6.7          5.6  virginica\n## 142          6.9          5.1  virginica\n## 143          5.8          5.1  virginica\n## 144          6.8          5.9  virginica\n## 145          6.7          5.7  virginica\n## 146          6.7          5.2  virginica\n## 147          6.3          5.0  virginica\n## 148          6.5          5.2  virginica\n## 149          6.2          5.4  virginica\n## 150          5.9          5.1  virginica\niris[, c(\"Sepal.Length\", \"Species\")] # 1, 5열의 모든 데이터\n##     Sepal.Length    Species\n## 1            5.1     setosa\n## 2            4.9     setosa\n## 3            4.7     setosa\n## 4            4.6     setosa\n## 5            5.0     setosa\n## 6            5.4     setosa\n## 7            4.6     setosa\n## 8            5.0     setosa\n## 9            4.4     setosa\n## 10           4.9     setosa\n## 11           5.4     setosa\n## 12           4.8     setosa\n## 13           4.8     setosa\n## 14           4.3     setosa\n## 15           5.8     setosa\n## 16           5.7     setosa\n## 17           5.4     setosa\n## 18           5.1     setosa\n## 19           5.7     setosa\n## 20           5.1     setosa\n## 21           5.4     setosa\n## 22           5.1     setosa\n## 23           4.6     setosa\n## 24           5.1     setosa\n## 25           4.8     setosa\n## 26           5.0     setosa\n## 27           5.0     setosa\n## 28           5.2     setosa\n## 29           5.2     setosa\n## 30           4.7     setosa\n## 31           4.8     setosa\n## 32           5.4     setosa\n## 33           5.2     setosa\n## 34           5.5     setosa\n## 35           4.9     setosa\n## 36           5.0     setosa\n## 37           5.5     setosa\n## 38           4.9     setosa\n## 39           4.4     setosa\n## 40           5.1     setosa\n## 41           5.0     setosa\n## 42           4.5     setosa\n## 43           4.4     setosa\n## 44           5.0     setosa\n## 45           5.1     setosa\n## 46           4.8     setosa\n## 47           5.1     setosa\n## 48           4.6     setosa\n## 49           5.3     setosa\n## 50           5.0     setosa\n## 51           7.0 versicolor\n## 52           6.4 versicolor\n## 53           6.9 versicolor\n## 54           5.5 versicolor\n## 55           6.5 versicolor\n## 56           5.7 versicolor\n## 57           6.3 versicolor\n## 58           4.9 versicolor\n## 59           6.6 versicolor\n## 60           5.2 versicolor\n## 61           5.0 versicolor\n## 62           5.9 versicolor\n## 63           6.0 versicolor\n## 64           6.1 versicolor\n## 65           5.6 versicolor\n## 66           6.7 versicolor\n## 67           5.6 versicolor\n## 68           5.8 versicolor\n## 69           6.2 versicolor\n## 70           5.6 versicolor\n## 71           5.9 versicolor\n## 72           6.1 versicolor\n## 73           6.3 versicolor\n## 74           6.1 versicolor\n## 75           6.4 versicolor\n## 76           6.6 versicolor\n## 77           6.8 versicolor\n## 78           6.7 versicolor\n## 79           6.0 versicolor\n## 80           5.7 versicolor\n## 81           5.5 versicolor\n## 82           5.5 versicolor\n## 83           5.8 versicolor\n## 84           6.0 versicolor\n## 85           5.4 versicolor\n## 86           6.0 versicolor\n## 87           6.7 versicolor\n## 88           6.3 versicolor\n## 89           5.6 versicolor\n## 90           5.5 versicolor\n## 91           5.5 versicolor\n## 92           6.1 versicolor\n## 93           5.8 versicolor\n## 94           5.0 versicolor\n## 95           5.6 versicolor\n## 96           5.7 versicolor\n## 97           5.7 versicolor\n## 98           6.2 versicolor\n## 99           5.1 versicolor\n## 100          5.7 versicolor\n## 101          6.3  virginica\n## 102          5.8  virginica\n## 103          7.1  virginica\n## 104          6.3  virginica\n## 105          6.5  virginica\n## 106          7.6  virginica\n## 107          4.9  virginica\n## 108          7.3  virginica\n## 109          6.7  virginica\n## 110          7.2  virginica\n## 111          6.5  virginica\n## 112          6.4  virginica\n## 113          6.8  virginica\n## 114          5.7  virginica\n## 115          5.8  virginica\n## 116          6.4  virginica\n## 117          6.5  virginica\n## 118          7.7  virginica\n## 119          7.7  virginica\n## 120          6.0  virginica\n## 121          6.9  virginica\n## 122          5.6  virginica\n## 123          7.7  virginica\n## 124          6.3  virginica\n## 125          6.7  virginica\n## 126          7.2  virginica\n## 127          6.2  virginica\n## 128          6.1  virginica\n## 129          6.4  virginica\n## 130          7.2  virginica\n## 131          7.4  virginica\n## 132          7.9  virginica\n## 133          6.4  virginica\n## 134          6.3  virginica\n## 135          6.1  virginica\n## 136          7.7  virginica\n## 137          6.3  virginica\n## 138          6.4  virginica\n## 139          6.0  virginica\n## 140          6.9  virginica\n## 141          6.7  virginica\n## 142          6.9  virginica\n## 143          5.8  virginica\n## 144          6.8  virginica\n## 145          6.7  virginica\n## 146          6.7  virginica\n## 147          6.3  virginica\n## 148          6.5  virginica\n## 149          6.2  virginica\n## 150          5.9  virginica\niris[1:5, ] # 1~5행의 모든 데이터\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1          5.1         3.5          1.4         0.2  setosa\n## 2          4.9         3.0          1.4         0.2  setosa\n## 3          4.7         3.2          1.3         0.2  setosa\n## 4          4.6         3.1          1.5         0.2  setosa\n## 5          5.0         3.6          1.4         0.2  setosa\niris[1:5, c(1, 3)] # 1~5행의 데이터 중 1, 3열의 데이터\n##   Sepal.Length Petal.Length\n## 1          5.1          1.4\n## 2          4.9          1.4\n## 3          4.7          1.3\n## 4          4.6          1.5\n## 5          5.0          1.4\n\n\ndim(iris) # 행과 열의 개수 출력\n## [1] 150   5\nnrow(iris) # 행의 개수 출력\n## [1] 150\nncol(iris) # 열의 개수 출력\n## [1] 5\ncolnames(iris) # 열 이름 출력, names()와 결과 동일\n## [1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"\nhead(iris) # 데이터셋의 앞부분 일부 출력\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1          5.1         3.5          1.4         0.2  setosa\n## 2          4.9         3.0          1.4         0.2  setosa\n## 3          4.7         3.2          1.3         0.2  setosa\n## 4          4.6         3.1          1.5         0.2  setosa\n## 5          5.0         3.6          1.4         0.2  setosa\n## 6          5.4         3.9          1.7         0.4  setosa\ntail(iris) # 데이터셋의 뒷부분 일부 출력\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n## 145          6.7         3.3          5.7         2.5 virginica\n## 146          6.7         3.0          5.2         2.3 virginica\n## 147          6.3         2.5          5.0         1.9 virginica\n## 148          6.5         3.0          5.2         2.0 virginica\n## 149          6.2         3.4          5.4         2.3 virginica\n## 150          5.9         3.0          5.1         1.8 virginica\n\nhead(iris, 10)\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1           5.1         3.5          1.4         0.2  setosa\n## 2           4.9         3.0          1.4         0.2  setosa\n## 3           4.7         3.2          1.3         0.2  setosa\n## 4           4.6         3.1          1.5         0.2  setosa\n## 5           5.0         3.6          1.4         0.2  setosa\n## 6           5.4         3.9          1.7         0.4  setosa\n## 7           4.6         3.4          1.4         0.3  setosa\n## 8           5.0         3.4          1.5         0.2  setosa\n## 9           4.4         2.9          1.4         0.2  setosa\n## 10          4.9         3.1          1.5         0.1  setosa\ntail(iris, 20)\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n## 131          7.4         2.8          6.1         1.9 virginica\n## 132          7.9         3.8          6.4         2.0 virginica\n## 133          6.4         2.8          5.6         2.2 virginica\n## 134          6.3         2.8          5.1         1.5 virginica\n## 135          6.1         2.6          5.6         1.4 virginica\n## 136          7.7         3.0          6.1         2.3 virginica\n## 137          6.3         3.4          5.6         2.4 virginica\n## 138          6.4         3.1          5.5         1.8 virginica\n## 139          6.0         3.0          4.8         1.8 virginica\n## 140          6.9         3.1          5.4         2.1 virginica\n## 141          6.7         3.1          5.6         2.4 virginica\n## 142          6.9         3.1          5.1         2.3 virginica\n## 143          5.8         2.7          5.1         1.9 virginica\n## 144          6.8         3.2          5.9         2.3 virginica\n## 145          6.7         3.3          5.7         2.5 virginica\n## 146          6.7         3.0          5.2         2.3 virginica\n## 147          6.3         2.5          5.0         1.9 virginica\n## 148          6.5         3.0          5.2         2.0 virginica\n## 149          6.2         3.4          5.4         2.3 virginica\n## 150          5.9         3.0          5.1         1.8 virginica\n\n\nstr(iris) # 데이터셋 요약 정보 보기\n## 'data.frame':    150 obs. of  5 variables:\n##  $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n##  $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n##  $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n##  $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n##  $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\niris[, 5] # 품종 데이터 보기\n##   [1] setosa     setosa     setosa     setosa     setosa     setosa    \n##   [7] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [13] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [19] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [25] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [31] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [37] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [43] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [49] setosa     setosa     versicolor versicolor versicolor versicolor\n##  [55] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [61] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [67] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [73] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [79] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [85] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [91] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [97] versicolor versicolor versicolor versicolor virginica  virginica \n## [103] virginica  virginica  virginica  virginica  virginica  virginica \n## [109] virginica  virginica  virginica  virginica  virginica  virginica \n## [115] virginica  virginica  virginica  virginica  virginica  virginica \n## [121] virginica  virginica  virginica  virginica  virginica  virginica \n## [127] virginica  virginica  virginica  virginica  virginica  virginica \n## [133] virginica  virginica  virginica  virginica  virginica  virginica \n## [139] virginica  virginica  virginica  virginica  virginica  virginica \n## [145] virginica  virginica  virginica  virginica  virginica  virginica \n## Levels: setosa versicolor virginica\nunique(iris[, 5]) # 품종의 종류 보기(중복 제거)\n## [1] setosa     versicolor virginica \n## Levels: setosa versicolor virginica\ntable(iris[, \"Species\"]) # 품종의 종류별 행의 개수 세기\n## \n##     setosa versicolor  virginica \n##         50         50         50\n\n\niris[, -5]\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width\n## 1            5.1         3.5          1.4         0.2\n## 2            4.9         3.0          1.4         0.2\n## 3            4.7         3.2          1.3         0.2\n## 4            4.6         3.1          1.5         0.2\n## 5            5.0         3.6          1.4         0.2\n## 6            5.4         3.9          1.7         0.4\n## 7            4.6         3.4          1.4         0.3\n## 8            5.0         3.4          1.5         0.2\n## 9            4.4         2.9          1.4         0.2\n## 10           4.9         3.1          1.5         0.1\n## 11           5.4         3.7          1.5         0.2\n## 12           4.8         3.4          1.6         0.2\n## 13           4.8         3.0          1.4         0.1\n## 14           4.3         3.0          1.1         0.1\n## 15           5.8         4.0          1.2         0.2\n## 16           5.7         4.4          1.5         0.4\n## 17           5.4         3.9          1.3         0.4\n## 18           5.1         3.5          1.4         0.3\n## 19           5.7         3.8          1.7         0.3\n## 20           5.1         3.8          1.5         0.3\n## 21           5.4         3.4          1.7         0.2\n## 22           5.1         3.7          1.5         0.4\n## 23           4.6         3.6          1.0         0.2\n## 24           5.1         3.3          1.7         0.5\n## 25           4.8         3.4          1.9         0.2\n## 26           5.0         3.0          1.6         0.2\n## 27           5.0         3.4          1.6         0.4\n## 28           5.2         3.5          1.5         0.2\n## 29           5.2         3.4          1.4         0.2\n## 30           4.7         3.2          1.6         0.2\n## 31           4.8         3.1          1.6         0.2\n## 32           5.4         3.4          1.5         0.4\n## 33           5.2         4.1          1.5         0.1\n## 34           5.5         4.2          1.4         0.2\n## 35           4.9         3.1          1.5         0.2\n## 36           5.0         3.2          1.2         0.2\n## 37           5.5         3.5          1.3         0.2\n## 38           4.9         3.6          1.4         0.1\n## 39           4.4         3.0          1.3         0.2\n## 40           5.1         3.4          1.5         0.2\n## 41           5.0         3.5          1.3         0.3\n## 42           4.5         2.3          1.3         0.3\n## 43           4.4         3.2          1.3         0.2\n## 44           5.0         3.5          1.6         0.6\n## 45           5.1         3.8          1.9         0.4\n## 46           4.8         3.0          1.4         0.3\n## 47           5.1         3.8          1.6         0.2\n## 48           4.6         3.2          1.4         0.2\n## 49           5.3         3.7          1.5         0.2\n## 50           5.0         3.3          1.4         0.2\n## 51           7.0         3.2          4.7         1.4\n## 52           6.4         3.2          4.5         1.5\n## 53           6.9         3.1          4.9         1.5\n## 54           5.5         2.3          4.0         1.3\n## 55           6.5         2.8          4.6         1.5\n## 56           5.7         2.8          4.5         1.3\n## 57           6.3         3.3          4.7         1.6\n## 58           4.9         2.4          3.3         1.0\n## 59           6.6         2.9          4.6         1.3\n## 60           5.2         2.7          3.9         1.4\n## 61           5.0         2.0          3.5         1.0\n## 62           5.9         3.0          4.2         1.5\n## 63           6.0         2.2          4.0         1.0\n## 64           6.1         2.9          4.7         1.4\n## 65           5.6         2.9          3.6         1.3\n## 66           6.7         3.1          4.4         1.4\n## 67           5.6         3.0          4.5         1.5\n## 68           5.8         2.7          4.1         1.0\n## 69           6.2         2.2          4.5         1.5\n## 70           5.6         2.5          3.9         1.1\n## 71           5.9         3.2          4.8         1.8\n## 72           6.1         2.8          4.0         1.3\n## 73           6.3         2.5          4.9         1.5\n## 74           6.1         2.8          4.7         1.2\n## 75           6.4         2.9          4.3         1.3\n## 76           6.6         3.0          4.4         1.4\n## 77           6.8         2.8          4.8         1.4\n## 78           6.7         3.0          5.0         1.7\n## 79           6.0         2.9          4.5         1.5\n## 80           5.7         2.6          3.5         1.0\n## 81           5.5         2.4          3.8         1.1\n## 82           5.5         2.4          3.7         1.0\n## 83           5.8         2.7          3.9         1.2\n## 84           6.0         2.7          5.1         1.6\n## 85           5.4         3.0          4.5         1.5\n## 86           6.0         3.4          4.5         1.6\n## 87           6.7         3.1          4.7         1.5\n## 88           6.3         2.3          4.4         1.3\n## 89           5.6         3.0          4.1         1.3\n## 90           5.5         2.5          4.0         1.3\n## 91           5.5         2.6          4.4         1.2\n## 92           6.1         3.0          4.6         1.4\n## 93           5.8         2.6          4.0         1.2\n## 94           5.0         2.3          3.3         1.0\n## 95           5.6         2.7          4.2         1.3\n## 96           5.7         3.0          4.2         1.2\n## 97           5.7         2.9          4.2         1.3\n## 98           6.2         2.9          4.3         1.3\n## 99           5.1         2.5          3.0         1.1\n## 100          5.7         2.8          4.1         1.3\n## 101          6.3         3.3          6.0         2.5\n## 102          5.8         2.7          5.1         1.9\n## 103          7.1         3.0          5.9         2.1\n## 104          6.3         2.9          5.6         1.8\n## 105          6.5         3.0          5.8         2.2\n## 106          7.6         3.0          6.6         2.1\n## 107          4.9         2.5          4.5         1.7\n## 108          7.3         2.9          6.3         1.8\n## 109          6.7         2.5          5.8         1.8\n## 110          7.2         3.6          6.1         2.5\n## 111          6.5         3.2          5.1         2.0\n## 112          6.4         2.7          5.3         1.9\n## 113          6.8         3.0          5.5         2.1\n## 114          5.7         2.5          5.0         2.0\n## 115          5.8         2.8          5.1         2.4\n## 116          6.4         3.2          5.3         2.3\n## 117          6.5         3.0          5.5         1.8\n## 118          7.7         3.8          6.7         2.2\n## 119          7.7         2.6          6.9         2.3\n## 120          6.0         2.2          5.0         1.5\n## 121          6.9         3.2          5.7         2.3\n## 122          5.6         2.8          4.9         2.0\n## 123          7.7         2.8          6.7         2.0\n## 124          6.3         2.7          4.9         1.8\n## 125          6.7         3.3          5.7         2.1\n## 126          7.2         3.2          6.0         1.8\n## 127          6.2         2.8          4.8         1.8\n## 128          6.1         3.0          4.9         1.8\n## 129          6.4         2.8          5.6         2.1\n## 130          7.2         3.0          5.8         1.6\n## 131          7.4         2.8          6.1         1.9\n## 132          7.9         3.8          6.4         2.0\n## 133          6.4         2.8          5.6         2.2\n## 134          6.3         2.8          5.1         1.5\n## 135          6.1         2.6          5.6         1.4\n## 136          7.7         3.0          6.1         2.3\n## 137          6.3         3.4          5.6         2.4\n## 138          6.4         3.1          5.5         1.8\n## 139          6.0         3.0          4.8         1.8\n## 140          6.9         3.1          5.4         2.1\n## 141          6.7         3.1          5.6         2.4\n## 142          6.9         3.1          5.1         2.3\n## 143          5.8         2.7          5.1         1.9\n## 144          6.8         3.2          5.9         2.3\n## 145          6.7         3.3          5.7         2.5\n## 146          6.7         3.0          5.2         2.3\n## 147          6.3         2.5          5.0         1.9\n## 148          6.5         3.0          5.2         2.0\n## 149          6.2         3.4          5.4         2.3\n## 150          5.9         3.0          5.1         1.8\ncolSums(iris[, -5]) # 열별 합계\n## Sepal.Length  Sepal.Width Petal.Length  Petal.Width \n##        876.5        458.6        563.7        179.9\ncolMeans(iris[, -5]) # 열별 평균\n## Sepal.Length  Sepal.Width Petal.Length  Petal.Width \n##     5.843333     3.057333     3.758000     1.199333\nrowSums(iris[, -5]) # 행별 합계\n##   [1] 10.2  9.5  9.4  9.4 10.2 11.4  9.7 10.1  8.9  9.6 10.8 10.0  9.3  8.5 11.2\n##  [16] 12.0 11.0 10.3 11.5 10.7 10.7 10.7  9.4 10.6 10.3  9.8 10.4 10.4 10.2  9.7\n##  [31]  9.7 10.7 10.9 11.3  9.7  9.6 10.5 10.0  8.9 10.2 10.1  8.4  9.1 10.7 11.2\n##  [46]  9.5 10.7  9.4 10.7  9.9 16.3 15.6 16.4 13.1 15.4 14.3 15.9 11.6 15.4 13.2\n##  [61] 11.5 14.6 13.2 15.1 13.4 15.6 14.6 13.6 14.4 13.1 15.7 14.2 15.2 14.8 14.9\n##  [76] 15.4 15.8 16.4 14.9 12.8 12.8 12.6 13.6 15.4 14.4 15.5 16.0 14.3 14.0 13.3\n##  [91] 13.7 15.1 13.6 11.6 13.8 14.1 14.1 14.7 11.7 13.9 18.1 15.5 18.1 16.6 17.5\n## [106] 19.3 13.6 18.3 16.8 19.4 16.8 16.3 17.4 15.2 16.1 17.2 16.8 20.4 19.5 14.7\n## [121] 18.1 15.3 19.2 15.7 17.8 18.2 15.6 15.8 16.9 17.6 18.2 20.1 17.0 15.7 15.7\n## [136] 19.1 17.7 16.8 15.6 17.5 17.8 17.4 15.5 18.2 18.2 17.2 15.7 16.7 17.3 15.8\nrowMeans(iris[, -5]) # 행별 평균\n##   [1] 2.550 2.375 2.350 2.350 2.550 2.850 2.425 2.525 2.225 2.400 2.700 2.500\n##  [13] 2.325 2.125 2.800 3.000 2.750 2.575 2.875 2.675 2.675 2.675 2.350 2.650\n##  [25] 2.575 2.450 2.600 2.600 2.550 2.425 2.425 2.675 2.725 2.825 2.425 2.400\n##  [37] 2.625 2.500 2.225 2.550 2.525 2.100 2.275 2.675 2.800 2.375 2.675 2.350\n##  [49] 2.675 2.475 4.075 3.900 4.100 3.275 3.850 3.575 3.975 2.900 3.850 3.300\n##  [61] 2.875 3.650 3.300 3.775 3.350 3.900 3.650 3.400 3.600 3.275 3.925 3.550\n##  [73] 3.800 3.700 3.725 3.850 3.950 4.100 3.725 3.200 3.200 3.150 3.400 3.850\n##  [85] 3.600 3.875 4.000 3.575 3.500 3.325 3.425 3.775 3.400 2.900 3.450 3.525\n##  [97] 3.525 3.675 2.925 3.475 4.525 3.875 4.525 4.150 4.375 4.825 3.400 4.575\n## [109] 4.200 4.850 4.200 4.075 4.350 3.800 4.025 4.300 4.200 5.100 4.875 3.675\n## [121] 4.525 3.825 4.800 3.925 4.450 4.550 3.900 3.950 4.225 4.400 4.550 5.025\n## [133] 4.250 3.925 3.925 4.775 4.425 4.200 3.900 4.375 4.450 4.350 3.875 4.550\n## [145] 4.550 4.300 3.925 4.175 4.325 3.950\n\n\nz &lt;- matrix(1:20, nrow = 4, ncol = 5)\nz\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]    1    5    9   13   17\n## [2,]    2    6   10   14   18\n## [3,]    3    7   11   15   19\n## [4,]    4    8   12   16   20\nt(z) # 행과열 방향 전환\n##      [,1] [,2] [,3] [,4]\n## [1,]    1    2    3    4\n## [2,]    5    6    7    8\n## [3,]    9   10   11   12\n## [4,]   13   14   15   16\n## [5,]   17   18   19   20\n\n\nIR.1 &lt;- subset(iris, Species == \"setosa\")\nIR.1\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1           5.1         3.5          1.4         0.2  setosa\n## 2           4.9         3.0          1.4         0.2  setosa\n## 3           4.7         3.2          1.3         0.2  setosa\n## 4           4.6         3.1          1.5         0.2  setosa\n## 5           5.0         3.6          1.4         0.2  setosa\n## 6           5.4         3.9          1.7         0.4  setosa\n## 7           4.6         3.4          1.4         0.3  setosa\n## 8           5.0         3.4          1.5         0.2  setosa\n## 9           4.4         2.9          1.4         0.2  setosa\n## 10          4.9         3.1          1.5         0.1  setosa\n## 11          5.4         3.7          1.5         0.2  setosa\n## 12          4.8         3.4          1.6         0.2  setosa\n## 13          4.8         3.0          1.4         0.1  setosa\n## 14          4.3         3.0          1.1         0.1  setosa\n## 15          5.8         4.0          1.2         0.2  setosa\n## 16          5.7         4.4          1.5         0.4  setosa\n## 17          5.4         3.9          1.3         0.4  setosa\n## 18          5.1         3.5          1.4         0.3  setosa\n## 19          5.7         3.8          1.7         0.3  setosa\n## 20          5.1         3.8          1.5         0.3  setosa\n## 21          5.4         3.4          1.7         0.2  setosa\n## 22          5.1         3.7          1.5         0.4  setosa\n## 23          4.6         3.6          1.0         0.2  setosa\n## 24          5.1         3.3          1.7         0.5  setosa\n## 25          4.8         3.4          1.9         0.2  setosa\n## 26          5.0         3.0          1.6         0.2  setosa\n## 27          5.0         3.4          1.6         0.4  setosa\n## 28          5.2         3.5          1.5         0.2  setosa\n## 29          5.2         3.4          1.4         0.2  setosa\n## 30          4.7         3.2          1.6         0.2  setosa\n## 31          4.8         3.1          1.6         0.2  setosa\n## 32          5.4         3.4          1.5         0.4  setosa\n## 33          5.2         4.1          1.5         0.1  setosa\n## 34          5.5         4.2          1.4         0.2  setosa\n## 35          4.9         3.1          1.5         0.2  setosa\n## 36          5.0         3.2          1.2         0.2  setosa\n## 37          5.5         3.5          1.3         0.2  setosa\n## 38          4.9         3.6          1.4         0.1  setosa\n## 39          4.4         3.0          1.3         0.2  setosa\n## 40          5.1         3.4          1.5         0.2  setosa\n## 41          5.0         3.5          1.3         0.3  setosa\n## 42          4.5         2.3          1.3         0.3  setosa\n## 43          4.4         3.2          1.3         0.2  setosa\n## 44          5.0         3.5          1.6         0.6  setosa\n## 45          5.1         3.8          1.9         0.4  setosa\n## 46          4.8         3.0          1.4         0.3  setosa\n## 47          5.1         3.8          1.6         0.2  setosa\n## 48          4.6         3.2          1.4         0.2  setosa\n## 49          5.3         3.7          1.5         0.2  setosa\n## 50          5.0         3.3          1.4         0.2  setosa\n\nIR.2 &lt;- subset(iris, Sepal.Length &gt; 5.0 & Sepal.Width &gt; 4.0)\nIR.2\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 16          5.7         4.4          1.5         0.4  setosa\n## 33          5.2         4.1          1.5         0.1  setosa\n## 34          5.5         4.2          1.4         0.2  setosa\nIR.2[, c(2, 4)] # 2, 4열의 값만 추출\n##    Sepal.Width Petal.Width\n## 16         4.4         0.4\n## 33         4.1         0.1\n## 34         4.2         0.2\n\nIR.3 &lt;- subset(iris, Sepal.Length &gt; 5.0 | Sepal.Width &gt; 4.0)\nIR.3\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 1            5.1         3.5          1.4         0.2     setosa\n## 6            5.4         3.9          1.7         0.4     setosa\n## 11           5.4         3.7          1.5         0.2     setosa\n## 15           5.8         4.0          1.2         0.2     setosa\n## 16           5.7         4.4          1.5         0.4     setosa\n## 17           5.4         3.9          1.3         0.4     setosa\n## 18           5.1         3.5          1.4         0.3     setosa\n## 19           5.7         3.8          1.7         0.3     setosa\n## 20           5.1         3.8          1.5         0.3     setosa\n## 21           5.4         3.4          1.7         0.2     setosa\n## 22           5.1         3.7          1.5         0.4     setosa\n## 24           5.1         3.3          1.7         0.5     setosa\n## 28           5.2         3.5          1.5         0.2     setosa\n## 29           5.2         3.4          1.4         0.2     setosa\n## 32           5.4         3.4          1.5         0.4     setosa\n## 33           5.2         4.1          1.5         0.1     setosa\n## 34           5.5         4.2          1.4         0.2     setosa\n## 37           5.5         3.5          1.3         0.2     setosa\n## 40           5.1         3.4          1.5         0.2     setosa\n## 45           5.1         3.8          1.9         0.4     setosa\n## 47           5.1         3.8          1.6         0.2     setosa\n## 49           5.3         3.7          1.5         0.2     setosa\n## 51           7.0         3.2          4.7         1.4 versicolor\n## 52           6.4         3.2          4.5         1.5 versicolor\n## 53           6.9         3.1          4.9         1.5 versicolor\n## 54           5.5         2.3          4.0         1.3 versicolor\n## 55           6.5         2.8          4.6         1.5 versicolor\n## 56           5.7         2.8          4.5         1.3 versicolor\n## 57           6.3         3.3          4.7         1.6 versicolor\n## 59           6.6         2.9          4.6         1.3 versicolor\n## 60           5.2         2.7          3.9         1.4 versicolor\n## 62           5.9         3.0          4.2         1.5 versicolor\n## 63           6.0         2.2          4.0         1.0 versicolor\n## 64           6.1         2.9          4.7         1.4 versicolor\n## 65           5.6         2.9          3.6         1.3 versicolor\n## 66           6.7         3.1          4.4         1.4 versicolor\n## 67           5.6         3.0          4.5         1.5 versicolor\n## 68           5.8         2.7          4.1         1.0 versicolor\n## 69           6.2         2.2          4.5         1.5 versicolor\n## 70           5.6         2.5          3.9         1.1 versicolor\n## 71           5.9         3.2          4.8         1.8 versicolor\n## 72           6.1         2.8          4.0         1.3 versicolor\n## 73           6.3         2.5          4.9         1.5 versicolor\n## 74           6.1         2.8          4.7         1.2 versicolor\n## 75           6.4         2.9          4.3         1.3 versicolor\n## 76           6.6         3.0          4.4         1.4 versicolor\n## 77           6.8         2.8          4.8         1.4 versicolor\n## 78           6.7         3.0          5.0         1.7 versicolor\n## 79           6.0         2.9          4.5         1.5 versicolor\n## 80           5.7         2.6          3.5         1.0 versicolor\n## 81           5.5         2.4          3.8         1.1 versicolor\n## 82           5.5         2.4          3.7         1.0 versicolor\n## 83           5.8         2.7          3.9         1.2 versicolor\n## 84           6.0         2.7          5.1         1.6 versicolor\n## 85           5.4         3.0          4.5         1.5 versicolor\n## 86           6.0         3.4          4.5         1.6 versicolor\n## 87           6.7         3.1          4.7         1.5 versicolor\n## 88           6.3         2.3          4.4         1.3 versicolor\n## 89           5.6         3.0          4.1         1.3 versicolor\n## 90           5.5         2.5          4.0         1.3 versicolor\n## 91           5.5         2.6          4.4         1.2 versicolor\n## 92           6.1         3.0          4.6         1.4 versicolor\n## 93           5.8         2.6          4.0         1.2 versicolor\n## 95           5.6         2.7          4.2         1.3 versicolor\n## 96           5.7         3.0          4.2         1.2 versicolor\n## 97           5.7         2.9          4.2         1.3 versicolor\n## 98           6.2         2.9          4.3         1.3 versicolor\n## 99           5.1         2.5          3.0         1.1 versicolor\n## 100          5.7         2.8          4.1         1.3 versicolor\n## 101          6.3         3.3          6.0         2.5  virginica\n## 102          5.8         2.7          5.1         1.9  virginica\n## 103          7.1         3.0          5.9         2.1  virginica\n## 104          6.3         2.9          5.6         1.8  virginica\n## 105          6.5         3.0          5.8         2.2  virginica\n## 106          7.6         3.0          6.6         2.1  virginica\n## 108          7.3         2.9          6.3         1.8  virginica\n## 109          6.7         2.5          5.8         1.8  virginica\n## 110          7.2         3.6          6.1         2.5  virginica\n## 111          6.5         3.2          5.1         2.0  virginica\n## 112          6.4         2.7          5.3         1.9  virginica\n## 113          6.8         3.0          5.5         2.1  virginica\n## 114          5.7         2.5          5.0         2.0  virginica\n## 115          5.8         2.8          5.1         2.4  virginica\n## 116          6.4         3.2          5.3         2.3  virginica\n## 117          6.5         3.0          5.5         1.8  virginica\n## 118          7.7         3.8          6.7         2.2  virginica\n## 119          7.7         2.6          6.9         2.3  virginica\n## 120          6.0         2.2          5.0         1.5  virginica\n## 121          6.9         3.2          5.7         2.3  virginica\n## 122          5.6         2.8          4.9         2.0  virginica\n## 123          7.7         2.8          6.7         2.0  virginica\n## 124          6.3         2.7          4.9         1.8  virginica\n## 125          6.7         3.3          5.7         2.1  virginica\n## 126          7.2         3.2          6.0         1.8  virginica\n## 127          6.2         2.8          4.8         1.8  virginica\n## 128          6.1         3.0          4.9         1.8  virginica\n## 129          6.4         2.8          5.6         2.1  virginica\n## 130          7.2         3.0          5.8         1.6  virginica\n## 131          7.4         2.8          6.1         1.9  virginica\n## 132          7.9         3.8          6.4         2.0  virginica\n## 133          6.4         2.8          5.6         2.2  virginica\n## 134          6.3         2.8          5.1         1.5  virginica\n## 135          6.1         2.6          5.6         1.4  virginica\n## 136          7.7         3.0          6.1         2.3  virginica\n## 137          6.3         3.4          5.6         2.4  virginica\n## 138          6.4         3.1          5.5         1.8  virginica\n## 139          6.0         3.0          4.8         1.8  virginica\n## 140          6.9         3.1          5.4         2.1  virginica\n## 141          6.7         3.1          5.6         2.4  virginica\n## 142          6.9         3.1          5.1         2.3  virginica\n## 143          5.8         2.7          5.1         1.9  virginica\n## 144          6.8         3.2          5.9         2.3  virginica\n## 145          6.7         3.3          5.7         2.5  virginica\n## 146          6.7         3.0          5.2         2.3  virginica\n## 147          6.3         2.5          5.0         1.9  virginica\n## 148          6.5         3.0          5.2         2.0  virginica\n## 149          6.2         3.4          5.4         2.3  virginica\n## 150          5.9         3.0          5.1         1.8  virginica\n\n\na &lt;- matrix(1:20, 4, 5)\nb &lt;- matrix(21:40, 4, 5)\na ; b\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]    1    5    9   13   17\n## [2,]    2    6   10   14   18\n## [3,]    3    7   11   15   19\n## [4,]    4    8   12   16   20\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]   21   25   29   33   37\n## [2,]   22   26   30   34   38\n## [3,]   23   27   31   35   39\n## [4,]   24   28   32   36   40\n\n2 * a # 매트릭스 a에 저장된 값들에 2를 곱하기\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]    2   10   18   26   34\n## [2,]    4   12   20   28   36\n## [3,]    6   14   22   30   38\n## [4,]    8   16   24   32   40\nb - 5\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]   16   20   24   28   32\n## [2,]   17   21   25   29   33\n## [3,]   18   22   26   30   34\n## [4,]   19   23   27   31   35\n2 * a + 3 * b\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]   65   85  105  125  145\n## [2,]   70   90  110  130  150\n## [3,]   75   95  115  135  155\n## [4,]   80  100  120  140  160\n\na + b\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]   22   30   38   46   54\n## [2,]   24   32   40   48   56\n## [3,]   26   34   42   50   58\n## [4,]   28   36   44   52   60\nb - a\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]   20   20   20   20   20\n## [2,]   20   20   20   20   20\n## [3,]   20   20   20   20   20\n## [4,]   20   20   20   20   20\nb / a\n##           [,1]     [,2]     [,3]     [,4]     [,5]\n## [1,] 21.000000 5.000000 3.222222 2.538462 2.176471\n## [2,] 11.000000 4.333333 3.000000 2.428571 2.111111\n## [3,]  7.666667 3.857143 2.818182 2.333333 2.052632\n## [4,]  6.000000 3.500000 2.666667 2.250000 2.000000\na * b\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]   21  125  261  429  629\n## [2,]   44  156  300  476  684\n## [3,]   69  189  341  525  741\n## [4,]   96  224  384  576  800\n\na &lt;- a * 3\na\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]    3   15   27   39   51\n## [2,]    6   18   30   42   54\n## [3,]    9   21   33   45   57\n## [4,]   12   24   36   48   60\nb &lt;- b - 5\nb\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]   16   20   24   28   32\n## [2,]   17   21   25   29   33\n## [3,]   18   22   26   30   34\n## [4,]   19   23   27   31   35\n\n\nclass(iris) # iris 데이터셋의 자료구조 확인\n## [1] \"data.frame\"\nclass(state.x77) # state.x77 데이터셋의 자료구조 확인\n## [1] \"matrix\" \"array\"\nis.matrix(iris) # 데이터셋이 매트릭스인지를 확인하는 함수\n## [1] FALSE\nis.data.frame(iris) # 데이터셋이 데이터프레임인지를 확인하는 함수\n## [1] TRUE\nis.matrix(state.x77)\n## [1] TRUE\nis.data.frame(state.x77)\n## [1] FALSE\n\n\n# 매트릭스를 데이터프레임으로 변환\nst &lt;- data.frame(state.x77)\nhead(st)\n##            Population Income Illiteracy Life.Exp Murder HS.Grad Frost   Area\n## Alabama          3615   3624        2.1    69.05   15.1    41.3    20  50708\n## Alaska            365   6315        1.5    69.31   11.3    66.7   152 566432\n## Arizona          2212   4530        1.8    70.55    7.8    58.1    15 113417\n## Arkansas         2110   3378        1.9    70.66   10.1    39.9    65  51945\n## California      21198   5114        1.1    71.71   10.3    62.6    20 156361\n## Colorado         2541   4884        0.7    72.06    6.8    63.9   166 103766\nclass(st)\n## [1] \"data.frame\"\n\n\niris[, \"Species\"] # 결과=벡터. 매트릭스와 데이터프레임 모두 가능\n##   [1] setosa     setosa     setosa     setosa     setosa     setosa    \n##   [7] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [13] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [19] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [25] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [31] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [37] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [43] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [49] setosa     setosa     versicolor versicolor versicolor versicolor\n##  [55] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [61] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [67] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [73] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [79] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [85] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [91] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [97] versicolor versicolor versicolor versicolor virginica  virginica \n## [103] virginica  virginica  virginica  virginica  virginica  virginica \n## [109] virginica  virginica  virginica  virginica  virginica  virginica \n## [115] virginica  virginica  virginica  virginica  virginica  virginica \n## [121] virginica  virginica  virginica  virginica  virginica  virginica \n## [127] virginica  virginica  virginica  virginica  virginica  virginica \n## [133] virginica  virginica  virginica  virginica  virginica  virginica \n## [139] virginica  virginica  virginica  virginica  virginica  virginica \n## [145] virginica  virginica  virginica  virginica  virginica  virginica \n## Levels: setosa versicolor virginica\niris[, 5] # 결과=벡터. 매트릭스와 데이터프레임 모두 가능\n##   [1] setosa     setosa     setosa     setosa     setosa     setosa    \n##   [7] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [13] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [19] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [25] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [31] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [37] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [43] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [49] setosa     setosa     versicolor versicolor versicolor versicolor\n##  [55] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [61] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [67] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [73] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [79] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [85] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [91] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [97] versicolor versicolor versicolor versicolor virginica  virginica \n## [103] virginica  virginica  virginica  virginica  virginica  virginica \n## [109] virginica  virginica  virginica  virginica  virginica  virginica \n## [115] virginica  virginica  virginica  virginica  virginica  virginica \n## [121] virginica  virginica  virginica  virginica  virginica  virginica \n## [127] virginica  virginica  virginica  virginica  virginica  virginica \n## [133] virginica  virginica  virginica  virginica  virginica  virginica \n## [139] virginica  virginica  virginica  virginica  virginica  virginica \n## [145] virginica  virginica  virginica  virginica  virginica  virginica \n## Levels: setosa versicolor virginica\niris[\"Species\"] # 결과=데이터프레임. 데이터프레임만 가능\n##        Species\n## 1       setosa\n## 2       setosa\n## 3       setosa\n## 4       setosa\n## 5       setosa\n## 6       setosa\n## 7       setosa\n## 8       setosa\n## 9       setosa\n## 10      setosa\n## 11      setosa\n## 12      setosa\n## 13      setosa\n## 14      setosa\n## 15      setosa\n## 16      setosa\n## 17      setosa\n## 18      setosa\n## 19      setosa\n## 20      setosa\n## 21      setosa\n## 22      setosa\n## 23      setosa\n## 24      setosa\n## 25      setosa\n## 26      setosa\n## 27      setosa\n## 28      setosa\n## 29      setosa\n## 30      setosa\n## 31      setosa\n## 32      setosa\n## 33      setosa\n## 34      setosa\n## 35      setosa\n## 36      setosa\n## 37      setosa\n## 38      setosa\n## 39      setosa\n## 40      setosa\n## 41      setosa\n## 42      setosa\n## 43      setosa\n## 44      setosa\n## 45      setosa\n## 46      setosa\n## 47      setosa\n## 48      setosa\n## 49      setosa\n## 50      setosa\n## 51  versicolor\n## 52  versicolor\n## 53  versicolor\n## 54  versicolor\n## 55  versicolor\n## 56  versicolor\n## 57  versicolor\n## 58  versicolor\n## 59  versicolor\n## 60  versicolor\n## 61  versicolor\n## 62  versicolor\n## 63  versicolor\n## 64  versicolor\n## 65  versicolor\n## 66  versicolor\n## 67  versicolor\n## 68  versicolor\n## 69  versicolor\n## 70  versicolor\n## 71  versicolor\n## 72  versicolor\n## 73  versicolor\n## 74  versicolor\n## 75  versicolor\n## 76  versicolor\n## 77  versicolor\n## 78  versicolor\n## 79  versicolor\n## 80  versicolor\n## 81  versicolor\n## 82  versicolor\n## 83  versicolor\n## 84  versicolor\n## 85  versicolor\n## 86  versicolor\n## 87  versicolor\n## 88  versicolor\n## 89  versicolor\n## 90  versicolor\n## 91  versicolor\n## 92  versicolor\n## 93  versicolor\n## 94  versicolor\n## 95  versicolor\n## 96  versicolor\n## 97  versicolor\n## 98  versicolor\n## 99  versicolor\n## 100 versicolor\n## 101  virginica\n## 102  virginica\n## 103  virginica\n## 104  virginica\n## 105  virginica\n## 106  virginica\n## 107  virginica\n## 108  virginica\n## 109  virginica\n## 110  virginica\n## 111  virginica\n## 112  virginica\n## 113  virginica\n## 114  virginica\n## 115  virginica\n## 116  virginica\n## 117  virginica\n## 118  virginica\n## 119  virginica\n## 120  virginica\n## 121  virginica\n## 122  virginica\n## 123  virginica\n## 124  virginica\n## 125  virginica\n## 126  virginica\n## 127  virginica\n## 128  virginica\n## 129  virginica\n## 130  virginica\n## 131  virginica\n## 132  virginica\n## 133  virginica\n## 134  virginica\n## 135  virginica\n## 136  virginica\n## 137  virginica\n## 138  virginica\n## 139  virginica\n## 140  virginica\n## 141  virginica\n## 142  virginica\n## 143  virginica\n## 144  virginica\n## 145  virginica\n## 146  virginica\n## 147  virginica\n## 148  virginica\n## 149  virginica\n## 150  virginica\niris[5] # 결과=데이터프레임. 데이터프레임만 가능\n##        Species\n## 1       setosa\n## 2       setosa\n## 3       setosa\n## 4       setosa\n## 5       setosa\n## 6       setosa\n## 7       setosa\n## 8       setosa\n## 9       setosa\n## 10      setosa\n## 11      setosa\n## 12      setosa\n## 13      setosa\n## 14      setosa\n## 15      setosa\n## 16      setosa\n## 17      setosa\n## 18      setosa\n## 19      setosa\n## 20      setosa\n## 21      setosa\n## 22      setosa\n## 23      setosa\n## 24      setosa\n## 25      setosa\n## 26      setosa\n## 27      setosa\n## 28      setosa\n## 29      setosa\n## 30      setosa\n## 31      setosa\n## 32      setosa\n## 33      setosa\n## 34      setosa\n## 35      setosa\n## 36      setosa\n## 37      setosa\n## 38      setosa\n## 39      setosa\n## 40      setosa\n## 41      setosa\n## 42      setosa\n## 43      setosa\n## 44      setosa\n## 45      setosa\n## 46      setosa\n## 47      setosa\n## 48      setosa\n## 49      setosa\n## 50      setosa\n## 51  versicolor\n## 52  versicolor\n## 53  versicolor\n## 54  versicolor\n## 55  versicolor\n## 56  versicolor\n## 57  versicolor\n## 58  versicolor\n## 59  versicolor\n## 60  versicolor\n## 61  versicolor\n## 62  versicolor\n## 63  versicolor\n## 64  versicolor\n## 65  versicolor\n## 66  versicolor\n## 67  versicolor\n## 68  versicolor\n## 69  versicolor\n## 70  versicolor\n## 71  versicolor\n## 72  versicolor\n## 73  versicolor\n## 74  versicolor\n## 75  versicolor\n## 76  versicolor\n## 77  versicolor\n## 78  versicolor\n## 79  versicolor\n## 80  versicolor\n## 81  versicolor\n## 82  versicolor\n## 83  versicolor\n## 84  versicolor\n## 85  versicolor\n## 86  versicolor\n## 87  versicolor\n## 88  versicolor\n## 89  versicolor\n## 90  versicolor\n## 91  versicolor\n## 92  versicolor\n## 93  versicolor\n## 94  versicolor\n## 95  versicolor\n## 96  versicolor\n## 97  versicolor\n## 98  versicolor\n## 99  versicolor\n## 100 versicolor\n## 101  virginica\n## 102  virginica\n## 103  virginica\n## 104  virginica\n## 105  virginica\n## 106  virginica\n## 107  virginica\n## 108  virginica\n## 109  virginica\n## 110  virginica\n## 111  virginica\n## 112  virginica\n## 113  virginica\n## 114  virginica\n## 115  virginica\n## 116  virginica\n## 117  virginica\n## 118  virginica\n## 119  virginica\n## 120  virginica\n## 121  virginica\n## 122  virginica\n## 123  virginica\n## 124  virginica\n## 125  virginica\n## 126  virginica\n## 127  virginica\n## 128  virginica\n## 129  virginica\n## 130  virginica\n## 131  virginica\n## 132  virginica\n## 133  virginica\n## 134  virginica\n## 135  virginica\n## 136  virginica\n## 137  virginica\n## 138  virginica\n## 139  virginica\n## 140  virginica\n## 141  virginica\n## 142  virginica\n## 143  virginica\n## 144  virginica\n## 145  virginica\n## 146  virginica\n## 147  virginica\n## 148  virginica\n## 149  virginica\n## 150  virginica\niris$Species # 결과=벡터. 데이터프레임만 가능\n##   [1] setosa     setosa     setosa     setosa     setosa     setosa    \n##   [7] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [13] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [19] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [25] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [31] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [37] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [43] setosa     setosa     setosa     setosa     setosa     setosa    \n##  [49] setosa     setosa     versicolor versicolor versicolor versicolor\n##  [55] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [61] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [67] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [73] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [79] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [85] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [91] versicolor versicolor versicolor versicolor versicolor versicolor\n##  [97] versicolor versicolor versicolor versicolor virginica  virginica \n## [103] virginica  virginica  virginica  virginica  virginica  virginica \n## [109] virginica  virginica  virginica  virginica  virginica  virginica \n## [115] virginica  virginica  virginica  virginica  virginica  virginica \n## [121] virginica  virginica  virginica  virginica  virginica  virginica \n## [127] virginica  virginica  virginica  virginica  virginica  virginica \n## [133] virginica  virginica  virginica  virginica  virginica  virginica \n## [139] virginica  virginica  virginica  virginica  virginica  virginica \n## [145] virginica  virginica  virginica  virginica  virginica  virginica \n## Levels: setosa versicolor virginica\n\n\ngetwd()\n## [1] \"D:/Study-Blog\"\n# setwd(\"G:/내 드라이브/202202/R_Basic/data\") # 작업 폴더 지정\nair &lt;- read.csv(\"./R_Basic/data/airquality.csv\", header = T) # .csv 파일 읽기\nhead(air)\n##   Ozone Solar.R Wind Temp Month Day\n## 1    41     190  7.4   67     5   1\n## 2    36     118  8.0   72     5   2\n## 3    12     149 12.6   74     5   3\n## 4    18     313 11.5   62     5   4\n## 5    NA      NA 14.3   56     5   5\n## 6    28      NA 14.9   66     5   6\n\n\nmy.iris &lt;- subset(iris, Species = 'Setosa') # Setosa 품종 데이터만 추출\n## Warning: In subset.data.frame(iris, Species = \"Setosa\") :\n##  extra argument 'Species' will be disregarded\nwrite.csv(my.iris, \"./R_Basic/data/my_iris_1.csv\") # .csv 파일에 저장하기"
  },
  {
    "objectID": "R_Basic.html#장.-조건문-반복문-함수",
    "href": "R_Basic.html#장.-조건문-반복문-함수",
    "title": "R Basic",
    "section": "",
    "text": "job.type &lt;- 'A'\nif (job.type == 'B') {\n    bonus &lt;- 200 # 직무 유형이 B일 때 실행\n} else {\n    bonus &lt;- 100 # 직무 유형이 B가 아닌 나머지 경우 실행\n}\nprint(bonus)\n## [1] 100\n\n\njob.type &lt;- 'B'\nbonus &lt;- 100\nif (job.type == 'A') {\n    bonus &lt;- 200 # 직무 유형이 A일 때 실행\n}\nprint(bonus)\n## [1] 100\n\n\nscore &lt;- 85\n\nif (score &gt; 90) {\n    grade &lt;- 'A'\n} else if (score &gt; 80) {\n    grade &lt;- 'B'\n} else if (score &gt; 70) {\n    grade &lt;- 'C'\n} else if (score &gt; 60) {\n    grade &lt;- 'D'\n} else {\n    grade &lt;- 'F'\n}\n\nprint(grade)\n## [1] \"B\"\n\n\na &lt;- 10\nb &lt;- 20\nif (a &gt; 5 & b &gt; 5) {    # and 사용\n    print(a + b)\n}\n## [1] 30\n\nif (a &gt; 5 | b &gt; 30) {   # or 사용\n    print(a * b)\n}\n## [1] 200\n\nif (a &gt; 5 & b &gt; 30) {\n    print(a * b)\n}\n\nif (a &gt; 20 | b &gt; 30) {\n    print(a * b)\n}\n\nif (a &gt; 20 & b &gt; 15) {\n    print(a * b)\n}\n\nr_basic &lt;- 70\npython_basic &lt;- 82\n\nif (r_basic &gt; 80 & python_basic &gt; 80) {\n    grade &lt;- \"Excellent\"\n} else {\n    grade &lt;- \"Good\"\n}\ngrade\n## [1] \"Good\"\n\n\na &lt;- 10\nb &lt;- 20\n\nif (a &gt; b) {\n    c &lt;- a\n} else {\n    c &lt;- b\n}\nprint(c)\n## [1] 20\n\na &lt;- 10\nb &lt;- 20\n\nc &lt;- ifelse(a &gt; b, a, b)\nprint(c)\n## [1] 20\n\n\nfor(i in 1:5) {\n    print('*')\n}\n## [1] \"*\"\n## [1] \"*\"\n## [1] \"*\"\n## [1] \"*\"\n## [1] \"*\"\n\nfor (i in 1:5) {\n    print(i)\n}\n## [1] 1\n## [1] 2\n## [1] 3\n## [1] 4\n## [1] 5\n\nfor (i in 1:5) {\n    a &lt;- i * 2\n    print(a)\n}\n## [1] 2\n## [1] 4\n## [1] 6\n## [1] 8\n## [1] 10\n\nfor (i in 1:10000) {\n    a &lt;- i * 2\n    print(a)\n}\n## [1] 2\n## [1] 4\n## [1] 6\n## [1] 8\n## [1] 10\n## [1] 12\n## [1] 14\n## [1] 16\n## [1] 18\n## [1] 20\n## [1] 22\n## [1] 24\n## [1] 26\n## [1] 28\n## [1] 30\n## [1] 32\n## [1] 34\n## [1] 36\n## [1] 38\n## [1] 40\n## [1] 42\n## [1] 44\n## [1] 46\n## [1] 48\n## [1] 50\n## [1] 52\n## [1] 54\n## [1] 56\n## [1] 58\n## [1] 60\n## [1] 62\n## [1] 64\n## [1] 66\n## [1] 68\n## [1] 70\n## [1] 72\n## [1] 74\n## [1] 76\n## [1] 78\n## [1] 80\n## [1] 82\n## [1] 84\n## [1] 86\n## [1] 88\n## [1] 90\n## [1] 92\n## [1] 94\n## [1] 96\n## [1] 98\n## [1] 100\n## [1] 102\n## [1] 104\n## [1] 106\n## [1] 108\n## [1] 110\n## [1] 112\n## [1] 114\n## [1] 116\n## [1] 118\n## [1] 120\n## [1] 122\n## [1] 124\n## [1] 126\n## [1] 128\n## [1] 130\n## [1] 132\n## [1] 134\n## [1] 136\n## [1] 138\n## [1] 140\n## [1] 142\n## [1] 144\n## [1] 146\n## [1] 148\n## [1] 150\n## [1] 152\n## [1] 154\n## [1] 156\n## [1] 158\n## [1] 160\n## [1] 162\n## [1] 164\n## [1] 166\n## [1] 168\n## [1] 170\n## [1] 172\n## [1] 174\n## [1] 176\n## [1] 178\n## [1] 180\n## [1] 182\n## [1] 184\n## [1] 186\n## [1] 188\n## [1] 190\n## [1] 192\n## [1] 194\n## [1] 196\n## [1] 198\n## [1] 200\n## [1] 202\n## [1] 204\n## [1] 206\n## [1] 208\n## [1] 210\n## [1] 212\n## [1] 214\n## [1] 216\n## [1] 218\n## [1] 220\n## [1] 222\n## [1] 224\n## [1] 226\n## [1] 228\n## [1] 230\n## [1] 232\n## [1] 234\n## [1] 236\n## [1] 238\n## [1] 240\n## [1] 242\n## [1] 244\n## [1] 246\n## [1] 248\n## [1] 250\n## [1] 252\n## [1] 254\n## [1] 256\n## [1] 258\n## [1] 260\n## [1] 262\n## [1] 264\n## [1] 266\n## [1] 268\n## [1] 270\n## [1] 272\n## [1] 274\n## [1] 276\n## [1] 278\n## [1] 280\n## [1] 282\n## [1] 284\n## [1] 286\n## [1] 288\n## [1] 290\n## [1] 292\n## [1] 294\n## [1] 296\n## [1] 298\n## [1] 300\n## [1] 302\n## [1] 304\n## [1] 306\n## [1] 308\n## [1] 310\n## [1] 312\n## [1] 314\n## [1] 316\n## [1] 318\n## [1] 320\n## [1] 322\n## [1] 324\n## [1] 326\n## [1] 328\n## [1] 330\n## [1] 332\n## [1] 334\n## [1] 336\n## [1] 338\n## [1] 340\n## [1] 342\n## [1] 344\n## [1] 346\n## [1] 348\n## [1] 350\n## [1] 352\n## [1] 354\n## [1] 356\n## [1] 358\n## [1] 360\n## [1] 362\n## [1] 364\n## [1] 366\n## [1] 368\n## [1] 370\n## [1] 372\n## [1] 374\n## [1] 376\n## [1] 378\n## [1] 380\n## [1] 382\n## [1] 384\n## [1] 386\n## [1] 388\n## [1] 390\n## [1] 392\n## [1] 394\n## [1] 396\n## [1] 398\n## [1] 400\n## [1] 402\n## [1] 404\n## [1] 406\n## [1] 408\n## [1] 410\n## [1] 412\n## [1] 414\n## [1] 416\n## [1] 418\n## [1] 420\n## [1] 422\n## [1] 424\n## [1] 426\n## [1] 428\n## [1] 430\n## [1] 432\n## [1] 434\n## [1] 436\n## [1] 438\n## [1] 440\n## [1] 442\n## [1] 444\n## [1] 446\n## [1] 448\n## [1] 450\n## [1] 452\n## [1] 454\n## [1] 456\n## [1] 458\n## [1] 460\n## [1] 462\n## [1] 464\n## [1] 466\n## [1] 468\n## [1] 470\n## [1] 472\n## [1] 474\n## [1] 476\n## [1] 478\n## [1] 480\n## [1] 482\n## [1] 484\n## [1] 486\n## [1] 488\n## [1] 490\n## [1] 492\n## [1] 494\n## [1] 496\n## [1] 498\n## [1] 500\n## [1] 502\n## [1] 504\n## [1] 506\n## [1] 508\n## [1] 510\n## [1] 512\n## [1] 514\n## [1] 516\n## [1] 518\n## [1] 520\n## [1] 522\n## [1] 524\n## [1] 526\n## [1] 528\n## [1] 530\n## [1] 532\n## [1] 534\n## [1] 536\n## [1] 538\n## [1] 540\n## [1] 542\n## [1] 544\n## [1] 546\n## [1] 548\n## [1] 550\n## [1] 552\n## [1] 554\n## [1] 556\n## [1] 558\n## [1] 560\n## [1] 562\n## [1] 564\n## [1] 566\n## [1] 568\n## [1] 570\n## [1] 572\n## [1] 574\n## [1] 576\n## [1] 578\n## [1] 580\n## [1] 582\n## [1] 584\n## [1] 586\n## [1] 588\n## [1] 590\n## [1] 592\n## [1] 594\n## [1] 596\n## [1] 598\n## [1] 600\n## [1] 602\n## [1] 604\n## [1] 606\n## [1] 608\n## [1] 610\n## [1] 612\n## [1] 614\n## [1] 616\n## [1] 618\n## [1] 620\n## [1] 622\n## [1] 624\n## [1] 626\n## [1] 628\n## [1] 630\n## [1] 632\n## [1] 634\n## [1] 636\n## [1] 638\n## [1] 640\n## [1] 642\n## [1] 644\n## [1] 646\n## [1] 648\n## [1] 650\n## [1] 652\n## [1] 654\n## [1] 656\n## [1] 658\n## [1] 660\n## [1] 662\n## [1] 664\n## [1] 666\n## [1] 668\n## [1] 670\n## [1] 672\n## [1] 674\n## [1] 676\n## [1] 678\n## [1] 680\n## [1] 682\n## [1] 684\n## [1] 686\n## [1] 688\n## [1] 690\n## [1] 692\n## [1] 694\n## [1] 696\n## [1] 698\n## [1] 700\n## [1] 702\n## [1] 704\n## [1] 706\n## [1] 708\n## [1] 710\n## [1] 712\n## [1] 714\n## [1] 716\n## [1] 718\n## [1] 720\n## [1] 722\n## [1] 724\n## [1] 726\n## [1] 728\n## [1] 730\n## [1] 732\n## [1] 734\n## [1] 736\n## [1] 738\n## [1] 740\n## [1] 742\n## [1] 744\n## [1] 746\n## [1] 748\n## [1] 750\n## [1] 752\n## [1] 754\n## [1] 756\n## [1] 758\n## [1] 760\n## [1] 762\n## [1] 764\n## [1] 766\n## [1] 768\n## [1] 770\n## [1] 772\n## [1] 774\n## [1] 776\n## [1] 778\n## [1] 780\n## [1] 782\n## [1] 784\n## [1] 786\n## [1] 788\n## [1] 790\n## [1] 792\n## [1] 794\n## [1] 796\n## [1] 798\n## [1] 800\n## [1] 802\n## [1] 804\n## [1] 806\n## [1] 808\n## [1] 810\n## [1] 812\n## [1] 814\n## [1] 816\n## [1] 818\n## [1] 820\n## [1] 822\n## [1] 824\n## [1] 826\n## [1] 828\n## [1] 830\n## [1] 832\n## [1] 834\n## [1] 836\n## [1] 838\n## [1] 840\n## [1] 842\n## [1] 844\n## [1] 846\n## [1] 848\n## [1] 850\n## [1] 852\n## [1] 854\n## [1] 856\n## [1] 858\n## [1] 860\n## [1] 862\n## [1] 864\n## [1] 866\n## [1] 868\n## [1] 870\n## [1] 872\n## [1] 874\n## [1] 876\n## [1] 878\n## [1] 880\n## [1] 882\n## [1] 884\n## [1] 886\n## [1] 888\n## [1] 890\n## [1] 892\n## [1] 894\n## [1] 896\n## [1] 898\n## [1] 900\n## [1] 902\n## [1] 904\n## [1] 906\n## [1] 908\n## [1] 910\n## [1] 912\n## [1] 914\n## [1] 916\n## [1] 918\n## [1] 920\n## [1] 922\n## [1] 924\n## [1] 926\n## [1] 928\n## [1] 930\n## [1] 932\n## [1] 934\n## [1] 936\n## [1] 938\n## [1] 940\n## [1] 942\n## [1] 944\n## [1] 946\n## [1] 948\n## [1] 950\n## [1] 952\n## [1] 954\n## [1] 956\n## [1] 958\n## [1] 960\n## [1] 962\n## [1] 964\n## [1] 966\n## [1] 968\n## [1] 970\n## [1] 972\n## [1] 974\n## [1] 976\n## [1] 978\n## [1] 980\n## [1] 982\n## [1] 984\n## [1] 986\n## [1] 988\n## [1] 990\n## [1] 992\n## [1] 994\n## [1] 996\n## [1] 998\n## [1] 1000\n## [1] 1002\n## [1] 1004\n## [1] 1006\n## [1] 1008\n## [1] 1010\n## [1] 1012\n## [1] 1014\n## [1] 1016\n## [1] 1018\n## [1] 1020\n## [1] 1022\n## [1] 1024\n## [1] 1026\n## [1] 1028\n## [1] 1030\n## [1] 1032\n## [1] 1034\n## [1] 1036\n## [1] 1038\n## [1] 1040\n## [1] 1042\n## [1] 1044\n## [1] 1046\n## [1] 1048\n## [1] 1050\n## [1] 1052\n## [1] 1054\n## [1] 1056\n## [1] 1058\n## [1] 1060\n## [1] 1062\n## [1] 1064\n## [1] 1066\n## [1] 1068\n## [1] 1070\n## [1] 1072\n## [1] 1074\n## [1] 1076\n## [1] 1078\n## [1] 1080\n## [1] 1082\n## [1] 1084\n## [1] 1086\n## [1] 1088\n## [1] 1090\n## [1] 1092\n## [1] 1094\n## [1] 1096\n## [1] 1098\n## [1] 1100\n## [1] 1102\n## [1] 1104\n## [1] 1106\n## [1] 1108\n## [1] 1110\n## [1] 1112\n## [1] 1114\n## [1] 1116\n## [1] 1118\n## [1] 1120\n## [1] 1122\n## [1] 1124\n## [1] 1126\n## [1] 1128\n## [1] 1130\n## [1] 1132\n## [1] 1134\n## [1] 1136\n## [1] 1138\n## [1] 1140\n## [1] 1142\n## [1] 1144\n## [1] 1146\n## [1] 1148\n## [1] 1150\n## [1] 1152\n## [1] 1154\n## [1] 1156\n## [1] 1158\n## [1] 1160\n## [1] 1162\n## [1] 1164\n## [1] 1166\n## [1] 1168\n## [1] 1170\n## [1] 1172\n## [1] 1174\n## [1] 1176\n## [1] 1178\n## [1] 1180\n## [1] 1182\n## [1] 1184\n## [1] 1186\n## [1] 1188\n## [1] 1190\n## [1] 1192\n## [1] 1194\n## [1] 1196\n## [1] 1198\n## [1] 1200\n## [1] 1202\n## [1] 1204\n## [1] 1206\n## [1] 1208\n## [1] 1210\n## [1] 1212\n## [1] 1214\n## [1] 1216\n## [1] 1218\n## [1] 1220\n## [1] 1222\n## [1] 1224\n## [1] 1226\n## [1] 1228\n## [1] 1230\n## [1] 1232\n## [1] 1234\n## [1] 1236\n## [1] 1238\n## [1] 1240\n## [1] 1242\n## [1] 1244\n## [1] 1246\n## [1] 1248\n## [1] 1250\n## [1] 1252\n## [1] 1254\n## [1] 1256\n## [1] 1258\n## [1] 1260\n## [1] 1262\n## [1] 1264\n## [1] 1266\n## [1] 1268\n## [1] 1270\n## [1] 1272\n## [1] 1274\n## [1] 1276\n## [1] 1278\n## [1] 1280\n## [1] 1282\n## [1] 1284\n## [1] 1286\n## [1] 1288\n## [1] 1290\n## [1] 1292\n## [1] 1294\n## [1] 1296\n## [1] 1298\n## [1] 1300\n## [1] 1302\n## [1] 1304\n## [1] 1306\n## [1] 1308\n## [1] 1310\n## [1] 1312\n## [1] 1314\n## [1] 1316\n## [1] 1318\n## [1] 1320\n## [1] 1322\n## [1] 1324\n## [1] 1326\n## [1] 1328\n## [1] 1330\n## [1] 1332\n## [1] 1334\n## [1] 1336\n## [1] 1338\n## [1] 1340\n## [1] 1342\n## [1] 1344\n## [1] 1346\n## [1] 1348\n## [1] 1350\n## [1] 1352\n## [1] 1354\n## [1] 1356\n## [1] 1358\n## [1] 1360\n## [1] 1362\n## [1] 1364\n## [1] 1366\n## [1] 1368\n## [1] 1370\n## [1] 1372\n## [1] 1374\n## [1] 1376\n## [1] 1378\n## [1] 1380\n## [1] 1382\n## [1] 1384\n## [1] 1386\n## [1] 1388\n## [1] 1390\n## [1] 1392\n## [1] 1394\n## [1] 1396\n## [1] 1398\n## [1] 1400\n## [1] 1402\n## [1] 1404\n## [1] 1406\n## [1] 1408\n## [1] 1410\n## [1] 1412\n## [1] 1414\n## [1] 1416\n## [1] 1418\n## [1] 1420\n## [1] 1422\n## [1] 1424\n## [1] 1426\n## [1] 1428\n## [1] 1430\n## [1] 1432\n## [1] 1434\n## [1] 1436\n## [1] 1438\n## [1] 1440\n## [1] 1442\n## [1] 1444\n## [1] 1446\n## [1] 1448\n## [1] 1450\n## [1] 1452\n## [1] 1454\n## [1] 1456\n## [1] 1458\n## [1] 1460\n## [1] 1462\n## [1] 1464\n## [1] 1466\n## [1] 1468\n## [1] 1470\n## [1] 1472\n## [1] 1474\n## [1] 1476\n## [1] 1478\n## [1] 1480\n## [1] 1482\n## [1] 1484\n## [1] 1486\n## [1] 1488\n## [1] 1490\n## [1] 1492\n## [1] 1494\n## [1] 1496\n## [1] 1498\n## [1] 1500\n## [1] 1502\n## [1] 1504\n## [1] 1506\n## [1] 1508\n## [1] 1510\n## [1] 1512\n## [1] 1514\n## [1] 1516\n## [1] 1518\n## [1] 1520\n## [1] 1522\n## [1] 1524\n## [1] 1526\n## [1] 1528\n## [1] 1530\n## [1] 1532\n## [1] 1534\n## [1] 1536\n## [1] 1538\n## [1] 1540\n## [1] 1542\n## [1] 1544\n## [1] 1546\n## [1] 1548\n## [1] 1550\n## [1] 1552\n## [1] 1554\n## [1] 1556\n## [1] 1558\n## [1] 1560\n## [1] 1562\n## [1] 1564\n## [1] 1566\n## [1] 1568\n## [1] 1570\n## [1] 1572\n## [1] 1574\n## [1] 1576\n## [1] 1578\n## [1] 1580\n## [1] 1582\n## [1] 1584\n## [1] 1586\n## [1] 1588\n## [1] 1590\n## [1] 1592\n## [1] 1594\n## [1] 1596\n## [1] 1598\n## [1] 1600\n## [1] 1602\n## [1] 1604\n## [1] 1606\n## [1] 1608\n## [1] 1610\n## [1] 1612\n## [1] 1614\n## [1] 1616\n## [1] 1618\n## [1] 1620\n## [1] 1622\n## [1] 1624\n## [1] 1626\n## [1] 1628\n## [1] 1630\n## [1] 1632\n## [1] 1634\n## [1] 1636\n## [1] 1638\n## [1] 1640\n## [1] 1642\n## [1] 1644\n## [1] 1646\n## [1] 1648\n## [1] 1650\n## [1] 1652\n## [1] 1654\n## [1] 1656\n## [1] 1658\n## [1] 1660\n## [1] 1662\n## [1] 1664\n## [1] 1666\n## [1] 1668\n## [1] 1670\n## [1] 1672\n## [1] 1674\n## [1] 1676\n## [1] 1678\n## [1] 1680\n## [1] 1682\n## [1] 1684\n## [1] 1686\n## [1] 1688\n## [1] 1690\n## [1] 1692\n## [1] 1694\n## [1] 1696\n## [1] 1698\n## [1] 1700\n## [1] 1702\n## [1] 1704\n## [1] 1706\n## [1] 1708\n## [1] 1710\n## [1] 1712\n## [1] 1714\n## [1] 1716\n## [1] 1718\n## [1] 1720\n## [1] 1722\n## [1] 1724\n## [1] 1726\n## [1] 1728\n## [1] 1730\n## [1] 1732\n## [1] 1734\n## [1] 1736\n## [1] 1738\n## [1] 1740\n## [1] 1742\n## [1] 1744\n## [1] 1746\n## [1] 1748\n## [1] 1750\n## [1] 1752\n## [1] 1754\n## [1] 1756\n## [1] 1758\n## [1] 1760\n## [1] 1762\n## [1] 1764\n## [1] 1766\n## [1] 1768\n## [1] 1770\n## [1] 1772\n## [1] 1774\n## [1] 1776\n## [1] 1778\n## [1] 1780\n## [1] 1782\n## [1] 1784\n## [1] 1786\n## [1] 1788\n## [1] 1790\n## [1] 1792\n## [1] 1794\n## [1] 1796\n## [1] 1798\n## [1] 1800\n## [1] 1802\n## [1] 1804\n## [1] 1806\n## [1] 1808\n## [1] 1810\n## [1] 1812\n## [1] 1814\n## [1] 1816\n## [1] 1818\n## [1] 1820\n## [1] 1822\n## [1] 1824\n## [1] 1826\n## [1] 1828\n## [1] 1830\n## [1] 1832\n## [1] 1834\n## [1] 1836\n## [1] 1838\n## [1] 1840\n## [1] 1842\n## [1] 1844\n## [1] 1846\n## [1] 1848\n## [1] 1850\n## [1] 1852\n## [1] 1854\n## [1] 1856\n## [1] 1858\n## [1] 1860\n## [1] 1862\n## [1] 1864\n## [1] 1866\n## [1] 1868\n## [1] 1870\n## [1] 1872\n## [1] 1874\n## [1] 1876\n## [1] 1878\n## [1] 1880\n## [1] 1882\n## [1] 1884\n## [1] 1886\n## [1] 1888\n## [1] 1890\n## [1] 1892\n## [1] 1894\n## [1] 1896\n## [1] 1898\n## [1] 1900\n## [1] 1902\n## [1] 1904\n## [1] 1906\n## [1] 1908\n## [1] 1910\n## [1] 1912\n## [1] 1914\n## [1] 1916\n## [1] 1918\n## [1] 1920\n## [1] 1922\n## [1] 1924\n## [1] 1926\n## [1] 1928\n## [1] 1930\n## [1] 1932\n## [1] 1934\n## [1] 1936\n## [1] 1938\n## [1] 1940\n## [1] 1942\n## [1] 1944\n## [1] 1946\n## [1] 1948\n## [1] 1950\n## [1] 1952\n## [1] 1954\n## [1] 1956\n## [1] 1958\n## [1] 1960\n## [1] 1962\n## [1] 1964\n## [1] 1966\n## [1] 1968\n## [1] 1970\n## [1] 1972\n## [1] 1974\n## [1] 1976\n## [1] 1978\n## [1] 1980\n## [1] 1982\n## [1] 1984\n## [1] 1986\n## [1] 1988\n## [1] 1990\n## [1] 1992\n## [1] 1994\n## [1] 1996\n## [1] 1998\n## [1] 2000\n## [1] 2002\n## [1] 2004\n## [1] 2006\n## [1] 2008\n## [1] 2010\n## [1] 2012\n## [1] 2014\n## [1] 2016\n## [1] 2018\n## [1] 2020\n## [1] 2022\n## [1] 2024\n## [1] 2026\n## [1] 2028\n## [1] 2030\n## [1] 2032\n## [1] 2034\n## [1] 2036\n## [1] 2038\n## [1] 2040\n## [1] 2042\n## [1] 2044\n## [1] 2046\n## [1] 2048\n## [1] 2050\n## [1] 2052\n## [1] 2054\n## [1] 2056\n## [1] 2058\n## [1] 2060\n## [1] 2062\n## [1] 2064\n## [1] 2066\n## [1] 2068\n## [1] 2070\n## [1] 2072\n## [1] 2074\n## [1] 2076\n## [1] 2078\n## [1] 2080\n## [1] 2082\n## [1] 2084\n## [1] 2086\n## [1] 2088\n## [1] 2090\n## [1] 2092\n## [1] 2094\n## [1] 2096\n## [1] 2098\n## [1] 2100\n## [1] 2102\n## [1] 2104\n## [1] 2106\n## [1] 2108\n## [1] 2110\n## [1] 2112\n## [1] 2114\n## [1] 2116\n## [1] 2118\n## [1] 2120\n## [1] 2122\n## [1] 2124\n## [1] 2126\n## [1] 2128\n## [1] 2130\n## [1] 2132\n## [1] 2134\n## [1] 2136\n## [1] 2138\n## [1] 2140\n## [1] 2142\n## [1] 2144\n## [1] 2146\n## [1] 2148\n## [1] 2150\n## [1] 2152\n## [1] 2154\n## [1] 2156\n## [1] 2158\n## [1] 2160\n## [1] 2162\n## [1] 2164\n## [1] 2166\n## [1] 2168\n## [1] 2170\n## [1] 2172\n## [1] 2174\n## [1] 2176\n## [1] 2178\n## [1] 2180\n## [1] 2182\n## [1] 2184\n## [1] 2186\n## [1] 2188\n## [1] 2190\n## [1] 2192\n## [1] 2194\n## [1] 2196\n## [1] 2198\n## [1] 2200\n## [1] 2202\n## [1] 2204\n## [1] 2206\n## [1] 2208\n## [1] 2210\n## [1] 2212\n## [1] 2214\n## [1] 2216\n## [1] 2218\n## [1] 2220\n## [1] 2222\n## [1] 2224\n## [1] 2226\n## [1] 2228\n## [1] 2230\n## [1] 2232\n## [1] 2234\n## [1] 2236\n## [1] 2238\n## [1] 2240\n## [1] 2242\n## [1] 2244\n## [1] 2246\n## [1] 2248\n## [1] 2250\n## [1] 2252\n## [1] 2254\n## [1] 2256\n## [1] 2258\n## [1] 2260\n## [1] 2262\n## [1] 2264\n## [1] 2266\n## [1] 2268\n## [1] 2270\n## [1] 2272\n## [1] 2274\n## [1] 2276\n## [1] 2278\n## [1] 2280\n## [1] 2282\n## [1] 2284\n## [1] 2286\n## [1] 2288\n## [1] 2290\n## [1] 2292\n## [1] 2294\n## [1] 2296\n## [1] 2298\n## [1] 2300\n## [1] 2302\n## [1] 2304\n## [1] 2306\n## [1] 2308\n## [1] 2310\n## [1] 2312\n## [1] 2314\n## [1] 2316\n## [1] 2318\n## [1] 2320\n## [1] 2322\n## [1] 2324\n## [1] 2326\n## [1] 2328\n## [1] 2330\n## [1] 2332\n## [1] 2334\n## [1] 2336\n## [1] 2338\n## [1] 2340\n## [1] 2342\n## [1] 2344\n## [1] 2346\n## [1] 2348\n## [1] 2350\n## [1] 2352\n## [1] 2354\n## [1] 2356\n## [1] 2358\n## [1] 2360\n## [1] 2362\n## [1] 2364\n## [1] 2366\n## [1] 2368\n## [1] 2370\n## [1] 2372\n## [1] 2374\n## [1] 2376\n## [1] 2378\n## [1] 2380\n## [1] 2382\n## [1] 2384\n## [1] 2386\n## [1] 2388\n## [1] 2390\n## [1] 2392\n## [1] 2394\n## [1] 2396\n## [1] 2398\n## [1] 2400\n## [1] 2402\n## [1] 2404\n## [1] 2406\n## [1] 2408\n## [1] 2410\n## [1] 2412\n## [1] 2414\n## [1] 2416\n## [1] 2418\n## [1] 2420\n## [1] 2422\n## [1] 2424\n## [1] 2426\n## [1] 2428\n## [1] 2430\n## [1] 2432\n## [1] 2434\n## [1] 2436\n## [1] 2438\n## [1] 2440\n## [1] 2442\n## [1] 2444\n## [1] 2446\n## [1] 2448\n## [1] 2450\n## [1] 2452\n## [1] 2454\n## [1] 2456\n## [1] 2458\n## [1] 2460\n## [1] 2462\n## [1] 2464\n## [1] 2466\n## [1] 2468\n## [1] 2470\n## [1] 2472\n## [1] 2474\n## [1] 2476\n## [1] 2478\n## [1] 2480\n## [1] 2482\n## [1] 2484\n## [1] 2486\n## [1] 2488\n## [1] 2490\n## [1] 2492\n## [1] 2494\n## [1] 2496\n## [1] 2498\n## [1] 2500\n## [1] 2502\n## [1] 2504\n## [1] 2506\n## [1] 2508\n## [1] 2510\n## [1] 2512\n## [1] 2514\n## [1] 2516\n## [1] 2518\n## [1] 2520\n## [1] 2522\n## [1] 2524\n## [1] 2526\n## [1] 2528\n## [1] 2530\n## [1] 2532\n## [1] 2534\n## [1] 2536\n## [1] 2538\n## [1] 2540\n## [1] 2542\n## [1] 2544\n## [1] 2546\n## [1] 2548\n## [1] 2550\n## [1] 2552\n## [1] 2554\n## [1] 2556\n## [1] 2558\n## [1] 2560\n## [1] 2562\n## [1] 2564\n## [1] 2566\n## [1] 2568\n## [1] 2570\n## [1] 2572\n## [1] 2574\n## [1] 2576\n## [1] 2578\n## [1] 2580\n## [1] 2582\n## [1] 2584\n## [1] 2586\n## [1] 2588\n## [1] 2590\n## [1] 2592\n## [1] 2594\n## [1] 2596\n## [1] 2598\n## [1] 2600\n## [1] 2602\n## [1] 2604\n## [1] 2606\n## [1] 2608\n## [1] 2610\n## [1] 2612\n## [1] 2614\n## [1] 2616\n## [1] 2618\n## [1] 2620\n## [1] 2622\n## [1] 2624\n## [1] 2626\n## [1] 2628\n## [1] 2630\n## [1] 2632\n## [1] 2634\n## [1] 2636\n## [1] 2638\n## [1] 2640\n## [1] 2642\n## [1] 2644\n## [1] 2646\n## [1] 2648\n## [1] 2650\n## [1] 2652\n## [1] 2654\n## [1] 2656\n## [1] 2658\n## [1] 2660\n## [1] 2662\n## [1] 2664\n## [1] 2666\n## [1] 2668\n## [1] 2670\n## [1] 2672\n## [1] 2674\n## [1] 2676\n## [1] 2678\n## [1] 2680\n## [1] 2682\n## [1] 2684\n## [1] 2686\n## [1] 2688\n## [1] 2690\n## [1] 2692\n## [1] 2694\n## [1] 2696\n## [1] 2698\n## [1] 2700\n## [1] 2702\n## [1] 2704\n## [1] 2706\n## [1] 2708\n## [1] 2710\n## [1] 2712\n## [1] 2714\n## [1] 2716\n## [1] 2718\n## [1] 2720\n## [1] 2722\n## [1] 2724\n## [1] 2726\n## [1] 2728\n## [1] 2730\n## [1] 2732\n## [1] 2734\n## [1] 2736\n## [1] 2738\n## [1] 2740\n## [1] 2742\n## [1] 2744\n## [1] 2746\n## [1] 2748\n## [1] 2750\n## [1] 2752\n## [1] 2754\n## [1] 2756\n## [1] 2758\n## [1] 2760\n## [1] 2762\n## [1] 2764\n## [1] 2766\n## [1] 2768\n## [1] 2770\n## [1] 2772\n## [1] 2774\n## [1] 2776\n## [1] 2778\n## [1] 2780\n## [1] 2782\n## [1] 2784\n## [1] 2786\n## [1] 2788\n## [1] 2790\n## [1] 2792\n## [1] 2794\n## [1] 2796\n## [1] 2798\n## [1] 2800\n## [1] 2802\n## [1] 2804\n## [1] 2806\n## [1] 2808\n## [1] 2810\n## [1] 2812\n## [1] 2814\n## [1] 2816\n## [1] 2818\n## [1] 2820\n## [1] 2822\n## [1] 2824\n## [1] 2826\n## [1] 2828\n## [1] 2830\n## [1] 2832\n## [1] 2834\n## [1] 2836\n## [1] 2838\n## [1] 2840\n## [1] 2842\n## [1] 2844\n## [1] 2846\n## [1] 2848\n## [1] 2850\n## [1] 2852\n## [1] 2854\n## [1] 2856\n## [1] 2858\n## [1] 2860\n## [1] 2862\n## [1] 2864\n## [1] 2866\n## [1] 2868\n## [1] 2870\n## [1] 2872\n## [1] 2874\n## [1] 2876\n## [1] 2878\n## [1] 2880\n## [1] 2882\n## [1] 2884\n## [1] 2886\n## [1] 2888\n## [1] 2890\n## [1] 2892\n## [1] 2894\n## [1] 2896\n## [1] 2898\n## [1] 2900\n## [1] 2902\n## [1] 2904\n## [1] 2906\n## [1] 2908\n## [1] 2910\n## [1] 2912\n## [1] 2914\n## [1] 2916\n## [1] 2918\n## [1] 2920\n## [1] 2922\n## [1] 2924\n## [1] 2926\n## [1] 2928\n## [1] 2930\n## [1] 2932\n## [1] 2934\n## [1] 2936\n## [1] 2938\n## [1] 2940\n## [1] 2942\n## [1] 2944\n## [1] 2946\n## [1] 2948\n## [1] 2950\n## [1] 2952\n## [1] 2954\n## [1] 2956\n## [1] 2958\n## [1] 2960\n## [1] 2962\n## [1] 2964\n## [1] 2966\n## [1] 2968\n## [1] 2970\n## [1] 2972\n## [1] 2974\n## [1] 2976\n## [1] 2978\n## [1] 2980\n## [1] 2982\n## [1] 2984\n## [1] 2986\n## [1] 2988\n## [1] 2990\n## [1] 2992\n## [1] 2994\n## [1] 2996\n## [1] 2998\n## [1] 3000\n## [1] 3002\n## [1] 3004\n## [1] 3006\n## [1] 3008\n## [1] 3010\n## [1] 3012\n## [1] 3014\n## [1] 3016\n## [1] 3018\n## [1] 3020\n## [1] 3022\n## [1] 3024\n## [1] 3026\n## [1] 3028\n## [1] 3030\n## [1] 3032\n## [1] 3034\n## [1] 3036\n## [1] 3038\n## [1] 3040\n## [1] 3042\n## [1] 3044\n## [1] 3046\n## [1] 3048\n## [1] 3050\n## [1] 3052\n## [1] 3054\n## [1] 3056\n## [1] 3058\n## [1] 3060\n## [1] 3062\n## [1] 3064\n## [1] 3066\n## [1] 3068\n## [1] 3070\n## [1] 3072\n## [1] 3074\n## [1] 3076\n## [1] 3078\n## [1] 3080\n## [1] 3082\n## [1] 3084\n## [1] 3086\n## [1] 3088\n## [1] 3090\n## [1] 3092\n## [1] 3094\n## [1] 3096\n## [1] 3098\n## [1] 3100\n## [1] 3102\n## [1] 3104\n## [1] 3106\n## [1] 3108\n## [1] 3110\n## [1] 3112\n## [1] 3114\n## [1] 3116\n## [1] 3118\n## [1] 3120\n## [1] 3122\n## [1] 3124\n## [1] 3126\n## [1] 3128\n## [1] 3130\n## [1] 3132\n## [1] 3134\n## [1] 3136\n## [1] 3138\n## [1] 3140\n## [1] 3142\n## [1] 3144\n## [1] 3146\n## [1] 3148\n## [1] 3150\n## [1] 3152\n## [1] 3154\n## [1] 3156\n## [1] 3158\n## [1] 3160\n## [1] 3162\n## [1] 3164\n## [1] 3166\n## [1] 3168\n## [1] 3170\n## [1] 3172\n## [1] 3174\n## [1] 3176\n## [1] 3178\n## [1] 3180\n## [1] 3182\n## [1] 3184\n## [1] 3186\n## [1] 3188\n## [1] 3190\n## [1] 3192\n## [1] 3194\n## [1] 3196\n## [1] 3198\n## [1] 3200\n## [1] 3202\n## [1] 3204\n## [1] 3206\n## [1] 3208\n## [1] 3210\n## [1] 3212\n## [1] 3214\n## [1] 3216\n## [1] 3218\n## [1] 3220\n## [1] 3222\n## [1] 3224\n## [1] 3226\n## [1] 3228\n## [1] 3230\n## [1] 3232\n## [1] 3234\n## [1] 3236\n## [1] 3238\n## [1] 3240\n## [1] 3242\n## [1] 3244\n## [1] 3246\n## [1] 3248\n## [1] 3250\n## [1] 3252\n## [1] 3254\n## [1] 3256\n## [1] 3258\n## [1] 3260\n## [1] 3262\n## [1] 3264\n## [1] 3266\n## [1] 3268\n## [1] 3270\n## [1] 3272\n## [1] 3274\n## [1] 3276\n## [1] 3278\n## [1] 3280\n## [1] 3282\n## [1] 3284\n## [1] 3286\n## [1] 3288\n## [1] 3290\n## [1] 3292\n## [1] 3294\n## [1] 3296\n## [1] 3298\n## [1] 3300\n## [1] 3302\n## [1] 3304\n## [1] 3306\n## [1] 3308\n## [1] 3310\n## [1] 3312\n## [1] 3314\n## [1] 3316\n## [1] 3318\n## [1] 3320\n## [1] 3322\n## [1] 3324\n## [1] 3326\n## [1] 3328\n## [1] 3330\n## [1] 3332\n## [1] 3334\n## [1] 3336\n## [1] 3338\n## [1] 3340\n## [1] 3342\n## [1] 3344\n## [1] 3346\n## [1] 3348\n## [1] 3350\n## [1] 3352\n## [1] 3354\n## [1] 3356\n## [1] 3358\n## [1] 3360\n## [1] 3362\n## [1] 3364\n## [1] 3366\n## [1] 3368\n## [1] 3370\n## [1] 3372\n## [1] 3374\n## [1] 3376\n## [1] 3378\n## [1] 3380\n## [1] 3382\n## [1] 3384\n## [1] 3386\n## [1] 3388\n## [1] 3390\n## [1] 3392\n## [1] 3394\n## [1] 3396\n## [1] 3398\n## [1] 3400\n## [1] 3402\n## [1] 3404\n## [1] 3406\n## [1] 3408\n## [1] 3410\n## [1] 3412\n## [1] 3414\n## [1] 3416\n## [1] 3418\n## [1] 3420\n## [1] 3422\n## [1] 3424\n## [1] 3426\n## [1] 3428\n## [1] 3430\n## [1] 3432\n## [1] 3434\n## [1] 3436\n## [1] 3438\n## [1] 3440\n## [1] 3442\n## [1] 3444\n## [1] 3446\n## [1] 3448\n## [1] 3450\n## [1] 3452\n## [1] 3454\n## [1] 3456\n## [1] 3458\n## [1] 3460\n## [1] 3462\n## [1] 3464\n## [1] 3466\n## [1] 3468\n## [1] 3470\n## [1] 3472\n## [1] 3474\n## [1] 3476\n## [1] 3478\n## [1] 3480\n## [1] 3482\n## [1] 3484\n## [1] 3486\n## [1] 3488\n## [1] 3490\n## [1] 3492\n## [1] 3494\n## [1] 3496\n## [1] 3498\n## [1] 3500\n## [1] 3502\n## [1] 3504\n## [1] 3506\n## [1] 3508\n## [1] 3510\n## [1] 3512\n## [1] 3514\n## [1] 3516\n## [1] 3518\n## [1] 3520\n## [1] 3522\n## [1] 3524\n## [1] 3526\n## [1] 3528\n## [1] 3530\n## [1] 3532\n## [1] 3534\n## [1] 3536\n## [1] 3538\n## [1] 3540\n## [1] 3542\n## [1] 3544\n## [1] 3546\n## [1] 3548\n## [1] 3550\n## [1] 3552\n## [1] 3554\n## [1] 3556\n## [1] 3558\n## [1] 3560\n## [1] 3562\n## [1] 3564\n## [1] 3566\n## [1] 3568\n## [1] 3570\n## [1] 3572\n## [1] 3574\n## [1] 3576\n## [1] 3578\n## [1] 3580\n## [1] 3582\n## [1] 3584\n## [1] 3586\n## [1] 3588\n## [1] 3590\n## [1] 3592\n## [1] 3594\n## [1] 3596\n## [1] 3598\n## [1] 3600\n## [1] 3602\n## [1] 3604\n## [1] 3606\n## [1] 3608\n## [1] 3610\n## [1] 3612\n## [1] 3614\n## [1] 3616\n## [1] 3618\n## [1] 3620\n## [1] 3622\n## [1] 3624\n## [1] 3626\n## [1] 3628\n## [1] 3630\n## [1] 3632\n## [1] 3634\n## [1] 3636\n## [1] 3638\n## [1] 3640\n## [1] 3642\n## [1] 3644\n## [1] 3646\n## [1] 3648\n## [1] 3650\n## [1] 3652\n## [1] 3654\n## [1] 3656\n## [1] 3658\n## [1] 3660\n## [1] 3662\n## [1] 3664\n## [1] 3666\n## [1] 3668\n## [1] 3670\n## [1] 3672\n## [1] 3674\n## [1] 3676\n## [1] 3678\n## [1] 3680\n## [1] 3682\n## [1] 3684\n## [1] 3686\n## [1] 3688\n## [1] 3690\n## [1] 3692\n## [1] 3694\n## [1] 3696\n## [1] 3698\n## [1] 3700\n## [1] 3702\n## [1] 3704\n## [1] 3706\n## [1] 3708\n## [1] 3710\n## [1] 3712\n## [1] 3714\n## [1] 3716\n## [1] 3718\n## [1] 3720\n## [1] 3722\n## [1] 3724\n## [1] 3726\n## [1] 3728\n## [1] 3730\n## [1] 3732\n## [1] 3734\n## [1] 3736\n## [1] 3738\n## [1] 3740\n## [1] 3742\n## [1] 3744\n## [1] 3746\n## [1] 3748\n## [1] 3750\n## [1] 3752\n## [1] 3754\n## [1] 3756\n## [1] 3758\n## [1] 3760\n## [1] 3762\n## [1] 3764\n## [1] 3766\n## [1] 3768\n## [1] 3770\n## [1] 3772\n## [1] 3774\n## [1] 3776\n## [1] 3778\n## [1] 3780\n## [1] 3782\n## [1] 3784\n## [1] 3786\n## [1] 3788\n## [1] 3790\n## [1] 3792\n## [1] 3794\n## [1] 3796\n## [1] 3798\n## [1] 3800\n## [1] 3802\n## [1] 3804\n## [1] 3806\n## [1] 3808\n## [1] 3810\n## [1] 3812\n## [1] 3814\n## [1] 3816\n## [1] 3818\n## [1] 3820\n## [1] 3822\n## [1] 3824\n## [1] 3826\n## [1] 3828\n## [1] 3830\n## [1] 3832\n## [1] 3834\n## [1] 3836\n## [1] 3838\n## [1] 3840\n## [1] 3842\n## [1] 3844\n## [1] 3846\n## [1] 3848\n## [1] 3850\n## [1] 3852\n## [1] 3854\n## [1] 3856\n## [1] 3858\n## [1] 3860\n## [1] 3862\n## [1] 3864\n## [1] 3866\n## [1] 3868\n## [1] 3870\n## [1] 3872\n## [1] 3874\n## [1] 3876\n## [1] 3878\n## [1] 3880\n## [1] 3882\n## [1] 3884\n## [1] 3886\n## [1] 3888\n## [1] 3890\n## [1] 3892\n## [1] 3894\n## [1] 3896\n## [1] 3898\n## [1] 3900\n## [1] 3902\n## [1] 3904\n## [1] 3906\n## [1] 3908\n## [1] 3910\n## [1] 3912\n## [1] 3914\n## [1] 3916\n## [1] 3918\n## [1] 3920\n## [1] 3922\n## [1] 3924\n## [1] 3926\n## [1] 3928\n## [1] 3930\n## [1] 3932\n## [1] 3934\n## [1] 3936\n## [1] 3938\n## [1] 3940\n## [1] 3942\n## [1] 3944\n## [1] 3946\n## [1] 3948\n## [1] 3950\n## [1] 3952\n## [1] 3954\n## [1] 3956\n## [1] 3958\n## [1] 3960\n## [1] 3962\n## [1] 3964\n## [1] 3966\n## [1] 3968\n## [1] 3970\n## [1] 3972\n## [1] 3974\n## [1] 3976\n## [1] 3978\n## [1] 3980\n## [1] 3982\n## [1] 3984\n## [1] 3986\n## [1] 3988\n## [1] 3990\n## [1] 3992\n## [1] 3994\n## [1] 3996\n## [1] 3998\n## [1] 4000\n## [1] 4002\n## [1] 4004\n## [1] 4006\n## [1] 4008\n## [1] 4010\n## [1] 4012\n## [1] 4014\n## [1] 4016\n## [1] 4018\n## [1] 4020\n## [1] 4022\n## [1] 4024\n## [1] 4026\n## [1] 4028\n## [1] 4030\n## [1] 4032\n## [1] 4034\n## [1] 4036\n## [1] 4038\n## [1] 4040\n## [1] 4042\n## [1] 4044\n## [1] 4046\n## [1] 4048\n## [1] 4050\n## [1] 4052\n## [1] 4054\n## [1] 4056\n## [1] 4058\n## [1] 4060\n## [1] 4062\n## [1] 4064\n## [1] 4066\n## [1] 4068\n## [1] 4070\n## [1] 4072\n## [1] 4074\n## [1] 4076\n## [1] 4078\n## [1] 4080\n## [1] 4082\n## [1] 4084\n## [1] 4086\n## [1] 4088\n## [1] 4090\n## [1] 4092\n## [1] 4094\n## [1] 4096\n## [1] 4098\n## [1] 4100\n## [1] 4102\n## [1] 4104\n## [1] 4106\n## [1] 4108\n## [1] 4110\n## [1] 4112\n## [1] 4114\n## [1] 4116\n## [1] 4118\n## [1] 4120\n## [1] 4122\n## [1] 4124\n## [1] 4126\n## [1] 4128\n## [1] 4130\n## [1] 4132\n## [1] 4134\n## [1] 4136\n## [1] 4138\n## [1] 4140\n## [1] 4142\n## [1] 4144\n## [1] 4146\n## [1] 4148\n## [1] 4150\n## [1] 4152\n## [1] 4154\n## [1] 4156\n## [1] 4158\n## [1] 4160\n## [1] 4162\n## [1] 4164\n## [1] 4166\n## [1] 4168\n## [1] 4170\n## [1] 4172\n## [1] 4174\n## [1] 4176\n## [1] 4178\n## [1] 4180\n## [1] 4182\n## [1] 4184\n## [1] 4186\n## [1] 4188\n## [1] 4190\n## [1] 4192\n## [1] 4194\n## [1] 4196\n## [1] 4198\n## [1] 4200\n## [1] 4202\n## [1] 4204\n## [1] 4206\n## [1] 4208\n## [1] 4210\n## [1] 4212\n## [1] 4214\n## [1] 4216\n## [1] 4218\n## [1] 4220\n## [1] 4222\n## [1] 4224\n## [1] 4226\n## [1] 4228\n## [1] 4230\n## [1] 4232\n## [1] 4234\n## [1] 4236\n## [1] 4238\n## [1] 4240\n## [1] 4242\n## [1] 4244\n## [1] 4246\n## [1] 4248\n## [1] 4250\n## [1] 4252\n## [1] 4254\n## [1] 4256\n## [1] 4258\n## [1] 4260\n## [1] 4262\n## [1] 4264\n## [1] 4266\n## [1] 4268\n## [1] 4270\n## [1] 4272\n## [1] 4274\n## [1] 4276\n## [1] 4278\n## [1] 4280\n## [1] 4282\n## [1] 4284\n## [1] 4286\n## [1] 4288\n## [1] 4290\n## [1] 4292\n## [1] 4294\n## [1] 4296\n## [1] 4298\n## [1] 4300\n## [1] 4302\n## [1] 4304\n## [1] 4306\n## [1] 4308\n## [1] 4310\n## [1] 4312\n## [1] 4314\n## [1] 4316\n## [1] 4318\n## [1] 4320\n## [1] 4322\n## [1] 4324\n## [1] 4326\n## [1] 4328\n## [1] 4330\n## [1] 4332\n## [1] 4334\n## [1] 4336\n## [1] 4338\n## [1] 4340\n## [1] 4342\n## [1] 4344\n## [1] 4346\n## [1] 4348\n## [1] 4350\n## [1] 4352\n## [1] 4354\n## [1] 4356\n## [1] 4358\n## [1] 4360\n## [1] 4362\n## [1] 4364\n## [1] 4366\n## [1] 4368\n## [1] 4370\n## [1] 4372\n## [1] 4374\n## [1] 4376\n## [1] 4378\n## [1] 4380\n## [1] 4382\n## [1] 4384\n## [1] 4386\n## [1] 4388\n## [1] 4390\n## [1] 4392\n## [1] 4394\n## [1] 4396\n## [1] 4398\n## [1] 4400\n## [1] 4402\n## [1] 4404\n## [1] 4406\n## [1] 4408\n## [1] 4410\n## [1] 4412\n## [1] 4414\n## [1] 4416\n## [1] 4418\n## [1] 4420\n## [1] 4422\n## [1] 4424\n## [1] 4426\n## [1] 4428\n## [1] 4430\n## [1] 4432\n## [1] 4434\n## [1] 4436\n## [1] 4438\n## [1] 4440\n## [1] 4442\n## [1] 4444\n## [1] 4446\n## [1] 4448\n## [1] 4450\n## [1] 4452\n## [1] 4454\n## [1] 4456\n## [1] 4458\n## [1] 4460\n## [1] 4462\n## [1] 4464\n## [1] 4466\n## [1] 4468\n## [1] 4470\n## [1] 4472\n## [1] 4474\n## [1] 4476\n## [1] 4478\n## [1] 4480\n## [1] 4482\n## [1] 4484\n## [1] 4486\n## [1] 4488\n## [1] 4490\n## [1] 4492\n## [1] 4494\n## [1] 4496\n## [1] 4498\n## [1] 4500\n## [1] 4502\n## [1] 4504\n## [1] 4506\n## [1] 4508\n## [1] 4510\n## [1] 4512\n## [1] 4514\n## [1] 4516\n## [1] 4518\n## [1] 4520\n## [1] 4522\n## [1] 4524\n## [1] 4526\n## [1] 4528\n## [1] 4530\n## [1] 4532\n## [1] 4534\n## [1] 4536\n## [1] 4538\n## [1] 4540\n## [1] 4542\n## [1] 4544\n## [1] 4546\n## [1] 4548\n## [1] 4550\n## [1] 4552\n## [1] 4554\n## [1] 4556\n## [1] 4558\n## [1] 4560\n## [1] 4562\n## [1] 4564\n## [1] 4566\n## [1] 4568\n## [1] 4570\n## [1] 4572\n## [1] 4574\n## [1] 4576\n## [1] 4578\n## [1] 4580\n## [1] 4582\n## [1] 4584\n## [1] 4586\n## [1] 4588\n## [1] 4590\n## [1] 4592\n## [1] 4594\n## [1] 4596\n## [1] 4598\n## [1] 4600\n## [1] 4602\n## [1] 4604\n## [1] 4606\n## [1] 4608\n## [1] 4610\n## [1] 4612\n## [1] 4614\n## [1] 4616\n## [1] 4618\n## [1] 4620\n## [1] 4622\n## [1] 4624\n## [1] 4626\n## [1] 4628\n## [1] 4630\n## [1] 4632\n## [1] 4634\n## [1] 4636\n## [1] 4638\n## [1] 4640\n## [1] 4642\n## [1] 4644\n## [1] 4646\n## [1] 4648\n## [1] 4650\n## [1] 4652\n## [1] 4654\n## [1] 4656\n## [1] 4658\n## [1] 4660\n## [1] 4662\n## [1] 4664\n## [1] 4666\n## [1] 4668\n## [1] 4670\n## [1] 4672\n## [1] 4674\n## [1] 4676\n## [1] 4678\n## [1] 4680\n## [1] 4682\n## [1] 4684\n## [1] 4686\n## [1] 4688\n## [1] 4690\n## [1] 4692\n## [1] 4694\n## [1] 4696\n## [1] 4698\n## [1] 4700\n## [1] 4702\n## [1] 4704\n## [1] 4706\n## [1] 4708\n## [1] 4710\n## [1] 4712\n## [1] 4714\n## [1] 4716\n## [1] 4718\n## [1] 4720\n## [1] 4722\n## [1] 4724\n## [1] 4726\n## [1] 4728\n## [1] 4730\n## [1] 4732\n## [1] 4734\n## [1] 4736\n## [1] 4738\n## [1] 4740\n## [1] 4742\n## [1] 4744\n## [1] 4746\n## [1] 4748\n## [1] 4750\n## [1] 4752\n## [1] 4754\n## [1] 4756\n## [1] 4758\n## [1] 4760\n## [1] 4762\n## [1] 4764\n## [1] 4766\n## [1] 4768\n## [1] 4770\n## [1] 4772\n## [1] 4774\n## [1] 4776\n## [1] 4778\n## [1] 4780\n## [1] 4782\n## [1] 4784\n## [1] 4786\n## [1] 4788\n## [1] 4790\n## [1] 4792\n## [1] 4794\n## [1] 4796\n## [1] 4798\n## [1] 4800\n## [1] 4802\n## [1] 4804\n## [1] 4806\n## [1] 4808\n## [1] 4810\n## [1] 4812\n## [1] 4814\n## [1] 4816\n## [1] 4818\n## [1] 4820\n## [1] 4822\n## [1] 4824\n## [1] 4826\n## [1] 4828\n## [1] 4830\n## [1] 4832\n## [1] 4834\n## [1] 4836\n## [1] 4838\n## [1] 4840\n## [1] 4842\n## [1] 4844\n## [1] 4846\n## [1] 4848\n## [1] 4850\n## [1] 4852\n## [1] 4854\n## [1] 4856\n## [1] 4858\n## [1] 4860\n## [1] 4862\n## [1] 4864\n## [1] 4866\n## [1] 4868\n## [1] 4870\n## [1] 4872\n## [1] 4874\n## [1] 4876\n## [1] 4878\n## [1] 4880\n## [1] 4882\n## [1] 4884\n## [1] 4886\n## [1] 4888\n## [1] 4890\n## [1] 4892\n## [1] 4894\n## [1] 4896\n## [1] 4898\n## [1] 4900\n## [1] 4902\n## [1] 4904\n## [1] 4906\n## [1] 4908\n## [1] 4910\n## [1] 4912\n## [1] 4914\n## [1] 4916\n## [1] 4918\n## [1] 4920\n## [1] 4922\n## [1] 4924\n## [1] 4926\n## [1] 4928\n## [1] 4930\n## [1] 4932\n## [1] 4934\n## [1] 4936\n## [1] 4938\n## [1] 4940\n## [1] 4942\n## [1] 4944\n## [1] 4946\n## [1] 4948\n## [1] 4950\n## [1] 4952\n## [1] 4954\n## [1] 4956\n## [1] 4958\n## [1] 4960\n## [1] 4962\n## [1] 4964\n## [1] 4966\n## [1] 4968\n## [1] 4970\n## [1] 4972\n## [1] 4974\n## [1] 4976\n## [1] 4978\n## [1] 4980\n## [1] 4982\n## [1] 4984\n## [1] 4986\n## [1] 4988\n## [1] 4990\n## [1] 4992\n## [1] 4994\n## [1] 4996\n## [1] 4998\n## [1] 5000\n## [1] 5002\n## [1] 5004\n## [1] 5006\n## [1] 5008\n## [1] 5010\n## [1] 5012\n## [1] 5014\n## [1] 5016\n## [1] 5018\n## [1] 5020\n## [1] 5022\n## [1] 5024\n## [1] 5026\n## [1] 5028\n## [1] 5030\n## [1] 5032\n## [1] 5034\n## [1] 5036\n## [1] 5038\n## [1] 5040\n## [1] 5042\n## [1] 5044\n## [1] 5046\n## [1] 5048\n## [1] 5050\n## [1] 5052\n## [1] 5054\n## [1] 5056\n## [1] 5058\n## [1] 5060\n## [1] 5062\n## [1] 5064\n## [1] 5066\n## [1] 5068\n## [1] 5070\n## [1] 5072\n## [1] 5074\n## [1] 5076\n## [1] 5078\n## [1] 5080\n## [1] 5082\n## [1] 5084\n## [1] 5086\n## [1] 5088\n## [1] 5090\n## [1] 5092\n## [1] 5094\n## [1] 5096\n## [1] 5098\n## [1] 5100\n## [1] 5102\n## [1] 5104\n## [1] 5106\n## [1] 5108\n## [1] 5110\n## [1] 5112\n## [1] 5114\n## [1] 5116\n## [1] 5118\n## [1] 5120\n## [1] 5122\n## [1] 5124\n## [1] 5126\n## [1] 5128\n## [1] 5130\n## [1] 5132\n## [1] 5134\n## [1] 5136\n## [1] 5138\n## [1] 5140\n## [1] 5142\n## [1] 5144\n## [1] 5146\n## [1] 5148\n## [1] 5150\n## [1] 5152\n## [1] 5154\n## [1] 5156\n## [1] 5158\n## [1] 5160\n## [1] 5162\n## [1] 5164\n## [1] 5166\n## [1] 5168\n## [1] 5170\n## [1] 5172\n## [1] 5174\n## [1] 5176\n## [1] 5178\n## [1] 5180\n## [1] 5182\n## [1] 5184\n## [1] 5186\n## [1] 5188\n## [1] 5190\n## [1] 5192\n## [1] 5194\n## [1] 5196\n## [1] 5198\n## [1] 5200\n## [1] 5202\n## [1] 5204\n## [1] 5206\n## [1] 5208\n## [1] 5210\n## [1] 5212\n## [1] 5214\n## [1] 5216\n## [1] 5218\n## [1] 5220\n## [1] 5222\n## [1] 5224\n## [1] 5226\n## [1] 5228\n## [1] 5230\n## [1] 5232\n## [1] 5234\n## [1] 5236\n## [1] 5238\n## [1] 5240\n## [1] 5242\n## [1] 5244\n## [1] 5246\n## [1] 5248\n## [1] 5250\n## [1] 5252\n## [1] 5254\n## [1] 5256\n## [1] 5258\n## [1] 5260\n## [1] 5262\n## [1] 5264\n## [1] 5266\n## [1] 5268\n## [1] 5270\n## [1] 5272\n## [1] 5274\n## [1] 5276\n## [1] 5278\n## [1] 5280\n## [1] 5282\n## [1] 5284\n## [1] 5286\n## [1] 5288\n## [1] 5290\n## [1] 5292\n## [1] 5294\n## [1] 5296\n## [1] 5298\n## [1] 5300\n## [1] 5302\n## [1] 5304\n## [1] 5306\n## [1] 5308\n## [1] 5310\n## [1] 5312\n## [1] 5314\n## [1] 5316\n## [1] 5318\n## [1] 5320\n## [1] 5322\n## [1] 5324\n## [1] 5326\n## [1] 5328\n## [1] 5330\n## [1] 5332\n## [1] 5334\n## [1] 5336\n## [1] 5338\n## [1] 5340\n## [1] 5342\n## [1] 5344\n## [1] 5346\n## [1] 5348\n## [1] 5350\n## [1] 5352\n## [1] 5354\n## [1] 5356\n## [1] 5358\n## [1] 5360\n## [1] 5362\n## [1] 5364\n## [1] 5366\n## [1] 5368\n## [1] 5370\n## [1] 5372\n## [1] 5374\n## [1] 5376\n## [1] 5378\n## [1] 5380\n## [1] 5382\n## [1] 5384\n## [1] 5386\n## [1] 5388\n## [1] 5390\n## [1] 5392\n## [1] 5394\n## [1] 5396\n## [1] 5398\n## [1] 5400\n## [1] 5402\n## [1] 5404\n## [1] 5406\n## [1] 5408\n## [1] 5410\n## [1] 5412\n## [1] 5414\n## [1] 5416\n## [1] 5418\n## [1] 5420\n## [1] 5422\n## [1] 5424\n## [1] 5426\n## [1] 5428\n## [1] 5430\n## [1] 5432\n## [1] 5434\n## [1] 5436\n## [1] 5438\n## [1] 5440\n## [1] 5442\n## [1] 5444\n## [1] 5446\n## [1] 5448\n## [1] 5450\n## [1] 5452\n## [1] 5454\n## [1] 5456\n## [1] 5458\n## [1] 5460\n## [1] 5462\n## [1] 5464\n## [1] 5466\n## [1] 5468\n## [1] 5470\n## [1] 5472\n## [1] 5474\n## [1] 5476\n## [1] 5478\n## [1] 5480\n## [1] 5482\n## [1] 5484\n## [1] 5486\n## [1] 5488\n## [1] 5490\n## [1] 5492\n## [1] 5494\n## [1] 5496\n## [1] 5498\n## [1] 5500\n## [1] 5502\n## [1] 5504\n## [1] 5506\n## [1] 5508\n## [1] 5510\n## [1] 5512\n## [1] 5514\n## [1] 5516\n## [1] 5518\n## [1] 5520\n## [1] 5522\n## [1] 5524\n## [1] 5526\n## [1] 5528\n## [1] 5530\n## [1] 5532\n## [1] 5534\n## [1] 5536\n## [1] 5538\n## [1] 5540\n## [1] 5542\n## [1] 5544\n## [1] 5546\n## [1] 5548\n## [1] 5550\n## [1] 5552\n## [1] 5554\n## [1] 5556\n## [1] 5558\n## [1] 5560\n## [1] 5562\n## [1] 5564\n## [1] 5566\n## [1] 5568\n## [1] 5570\n## [1] 5572\n## [1] 5574\n## [1] 5576\n## [1] 5578\n## [1] 5580\n## [1] 5582\n## [1] 5584\n## [1] 5586\n## [1] 5588\n## [1] 5590\n## [1] 5592\n## [1] 5594\n## [1] 5596\n## [1] 5598\n## [1] 5600\n## [1] 5602\n## [1] 5604\n## [1] 5606\n## [1] 5608\n## [1] 5610\n## [1] 5612\n## [1] 5614\n## [1] 5616\n## [1] 5618\n## [1] 5620\n## [1] 5622\n## [1] 5624\n## [1] 5626\n## [1] 5628\n## [1] 5630\n## [1] 5632\n## [1] 5634\n## [1] 5636\n## [1] 5638\n## [1] 5640\n## [1] 5642\n## [1] 5644\n## [1] 5646\n## [1] 5648\n## [1] 5650\n## [1] 5652\n## [1] 5654\n## [1] 5656\n## [1] 5658\n## [1] 5660\n## [1] 5662\n## [1] 5664\n## [1] 5666\n## [1] 5668\n## [1] 5670\n## [1] 5672\n## [1] 5674\n## [1] 5676\n## [1] 5678\n## [1] 5680\n## [1] 5682\n## [1] 5684\n## [1] 5686\n## [1] 5688\n## [1] 5690\n## [1] 5692\n## [1] 5694\n## [1] 5696\n## [1] 5698\n## [1] 5700\n## [1] 5702\n## [1] 5704\n## [1] 5706\n## [1] 5708\n## [1] 5710\n## [1] 5712\n## [1] 5714\n## [1] 5716\n## [1] 5718\n## [1] 5720\n## [1] 5722\n## [1] 5724\n## [1] 5726\n## [1] 5728\n## [1] 5730\n## [1] 5732\n## [1] 5734\n## [1] 5736\n## [1] 5738\n## [1] 5740\n## [1] 5742\n## [1] 5744\n## [1] 5746\n## [1] 5748\n## [1] 5750\n## [1] 5752\n## [1] 5754\n## [1] 5756\n## [1] 5758\n## [1] 5760\n## [1] 5762\n## [1] 5764\n## [1] 5766\n## [1] 5768\n## [1] 5770\n## [1] 5772\n## [1] 5774\n## [1] 5776\n## [1] 5778\n## [1] 5780\n## [1] 5782\n## [1] 5784\n## [1] 5786\n## [1] 5788\n## [1] 5790\n## [1] 5792\n## [1] 5794\n## [1] 5796\n## [1] 5798\n## [1] 5800\n## [1] 5802\n## [1] 5804\n## [1] 5806\n## [1] 5808\n## [1] 5810\n## [1] 5812\n## [1] 5814\n## [1] 5816\n## [1] 5818\n## [1] 5820\n## [1] 5822\n## [1] 5824\n## [1] 5826\n## [1] 5828\n## [1] 5830\n## [1] 5832\n## [1] 5834\n## [1] 5836\n## [1] 5838\n## [1] 5840\n## [1] 5842\n## [1] 5844\n## [1] 5846\n## [1] 5848\n## [1] 5850\n## [1] 5852\n## [1] 5854\n## [1] 5856\n## [1] 5858\n## [1] 5860\n## [1] 5862\n## [1] 5864\n## [1] 5866\n## [1] 5868\n## [1] 5870\n## [1] 5872\n## [1] 5874\n## [1] 5876\n## [1] 5878\n## [1] 5880\n## [1] 5882\n## [1] 5884\n## [1] 5886\n## [1] 5888\n## [1] 5890\n## [1] 5892\n## [1] 5894\n## [1] 5896\n## [1] 5898\n## [1] 5900\n## [1] 5902\n## [1] 5904\n## [1] 5906\n## [1] 5908\n## [1] 5910\n## [1] 5912\n## [1] 5914\n## [1] 5916\n## [1] 5918\n## [1] 5920\n## [1] 5922\n## [1] 5924\n## [1] 5926\n## [1] 5928\n## [1] 5930\n## [1] 5932\n## [1] 5934\n## [1] 5936\n## [1] 5938\n## [1] 5940\n## [1] 5942\n## [1] 5944\n## [1] 5946\n## [1] 5948\n## [1] 5950\n## [1] 5952\n## [1] 5954\n## [1] 5956\n## [1] 5958\n## [1] 5960\n## [1] 5962\n## [1] 5964\n## [1] 5966\n## [1] 5968\n## [1] 5970\n## [1] 5972\n## [1] 5974\n## [1] 5976\n## [1] 5978\n## [1] 5980\n## [1] 5982\n## [1] 5984\n## [1] 5986\n## [1] 5988\n## [1] 5990\n## [1] 5992\n## [1] 5994\n## [1] 5996\n## [1] 5998\n## [1] 6000\n## [1] 6002\n## [1] 6004\n## [1] 6006\n## [1] 6008\n## [1] 6010\n## [1] 6012\n## [1] 6014\n## [1] 6016\n## [1] 6018\n## [1] 6020\n## [1] 6022\n## [1] 6024\n## [1] 6026\n## [1] 6028\n## [1] 6030\n## [1] 6032\n## [1] 6034\n## [1] 6036\n## [1] 6038\n## [1] 6040\n## [1] 6042\n## [1] 6044\n## [1] 6046\n## [1] 6048\n## [1] 6050\n## [1] 6052\n## [1] 6054\n## [1] 6056\n## [1] 6058\n## [1] 6060\n## [1] 6062\n## [1] 6064\n## [1] 6066\n## [1] 6068\n## [1] 6070\n## [1] 6072\n## [1] 6074\n## [1] 6076\n## [1] 6078\n## [1] 6080\n## [1] 6082\n## [1] 6084\n## [1] 6086\n## [1] 6088\n## [1] 6090\n## [1] 6092\n## [1] 6094\n## [1] 6096\n## [1] 6098\n## [1] 6100\n## [1] 6102\n## [1] 6104\n## [1] 6106\n## [1] 6108\n## [1] 6110\n## [1] 6112\n## [1] 6114\n## [1] 6116\n## [1] 6118\n## [1] 6120\n## [1] 6122\n## [1] 6124\n## [1] 6126\n## [1] 6128\n## [1] 6130\n## [1] 6132\n## [1] 6134\n## [1] 6136\n## [1] 6138\n## [1] 6140\n## [1] 6142\n## [1] 6144\n## [1] 6146\n## [1] 6148\n## [1] 6150\n## [1] 6152\n## [1] 6154\n## [1] 6156\n## [1] 6158\n## [1] 6160\n## [1] 6162\n## [1] 6164\n## [1] 6166\n## [1] 6168\n## [1] 6170\n## [1] 6172\n## [1] 6174\n## [1] 6176\n## [1] 6178\n## [1] 6180\n## [1] 6182\n## [1] 6184\n## [1] 6186\n## [1] 6188\n## [1] 6190\n## [1] 6192\n## [1] 6194\n## [1] 6196\n## [1] 6198\n## [1] 6200\n## [1] 6202\n## [1] 6204\n## [1] 6206\n## [1] 6208\n## [1] 6210\n## [1] 6212\n## [1] 6214\n## [1] 6216\n## [1] 6218\n## [1] 6220\n## [1] 6222\n## [1] 6224\n## [1] 6226\n## [1] 6228\n## [1] 6230\n## [1] 6232\n## [1] 6234\n## [1] 6236\n## [1] 6238\n## [1] 6240\n## [1] 6242\n## [1] 6244\n## [1] 6246\n## [1] 6248\n## [1] 6250\n## [1] 6252\n## [1] 6254\n## [1] 6256\n## [1] 6258\n## [1] 6260\n## [1] 6262\n## [1] 6264\n## [1] 6266\n## [1] 6268\n## [1] 6270\n## [1] 6272\n## [1] 6274\n## [1] 6276\n## [1] 6278\n## [1] 6280\n## [1] 6282\n## [1] 6284\n## [1] 6286\n## [1] 6288\n## [1] 6290\n## [1] 6292\n## [1] 6294\n## [1] 6296\n## [1] 6298\n## [1] 6300\n## [1] 6302\n## [1] 6304\n## [1] 6306\n## [1] 6308\n## [1] 6310\n## [1] 6312\n## [1] 6314\n## [1] 6316\n## [1] 6318\n## [1] 6320\n## [1] 6322\n## [1] 6324\n## [1] 6326\n## [1] 6328\n## [1] 6330\n## [1] 6332\n## [1] 6334\n## [1] 6336\n## [1] 6338\n## [1] 6340\n## [1] 6342\n## [1] 6344\n## [1] 6346\n## [1] 6348\n## [1] 6350\n## [1] 6352\n## [1] 6354\n## [1] 6356\n## [1] 6358\n## [1] 6360\n## [1] 6362\n## [1] 6364\n## [1] 6366\n## [1] 6368\n## [1] 6370\n## [1] 6372\n## [1] 6374\n## [1] 6376\n## [1] 6378\n## [1] 6380\n## [1] 6382\n## [1] 6384\n## [1] 6386\n## [1] 6388\n## [1] 6390\n## [1] 6392\n## [1] 6394\n## [1] 6396\n## [1] 6398\n## [1] 6400\n## [1] 6402\n## [1] 6404\n## [1] 6406\n## [1] 6408\n## [1] 6410\n## [1] 6412\n## [1] 6414\n## [1] 6416\n## [1] 6418\n## [1] 6420\n## [1] 6422\n## [1] 6424\n## [1] 6426\n## [1] 6428\n## [1] 6430\n## [1] 6432\n## [1] 6434\n## [1] 6436\n## [1] 6438\n## [1] 6440\n## [1] 6442\n## [1] 6444\n## [1] 6446\n## [1] 6448\n## [1] 6450\n## [1] 6452\n## [1] 6454\n## [1] 6456\n## [1] 6458\n## [1] 6460\n## [1] 6462\n## [1] 6464\n## [1] 6466\n## [1] 6468\n## [1] 6470\n## [1] 6472\n## [1] 6474\n## [1] 6476\n## [1] 6478\n## [1] 6480\n## [1] 6482\n## [1] 6484\n## [1] 6486\n## [1] 6488\n## [1] 6490\n## [1] 6492\n## [1] 6494\n## [1] 6496\n## [1] 6498\n## [1] 6500\n## [1] 6502\n## [1] 6504\n## [1] 6506\n## [1] 6508\n## [1] 6510\n## [1] 6512\n## [1] 6514\n## [1] 6516\n## [1] 6518\n## [1] 6520\n## [1] 6522\n## [1] 6524\n## [1] 6526\n## [1] 6528\n## [1] 6530\n## [1] 6532\n## [1] 6534\n## [1] 6536\n## [1] 6538\n## [1] 6540\n## [1] 6542\n## [1] 6544\n## [1] 6546\n## [1] 6548\n## [1] 6550\n## [1] 6552\n## [1] 6554\n## [1] 6556\n## [1] 6558\n## [1] 6560\n## [1] 6562\n## [1] 6564\n## [1] 6566\n## [1] 6568\n## [1] 6570\n## [1] 6572\n## [1] 6574\n## [1] 6576\n## [1] 6578\n## [1] 6580\n## [1] 6582\n## [1] 6584\n## [1] 6586\n## [1] 6588\n## [1] 6590\n## [1] 6592\n## [1] 6594\n## [1] 6596\n## [1] 6598\n## [1] 6600\n## [1] 6602\n## [1] 6604\n## [1] 6606\n## [1] 6608\n## [1] 6610\n## [1] 6612\n## [1] 6614\n## [1] 6616\n## [1] 6618\n## [1] 6620\n## [1] 6622\n## [1] 6624\n## [1] 6626\n## [1] 6628\n## [1] 6630\n## [1] 6632\n## [1] 6634\n## [1] 6636\n## [1] 6638\n## [1] 6640\n## [1] 6642\n## [1] 6644\n## [1] 6646\n## [1] 6648\n## [1] 6650\n## [1] 6652\n## [1] 6654\n## [1] 6656\n## [1] 6658\n## [1] 6660\n## [1] 6662\n## [1] 6664\n## [1] 6666\n## [1] 6668\n## [1] 6670\n## [1] 6672\n## [1] 6674\n## [1] 6676\n## [1] 6678\n## [1] 6680\n## [1] 6682\n## [1] 6684\n## [1] 6686\n## [1] 6688\n## [1] 6690\n## [1] 6692\n## [1] 6694\n## [1] 6696\n## [1] 6698\n## [1] 6700\n## [1] 6702\n## [1] 6704\n## [1] 6706\n## [1] 6708\n## [1] 6710\n## [1] 6712\n## [1] 6714\n## [1] 6716\n## [1] 6718\n## [1] 6720\n## [1] 6722\n## [1] 6724\n## [1] 6726\n## [1] 6728\n## [1] 6730\n## [1] 6732\n## [1] 6734\n## [1] 6736\n## [1] 6738\n## [1] 6740\n## [1] 6742\n## [1] 6744\n## [1] 6746\n## [1] 6748\n## [1] 6750\n## [1] 6752\n## [1] 6754\n## [1] 6756\n## [1] 6758\n## [1] 6760\n## [1] 6762\n## [1] 6764\n## [1] 6766\n## [1] 6768\n## [1] 6770\n## [1] 6772\n## [1] 6774\n## [1] 6776\n## [1] 6778\n## [1] 6780\n## [1] 6782\n## [1] 6784\n## [1] 6786\n## [1] 6788\n## [1] 6790\n## [1] 6792\n## [1] 6794\n## [1] 6796\n## [1] 6798\n## [1] 6800\n## [1] 6802\n## [1] 6804\n## [1] 6806\n## [1] 6808\n## [1] 6810\n## [1] 6812\n## [1] 6814\n## [1] 6816\n## [1] 6818\n## [1] 6820\n## [1] 6822\n## [1] 6824\n## [1] 6826\n## [1] 6828\n## [1] 6830\n## [1] 6832\n## [1] 6834\n## [1] 6836\n## [1] 6838\n## [1] 6840\n## [1] 6842\n## [1] 6844\n## [1] 6846\n## [1] 6848\n## [1] 6850\n## [1] 6852\n## [1] 6854\n## [1] 6856\n## [1] 6858\n## [1] 6860\n## [1] 6862\n## [1] 6864\n## [1] 6866\n## [1] 6868\n## [1] 6870\n## [1] 6872\n## [1] 6874\n## [1] 6876\n## [1] 6878\n## [1] 6880\n## [1] 6882\n## [1] 6884\n## [1] 6886\n## [1] 6888\n## [1] 6890\n## [1] 6892\n## [1] 6894\n## [1] 6896\n## [1] 6898\n## [1] 6900\n## [1] 6902\n## [1] 6904\n## [1] 6906\n## [1] 6908\n## [1] 6910\n## [1] 6912\n## [1] 6914\n## [1] 6916\n## [1] 6918\n## [1] 6920\n## [1] 6922\n## [1] 6924\n## [1] 6926\n## [1] 6928\n## [1] 6930\n## [1] 6932\n## [1] 6934\n## [1] 6936\n## [1] 6938\n## [1] 6940\n## [1] 6942\n## [1] 6944\n## [1] 6946\n## [1] 6948\n## [1] 6950\n## [1] 6952\n## [1] 6954\n## [1] 6956\n## [1] 6958\n## [1] 6960\n## [1] 6962\n## [1] 6964\n## [1] 6966\n## [1] 6968\n## [1] 6970\n## [1] 6972\n## [1] 6974\n## [1] 6976\n## [1] 6978\n## [1] 6980\n## [1] 6982\n## [1] 6984\n## [1] 6986\n## [1] 6988\n## [1] 6990\n## [1] 6992\n## [1] 6994\n## [1] 6996\n## [1] 6998\n## [1] 7000\n## [1] 7002\n## [1] 7004\n## [1] 7006\n## [1] 7008\n## [1] 7010\n## [1] 7012\n## [1] 7014\n## [1] 7016\n## [1] 7018\n## [1] 7020\n## [1] 7022\n## [1] 7024\n## [1] 7026\n## [1] 7028\n## [1] 7030\n## [1] 7032\n## [1] 7034\n## [1] 7036\n## [1] 7038\n## [1] 7040\n## [1] 7042\n## [1] 7044\n## [1] 7046\n## [1] 7048\n## [1] 7050\n## [1] 7052\n## [1] 7054\n## [1] 7056\n## [1] 7058\n## [1] 7060\n## [1] 7062\n## [1] 7064\n## [1] 7066\n## [1] 7068\n## [1] 7070\n## [1] 7072\n## [1] 7074\n## [1] 7076\n## [1] 7078\n## [1] 7080\n## [1] 7082\n## [1] 7084\n## [1] 7086\n## [1] 7088\n## [1] 7090\n## [1] 7092\n## [1] 7094\n## [1] 7096\n## [1] 7098\n## [1] 7100\n## [1] 7102\n## [1] 7104\n## [1] 7106\n## [1] 7108\n## [1] 7110\n## [1] 7112\n## [1] 7114\n## [1] 7116\n## [1] 7118\n## [1] 7120\n## [1] 7122\n## [1] 7124\n## [1] 7126\n## [1] 7128\n## [1] 7130\n## [1] 7132\n## [1] 7134\n## [1] 7136\n## [1] 7138\n## [1] 7140\n## [1] 7142\n## [1] 7144\n## [1] 7146\n## [1] 7148\n## [1] 7150\n## [1] 7152\n## [1] 7154\n## [1] 7156\n## [1] 7158\n## [1] 7160\n## [1] 7162\n## [1] 7164\n## [1] 7166\n## [1] 7168\n## [1] 7170\n## [1] 7172\n## [1] 7174\n## [1] 7176\n## [1] 7178\n## [1] 7180\n## [1] 7182\n## [1] 7184\n## [1] 7186\n## [1] 7188\n## [1] 7190\n## [1] 7192\n## [1] 7194\n## [1] 7196\n## [1] 7198\n## [1] 7200\n## [1] 7202\n## [1] 7204\n## [1] 7206\n## [1] 7208\n## [1] 7210\n## [1] 7212\n## [1] 7214\n## [1] 7216\n## [1] 7218\n## [1] 7220\n## [1] 7222\n## [1] 7224\n## [1] 7226\n## [1] 7228\n## [1] 7230\n## [1] 7232\n## [1] 7234\n## [1] 7236\n## [1] 7238\n## [1] 7240\n## [1] 7242\n## [1] 7244\n## [1] 7246\n## [1] 7248\n## [1] 7250\n## [1] 7252\n## [1] 7254\n## [1] 7256\n## [1] 7258\n## [1] 7260\n## [1] 7262\n## [1] 7264\n## [1] 7266\n## [1] 7268\n## [1] 7270\n## [1] 7272\n## [1] 7274\n## [1] 7276\n## [1] 7278\n## [1] 7280\n## [1] 7282\n## [1] 7284\n## [1] 7286\n## [1] 7288\n## [1] 7290\n## [1] 7292\n## [1] 7294\n## [1] 7296\n## [1] 7298\n## [1] 7300\n## [1] 7302\n## [1] 7304\n## [1] 7306\n## [1] 7308\n## [1] 7310\n## [1] 7312\n## [1] 7314\n## [1] 7316\n## [1] 7318\n## [1] 7320\n## [1] 7322\n## [1] 7324\n## [1] 7326\n## [1] 7328\n## [1] 7330\n## [1] 7332\n## [1] 7334\n## [1] 7336\n## [1] 7338\n## [1] 7340\n## [1] 7342\n## [1] 7344\n## [1] 7346\n## [1] 7348\n## [1] 7350\n## [1] 7352\n## [1] 7354\n## [1] 7356\n## [1] 7358\n## [1] 7360\n## [1] 7362\n## [1] 7364\n## [1] 7366\n## [1] 7368\n## [1] 7370\n## [1] 7372\n## [1] 7374\n## [1] 7376\n## [1] 7378\n## [1] 7380\n## [1] 7382\n## [1] 7384\n## [1] 7386\n## [1] 7388\n## [1] 7390\n## [1] 7392\n## [1] 7394\n## [1] 7396\n## [1] 7398\n## [1] 7400\n## [1] 7402\n## [1] 7404\n## [1] 7406\n## [1] 7408\n## [1] 7410\n## [1] 7412\n## [1] 7414\n## [1] 7416\n## [1] 7418\n## [1] 7420\n## [1] 7422\n## [1] 7424\n## [1] 7426\n## [1] 7428\n## [1] 7430\n## [1] 7432\n## [1] 7434\n## [1] 7436\n## [1] 7438\n## [1] 7440\n## [1] 7442\n## [1] 7444\n## [1] 7446\n## [1] 7448\n## [1] 7450\n## [1] 7452\n## [1] 7454\n## [1] 7456\n## [1] 7458\n## [1] 7460\n## [1] 7462\n## [1] 7464\n## [1] 7466\n## [1] 7468\n## [1] 7470\n## [1] 7472\n## [1] 7474\n## [1] 7476\n## [1] 7478\n## [1] 7480\n## [1] 7482\n## [1] 7484\n## [1] 7486\n## [1] 7488\n## [1] 7490\n## [1] 7492\n## [1] 7494\n## [1] 7496\n## [1] 7498\n## [1] 7500\n## [1] 7502\n## [1] 7504\n## [1] 7506\n## [1] 7508\n## [1] 7510\n## [1] 7512\n## [1] 7514\n## [1] 7516\n## [1] 7518\n## [1] 7520\n## [1] 7522\n## [1] 7524\n## [1] 7526\n## [1] 7528\n## [1] 7530\n## [1] 7532\n## [1] 7534\n## [1] 7536\n## [1] 7538\n## [1] 7540\n## [1] 7542\n## [1] 7544\n## [1] 7546\n## [1] 7548\n## [1] 7550\n## [1] 7552\n## [1] 7554\n## [1] 7556\n## [1] 7558\n## [1] 7560\n## [1] 7562\n## [1] 7564\n## [1] 7566\n## [1] 7568\n## [1] 7570\n## [1] 7572\n## [1] 7574\n## [1] 7576\n## [1] 7578\n## [1] 7580\n## [1] 7582\n## [1] 7584\n## [1] 7586\n## [1] 7588\n## [1] 7590\n## [1] 7592\n## [1] 7594\n## [1] 7596\n## [1] 7598\n## [1] 7600\n## [1] 7602\n## [1] 7604\n## [1] 7606\n## [1] 7608\n## [1] 7610\n## [1] 7612\n## [1] 7614\n## [1] 7616\n## [1] 7618\n## [1] 7620\n## [1] 7622\n## [1] 7624\n## [1] 7626\n## [1] 7628\n## [1] 7630\n## [1] 7632\n## [1] 7634\n## [1] 7636\n## [1] 7638\n## [1] 7640\n## [1] 7642\n## [1] 7644\n## [1] 7646\n## [1] 7648\n## [1] 7650\n## [1] 7652\n## [1] 7654\n## [1] 7656\n## [1] 7658\n## [1] 7660\n## [1] 7662\n## [1] 7664\n## [1] 7666\n## [1] 7668\n## [1] 7670\n## [1] 7672\n## [1] 7674\n## [1] 7676\n## [1] 7678\n## [1] 7680\n## [1] 7682\n## [1] 7684\n## [1] 7686\n## [1] 7688\n## [1] 7690\n## [1] 7692\n## [1] 7694\n## [1] 7696\n## [1] 7698\n## [1] 7700\n## [1] 7702\n## [1] 7704\n## [1] 7706\n## [1] 7708\n## [1] 7710\n## [1] 7712\n## [1] 7714\n## [1] 7716\n## [1] 7718\n## [1] 7720\n## [1] 7722\n## [1] 7724\n## [1] 7726\n## [1] 7728\n## [1] 7730\n## [1] 7732\n## [1] 7734\n## [1] 7736\n## [1] 7738\n## [1] 7740\n## [1] 7742\n## [1] 7744\n## [1] 7746\n## [1] 7748\n## [1] 7750\n## [1] 7752\n## [1] 7754\n## [1] 7756\n## [1] 7758\n## [1] 7760\n## [1] 7762\n## [1] 7764\n## [1] 7766\n## [1] 7768\n## [1] 7770\n## [1] 7772\n## [1] 7774\n## [1] 7776\n## [1] 7778\n## [1] 7780\n## [1] 7782\n## [1] 7784\n## [1] 7786\n## [1] 7788\n## [1] 7790\n## [1] 7792\n## [1] 7794\n## [1] 7796\n## [1] 7798\n## [1] 7800\n## [1] 7802\n## [1] 7804\n## [1] 7806\n## [1] 7808\n## [1] 7810\n## [1] 7812\n## [1] 7814\n## [1] 7816\n## [1] 7818\n## [1] 7820\n## [1] 7822\n## [1] 7824\n## [1] 7826\n## [1] 7828\n## [1] 7830\n## [1] 7832\n## [1] 7834\n## [1] 7836\n## [1] 7838\n## [1] 7840\n## [1] 7842\n## [1] 7844\n## [1] 7846\n## [1] 7848\n## [1] 7850\n## [1] 7852\n## [1] 7854\n## [1] 7856\n## [1] 7858\n## [1] 7860\n## [1] 7862\n## [1] 7864\n## [1] 7866\n## [1] 7868\n## [1] 7870\n## [1] 7872\n## [1] 7874\n## [1] 7876\n## [1] 7878\n## [1] 7880\n## [1] 7882\n## [1] 7884\n## [1] 7886\n## [1] 7888\n## [1] 7890\n## [1] 7892\n## [1] 7894\n## [1] 7896\n## [1] 7898\n## [1] 7900\n## [1] 7902\n## [1] 7904\n## [1] 7906\n## [1] 7908\n## [1] 7910\n## [1] 7912\n## [1] 7914\n## [1] 7916\n## [1] 7918\n## [1] 7920\n## [1] 7922\n## [1] 7924\n## [1] 7926\n## [1] 7928\n## [1] 7930\n## [1] 7932\n## [1] 7934\n## [1] 7936\n## [1] 7938\n## [1] 7940\n## [1] 7942\n## [1] 7944\n## [1] 7946\n## [1] 7948\n## [1] 7950\n## [1] 7952\n## [1] 7954\n## [1] 7956\n## [1] 7958\n## [1] 7960\n## [1] 7962\n## [1] 7964\n## [1] 7966\n## [1] 7968\n## [1] 7970\n## [1] 7972\n## [1] 7974\n## [1] 7976\n## [1] 7978\n## [1] 7980\n## [1] 7982\n## [1] 7984\n## [1] 7986\n## [1] 7988\n## [1] 7990\n## [1] 7992\n## [1] 7994\n## [1] 7996\n## [1] 7998\n## [1] 8000\n## [1] 8002\n## [1] 8004\n## [1] 8006\n## [1] 8008\n## [1] 8010\n## [1] 8012\n## [1] 8014\n## [1] 8016\n## [1] 8018\n## [1] 8020\n## [1] 8022\n## [1] 8024\n## [1] 8026\n## [1] 8028\n## [1] 8030\n## [1] 8032\n## [1] 8034\n## [1] 8036\n## [1] 8038\n## [1] 8040\n## [1] 8042\n## [1] 8044\n## [1] 8046\n## [1] 8048\n## [1] 8050\n## [1] 8052\n## [1] 8054\n## [1] 8056\n## [1] 8058\n## [1] 8060\n## [1] 8062\n## [1] 8064\n## [1] 8066\n## [1] 8068\n## [1] 8070\n## [1] 8072\n## [1] 8074\n## [1] 8076\n## [1] 8078\n## [1] 8080\n## [1] 8082\n## [1] 8084\n## [1] 8086\n## [1] 8088\n## [1] 8090\n## [1] 8092\n## [1] 8094\n## [1] 8096\n## [1] 8098\n## [1] 8100\n## [1] 8102\n## [1] 8104\n## [1] 8106\n## [1] 8108\n## [1] 8110\n## [1] 8112\n## [1] 8114\n## [1] 8116\n## [1] 8118\n## [1] 8120\n## [1] 8122\n## [1] 8124\n## [1] 8126\n## [1] 8128\n## [1] 8130\n## [1] 8132\n## [1] 8134\n## [1] 8136\n## [1] 8138\n## [1] 8140\n## [1] 8142\n## [1] 8144\n## [1] 8146\n## [1] 8148\n## [1] 8150\n## [1] 8152\n## [1] 8154\n## [1] 8156\n## [1] 8158\n## [1] 8160\n## [1] 8162\n## [1] 8164\n## [1] 8166\n## [1] 8168\n## [1] 8170\n## [1] 8172\n## [1] 8174\n## [1] 8176\n## [1] 8178\n## [1] 8180\n## [1] 8182\n## [1] 8184\n## [1] 8186\n## [1] 8188\n## [1] 8190\n## [1] 8192\n## [1] 8194\n## [1] 8196\n## [1] 8198\n## [1] 8200\n## [1] 8202\n## [1] 8204\n## [1] 8206\n## [1] 8208\n## [1] 8210\n## [1] 8212\n## [1] 8214\n## [1] 8216\n## [1] 8218\n## [1] 8220\n## [1] 8222\n## [1] 8224\n## [1] 8226\n## [1] 8228\n## [1] 8230\n## [1] 8232\n## [1] 8234\n## [1] 8236\n## [1] 8238\n## [1] 8240\n## [1] 8242\n## [1] 8244\n## [1] 8246\n## [1] 8248\n## [1] 8250\n## [1] 8252\n## [1] 8254\n## [1] 8256\n## [1] 8258\n## [1] 8260\n## [1] 8262\n## [1] 8264\n## [1] 8266\n## [1] 8268\n## [1] 8270\n## [1] 8272\n## [1] 8274\n## [1] 8276\n## [1] 8278\n## [1] 8280\n## [1] 8282\n## [1] 8284\n## [1] 8286\n## [1] 8288\n## [1] 8290\n## [1] 8292\n## [1] 8294\n## [1] 8296\n## [1] 8298\n## [1] 8300\n## [1] 8302\n## [1] 8304\n## [1] 8306\n## [1] 8308\n## [1] 8310\n## [1] 8312\n## [1] 8314\n## [1] 8316\n## [1] 8318\n## [1] 8320\n## [1] 8322\n## [1] 8324\n## [1] 8326\n## [1] 8328\n## [1] 8330\n## [1] 8332\n## [1] 8334\n## [1] 8336\n## [1] 8338\n## [1] 8340\n## [1] 8342\n## [1] 8344\n## [1] 8346\n## [1] 8348\n## [1] 8350\n## [1] 8352\n## [1] 8354\n## [1] 8356\n## [1] 8358\n## [1] 8360\n## [1] 8362\n## [1] 8364\n## [1] 8366\n## [1] 8368\n## [1] 8370\n## [1] 8372\n## [1] 8374\n## [1] 8376\n## [1] 8378\n## [1] 8380\n## [1] 8382\n## [1] 8384\n## [1] 8386\n## [1] 8388\n## [1] 8390\n## [1] 8392\n## [1] 8394\n## [1] 8396\n## [1] 8398\n## [1] 8400\n## [1] 8402\n## [1] 8404\n## [1] 8406\n## [1] 8408\n## [1] 8410\n## [1] 8412\n## [1] 8414\n## [1] 8416\n## [1] 8418\n## [1] 8420\n## [1] 8422\n## [1] 8424\n## [1] 8426\n## [1] 8428\n## [1] 8430\n## [1] 8432\n## [1] 8434\n## [1] 8436\n## [1] 8438\n## [1] 8440\n## [1] 8442\n## [1] 8444\n## [1] 8446\n## [1] 8448\n## [1] 8450\n## [1] 8452\n## [1] 8454\n## [1] 8456\n## [1] 8458\n## [1] 8460\n## [1] 8462\n## [1] 8464\n## [1] 8466\n## [1] 8468\n## [1] 8470\n## [1] 8472\n## [1] 8474\n## [1] 8476\n## [1] 8478\n## [1] 8480\n## [1] 8482\n## [1] 8484\n## [1] 8486\n## [1] 8488\n## [1] 8490\n## [1] 8492\n## [1] 8494\n## [1] 8496\n## [1] 8498\n## [1] 8500\n## [1] 8502\n## [1] 8504\n## [1] 8506\n## [1] 8508\n## [1] 8510\n## [1] 8512\n## [1] 8514\n## [1] 8516\n## [1] 8518\n## [1] 8520\n## [1] 8522\n## [1] 8524\n## [1] 8526\n## [1] 8528\n## [1] 8530\n## [1] 8532\n## [1] 8534\n## [1] 8536\n## [1] 8538\n## [1] 8540\n## [1] 8542\n## [1] 8544\n## [1] 8546\n## [1] 8548\n## [1] 8550\n## [1] 8552\n## [1] 8554\n## [1] 8556\n## [1] 8558\n## [1] 8560\n## [1] 8562\n## [1] 8564\n## [1] 8566\n## [1] 8568\n## [1] 8570\n## [1] 8572\n## [1] 8574\n## [1] 8576\n## [1] 8578\n## [1] 8580\n## [1] 8582\n## [1] 8584\n## [1] 8586\n## [1] 8588\n## [1] 8590\n## [1] 8592\n## [1] 8594\n## [1] 8596\n## [1] 8598\n## [1] 8600\n## [1] 8602\n## [1] 8604\n## [1] 8606\n## [1] 8608\n## [1] 8610\n## [1] 8612\n## [1] 8614\n## [1] 8616\n## [1] 8618\n## [1] 8620\n## [1] 8622\n## [1] 8624\n## [1] 8626\n## [1] 8628\n## [1] 8630\n## [1] 8632\n## [1] 8634\n## [1] 8636\n## [1] 8638\n## [1] 8640\n## [1] 8642\n## [1] 8644\n## [1] 8646\n## [1] 8648\n## [1] 8650\n## [1] 8652\n## [1] 8654\n## [1] 8656\n## [1] 8658\n## [1] 8660\n## [1] 8662\n## [1] 8664\n## [1] 8666\n## [1] 8668\n## [1] 8670\n## [1] 8672\n## [1] 8674\n## [1] 8676\n## [1] 8678\n## [1] 8680\n## [1] 8682\n## [1] 8684\n## [1] 8686\n## [1] 8688\n## [1] 8690\n## [1] 8692\n## [1] 8694\n## [1] 8696\n## [1] 8698\n## [1] 8700\n## [1] 8702\n## [1] 8704\n## [1] 8706\n## [1] 8708\n## [1] 8710\n## [1] 8712\n## [1] 8714\n## [1] 8716\n## [1] 8718\n## [1] 8720\n## [1] 8722\n## [1] 8724\n## [1] 8726\n## [1] 8728\n## [1] 8730\n## [1] 8732\n## [1] 8734\n## [1] 8736\n## [1] 8738\n## [1] 8740\n## [1] 8742\n## [1] 8744\n## [1] 8746\n## [1] 8748\n## [1] 8750\n## [1] 8752\n## [1] 8754\n## [1] 8756\n## [1] 8758\n## [1] 8760\n## [1] 8762\n## [1] 8764\n## [1] 8766\n## [1] 8768\n## [1] 8770\n## [1] 8772\n## [1] 8774\n## [1] 8776\n## [1] 8778\n## [1] 8780\n## [1] 8782\n## [1] 8784\n## [1] 8786\n## [1] 8788\n## [1] 8790\n## [1] 8792\n## [1] 8794\n## [1] 8796\n## [1] 8798\n## [1] 8800\n## [1] 8802\n## [1] 8804\n## [1] 8806\n## [1] 8808\n## [1] 8810\n## [1] 8812\n## [1] 8814\n## [1] 8816\n## [1] 8818\n## [1] 8820\n## [1] 8822\n## [1] 8824\n## [1] 8826\n## [1] 8828\n## [1] 8830\n## [1] 8832\n## [1] 8834\n## [1] 8836\n## [1] 8838\n## [1] 8840\n## [1] 8842\n## [1] 8844\n## [1] 8846\n## [1] 8848\n## [1] 8850\n## [1] 8852\n## [1] 8854\n## [1] 8856\n## [1] 8858\n## [1] 8860\n## [1] 8862\n## [1] 8864\n## [1] 8866\n## [1] 8868\n## [1] 8870\n## [1] 8872\n## [1] 8874\n## [1] 8876\n## [1] 8878\n## [1] 8880\n## [1] 8882\n## [1] 8884\n## [1] 8886\n## [1] 8888\n## [1] 8890\n## [1] 8892\n## [1] 8894\n## [1] 8896\n## [1] 8898\n## [1] 8900\n## [1] 8902\n## [1] 8904\n## [1] 8906\n## [1] 8908\n## [1] 8910\n## [1] 8912\n## [1] 8914\n## [1] 8916\n## [1] 8918\n## [1] 8920\n## [1] 8922\n## [1] 8924\n## [1] 8926\n## [1] 8928\n## [1] 8930\n## [1] 8932\n## [1] 8934\n## [1] 8936\n## [1] 8938\n## [1] 8940\n## [1] 8942\n## [1] 8944\n## [1] 8946\n## [1] 8948\n## [1] 8950\n## [1] 8952\n## [1] 8954\n## [1] 8956\n## [1] 8958\n## [1] 8960\n## [1] 8962\n## [1] 8964\n## [1] 8966\n## [1] 8968\n## [1] 8970\n## [1] 8972\n## [1] 8974\n## [1] 8976\n## [1] 8978\n## [1] 8980\n## [1] 8982\n## [1] 8984\n## [1] 8986\n## [1] 8988\n## [1] 8990\n## [1] 8992\n## [1] 8994\n## [1] 8996\n## [1] 8998\n## [1] 9000\n## [1] 9002\n## [1] 9004\n## [1] 9006\n## [1] 9008\n## [1] 9010\n## [1] 9012\n## [1] 9014\n## [1] 9016\n## [1] 9018\n## [1] 9020\n## [1] 9022\n## [1] 9024\n## [1] 9026\n## [1] 9028\n## [1] 9030\n## [1] 9032\n## [1] 9034\n## [1] 9036\n## [1] 9038\n## [1] 9040\n## [1] 9042\n## [1] 9044\n## [1] 9046\n## [1] 9048\n## [1] 9050\n## [1] 9052\n## [1] 9054\n## [1] 9056\n## [1] 9058\n## [1] 9060\n## [1] 9062\n## [1] 9064\n## [1] 9066\n## [1] 9068\n## [1] 9070\n## [1] 9072\n## [1] 9074\n## [1] 9076\n## [1] 9078\n## [1] 9080\n## [1] 9082\n## [1] 9084\n## [1] 9086\n## [1] 9088\n## [1] 9090\n## [1] 9092\n## [1] 9094\n## [1] 9096\n## [1] 9098\n## [1] 9100\n## [1] 9102\n## [1] 9104\n## [1] 9106\n## [1] 9108\n## [1] 9110\n## [1] 9112\n## [1] 9114\n## [1] 9116\n## [1] 9118\n## [1] 9120\n## [1] 9122\n## [1] 9124\n## [1] 9126\n## [1] 9128\n## [1] 9130\n## [1] 9132\n## [1] 9134\n## [1] 9136\n## [1] 9138\n## [1] 9140\n## [1] 9142\n## [1] 9144\n## [1] 9146\n## [1] 9148\n## [1] 9150\n## [1] 9152\n## [1] 9154\n## [1] 9156\n## [1] 9158\n## [1] 9160\n## [1] 9162\n## [1] 9164\n## [1] 9166\n## [1] 9168\n## [1] 9170\n## [1] 9172\n## [1] 9174\n## [1] 9176\n## [1] 9178\n## [1] 9180\n## [1] 9182\n## [1] 9184\n## [1] 9186\n## [1] 9188\n## [1] 9190\n## [1] 9192\n## [1] 9194\n## [1] 9196\n## [1] 9198\n## [1] 9200\n## [1] 9202\n## [1] 9204\n## [1] 9206\n## [1] 9208\n## [1] 9210\n## [1] 9212\n## [1] 9214\n## [1] 9216\n## [1] 9218\n## [1] 9220\n## [1] 9222\n## [1] 9224\n## [1] 9226\n## [1] 9228\n## [1] 9230\n## [1] 9232\n## [1] 9234\n## [1] 9236\n## [1] 9238\n## [1] 9240\n## [1] 9242\n## [1] 9244\n## [1] 9246\n## [1] 9248\n## [1] 9250\n## [1] 9252\n## [1] 9254\n## [1] 9256\n## [1] 9258\n## [1] 9260\n## [1] 9262\n## [1] 9264\n## [1] 9266\n## [1] 9268\n## [1] 9270\n## [1] 9272\n## [1] 9274\n## [1] 9276\n## [1] 9278\n## [1] 9280\n## [1] 9282\n## [1] 9284\n## [1] 9286\n## [1] 9288\n## [1] 9290\n## [1] 9292\n## [1] 9294\n## [1] 9296\n## [1] 9298\n## [1] 9300\n## [1] 9302\n## [1] 9304\n## [1] 9306\n## [1] 9308\n## [1] 9310\n## [1] 9312\n## [1] 9314\n## [1] 9316\n## [1] 9318\n## [1] 9320\n## [1] 9322\n## [1] 9324\n## [1] 9326\n## [1] 9328\n## [1] 9330\n## [1] 9332\n## [1] 9334\n## [1] 9336\n## [1] 9338\n## [1] 9340\n## [1] 9342\n## [1] 9344\n## [1] 9346\n## [1] 9348\n## [1] 9350\n## [1] 9352\n## [1] 9354\n## [1] 9356\n## [1] 9358\n## [1] 9360\n## [1] 9362\n## [1] 9364\n## [1] 9366\n## [1] 9368\n## [1] 9370\n## [1] 9372\n## [1] 9374\n## [1] 9376\n## [1] 9378\n## [1] 9380\n## [1] 9382\n## [1] 9384\n## [1] 9386\n## [1] 9388\n## [1] 9390\n## [1] 9392\n## [1] 9394\n## [1] 9396\n## [1] 9398\n## [1] 9400\n## [1] 9402\n## [1] 9404\n## [1] 9406\n## [1] 9408\n## [1] 9410\n## [1] 9412\n## [1] 9414\n## [1] 9416\n## [1] 9418\n## [1] 9420\n## [1] 9422\n## [1] 9424\n## [1] 9426\n## [1] 9428\n## [1] 9430\n## [1] 9432\n## [1] 9434\n## [1] 9436\n## [1] 9438\n## [1] 9440\n## [1] 9442\n## [1] 9444\n## [1] 9446\n## [1] 9448\n## [1] 9450\n## [1] 9452\n## [1] 9454\n## [1] 9456\n## [1] 9458\n## [1] 9460\n## [1] 9462\n## [1] 9464\n## [1] 9466\n## [1] 9468\n## [1] 9470\n## [1] 9472\n## [1] 9474\n## [1] 9476\n## [1] 9478\n## [1] 9480\n## [1] 9482\n## [1] 9484\n## [1] 9486\n## [1] 9488\n## [1] 9490\n## [1] 9492\n## [1] 9494\n## [1] 9496\n## [1] 9498\n## [1] 9500\n## [1] 9502\n## [1] 9504\n## [1] 9506\n## [1] 9508\n## [1] 9510\n## [1] 9512\n## [1] 9514\n## [1] 9516\n## [1] 9518\n## [1] 9520\n## [1] 9522\n## [1] 9524\n## [1] 9526\n## [1] 9528\n## [1] 9530\n## [1] 9532\n## [1] 9534\n## [1] 9536\n## [1] 9538\n## [1] 9540\n## [1] 9542\n## [1] 9544\n## [1] 9546\n## [1] 9548\n## [1] 9550\n## [1] 9552\n## [1] 9554\n## [1] 9556\n## [1] 9558\n## [1] 9560\n## [1] 9562\n## [1] 9564\n## [1] 9566\n## [1] 9568\n## [1] 9570\n## [1] 9572\n## [1] 9574\n## [1] 9576\n## [1] 9578\n## [1] 9580\n## [1] 9582\n## [1] 9584\n## [1] 9586\n## [1] 9588\n## [1] 9590\n## [1] 9592\n## [1] 9594\n## [1] 9596\n## [1] 9598\n## [1] 9600\n## [1] 9602\n## [1] 9604\n## [1] 9606\n## [1] 9608\n## [1] 9610\n## [1] 9612\n## [1] 9614\n## [1] 9616\n## [1] 9618\n## [1] 9620\n## [1] 9622\n## [1] 9624\n## [1] 9626\n## [1] 9628\n## [1] 9630\n## [1] 9632\n## [1] 9634\n## [1] 9636\n## [1] 9638\n## [1] 9640\n## [1] 9642\n## [1] 9644\n## [1] 9646\n## [1] 9648\n## [1] 9650\n## [1] 9652\n## [1] 9654\n## [1] 9656\n## [1] 9658\n## [1] 9660\n## [1] 9662\n## [1] 9664\n## [1] 9666\n## [1] 9668\n## [1] 9670\n## [1] 9672\n## [1] 9674\n## [1] 9676\n## [1] 9678\n## [1] 9680\n## [1] 9682\n## [1] 9684\n## [1] 9686\n## [1] 9688\n## [1] 9690\n## [1] 9692\n## [1] 9694\n## [1] 9696\n## [1] 9698\n## [1] 9700\n## [1] 9702\n## [1] 9704\n## [1] 9706\n## [1] 9708\n## [1] 9710\n## [1] 9712\n## [1] 9714\n## [1] 9716\n## [1] 9718\n## [1] 9720\n## [1] 9722\n## [1] 9724\n## [1] 9726\n## [1] 9728\n## [1] 9730\n## [1] 9732\n## [1] 9734\n## [1] 9736\n## [1] 9738\n## [1] 9740\n## [1] 9742\n## [1] 9744\n## [1] 9746\n## [1] 9748\n## [1] 9750\n## [1] 9752\n## [1] 9754\n## [1] 9756\n## [1] 9758\n## [1] 9760\n## [1] 9762\n## [1] 9764\n## [1] 9766\n## [1] 9768\n## [1] 9770\n## [1] 9772\n## [1] 9774\n## [1] 9776\n## [1] 9778\n## [1] 9780\n## [1] 9782\n## [1] 9784\n## [1] 9786\n## [1] 9788\n## [1] 9790\n## [1] 9792\n## [1] 9794\n## [1] 9796\n## [1] 9798\n## [1] 9800\n## [1] 9802\n## [1] 9804\n## [1] 9806\n## [1] 9808\n## [1] 9810\n## [1] 9812\n## [1] 9814\n## [1] 9816\n## [1] 9818\n## [1] 9820\n## [1] 9822\n## [1] 9824\n## [1] 9826\n## [1] 9828\n## [1] 9830\n## [1] 9832\n## [1] 9834\n## [1] 9836\n## [1] 9838\n## [1] 9840\n## [1] 9842\n## [1] 9844\n## [1] 9846\n## [1] 9848\n## [1] 9850\n## [1] 9852\n## [1] 9854\n## [1] 9856\n## [1] 9858\n## [1] 9860\n## [1] 9862\n## [1] 9864\n## [1] 9866\n## [1] 9868\n## [1] 9870\n## [1] 9872\n## [1] 9874\n## [1] 9876\n## [1] 9878\n## [1] 9880\n## [1] 9882\n## [1] 9884\n## [1] 9886\n## [1] 9888\n## [1] 9890\n## [1] 9892\n## [1] 9894\n## [1] 9896\n## [1] 9898\n## [1] 9900\n## [1] 9902\n## [1] 9904\n## [1] 9906\n## [1] 9908\n## [1] 9910\n## [1] 9912\n## [1] 9914\n## [1] 9916\n## [1] 9918\n## [1] 9920\n## [1] 9922\n## [1] 9924\n## [1] 9926\n## [1] 9928\n## [1] 9930\n## [1] 9932\n## [1] 9934\n## [1] 9936\n## [1] 9938\n## [1] 9940\n## [1] 9942\n## [1] 9944\n## [1] 9946\n## [1] 9948\n## [1] 9950\n## [1] 9952\n## [1] 9954\n## [1] 9956\n## [1] 9958\n## [1] 9960\n## [1] 9962\n## [1] 9964\n## [1] 9966\n## [1] 9968\n## [1] 9970\n## [1] 9972\n## [1] 9974\n## [1] 9976\n## [1] 9978\n## [1] 9980\n## [1] 9982\n## [1] 9984\n## [1] 9986\n## [1] 9988\n## [1] 9990\n## [1] 9992\n## [1] 9994\n## [1] 9996\n## [1] 9998\n## [1] 10000\n## [1] 10002\n## [1] 10004\n## [1] 10006\n## [1] 10008\n## [1] 10010\n## [1] 10012\n## [1] 10014\n## [1] 10016\n## [1] 10018\n## [1] 10020\n## [1] 10022\n## [1] 10024\n## [1] 10026\n## [1] 10028\n## [1] 10030\n## [1] 10032\n## [1] 10034\n## [1] 10036\n## [1] 10038\n## [1] 10040\n## [1] 10042\n## [1] 10044\n## [1] 10046\n## [1] 10048\n## [1] 10050\n## [1] 10052\n## [1] 10054\n## [1] 10056\n## [1] 10058\n## [1] 10060\n## [1] 10062\n## [1] 10064\n## [1] 10066\n## [1] 10068\n## [1] 10070\n## [1] 10072\n## [1] 10074\n## [1] 10076\n## [1] 10078\n## [1] 10080\n## [1] 10082\n## [1] 10084\n## [1] 10086\n## [1] 10088\n## [1] 10090\n## [1] 10092\n## [1] 10094\n## [1] 10096\n## [1] 10098\n## [1] 10100\n## [1] 10102\n## [1] 10104\n## [1] 10106\n## [1] 10108\n## [1] 10110\n## [1] 10112\n## [1] 10114\n## [1] 10116\n## [1] 10118\n## [1] 10120\n## [1] 10122\n## [1] 10124\n## [1] 10126\n## [1] 10128\n## [1] 10130\n## [1] 10132\n## [1] 10134\n## [1] 10136\n## [1] 10138\n## [1] 10140\n## [1] 10142\n## [1] 10144\n## [1] 10146\n## [1] 10148\n## [1] 10150\n## [1] 10152\n## [1] 10154\n## [1] 10156\n## [1] 10158\n## [1] 10160\n## [1] 10162\n## [1] 10164\n## [1] 10166\n## [1] 10168\n## [1] 10170\n## [1] 10172\n## [1] 10174\n## [1] 10176\n## [1] 10178\n## [1] 10180\n## [1] 10182\n## [1] 10184\n## [1] 10186\n## [1] 10188\n## [1] 10190\n## [1] 10192\n## [1] 10194\n## [1] 10196\n## [1] 10198\n## [1] 10200\n## [1] 10202\n## [1] 10204\n## [1] 10206\n## [1] 10208\n## [1] 10210\n## [1] 10212\n## [1] 10214\n## [1] 10216\n## [1] 10218\n## [1] 10220\n## [1] 10222\n## [1] 10224\n## [1] 10226\n## [1] 10228\n## [1] 10230\n## [1] 10232\n## [1] 10234\n## [1] 10236\n## [1] 10238\n## [1] 10240\n## [1] 10242\n## [1] 10244\n## [1] 10246\n## [1] 10248\n## [1] 10250\n## [1] 10252\n## [1] 10254\n## [1] 10256\n## [1] 10258\n## [1] 10260\n## [1] 10262\n## [1] 10264\n## [1] 10266\n## [1] 10268\n## [1] 10270\n## [1] 10272\n## [1] 10274\n## [1] 10276\n## [1] 10278\n## [1] 10280\n## [1] 10282\n## [1] 10284\n## [1] 10286\n## [1] 10288\n## [1] 10290\n## [1] 10292\n## [1] 10294\n## [1] 10296\n## [1] 10298\n## [1] 10300\n## [1] 10302\n## [1] 10304\n## [1] 10306\n## [1] 10308\n## [1] 10310\n## [1] 10312\n## [1] 10314\n## [1] 10316\n## [1] 10318\n## [1] 10320\n## [1] 10322\n## [1] 10324\n## [1] 10326\n## [1] 10328\n## [1] 10330\n## [1] 10332\n## [1] 10334\n## [1] 10336\n## [1] 10338\n## [1] 10340\n## [1] 10342\n## [1] 10344\n## [1] 10346\n## [1] 10348\n## [1] 10350\n## [1] 10352\n## [1] 10354\n## [1] 10356\n## [1] 10358\n## [1] 10360\n## [1] 10362\n## [1] 10364\n## [1] 10366\n## [1] 10368\n## [1] 10370\n## [1] 10372\n## [1] 10374\n## [1] 10376\n## [1] 10378\n## [1] 10380\n## [1] 10382\n## [1] 10384\n## [1] 10386\n## [1] 10388\n## [1] 10390\n## [1] 10392\n## [1] 10394\n## [1] 10396\n## [1] 10398\n## [1] 10400\n## [1] 10402\n## [1] 10404\n## [1] 10406\n## [1] 10408\n## [1] 10410\n## [1] 10412\n## [1] 10414\n## [1] 10416\n## [1] 10418\n## [1] 10420\n## [1] 10422\n## [1] 10424\n## [1] 10426\n## [1] 10428\n## [1] 10430\n## [1] 10432\n## [1] 10434\n## [1] 10436\n## [1] 10438\n## [1] 10440\n## [1] 10442\n## [1] 10444\n## [1] 10446\n## [1] 10448\n## [1] 10450\n## [1] 10452\n## [1] 10454\n## [1] 10456\n## [1] 10458\n## [1] 10460\n## [1] 10462\n## [1] 10464\n## [1] 10466\n## [1] 10468\n## [1] 10470\n## [1] 10472\n## [1] 10474\n## [1] 10476\n## [1] 10478\n## [1] 10480\n## [1] 10482\n## [1] 10484\n## [1] 10486\n## [1] 10488\n## [1] 10490\n## [1] 10492\n## [1] 10494\n## [1] 10496\n## [1] 10498\n## [1] 10500\n## [1] 10502\n## [1] 10504\n## [1] 10506\n## [1] 10508\n## [1] 10510\n## [1] 10512\n## [1] 10514\n## [1] 10516\n## [1] 10518\n## [1] 10520\n## [1] 10522\n## [1] 10524\n## [1] 10526\n## [1] 10528\n## [1] 10530\n## [1] 10532\n## [1] 10534\n## [1] 10536\n## [1] 10538\n## [1] 10540\n## [1] 10542\n## [1] 10544\n## [1] 10546\n## [1] 10548\n## [1] 10550\n## [1] 10552\n## [1] 10554\n## [1] 10556\n## [1] 10558\n## [1] 10560\n## [1] 10562\n## [1] 10564\n## [1] 10566\n## [1] 10568\n## [1] 10570\n## [1] 10572\n## [1] 10574\n## [1] 10576\n## [1] 10578\n## [1] 10580\n## [1] 10582\n## [1] 10584\n## [1] 10586\n## [1] 10588\n## [1] 10590\n## [1] 10592\n## [1] 10594\n## [1] 10596\n## [1] 10598\n## [1] 10600\n## [1] 10602\n## [1] 10604\n## [1] 10606\n## [1] 10608\n## [1] 10610\n## [1] 10612\n## [1] 10614\n## [1] 10616\n## [1] 10618\n## [1] 10620\n## [1] 10622\n## [1] 10624\n## [1] 10626\n## [1] 10628\n## [1] 10630\n## [1] 10632\n## [1] 10634\n## [1] 10636\n## [1] 10638\n## [1] 10640\n## [1] 10642\n## [1] 10644\n## [1] 10646\n## [1] 10648\n## [1] 10650\n## [1] 10652\n## [1] 10654\n## [1] 10656\n## [1] 10658\n## [1] 10660\n## [1] 10662\n## [1] 10664\n## [1] 10666\n## [1] 10668\n## [1] 10670\n## [1] 10672\n## [1] 10674\n## [1] 10676\n## [1] 10678\n## [1] 10680\n## [1] 10682\n## [1] 10684\n## [1] 10686\n## [1] 10688\n## [1] 10690\n## [1] 10692\n## [1] 10694\n## [1] 10696\n## [1] 10698\n## [1] 10700\n## [1] 10702\n## [1] 10704\n## [1] 10706\n## [1] 10708\n## [1] 10710\n## [1] 10712\n## [1] 10714\n## [1] 10716\n## [1] 10718\n## [1] 10720\n## [1] 10722\n## [1] 10724\n## [1] 10726\n## [1] 10728\n## [1] 10730\n## [1] 10732\n## [1] 10734\n## [1] 10736\n## [1] 10738\n## [1] 10740\n## [1] 10742\n## [1] 10744\n## [1] 10746\n## [1] 10748\n## [1] 10750\n## [1] 10752\n## [1] 10754\n## [1] 10756\n## [1] 10758\n## [1] 10760\n## [1] 10762\n## [1] 10764\n## [1] 10766\n## [1] 10768\n## [1] 10770\n## [1] 10772\n## [1] 10774\n## [1] 10776\n## [1] 10778\n## [1] 10780\n## [1] 10782\n## [1] 10784\n## [1] 10786\n## [1] 10788\n## [1] 10790\n## [1] 10792\n## [1] 10794\n## [1] 10796\n## [1] 10798\n## [1] 10800\n## [1] 10802\n## [1] 10804\n## [1] 10806\n## [1] 10808\n## [1] 10810\n## [1] 10812\n## [1] 10814\n## [1] 10816\n## [1] 10818\n## [1] 10820\n## [1] 10822\n## [1] 10824\n## [1] 10826\n## [1] 10828\n## [1] 10830\n## [1] 10832\n## [1] 10834\n## [1] 10836\n## [1] 10838\n## [1] 10840\n## [1] 10842\n## [1] 10844\n## [1] 10846\n## [1] 10848\n## [1] 10850\n## [1] 10852\n## [1] 10854\n## [1] 10856\n## [1] 10858\n## [1] 10860\n## [1] 10862\n## [1] 10864\n## [1] 10866\n## [1] 10868\n## [1] 10870\n## [1] 10872\n## [1] 10874\n## [1] 10876\n## [1] 10878\n## [1] 10880\n## [1] 10882\n## [1] 10884\n## [1] 10886\n## [1] 10888\n## [1] 10890\n## [1] 10892\n## [1] 10894\n## [1] 10896\n## [1] 10898\n## [1] 10900\n## [1] 10902\n## [1] 10904\n## [1] 10906\n## [1] 10908\n## [1] 10910\n## [1] 10912\n## [1] 10914\n## [1] 10916\n## [1] 10918\n## [1] 10920\n## [1] 10922\n## [1] 10924\n## [1] 10926\n## [1] 10928\n## [1] 10930\n## [1] 10932\n## [1] 10934\n## [1] 10936\n## [1] 10938\n## [1] 10940\n## [1] 10942\n## [1] 10944\n## [1] 10946\n## [1] 10948\n## [1] 10950\n## [1] 10952\n## [1] 10954\n## [1] 10956\n## [1] 10958\n## [1] 10960\n## [1] 10962\n## [1] 10964\n## [1] 10966\n## [1] 10968\n## [1] 10970\n## [1] 10972\n## [1] 10974\n## [1] 10976\n## [1] 10978\n## [1] 10980\n## [1] 10982\n## [1] 10984\n## [1] 10986\n## [1] 10988\n## [1] 10990\n## [1] 10992\n## [1] 10994\n## [1] 10996\n## [1] 10998\n## [1] 11000\n## [1] 11002\n## [1] 11004\n## [1] 11006\n## [1] 11008\n## [1] 11010\n## [1] 11012\n## [1] 11014\n## [1] 11016\n## [1] 11018\n## [1] 11020\n## [1] 11022\n## [1] 11024\n## [1] 11026\n## [1] 11028\n## [1] 11030\n## [1] 11032\n## [1] 11034\n## [1] 11036\n## [1] 11038\n## [1] 11040\n## [1] 11042\n## [1] 11044\n## [1] 11046\n## [1] 11048\n## [1] 11050\n## [1] 11052\n## [1] 11054\n## [1] 11056\n## [1] 11058\n## [1] 11060\n## [1] 11062\n## [1] 11064\n## [1] 11066\n## [1] 11068\n## [1] 11070\n## [1] 11072\n## [1] 11074\n## [1] 11076\n## [1] 11078\n## [1] 11080\n## [1] 11082\n## [1] 11084\n## [1] 11086\n## [1] 11088\n## [1] 11090\n## [1] 11092\n## [1] 11094\n## [1] 11096\n## [1] 11098\n## [1] 11100\n## [1] 11102\n## [1] 11104\n## [1] 11106\n## [1] 11108\n## [1] 11110\n## [1] 11112\n## [1] 11114\n## [1] 11116\n## [1] 11118\n## [1] 11120\n## [1] 11122\n## [1] 11124\n## [1] 11126\n## [1] 11128\n## [1] 11130\n## [1] 11132\n## [1] 11134\n## [1] 11136\n## [1] 11138\n## [1] 11140\n## [1] 11142\n## [1] 11144\n## [1] 11146\n## [1] 11148\n## [1] 11150\n## [1] 11152\n## [1] 11154\n## [1] 11156\n## [1] 11158\n## [1] 11160\n## [1] 11162\n## [1] 11164\n## [1] 11166\n## [1] 11168\n## [1] 11170\n## [1] 11172\n## [1] 11174\n## [1] 11176\n## [1] 11178\n## [1] 11180\n## [1] 11182\n## [1] 11184\n## [1] 11186\n## [1] 11188\n## [1] 11190\n## [1] 11192\n## [1] 11194\n## [1] 11196\n## [1] 11198\n## [1] 11200\n## [1] 11202\n## [1] 11204\n## [1] 11206\n## [1] 11208\n## [1] 11210\n## [1] 11212\n## [1] 11214\n## [1] 11216\n## [1] 11218\n## [1] 11220\n## [1] 11222\n## [1] 11224\n## [1] 11226\n## [1] 11228\n## [1] 11230\n## [1] 11232\n## [1] 11234\n## [1] 11236\n## [1] 11238\n## [1] 11240\n## [1] 11242\n## [1] 11244\n## [1] 11246\n## [1] 11248\n## [1] 11250\n## [1] 11252\n## [1] 11254\n## [1] 11256\n## [1] 11258\n## [1] 11260\n## [1] 11262\n## [1] 11264\n## [1] 11266\n## [1] 11268\n## [1] 11270\n## [1] 11272\n## [1] 11274\n## [1] 11276\n## [1] 11278\n## [1] 11280\n## [1] 11282\n## [1] 11284\n## [1] 11286\n## [1] 11288\n## [1] 11290\n## [1] 11292\n## [1] 11294\n## [1] 11296\n## [1] 11298\n## [1] 11300\n## [1] 11302\n## [1] 11304\n## [1] 11306\n## [1] 11308\n## [1] 11310\n## [1] 11312\n## [1] 11314\n## [1] 11316\n## [1] 11318\n## [1] 11320\n## [1] 11322\n## [1] 11324\n## [1] 11326\n## [1] 11328\n## [1] 11330\n## [1] 11332\n## [1] 11334\n## [1] 11336\n## [1] 11338\n## [1] 11340\n## [1] 11342\n## [1] 11344\n## [1] 11346\n## [1] 11348\n## [1] 11350\n## [1] 11352\n## [1] 11354\n## [1] 11356\n## [1] 11358\n## [1] 11360\n## [1] 11362\n## [1] 11364\n## [1] 11366\n## [1] 11368\n## [1] 11370\n## [1] 11372\n## [1] 11374\n## [1] 11376\n## [1] 11378\n## [1] 11380\n## [1] 11382\n## [1] 11384\n## [1] 11386\n## [1] 11388\n## [1] 11390\n## [1] 11392\n## [1] 11394\n## [1] 11396\n## [1] 11398\n## [1] 11400\n## [1] 11402\n## [1] 11404\n## [1] 11406\n## [1] 11408\n## [1] 11410\n## [1] 11412\n## [1] 11414\n## [1] 11416\n## [1] 11418\n## [1] 11420\n## [1] 11422\n## [1] 11424\n## [1] 11426\n## [1] 11428\n## [1] 11430\n## [1] 11432\n## [1] 11434\n## [1] 11436\n## [1] 11438\n## [1] 11440\n## [1] 11442\n## [1] 11444\n## [1] 11446\n## [1] 11448\n## [1] 11450\n## [1] 11452\n## [1] 11454\n## [1] 11456\n## [1] 11458\n## [1] 11460\n## [1] 11462\n## [1] 11464\n## [1] 11466\n## [1] 11468\n## [1] 11470\n## [1] 11472\n## [1] 11474\n## [1] 11476\n## [1] 11478\n## [1] 11480\n## [1] 11482\n## [1] 11484\n## [1] 11486\n## [1] 11488\n## [1] 11490\n## [1] 11492\n## [1] 11494\n## [1] 11496\n## [1] 11498\n## [1] 11500\n## [1] 11502\n## [1] 11504\n## [1] 11506\n## [1] 11508\n## [1] 11510\n## [1] 11512\n## [1] 11514\n## [1] 11516\n## [1] 11518\n## [1] 11520\n## [1] 11522\n## [1] 11524\n## [1] 11526\n## [1] 11528\n## [1] 11530\n## [1] 11532\n## [1] 11534\n## [1] 11536\n## [1] 11538\n## [1] 11540\n## [1] 11542\n## [1] 11544\n## [1] 11546\n## [1] 11548\n## [1] 11550\n## [1] 11552\n## [1] 11554\n## [1] 11556\n## [1] 11558\n## [1] 11560\n## [1] 11562\n## [1] 11564\n## [1] 11566\n## [1] 11568\n## [1] 11570\n## [1] 11572\n## [1] 11574\n## [1] 11576\n## [1] 11578\n## [1] 11580\n## [1] 11582\n## [1] 11584\n## [1] 11586\n## [1] 11588\n## [1] 11590\n## [1] 11592\n## [1] 11594\n## [1] 11596\n## [1] 11598\n## [1] 11600\n## [1] 11602\n## [1] 11604\n## [1] 11606\n## [1] 11608\n## [1] 11610\n## [1] 11612\n## [1] 11614\n## [1] 11616\n## [1] 11618\n## [1] 11620\n## [1] 11622\n## [1] 11624\n## [1] 11626\n## [1] 11628\n## [1] 11630\n## [1] 11632\n## [1] 11634\n## [1] 11636\n## [1] 11638\n## [1] 11640\n## [1] 11642\n## [1] 11644\n## [1] 11646\n## [1] 11648\n## [1] 11650\n## [1] 11652\n## [1] 11654\n## [1] 11656\n## [1] 11658\n## [1] 11660\n## [1] 11662\n## [1] 11664\n## [1] 11666\n## [1] 11668\n## [1] 11670\n## [1] 11672\n## [1] 11674\n## [1] 11676\n## [1] 11678\n## [1] 11680\n## [1] 11682\n## [1] 11684\n## [1] 11686\n## [1] 11688\n## [1] 11690\n## [1] 11692\n## [1] 11694\n## [1] 11696\n## [1] 11698\n## [1] 11700\n## [1] 11702\n## [1] 11704\n## [1] 11706\n## [1] 11708\n## [1] 11710\n## [1] 11712\n## [1] 11714\n## [1] 11716\n## [1] 11718\n## [1] 11720\n## [1] 11722\n## [1] 11724\n## [1] 11726\n## [1] 11728\n## [1] 11730\n## [1] 11732\n## [1] 11734\n## [1] 11736\n## [1] 11738\n## [1] 11740\n## [1] 11742\n## [1] 11744\n## [1] 11746\n## [1] 11748\n## [1] 11750\n## [1] 11752\n## [1] 11754\n## [1] 11756\n## [1] 11758\n## [1] 11760\n## [1] 11762\n## [1] 11764\n## [1] 11766\n## [1] 11768\n## [1] 11770\n## [1] 11772\n## [1] 11774\n## [1] 11776\n## [1] 11778\n## [1] 11780\n## [1] 11782\n## [1] 11784\n## [1] 11786\n## [1] 11788\n## [1] 11790\n## [1] 11792\n## [1] 11794\n## [1] 11796\n## [1] 11798\n## [1] 11800\n## [1] 11802\n## [1] 11804\n## [1] 11806\n## [1] 11808\n## [1] 11810\n## [1] 11812\n## [1] 11814\n## [1] 11816\n## [1] 11818\n## [1] 11820\n## [1] 11822\n## [1] 11824\n## [1] 11826\n## [1] 11828\n## [1] 11830\n## [1] 11832\n## [1] 11834\n## [1] 11836\n## [1] 11838\n## [1] 11840\n## [1] 11842\n## [1] 11844\n## [1] 11846\n## [1] 11848\n## [1] 11850\n## [1] 11852\n## [1] 11854\n## [1] 11856\n## [1] 11858\n## [1] 11860\n## [1] 11862\n## [1] 11864\n## [1] 11866\n## [1] 11868\n## [1] 11870\n## [1] 11872\n## [1] 11874\n## [1] 11876\n## [1] 11878\n## [1] 11880\n## [1] 11882\n## [1] 11884\n## [1] 11886\n## [1] 11888\n## [1] 11890\n## [1] 11892\n## [1] 11894\n## [1] 11896\n## [1] 11898\n## [1] 11900\n## [1] 11902\n## [1] 11904\n## [1] 11906\n## [1] 11908\n## [1] 11910\n## [1] 11912\n## [1] 11914\n## [1] 11916\n## [1] 11918\n## [1] 11920\n## [1] 11922\n## [1] 11924\n## [1] 11926\n## [1] 11928\n## [1] 11930\n## [1] 11932\n## [1] 11934\n## [1] 11936\n## [1] 11938\n## [1] 11940\n## [1] 11942\n## [1] 11944\n## [1] 11946\n## [1] 11948\n## [1] 11950\n## [1] 11952\n## [1] 11954\n## [1] 11956\n## [1] 11958\n## [1] 11960\n## [1] 11962\n## [1] 11964\n## [1] 11966\n## [1] 11968\n## [1] 11970\n## [1] 11972\n## [1] 11974\n## [1] 11976\n## [1] 11978\n## [1] 11980\n## [1] 11982\n## [1] 11984\n## [1] 11986\n## [1] 11988\n## [1] 11990\n## [1] 11992\n## [1] 11994\n## [1] 11996\n## [1] 11998\n## [1] 12000\n## [1] 12002\n## [1] 12004\n## [1] 12006\n## [1] 12008\n## [1] 12010\n## [1] 12012\n## [1] 12014\n## [1] 12016\n## [1] 12018\n## [1] 12020\n## [1] 12022\n## [1] 12024\n## [1] 12026\n## [1] 12028\n## [1] 12030\n## [1] 12032\n## [1] 12034\n## [1] 12036\n## [1] 12038\n## [1] 12040\n## [1] 12042\n## [1] 12044\n## [1] 12046\n## [1] 12048\n## [1] 12050\n## [1] 12052\n## [1] 12054\n## [1] 12056\n## [1] 12058\n## [1] 12060\n## [1] 12062\n## [1] 12064\n## [1] 12066\n## [1] 12068\n## [1] 12070\n## [1] 12072\n## [1] 12074\n## [1] 12076\n## [1] 12078\n## [1] 12080\n## [1] 12082\n## [1] 12084\n## [1] 12086\n## [1] 12088\n## [1] 12090\n## [1] 12092\n## [1] 12094\n## [1] 12096\n## [1] 12098\n## [1] 12100\n## [1] 12102\n## [1] 12104\n## [1] 12106\n## [1] 12108\n## [1] 12110\n## [1] 12112\n## [1] 12114\n## [1] 12116\n## [1] 12118\n## [1] 12120\n## [1] 12122\n## [1] 12124\n## [1] 12126\n## [1] 12128\n## [1] 12130\n## [1] 12132\n## [1] 12134\n## [1] 12136\n## [1] 12138\n## [1] 12140\n## [1] 12142\n## [1] 12144\n## [1] 12146\n## [1] 12148\n## [1] 12150\n## [1] 12152\n## [1] 12154\n## [1] 12156\n## [1] 12158\n## [1] 12160\n## [1] 12162\n## [1] 12164\n## [1] 12166\n## [1] 12168\n## [1] 12170\n## [1] 12172\n## [1] 12174\n## [1] 12176\n## [1] 12178\n## [1] 12180\n## [1] 12182\n## [1] 12184\n## [1] 12186\n## [1] 12188\n## [1] 12190\n## [1] 12192\n## [1] 12194\n## [1] 12196\n## [1] 12198\n## [1] 12200\n## [1] 12202\n## [1] 12204\n## [1] 12206\n## [1] 12208\n## [1] 12210\n## [1] 12212\n## [1] 12214\n## [1] 12216\n## [1] 12218\n## [1] 12220\n## [1] 12222\n## [1] 12224\n## [1] 12226\n## [1] 12228\n## [1] 12230\n## [1] 12232\n## [1] 12234\n## [1] 12236\n## [1] 12238\n## [1] 12240\n## [1] 12242\n## [1] 12244\n## [1] 12246\n## [1] 12248\n## [1] 12250\n## [1] 12252\n## [1] 12254\n## [1] 12256\n## [1] 12258\n## [1] 12260\n## [1] 12262\n## [1] 12264\n## [1] 12266\n## [1] 12268\n## [1] 12270\n## [1] 12272\n## [1] 12274\n## [1] 12276\n## [1] 12278\n## [1] 12280\n## [1] 12282\n## [1] 12284\n## [1] 12286\n## [1] 12288\n## [1] 12290\n## [1] 12292\n## [1] 12294\n## [1] 12296\n## [1] 12298\n## [1] 12300\n## [1] 12302\n## [1] 12304\n## [1] 12306\n## [1] 12308\n## [1] 12310\n## [1] 12312\n## [1] 12314\n## [1] 12316\n## [1] 12318\n## [1] 12320\n## [1] 12322\n## [1] 12324\n## [1] 12326\n## [1] 12328\n## [1] 12330\n## [1] 12332\n## [1] 12334\n## [1] 12336\n## [1] 12338\n## [1] 12340\n## [1] 12342\n## [1] 12344\n## [1] 12346\n## [1] 12348\n## [1] 12350\n## [1] 12352\n## [1] 12354\n## [1] 12356\n## [1] 12358\n## [1] 12360\n## [1] 12362\n## [1] 12364\n## [1] 12366\n## [1] 12368\n## [1] 12370\n## [1] 12372\n## [1] 12374\n## [1] 12376\n## [1] 12378\n## [1] 12380\n## [1] 12382\n## [1] 12384\n## [1] 12386\n## [1] 12388\n## [1] 12390\n## [1] 12392\n## [1] 12394\n## [1] 12396\n## [1] 12398\n## [1] 12400\n## [1] 12402\n## [1] 12404\n## [1] 12406\n## [1] 12408\n## [1] 12410\n## [1] 12412\n## [1] 12414\n## [1] 12416\n## [1] 12418\n## [1] 12420\n## [1] 12422\n## [1] 12424\n## [1] 12426\n## [1] 12428\n## [1] 12430\n## [1] 12432\n## [1] 12434\n## [1] 12436\n## [1] 12438\n## [1] 12440\n## [1] 12442\n## [1] 12444\n## [1] 12446\n## [1] 12448\n## [1] 12450\n## [1] 12452\n## [1] 12454\n## [1] 12456\n## [1] 12458\n## [1] 12460\n## [1] 12462\n## [1] 12464\n## [1] 12466\n## [1] 12468\n## [1] 12470\n## [1] 12472\n## [1] 12474\n## [1] 12476\n## [1] 12478\n## [1] 12480\n## [1] 12482\n## [1] 12484\n## [1] 12486\n## [1] 12488\n## [1] 12490\n## [1] 12492\n## [1] 12494\n## [1] 12496\n## [1] 12498\n## [1] 12500\n## [1] 12502\n## [1] 12504\n## [1] 12506\n## [1] 12508\n## [1] 12510\n## [1] 12512\n## [1] 12514\n## [1] 12516\n## [1] 12518\n## [1] 12520\n## [1] 12522\n## [1] 12524\n## [1] 12526\n## [1] 12528\n## [1] 12530\n## [1] 12532\n## [1] 12534\n## [1] 12536\n## [1] 12538\n## [1] 12540\n## [1] 12542\n## [1] 12544\n## [1] 12546\n## [1] 12548\n## [1] 12550\n## [1] 12552\n## [1] 12554\n## [1] 12556\n## [1] 12558\n## [1] 12560\n## [1] 12562\n## [1] 12564\n## [1] 12566\n## [1] 12568\n## [1] 12570\n## [1] 12572\n## [1] 12574\n## [1] 12576\n## [1] 12578\n## [1] 12580\n## [1] 12582\n## [1] 12584\n## [1] 12586\n## [1] 12588\n## [1] 12590\n## [1] 12592\n## [1] 12594\n## [1] 12596\n## [1] 12598\n## [1] 12600\n## [1] 12602\n## [1] 12604\n## [1] 12606\n## [1] 12608\n## [1] 12610\n## [1] 12612\n## [1] 12614\n## [1] 12616\n## [1] 12618\n## [1] 12620\n## [1] 12622\n## [1] 12624\n## [1] 12626\n## [1] 12628\n## [1] 12630\n## [1] 12632\n## [1] 12634\n## [1] 12636\n## [1] 12638\n## [1] 12640\n## [1] 12642\n## [1] 12644\n## [1] 12646\n## [1] 12648\n## [1] 12650\n## [1] 12652\n## [1] 12654\n## [1] 12656\n## [1] 12658\n## [1] 12660\n## [1] 12662\n## [1] 12664\n## [1] 12666\n## [1] 12668\n## [1] 12670\n## [1] 12672\n## [1] 12674\n## [1] 12676\n## [1] 12678\n## [1] 12680\n## [1] 12682\n## [1] 12684\n## [1] 12686\n## [1] 12688\n## [1] 12690\n## [1] 12692\n## [1] 12694\n## [1] 12696\n## [1] 12698\n## [1] 12700\n## [1] 12702\n## [1] 12704\n## [1] 12706\n## [1] 12708\n## [1] 12710\n## [1] 12712\n## [1] 12714\n## [1] 12716\n## [1] 12718\n## [1] 12720\n## [1] 12722\n## [1] 12724\n## [1] 12726\n## [1] 12728\n## [1] 12730\n## [1] 12732\n## [1] 12734\n## [1] 12736\n## [1] 12738\n## [1] 12740\n## [1] 12742\n## [1] 12744\n## [1] 12746\n## [1] 12748\n## [1] 12750\n## [1] 12752\n## [1] 12754\n## [1] 12756\n## [1] 12758\n## [1] 12760\n## [1] 12762\n## [1] 12764\n## [1] 12766\n## [1] 12768\n## [1] 12770\n## [1] 12772\n## [1] 12774\n## [1] 12776\n## [1] 12778\n## [1] 12780\n## [1] 12782\n## [1] 12784\n## [1] 12786\n## [1] 12788\n## [1] 12790\n## [1] 12792\n## [1] 12794\n## [1] 12796\n## [1] 12798\n## [1] 12800\n## [1] 12802\n## [1] 12804\n## [1] 12806\n## [1] 12808\n## [1] 12810\n## [1] 12812\n## [1] 12814\n## [1] 12816\n## [1] 12818\n## [1] 12820\n## [1] 12822\n## [1] 12824\n## [1] 12826\n## [1] 12828\n## [1] 12830\n## [1] 12832\n## [1] 12834\n## [1] 12836\n## [1] 12838\n## [1] 12840\n## [1] 12842\n## [1] 12844\n## [1] 12846\n## [1] 12848\n## [1] 12850\n## [1] 12852\n## [1] 12854\n## [1] 12856\n## [1] 12858\n## [1] 12860\n## [1] 12862\n## [1] 12864\n## [1] 12866\n## [1] 12868\n## [1] 12870\n## [1] 12872\n## [1] 12874\n## [1] 12876\n## [1] 12878\n## [1] 12880\n## [1] 12882\n## [1] 12884\n## [1] 12886\n## [1] 12888\n## [1] 12890\n## [1] 12892\n## [1] 12894\n## [1] 12896\n## [1] 12898\n## [1] 12900\n## [1] 12902\n## [1] 12904\n## [1] 12906\n## [1] 12908\n## [1] 12910\n## [1] 12912\n## [1] 12914\n## [1] 12916\n## [1] 12918\n## [1] 12920\n## [1] 12922\n## [1] 12924\n## [1] 12926\n## [1] 12928\n## [1] 12930\n## [1] 12932\n## [1] 12934\n## [1] 12936\n## [1] 12938\n## [1] 12940\n## [1] 12942\n## [1] 12944\n## [1] 12946\n## [1] 12948\n## [1] 12950\n## [1] 12952\n## [1] 12954\n## [1] 12956\n## [1] 12958\n## [1] 12960\n## [1] 12962\n## [1] 12964\n## [1] 12966\n## [1] 12968\n## [1] 12970\n## [1] 12972\n## [1] 12974\n## [1] 12976\n## [1] 12978\n## [1] 12980\n## [1] 12982\n## [1] 12984\n## [1] 12986\n## [1] 12988\n## [1] 12990\n## [1] 12992\n## [1] 12994\n## [1] 12996\n## [1] 12998\n## [1] 13000\n## [1] 13002\n## [1] 13004\n## [1] 13006\n## [1] 13008\n## [1] 13010\n## [1] 13012\n## [1] 13014\n## [1] 13016\n## [1] 13018\n## [1] 13020\n## [1] 13022\n## [1] 13024\n## [1] 13026\n## [1] 13028\n## [1] 13030\n## [1] 13032\n## [1] 13034\n## [1] 13036\n## [1] 13038\n## [1] 13040\n## [1] 13042\n## [1] 13044\n## [1] 13046\n## [1] 13048\n## [1] 13050\n## [1] 13052\n## [1] 13054\n## [1] 13056\n## [1] 13058\n## [1] 13060\n## [1] 13062\n## [1] 13064\n## [1] 13066\n## [1] 13068\n## [1] 13070\n## [1] 13072\n## [1] 13074\n## [1] 13076\n## [1] 13078\n## [1] 13080\n## [1] 13082\n## [1] 13084\n## [1] 13086\n## [1] 13088\n## [1] 13090\n## [1] 13092\n## [1] 13094\n## [1] 13096\n## [1] 13098\n## [1] 13100\n## [1] 13102\n## [1] 13104\n## [1] 13106\n## [1] 13108\n## [1] 13110\n## [1] 13112\n## [1] 13114\n## [1] 13116\n## [1] 13118\n## [1] 13120\n## [1] 13122\n## [1] 13124\n## [1] 13126\n## [1] 13128\n## [1] 13130\n## [1] 13132\n## [1] 13134\n## [1] 13136\n## [1] 13138\n## [1] 13140\n## [1] 13142\n## [1] 13144\n## [1] 13146\n## [1] 13148\n## [1] 13150\n## [1] 13152\n## [1] 13154\n## [1] 13156\n## [1] 13158\n## [1] 13160\n## [1] 13162\n## [1] 13164\n## [1] 13166\n## [1] 13168\n## [1] 13170\n## [1] 13172\n## [1] 13174\n## [1] 13176\n## [1] 13178\n## [1] 13180\n## [1] 13182\n## [1] 13184\n## [1] 13186\n## [1] 13188\n## [1] 13190\n## [1] 13192\n## [1] 13194\n## [1] 13196\n## [1] 13198\n## [1] 13200\n## [1] 13202\n## [1] 13204\n## [1] 13206\n## [1] 13208\n## [1] 13210\n## [1] 13212\n## [1] 13214\n## [1] 13216\n## [1] 13218\n## [1] 13220\n## [1] 13222\n## [1] 13224\n## [1] 13226\n## [1] 13228\n## [1] 13230\n## [1] 13232\n## [1] 13234\n## [1] 13236\n## [1] 13238\n## [1] 13240\n## [1] 13242\n## [1] 13244\n## [1] 13246\n## [1] 13248\n## [1] 13250\n## [1] 13252\n## [1] 13254\n## [1] 13256\n## [1] 13258\n## [1] 13260\n## [1] 13262\n## [1] 13264\n## [1] 13266\n## [1] 13268\n## [1] 13270\n## [1] 13272\n## [1] 13274\n## [1] 13276\n## [1] 13278\n## [1] 13280\n## [1] 13282\n## [1] 13284\n## [1] 13286\n## [1] 13288\n## [1] 13290\n## [1] 13292\n## [1] 13294\n## [1] 13296\n## [1] 13298\n## [1] 13300\n## [1] 13302\n## [1] 13304\n## [1] 13306\n## [1] 13308\n## [1] 13310\n## [1] 13312\n## [1] 13314\n## [1] 13316\n## [1] 13318\n## [1] 13320\n## [1] 13322\n## [1] 13324\n## [1] 13326\n## [1] 13328\n## [1] 13330\n## [1] 13332\n## [1] 13334\n## [1] 13336\n## [1] 13338\n## [1] 13340\n## [1] 13342\n## [1] 13344\n## [1] 13346\n## [1] 13348\n## [1] 13350\n## [1] 13352\n## [1] 13354\n## [1] 13356\n## [1] 13358\n## [1] 13360\n## [1] 13362\n## [1] 13364\n## [1] 13366\n## [1] 13368\n## [1] 13370\n## [1] 13372\n## [1] 13374\n## [1] 13376\n## [1] 13378\n## [1] 13380\n## [1] 13382\n## [1] 13384\n## [1] 13386\n## [1] 13388\n## [1] 13390\n## [1] 13392\n## [1] 13394\n## [1] 13396\n## [1] 13398\n## [1] 13400\n## [1] 13402\n## [1] 13404\n## [1] 13406\n## [1] 13408\n## [1] 13410\n## [1] 13412\n## [1] 13414\n## [1] 13416\n## [1] 13418\n## [1] 13420\n## [1] 13422\n## [1] 13424\n## [1] 13426\n## [1] 13428\n## [1] 13430\n## [1] 13432\n## [1] 13434\n## [1] 13436\n## [1] 13438\n## [1] 13440\n## [1] 13442\n## [1] 13444\n## [1] 13446\n## [1] 13448\n## [1] 13450\n## [1] 13452\n## [1] 13454\n## [1] 13456\n## [1] 13458\n## [1] 13460\n## [1] 13462\n## [1] 13464\n## [1] 13466\n## [1] 13468\n## [1] 13470\n## [1] 13472\n## [1] 13474\n## [1] 13476\n## [1] 13478\n## [1] 13480\n## [1] 13482\n## [1] 13484\n## [1] 13486\n## [1] 13488\n## [1] 13490\n## [1] 13492\n## [1] 13494\n## [1] 13496\n## [1] 13498\n## [1] 13500\n## [1] 13502\n## [1] 13504\n## [1] 13506\n## [1] 13508\n## [1] 13510\n## [1] 13512\n## [1] 13514\n## [1] 13516\n## [1] 13518\n## [1] 13520\n## [1] 13522\n## [1] 13524\n## [1] 13526\n## [1] 13528\n## [1] 13530\n## [1] 13532\n## [1] 13534\n## [1] 13536\n## [1] 13538\n## [1] 13540\n## [1] 13542\n## [1] 13544\n## [1] 13546\n## [1] 13548\n## [1] 13550\n## [1] 13552\n## [1] 13554\n## [1] 13556\n## [1] 13558\n## [1] 13560\n## [1] 13562\n## [1] 13564\n## [1] 13566\n## [1] 13568\n## [1] 13570\n## [1] 13572\n## [1] 13574\n## [1] 13576\n## [1] 13578\n## [1] 13580\n## [1] 13582\n## [1] 13584\n## [1] 13586\n## [1] 13588\n## [1] 13590\n## [1] 13592\n## [1] 13594\n## [1] 13596\n## [1] 13598\n## [1] 13600\n## [1] 13602\n## [1] 13604\n## [1] 13606\n## [1] 13608\n## [1] 13610\n## [1] 13612\n## [1] 13614\n## [1] 13616\n## [1] 13618\n## [1] 13620\n## [1] 13622\n## [1] 13624\n## [1] 13626\n## [1] 13628\n## [1] 13630\n## [1] 13632\n## [1] 13634\n## [1] 13636\n## [1] 13638\n## [1] 13640\n## [1] 13642\n## [1] 13644\n## [1] 13646\n## [1] 13648\n## [1] 13650\n## [1] 13652\n## [1] 13654\n## [1] 13656\n## [1] 13658\n## [1] 13660\n## [1] 13662\n## [1] 13664\n## [1] 13666\n## [1] 13668\n## [1] 13670\n## [1] 13672\n## [1] 13674\n## [1] 13676\n## [1] 13678\n## [1] 13680\n## [1] 13682\n## [1] 13684\n## [1] 13686\n## [1] 13688\n## [1] 13690\n## [1] 13692\n## [1] 13694\n## [1] 13696\n## [1] 13698\n## [1] 13700\n## [1] 13702\n## [1] 13704\n## [1] 13706\n## [1] 13708\n## [1] 13710\n## [1] 13712\n## [1] 13714\n## [1] 13716\n## [1] 13718\n## [1] 13720\n## [1] 13722\n## [1] 13724\n## [1] 13726\n## [1] 13728\n## [1] 13730\n## [1] 13732\n## [1] 13734\n## [1] 13736\n## [1] 13738\n## [1] 13740\n## [1] 13742\n## [1] 13744\n## [1] 13746\n## [1] 13748\n## [1] 13750\n## [1] 13752\n## [1] 13754\n## [1] 13756\n## [1] 13758\n## [1] 13760\n## [1] 13762\n## [1] 13764\n## [1] 13766\n## [1] 13768\n## [1] 13770\n## [1] 13772\n## [1] 13774\n## [1] 13776\n## [1] 13778\n## [1] 13780\n## [1] 13782\n## [1] 13784\n## [1] 13786\n## [1] 13788\n## [1] 13790\n## [1] 13792\n## [1] 13794\n## [1] 13796\n## [1] 13798\n## [1] 13800\n## [1] 13802\n## [1] 13804\n## [1] 13806\n## [1] 13808\n## [1] 13810\n## [1] 13812\n## [1] 13814\n## [1] 13816\n## [1] 13818\n## [1] 13820\n## [1] 13822\n## [1] 13824\n## [1] 13826\n## [1] 13828\n## [1] 13830\n## [1] 13832\n## [1] 13834\n## [1] 13836\n## [1] 13838\n## [1] 13840\n## [1] 13842\n## [1] 13844\n## [1] 13846\n## [1] 13848\n## [1] 13850\n## [1] 13852\n## [1] 13854\n## [1] 13856\n## [1] 13858\n## [1] 13860\n## [1] 13862\n## [1] 13864\n## [1] 13866\n## [1] 13868\n## [1] 13870\n## [1] 13872\n## [1] 13874\n## [1] 13876\n## [1] 13878\n## [1] 13880\n## [1] 13882\n## [1] 13884\n## [1] 13886\n## [1] 13888\n## [1] 13890\n## [1] 13892\n## [1] 13894\n## [1] 13896\n## [1] 13898\n## [1] 13900\n## [1] 13902\n## [1] 13904\n## [1] 13906\n## [1] 13908\n## [1] 13910\n## [1] 13912\n## [1] 13914\n## [1] 13916\n## [1] 13918\n## [1] 13920\n## [1] 13922\n## [1] 13924\n## [1] 13926\n## [1] 13928\n## [1] 13930\n## [1] 13932\n## [1] 13934\n## [1] 13936\n## [1] 13938\n## [1] 13940\n## [1] 13942\n## [1] 13944\n## [1] 13946\n## [1] 13948\n## [1] 13950\n## [1] 13952\n## [1] 13954\n## [1] 13956\n## [1] 13958\n## [1] 13960\n## [1] 13962\n## [1] 13964\n## [1] 13966\n## [1] 13968\n## [1] 13970\n## [1] 13972\n## [1] 13974\n## [1] 13976\n## [1] 13978\n## [1] 13980\n## [1] 13982\n## [1] 13984\n## [1] 13986\n## [1] 13988\n## [1] 13990\n## [1] 13992\n## [1] 13994\n## [1] 13996\n## [1] 13998\n## [1] 14000\n## [1] 14002\n## [1] 14004\n## [1] 14006\n## [1] 14008\n## [1] 14010\n## [1] 14012\n## [1] 14014\n## [1] 14016\n## [1] 14018\n## [1] 14020\n## [1] 14022\n## [1] 14024\n## [1] 14026\n## [1] 14028\n## [1] 14030\n## [1] 14032\n## [1] 14034\n## [1] 14036\n## [1] 14038\n## [1] 14040\n## [1] 14042\n## [1] 14044\n## [1] 14046\n## [1] 14048\n## [1] 14050\n## [1] 14052\n## [1] 14054\n## [1] 14056\n## [1] 14058\n## [1] 14060\n## [1] 14062\n## [1] 14064\n## [1] 14066\n## [1] 14068\n## [1] 14070\n## [1] 14072\n## [1] 14074\n## [1] 14076\n## [1] 14078\n## [1] 14080\n## [1] 14082\n## [1] 14084\n## [1] 14086\n## [1] 14088\n## [1] 14090\n## [1] 14092\n## [1] 14094\n## [1] 14096\n## [1] 14098\n## [1] 14100\n## [1] 14102\n## [1] 14104\n## [1] 14106\n## [1] 14108\n## [1] 14110\n## [1] 14112\n## [1] 14114\n## [1] 14116\n## [1] 14118\n## [1] 14120\n## [1] 14122\n## [1] 14124\n## [1] 14126\n## [1] 14128\n## [1] 14130\n## [1] 14132\n## [1] 14134\n## [1] 14136\n## [1] 14138\n## [1] 14140\n## [1] 14142\n## [1] 14144\n## [1] 14146\n## [1] 14148\n## [1] 14150\n## [1] 14152\n## [1] 14154\n## [1] 14156\n## [1] 14158\n## [1] 14160\n## [1] 14162\n## [1] 14164\n## [1] 14166\n## [1] 14168\n## [1] 14170\n## [1] 14172\n## [1] 14174\n## [1] 14176\n## [1] 14178\n## [1] 14180\n## [1] 14182\n## [1] 14184\n## [1] 14186\n## [1] 14188\n## [1] 14190\n## [1] 14192\n## [1] 14194\n## [1] 14196\n## [1] 14198\n## [1] 14200\n## [1] 14202\n## [1] 14204\n## [1] 14206\n## [1] 14208\n## [1] 14210\n## [1] 14212\n## [1] 14214\n## [1] 14216\n## [1] 14218\n## [1] 14220\n## [1] 14222\n## [1] 14224\n## [1] 14226\n## [1] 14228\n## [1] 14230\n## [1] 14232\n## [1] 14234\n## [1] 14236\n## [1] 14238\n## [1] 14240\n## [1] 14242\n## [1] 14244\n## [1] 14246\n## [1] 14248\n## [1] 14250\n## [1] 14252\n## [1] 14254\n## [1] 14256\n## [1] 14258\n## [1] 14260\n## [1] 14262\n## [1] 14264\n## [1] 14266\n## [1] 14268\n## [1] 14270\n## [1] 14272\n## [1] 14274\n## [1] 14276\n## [1] 14278\n## [1] 14280\n## [1] 14282\n## [1] 14284\n## [1] 14286\n## [1] 14288\n## [1] 14290\n## [1] 14292\n## [1] 14294\n## [1] 14296\n## [1] 14298\n## [1] 14300\n## [1] 14302\n## [1] 14304\n## [1] 14306\n## [1] 14308\n## [1] 14310\n## [1] 14312\n## [1] 14314\n## [1] 14316\n## [1] 14318\n## [1] 14320\n## [1] 14322\n## [1] 14324\n## [1] 14326\n## [1] 14328\n## [1] 14330\n## [1] 14332\n## [1] 14334\n## [1] 14336\n## [1] 14338\n## [1] 14340\n## [1] 14342\n## [1] 14344\n## [1] 14346\n## [1] 14348\n## [1] 14350\n## [1] 14352\n## [1] 14354\n## [1] 14356\n## [1] 14358\n## [1] 14360\n## [1] 14362\n## [1] 14364\n## [1] 14366\n## [1] 14368\n## [1] 14370\n## [1] 14372\n## [1] 14374\n## [1] 14376\n## [1] 14378\n## [1] 14380\n## [1] 14382\n## [1] 14384\n## [1] 14386\n## [1] 14388\n## [1] 14390\n## [1] 14392\n## [1] 14394\n## [1] 14396\n## [1] 14398\n## [1] 14400\n## [1] 14402\n## [1] 14404\n## [1] 14406\n## [1] 14408\n## [1] 14410\n## [1] 14412\n## [1] 14414\n## [1] 14416\n## [1] 14418\n## [1] 14420\n## [1] 14422\n## [1] 14424\n## [1] 14426\n## [1] 14428\n## [1] 14430\n## [1] 14432\n## [1] 14434\n## [1] 14436\n## [1] 14438\n## [1] 14440\n## [1] 14442\n## [1] 14444\n## [1] 14446\n## [1] 14448\n## [1] 14450\n## [1] 14452\n## [1] 14454\n## [1] 14456\n## [1] 14458\n## [1] 14460\n## [1] 14462\n## [1] 14464\n## [1] 14466\n## [1] 14468\n## [1] 14470\n## [1] 14472\n## [1] 14474\n## [1] 14476\n## [1] 14478\n## [1] 14480\n## [1] 14482\n## [1] 14484\n## [1] 14486\n## [1] 14488\n## [1] 14490\n## [1] 14492\n## [1] 14494\n## [1] 14496\n## [1] 14498\n## [1] 14500\n## [1] 14502\n## [1] 14504\n## [1] 14506\n## [1] 14508\n## [1] 14510\n## [1] 14512\n## [1] 14514\n## [1] 14516\n## [1] 14518\n## [1] 14520\n## [1] 14522\n## [1] 14524\n## [1] 14526\n## [1] 14528\n## [1] 14530\n## [1] 14532\n## [1] 14534\n## [1] 14536\n## [1] 14538\n## [1] 14540\n## [1] 14542\n## [1] 14544\n## [1] 14546\n## [1] 14548\n## [1] 14550\n## [1] 14552\n## [1] 14554\n## [1] 14556\n## [1] 14558\n## [1] 14560\n## [1] 14562\n## [1] 14564\n## [1] 14566\n## [1] 14568\n## [1] 14570\n## [1] 14572\n## [1] 14574\n## [1] 14576\n## [1] 14578\n## [1] 14580\n## [1] 14582\n## [1] 14584\n## [1] 14586\n## [1] 14588\n## [1] 14590\n## [1] 14592\n## [1] 14594\n## [1] 14596\n## [1] 14598\n## [1] 14600\n## [1] 14602\n## [1] 14604\n## [1] 14606\n## [1] 14608\n## [1] 14610\n## [1] 14612\n## [1] 14614\n## [1] 14616\n## [1] 14618\n## [1] 14620\n## [1] 14622\n## [1] 14624\n## [1] 14626\n## [1] 14628\n## [1] 14630\n## [1] 14632\n## [1] 14634\n## [1] 14636\n## [1] 14638\n## [1] 14640\n## [1] 14642\n## [1] 14644\n## [1] 14646\n## [1] 14648\n## [1] 14650\n## [1] 14652\n## [1] 14654\n## [1] 14656\n## [1] 14658\n## [1] 14660\n## [1] 14662\n## [1] 14664\n## [1] 14666\n## [1] 14668\n## [1] 14670\n## [1] 14672\n## [1] 14674\n## [1] 14676\n## [1] 14678\n## [1] 14680\n## [1] 14682\n## [1] 14684\n## [1] 14686\n## [1] 14688\n## [1] 14690\n## [1] 14692\n## [1] 14694\n## [1] 14696\n## [1] 14698\n## [1] 14700\n## [1] 14702\n## [1] 14704\n## [1] 14706\n## [1] 14708\n## [1] 14710\n## [1] 14712\n## [1] 14714\n## [1] 14716\n## [1] 14718\n## [1] 14720\n## [1] 14722\n## [1] 14724\n## [1] 14726\n## [1] 14728\n## [1] 14730\n## [1] 14732\n## [1] 14734\n## [1] 14736\n## [1] 14738\n## [1] 14740\n## [1] 14742\n## [1] 14744\n## [1] 14746\n## [1] 14748\n## [1] 14750\n## [1] 14752\n## [1] 14754\n## [1] 14756\n## [1] 14758\n## [1] 14760\n## [1] 14762\n## [1] 14764\n## [1] 14766\n## [1] 14768\n## [1] 14770\n## [1] 14772\n## [1] 14774\n## [1] 14776\n## [1] 14778\n## [1] 14780\n## [1] 14782\n## [1] 14784\n## [1] 14786\n## [1] 14788\n## [1] 14790\n## [1] 14792\n## [1] 14794\n## [1] 14796\n## [1] 14798\n## [1] 14800\n## [1] 14802\n## [1] 14804\n## [1] 14806\n## [1] 14808\n## [1] 14810\n## [1] 14812\n## [1] 14814\n## [1] 14816\n## [1] 14818\n## [1] 14820\n## [1] 14822\n## [1] 14824\n## [1] 14826\n## [1] 14828\n## [1] 14830\n## [1] 14832\n## [1] 14834\n## [1] 14836\n## [1] 14838\n## [1] 14840\n## [1] 14842\n## [1] 14844\n## [1] 14846\n## [1] 14848\n## [1] 14850\n## [1] 14852\n## [1] 14854\n## [1] 14856\n## [1] 14858\n## [1] 14860\n## [1] 14862\n## [1] 14864\n## [1] 14866\n## [1] 14868\n## [1] 14870\n## [1] 14872\n## [1] 14874\n## [1] 14876\n## [1] 14878\n## [1] 14880\n## [1] 14882\n## [1] 14884\n## [1] 14886\n## [1] 14888\n## [1] 14890\n## [1] 14892\n## [1] 14894\n## [1] 14896\n## [1] 14898\n## [1] 14900\n## [1] 14902\n## [1] 14904\n## [1] 14906\n## [1] 14908\n## [1] 14910\n## [1] 14912\n## [1] 14914\n## [1] 14916\n## [1] 14918\n## [1] 14920\n## [1] 14922\n## [1] 14924\n## [1] 14926\n## [1] 14928\n## [1] 14930\n## [1] 14932\n## [1] 14934\n## [1] 14936\n## [1] 14938\n## [1] 14940\n## [1] 14942\n## [1] 14944\n## [1] 14946\n## [1] 14948\n## [1] 14950\n## [1] 14952\n## [1] 14954\n## [1] 14956\n## [1] 14958\n## [1] 14960\n## [1] 14962\n## [1] 14964\n## [1] 14966\n## [1] 14968\n## [1] 14970\n## [1] 14972\n## [1] 14974\n## [1] 14976\n## [1] 14978\n## [1] 14980\n## [1] 14982\n## [1] 14984\n## [1] 14986\n## [1] 14988\n## [1] 14990\n## [1] 14992\n## [1] 14994\n## [1] 14996\n## [1] 14998\n## [1] 15000\n## [1] 15002\n## [1] 15004\n## [1] 15006\n## [1] 15008\n## [1] 15010\n## [1] 15012\n## [1] 15014\n## [1] 15016\n## [1] 15018\n## [1] 15020\n## [1] 15022\n## [1] 15024\n## [1] 15026\n## [1] 15028\n## [1] 15030\n## [1] 15032\n## [1] 15034\n## [1] 15036\n## [1] 15038\n## [1] 15040\n## [1] 15042\n## [1] 15044\n## [1] 15046\n## [1] 15048\n## [1] 15050\n## [1] 15052\n## [1] 15054\n## [1] 15056\n## [1] 15058\n## [1] 15060\n## [1] 15062\n## [1] 15064\n## [1] 15066\n## [1] 15068\n## [1] 15070\n## [1] 15072\n## [1] 15074\n## [1] 15076\n## [1] 15078\n## [1] 15080\n## [1] 15082\n## [1] 15084\n## [1] 15086\n## [1] 15088\n## [1] 15090\n## [1] 15092\n## [1] 15094\n## [1] 15096\n## [1] 15098\n## [1] 15100\n## [1] 15102\n## [1] 15104\n## [1] 15106\n## [1] 15108\n## [1] 15110\n## [1] 15112\n## [1] 15114\n## [1] 15116\n## [1] 15118\n## [1] 15120\n## [1] 15122\n## [1] 15124\n## [1] 15126\n## [1] 15128\n## [1] 15130\n## [1] 15132\n## [1] 15134\n## [1] 15136\n## [1] 15138\n## [1] 15140\n## [1] 15142\n## [1] 15144\n## [1] 15146\n## [1] 15148\n## [1] 15150\n## [1] 15152\n## [1] 15154\n## [1] 15156\n## [1] 15158\n## [1] 15160\n## [1] 15162\n## [1] 15164\n## [1] 15166\n## [1] 15168\n## [1] 15170\n## [1] 15172\n## [1] 15174\n## [1] 15176\n## [1] 15178\n## [1] 15180\n## [1] 15182\n## [1] 15184\n## [1] 15186\n## [1] 15188\n## [1] 15190\n## [1] 15192\n## [1] 15194\n## [1] 15196\n## [1] 15198\n## [1] 15200\n## [1] 15202\n## [1] 15204\n## [1] 15206\n## [1] 15208\n## [1] 15210\n## [1] 15212\n## [1] 15214\n## [1] 15216\n## [1] 15218\n## [1] 15220\n## [1] 15222\n## [1] 15224\n## [1] 15226\n## [1] 15228\n## [1] 15230\n## [1] 15232\n## [1] 15234\n## [1] 15236\n## [1] 15238\n## [1] 15240\n## [1] 15242\n## [1] 15244\n## [1] 15246\n## [1] 15248\n## [1] 15250\n## [1] 15252\n## [1] 15254\n## [1] 15256\n## [1] 15258\n## [1] 15260\n## [1] 15262\n## [1] 15264\n## [1] 15266\n## [1] 15268\n## [1] 15270\n## [1] 15272\n## [1] 15274\n## [1] 15276\n## [1] 15278\n## [1] 15280\n## [1] 15282\n## [1] 15284\n## [1] 15286\n## [1] 15288\n## [1] 15290\n## [1] 15292\n## [1] 15294\n## [1] 15296\n## [1] 15298\n## [1] 15300\n## [1] 15302\n## [1] 15304\n## [1] 15306\n## [1] 15308\n## [1] 15310\n## [1] 15312\n## [1] 15314\n## [1] 15316\n## [1] 15318\n## [1] 15320\n## [1] 15322\n## [1] 15324\n## [1] 15326\n## [1] 15328\n## [1] 15330\n## [1] 15332\n## [1] 15334\n## [1] 15336\n## [1] 15338\n## [1] 15340\n## [1] 15342\n## [1] 15344\n## [1] 15346\n## [1] 15348\n## [1] 15350\n## [1] 15352\n## [1] 15354\n## [1] 15356\n## [1] 15358\n## [1] 15360\n## [1] 15362\n## [1] 15364\n## [1] 15366\n## [1] 15368\n## [1] 15370\n## [1] 15372\n## [1] 15374\n## [1] 15376\n## [1] 15378\n## [1] 15380\n## [1] 15382\n## [1] 15384\n## [1] 15386\n## [1] 15388\n## [1] 15390\n## [1] 15392\n## [1] 15394\n## [1] 15396\n## [1] 15398\n## [1] 15400\n## [1] 15402\n## [1] 15404\n## [1] 15406\n## [1] 15408\n## [1] 15410\n## [1] 15412\n## [1] 15414\n## [1] 15416\n## [1] 15418\n## [1] 15420\n## [1] 15422\n## [1] 15424\n## [1] 15426\n## [1] 15428\n## [1] 15430\n## [1] 15432\n## [1] 15434\n## [1] 15436\n## [1] 15438\n## [1] 15440\n## [1] 15442\n## [1] 15444\n## [1] 15446\n## [1] 15448\n## [1] 15450\n## [1] 15452\n## [1] 15454\n## [1] 15456\n## [1] 15458\n## [1] 15460\n## [1] 15462\n## [1] 15464\n## [1] 15466\n## [1] 15468\n## [1] 15470\n## [1] 15472\n## [1] 15474\n## [1] 15476\n## [1] 15478\n## [1] 15480\n## [1] 15482\n## [1] 15484\n## [1] 15486\n## [1] 15488\n## [1] 15490\n## [1] 15492\n## [1] 15494\n## [1] 15496\n## [1] 15498\n## [1] 15500\n## [1] 15502\n## [1] 15504\n## [1] 15506\n## [1] 15508\n## [1] 15510\n## [1] 15512\n## [1] 15514\n## [1] 15516\n## [1] 15518\n## [1] 15520\n## [1] 15522\n## [1] 15524\n## [1] 15526\n## [1] 15528\n## [1] 15530\n## [1] 15532\n## [1] 15534\n## [1] 15536\n## [1] 15538\n## [1] 15540\n## [1] 15542\n## [1] 15544\n## [1] 15546\n## [1] 15548\n## [1] 15550\n## [1] 15552\n## [1] 15554\n## [1] 15556\n## [1] 15558\n## [1] 15560\n## [1] 15562\n## [1] 15564\n## [1] 15566\n## [1] 15568\n## [1] 15570\n## [1] 15572\n## [1] 15574\n## [1] 15576\n## [1] 15578\n## [1] 15580\n## [1] 15582\n## [1] 15584\n## [1] 15586\n## [1] 15588\n## [1] 15590\n## [1] 15592\n## [1] 15594\n## [1] 15596\n## [1] 15598\n## [1] 15600\n## [1] 15602\n## [1] 15604\n## [1] 15606\n## [1] 15608\n## [1] 15610\n## [1] 15612\n## [1] 15614\n## [1] 15616\n## [1] 15618\n## [1] 15620\n## [1] 15622\n## [1] 15624\n## [1] 15626\n## [1] 15628\n## [1] 15630\n## [1] 15632\n## [1] 15634\n## [1] 15636\n## [1] 15638\n## [1] 15640\n## [1] 15642\n## [1] 15644\n## [1] 15646\n## [1] 15648\n## [1] 15650\n## [1] 15652\n## [1] 15654\n## [1] 15656\n## [1] 15658\n## [1] 15660\n## [1] 15662\n## [1] 15664\n## [1] 15666\n## [1] 15668\n## [1] 15670\n## [1] 15672\n## [1] 15674\n## [1] 15676\n## [1] 15678\n## [1] 15680\n## [1] 15682\n## [1] 15684\n## [1] 15686\n## [1] 15688\n## [1] 15690\n## [1] 15692\n## [1] 15694\n## [1] 15696\n## [1] 15698\n## [1] 15700\n## [1] 15702\n## [1] 15704\n## [1] 15706\n## [1] 15708\n## [1] 15710\n## [1] 15712\n## [1] 15714\n## [1] 15716\n## [1] 15718\n## [1] 15720\n## [1] 15722\n## [1] 15724\n## [1] 15726\n## [1] 15728\n## [1] 15730\n## [1] 15732\n## [1] 15734\n## [1] 15736\n## [1] 15738\n## [1] 15740\n## [1] 15742\n## [1] 15744\n## [1] 15746\n## [1] 15748\n## [1] 15750\n## [1] 15752\n## [1] 15754\n## [1] 15756\n## [1] 15758\n## [1] 15760\n## [1] 15762\n## [1] 15764\n## [1] 15766\n## [1] 15768\n## [1] 15770\n## [1] 15772\n## [1] 15774\n## [1] 15776\n## [1] 15778\n## [1] 15780\n## [1] 15782\n## [1] 15784\n## [1] 15786\n## [1] 15788\n## [1] 15790\n## [1] 15792\n## [1] 15794\n## [1] 15796\n## [1] 15798\n## [1] 15800\n## [1] 15802\n## [1] 15804\n## [1] 15806\n## [1] 15808\n## [1] 15810\n## [1] 15812\n## [1] 15814\n## [1] 15816\n## [1] 15818\n## [1] 15820\n## [1] 15822\n## [1] 15824\n## [1] 15826\n## [1] 15828\n## [1] 15830\n## [1] 15832\n## [1] 15834\n## [1] 15836\n## [1] 15838\n## [1] 15840\n## [1] 15842\n## [1] 15844\n## [1] 15846\n## [1] 15848\n## [1] 15850\n## [1] 15852\n## [1] 15854\n## [1] 15856\n## [1] 15858\n## [1] 15860\n## [1] 15862\n## [1] 15864\n## [1] 15866\n## [1] 15868\n## [1] 15870\n## [1] 15872\n## [1] 15874\n## [1] 15876\n## [1] 15878\n## [1] 15880\n## [1] 15882\n## [1] 15884\n## [1] 15886\n## [1] 15888\n## [1] 15890\n## [1] 15892\n## [1] 15894\n## [1] 15896\n## [1] 15898\n## [1] 15900\n## [1] 15902\n## [1] 15904\n## [1] 15906\n## [1] 15908\n## [1] 15910\n## [1] 15912\n## [1] 15914\n## [1] 15916\n## [1] 15918\n## [1] 15920\n## [1] 15922\n## [1] 15924\n## [1] 15926\n## [1] 15928\n## [1] 15930\n## [1] 15932\n## [1] 15934\n## [1] 15936\n## [1] 15938\n## [1] 15940\n## [1] 15942\n## [1] 15944\n## [1] 15946\n## [1] 15948\n## [1] 15950\n## [1] 15952\n## [1] 15954\n## [1] 15956\n## [1] 15958\n## [1] 15960\n## [1] 15962\n## [1] 15964\n## [1] 15966\n## [1] 15968\n## [1] 15970\n## [1] 15972\n## [1] 15974\n## [1] 15976\n## [1] 15978\n## [1] 15980\n## [1] 15982\n## [1] 15984\n## [1] 15986\n## [1] 15988\n## [1] 15990\n## [1] 15992\n## [1] 15994\n## [1] 15996\n## [1] 15998\n## [1] 16000\n## [1] 16002\n## [1] 16004\n## [1] 16006\n## [1] 16008\n## [1] 16010\n## [1] 16012\n## [1] 16014\n## [1] 16016\n## [1] 16018\n## [1] 16020\n## [1] 16022\n## [1] 16024\n## [1] 16026\n## [1] 16028\n## [1] 16030\n## [1] 16032\n## [1] 16034\n## [1] 16036\n## [1] 16038\n## [1] 16040\n## [1] 16042\n## [1] 16044\n## [1] 16046\n## [1] 16048\n## [1] 16050\n## [1] 16052\n## [1] 16054\n## [1] 16056\n## [1] 16058\n## [1] 16060\n## [1] 16062\n## [1] 16064\n## [1] 16066\n## [1] 16068\n## [1] 16070\n## [1] 16072\n## [1] 16074\n## [1] 16076\n## [1] 16078\n## [1] 16080\n## [1] 16082\n## [1] 16084\n## [1] 16086\n## [1] 16088\n## [1] 16090\n## [1] 16092\n## [1] 16094\n## [1] 16096\n## [1] 16098\n## [1] 16100\n## [1] 16102\n## [1] 16104\n## [1] 16106\n## [1] 16108\n## [1] 16110\n## [1] 16112\n## [1] 16114\n## [1] 16116\n## [1] 16118\n## [1] 16120\n## [1] 16122\n## [1] 16124\n## [1] 16126\n## [1] 16128\n## [1] 16130\n## [1] 16132\n## [1] 16134\n## [1] 16136\n## [1] 16138\n## [1] 16140\n## [1] 16142\n## [1] 16144\n## [1] 16146\n## [1] 16148\n## [1] 16150\n## [1] 16152\n## [1] 16154\n## [1] 16156\n## [1] 16158\n## [1] 16160\n## [1] 16162\n## [1] 16164\n## [1] 16166\n## [1] 16168\n## [1] 16170\n## [1] 16172\n## [1] 16174\n## [1] 16176\n## [1] 16178\n## [1] 16180\n## [1] 16182\n## [1] 16184\n## [1] 16186\n## [1] 16188\n## [1] 16190\n## [1] 16192\n## [1] 16194\n## [1] 16196\n## [1] 16198\n## [1] 16200\n## [1] 16202\n## [1] 16204\n## [1] 16206\n## [1] 16208\n## [1] 16210\n## [1] 16212\n## [1] 16214\n## [1] 16216\n## [1] 16218\n## [1] 16220\n## [1] 16222\n## [1] 16224\n## [1] 16226\n## [1] 16228\n## [1] 16230\n## [1] 16232\n## [1] 16234\n## [1] 16236\n## [1] 16238\n## [1] 16240\n## [1] 16242\n## [1] 16244\n## [1] 16246\n## [1] 16248\n## [1] 16250\n## [1] 16252\n## [1] 16254\n## [1] 16256\n## [1] 16258\n## [1] 16260\n## [1] 16262\n## [1] 16264\n## [1] 16266\n## [1] 16268\n## [1] 16270\n## [1] 16272\n## [1] 16274\n## [1] 16276\n## [1] 16278\n## [1] 16280\n## [1] 16282\n## [1] 16284\n## [1] 16286\n## [1] 16288\n## [1] 16290\n## [1] 16292\n## [1] 16294\n## [1] 16296\n## [1] 16298\n## [1] 16300\n## [1] 16302\n## [1] 16304\n## [1] 16306\n## [1] 16308\n## [1] 16310\n## [1] 16312\n## [1] 16314\n## [1] 16316\n## [1] 16318\n## [1] 16320\n## [1] 16322\n## [1] 16324\n## [1] 16326\n## [1] 16328\n## [1] 16330\n## [1] 16332\n## [1] 16334\n## [1] 16336\n## [1] 16338\n## [1] 16340\n## [1] 16342\n## [1] 16344\n## [1] 16346\n## [1] 16348\n## [1] 16350\n## [1] 16352\n## [1] 16354\n## [1] 16356\n## [1] 16358\n## [1] 16360\n## [1] 16362\n## [1] 16364\n## [1] 16366\n## [1] 16368\n## [1] 16370\n## [1] 16372\n## [1] 16374\n## [1] 16376\n## [1] 16378\n## [1] 16380\n## [1] 16382\n## [1] 16384\n## [1] 16386\n## [1] 16388\n## [1] 16390\n## [1] 16392\n## [1] 16394\n## [1] 16396\n## [1] 16398\n## [1] 16400\n## [1] 16402\n## [1] 16404\n## [1] 16406\n## [1] 16408\n## [1] 16410\n## [1] 16412\n## [1] 16414\n## [1] 16416\n## [1] 16418\n## [1] 16420\n## [1] 16422\n## [1] 16424\n## [1] 16426\n## [1] 16428\n## [1] 16430\n## [1] 16432\n## [1] 16434\n## [1] 16436\n## [1] 16438\n## [1] 16440\n## [1] 16442\n## [1] 16444\n## [1] 16446\n## [1] 16448\n## [1] 16450\n## [1] 16452\n## [1] 16454\n## [1] 16456\n## [1] 16458\n## [1] 16460\n## [1] 16462\n## [1] 16464\n## [1] 16466\n## [1] 16468\n## [1] 16470\n## [1] 16472\n## [1] 16474\n## [1] 16476\n## [1] 16478\n## [1] 16480\n## [1] 16482\n## [1] 16484\n## [1] 16486\n## [1] 16488\n## [1] 16490\n## [1] 16492\n## [1] 16494\n## [1] 16496\n## [1] 16498\n## [1] 16500\n## [1] 16502\n## [1] 16504\n## [1] 16506\n## [1] 16508\n## [1] 16510\n## [1] 16512\n## [1] 16514\n## [1] 16516\n## [1] 16518\n## [1] 16520\n## [1] 16522\n## [1] 16524\n## [1] 16526\n## [1] 16528\n## [1] 16530\n## [1] 16532\n## [1] 16534\n## [1] 16536\n## [1] 16538\n## [1] 16540\n## [1] 16542\n## [1] 16544\n## [1] 16546\n## [1] 16548\n## [1] 16550\n## [1] 16552\n## [1] 16554\n## [1] 16556\n## [1] 16558\n## [1] 16560\n## [1] 16562\n## [1] 16564\n## [1] 16566\n## [1] 16568\n## [1] 16570\n## [1] 16572\n## [1] 16574\n## [1] 16576\n## [1] 16578\n## [1] 16580\n## [1] 16582\n## [1] 16584\n## [1] 16586\n## [1] 16588\n## [1] 16590\n## [1] 16592\n## [1] 16594\n## [1] 16596\n## [1] 16598\n## [1] 16600\n## [1] 16602\n## [1] 16604\n## [1] 16606\n## [1] 16608\n## [1] 16610\n## [1] 16612\n## [1] 16614\n## [1] 16616\n## [1] 16618\n## [1] 16620\n## [1] 16622\n## [1] 16624\n## [1] 16626\n## [1] 16628\n## [1] 16630\n## [1] 16632\n## [1] 16634\n## [1] 16636\n## [1] 16638\n## [1] 16640\n## [1] 16642\n## [1] 16644\n## [1] 16646\n## [1] 16648\n## [1] 16650\n## [1] 16652\n## [1] 16654\n## [1] 16656\n## [1] 16658\n## [1] 16660\n## [1] 16662\n## [1] 16664\n## [1] 16666\n## [1] 16668\n## [1] 16670\n## [1] 16672\n## [1] 16674\n## [1] 16676\n## [1] 16678\n## [1] 16680\n## [1] 16682\n## [1] 16684\n## [1] 16686\n## [1] 16688\n## [1] 16690\n## [1] 16692\n## [1] 16694\n## [1] 16696\n## [1] 16698\n## [1] 16700\n## [1] 16702\n## [1] 16704\n## [1] 16706\n## [1] 16708\n## [1] 16710\n## [1] 16712\n## [1] 16714\n## [1] 16716\n## [1] 16718\n## [1] 16720\n## [1] 16722\n## [1] 16724\n## [1] 16726\n## [1] 16728\n## [1] 16730\n## [1] 16732\n## [1] 16734\n## [1] 16736\n## [1] 16738\n## [1] 16740\n## [1] 16742\n## [1] 16744\n## [1] 16746\n## [1] 16748\n## [1] 16750\n## [1] 16752\n## [1] 16754\n## [1] 16756\n## [1] 16758\n## [1] 16760\n## [1] 16762\n## [1] 16764\n## [1] 16766\n## [1] 16768\n## [1] 16770\n## [1] 16772\n## [1] 16774\n## [1] 16776\n## [1] 16778\n## [1] 16780\n## [1] 16782\n## [1] 16784\n## [1] 16786\n## [1] 16788\n## [1] 16790\n## [1] 16792\n## [1] 16794\n## [1] 16796\n## [1] 16798\n## [1] 16800\n## [1] 16802\n## [1] 16804\n## [1] 16806\n## [1] 16808\n## [1] 16810\n## [1] 16812\n## [1] 16814\n## [1] 16816\n## [1] 16818\n## [1] 16820\n## [1] 16822\n## [1] 16824\n## [1] 16826\n## [1] 16828\n## [1] 16830\n## [1] 16832\n## [1] 16834\n## [1] 16836\n## [1] 16838\n## [1] 16840\n## [1] 16842\n## [1] 16844\n## [1] 16846\n## [1] 16848\n## [1] 16850\n## [1] 16852\n## [1] 16854\n## [1] 16856\n## [1] 16858\n## [1] 16860\n## [1] 16862\n## [1] 16864\n## [1] 16866\n## [1] 16868\n## [1] 16870\n## [1] 16872\n## [1] 16874\n## [1] 16876\n## [1] 16878\n## [1] 16880\n## [1] 16882\n## [1] 16884\n## [1] 16886\n## [1] 16888\n## [1] 16890\n## [1] 16892\n## [1] 16894\n## [1] 16896\n## [1] 16898\n## [1] 16900\n## [1] 16902\n## [1] 16904\n## [1] 16906\n## [1] 16908\n## [1] 16910\n## [1] 16912\n## [1] 16914\n## [1] 16916\n## [1] 16918\n## [1] 16920\n## [1] 16922\n## [1] 16924\n## [1] 16926\n## [1] 16928\n## [1] 16930\n## [1] 16932\n## [1] 16934\n## [1] 16936\n## [1] 16938\n## [1] 16940\n## [1] 16942\n## [1] 16944\n## [1] 16946\n## [1] 16948\n## [1] 16950\n## [1] 16952\n## [1] 16954\n## [1] 16956\n## [1] 16958\n## [1] 16960\n## [1] 16962\n## [1] 16964\n## [1] 16966\n## [1] 16968\n## [1] 16970\n## [1] 16972\n## [1] 16974\n## [1] 16976\n## [1] 16978\n## [1] 16980\n## [1] 16982\n## [1] 16984\n## [1] 16986\n## [1] 16988\n## [1] 16990\n## [1] 16992\n## [1] 16994\n## [1] 16996\n## [1] 16998\n## [1] 17000\n## [1] 17002\n## [1] 17004\n## [1] 17006\n## [1] 17008\n## [1] 17010\n## [1] 17012\n## [1] 17014\n## [1] 17016\n## [1] 17018\n## [1] 17020\n## [1] 17022\n## [1] 17024\n## [1] 17026\n## [1] 17028\n## [1] 17030\n## [1] 17032\n## [1] 17034\n## [1] 17036\n## [1] 17038\n## [1] 17040\n## [1] 17042\n## [1] 17044\n## [1] 17046\n## [1] 17048\n## [1] 17050\n## [1] 17052\n## [1] 17054\n## [1] 17056\n## [1] 17058\n## [1] 17060\n## [1] 17062\n## [1] 17064\n## [1] 17066\n## [1] 17068\n## [1] 17070\n## [1] 17072\n## [1] 17074\n## [1] 17076\n## [1] 17078\n## [1] 17080\n## [1] 17082\n## [1] 17084\n## [1] 17086\n## [1] 17088\n## [1] 17090\n## [1] 17092\n## [1] 17094\n## [1] 17096\n## [1] 17098\n## [1] 17100\n## [1] 17102\n## [1] 17104\n## [1] 17106\n## [1] 17108\n## [1] 17110\n## [1] 17112\n## [1] 17114\n## [1] 17116\n## [1] 17118\n## [1] 17120\n## [1] 17122\n## [1] 17124\n## [1] 17126\n## [1] 17128\n## [1] 17130\n## [1] 17132\n## [1] 17134\n## [1] 17136\n## [1] 17138\n## [1] 17140\n## [1] 17142\n## [1] 17144\n## [1] 17146\n## [1] 17148\n## [1] 17150\n## [1] 17152\n## [1] 17154\n## [1] 17156\n## [1] 17158\n## [1] 17160\n## [1] 17162\n## [1] 17164\n## [1] 17166\n## [1] 17168\n## [1] 17170\n## [1] 17172\n## [1] 17174\n## [1] 17176\n## [1] 17178\n## [1] 17180\n## [1] 17182\n## [1] 17184\n## [1] 17186\n## [1] 17188\n## [1] 17190\n## [1] 17192\n## [1] 17194\n## [1] 17196\n## [1] 17198\n## [1] 17200\n## [1] 17202\n## [1] 17204\n## [1] 17206\n## [1] 17208\n## [1] 17210\n## [1] 17212\n## [1] 17214\n## [1] 17216\n## [1] 17218\n## [1] 17220\n## [1] 17222\n## [1] 17224\n## [1] 17226\n## [1] 17228\n## [1] 17230\n## [1] 17232\n## [1] 17234\n## [1] 17236\n## [1] 17238\n## [1] 17240\n## [1] 17242\n## [1] 17244\n## [1] 17246\n## [1] 17248\n## [1] 17250\n## [1] 17252\n## [1] 17254\n## [1] 17256\n## [1] 17258\n## [1] 17260\n## [1] 17262\n## [1] 17264\n## [1] 17266\n## [1] 17268\n## [1] 17270\n## [1] 17272\n## [1] 17274\n## [1] 17276\n## [1] 17278\n## [1] 17280\n## [1] 17282\n## [1] 17284\n## [1] 17286\n## [1] 17288\n## [1] 17290\n## [1] 17292\n## [1] 17294\n## [1] 17296\n## [1] 17298\n## [1] 17300\n## [1] 17302\n## [1] 17304\n## [1] 17306\n## [1] 17308\n## [1] 17310\n## [1] 17312\n## [1] 17314\n## [1] 17316\n## [1] 17318\n## [1] 17320\n## [1] 17322\n## [1] 17324\n## [1] 17326\n## [1] 17328\n## [1] 17330\n## [1] 17332\n## [1] 17334\n## [1] 17336\n## [1] 17338\n## [1] 17340\n## [1] 17342\n## [1] 17344\n## [1] 17346\n## [1] 17348\n## [1] 17350\n## [1] 17352\n## [1] 17354\n## [1] 17356\n## [1] 17358\n## [1] 17360\n## [1] 17362\n## [1] 17364\n## [1] 17366\n## [1] 17368\n## [1] 17370\n## [1] 17372\n## [1] 17374\n## [1] 17376\n## [1] 17378\n## [1] 17380\n## [1] 17382\n## [1] 17384\n## [1] 17386\n## [1] 17388\n## [1] 17390\n## [1] 17392\n## [1] 17394\n## [1] 17396\n## [1] 17398\n## [1] 17400\n## [1] 17402\n## [1] 17404\n## [1] 17406\n## [1] 17408\n## [1] 17410\n## [1] 17412\n## [1] 17414\n## [1] 17416\n## [1] 17418\n## [1] 17420\n## [1] 17422\n## [1] 17424\n## [1] 17426\n## [1] 17428\n## [1] 17430\n## [1] 17432\n## [1] 17434\n## [1] 17436\n## [1] 17438\n## [1] 17440\n## [1] 17442\n## [1] 17444\n## [1] 17446\n## [1] 17448\n## [1] 17450\n## [1] 17452\n## [1] 17454\n## [1] 17456\n## [1] 17458\n## [1] 17460\n## [1] 17462\n## [1] 17464\n## [1] 17466\n## [1] 17468\n## [1] 17470\n## [1] 17472\n## [1] 17474\n## [1] 17476\n## [1] 17478\n## [1] 17480\n## [1] 17482\n## [1] 17484\n## [1] 17486\n## [1] 17488\n## [1] 17490\n## [1] 17492\n## [1] 17494\n## [1] 17496\n## [1] 17498\n## [1] 17500\n## [1] 17502\n## [1] 17504\n## [1] 17506\n## [1] 17508\n## [1] 17510\n## [1] 17512\n## [1] 17514\n## [1] 17516\n## [1] 17518\n## [1] 17520\n## [1] 17522\n## [1] 17524\n## [1] 17526\n## [1] 17528\n## [1] 17530\n## [1] 17532\n## [1] 17534\n## [1] 17536\n## [1] 17538\n## [1] 17540\n## [1] 17542\n## [1] 17544\n## [1] 17546\n## [1] 17548\n## [1] 17550\n## [1] 17552\n## [1] 17554\n## [1] 17556\n## [1] 17558\n## [1] 17560\n## [1] 17562\n## [1] 17564\n## [1] 17566\n## [1] 17568\n## [1] 17570\n## [1] 17572\n## [1] 17574\n## [1] 17576\n## [1] 17578\n## [1] 17580\n## [1] 17582\n## [1] 17584\n## [1] 17586\n## [1] 17588\n## [1] 17590\n## [1] 17592\n## [1] 17594\n## [1] 17596\n## [1] 17598\n## [1] 17600\n## [1] 17602\n## [1] 17604\n## [1] 17606\n## [1] 17608\n## [1] 17610\n## [1] 17612\n## [1] 17614\n## [1] 17616\n## [1] 17618\n## [1] 17620\n## [1] 17622\n## [1] 17624\n## [1] 17626\n## [1] 17628\n## [1] 17630\n## [1] 17632\n## [1] 17634\n## [1] 17636\n## [1] 17638\n## [1] 17640\n## [1] 17642\n## [1] 17644\n## [1] 17646\n## [1] 17648\n## [1] 17650\n## [1] 17652\n## [1] 17654\n## [1] 17656\n## [1] 17658\n## [1] 17660\n## [1] 17662\n## [1] 17664\n## [1] 17666\n## [1] 17668\n## [1] 17670\n## [1] 17672\n## [1] 17674\n## [1] 17676\n## [1] 17678\n## [1] 17680\n## [1] 17682\n## [1] 17684\n## [1] 17686\n## [1] 17688\n## [1] 17690\n## [1] 17692\n## [1] 17694\n## [1] 17696\n## [1] 17698\n## [1] 17700\n## [1] 17702\n## [1] 17704\n## [1] 17706\n## [1] 17708\n## [1] 17710\n## [1] 17712\n## [1] 17714\n## [1] 17716\n## [1] 17718\n## [1] 17720\n## [1] 17722\n## [1] 17724\n## [1] 17726\n## [1] 17728\n## [1] 17730\n## [1] 17732\n## [1] 17734\n## [1] 17736\n## [1] 17738\n## [1] 17740\n## [1] 17742\n## [1] 17744\n## [1] 17746\n## [1] 17748\n## [1] 17750\n## [1] 17752\n## [1] 17754\n## [1] 17756\n## [1] 17758\n## [1] 17760\n## [1] 17762\n## [1] 17764\n## [1] 17766\n## [1] 17768\n## [1] 17770\n## [1] 17772\n## [1] 17774\n## [1] 17776\n## [1] 17778\n## [1] 17780\n## [1] 17782\n## [1] 17784\n## [1] 17786\n## [1] 17788\n## [1] 17790\n## [1] 17792\n## [1] 17794\n## [1] 17796\n## [1] 17798\n## [1] 17800\n## [1] 17802\n## [1] 17804\n## [1] 17806\n## [1] 17808\n## [1] 17810\n## [1] 17812\n## [1] 17814\n## [1] 17816\n## [1] 17818\n## [1] 17820\n## [1] 17822\n## [1] 17824\n## [1] 17826\n## [1] 17828\n## [1] 17830\n## [1] 17832\n## [1] 17834\n## [1] 17836\n## [1] 17838\n## [1] 17840\n## [1] 17842\n## [1] 17844\n## [1] 17846\n## [1] 17848\n## [1] 17850\n## [1] 17852\n## [1] 17854\n## [1] 17856\n## [1] 17858\n## [1] 17860\n## [1] 17862\n## [1] 17864\n## [1] 17866\n## [1] 17868\n## [1] 17870\n## [1] 17872\n## [1] 17874\n## [1] 17876\n## [1] 17878\n## [1] 17880\n## [1] 17882\n## [1] 17884\n## [1] 17886\n## [1] 17888\n## [1] 17890\n## [1] 17892\n## [1] 17894\n## [1] 17896\n## [1] 17898\n## [1] 17900\n## [1] 17902\n## [1] 17904\n## [1] 17906\n## [1] 17908\n## [1] 17910\n## [1] 17912\n## [1] 17914\n## [1] 17916\n## [1] 17918\n## [1] 17920\n## [1] 17922\n## [1] 17924\n## [1] 17926\n## [1] 17928\n## [1] 17930\n## [1] 17932\n## [1] 17934\n## [1] 17936\n## [1] 17938\n## [1] 17940\n## [1] 17942\n## [1] 17944\n## [1] 17946\n## [1] 17948\n## [1] 17950\n## [1] 17952\n## [1] 17954\n## [1] 17956\n## [1] 17958\n## [1] 17960\n## [1] 17962\n## [1] 17964\n## [1] 17966\n## [1] 17968\n## [1] 17970\n## [1] 17972\n## [1] 17974\n## [1] 17976\n## [1] 17978\n## [1] 17980\n## [1] 17982\n## [1] 17984\n## [1] 17986\n## [1] 17988\n## [1] 17990\n## [1] 17992\n## [1] 17994\n## [1] 17996\n## [1] 17998\n## [1] 18000\n## [1] 18002\n## [1] 18004\n## [1] 18006\n## [1] 18008\n## [1] 18010\n## [1] 18012\n## [1] 18014\n## [1] 18016\n## [1] 18018\n## [1] 18020\n## [1] 18022\n## [1] 18024\n## [1] 18026\n## [1] 18028\n## [1] 18030\n## [1] 18032\n## [1] 18034\n## [1] 18036\n## [1] 18038\n## [1] 18040\n## [1] 18042\n## [1] 18044\n## [1] 18046\n## [1] 18048\n## [1] 18050\n## [1] 18052\n## [1] 18054\n## [1] 18056\n## [1] 18058\n## [1] 18060\n## [1] 18062\n## [1] 18064\n## [1] 18066\n## [1] 18068\n## [1] 18070\n## [1] 18072\n## [1] 18074\n## [1] 18076\n## [1] 18078\n## [1] 18080\n## [1] 18082\n## [1] 18084\n## [1] 18086\n## [1] 18088\n## [1] 18090\n## [1] 18092\n## [1] 18094\n## [1] 18096\n## [1] 18098\n## [1] 18100\n## [1] 18102\n## [1] 18104\n## [1] 18106\n## [1] 18108\n## [1] 18110\n## [1] 18112\n## [1] 18114\n## [1] 18116\n## [1] 18118\n## [1] 18120\n## [1] 18122\n## [1] 18124\n## [1] 18126\n## [1] 18128\n## [1] 18130\n## [1] 18132\n## [1] 18134\n## [1] 18136\n## [1] 18138\n## [1] 18140\n## [1] 18142\n## [1] 18144\n## [1] 18146\n## [1] 18148\n## [1] 18150\n## [1] 18152\n## [1] 18154\n## [1] 18156\n## [1] 18158\n## [1] 18160\n## [1] 18162\n## [1] 18164\n## [1] 18166\n## [1] 18168\n## [1] 18170\n## [1] 18172\n## [1] 18174\n## [1] 18176\n## [1] 18178\n## [1] 18180\n## [1] 18182\n## [1] 18184\n## [1] 18186\n## [1] 18188\n## [1] 18190\n## [1] 18192\n## [1] 18194\n## [1] 18196\n## [1] 18198\n## [1] 18200\n## [1] 18202\n## [1] 18204\n## [1] 18206\n## [1] 18208\n## [1] 18210\n## [1] 18212\n## [1] 18214\n## [1] 18216\n## [1] 18218\n## [1] 18220\n## [1] 18222\n## [1] 18224\n## [1] 18226\n## [1] 18228\n## [1] 18230\n## [1] 18232\n## [1] 18234\n## [1] 18236\n## [1] 18238\n## [1] 18240\n## [1] 18242\n## [1] 18244\n## [1] 18246\n## [1] 18248\n## [1] 18250\n## [1] 18252\n## [1] 18254\n## [1] 18256\n## [1] 18258\n## [1] 18260\n## [1] 18262\n## [1] 18264\n## [1] 18266\n## [1] 18268\n## [1] 18270\n## [1] 18272\n## [1] 18274\n## [1] 18276\n## [1] 18278\n## [1] 18280\n## [1] 18282\n## [1] 18284\n## [1] 18286\n## [1] 18288\n## [1] 18290\n## [1] 18292\n## [1] 18294\n## [1] 18296\n## [1] 18298\n## [1] 18300\n## [1] 18302\n## [1] 18304\n## [1] 18306\n## [1] 18308\n## [1] 18310\n## [1] 18312\n## [1] 18314\n## [1] 18316\n## [1] 18318\n## [1] 18320\n## [1] 18322\n## [1] 18324\n## [1] 18326\n## [1] 18328\n## [1] 18330\n## [1] 18332\n## [1] 18334\n## [1] 18336\n## [1] 18338\n## [1] 18340\n## [1] 18342\n## [1] 18344\n## [1] 18346\n## [1] 18348\n## [1] 18350\n## [1] 18352\n## [1] 18354\n## [1] 18356\n## [1] 18358\n## [1] 18360\n## [1] 18362\n## [1] 18364\n## [1] 18366\n## [1] 18368\n## [1] 18370\n## [1] 18372\n## [1] 18374\n## [1] 18376\n## [1] 18378\n## [1] 18380\n## [1] 18382\n## [1] 18384\n## [1] 18386\n## [1] 18388\n## [1] 18390\n## [1] 18392\n## [1] 18394\n## [1] 18396\n## [1] 18398\n## [1] 18400\n## [1] 18402\n## [1] 18404\n## [1] 18406\n## [1] 18408\n## [1] 18410\n## [1] 18412\n## [1] 18414\n## [1] 18416\n## [1] 18418\n## [1] 18420\n## [1] 18422\n## [1] 18424\n## [1] 18426\n## [1] 18428\n## [1] 18430\n## [1] 18432\n## [1] 18434\n## [1] 18436\n## [1] 18438\n## [1] 18440\n## [1] 18442\n## [1] 18444\n## [1] 18446\n## [1] 18448\n## [1] 18450\n## [1] 18452\n## [1] 18454\n## [1] 18456\n## [1] 18458\n## [1] 18460\n## [1] 18462\n## [1] 18464\n## [1] 18466\n## [1] 18468\n## [1] 18470\n## [1] 18472\n## [1] 18474\n## [1] 18476\n## [1] 18478\n## [1] 18480\n## [1] 18482\n## [1] 18484\n## [1] 18486\n## [1] 18488\n## [1] 18490\n## [1] 18492\n## [1] 18494\n## [1] 18496\n## [1] 18498\n## [1] 18500\n## [1] 18502\n## [1] 18504\n## [1] 18506\n## [1] 18508\n## [1] 18510\n## [1] 18512\n## [1] 18514\n## [1] 18516\n## [1] 18518\n## [1] 18520\n## [1] 18522\n## [1] 18524\n## [1] 18526\n## [1] 18528\n## [1] 18530\n## [1] 18532\n## [1] 18534\n## [1] 18536\n## [1] 18538\n## [1] 18540\n## [1] 18542\n## [1] 18544\n## [1] 18546\n## [1] 18548\n## [1] 18550\n## [1] 18552\n## [1] 18554\n## [1] 18556\n## [1] 18558\n## [1] 18560\n## [1] 18562\n## [1] 18564\n## [1] 18566\n## [1] 18568\n## [1] 18570\n## [1] 18572\n## [1] 18574\n## [1] 18576\n## [1] 18578\n## [1] 18580\n## [1] 18582\n## [1] 18584\n## [1] 18586\n## [1] 18588\n## [1] 18590\n## [1] 18592\n## [1] 18594\n## [1] 18596\n## [1] 18598\n## [1] 18600\n## [1] 18602\n## [1] 18604\n## [1] 18606\n## [1] 18608\n## [1] 18610\n## [1] 18612\n## [1] 18614\n## [1] 18616\n## [1] 18618\n## [1] 18620\n## [1] 18622\n## [1] 18624\n## [1] 18626\n## [1] 18628\n## [1] 18630\n## [1] 18632\n## [1] 18634\n## [1] 18636\n## [1] 18638\n## [1] 18640\n## [1] 18642\n## [1] 18644\n## [1] 18646\n## [1] 18648\n## [1] 18650\n## [1] 18652\n## [1] 18654\n## [1] 18656\n## [1] 18658\n## [1] 18660\n## [1] 18662\n## [1] 18664\n## [1] 18666\n## [1] 18668\n## [1] 18670\n## [1] 18672\n## [1] 18674\n## [1] 18676\n## [1] 18678\n## [1] 18680\n## [1] 18682\n## [1] 18684\n## [1] 18686\n## [1] 18688\n## [1] 18690\n## [1] 18692\n## [1] 18694\n## [1] 18696\n## [1] 18698\n## [1] 18700\n## [1] 18702\n## [1] 18704\n## [1] 18706\n## [1] 18708\n## [1] 18710\n## [1] 18712\n## [1] 18714\n## [1] 18716\n## [1] 18718\n## [1] 18720\n## [1] 18722\n## [1] 18724\n## [1] 18726\n## [1] 18728\n## [1] 18730\n## [1] 18732\n## [1] 18734\n## [1] 18736\n## [1] 18738\n## [1] 18740\n## [1] 18742\n## [1] 18744\n## [1] 18746\n## [1] 18748\n## [1] 18750\n## [1] 18752\n## [1] 18754\n## [1] 18756\n## [1] 18758\n## [1] 18760\n## [1] 18762\n## [1] 18764\n## [1] 18766\n## [1] 18768\n## [1] 18770\n## [1] 18772\n## [1] 18774\n## [1] 18776\n## [1] 18778\n## [1] 18780\n## [1] 18782\n## [1] 18784\n## [1] 18786\n## [1] 18788\n## [1] 18790\n## [1] 18792\n## [1] 18794\n## [1] 18796\n## [1] 18798\n## [1] 18800\n## [1] 18802\n## [1] 18804\n## [1] 18806\n## [1] 18808\n## [1] 18810\n## [1] 18812\n## [1] 18814\n## [1] 18816\n## [1] 18818\n## [1] 18820\n## [1] 18822\n## [1] 18824\n## [1] 18826\n## [1] 18828\n## [1] 18830\n## [1] 18832\n## [1] 18834\n## [1] 18836\n## [1] 18838\n## [1] 18840\n## [1] 18842\n## [1] 18844\n## [1] 18846\n## [1] 18848\n## [1] 18850\n## [1] 18852\n## [1] 18854\n## [1] 18856\n## [1] 18858\n## [1] 18860\n## [1] 18862\n## [1] 18864\n## [1] 18866\n## [1] 18868\n## [1] 18870\n## [1] 18872\n## [1] 18874\n## [1] 18876\n## [1] 18878\n## [1] 18880\n## [1] 18882\n## [1] 18884\n## [1] 18886\n## [1] 18888\n## [1] 18890\n## [1] 18892\n## [1] 18894\n## [1] 18896\n## [1] 18898\n## [1] 18900\n## [1] 18902\n## [1] 18904\n## [1] 18906\n## [1] 18908\n## [1] 18910\n## [1] 18912\n## [1] 18914\n## [1] 18916\n## [1] 18918\n## [1] 18920\n## [1] 18922\n## [1] 18924\n## [1] 18926\n## [1] 18928\n## [1] 18930\n## [1] 18932\n## [1] 18934\n## [1] 18936\n## [1] 18938\n## [1] 18940\n## [1] 18942\n## [1] 18944\n## [1] 18946\n## [1] 18948\n## [1] 18950\n## [1] 18952\n## [1] 18954\n## [1] 18956\n## [1] 18958\n## [1] 18960\n## [1] 18962\n## [1] 18964\n## [1] 18966\n## [1] 18968\n## [1] 18970\n## [1] 18972\n## [1] 18974\n## [1] 18976\n## [1] 18978\n## [1] 18980\n## [1] 18982\n## [1] 18984\n## [1] 18986\n## [1] 18988\n## [1] 18990\n## [1] 18992\n## [1] 18994\n## [1] 18996\n## [1] 18998\n## [1] 19000\n## [1] 19002\n## [1] 19004\n## [1] 19006\n## [1] 19008\n## [1] 19010\n## [1] 19012\n## [1] 19014\n## [1] 19016\n## [1] 19018\n## [1] 19020\n## [1] 19022\n## [1] 19024\n## [1] 19026\n## [1] 19028\n## [1] 19030\n## [1] 19032\n## [1] 19034\n## [1] 19036\n## [1] 19038\n## [1] 19040\n## [1] 19042\n## [1] 19044\n## [1] 19046\n## [1] 19048\n## [1] 19050\n## [1] 19052\n## [1] 19054\n## [1] 19056\n## [1] 19058\n## [1] 19060\n## [1] 19062\n## [1] 19064\n## [1] 19066\n## [1] 19068\n## [1] 19070\n## [1] 19072\n## [1] 19074\n## [1] 19076\n## [1] 19078\n## [1] 19080\n## [1] 19082\n## [1] 19084\n## [1] 19086\n## [1] 19088\n## [1] 19090\n## [1] 19092\n## [1] 19094\n## [1] 19096\n## [1] 19098\n## [1] 19100\n## [1] 19102\n## [1] 19104\n## [1] 19106\n## [1] 19108\n## [1] 19110\n## [1] 19112\n## [1] 19114\n## [1] 19116\n## [1] 19118\n## [1] 19120\n## [1] 19122\n## [1] 19124\n## [1] 19126\n## [1] 19128\n## [1] 19130\n## [1] 19132\n## [1] 19134\n## [1] 19136\n## [1] 19138\n## [1] 19140\n## [1] 19142\n## [1] 19144\n## [1] 19146\n## [1] 19148\n## [1] 19150\n## [1] 19152\n## [1] 19154\n## [1] 19156\n## [1] 19158\n## [1] 19160\n## [1] 19162\n## [1] 19164\n## [1] 19166\n## [1] 19168\n## [1] 19170\n## [1] 19172\n## [1] 19174\n## [1] 19176\n## [1] 19178\n## [1] 19180\n## [1] 19182\n## [1] 19184\n## [1] 19186\n## [1] 19188\n## [1] 19190\n## [1] 19192\n## [1] 19194\n## [1] 19196\n## [1] 19198\n## [1] 19200\n## [1] 19202\n## [1] 19204\n## [1] 19206\n## [1] 19208\n## [1] 19210\n## [1] 19212\n## [1] 19214\n## [1] 19216\n## [1] 19218\n## [1] 19220\n## [1] 19222\n## [1] 19224\n## [1] 19226\n## [1] 19228\n## [1] 19230\n## [1] 19232\n## [1] 19234\n## [1] 19236\n## [1] 19238\n## [1] 19240\n## [1] 19242\n## [1] 19244\n## [1] 19246\n## [1] 19248\n## [1] 19250\n## [1] 19252\n## [1] 19254\n## [1] 19256\n## [1] 19258\n## [1] 19260\n## [1] 19262\n## [1] 19264\n## [1] 19266\n## [1] 19268\n## [1] 19270\n## [1] 19272\n## [1] 19274\n## [1] 19276\n## [1] 19278\n## [1] 19280\n## [1] 19282\n## [1] 19284\n## [1] 19286\n## [1] 19288\n## [1] 19290\n## [1] 19292\n## [1] 19294\n## [1] 19296\n## [1] 19298\n## [1] 19300\n## [1] 19302\n## [1] 19304\n## [1] 19306\n## [1] 19308\n## [1] 19310\n## [1] 19312\n## [1] 19314\n## [1] 19316\n## [1] 19318\n## [1] 19320\n## [1] 19322\n## [1] 19324\n## [1] 19326\n## [1] 19328\n## [1] 19330\n## [1] 19332\n## [1] 19334\n## [1] 19336\n## [1] 19338\n## [1] 19340\n## [1] 19342\n## [1] 19344\n## [1] 19346\n## [1] 19348\n## [1] 19350\n## [1] 19352\n## [1] 19354\n## [1] 19356\n## [1] 19358\n## [1] 19360\n## [1] 19362\n## [1] 19364\n## [1] 19366\n## [1] 19368\n## [1] 19370\n## [1] 19372\n## [1] 19374\n## [1] 19376\n## [1] 19378\n## [1] 19380\n## [1] 19382\n## [1] 19384\n## [1] 19386\n## [1] 19388\n## [1] 19390\n## [1] 19392\n## [1] 19394\n## [1] 19396\n## [1] 19398\n## [1] 19400\n## [1] 19402\n## [1] 19404\n## [1] 19406\n## [1] 19408\n## [1] 19410\n## [1] 19412\n## [1] 19414\n## [1] 19416\n## [1] 19418\n## [1] 19420\n## [1] 19422\n## [1] 19424\n## [1] 19426\n## [1] 19428\n## [1] 19430\n## [1] 19432\n## [1] 19434\n## [1] 19436\n## [1] 19438\n## [1] 19440\n## [1] 19442\n## [1] 19444\n## [1] 19446\n## [1] 19448\n## [1] 19450\n## [1] 19452\n## [1] 19454\n## [1] 19456\n## [1] 19458\n## [1] 19460\n## [1] 19462\n## [1] 19464\n## [1] 19466\n## [1] 19468\n## [1] 19470\n## [1] 19472\n## [1] 19474\n## [1] 19476\n## [1] 19478\n## [1] 19480\n## [1] 19482\n## [1] 19484\n## [1] 19486\n## [1] 19488\n## [1] 19490\n## [1] 19492\n## [1] 19494\n## [1] 19496\n## [1] 19498\n## [1] 19500\n## [1] 19502\n## [1] 19504\n## [1] 19506\n## [1] 19508\n## [1] 19510\n## [1] 19512\n## [1] 19514\n## [1] 19516\n## [1] 19518\n## [1] 19520\n## [1] 19522\n## [1] 19524\n## [1] 19526\n## [1] 19528\n## [1] 19530\n## [1] 19532\n## [1] 19534\n## [1] 19536\n## [1] 19538\n## [1] 19540\n## [1] 19542\n## [1] 19544\n## [1] 19546\n## [1] 19548\n## [1] 19550\n## [1] 19552\n## [1] 19554\n## [1] 19556\n## [1] 19558\n## [1] 19560\n## [1] 19562\n## [1] 19564\n## [1] 19566\n## [1] 19568\n## [1] 19570\n## [1] 19572\n## [1] 19574\n## [1] 19576\n## [1] 19578\n## [1] 19580\n## [1] 19582\n## [1] 19584\n## [1] 19586\n## [1] 19588\n## [1] 19590\n## [1] 19592\n## [1] 19594\n## [1] 19596\n## [1] 19598\n## [1] 19600\n## [1] 19602\n## [1] 19604\n## [1] 19606\n## [1] 19608\n## [1] 19610\n## [1] 19612\n## [1] 19614\n## [1] 19616\n## [1] 19618\n## [1] 19620\n## [1] 19622\n## [1] 19624\n## [1] 19626\n## [1] 19628\n## [1] 19630\n## [1] 19632\n## [1] 19634\n## [1] 19636\n## [1] 19638\n## [1] 19640\n## [1] 19642\n## [1] 19644\n## [1] 19646\n## [1] 19648\n## [1] 19650\n## [1] 19652\n## [1] 19654\n## [1] 19656\n## [1] 19658\n## [1] 19660\n## [1] 19662\n## [1] 19664\n## [1] 19666\n## [1] 19668\n## [1] 19670\n## [1] 19672\n## [1] 19674\n## [1] 19676\n## [1] 19678\n## [1] 19680\n## [1] 19682\n## [1] 19684\n## [1] 19686\n## [1] 19688\n## [1] 19690\n## [1] 19692\n## [1] 19694\n## [1] 19696\n## [1] 19698\n## [1] 19700\n## [1] 19702\n## [1] 19704\n## [1] 19706\n## [1] 19708\n## [1] 19710\n## [1] 19712\n## [1] 19714\n## [1] 19716\n## [1] 19718\n## [1] 19720\n## [1] 19722\n## [1] 19724\n## [1] 19726\n## [1] 19728\n## [1] 19730\n## [1] 19732\n## [1] 19734\n## [1] 19736\n## [1] 19738\n## [1] 19740\n## [1] 19742\n## [1] 19744\n## [1] 19746\n## [1] 19748\n## [1] 19750\n## [1] 19752\n## [1] 19754\n## [1] 19756\n## [1] 19758\n## [1] 19760\n## [1] 19762\n## [1] 19764\n## [1] 19766\n## [1] 19768\n## [1] 19770\n## [1] 19772\n## [1] 19774\n## [1] 19776\n## [1] 19778\n## [1] 19780\n## [1] 19782\n## [1] 19784\n## [1] 19786\n## [1] 19788\n## [1] 19790\n## [1] 19792\n## [1] 19794\n## [1] 19796\n## [1] 19798\n## [1] 19800\n## [1] 19802\n## [1] 19804\n## [1] 19806\n## [1] 19808\n## [1] 19810\n## [1] 19812\n## [1] 19814\n## [1] 19816\n## [1] 19818\n## [1] 19820\n## [1] 19822\n## [1] 19824\n## [1] 19826\n## [1] 19828\n## [1] 19830\n## [1] 19832\n## [1] 19834\n## [1] 19836\n## [1] 19838\n## [1] 19840\n## [1] 19842\n## [1] 19844\n## [1] 19846\n## [1] 19848\n## [1] 19850\n## [1] 19852\n## [1] 19854\n## [1] 19856\n## [1] 19858\n## [1] 19860\n## [1] 19862\n## [1] 19864\n## [1] 19866\n## [1] 19868\n## [1] 19870\n## [1] 19872\n## [1] 19874\n## [1] 19876\n## [1] 19878\n## [1] 19880\n## [1] 19882\n## [1] 19884\n## [1] 19886\n## [1] 19888\n## [1] 19890\n## [1] 19892\n## [1] 19894\n## [1] 19896\n## [1] 19898\n## [1] 19900\n## [1] 19902\n## [1] 19904\n## [1] 19906\n## [1] 19908\n## [1] 19910\n## [1] 19912\n## [1] 19914\n## [1] 19916\n## [1] 19918\n## [1] 19920\n## [1] 19922\n## [1] 19924\n## [1] 19926\n## [1] 19928\n## [1] 19930\n## [1] 19932\n## [1] 19934\n## [1] 19936\n## [1] 19938\n## [1] 19940\n## [1] 19942\n## [1] 19944\n## [1] 19946\n## [1] 19948\n## [1] 19950\n## [1] 19952\n## [1] 19954\n## [1] 19956\n## [1] 19958\n## [1] 19960\n## [1] 19962\n## [1] 19964\n## [1] 19966\n## [1] 19968\n## [1] 19970\n## [1] 19972\n## [1] 19974\n## [1] 19976\n## [1] 19978\n## [1] 19980\n## [1] 19982\n## [1] 19984\n## [1] 19986\n## [1] 19988\n## [1] 19990\n## [1] 19992\n## [1] 19994\n## [1] 19996\n## [1] 19998\n## [1] 20000\n\nfor (i in 1:10000) {\n    a &lt;- i * 2 / 1521 + 10000\n    print(a)\n}\n## [1] 10000\n## [1] 10000\n## [1] 10000\n## [1] 10000.01\n## [1] 10000.01\n## [1] 10000.01\n## [1] 10000.01\n## [1] 10000.01\n## [1] 10000.01\n## [1] 10000.01\n## [1] 10000.01\n## [1] 10000.02\n## [1] 10000.02\n## [1] 10000.02\n## [1] 10000.02\n## [1] 10000.02\n## [1] 10000.02\n## [1] 10000.02\n## [1] 10000.02\n## [1] 10000.03\n## [1] 10000.03\n## [1] 10000.03\n## [1] 10000.03\n## [1] 10000.03\n## [1] 10000.03\n## [1] 10000.03\n## [1] 10000.04\n## [1] 10000.04\n## [1] 10000.04\n## [1] 10000.04\n## [1] 10000.04\n## [1] 10000.04\n## [1] 10000.04\n## [1] 10000.04\n## [1] 10000.05\n## [1] 10000.05\n## [1] 10000.05\n## [1] 10000.05\n## [1] 10000.05\n## [1] 10000.05\n## [1] 10000.05\n## [1] 10000.06\n## [1] 10000.06\n## [1] 10000.06\n## [1] 10000.06\n## [1] 10000.06\n## [1] 10000.06\n## [1] 10000.06\n## [1] 10000.06\n## [1] 10000.07\n## [1] 10000.07\n## [1] 10000.07\n## [1] 10000.07\n## [1] 10000.07\n## [1] 10000.07\n## [1] 10000.07\n## [1] 10000.07\n## [1] 10000.08\n## [1] 10000.08\n## [1] 10000.08\n## [1] 10000.08\n## [1] 10000.08\n## [1] 10000.08\n## [1] 10000.08\n## [1] 10000.09\n## [1] 10000.09\n## [1] 10000.09\n## [1] 10000.09\n## [1] 10000.09\n## [1] 10000.09\n## [1] 10000.09\n## [1] 10000.09\n## [1] 10000.1\n## [1] 10000.1\n## [1] 10000.1\n## [1] 10000.1\n## [1] 10000.1\n## [1] 10000.1\n## [1] 10000.1\n## [1] 10000.11\n## [1] 10000.11\n## [1] 10000.11\n## [1] 10000.11\n## [1] 10000.11\n## [1] 10000.11\n## [1] 10000.11\n## [1] 10000.11\n## [1] 10000.12\n## [1] 10000.12\n## [1] 10000.12\n## [1] 10000.12\n## [1] 10000.12\n## [1] 10000.12\n## [1] 10000.12\n## [1] 10000.12\n## [1] 10000.13\n## [1] 10000.13\n## [1] 10000.13\n## [1] 10000.13\n## [1] 10000.13\n## [1] 10000.13\n## [1] 10000.13\n## [1] 10000.14\n## [1] 10000.14\n## [1] 10000.14\n## [1] 10000.14\n## [1] 10000.14\n## [1] 10000.14\n## [1] 10000.14\n## [1] 10000.14\n## [1] 10000.15\n## [1] 10000.15\n## [1] 10000.15\n## [1] 10000.15\n## [1] 10000.15\n## [1] 10000.15\n## [1] 10000.15\n## [1] 10000.16\n## [1] 10000.16\n## [1] 10000.16\n## [1] 10000.16\n## [1] 10000.16\n## [1] 10000.16\n## [1] 10000.16\n## [1] 10000.16\n## [1] 10000.17\n## [1] 10000.17\n## [1] 10000.17\n## [1] 10000.17\n## [1] 10000.17\n## [1] 10000.17\n## [1] 10000.17\n## [1] 10000.17\n## [1] 10000.18\n## [1] 10000.18\n## [1] 10000.18\n## [1] 10000.18\n## [1] 10000.18\n## [1] 10000.18\n## [1] 10000.18\n## [1] 10000.19\n## [1] 10000.19\n## [1] 10000.19\n## [1] 10000.19\n## [1] 10000.19\n## [1] 10000.19\n## [1] 10000.19\n## [1] 10000.19\n## [1] 10000.2\n## [1] 10000.2\n## [1] 10000.2\n## [1] 10000.2\n## [1] 10000.2\n## [1] 10000.2\n## [1] 10000.2\n## [1] 10000.21\n## [1] 10000.21\n## [1] 10000.21\n## [1] 10000.21\n## [1] 10000.21\n## [1] 10000.21\n## [1] 10000.21\n## [1] 10000.21\n## [1] 10000.22\n## [1] 10000.22\n## [1] 10000.22\n## [1] 10000.22\n## [1] 10000.22\n## [1] 10000.22\n## [1] 10000.22\n## [1] 10000.22\n## [1] 10000.23\n## [1] 10000.23\n## [1] 10000.23\n## [1] 10000.23\n## [1] 10000.23\n## [1] 10000.23\n## [1] 10000.23\n## [1] 10000.24\n## [1] 10000.24\n## [1] 10000.24\n## [1] 10000.24\n## [1] 10000.24\n## [1] 10000.24\n## [1] 10000.24\n## [1] 10000.24\n## [1] 10000.25\n## [1] 10000.25\n## [1] 10000.25\n## [1] 10000.25\n## [1] 10000.25\n## [1] 10000.25\n## [1] 10000.25\n## [1] 10000.26\n## [1] 10000.26\n## [1] 10000.26\n## [1] 10000.26\n## [1] 10000.26\n## [1] 10000.26\n## [1] 10000.26\n## [1] 10000.26\n## [1] 10000.27\n## [1] 10000.27\n## [1] 10000.27\n## [1] 10000.27\n## [1] 10000.27\n## [1] 10000.27\n## [1] 10000.27\n## [1] 10000.27\n## [1] 10000.28\n## [1] 10000.28\n## [1] 10000.28\n## [1] 10000.28\n## [1] 10000.28\n## [1] 10000.28\n## [1] 10000.28\n## [1] 10000.29\n## [1] 10000.29\n## [1] 10000.29\n## [1] 10000.29\n## [1] 10000.29\n## [1] 10000.29\n## [1] 10000.29\n## [1] 10000.29\n## [1] 10000.3\n## [1] 10000.3\n## [1] 10000.3\n## [1] 10000.3\n## [1] 10000.3\n## [1] 10000.3\n## [1] 10000.3\n## [1] 10000.31\n## [1] 10000.31\n## [1] 10000.31\n## [1] 10000.31\n## [1] 10000.31\n## [1] 10000.31\n## [1] 10000.31\n## [1] 10000.31\n## [1] 10000.32\n## [1] 10000.32\n## [1] 10000.32\n## [1] 10000.32\n## [1] 10000.32\n## [1] 10000.32\n## [1] 10000.32\n## [1] 10000.32\n## [1] 10000.33\n## [1] 10000.33\n## [1] 10000.33\n## [1] 10000.33\n## [1] 10000.33\n## [1] 10000.33\n## [1] 10000.33\n## [1] 10000.34\n## [1] 10000.34\n## [1] 10000.34\n## [1] 10000.34\n## [1] 10000.34\n## [1] 10000.34\n## [1] 10000.34\n## [1] 10000.34\n## [1] 10000.35\n## [1] 10000.35\n## [1] 10000.35\n## [1] 10000.35\n## [1] 10000.35\n## [1] 10000.35\n## [1] 10000.35\n## [1] 10000.36\n## [1] 10000.36\n## [1] 10000.36\n## [1] 10000.36\n## [1] 10000.36\n## [1] 10000.36\n## [1] 10000.36\n## [1] 10000.36\n## [1] 10000.37\n## [1] 10000.37\n## [1] 10000.37\n## [1] 10000.37\n## [1] 10000.37\n## [1] 10000.37\n## [1] 10000.37\n## [1] 10000.37\n## [1] 10000.38\n## [1] 10000.38\n## [1] 10000.38\n## [1] 10000.38\n## [1] 10000.38\n## [1] 10000.38\n## [1] 10000.38\n## [1] 10000.39\n## [1] 10000.39\n## [1] 10000.39\n## [1] 10000.39\n## [1] 10000.39\n## [1] 10000.39\n## [1] 10000.39\n## [1] 10000.39\n## [1] 10000.4\n## [1] 10000.4\n## [1] 10000.4\n## [1] 10000.4\n## [1] 10000.4\n## [1] 10000.4\n## [1] 10000.4\n## [1] 10000.4\n## [1] 10000.41\n## [1] 10000.41\n## [1] 10000.41\n## [1] 10000.41\n## [1] 10000.41\n## [1] 10000.41\n## [1] 10000.41\n## [1] 10000.42\n## [1] 10000.42\n## [1] 10000.42\n## [1] 10000.42\n## [1] 10000.42\n## [1] 10000.42\n## [1] 10000.42\n## [1] 10000.42\n## [1] 10000.43\n## [1] 10000.43\n## [1] 10000.43\n## [1] 10000.43\n## [1] 10000.43\n## [1] 10000.43\n## [1] 10000.43\n## [1] 10000.44\n## [1] 10000.44\n## [1] 10000.44\n## [1] 10000.44\n## [1] 10000.44\n## [1] 10000.44\n## [1] 10000.44\n## [1] 10000.44\n## [1] 10000.45\n## [1] 10000.45\n## [1] 10000.45\n## [1] 10000.45\n## [1] 10000.45\n## [1] 10000.45\n## [1] 10000.45\n## [1] 10000.45\n## [1] 10000.46\n## [1] 10000.46\n## [1] 10000.46\n## [1] 10000.46\n## [1] 10000.46\n## [1] 10000.46\n## [1] 10000.46\n## [1] 10000.47\n## [1] 10000.47\n## [1] 10000.47\n## [1] 10000.47\n## [1] 10000.47\n## [1] 10000.47\n## [1] 10000.47\n## [1] 10000.47\n## [1] 10000.48\n## [1] 10000.48\n## [1] 10000.48\n## [1] 10000.48\n## [1] 10000.48\n## [1] 10000.48\n## [1] 10000.48\n## [1] 10000.49\n## [1] 10000.49\n## [1] 10000.49\n## [1] 10000.49\n## [1] 10000.49\n## [1] 10000.49\n## [1] 10000.49\n## [1] 10000.49\n## [1] 10000.5\n## [1] 10000.5\n## [1] 10000.5\n## [1] 10000.5\n## [1] 10000.5\n## [1] 10000.5\n## [1] 10000.5\n## [1] 10000.5\n## [1] 10000.51\n## [1] 10000.51\n## [1] 10000.51\n## [1] 10000.51\n## [1] 10000.51\n## [1] 10000.51\n## [1] 10000.51\n## [1] 10000.52\n## [1] 10000.52\n## [1] 10000.52\n## [1] 10000.52\n## [1] 10000.52\n## [1] 10000.52\n## [1] 10000.52\n## [1] 10000.52\n## [1] 10000.53\n## [1] 10000.53\n## [1] 10000.53\n## [1] 10000.53\n## [1] 10000.53\n## [1] 10000.53\n## [1] 10000.53\n## [1] 10000.54\n## [1] 10000.54\n## [1] 10000.54\n## [1] 10000.54\n## [1] 10000.54\n## [1] 10000.54\n## [1] 10000.54\n## [1] 10000.54\n## [1] 10000.55\n## [1] 10000.55\n## [1] 10000.55\n## [1] 10000.55\n## [1] 10000.55\n## [1] 10000.55\n## [1] 10000.55\n## [1] 10000.55\n## [1] 10000.56\n## [1] 10000.56\n## [1] 10000.56\n## [1] 10000.56\n## [1] 10000.56\n## [1] 10000.56\n## [1] 10000.56\n## [1] 10000.57\n## [1] 10000.57\n## [1] 10000.57\n## [1] 10000.57\n## [1] 10000.57\n## [1] 10000.57\n## [1] 10000.57\n## [1] 10000.57\n## [1] 10000.58\n## [1] 10000.58\n## [1] 10000.58\n## [1] 10000.58\n## [1] 10000.58\n## [1] 10000.58\n## [1] 10000.58\n## [1] 10000.59\n## [1] 10000.59\n## [1] 10000.59\n## [1] 10000.59\n## [1] 10000.59\n## [1] 10000.59\n## [1] 10000.59\n## [1] 10000.59\n## [1] 10000.6\n## [1] 10000.6\n## [1] 10000.6\n## [1] 10000.6\n## [1] 10000.6\n## [1] 10000.6\n## [1] 10000.6\n## [1] 10000.6\n## [1] 10000.61\n## [1] 10000.61\n## [1] 10000.61\n## [1] 10000.61\n## [1] 10000.61\n## [1] 10000.61\n## [1] 10000.61\n## [1] 10000.62\n## [1] 10000.62\n## [1] 10000.62\n## [1] 10000.62\n## [1] 10000.62\n## [1] 10000.62\n## [1] 10000.62\n## [1] 10000.62\n## [1] 10000.63\n## [1] 10000.63\n## [1] 10000.63\n## [1] 10000.63\n## [1] 10000.63\n## [1] 10000.63\n## [1] 10000.63\n## [1] 10000.64\n## [1] 10000.64\n## [1] 10000.64\n## [1] 10000.64\n## [1] 10000.64\n## [1] 10000.64\n## [1] 10000.64\n## [1] 10000.64\n## [1] 10000.65\n## [1] 10000.65\n## [1] 10000.65\n## [1] 10000.65\n## [1] 10000.65\n## [1] 10000.65\n## [1] 10000.65\n## [1] 10000.65\n## [1] 10000.66\n## [1] 10000.66\n## [1] 10000.66\n## [1] 10000.66\n## [1] 10000.66\n## [1] 10000.66\n## [1] 10000.66\n## [1] 10000.67\n## [1] 10000.67\n## [1] 10000.67\n## [1] 10000.67\n## [1] 10000.67\n## [1] 10000.67\n## [1] 10000.67\n## [1] 10000.67\n## [1] 10000.68\n## [1] 10000.68\n## [1] 10000.68\n## [1] 10000.68\n## [1] 10000.68\n## [1] 10000.68\n## [1] 10000.68\n## [1] 10000.69\n## [1] 10000.69\n## [1] 10000.69\n## [1] 10000.69\n## [1] 10000.69\n## [1] 10000.69\n## [1] 10000.69\n## [1] 10000.69\n## [1] 10000.7\n## [1] 10000.7\n## [1] 10000.7\n## [1] 10000.7\n## [1] 10000.7\n## [1] 10000.7\n## [1] 10000.7\n## [1] 10000.7\n## [1] 10000.71\n## [1] 10000.71\n## [1] 10000.71\n## [1] 10000.71\n## [1] 10000.71\n## [1] 10000.71\n## [1] 10000.71\n## [1] 10000.72\n## [1] 10000.72\n## [1] 10000.72\n## [1] 10000.72\n## [1] 10000.72\n## [1] 10000.72\n## [1] 10000.72\n## [1] 10000.72\n## [1] 10000.73\n## [1] 10000.73\n## [1] 10000.73\n## [1] 10000.73\n## [1] 10000.73\n## [1] 10000.73\n## [1] 10000.73\n## [1] 10000.74\n## [1] 10000.74\n## [1] 10000.74\n## [1] 10000.74\n## [1] 10000.74\n## [1] 10000.74\n## [1] 10000.74\n## [1] 10000.74\n## [1] 10000.75\n## [1] 10000.75\n## [1] 10000.75\n## [1] 10000.75\n## [1] 10000.75\n## [1] 10000.75\n## [1] 10000.75\n## [1] 10000.75\n## [1] 10000.76\n## [1] 10000.76\n## [1] 10000.76\n## [1] 10000.76\n## [1] 10000.76\n## [1] 10000.76\n## [1] 10000.76\n## [1] 10000.77\n## [1] 10000.77\n## [1] 10000.77\n## [1] 10000.77\n## [1] 10000.77\n## [1] 10000.77\n## [1] 10000.77\n## [1] 10000.77\n## [1] 10000.78\n## [1] 10000.78\n## [1] 10000.78\n## [1] 10000.78\n## [1] 10000.78\n## [1] 10000.78\n## [1] 10000.78\n## [1] 10000.79\n## [1] 10000.79\n## [1] 10000.79\n## [1] 10000.79\n## [1] 10000.79\n## [1] 10000.79\n## [1] 10000.79\n## [1] 10000.79\n## [1] 10000.8\n## [1] 10000.8\n## [1] 10000.8\n## [1] 10000.8\n## [1] 10000.8\n## [1] 10000.8\n## [1] 10000.8\n## [1] 10000.8\n## [1] 10000.81\n## [1] 10000.81\n## [1] 10000.81\n## [1] 10000.81\n## [1] 10000.81\n## [1] 10000.81\n## [1] 10000.81\n## [1] 10000.82\n## [1] 10000.82\n## [1] 10000.82\n## [1] 10000.82\n## [1] 10000.82\n## [1] 10000.82\n## [1] 10000.82\n## [1] 10000.82\n## [1] 10000.83\n## [1] 10000.83\n## [1] 10000.83\n## [1] 10000.83\n## [1] 10000.83\n## [1] 10000.83\n## [1] 10000.83\n## [1] 10000.83\n## [1] 10000.84\n## [1] 10000.84\n## [1] 10000.84\n## [1] 10000.84\n## [1] 10000.84\n## [1] 10000.84\n## [1] 10000.84\n## [1] 10000.85\n## [1] 10000.85\n## [1] 10000.85\n## [1] 10000.85\n## [1] 10000.85\n## [1] 10000.85\n## [1] 10000.85\n## [1] 10000.85\n## [1] 10000.86\n## [1] 10000.86\n## [1] 10000.86\n## [1] 10000.86\n## [1] 10000.86\n## [1] 10000.86\n## [1] 10000.86\n## [1] 10000.87\n## [1] 10000.87\n## [1] 10000.87\n## [1] 10000.87\n## [1] 10000.87\n## [1] 10000.87\n## [1] 10000.87\n## [1] 10000.87\n## [1] 10000.88\n## [1] 10000.88\n## [1] 10000.88\n## [1] 10000.88\n## [1] 10000.88\n## [1] 10000.88\n## [1] 10000.88\n## [1] 10000.88\n## [1] 10000.89\n## [1] 10000.89\n## [1] 10000.89\n## [1] 10000.89\n## [1] 10000.89\n## [1] 10000.89\n## [1] 10000.89\n## [1] 10000.9\n## [1] 10000.9\n## [1] 10000.9\n## [1] 10000.9\n## [1] 10000.9\n## [1] 10000.9\n## [1] 10000.9\n## [1] 10000.9\n## [1] 10000.91\n## [1] 10000.91\n## [1] 10000.91\n## [1] 10000.91\n## [1] 10000.91\n## [1] 10000.91\n## [1] 10000.91\n## [1] 10000.92\n## [1] 10000.92\n## [1] 10000.92\n## [1] 10000.92\n## [1] 10000.92\n## [1] 10000.92\n## [1] 10000.92\n## [1] 10000.92\n## [1] 10000.93\n## [1] 10000.93\n## [1] 10000.93\n## [1] 10000.93\n## [1] 10000.93\n## [1] 10000.93\n## [1] 10000.93\n## [1] 10000.93\n## [1] 10000.94\n## [1] 10000.94\n## [1] 10000.94\n## [1] 10000.94\n## [1] 10000.94\n## [1] 10000.94\n## [1] 10000.94\n## [1] 10000.95\n## [1] 10000.95\n## [1] 10000.95\n## [1] 10000.95\n## [1] 10000.95\n## [1] 10000.95\n## [1] 10000.95\n## [1] 10000.95\n## [1] 10000.96\n## [1] 10000.96\n## [1] 10000.96\n## [1] 10000.96\n## [1] 10000.96\n## [1] 10000.96\n## [1] 10000.96\n## [1] 10000.97\n## [1] 10000.97\n## [1] 10000.97\n## [1] 10000.97\n## [1] 10000.97\n## [1] 10000.97\n## [1] 10000.97\n## [1] 10000.97\n## [1] 10000.98\n## [1] 10000.98\n## [1] 10000.98\n## [1] 10000.98\n## [1] 10000.98\n## [1] 10000.98\n## [1] 10000.98\n## [1] 10000.98\n## [1] 10000.99\n## [1] 10000.99\n## [1] 10000.99\n## [1] 10000.99\n## [1] 10000.99\n## [1] 10000.99\n## [1] 10000.99\n## [1] 10001\n## [1] 10001\n## [1] 10001\n## [1] 10001\n## [1] 10001\n## [1] 10001\n## [1] 10001\n## [1] 10001\n## [1] 10001.01\n## [1] 10001.01\n## [1] 10001.01\n## [1] 10001.01\n## [1] 10001.01\n## [1] 10001.01\n## [1] 10001.01\n## [1] 10001.02\n## [1] 10001.02\n## [1] 10001.02\n## [1] 10001.02\n## [1] 10001.02\n## [1] 10001.02\n## [1] 10001.02\n## [1] 10001.02\n## [1] 10001.03\n## [1] 10001.03\n## [1] 10001.03\n## [1] 10001.03\n## [1] 10001.03\n## [1] 10001.03\n## [1] 10001.03\n## [1] 10001.03\n## [1] 10001.04\n## [1] 10001.04\n## [1] 10001.04\n## [1] 10001.04\n## [1] 10001.04\n## [1] 10001.04\n## [1] 10001.04\n## [1] 10001.05\n## [1] 10001.05\n## [1] 10001.05\n## [1] 10001.05\n## [1] 10001.05\n## [1] 10001.05\n## [1] 10001.05\n## [1] 10001.05\n## [1] 10001.06\n## [1] 10001.06\n## [1] 10001.06\n## [1] 10001.06\n## [1] 10001.06\n## [1] 10001.06\n## [1] 10001.06\n## [1] 10001.07\n## [1] 10001.07\n## [1] 10001.07\n## [1] 10001.07\n## [1] 10001.07\n## [1] 10001.07\n## [1] 10001.07\n## [1] 10001.07\n## [1] 10001.08\n## [1] 10001.08\n## [1] 10001.08\n## [1] 10001.08\n## [1] 10001.08\n## [1] 10001.08\n## [1] 10001.08\n## [1] 10001.08\n## [1] 10001.09\n## [1] 10001.09\n## [1] 10001.09\n## [1] 10001.09\n## [1] 10001.09\n## [1] 10001.09\n## [1] 10001.09\n## [1] 10001.1\n## [1] 10001.1\n## [1] 10001.1\n## [1] 10001.1\n## [1] 10001.1\n## [1] 10001.1\n## [1] 10001.1\n## [1] 10001.1\n## [1] 10001.11\n## [1] 10001.11\n## [1] 10001.11\n## [1] 10001.11\n## [1] 10001.11\n## [1] 10001.11\n## [1] 10001.11\n## [1] 10001.12\n## [1] 10001.12\n## [1] 10001.12\n## [1] 10001.12\n## [1] 10001.12\n## [1] 10001.12\n## [1] 10001.12\n## [1] 10001.12\n## [1] 10001.13\n## [1] 10001.13\n## [1] 10001.13\n## [1] 10001.13\n## [1] 10001.13\n## [1] 10001.13\n## [1] 10001.13\n## [1] 10001.13\n## [1] 10001.14\n## [1] 10001.14\n## [1] 10001.14\n## [1] 10001.14\n## [1] 10001.14\n## [1] 10001.14\n## [1] 10001.14\n## [1] 10001.15\n## [1] 10001.15\n## [1] 10001.15\n## [1] 10001.15\n## [1] 10001.15\n## [1] 10001.15\n## [1] 10001.15\n## [1] 10001.15\n## [1] 10001.16\n## [1] 10001.16\n## [1] 10001.16\n## [1] 10001.16\n## [1] 10001.16\n## [1] 10001.16\n## [1] 10001.16\n## [1] 10001.17\n## [1] 10001.17\n## [1] 10001.17\n## [1] 10001.17\n## [1] 10001.17\n## [1] 10001.17\n## [1] 10001.17\n## [1] 10001.17\n## [1] 10001.18\n## [1] 10001.18\n## [1] 10001.18\n## [1] 10001.18\n## [1] 10001.18\n## [1] 10001.18\n## [1] 10001.18\n## [1] 10001.18\n## [1] 10001.19\n## [1] 10001.19\n## [1] 10001.19\n## [1] 10001.19\n## [1] 10001.19\n## [1] 10001.19\n## [1] 10001.19\n## [1] 10001.2\n## [1] 10001.2\n## [1] 10001.2\n## [1] 10001.2\n## [1] 10001.2\n## [1] 10001.2\n## [1] 10001.2\n## [1] 10001.2\n## [1] 10001.21\n## [1] 10001.21\n## [1] 10001.21\n## [1] 10001.21\n## [1] 10001.21\n## [1] 10001.21\n## [1] 10001.21\n## [1] 10001.21\n## [1] 10001.22\n## [1] 10001.22\n## [1] 10001.22\n## [1] 10001.22\n## [1] 10001.22\n## [1] 10001.22\n## [1] 10001.22\n## [1] 10001.23\n## [1] 10001.23\n## [1] 10001.23\n## [1] 10001.23\n## [1] 10001.23\n## [1] 10001.23\n## [1] 10001.23\n## [1] 10001.23\n## [1] 10001.24\n## [1] 10001.24\n## [1] 10001.24\n## [1] 10001.24\n## [1] 10001.24\n## [1] 10001.24\n## [1] 10001.24\n## [1] 10001.25\n## [1] 10001.25\n## [1] 10001.25\n## [1] 10001.25\n## [1] 10001.25\n## [1] 10001.25\n## [1] 10001.25\n## [1] 10001.25\n## [1] 10001.26\n## [1] 10001.26\n## [1] 10001.26\n## [1] 10001.26\n## [1] 10001.26\n## [1] 10001.26\n## [1] 10001.26\n## [1] 10001.26\n## [1] 10001.27\n## [1] 10001.27\n## [1] 10001.27\n## [1] 10001.27\n## [1] 10001.27\n## [1] 10001.27\n## [1] 10001.27\n## [1] 10001.28\n## [1] 10001.28\n## [1] 10001.28\n## [1] 10001.28\n## [1] 10001.28\n## [1] 10001.28\n## [1] 10001.28\n## [1] 10001.28\n## [1] 10001.29\n## [1] 10001.29\n## [1] 10001.29\n## [1] 10001.29\n## [1] 10001.29\n## [1] 10001.29\n## [1] 10001.29\n## [1] 10001.3\n## [1] 10001.3\n## [1] 10001.3\n## [1] 10001.3\n## [1] 10001.3\n## [1] 10001.3\n## [1] 10001.3\n## [1] 10001.3\n## [1] 10001.31\n## [1] 10001.31\n## [1] 10001.31\n## [1] 10001.31\n## [1] 10001.31\n## [1] 10001.31\n## [1] 10001.31\n## [1] 10001.31\n## [1] 10001.32\n## [1] 10001.32\n## [1] 10001.32\n## [1] 10001.32\n## [1] 10001.32\n## [1] 10001.32\n## [1] 10001.32\n## [1] 10001.33\n## [1] 10001.33\n## [1] 10001.33\n## [1] 10001.33\n## [1] 10001.33\n## [1] 10001.33\n## [1] 10001.33\n## [1] 10001.33\n## [1] 10001.34\n## [1] 10001.34\n## [1] 10001.34\n## [1] 10001.34\n## [1] 10001.34\n## [1] 10001.34\n## [1] 10001.34\n## [1] 10001.35\n## [1] 10001.35\n## [1] 10001.35\n## [1] 10001.35\n## [1] 10001.35\n## [1] 10001.35\n## [1] 10001.35\n## [1] 10001.35\n## [1] 10001.36\n## [1] 10001.36\n## [1] 10001.36\n## [1] 10001.36\n## [1] 10001.36\n## [1] 10001.36\n## [1] 10001.36\n## [1] 10001.36\n## [1] 10001.37\n## [1] 10001.37\n## [1] 10001.37\n## [1] 10001.37\n## [1] 10001.37\n## [1] 10001.37\n## [1] 10001.37\n## [1] 10001.38\n## [1] 10001.38\n## [1] 10001.38\n## [1] 10001.38\n## [1] 10001.38\n## [1] 10001.38\n## [1] 10001.38\n## [1] 10001.38\n## [1] 10001.39\n## [1] 10001.39\n## [1] 10001.39\n## [1] 10001.39\n## [1] 10001.39\n## [1] 10001.39\n## [1] 10001.39\n## [1] 10001.4\n## [1] 10001.4\n## [1] 10001.4\n## [1] 10001.4\n## [1] 10001.4\n## [1] 10001.4\n## [1] 10001.4\n## [1] 10001.4\n## [1] 10001.41\n## [1] 10001.41\n## [1] 10001.41\n## [1] 10001.41\n## [1] 10001.41\n## [1] 10001.41\n## [1] 10001.41\n## [1] 10001.41\n## [1] 10001.42\n## [1] 10001.42\n## [1] 10001.42\n## [1] 10001.42\n## [1] 10001.42\n## [1] 10001.42\n## [1] 10001.42\n## [1] 10001.43\n## [1] 10001.43\n## [1] 10001.43\n## [1] 10001.43\n## [1] 10001.43\n## [1] 10001.43\n## [1] 10001.43\n## [1] 10001.43\n## [1] 10001.44\n## [1] 10001.44\n## [1] 10001.44\n## [1] 10001.44\n## [1] 10001.44\n## [1] 10001.44\n## [1] 10001.44\n## [1] 10001.45\n## [1] 10001.45\n## [1] 10001.45\n## [1] 10001.45\n## [1] 10001.45\n## [1] 10001.45\n## [1] 10001.45\n## [1] 10001.45\n## [1] 10001.46\n## [1] 10001.46\n## [1] 10001.46\n## [1] 10001.46\n## [1] 10001.46\n## [1] 10001.46\n## [1] 10001.46\n## [1] 10001.46\n## [1] 10001.47\n## [1] 10001.47\n## [1] 10001.47\n## [1] 10001.47\n## [1] 10001.47\n## [1] 10001.47\n## [1] 10001.47\n## [1] 10001.48\n## [1] 10001.48\n## [1] 10001.48\n## [1] 10001.48\n## [1] 10001.48\n## [1] 10001.48\n## [1] 10001.48\n## [1] 10001.48\n## [1] 10001.49\n## [1] 10001.49\n## [1] 10001.49\n## [1] 10001.49\n## [1] 10001.49\n## [1] 10001.49\n## [1] 10001.49\n## [1] 10001.5\n## [1] 10001.5\n## [1] 10001.5\n## [1] 10001.5\n## [1] 10001.5\n## [1] 10001.5\n## [1] 10001.5\n## [1] 10001.5\n## [1] 10001.51\n## [1] 10001.51\n## [1] 10001.51\n## [1] 10001.51\n## [1] 10001.51\n## [1] 10001.51\n## [1] 10001.51\n## [1] 10001.51\n## [1] 10001.52\n## [1] 10001.52\n## [1] 10001.52\n## [1] 10001.52\n## [1] 10001.52\n## [1] 10001.52\n## [1] 10001.52\n## [1] 10001.53\n## [1] 10001.53\n## [1] 10001.53\n## [1] 10001.53\n## [1] 10001.53\n## [1] 10001.53\n## [1] 10001.53\n## [1] 10001.53\n## [1] 10001.54\n## [1] 10001.54\n## [1] 10001.54\n## [1] 10001.54\n## [1] 10001.54\n## [1] 10001.54\n## [1] 10001.54\n## [1] 10001.55\n## [1] 10001.55\n## [1] 10001.55\n## [1] 10001.55\n## [1] 10001.55\n## [1] 10001.55\n## [1] 10001.55\n## [1] 10001.55\n## [1] 10001.56\n## [1] 10001.56\n## [1] 10001.56\n## [1] 10001.56\n## [1] 10001.56\n## [1] 10001.56\n## [1] 10001.56\n## [1] 10001.56\n## [1] 10001.57\n## [1] 10001.57\n## [1] 10001.57\n## [1] 10001.57\n## [1] 10001.57\n## [1] 10001.57\n## [1] 10001.57\n## [1] 10001.58\n## [1] 10001.58\n## [1] 10001.58\n## [1] 10001.58\n## [1] 10001.58\n## [1] 10001.58\n## [1] 10001.58\n## [1] 10001.58\n## [1] 10001.59\n## [1] 10001.59\n## [1] 10001.59\n## [1] 10001.59\n## [1] 10001.59\n## [1] 10001.59\n## [1] 10001.59\n## [1] 10001.6\n## [1] 10001.6\n## [1] 10001.6\n## [1] 10001.6\n## [1] 10001.6\n## [1] 10001.6\n## [1] 10001.6\n## [1] 10001.6\n## [1] 10001.61\n## [1] 10001.61\n## [1] 10001.61\n## [1] 10001.61\n## [1] 10001.61\n## [1] 10001.61\n## [1] 10001.61\n## [1] 10001.61\n## [1] 10001.62\n## [1] 10001.62\n## [1] 10001.62\n## [1] 10001.62\n## [1] 10001.62\n## [1] 10001.62\n## [1] 10001.62\n## [1] 10001.63\n## [1] 10001.63\n## [1] 10001.63\n## [1] 10001.63\n## [1] 10001.63\n## [1] 10001.63\n## [1] 10001.63\n## [1] 10001.63\n## [1] 10001.64\n## [1] 10001.64\n## [1] 10001.64\n## [1] 10001.64\n## [1] 10001.64\n## [1] 10001.64\n## [1] 10001.64\n## [1] 10001.64\n## [1] 10001.65\n## [1] 10001.65\n## [1] 10001.65\n## [1] 10001.65\n## [1] 10001.65\n## [1] 10001.65\n## [1] 10001.65\n## [1] 10001.66\n## [1] 10001.66\n## [1] 10001.66\n## [1] 10001.66\n## [1] 10001.66\n## [1] 10001.66\n## [1] 10001.66\n## [1] 10001.66\n## [1] 10001.67\n## [1] 10001.67\n## [1] 10001.67\n## [1] 10001.67\n## [1] 10001.67\n## [1] 10001.67\n## [1] 10001.67\n## [1] 10001.68\n## [1] 10001.68\n## [1] 10001.68\n## [1] 10001.68\n## [1] 10001.68\n## [1] 10001.68\n## [1] 10001.68\n## [1] 10001.68\n## [1] 10001.69\n## [1] 10001.69\n## [1] 10001.69\n## [1] 10001.69\n## [1] 10001.69\n## [1] 10001.69\n## [1] 10001.69\n## [1] 10001.69\n## [1] 10001.7\n## [1] 10001.7\n## [1] 10001.7\n## [1] 10001.7\n## [1] 10001.7\n## [1] 10001.7\n## [1] 10001.7\n## [1] 10001.71\n## [1] 10001.71\n## [1] 10001.71\n## [1] 10001.71\n## [1] 10001.71\n## [1] 10001.71\n## [1] 10001.71\n## [1] 10001.71\n## [1] 10001.72\n## [1] 10001.72\n## [1] 10001.72\n## [1] 10001.72\n## [1] 10001.72\n## [1] 10001.72\n## [1] 10001.72\n## [1] 10001.73\n## [1] 10001.73\n## [1] 10001.73\n## [1] 10001.73\n## [1] 10001.73\n## [1] 10001.73\n## [1] 10001.73\n## [1] 10001.73\n## [1] 10001.74\n## [1] 10001.74\n## [1] 10001.74\n## [1] 10001.74\n## [1] 10001.74\n## [1] 10001.74\n## [1] 10001.74\n## [1] 10001.74\n## [1] 10001.75\n## [1] 10001.75\n## [1] 10001.75\n## [1] 10001.75\n## [1] 10001.75\n## [1] 10001.75\n## [1] 10001.75\n## [1] 10001.76\n## [1] 10001.76\n## [1] 10001.76\n## [1] 10001.76\n## [1] 10001.76\n## [1] 10001.76\n## [1] 10001.76\n## [1] 10001.76\n## [1] 10001.77\n## [1] 10001.77\n## [1] 10001.77\n## [1] 10001.77\n## [1] 10001.77\n## [1] 10001.77\n## [1] 10001.77\n## [1] 10001.78\n## [1] 10001.78\n## [1] 10001.78\n## [1] 10001.78\n## [1] 10001.78\n## [1] 10001.78\n## [1] 10001.78\n## [1] 10001.78\n## [1] 10001.79\n## [1] 10001.79\n## [1] 10001.79\n## [1] 10001.79\n## [1] 10001.79\n## [1] 10001.79\n## [1] 10001.79\n## [1] 10001.79\n## [1] 10001.8\n## [1] 10001.8\n## [1] 10001.8\n## [1] 10001.8\n## [1] 10001.8\n## [1] 10001.8\n## [1] 10001.8\n## [1] 10001.81\n## [1] 10001.81\n## [1] 10001.81\n## [1] 10001.81\n## [1] 10001.81\n## [1] 10001.81\n## [1] 10001.81\n## [1] 10001.81\n## [1] 10001.82\n## [1] 10001.82\n## [1] 10001.82\n## [1] 10001.82\n## [1] 10001.82\n## [1] 10001.82\n## [1] 10001.82\n## [1] 10001.83\n## [1] 10001.83\n## [1] 10001.83\n## [1] 10001.83\n## [1] 10001.83\n## [1] 10001.83\n## [1] 10001.83\n## [1] 10001.83\n## [1] 10001.84\n## [1] 10001.84\n## [1] 10001.84\n## [1] 10001.84\n## [1] 10001.84\n## [1] 10001.84\n## [1] 10001.84\n## [1] 10001.84\n## [1] 10001.85\n## [1] 10001.85\n## [1] 10001.85\n## [1] 10001.85\n## [1] 10001.85\n## [1] 10001.85\n## [1] 10001.85\n## [1] 10001.86\n## [1] 10001.86\n## [1] 10001.86\n## [1] 10001.86\n## [1] 10001.86\n## [1] 10001.86\n## [1] 10001.86\n## [1] 10001.86\n## [1] 10001.87\n## [1] 10001.87\n## [1] 10001.87\n## [1] 10001.87\n## [1] 10001.87\n## [1] 10001.87\n## [1] 10001.87\n## [1] 10001.88\n## [1] 10001.88\n## [1] 10001.88\n## [1] 10001.88\n## [1] 10001.88\n## [1] 10001.88\n## [1] 10001.88\n## [1] 10001.88\n## [1] 10001.89\n## [1] 10001.89\n## [1] 10001.89\n## [1] 10001.89\n## [1] 10001.89\n## [1] 10001.89\n## [1] 10001.89\n## [1] 10001.89\n## [1] 10001.9\n## [1] 10001.9\n## [1] 10001.9\n## [1] 10001.9\n## [1] 10001.9\n## [1] 10001.9\n## [1] 10001.9\n## [1] 10001.91\n## [1] 10001.91\n## [1] 10001.91\n## [1] 10001.91\n## [1] 10001.91\n## [1] 10001.91\n## [1] 10001.91\n## [1] 10001.91\n## [1] 10001.92\n## [1] 10001.92\n## [1] 10001.92\n## [1] 10001.92\n## [1] 10001.92\n## [1] 10001.92\n## [1] 10001.92\n## [1] 10001.93\n## [1] 10001.93\n## [1] 10001.93\n## [1] 10001.93\n## [1] 10001.93\n## [1] 10001.93\n## [1] 10001.93\n## [1] 10001.93\n## [1] 10001.94\n## [1] 10001.94\n## [1] 10001.94\n## [1] 10001.94\n## [1] 10001.94\n## [1] 10001.94\n## [1] 10001.94\n## [1] 10001.94\n## [1] 10001.95\n## [1] 10001.95\n## [1] 10001.95\n## [1] 10001.95\n## [1] 10001.95\n## [1] 10001.95\n## [1] 10001.95\n## [1] 10001.96\n## [1] 10001.96\n## [1] 10001.96\n## [1] 10001.96\n## [1] 10001.96\n## [1] 10001.96\n## [1] 10001.96\n## [1] 10001.96\n## [1] 10001.97\n## [1] 10001.97\n## [1] 10001.97\n## [1] 10001.97\n## [1] 10001.97\n## [1] 10001.97\n## [1] 10001.97\n## [1] 10001.98\n## [1] 10001.98\n## [1] 10001.98\n## [1] 10001.98\n## [1] 10001.98\n## [1] 10001.98\n## [1] 10001.98\n## [1] 10001.98\n## [1] 10001.99\n## [1] 10001.99\n## [1] 10001.99\n## [1] 10001.99\n## [1] 10001.99\n## [1] 10001.99\n## [1] 10001.99\n## [1] 10001.99\n## [1] 10002\n## [1] 10002\n## [1] 10002\n## [1] 10002\n## [1] 10002\n## [1] 10002\n## [1] 10002\n## [1] 10002.01\n## [1] 10002.01\n## [1] 10002.01\n## [1] 10002.01\n## [1] 10002.01\n## [1] 10002.01\n## [1] 10002.01\n## [1] 10002.01\n## [1] 10002.02\n## [1] 10002.02\n## [1] 10002.02\n## [1] 10002.02\n## [1] 10002.02\n## [1] 10002.02\n## [1] 10002.02\n## [1] 10002.02\n## [1] 10002.03\n## [1] 10002.03\n## [1] 10002.03\n## [1] 10002.03\n## [1] 10002.03\n## [1] 10002.03\n## [1] 10002.03\n## [1] 10002.04\n## [1] 10002.04\n## [1] 10002.04\n## [1] 10002.04\n## [1] 10002.04\n## [1] 10002.04\n## [1] 10002.04\n## [1] 10002.04\n## [1] 10002.05\n## [1] 10002.05\n## [1] 10002.05\n## [1] 10002.05\n## [1] 10002.05\n## [1] 10002.05\n## [1] 10002.05\n## [1] 10002.06\n## [1] 10002.06\n## [1] 10002.06\n## [1] 10002.06\n## [1] 10002.06\n## [1] 10002.06\n## [1] 10002.06\n## [1] 10002.06\n## [1] 10002.07\n## [1] 10002.07\n## [1] 10002.07\n## [1] 10002.07\n## [1] 10002.07\n## [1] 10002.07\n## [1] 10002.07\n## [1] 10002.07\n## [1] 10002.08\n## [1] 10002.08\n## [1] 10002.08\n## [1] 10002.08\n## [1] 10002.08\n## [1] 10002.08\n## [1] 10002.08\n## [1] 10002.09\n## [1] 10002.09\n## [1] 10002.09\n## [1] 10002.09\n## [1] 10002.09\n## [1] 10002.09\n## [1] 10002.09\n## [1] 10002.09\n## [1] 10002.1\n## [1] 10002.1\n## [1] 10002.1\n## [1] 10002.1\n## [1] 10002.1\n## [1] 10002.1\n## [1] 10002.1\n## [1] 10002.11\n## [1] 10002.11\n## [1] 10002.11\n## [1] 10002.11\n## [1] 10002.11\n## [1] 10002.11\n## [1] 10002.11\n## [1] 10002.11\n## [1] 10002.12\n## [1] 10002.12\n## [1] 10002.12\n## [1] 10002.12\n## [1] 10002.12\n## [1] 10002.12\n## [1] 10002.12\n## [1] 10002.12\n## [1] 10002.13\n## [1] 10002.13\n## [1] 10002.13\n## [1] 10002.13\n## [1] 10002.13\n## [1] 10002.13\n## [1] 10002.13\n## [1] 10002.14\n## [1] 10002.14\n## [1] 10002.14\n## [1] 10002.14\n## [1] 10002.14\n## [1] 10002.14\n## [1] 10002.14\n## [1] 10002.14\n## [1] 10002.15\n## [1] 10002.15\n## [1] 10002.15\n## [1] 10002.15\n## [1] 10002.15\n## [1] 10002.15\n## [1] 10002.15\n## [1] 10002.16\n## [1] 10002.16\n## [1] 10002.16\n## [1] 10002.16\n## [1] 10002.16\n## [1] 10002.16\n## [1] 10002.16\n## [1] 10002.16\n## [1] 10002.17\n## [1] 10002.17\n## [1] 10002.17\n## [1] 10002.17\n## [1] 10002.17\n## [1] 10002.17\n## [1] 10002.17\n## [1] 10002.17\n## [1] 10002.18\n## [1] 10002.18\n## [1] 10002.18\n## [1] 10002.18\n## [1] 10002.18\n## [1] 10002.18\n## [1] 10002.18\n## [1] 10002.19\n## [1] 10002.19\n## [1] 10002.19\n## [1] 10002.19\n## [1] 10002.19\n## [1] 10002.19\n## [1] 10002.19\n## [1] 10002.19\n## [1] 10002.2\n## [1] 10002.2\n## [1] 10002.2\n## [1] 10002.2\n## [1] 10002.2\n## [1] 10002.2\n## [1] 10002.2\n## [1] 10002.21\n## [1] 10002.21\n## [1] 10002.21\n## [1] 10002.21\n## [1] 10002.21\n## [1] 10002.21\n## [1] 10002.21\n## [1] 10002.21\n## [1] 10002.22\n## [1] 10002.22\n## [1] 10002.22\n## [1] 10002.22\n## [1] 10002.22\n## [1] 10002.22\n## [1] 10002.22\n## [1] 10002.22\n## [1] 10002.23\n## [1] 10002.23\n## [1] 10002.23\n## [1] 10002.23\n## [1] 10002.23\n## [1] 10002.23\n## [1] 10002.23\n## [1] 10002.24\n## [1] 10002.24\n## [1] 10002.24\n## [1] 10002.24\n## [1] 10002.24\n## [1] 10002.24\n## [1] 10002.24\n## [1] 10002.24\n## [1] 10002.25\n## [1] 10002.25\n## [1] 10002.25\n## [1] 10002.25\n## [1] 10002.25\n## [1] 10002.25\n## [1] 10002.25\n## [1] 10002.26\n## [1] 10002.26\n## [1] 10002.26\n## [1] 10002.26\n## [1] 10002.26\n## [1] 10002.26\n## [1] 10002.26\n## [1] 10002.26\n## [1] 10002.27\n## [1] 10002.27\n## [1] 10002.27\n## [1] 10002.27\n## [1] 10002.27\n## [1] 10002.27\n## [1] 10002.27\n## [1] 10002.27\n## [1] 10002.28\n## [1] 10002.28\n## [1] 10002.28\n## [1] 10002.28\n## [1] 10002.28\n## [1] 10002.28\n## [1] 10002.28\n## [1] 10002.29\n## [1] 10002.29\n## [1] 10002.29\n## [1] 10002.29\n## [1] 10002.29\n## [1] 10002.29\n## [1] 10002.29\n## [1] 10002.29\n## [1] 10002.3\n## [1] 10002.3\n## [1] 10002.3\n## [1] 10002.3\n## [1] 10002.3\n## [1] 10002.3\n## [1] 10002.3\n## [1] 10002.31\n## [1] 10002.31\n## [1] 10002.31\n## [1] 10002.31\n## [1] 10002.31\n## [1] 10002.31\n## [1] 10002.31\n## [1] 10002.31\n## [1] 10002.32\n## [1] 10002.32\n## [1] 10002.32\n## [1] 10002.32\n## [1] 10002.32\n## [1] 10002.32\n## [1] 10002.32\n## [1] 10002.32\n## [1] 10002.33\n## [1] 10002.33\n## [1] 10002.33\n## [1] 10002.33\n## [1] 10002.33\n## [1] 10002.33\n## [1] 10002.33\n## [1] 10002.34\n## [1] 10002.34\n## [1] 10002.34\n## [1] 10002.34\n## [1] 10002.34\n## [1] 10002.34\n## [1] 10002.34\n## [1] 10002.34\n## [1] 10002.35\n## [1] 10002.35\n## [1] 10002.35\n## [1] 10002.35\n## [1] 10002.35\n## [1] 10002.35\n## [1] 10002.35\n## [1] 10002.36\n## [1] 10002.36\n## [1] 10002.36\n## [1] 10002.36\n## [1] 10002.36\n## [1] 10002.36\n## [1] 10002.36\n## [1] 10002.36\n## [1] 10002.37\n## [1] 10002.37\n## [1] 10002.37\n## [1] 10002.37\n## [1] 10002.37\n## [1] 10002.37\n## [1] 10002.37\n## [1] 10002.37\n## [1] 10002.38\n## [1] 10002.38\n## [1] 10002.38\n## [1] 10002.38\n## [1] 10002.38\n## [1] 10002.38\n## [1] 10002.38\n## [1] 10002.39\n## [1] 10002.39\n## [1] 10002.39\n## [1] 10002.39\n## [1] 10002.39\n## [1] 10002.39\n## [1] 10002.39\n## [1] 10002.39\n## [1] 10002.4\n## [1] 10002.4\n## [1] 10002.4\n## [1] 10002.4\n## [1] 10002.4\n## [1] 10002.4\n## [1] 10002.4\n## [1] 10002.4\n## [1] 10002.41\n## [1] 10002.41\n## [1] 10002.41\n## [1] 10002.41\n## [1] 10002.41\n## [1] 10002.41\n## [1] 10002.41\n## [1] 10002.42\n## [1] 10002.42\n## [1] 10002.42\n## [1] 10002.42\n## [1] 10002.42\n## [1] 10002.42\n## [1] 10002.42\n## [1] 10002.42\n## [1] 10002.43\n## [1] 10002.43\n## [1] 10002.43\n## [1] 10002.43\n## [1] 10002.43\n## [1] 10002.43\n## [1] 10002.43\n## [1] 10002.44\n## [1] 10002.44\n## [1] 10002.44\n## [1] 10002.44\n## [1] 10002.44\n## [1] 10002.44\n## [1] 10002.44\n## [1] 10002.44\n## [1] 10002.45\n## [1] 10002.45\n## [1] 10002.45\n## [1] 10002.45\n## [1] 10002.45\n## [1] 10002.45\n## [1] 10002.45\n## [1] 10002.45\n## [1] 10002.46\n## [1] 10002.46\n## [1] 10002.46\n## [1] 10002.46\n## [1] 10002.46\n## [1] 10002.46\n## [1] 10002.46\n## [1] 10002.47\n## [1] 10002.47\n## [1] 10002.47\n## [1] 10002.47\n## [1] 10002.47\n## [1] 10002.47\n## [1] 10002.47\n## [1] 10002.47\n## [1] 10002.48\n## [1] 10002.48\n## [1] 10002.48\n## [1] 10002.48\n## [1] 10002.48\n## [1] 10002.48\n## [1] 10002.48\n## [1] 10002.49\n## [1] 10002.49\n## [1] 10002.49\n## [1] 10002.49\n## [1] 10002.49\n## [1] 10002.49\n## [1] 10002.49\n## [1] 10002.49\n## [1] 10002.5\n## [1] 10002.5\n## [1] 10002.5\n## [1] 10002.5\n## [1] 10002.5\n## [1] 10002.5\n## [1] 10002.5\n## [1] 10002.5\n## [1] 10002.51\n## [1] 10002.51\n## [1] 10002.51\n## [1] 10002.51\n## [1] 10002.51\n## [1] 10002.51\n## [1] 10002.51\n## [1] 10002.52\n## [1] 10002.52\n## [1] 10002.52\n## [1] 10002.52\n## [1] 10002.52\n## [1] 10002.52\n## [1] 10002.52\n## [1] 10002.52\n## [1] 10002.53\n## [1] 10002.53\n## [1] 10002.53\n## [1] 10002.53\n## [1] 10002.53\n## [1] 10002.53\n## [1] 10002.53\n## [1] 10002.54\n## [1] 10002.54\n## [1] 10002.54\n## [1] 10002.54\n## [1] 10002.54\n## [1] 10002.54\n## [1] 10002.54\n## [1] 10002.54\n## [1] 10002.55\n## [1] 10002.55\n## [1] 10002.55\n## [1] 10002.55\n## [1] 10002.55\n## [1] 10002.55\n## [1] 10002.55\n## [1] 10002.55\n## [1] 10002.56\n## [1] 10002.56\n## [1] 10002.56\n## [1] 10002.56\n## [1] 10002.56\n## [1] 10002.56\n## [1] 10002.56\n## [1] 10002.57\n## [1] 10002.57\n## [1] 10002.57\n## [1] 10002.57\n## [1] 10002.57\n## [1] 10002.57\n## [1] 10002.57\n## [1] 10002.57\n## [1] 10002.58\n## [1] 10002.58\n## [1] 10002.58\n## [1] 10002.58\n## [1] 10002.58\n## [1] 10002.58\n## [1] 10002.58\n## [1] 10002.59\n## [1] 10002.59\n## [1] 10002.59\n## [1] 10002.59\n## [1] 10002.59\n## [1] 10002.59\n## [1] 10002.59\n## [1] 10002.59\n## [1] 10002.6\n## [1] 10002.6\n## [1] 10002.6\n## [1] 10002.6\n## [1] 10002.6\n## [1] 10002.6\n## [1] 10002.6\n## [1] 10002.6\n## [1] 10002.61\n## [1] 10002.61\n## [1] 10002.61\n## [1] 10002.61\n## [1] 10002.61\n## [1] 10002.61\n## [1] 10002.61\n## [1] 10002.62\n## [1] 10002.62\n## [1] 10002.62\n## [1] 10002.62\n## [1] 10002.62\n## [1] 10002.62\n## [1] 10002.62\n## [1] 10002.62\n## [1] 10002.63\n## [1] 10002.63\n## [1] 10002.63\n## [1] 10002.63\n## [1] 10002.63\n## [1] 10002.63\n## [1] 10002.63\n## [1] 10002.64\n## [1] 10002.64\n## [1] 10002.64\n## [1] 10002.64\n## [1] 10002.64\n## [1] 10002.64\n## [1] 10002.64\n## [1] 10002.64\n## [1] 10002.65\n## [1] 10002.65\n## [1] 10002.65\n## [1] 10002.65\n## [1] 10002.65\n## [1] 10002.65\n## [1] 10002.65\n## [1] 10002.65\n## [1] 10002.66\n## [1] 10002.66\n## [1] 10002.66\n## [1] 10002.66\n## [1] 10002.66\n## [1] 10002.66\n## [1] 10002.66\n## [1] 10002.67\n## [1] 10002.67\n## [1] 10002.67\n## [1] 10002.67\n## [1] 10002.67\n## [1] 10002.67\n## [1] 10002.67\n## [1] 10002.67\n## [1] 10002.68\n## [1] 10002.68\n## [1] 10002.68\n## [1] 10002.68\n## [1] 10002.68\n## [1] 10002.68\n## [1] 10002.68\n## [1] 10002.69\n## [1] 10002.69\n## [1] 10002.69\n## [1] 10002.69\n## [1] 10002.69\n## [1] 10002.69\n## [1] 10002.69\n## [1] 10002.69\n## [1] 10002.7\n## [1] 10002.7\n## [1] 10002.7\n## [1] 10002.7\n## [1] 10002.7\n## [1] 10002.7\n## [1] 10002.7\n## [1] 10002.7\n## [1] 10002.71\n## [1] 10002.71\n## [1] 10002.71\n## [1] 10002.71\n## [1] 10002.71\n## [1] 10002.71\n## [1] 10002.71\n## [1] 10002.72\n## [1] 10002.72\n## [1] 10002.72\n## [1] 10002.72\n## [1] 10002.72\n## [1] 10002.72\n## [1] 10002.72\n## [1] 10002.72\n## [1] 10002.73\n## [1] 10002.73\n## [1] 10002.73\n## [1] 10002.73\n## [1] 10002.73\n## [1] 10002.73\n## [1] 10002.73\n## [1] 10002.74\n## [1] 10002.74\n## [1] 10002.74\n## [1] 10002.74\n## [1] 10002.74\n## [1] 10002.74\n## [1] 10002.74\n## [1] 10002.74\n## [1] 10002.75\n## [1] 10002.75\n## [1] 10002.75\n## [1] 10002.75\n## [1] 10002.75\n## [1] 10002.75\n## [1] 10002.75\n## [1] 10002.75\n## [1] 10002.76\n## [1] 10002.76\n## [1] 10002.76\n## [1] 10002.76\n## [1] 10002.76\n## [1] 10002.76\n## [1] 10002.76\n## [1] 10002.77\n## [1] 10002.77\n## [1] 10002.77\n## [1] 10002.77\n## [1] 10002.77\n## [1] 10002.77\n## [1] 10002.77\n## [1] 10002.77\n## [1] 10002.78\n## [1] 10002.78\n## [1] 10002.78\n## [1] 10002.78\n## [1] 10002.78\n## [1] 10002.78\n## [1] 10002.78\n## [1] 10002.79\n## [1] 10002.79\n## [1] 10002.79\n## [1] 10002.79\n## [1] 10002.79\n## [1] 10002.79\n## [1] 10002.79\n## [1] 10002.79\n## [1] 10002.8\n## [1] 10002.8\n## [1] 10002.8\n## [1] 10002.8\n## [1] 10002.8\n## [1] 10002.8\n## [1] 10002.8\n## [1] 10002.8\n## [1] 10002.81\n## [1] 10002.81\n## [1] 10002.81\n## [1] 10002.81\n## [1] 10002.81\n## [1] 10002.81\n## [1] 10002.81\n## [1] 10002.82\n## [1] 10002.82\n## [1] 10002.82\n## [1] 10002.82\n## [1] 10002.82\n## [1] 10002.82\n## [1] 10002.82\n## [1] 10002.82\n## [1] 10002.83\n## [1] 10002.83\n## [1] 10002.83\n## [1] 10002.83\n## [1] 10002.83\n## [1] 10002.83\n## [1] 10002.83\n## [1] 10002.83\n## [1] 10002.84\n## [1] 10002.84\n## [1] 10002.84\n## [1] 10002.84\n## [1] 10002.84\n## [1] 10002.84\n## [1] 10002.84\n## [1] 10002.85\n## [1] 10002.85\n## [1] 10002.85\n## [1] 10002.85\n## [1] 10002.85\n## [1] 10002.85\n## [1] 10002.85\n## [1] 10002.85\n## [1] 10002.86\n## [1] 10002.86\n## [1] 10002.86\n## [1] 10002.86\n## [1] 10002.86\n## [1] 10002.86\n## [1] 10002.86\n## [1] 10002.87\n## [1] 10002.87\n## [1] 10002.87\n## [1] 10002.87\n## [1] 10002.87\n## [1] 10002.87\n## [1] 10002.87\n## [1] 10002.87\n## [1] 10002.88\n## [1] 10002.88\n## [1] 10002.88\n## [1] 10002.88\n## [1] 10002.88\n## [1] 10002.88\n## [1] 10002.88\n## [1] 10002.88\n## [1] 10002.89\n## [1] 10002.89\n## [1] 10002.89\n## [1] 10002.89\n## [1] 10002.89\n## [1] 10002.89\n## [1] 10002.89\n## [1] 10002.9\n## [1] 10002.9\n## [1] 10002.9\n## [1] 10002.9\n## [1] 10002.9\n## [1] 10002.9\n## [1] 10002.9\n## [1] 10002.9\n## [1] 10002.91\n## [1] 10002.91\n## [1] 10002.91\n## [1] 10002.91\n## [1] 10002.91\n## [1] 10002.91\n## [1] 10002.91\n## [1] 10002.92\n## [1] 10002.92\n## [1] 10002.92\n## [1] 10002.92\n## [1] 10002.92\n## [1] 10002.92\n## [1] 10002.92\n## [1] 10002.92\n## [1] 10002.93\n## [1] 10002.93\n## [1] 10002.93\n## [1] 10002.93\n## [1] 10002.93\n## [1] 10002.93\n## [1] 10002.93\n## [1] 10002.93\n## [1] 10002.94\n## [1] 10002.94\n## [1] 10002.94\n## [1] 10002.94\n## [1] 10002.94\n## [1] 10002.94\n## [1] 10002.94\n## [1] 10002.95\n## [1] 10002.95\n## [1] 10002.95\n## [1] 10002.95\n## [1] 10002.95\n## [1] 10002.95\n## [1] 10002.95\n## [1] 10002.95\n## [1] 10002.96\n## [1] 10002.96\n## [1] 10002.96\n## [1] 10002.96\n## [1] 10002.96\n## [1] 10002.96\n## [1] 10002.96\n## [1] 10002.97\n## [1] 10002.97\n## [1] 10002.97\n## [1] 10002.97\n## [1] 10002.97\n## [1] 10002.97\n## [1] 10002.97\n## [1] 10002.97\n## [1] 10002.98\n## [1] 10002.98\n## [1] 10002.98\n## [1] 10002.98\n## [1] 10002.98\n## [1] 10002.98\n## [1] 10002.98\n## [1] 10002.98\n## [1] 10002.99\n## [1] 10002.99\n## [1] 10002.99\n## [1] 10002.99\n## [1] 10002.99\n## [1] 10002.99\n## [1] 10002.99\n## [1] 10003\n## [1] 10003\n## [1] 10003\n## [1] 10003\n## [1] 10003\n## [1] 10003\n## [1] 10003\n## [1] 10003\n## [1] 10003.01\n## [1] 10003.01\n## [1] 10003.01\n## [1] 10003.01\n## [1] 10003.01\n## [1] 10003.01\n## [1] 10003.01\n## [1] 10003.02\n## [1] 10003.02\n## [1] 10003.02\n## [1] 10003.02\n## [1] 10003.02\n## [1] 10003.02\n## [1] 10003.02\n## [1] 10003.02\n## [1] 10003.03\n## [1] 10003.03\n## [1] 10003.03\n## [1] 10003.03\n## [1] 10003.03\n## [1] 10003.03\n## [1] 10003.03\n## [1] 10003.03\n## [1] 10003.04\n## [1] 10003.04\n## [1] 10003.04\n## [1] 10003.04\n## [1] 10003.04\n## [1] 10003.04\n## [1] 10003.04\n## [1] 10003.05\n## [1] 10003.05\n## [1] 10003.05\n## [1] 10003.05\n## [1] 10003.05\n## [1] 10003.05\n## [1] 10003.05\n## [1] 10003.05\n## [1] 10003.06\n## [1] 10003.06\n## [1] 10003.06\n## [1] 10003.06\n## [1] 10003.06\n## [1] 10003.06\n## [1] 10003.06\n## [1] 10003.07\n## [1] 10003.07\n## [1] 10003.07\n## [1] 10003.07\n## [1] 10003.07\n## [1] 10003.07\n## [1] 10003.07\n## [1] 10003.07\n## [1] 10003.08\n## [1] 10003.08\n## [1] 10003.08\n## [1] 10003.08\n## [1] 10003.08\n## [1] 10003.08\n## [1] 10003.08\n## [1] 10003.08\n## [1] 10003.09\n## [1] 10003.09\n## [1] 10003.09\n## [1] 10003.09\n## [1] 10003.09\n## [1] 10003.09\n## [1] 10003.09\n## [1] 10003.1\n## [1] 10003.1\n## [1] 10003.1\n## [1] 10003.1\n## [1] 10003.1\n## [1] 10003.1\n## [1] 10003.1\n## [1] 10003.1\n## [1] 10003.11\n## [1] 10003.11\n## [1] 10003.11\n## [1] 10003.11\n## [1] 10003.11\n## [1] 10003.11\n## [1] 10003.11\n## [1] 10003.12\n## [1] 10003.12\n## [1] 10003.12\n## [1] 10003.12\n## [1] 10003.12\n## [1] 10003.12\n## [1] 10003.12\n## [1] 10003.12\n## [1] 10003.13\n## [1] 10003.13\n## [1] 10003.13\n## [1] 10003.13\n## [1] 10003.13\n## [1] 10003.13\n## [1] 10003.13\n## [1] 10003.13\n## [1] 10003.14\n## [1] 10003.14\n## [1] 10003.14\n## [1] 10003.14\n## [1] 10003.14\n## [1] 10003.14\n## [1] 10003.14\n## [1] 10003.15\n## [1] 10003.15\n## [1] 10003.15\n## [1] 10003.15\n## [1] 10003.15\n## [1] 10003.15\n## [1] 10003.15\n## [1] 10003.15\n## [1] 10003.16\n## [1] 10003.16\n## [1] 10003.16\n## [1] 10003.16\n## [1] 10003.16\n## [1] 10003.16\n## [1] 10003.16\n## [1] 10003.17\n## [1] 10003.17\n## [1] 10003.17\n## [1] 10003.17\n## [1] 10003.17\n## [1] 10003.17\n## [1] 10003.17\n## [1] 10003.17\n## [1] 10003.18\n## [1] 10003.18\n## [1] 10003.18\n## [1] 10003.18\n## [1] 10003.18\n## [1] 10003.18\n## [1] 10003.18\n## [1] 10003.18\n## [1] 10003.19\n## [1] 10003.19\n## [1] 10003.19\n## [1] 10003.19\n## [1] 10003.19\n## [1] 10003.19\n## [1] 10003.19\n## [1] 10003.2\n## [1] 10003.2\n## [1] 10003.2\n## [1] 10003.2\n## [1] 10003.2\n## [1] 10003.2\n## [1] 10003.2\n## [1] 10003.2\n## [1] 10003.21\n## [1] 10003.21\n## [1] 10003.21\n## [1] 10003.21\n## [1] 10003.21\n## [1] 10003.21\n## [1] 10003.21\n## [1] 10003.21\n## [1] 10003.22\n## [1] 10003.22\n## [1] 10003.22\n## [1] 10003.22\n## [1] 10003.22\n## [1] 10003.22\n## [1] 10003.22\n## [1] 10003.23\n## [1] 10003.23\n## [1] 10003.23\n## [1] 10003.23\n## [1] 10003.23\n## [1] 10003.23\n## [1] 10003.23\n## [1] 10003.23\n## [1] 10003.24\n## [1] 10003.24\n## [1] 10003.24\n## [1] 10003.24\n## [1] 10003.24\n## [1] 10003.24\n## [1] 10003.24\n## [1] 10003.25\n## [1] 10003.25\n## [1] 10003.25\n## [1] 10003.25\n## [1] 10003.25\n## [1] 10003.25\n## [1] 10003.25\n## [1] 10003.25\n## [1] 10003.26\n## [1] 10003.26\n## [1] 10003.26\n## [1] 10003.26\n## [1] 10003.26\n## [1] 10003.26\n## [1] 10003.26\n## [1] 10003.26\n## [1] 10003.27\n## [1] 10003.27\n## [1] 10003.27\n## [1] 10003.27\n## [1] 10003.27\n## [1] 10003.27\n## [1] 10003.27\n## [1] 10003.28\n## [1] 10003.28\n## [1] 10003.28\n## [1] 10003.28\n## [1] 10003.28\n## [1] 10003.28\n## [1] 10003.28\n## [1] 10003.28\n## [1] 10003.29\n## [1] 10003.29\n## [1] 10003.29\n## [1] 10003.29\n## [1] 10003.29\n## [1] 10003.29\n## [1] 10003.29\n## [1] 10003.3\n## [1] 10003.3\n## [1] 10003.3\n## [1] 10003.3\n## [1] 10003.3\n## [1] 10003.3\n## [1] 10003.3\n## [1] 10003.3\n## [1] 10003.31\n## [1] 10003.31\n## [1] 10003.31\n## [1] 10003.31\n## [1] 10003.31\n## [1] 10003.31\n## [1] 10003.31\n## [1] 10003.31\n## [1] 10003.32\n## [1] 10003.32\n## [1] 10003.32\n## [1] 10003.32\n## [1] 10003.32\n## [1] 10003.32\n## [1] 10003.32\n## [1] 10003.33\n## [1] 10003.33\n## [1] 10003.33\n## [1] 10003.33\n## [1] 10003.33\n## [1] 10003.33\n## [1] 10003.33\n## [1] 10003.33\n## [1] 10003.34\n## [1] 10003.34\n## [1] 10003.34\n## [1] 10003.34\n## [1] 10003.34\n## [1] 10003.34\n## [1] 10003.34\n## [1] 10003.35\n## [1] 10003.35\n## [1] 10003.35\n## [1] 10003.35\n## [1] 10003.35\n## [1] 10003.35\n## [1] 10003.35\n## [1] 10003.35\n## [1] 10003.36\n## [1] 10003.36\n## [1] 10003.36\n## [1] 10003.36\n## [1] 10003.36\n## [1] 10003.36\n## [1] 10003.36\n## [1] 10003.36\n## [1] 10003.37\n## [1] 10003.37\n## [1] 10003.37\n## [1] 10003.37\n## [1] 10003.37\n## [1] 10003.37\n## [1] 10003.37\n## [1] 10003.38\n## [1] 10003.38\n## [1] 10003.38\n## [1] 10003.38\n## [1] 10003.38\n## [1] 10003.38\n## [1] 10003.38\n## [1] 10003.38\n## [1] 10003.39\n## [1] 10003.39\n## [1] 10003.39\n## [1] 10003.39\n## [1] 10003.39\n## [1] 10003.39\n## [1] 10003.39\n## [1] 10003.4\n## [1] 10003.4\n## [1] 10003.4\n## [1] 10003.4\n## [1] 10003.4\n## [1] 10003.4\n## [1] 10003.4\n## [1] 10003.4\n## [1] 10003.41\n## [1] 10003.41\n## [1] 10003.41\n## [1] 10003.41\n## [1] 10003.41\n## [1] 10003.41\n## [1] 10003.41\n## [1] 10003.41\n## [1] 10003.42\n## [1] 10003.42\n## [1] 10003.42\n## [1] 10003.42\n## [1] 10003.42\n## [1] 10003.42\n## [1] 10003.42\n## [1] 10003.43\n## [1] 10003.43\n## [1] 10003.43\n## [1] 10003.43\n## [1] 10003.43\n## [1] 10003.43\n## [1] 10003.43\n## [1] 10003.43\n## [1] 10003.44\n## [1] 10003.44\n## [1] 10003.44\n## [1] 10003.44\n## [1] 10003.44\n## [1] 10003.44\n## [1] 10003.44\n## [1] 10003.45\n## [1] 10003.45\n## [1] 10003.45\n## [1] 10003.45\n## [1] 10003.45\n## [1] 10003.45\n## [1] 10003.45\n## [1] 10003.45\n## [1] 10003.46\n## [1] 10003.46\n## [1] 10003.46\n## [1] 10003.46\n## [1] 10003.46\n## [1] 10003.46\n## [1] 10003.46\n## [1] 10003.46\n## [1] 10003.47\n## [1] 10003.47\n## [1] 10003.47\n## [1] 10003.47\n## [1] 10003.47\n## [1] 10003.47\n## [1] 10003.47\n## [1] 10003.48\n## [1] 10003.48\n## [1] 10003.48\n## [1] 10003.48\n## [1] 10003.48\n## [1] 10003.48\n## [1] 10003.48\n## [1] 10003.48\n## [1] 10003.49\n## [1] 10003.49\n## [1] 10003.49\n## [1] 10003.49\n## [1] 10003.49\n## [1] 10003.49\n## [1] 10003.49\n## [1] 10003.5\n## [1] 10003.5\n## [1] 10003.5\n## [1] 10003.5\n## [1] 10003.5\n## [1] 10003.5\n## [1] 10003.5\n## [1] 10003.5\n## [1] 10003.51\n## [1] 10003.51\n## [1] 10003.51\n## [1] 10003.51\n## [1] 10003.51\n## [1] 10003.51\n## [1] 10003.51\n## [1] 10003.51\n## [1] 10003.52\n## [1] 10003.52\n## [1] 10003.52\n## [1] 10003.52\n## [1] 10003.52\n## [1] 10003.52\n## [1] 10003.52\n## [1] 10003.53\n## [1] 10003.53\n## [1] 10003.53\n## [1] 10003.53\n## [1] 10003.53\n## [1] 10003.53\n## [1] 10003.53\n## [1] 10003.53\n## [1] 10003.54\n## [1] 10003.54\n## [1] 10003.54\n## [1] 10003.54\n## [1] 10003.54\n## [1] 10003.54\n## [1] 10003.54\n## [1] 10003.55\n## [1] 10003.55\n## [1] 10003.55\n## [1] 10003.55\n## [1] 10003.55\n## [1] 10003.55\n## [1] 10003.55\n## [1] 10003.55\n## [1] 10003.56\n## [1] 10003.56\n## [1] 10003.56\n## [1] 10003.56\n## [1] 10003.56\n## [1] 10003.56\n## [1] 10003.56\n## [1] 10003.56\n## [1] 10003.57\n## [1] 10003.57\n## [1] 10003.57\n## [1] 10003.57\n## [1] 10003.57\n## [1] 10003.57\n## [1] 10003.57\n## [1] 10003.58\n## [1] 10003.58\n## [1] 10003.58\n## [1] 10003.58\n## [1] 10003.58\n## [1] 10003.58\n## [1] 10003.58\n## [1] 10003.58\n## [1] 10003.59\n## [1] 10003.59\n## [1] 10003.59\n## [1] 10003.59\n## [1] 10003.59\n## [1] 10003.59\n## [1] 10003.59\n## [1] 10003.6\n## [1] 10003.6\n## [1] 10003.6\n## [1] 10003.6\n## [1] 10003.6\n## [1] 10003.6\n## [1] 10003.6\n## [1] 10003.6\n## [1] 10003.61\n## [1] 10003.61\n## [1] 10003.61\n## [1] 10003.61\n## [1] 10003.61\n## [1] 10003.61\n## [1] 10003.61\n## [1] 10003.61\n## [1] 10003.62\n## [1] 10003.62\n## [1] 10003.62\n## [1] 10003.62\n## [1] 10003.62\n## [1] 10003.62\n## [1] 10003.62\n## [1] 10003.63\n## [1] 10003.63\n## [1] 10003.63\n## [1] 10003.63\n## [1] 10003.63\n## [1] 10003.63\n## [1] 10003.63\n## [1] 10003.63\n## [1] 10003.64\n## [1] 10003.64\n## [1] 10003.64\n## [1] 10003.64\n## [1] 10003.64\n## [1] 10003.64\n## [1] 10003.64\n## [1] 10003.64\n## [1] 10003.65\n## [1] 10003.65\n## [1] 10003.65\n## [1] 10003.65\n## [1] 10003.65\n## [1] 10003.65\n## [1] 10003.65\n## [1] 10003.66\n## [1] 10003.66\n## [1] 10003.66\n## [1] 10003.66\n## [1] 10003.66\n## [1] 10003.66\n## [1] 10003.66\n## [1] 10003.66\n## [1] 10003.67\n## [1] 10003.67\n## [1] 10003.67\n## [1] 10003.67\n## [1] 10003.67\n## [1] 10003.67\n## [1] 10003.67\n## [1] 10003.68\n## [1] 10003.68\n## [1] 10003.68\n## [1] 10003.68\n## [1] 10003.68\n## [1] 10003.68\n## [1] 10003.68\n## [1] 10003.68\n## [1] 10003.69\n## [1] 10003.69\n## [1] 10003.69\n## [1] 10003.69\n## [1] 10003.69\n## [1] 10003.69\n## [1] 10003.69\n## [1] 10003.69\n## [1] 10003.7\n## [1] 10003.7\n## [1] 10003.7\n## [1] 10003.7\n## [1] 10003.7\n## [1] 10003.7\n## [1] 10003.7\n## [1] 10003.71\n## [1] 10003.71\n## [1] 10003.71\n## [1] 10003.71\n## [1] 10003.71\n## [1] 10003.71\n## [1] 10003.71\n## [1] 10003.71\n## [1] 10003.72\n## [1] 10003.72\n## [1] 10003.72\n## [1] 10003.72\n## [1] 10003.72\n## [1] 10003.72\n## [1] 10003.72\n## [1] 10003.73\n## [1] 10003.73\n## [1] 10003.73\n## [1] 10003.73\n## [1] 10003.73\n## [1] 10003.73\n## [1] 10003.73\n## [1] 10003.73\n## [1] 10003.74\n## [1] 10003.74\n## [1] 10003.74\n## [1] 10003.74\n## [1] 10003.74\n## [1] 10003.74\n## [1] 10003.74\n## [1] 10003.74\n## [1] 10003.75\n## [1] 10003.75\n## [1] 10003.75\n## [1] 10003.75\n## [1] 10003.75\n## [1] 10003.75\n## [1] 10003.75\n## [1] 10003.76\n## [1] 10003.76\n## [1] 10003.76\n## [1] 10003.76\n## [1] 10003.76\n## [1] 10003.76\n## [1] 10003.76\n## [1] 10003.76\n## [1] 10003.77\n## [1] 10003.77\n## [1] 10003.77\n## [1] 10003.77\n## [1] 10003.77\n## [1] 10003.77\n## [1] 10003.77\n## [1] 10003.78\n## [1] 10003.78\n## [1] 10003.78\n## [1] 10003.78\n## [1] 10003.78\n## [1] 10003.78\n## [1] 10003.78\n## [1] 10003.78\n## [1] 10003.79\n## [1] 10003.79\n## [1] 10003.79\n## [1] 10003.79\n## [1] 10003.79\n## [1] 10003.79\n## [1] 10003.79\n## [1] 10003.79\n## [1] 10003.8\n## [1] 10003.8\n## [1] 10003.8\n## [1] 10003.8\n## [1] 10003.8\n## [1] 10003.8\n## [1] 10003.8\n## [1] 10003.81\n## [1] 10003.81\n## [1] 10003.81\n## [1] 10003.81\n## [1] 10003.81\n## [1] 10003.81\n## [1] 10003.81\n## [1] 10003.81\n## [1] 10003.82\n## [1] 10003.82\n## [1] 10003.82\n## [1] 10003.82\n## [1] 10003.82\n## [1] 10003.82\n## [1] 10003.82\n## [1] 10003.83\n## [1] 10003.83\n## [1] 10003.83\n## [1] 10003.83\n## [1] 10003.83\n## [1] 10003.83\n## [1] 10003.83\n## [1] 10003.83\n## [1] 10003.84\n## [1] 10003.84\n## [1] 10003.84\n## [1] 10003.84\n## [1] 10003.84\n## [1] 10003.84\n## [1] 10003.84\n## [1] 10003.84\n## [1] 10003.85\n## [1] 10003.85\n## [1] 10003.85\n## [1] 10003.85\n## [1] 10003.85\n## [1] 10003.85\n## [1] 10003.85\n## [1] 10003.86\n## [1] 10003.86\n## [1] 10003.86\n## [1] 10003.86\n## [1] 10003.86\n## [1] 10003.86\n## [1] 10003.86\n## [1] 10003.86\n## [1] 10003.87\n## [1] 10003.87\n## [1] 10003.87\n## [1] 10003.87\n## [1] 10003.87\n## [1] 10003.87\n## [1] 10003.87\n## [1] 10003.88\n## [1] 10003.88\n## [1] 10003.88\n## [1] 10003.88\n## [1] 10003.88\n## [1] 10003.88\n## [1] 10003.88\n## [1] 10003.88\n## [1] 10003.89\n## [1] 10003.89\n## [1] 10003.89\n## [1] 10003.89\n## [1] 10003.89\n## [1] 10003.89\n## [1] 10003.89\n## [1] 10003.89\n## [1] 10003.9\n## [1] 10003.9\n## [1] 10003.9\n## [1] 10003.9\n## [1] 10003.9\n## [1] 10003.9\n## [1] 10003.9\n## [1] 10003.91\n## [1] 10003.91\n## [1] 10003.91\n## [1] 10003.91\n## [1] 10003.91\n## [1] 10003.91\n## [1] 10003.91\n## [1] 10003.91\n## [1] 10003.92\n## [1] 10003.92\n## [1] 10003.92\n## [1] 10003.92\n## [1] 10003.92\n## [1] 10003.92\n## [1] 10003.92\n## [1] 10003.93\n## [1] 10003.93\n## [1] 10003.93\n## [1] 10003.93\n## [1] 10003.93\n## [1] 10003.93\n## [1] 10003.93\n## [1] 10003.93\n## [1] 10003.94\n## [1] 10003.94\n## [1] 10003.94\n## [1] 10003.94\n## [1] 10003.94\n## [1] 10003.94\n## [1] 10003.94\n## [1] 10003.94\n## [1] 10003.95\n## [1] 10003.95\n## [1] 10003.95\n## [1] 10003.95\n## [1] 10003.95\n## [1] 10003.95\n## [1] 10003.95\n## [1] 10003.96\n## [1] 10003.96\n## [1] 10003.96\n## [1] 10003.96\n## [1] 10003.96\n## [1] 10003.96\n## [1] 10003.96\n## [1] 10003.96\n## [1] 10003.97\n## [1] 10003.97\n## [1] 10003.97\n## [1] 10003.97\n## [1] 10003.97\n## [1] 10003.97\n## [1] 10003.97\n## [1] 10003.98\n## [1] 10003.98\n## [1] 10003.98\n## [1] 10003.98\n## [1] 10003.98\n## [1] 10003.98\n## [1] 10003.98\n## [1] 10003.98\n## [1] 10003.99\n## [1] 10003.99\n## [1] 10003.99\n## [1] 10003.99\n## [1] 10003.99\n## [1] 10003.99\n## [1] 10003.99\n## [1] 10003.99\n## [1] 10004\n## [1] 10004\n## [1] 10004\n## [1] 10004\n## [1] 10004\n## [1] 10004\n## [1] 10004\n## [1] 10004.01\n## [1] 10004.01\n## [1] 10004.01\n## [1] 10004.01\n## [1] 10004.01\n## [1] 10004.01\n## [1] 10004.01\n## [1] 10004.01\n## [1] 10004.02\n## [1] 10004.02\n## [1] 10004.02\n## [1] 10004.02\n## [1] 10004.02\n## [1] 10004.02\n## [1] 10004.02\n## [1] 10004.02\n## [1] 10004.03\n## [1] 10004.03\n## [1] 10004.03\n## [1] 10004.03\n## [1] 10004.03\n## [1] 10004.03\n## [1] 10004.03\n## [1] 10004.04\n## [1] 10004.04\n## [1] 10004.04\n## [1] 10004.04\n## [1] 10004.04\n## [1] 10004.04\n## [1] 10004.04\n## [1] 10004.04\n## [1] 10004.05\n## [1] 10004.05\n## [1] 10004.05\n## [1] 10004.05\n## [1] 10004.05\n## [1] 10004.05\n## [1] 10004.05\n## [1] 10004.06\n## [1] 10004.06\n## [1] 10004.06\n## [1] 10004.06\n## [1] 10004.06\n## [1] 10004.06\n## [1] 10004.06\n## [1] 10004.06\n## [1] 10004.07\n## [1] 10004.07\n## [1] 10004.07\n## [1] 10004.07\n## [1] 10004.07\n## [1] 10004.07\n## [1] 10004.07\n## [1] 10004.07\n## [1] 10004.08\n## [1] 10004.08\n## [1] 10004.08\n## [1] 10004.08\n## [1] 10004.08\n## [1] 10004.08\n## [1] 10004.08\n## [1] 10004.09\n## [1] 10004.09\n## [1] 10004.09\n## [1] 10004.09\n## [1] 10004.09\n## [1] 10004.09\n## [1] 10004.09\n## [1] 10004.09\n## [1] 10004.1\n## [1] 10004.1\n## [1] 10004.1\n## [1] 10004.1\n## [1] 10004.1\n## [1] 10004.1\n## [1] 10004.1\n## [1] 10004.11\n## [1] 10004.11\n## [1] 10004.11\n## [1] 10004.11\n## [1] 10004.11\n## [1] 10004.11\n## [1] 10004.11\n## [1] 10004.11\n## [1] 10004.12\n## [1] 10004.12\n## [1] 10004.12\n## [1] 10004.12\n## [1] 10004.12\n## [1] 10004.12\n## [1] 10004.12\n## [1] 10004.12\n## [1] 10004.13\n## [1] 10004.13\n## [1] 10004.13\n## [1] 10004.13\n## [1] 10004.13\n## [1] 10004.13\n## [1] 10004.13\n## [1] 10004.14\n## [1] 10004.14\n## [1] 10004.14\n## [1] 10004.14\n## [1] 10004.14\n## [1] 10004.14\n## [1] 10004.14\n## [1] 10004.14\n## [1] 10004.15\n## [1] 10004.15\n## [1] 10004.15\n## [1] 10004.15\n## [1] 10004.15\n## [1] 10004.15\n## [1] 10004.15\n## [1] 10004.16\n## [1] 10004.16\n## [1] 10004.16\n## [1] 10004.16\n## [1] 10004.16\n## [1] 10004.16\n## [1] 10004.16\n## [1] 10004.16\n## [1] 10004.17\n## [1] 10004.17\n## [1] 10004.17\n## [1] 10004.17\n## [1] 10004.17\n## [1] 10004.17\n## [1] 10004.17\n## [1] 10004.17\n## [1] 10004.18\n## [1] 10004.18\n## [1] 10004.18\n## [1] 10004.18\n## [1] 10004.18\n## [1] 10004.18\n## [1] 10004.18\n## [1] 10004.19\n## [1] 10004.19\n## [1] 10004.19\n## [1] 10004.19\n## [1] 10004.19\n## [1] 10004.19\n## [1] 10004.19\n## [1] 10004.19\n## [1] 10004.2\n## [1] 10004.2\n## [1] 10004.2\n## [1] 10004.2\n## [1] 10004.2\n## [1] 10004.2\n## [1] 10004.2\n## [1] 10004.21\n## [1] 10004.21\n## [1] 10004.21\n## [1] 10004.21\n## [1] 10004.21\n## [1] 10004.21\n## [1] 10004.21\n## [1] 10004.21\n## [1] 10004.22\n## [1] 10004.22\n## [1] 10004.22\n## [1] 10004.22\n## [1] 10004.22\n## [1] 10004.22\n## [1] 10004.22\n## [1] 10004.22\n## [1] 10004.23\n## [1] 10004.23\n## [1] 10004.23\n## [1] 10004.23\n## [1] 10004.23\n## [1] 10004.23\n## [1] 10004.23\n## [1] 10004.24\n## [1] 10004.24\n## [1] 10004.24\n## [1] 10004.24\n## [1] 10004.24\n## [1] 10004.24\n## [1] 10004.24\n## [1] 10004.24\n## [1] 10004.25\n## [1] 10004.25\n## [1] 10004.25\n## [1] 10004.25\n## [1] 10004.25\n## [1] 10004.25\n## [1] 10004.25\n## [1] 10004.26\n## [1] 10004.26\n## [1] 10004.26\n## [1] 10004.26\n## [1] 10004.26\n## [1] 10004.26\n## [1] 10004.26\n## [1] 10004.26\n## [1] 10004.27\n## [1] 10004.27\n## [1] 10004.27\n## [1] 10004.27\n## [1] 10004.27\n## [1] 10004.27\n## [1] 10004.27\n## [1] 10004.27\n## [1] 10004.28\n## [1] 10004.28\n## [1] 10004.28\n## [1] 10004.28\n## [1] 10004.28\n## [1] 10004.28\n## [1] 10004.28\n## [1] 10004.29\n## [1] 10004.29\n## [1] 10004.29\n## [1] 10004.29\n## [1] 10004.29\n## [1] 10004.29\n## [1] 10004.29\n## [1] 10004.29\n## [1] 10004.3\n## [1] 10004.3\n## [1] 10004.3\n## [1] 10004.3\n## [1] 10004.3\n## [1] 10004.3\n## [1] 10004.3\n## [1] 10004.31\n## [1] 10004.31\n## [1] 10004.31\n## [1] 10004.31\n## [1] 10004.31\n## [1] 10004.31\n## [1] 10004.31\n## [1] 10004.31\n## [1] 10004.32\n## [1] 10004.32\n## [1] 10004.32\n## [1] 10004.32\n## [1] 10004.32\n## [1] 10004.32\n## [1] 10004.32\n## [1] 10004.32\n## [1] 10004.33\n## [1] 10004.33\n## [1] 10004.33\n## [1] 10004.33\n## [1] 10004.33\n## [1] 10004.33\n## [1] 10004.33\n## [1] 10004.34\n## [1] 10004.34\n## [1] 10004.34\n## [1] 10004.34\n## [1] 10004.34\n## [1] 10004.34\n## [1] 10004.34\n## [1] 10004.34\n## [1] 10004.35\n## [1] 10004.35\n## [1] 10004.35\n## [1] 10004.35\n## [1] 10004.35\n## [1] 10004.35\n## [1] 10004.35\n## [1] 10004.36\n## [1] 10004.36\n## [1] 10004.36\n## [1] 10004.36\n## [1] 10004.36\n## [1] 10004.36\n## [1] 10004.36\n## [1] 10004.36\n## [1] 10004.37\n## [1] 10004.37\n## [1] 10004.37\n## [1] 10004.37\n## [1] 10004.37\n## [1] 10004.37\n## [1] 10004.37\n## [1] 10004.37\n## [1] 10004.38\n## [1] 10004.38\n## [1] 10004.38\n## [1] 10004.38\n## [1] 10004.38\n## [1] 10004.38\n## [1] 10004.38\n## [1] 10004.39\n## [1] 10004.39\n## [1] 10004.39\n## [1] 10004.39\n## [1] 10004.39\n## [1] 10004.39\n## [1] 10004.39\n## [1] 10004.39\n## [1] 10004.4\n## [1] 10004.4\n## [1] 10004.4\n## [1] 10004.4\n## [1] 10004.4\n## [1] 10004.4\n## [1] 10004.4\n## [1] 10004.4\n## [1] 10004.41\n## [1] 10004.41\n## [1] 10004.41\n## [1] 10004.41\n## [1] 10004.41\n## [1] 10004.41\n## [1] 10004.41\n## [1] 10004.42\n## [1] 10004.42\n## [1] 10004.42\n## [1] 10004.42\n## [1] 10004.42\n## [1] 10004.42\n## [1] 10004.42\n## [1] 10004.42\n## [1] 10004.43\n## [1] 10004.43\n## [1] 10004.43\n## [1] 10004.43\n## [1] 10004.43\n## [1] 10004.43\n## [1] 10004.43\n## [1] 10004.44\n## [1] 10004.44\n## [1] 10004.44\n## [1] 10004.44\n## [1] 10004.44\n## [1] 10004.44\n## [1] 10004.44\n## [1] 10004.44\n## [1] 10004.45\n## [1] 10004.45\n## [1] 10004.45\n## [1] 10004.45\n## [1] 10004.45\n## [1] 10004.45\n## [1] 10004.45\n## [1] 10004.45\n## [1] 10004.46\n## [1] 10004.46\n## [1] 10004.46\n## [1] 10004.46\n## [1] 10004.46\n## [1] 10004.46\n## [1] 10004.46\n## [1] 10004.47\n## [1] 10004.47\n## [1] 10004.47\n## [1] 10004.47\n## [1] 10004.47\n## [1] 10004.47\n## [1] 10004.47\n## [1] 10004.47\n## [1] 10004.48\n## [1] 10004.48\n## [1] 10004.48\n## [1] 10004.48\n## [1] 10004.48\n## [1] 10004.48\n## [1] 10004.48\n## [1] 10004.49\n## [1] 10004.49\n## [1] 10004.49\n## [1] 10004.49\n## [1] 10004.49\n## [1] 10004.49\n## [1] 10004.49\n## [1] 10004.49\n## [1] 10004.5\n## [1] 10004.5\n## [1] 10004.5\n## [1] 10004.5\n## [1] 10004.5\n## [1] 10004.5\n## [1] 10004.5\n## [1] 10004.5\n## [1] 10004.51\n## [1] 10004.51\n## [1] 10004.51\n## [1] 10004.51\n## [1] 10004.51\n## [1] 10004.51\n## [1] 10004.51\n## [1] 10004.52\n## [1] 10004.52\n## [1] 10004.52\n## [1] 10004.52\n## [1] 10004.52\n## [1] 10004.52\n## [1] 10004.52\n## [1] 10004.52\n## [1] 10004.53\n## [1] 10004.53\n## [1] 10004.53\n## [1] 10004.53\n## [1] 10004.53\n## [1] 10004.53\n## [1] 10004.53\n## [1] 10004.54\n## [1] 10004.54\n## [1] 10004.54\n## [1] 10004.54\n## [1] 10004.54\n## [1] 10004.54\n## [1] 10004.54\n## [1] 10004.54\n## [1] 10004.55\n## [1] 10004.55\n## [1] 10004.55\n## [1] 10004.55\n## [1] 10004.55\n## [1] 10004.55\n## [1] 10004.55\n## [1] 10004.55\n## [1] 10004.56\n## [1] 10004.56\n## [1] 10004.56\n## [1] 10004.56\n## [1] 10004.56\n## [1] 10004.56\n## [1] 10004.56\n## [1] 10004.57\n## [1] 10004.57\n## [1] 10004.57\n## [1] 10004.57\n## [1] 10004.57\n## [1] 10004.57\n## [1] 10004.57\n## [1] 10004.57\n## [1] 10004.58\n## [1] 10004.58\n## [1] 10004.58\n## [1] 10004.58\n## [1] 10004.58\n## [1] 10004.58\n## [1] 10004.58\n## [1] 10004.59\n## [1] 10004.59\n## [1] 10004.59\n## [1] 10004.59\n## [1] 10004.59\n## [1] 10004.59\n## [1] 10004.59\n## [1] 10004.59\n## [1] 10004.6\n## [1] 10004.6\n## [1] 10004.6\n## [1] 10004.6\n## [1] 10004.6\n## [1] 10004.6\n## [1] 10004.6\n## [1] 10004.6\n## [1] 10004.61\n## [1] 10004.61\n## [1] 10004.61\n## [1] 10004.61\n## [1] 10004.61\n## [1] 10004.61\n## [1] 10004.61\n## [1] 10004.62\n## [1] 10004.62\n## [1] 10004.62\n## [1] 10004.62\n## [1] 10004.62\n## [1] 10004.62\n## [1] 10004.62\n## [1] 10004.62\n## [1] 10004.63\n## [1] 10004.63\n## [1] 10004.63\n## [1] 10004.63\n## [1] 10004.63\n## [1] 10004.63\n## [1] 10004.63\n## [1] 10004.64\n## [1] 10004.64\n## [1] 10004.64\n## [1] 10004.64\n## [1] 10004.64\n## [1] 10004.64\n## [1] 10004.64\n## [1] 10004.64\n## [1] 10004.65\n## [1] 10004.65\n## [1] 10004.65\n## [1] 10004.65\n## [1] 10004.65\n## [1] 10004.65\n## [1] 10004.65\n## [1] 10004.65\n## [1] 10004.66\n## [1] 10004.66\n## [1] 10004.66\n## [1] 10004.66\n## [1] 10004.66\n## [1] 10004.66\n## [1] 10004.66\n## [1] 10004.67\n## [1] 10004.67\n## [1] 10004.67\n## [1] 10004.67\n## [1] 10004.67\n## [1] 10004.67\n## [1] 10004.67\n## [1] 10004.67\n## [1] 10004.68\n## [1] 10004.68\n## [1] 10004.68\n## [1] 10004.68\n## [1] 10004.68\n## [1] 10004.68\n## [1] 10004.68\n## [1] 10004.69\n## [1] 10004.69\n## [1] 10004.69\n## [1] 10004.69\n## [1] 10004.69\n## [1] 10004.69\n## [1] 10004.69\n## [1] 10004.69\n## [1] 10004.7\n## [1] 10004.7\n## [1] 10004.7\n## [1] 10004.7\n## [1] 10004.7\n## [1] 10004.7\n## [1] 10004.7\n## [1] 10004.7\n## [1] 10004.71\n## [1] 10004.71\n## [1] 10004.71\n## [1] 10004.71\n## [1] 10004.71\n## [1] 10004.71\n## [1] 10004.71\n## [1] 10004.72\n## [1] 10004.72\n## [1] 10004.72\n## [1] 10004.72\n## [1] 10004.72\n## [1] 10004.72\n## [1] 10004.72\n## [1] 10004.72\n## [1] 10004.73\n## [1] 10004.73\n## [1] 10004.73\n## [1] 10004.73\n## [1] 10004.73\n## [1] 10004.73\n## [1] 10004.73\n## [1] 10004.74\n## [1] 10004.74\n## [1] 10004.74\n## [1] 10004.74\n## [1] 10004.74\n## [1] 10004.74\n## [1] 10004.74\n## [1] 10004.74\n## [1] 10004.75\n## [1] 10004.75\n## [1] 10004.75\n## [1] 10004.75\n## [1] 10004.75\n## [1] 10004.75\n## [1] 10004.75\n## [1] 10004.75\n## [1] 10004.76\n## [1] 10004.76\n## [1] 10004.76\n## [1] 10004.76\n## [1] 10004.76\n## [1] 10004.76\n## [1] 10004.76\n## [1] 10004.77\n## [1] 10004.77\n## [1] 10004.77\n## [1] 10004.77\n## [1] 10004.77\n## [1] 10004.77\n## [1] 10004.77\n## [1] 10004.77\n## [1] 10004.78\n## [1] 10004.78\n## [1] 10004.78\n## [1] 10004.78\n## [1] 10004.78\n## [1] 10004.78\n## [1] 10004.78\n## [1] 10004.79\n## [1] 10004.79\n## [1] 10004.79\n## [1] 10004.79\n## [1] 10004.79\n## [1] 10004.79\n## [1] 10004.79\n## [1] 10004.79\n## [1] 10004.8\n## [1] 10004.8\n## [1] 10004.8\n## [1] 10004.8\n## [1] 10004.8\n## [1] 10004.8\n## [1] 10004.8\n## [1] 10004.8\n## [1] 10004.81\n## [1] 10004.81\n## [1] 10004.81\n## [1] 10004.81\n## [1] 10004.81\n## [1] 10004.81\n## [1] 10004.81\n## [1] 10004.82\n## [1] 10004.82\n## [1] 10004.82\n## [1] 10004.82\n## [1] 10004.82\n## [1] 10004.82\n## [1] 10004.82\n## [1] 10004.82\n## [1] 10004.83\n## [1] 10004.83\n## [1] 10004.83\n## [1] 10004.83\n## [1] 10004.83\n## [1] 10004.83\n## [1] 10004.83\n## [1] 10004.83\n## [1] 10004.84\n## [1] 10004.84\n## [1] 10004.84\n## [1] 10004.84\n## [1] 10004.84\n## [1] 10004.84\n## [1] 10004.84\n## [1] 10004.85\n## [1] 10004.85\n## [1] 10004.85\n## [1] 10004.85\n## [1] 10004.85\n## [1] 10004.85\n## [1] 10004.85\n## [1] 10004.85\n## [1] 10004.86\n## [1] 10004.86\n## [1] 10004.86\n## [1] 10004.86\n## [1] 10004.86\n## [1] 10004.86\n## [1] 10004.86\n## [1] 10004.87\n## [1] 10004.87\n## [1] 10004.87\n## [1] 10004.87\n## [1] 10004.87\n## [1] 10004.87\n## [1] 10004.87\n## [1] 10004.87\n## [1] 10004.88\n## [1] 10004.88\n## [1] 10004.88\n## [1] 10004.88\n## [1] 10004.88\n## [1] 10004.88\n## [1] 10004.88\n## [1] 10004.88\n## [1] 10004.89\n## [1] 10004.89\n## [1] 10004.89\n## [1] 10004.89\n## [1] 10004.89\n## [1] 10004.89\n## [1] 10004.89\n## [1] 10004.9\n## [1] 10004.9\n## [1] 10004.9\n## [1] 10004.9\n## [1] 10004.9\n## [1] 10004.9\n## [1] 10004.9\n## [1] 10004.9\n## [1] 10004.91\n## [1] 10004.91\n## [1] 10004.91\n## [1] 10004.91\n## [1] 10004.91\n## [1] 10004.91\n## [1] 10004.91\n## [1] 10004.92\n## [1] 10004.92\n## [1] 10004.92\n## [1] 10004.92\n## [1] 10004.92\n## [1] 10004.92\n## [1] 10004.92\n## [1] 10004.92\n## [1] 10004.93\n## [1] 10004.93\n## [1] 10004.93\n## [1] 10004.93\n## [1] 10004.93\n## [1] 10004.93\n## [1] 10004.93\n## [1] 10004.93\n## [1] 10004.94\n## [1] 10004.94\n## [1] 10004.94\n## [1] 10004.94\n## [1] 10004.94\n## [1] 10004.94\n## [1] 10004.94\n## [1] 10004.95\n## [1] 10004.95\n## [1] 10004.95\n## [1] 10004.95\n## [1] 10004.95\n## [1] 10004.95\n## [1] 10004.95\n## [1] 10004.95\n## [1] 10004.96\n## [1] 10004.96\n## [1] 10004.96\n## [1] 10004.96\n## [1] 10004.96\n## [1] 10004.96\n## [1] 10004.96\n## [1] 10004.97\n## [1] 10004.97\n## [1] 10004.97\n## [1] 10004.97\n## [1] 10004.97\n## [1] 10004.97\n## [1] 10004.97\n## [1] 10004.97\n## [1] 10004.98\n## [1] 10004.98\n## [1] 10004.98\n## [1] 10004.98\n## [1] 10004.98\n## [1] 10004.98\n## [1] 10004.98\n## [1] 10004.98\n## [1] 10004.99\n## [1] 10004.99\n## [1] 10004.99\n## [1] 10004.99\n## [1] 10004.99\n## [1] 10004.99\n## [1] 10004.99\n## [1] 10005\n## [1] 10005\n## [1] 10005\n## [1] 10005\n## [1] 10005\n## [1] 10005\n## [1] 10005\n## [1] 10005\n## [1] 10005.01\n## [1] 10005.01\n## [1] 10005.01\n## [1] 10005.01\n## [1] 10005.01\n## [1] 10005.01\n## [1] 10005.01\n## [1] 10005.02\n## [1] 10005.02\n## [1] 10005.02\n## [1] 10005.02\n## [1] 10005.02\n## [1] 10005.02\n## [1] 10005.02\n## [1] 10005.02\n## [1] 10005.03\n## [1] 10005.03\n## [1] 10005.03\n## [1] 10005.03\n## [1] 10005.03\n## [1] 10005.03\n## [1] 10005.03\n## [1] 10005.03\n## [1] 10005.04\n## [1] 10005.04\n## [1] 10005.04\n## [1] 10005.04\n## [1] 10005.04\n## [1] 10005.04\n## [1] 10005.04\n## [1] 10005.05\n## [1] 10005.05\n## [1] 10005.05\n## [1] 10005.05\n## [1] 10005.05\n## [1] 10005.05\n## [1] 10005.05\n## [1] 10005.05\n## [1] 10005.06\n## [1] 10005.06\n## [1] 10005.06\n## [1] 10005.06\n## [1] 10005.06\n## [1] 10005.06\n## [1] 10005.06\n## [1] 10005.07\n## [1] 10005.07\n## [1] 10005.07\n## [1] 10005.07\n## [1] 10005.07\n## [1] 10005.07\n## [1] 10005.07\n## [1] 10005.07\n## [1] 10005.08\n## [1] 10005.08\n## [1] 10005.08\n## [1] 10005.08\n## [1] 10005.08\n## [1] 10005.08\n## [1] 10005.08\n## [1] 10005.08\n## [1] 10005.09\n## [1] 10005.09\n## [1] 10005.09\n## [1] 10005.09\n## [1] 10005.09\n## [1] 10005.09\n## [1] 10005.09\n## [1] 10005.1\n## [1] 10005.1\n## [1] 10005.1\n## [1] 10005.1\n## [1] 10005.1\n## [1] 10005.1\n## [1] 10005.1\n## [1] 10005.1\n## [1] 10005.11\n## [1] 10005.11\n## [1] 10005.11\n## [1] 10005.11\n## [1] 10005.11\n## [1] 10005.11\n## [1] 10005.11\n## [1] 10005.12\n## [1] 10005.12\n## [1] 10005.12\n## [1] 10005.12\n## [1] 10005.12\n## [1] 10005.12\n## [1] 10005.12\n## [1] 10005.12\n## [1] 10005.13\n## [1] 10005.13\n## [1] 10005.13\n## [1] 10005.13\n## [1] 10005.13\n## [1] 10005.13\n## [1] 10005.13\n## [1] 10005.13\n## [1] 10005.14\n## [1] 10005.14\n## [1] 10005.14\n## [1] 10005.14\n## [1] 10005.14\n## [1] 10005.14\n## [1] 10005.14\n## [1] 10005.15\n## [1] 10005.15\n## [1] 10005.15\n## [1] 10005.15\n## [1] 10005.15\n## [1] 10005.15\n## [1] 10005.15\n## [1] 10005.15\n## [1] 10005.16\n## [1] 10005.16\n## [1] 10005.16\n## [1] 10005.16\n## [1] 10005.16\n## [1] 10005.16\n## [1] 10005.16\n## [1] 10005.17\n## [1] 10005.17\n## [1] 10005.17\n## [1] 10005.17\n## [1] 10005.17\n## [1] 10005.17\n## [1] 10005.17\n## [1] 10005.17\n## [1] 10005.18\n## [1] 10005.18\n## [1] 10005.18\n## [1] 10005.18\n## [1] 10005.18\n## [1] 10005.18\n## [1] 10005.18\n## [1] 10005.18\n## [1] 10005.19\n## [1] 10005.19\n## [1] 10005.19\n## [1] 10005.19\n## [1] 10005.19\n## [1] 10005.19\n## [1] 10005.19\n## [1] 10005.2\n## [1] 10005.2\n## [1] 10005.2\n## [1] 10005.2\n## [1] 10005.2\n## [1] 10005.2\n## [1] 10005.2\n## [1] 10005.2\n## [1] 10005.21\n## [1] 10005.21\n## [1] 10005.21\n## [1] 10005.21\n## [1] 10005.21\n## [1] 10005.21\n## [1] 10005.21\n## [1] 10005.21\n## [1] 10005.22\n## [1] 10005.22\n## [1] 10005.22\n## [1] 10005.22\n## [1] 10005.22\n## [1] 10005.22\n## [1] 10005.22\n## [1] 10005.23\n## [1] 10005.23\n## [1] 10005.23\n## [1] 10005.23\n## [1] 10005.23\n## [1] 10005.23\n## [1] 10005.23\n## [1] 10005.23\n## [1] 10005.24\n## [1] 10005.24\n## [1] 10005.24\n## [1] 10005.24\n## [1] 10005.24\n## [1] 10005.24\n## [1] 10005.24\n## [1] 10005.25\n## [1] 10005.25\n## [1] 10005.25\n## [1] 10005.25\n## [1] 10005.25\n## [1] 10005.25\n## [1] 10005.25\n## [1] 10005.25\n## [1] 10005.26\n## [1] 10005.26\n## [1] 10005.26\n## [1] 10005.26\n## [1] 10005.26\n## [1] 10005.26\n## [1] 10005.26\n## [1] 10005.26\n## [1] 10005.27\n## [1] 10005.27\n## [1] 10005.27\n## [1] 10005.27\n## [1] 10005.27\n## [1] 10005.27\n## [1] 10005.27\n## [1] 10005.28\n## [1] 10005.28\n## [1] 10005.28\n## [1] 10005.28\n## [1] 10005.28\n## [1] 10005.28\n## [1] 10005.28\n## [1] 10005.28\n## [1] 10005.29\n## [1] 10005.29\n## [1] 10005.29\n## [1] 10005.29\n## [1] 10005.29\n## [1] 10005.29\n## [1] 10005.29\n## [1] 10005.3\n## [1] 10005.3\n## [1] 10005.3\n## [1] 10005.3\n## [1] 10005.3\n## [1] 10005.3\n## [1] 10005.3\n## [1] 10005.3\n## [1] 10005.31\n## [1] 10005.31\n## [1] 10005.31\n## [1] 10005.31\n## [1] 10005.31\n## [1] 10005.31\n## [1] 10005.31\n## [1] 10005.31\n## [1] 10005.32\n## [1] 10005.32\n## [1] 10005.32\n## [1] 10005.32\n## [1] 10005.32\n## [1] 10005.32\n## [1] 10005.32\n## [1] 10005.33\n## [1] 10005.33\n## [1] 10005.33\n## [1] 10005.33\n## [1] 10005.33\n## [1] 10005.33\n## [1] 10005.33\n## [1] 10005.33\n## [1] 10005.34\n## [1] 10005.34\n## [1] 10005.34\n## [1] 10005.34\n## [1] 10005.34\n## [1] 10005.34\n## [1] 10005.34\n## [1] 10005.35\n## [1] 10005.35\n## [1] 10005.35\n## [1] 10005.35\n## [1] 10005.35\n## [1] 10005.35\n## [1] 10005.35\n## [1] 10005.35\n## [1] 10005.36\n## [1] 10005.36\n## [1] 10005.36\n## [1] 10005.36\n## [1] 10005.36\n## [1] 10005.36\n## [1] 10005.36\n## [1] 10005.36\n## [1] 10005.37\n## [1] 10005.37\n## [1] 10005.37\n## [1] 10005.37\n## [1] 10005.37\n## [1] 10005.37\n## [1] 10005.37\n## [1] 10005.38\n## [1] 10005.38\n## [1] 10005.38\n## [1] 10005.38\n## [1] 10005.38\n## [1] 10005.38\n## [1] 10005.38\n## [1] 10005.38\n## [1] 10005.39\n## [1] 10005.39\n## [1] 10005.39\n## [1] 10005.39\n## [1] 10005.39\n## [1] 10005.39\n## [1] 10005.39\n## [1] 10005.4\n## [1] 10005.4\n## [1] 10005.4\n## [1] 10005.4\n## [1] 10005.4\n## [1] 10005.4\n## [1] 10005.4\n## [1] 10005.4\n## [1] 10005.41\n## [1] 10005.41\n## [1] 10005.41\n## [1] 10005.41\n## [1] 10005.41\n## [1] 10005.41\n## [1] 10005.41\n## [1] 10005.41\n## [1] 10005.42\n## [1] 10005.42\n## [1] 10005.42\n## [1] 10005.42\n## [1] 10005.42\n## [1] 10005.42\n## [1] 10005.42\n## [1] 10005.43\n## [1] 10005.43\n## [1] 10005.43\n## [1] 10005.43\n## [1] 10005.43\n## [1] 10005.43\n## [1] 10005.43\n## [1] 10005.43\n## [1] 10005.44\n## [1] 10005.44\n## [1] 10005.44\n## [1] 10005.44\n## [1] 10005.44\n## [1] 10005.44\n## [1] 10005.44\n## [1] 10005.45\n## [1] 10005.45\n## [1] 10005.45\n## [1] 10005.45\n## [1] 10005.45\n## [1] 10005.45\n## [1] 10005.45\n## [1] 10005.45\n## [1] 10005.46\n## [1] 10005.46\n## [1] 10005.46\n## [1] 10005.46\n## [1] 10005.46\n## [1] 10005.46\n## [1] 10005.46\n## [1] 10005.46\n## [1] 10005.47\n## [1] 10005.47\n## [1] 10005.47\n## [1] 10005.47\n## [1] 10005.47\n## [1] 10005.47\n## [1] 10005.47\n## [1] 10005.48\n## [1] 10005.48\n## [1] 10005.48\n## [1] 10005.48\n## [1] 10005.48\n## [1] 10005.48\n## [1] 10005.48\n## [1] 10005.48\n## [1] 10005.49\n## [1] 10005.49\n## [1] 10005.49\n## [1] 10005.49\n## [1] 10005.49\n## [1] 10005.49\n## [1] 10005.49\n## [1] 10005.5\n## [1] 10005.5\n## [1] 10005.5\n## [1] 10005.5\n## [1] 10005.5\n## [1] 10005.5\n## [1] 10005.5\n## [1] 10005.5\n## [1] 10005.51\n## [1] 10005.51\n## [1] 10005.51\n## [1] 10005.51\n## [1] 10005.51\n## [1] 10005.51\n## [1] 10005.51\n## [1] 10005.51\n## [1] 10005.52\n## [1] 10005.52\n## [1] 10005.52\n## [1] 10005.52\n## [1] 10005.52\n## [1] 10005.52\n## [1] 10005.52\n## [1] 10005.53\n## [1] 10005.53\n## [1] 10005.53\n## [1] 10005.53\n## [1] 10005.53\n## [1] 10005.53\n## [1] 10005.53\n## [1] 10005.53\n## [1] 10005.54\n## [1] 10005.54\n## [1] 10005.54\n## [1] 10005.54\n## [1] 10005.54\n## [1] 10005.54\n## [1] 10005.54\n## [1] 10005.55\n## [1] 10005.55\n## [1] 10005.55\n## [1] 10005.55\n## [1] 10005.55\n## [1] 10005.55\n## [1] 10005.55\n## [1] 10005.55\n## [1] 10005.56\n## [1] 10005.56\n## [1] 10005.56\n## [1] 10005.56\n## [1] 10005.56\n## [1] 10005.56\n## [1] 10005.56\n## [1] 10005.56\n## [1] 10005.57\n## [1] 10005.57\n## [1] 10005.57\n## [1] 10005.57\n## [1] 10005.57\n## [1] 10005.57\n## [1] 10005.57\n## [1] 10005.58\n## [1] 10005.58\n## [1] 10005.58\n## [1] 10005.58\n## [1] 10005.58\n## [1] 10005.58\n## [1] 10005.58\n## [1] 10005.58\n## [1] 10005.59\n## [1] 10005.59\n## [1] 10005.59\n## [1] 10005.59\n## [1] 10005.59\n## [1] 10005.59\n## [1] 10005.59\n## [1] 10005.6\n## [1] 10005.6\n## [1] 10005.6\n## [1] 10005.6\n## [1] 10005.6\n## [1] 10005.6\n## [1] 10005.6\n## [1] 10005.6\n## [1] 10005.61\n## [1] 10005.61\n## [1] 10005.61\n## [1] 10005.61\n## [1] 10005.61\n## [1] 10005.61\n## [1] 10005.61\n## [1] 10005.61\n## [1] 10005.62\n## [1] 10005.62\n## [1] 10005.62\n## [1] 10005.62\n## [1] 10005.62\n## [1] 10005.62\n## [1] 10005.62\n## [1] 10005.63\n## [1] 10005.63\n## [1] 10005.63\n## [1] 10005.63\n## [1] 10005.63\n## [1] 10005.63\n## [1] 10005.63\n## [1] 10005.63\n## [1] 10005.64\n## [1] 10005.64\n## [1] 10005.64\n## [1] 10005.64\n## [1] 10005.64\n## [1] 10005.64\n## [1] 10005.64\n## [1] 10005.64\n## [1] 10005.65\n## [1] 10005.65\n## [1] 10005.65\n## [1] 10005.65\n## [1] 10005.65\n## [1] 10005.65\n## [1] 10005.65\n## [1] 10005.66\n## [1] 10005.66\n## [1] 10005.66\n## [1] 10005.66\n## [1] 10005.66\n## [1] 10005.66\n## [1] 10005.66\n## [1] 10005.66\n## [1] 10005.67\n## [1] 10005.67\n## [1] 10005.67\n## [1] 10005.67\n## [1] 10005.67\n## [1] 10005.67\n## [1] 10005.67\n## [1] 10005.68\n## [1] 10005.68\n## [1] 10005.68\n## [1] 10005.68\n## [1] 10005.68\n## [1] 10005.68\n## [1] 10005.68\n## [1] 10005.68\n## [1] 10005.69\n## [1] 10005.69\n## [1] 10005.69\n## [1] 10005.69\n## [1] 10005.69\n## [1] 10005.69\n## [1] 10005.69\n## [1] 10005.69\n## [1] 10005.7\n## [1] 10005.7\n## [1] 10005.7\n## [1] 10005.7\n## [1] 10005.7\n## [1] 10005.7\n## [1] 10005.7\n## [1] 10005.71\n## [1] 10005.71\n## [1] 10005.71\n## [1] 10005.71\n## [1] 10005.71\n## [1] 10005.71\n## [1] 10005.71\n## [1] 10005.71\n## [1] 10005.72\n## [1] 10005.72\n## [1] 10005.72\n## [1] 10005.72\n## [1] 10005.72\n## [1] 10005.72\n## [1] 10005.72\n## [1] 10005.73\n## [1] 10005.73\n## [1] 10005.73\n## [1] 10005.73\n## [1] 10005.73\n## [1] 10005.73\n## [1] 10005.73\n## [1] 10005.73\n## [1] 10005.74\n## [1] 10005.74\n## [1] 10005.74\n## [1] 10005.74\n## [1] 10005.74\n## [1] 10005.74\n## [1] 10005.74\n## [1] 10005.74\n## [1] 10005.75\n## [1] 10005.75\n## [1] 10005.75\n## [1] 10005.75\n## [1] 10005.75\n## [1] 10005.75\n## [1] 10005.75\n## [1] 10005.76\n## [1] 10005.76\n## [1] 10005.76\n## [1] 10005.76\n## [1] 10005.76\n## [1] 10005.76\n## [1] 10005.76\n## [1] 10005.76\n## [1] 10005.77\n## [1] 10005.77\n## [1] 10005.77\n## [1] 10005.77\n## [1] 10005.77\n## [1] 10005.77\n## [1] 10005.77\n## [1] 10005.78\n## [1] 10005.78\n## [1] 10005.78\n## [1] 10005.78\n## [1] 10005.78\n## [1] 10005.78\n## [1] 10005.78\n## [1] 10005.78\n## [1] 10005.79\n## [1] 10005.79\n## [1] 10005.79\n## [1] 10005.79\n## [1] 10005.79\n## [1] 10005.79\n## [1] 10005.79\n## [1] 10005.79\n## [1] 10005.8\n## [1] 10005.8\n## [1] 10005.8\n## [1] 10005.8\n## [1] 10005.8\n## [1] 10005.8\n## [1] 10005.8\n## [1] 10005.81\n## [1] 10005.81\n## [1] 10005.81\n## [1] 10005.81\n## [1] 10005.81\n## [1] 10005.81\n## [1] 10005.81\n## [1] 10005.81\n## [1] 10005.82\n## [1] 10005.82\n## [1] 10005.82\n## [1] 10005.82\n## [1] 10005.82\n## [1] 10005.82\n## [1] 10005.82\n## [1] 10005.83\n## [1] 10005.83\n## [1] 10005.83\n## [1] 10005.83\n## [1] 10005.83\n## [1] 10005.83\n## [1] 10005.83\n## [1] 10005.83\n## [1] 10005.84\n## [1] 10005.84\n## [1] 10005.84\n## [1] 10005.84\n## [1] 10005.84\n## [1] 10005.84\n## [1] 10005.84\n## [1] 10005.84\n## [1] 10005.85\n## [1] 10005.85\n## [1] 10005.85\n## [1] 10005.85\n## [1] 10005.85\n## [1] 10005.85\n## [1] 10005.85\n## [1] 10005.86\n## [1] 10005.86\n## [1] 10005.86\n## [1] 10005.86\n## [1] 10005.86\n## [1] 10005.86\n## [1] 10005.86\n## [1] 10005.86\n## [1] 10005.87\n## [1] 10005.87\n## [1] 10005.87\n## [1] 10005.87\n## [1] 10005.87\n## [1] 10005.87\n## [1] 10005.87\n## [1] 10005.88\n## [1] 10005.88\n## [1] 10005.88\n## [1] 10005.88\n## [1] 10005.88\n## [1] 10005.88\n## [1] 10005.88\n## [1] 10005.88\n## [1] 10005.89\n## [1] 10005.89\n## [1] 10005.89\n## [1] 10005.89\n## [1] 10005.89\n## [1] 10005.89\n## [1] 10005.89\n## [1] 10005.89\n## [1] 10005.9\n## [1] 10005.9\n## [1] 10005.9\n## [1] 10005.9\n## [1] 10005.9\n## [1] 10005.9\n## [1] 10005.9\n## [1] 10005.91\n## [1] 10005.91\n## [1] 10005.91\n## [1] 10005.91\n## [1] 10005.91\n## [1] 10005.91\n## [1] 10005.91\n## [1] 10005.91\n## [1] 10005.92\n## [1] 10005.92\n## [1] 10005.92\n## [1] 10005.92\n## [1] 10005.92\n## [1] 10005.92\n## [1] 10005.92\n## [1] 10005.93\n## [1] 10005.93\n## [1] 10005.93\n## [1] 10005.93\n## [1] 10005.93\n## [1] 10005.93\n## [1] 10005.93\n## [1] 10005.93\n## [1] 10005.94\n## [1] 10005.94\n## [1] 10005.94\n## [1] 10005.94\n## [1] 10005.94\n## [1] 10005.94\n## [1] 10005.94\n## [1] 10005.94\n## [1] 10005.95\n## [1] 10005.95\n## [1] 10005.95\n## [1] 10005.95\n## [1] 10005.95\n## [1] 10005.95\n## [1] 10005.95\n## [1] 10005.96\n## [1] 10005.96\n## [1] 10005.96\n## [1] 10005.96\n## [1] 10005.96\n## [1] 10005.96\n## [1] 10005.96\n## [1] 10005.96\n## [1] 10005.97\n## [1] 10005.97\n## [1] 10005.97\n## [1] 10005.97\n## [1] 10005.97\n## [1] 10005.97\n## [1] 10005.97\n## [1] 10005.98\n## [1] 10005.98\n## [1] 10005.98\n## [1] 10005.98\n## [1] 10005.98\n## [1] 10005.98\n## [1] 10005.98\n## [1] 10005.98\n## [1] 10005.99\n## [1] 10005.99\n## [1] 10005.99\n## [1] 10005.99\n## [1] 10005.99\n## [1] 10005.99\n## [1] 10005.99\n## [1] 10005.99\n## [1] 10006\n## [1] 10006\n## [1] 10006\n## [1] 10006\n## [1] 10006\n## [1] 10006\n## [1] 10006\n## [1] 10006.01\n## [1] 10006.01\n## [1] 10006.01\n## [1] 10006.01\n## [1] 10006.01\n## [1] 10006.01\n## [1] 10006.01\n## [1] 10006.01\n## [1] 10006.02\n## [1] 10006.02\n## [1] 10006.02\n## [1] 10006.02\n## [1] 10006.02\n## [1] 10006.02\n## [1] 10006.02\n## [1] 10006.02\n## [1] 10006.03\n## [1] 10006.03\n## [1] 10006.03\n## [1] 10006.03\n## [1] 10006.03\n## [1] 10006.03\n## [1] 10006.03\n## [1] 10006.04\n## [1] 10006.04\n## [1] 10006.04\n## [1] 10006.04\n## [1] 10006.04\n## [1] 10006.04\n## [1] 10006.04\n## [1] 10006.04\n## [1] 10006.05\n## [1] 10006.05\n## [1] 10006.05\n## [1] 10006.05\n## [1] 10006.05\n## [1] 10006.05\n## [1] 10006.05\n## [1] 10006.06\n## [1] 10006.06\n## [1] 10006.06\n## [1] 10006.06\n## [1] 10006.06\n## [1] 10006.06\n## [1] 10006.06\n## [1] 10006.06\n## [1] 10006.07\n## [1] 10006.07\n## [1] 10006.07\n## [1] 10006.07\n## [1] 10006.07\n## [1] 10006.07\n## [1] 10006.07\n## [1] 10006.07\n## [1] 10006.08\n## [1] 10006.08\n## [1] 10006.08\n## [1] 10006.08\n## [1] 10006.08\n## [1] 10006.08\n## [1] 10006.08\n## [1] 10006.09\n## [1] 10006.09\n## [1] 10006.09\n## [1] 10006.09\n## [1] 10006.09\n## [1] 10006.09\n## [1] 10006.09\n## [1] 10006.09\n## [1] 10006.1\n## [1] 10006.1\n## [1] 10006.1\n## [1] 10006.1\n## [1] 10006.1\n## [1] 10006.1\n## [1] 10006.1\n## [1] 10006.11\n## [1] 10006.11\n## [1] 10006.11\n## [1] 10006.11\n## [1] 10006.11\n## [1] 10006.11\n## [1] 10006.11\n## [1] 10006.11\n## [1] 10006.12\n## [1] 10006.12\n## [1] 10006.12\n## [1] 10006.12\n## [1] 10006.12\n## [1] 10006.12\n## [1] 10006.12\n## [1] 10006.12\n## [1] 10006.13\n## [1] 10006.13\n## [1] 10006.13\n## [1] 10006.13\n## [1] 10006.13\n## [1] 10006.13\n## [1] 10006.13\n## [1] 10006.14\n## [1] 10006.14\n## [1] 10006.14\n## [1] 10006.14\n## [1] 10006.14\n## [1] 10006.14\n## [1] 10006.14\n## [1] 10006.14\n## [1] 10006.15\n## [1] 10006.15\n## [1] 10006.15\n## [1] 10006.15\n## [1] 10006.15\n## [1] 10006.15\n## [1] 10006.15\n## [1] 10006.16\n## [1] 10006.16\n## [1] 10006.16\n## [1] 10006.16\n## [1] 10006.16\n## [1] 10006.16\n## [1] 10006.16\n## [1] 10006.16\n## [1] 10006.17\n## [1] 10006.17\n## [1] 10006.17\n## [1] 10006.17\n## [1] 10006.17\n## [1] 10006.17\n## [1] 10006.17\n## [1] 10006.17\n## [1] 10006.18\n## [1] 10006.18\n## [1] 10006.18\n## [1] 10006.18\n## [1] 10006.18\n## [1] 10006.18\n## [1] 10006.18\n## [1] 10006.19\n## [1] 10006.19\n## [1] 10006.19\n## [1] 10006.19\n## [1] 10006.19\n## [1] 10006.19\n## [1] 10006.19\n## [1] 10006.19\n## [1] 10006.2\n## [1] 10006.2\n## [1] 10006.2\n## [1] 10006.2\n## [1] 10006.2\n## [1] 10006.2\n## [1] 10006.2\n## [1] 10006.21\n## [1] 10006.21\n## [1] 10006.21\n## [1] 10006.21\n## [1] 10006.21\n## [1] 10006.21\n## [1] 10006.21\n## [1] 10006.21\n## [1] 10006.22\n## [1] 10006.22\n## [1] 10006.22\n## [1] 10006.22\n## [1] 10006.22\n## [1] 10006.22\n## [1] 10006.22\n## [1] 10006.22\n## [1] 10006.23\n## [1] 10006.23\n## [1] 10006.23\n## [1] 10006.23\n## [1] 10006.23\n## [1] 10006.23\n## [1] 10006.23\n## [1] 10006.24\n## [1] 10006.24\n## [1] 10006.24\n## [1] 10006.24\n## [1] 10006.24\n## [1] 10006.24\n## [1] 10006.24\n## [1] 10006.24\n## [1] 10006.25\n## [1] 10006.25\n## [1] 10006.25\n## [1] 10006.25\n## [1] 10006.25\n## [1] 10006.25\n## [1] 10006.25\n## [1] 10006.26\n## [1] 10006.26\n## [1] 10006.26\n## [1] 10006.26\n## [1] 10006.26\n## [1] 10006.26\n## [1] 10006.26\n## [1] 10006.26\n## [1] 10006.27\n## [1] 10006.27\n## [1] 10006.27\n## [1] 10006.27\n## [1] 10006.27\n## [1] 10006.27\n## [1] 10006.27\n## [1] 10006.27\n## [1] 10006.28\n## [1] 10006.28\n## [1] 10006.28\n## [1] 10006.28\n## [1] 10006.28\n## [1] 10006.28\n## [1] 10006.28\n## [1] 10006.29\n## [1] 10006.29\n## [1] 10006.29\n## [1] 10006.29\n## [1] 10006.29\n## [1] 10006.29\n## [1] 10006.29\n## [1] 10006.29\n## [1] 10006.3\n## [1] 10006.3\n## [1] 10006.3\n## [1] 10006.3\n## [1] 10006.3\n## [1] 10006.3\n## [1] 10006.3\n## [1] 10006.31\n## [1] 10006.31\n## [1] 10006.31\n## [1] 10006.31\n## [1] 10006.31\n## [1] 10006.31\n## [1] 10006.31\n## [1] 10006.31\n## [1] 10006.32\n## [1] 10006.32\n## [1] 10006.32\n## [1] 10006.32\n## [1] 10006.32\n## [1] 10006.32\n## [1] 10006.32\n## [1] 10006.32\n## [1] 10006.33\n## [1] 10006.33\n## [1] 10006.33\n## [1] 10006.33\n## [1] 10006.33\n## [1] 10006.33\n## [1] 10006.33\n## [1] 10006.34\n## [1] 10006.34\n## [1] 10006.34\n## [1] 10006.34\n## [1] 10006.34\n## [1] 10006.34\n## [1] 10006.34\n## [1] 10006.34\n## [1] 10006.35\n## [1] 10006.35\n## [1] 10006.35\n## [1] 10006.35\n## [1] 10006.35\n## [1] 10006.35\n## [1] 10006.35\n## [1] 10006.36\n## [1] 10006.36\n## [1] 10006.36\n## [1] 10006.36\n## [1] 10006.36\n## [1] 10006.36\n## [1] 10006.36\n## [1] 10006.36\n## [1] 10006.37\n## [1] 10006.37\n## [1] 10006.37\n## [1] 10006.37\n## [1] 10006.37\n## [1] 10006.37\n## [1] 10006.37\n## [1] 10006.37\n## [1] 10006.38\n## [1] 10006.38\n## [1] 10006.38\n## [1] 10006.38\n## [1] 10006.38\n## [1] 10006.38\n## [1] 10006.38\n## [1] 10006.39\n## [1] 10006.39\n## [1] 10006.39\n## [1] 10006.39\n## [1] 10006.39\n## [1] 10006.39\n## [1] 10006.39\n## [1] 10006.39\n## [1] 10006.4\n## [1] 10006.4\n## [1] 10006.4\n## [1] 10006.4\n## [1] 10006.4\n## [1] 10006.4\n## [1] 10006.4\n## [1] 10006.4\n## [1] 10006.41\n## [1] 10006.41\n## [1] 10006.41\n## [1] 10006.41\n## [1] 10006.41\n## [1] 10006.41\n## [1] 10006.41\n## [1] 10006.42\n## [1] 10006.42\n## [1] 10006.42\n## [1] 10006.42\n## [1] 10006.42\n## [1] 10006.42\n## [1] 10006.42\n## [1] 10006.42\n## [1] 10006.43\n## [1] 10006.43\n## [1] 10006.43\n## [1] 10006.43\n## [1] 10006.43\n## [1] 10006.43\n## [1] 10006.43\n## [1] 10006.44\n## [1] 10006.44\n## [1] 10006.44\n## [1] 10006.44\n## [1] 10006.44\n## [1] 10006.44\n## [1] 10006.44\n## [1] 10006.44\n## [1] 10006.45\n## [1] 10006.45\n## [1] 10006.45\n## [1] 10006.45\n## [1] 10006.45\n## [1] 10006.45\n## [1] 10006.45\n## [1] 10006.45\n## [1] 10006.46\n## [1] 10006.46\n## [1] 10006.46\n## [1] 10006.46\n## [1] 10006.46\n## [1] 10006.46\n## [1] 10006.46\n## [1] 10006.47\n## [1] 10006.47\n## [1] 10006.47\n## [1] 10006.47\n## [1] 10006.47\n## [1] 10006.47\n## [1] 10006.47\n## [1] 10006.47\n## [1] 10006.48\n## [1] 10006.48\n## [1] 10006.48\n## [1] 10006.48\n## [1] 10006.48\n## [1] 10006.48\n## [1] 10006.48\n## [1] 10006.49\n## [1] 10006.49\n## [1] 10006.49\n## [1] 10006.49\n## [1] 10006.49\n## [1] 10006.49\n## [1] 10006.49\n## [1] 10006.49\n## [1] 10006.5\n## [1] 10006.5\n## [1] 10006.5\n## [1] 10006.5\n## [1] 10006.5\n## [1] 10006.5\n## [1] 10006.5\n## [1] 10006.5\n## [1] 10006.51\n## [1] 10006.51\n## [1] 10006.51\n## [1] 10006.51\n## [1] 10006.51\n## [1] 10006.51\n## [1] 10006.51\n## [1] 10006.52\n## [1] 10006.52\n## [1] 10006.52\n## [1] 10006.52\n## [1] 10006.52\n## [1] 10006.52\n## [1] 10006.52\n## [1] 10006.52\n## [1] 10006.53\n## [1] 10006.53\n## [1] 10006.53\n## [1] 10006.53\n## [1] 10006.53\n## [1] 10006.53\n## [1] 10006.53\n## [1] 10006.54\n## [1] 10006.54\n## [1] 10006.54\n## [1] 10006.54\n## [1] 10006.54\n## [1] 10006.54\n## [1] 10006.54\n## [1] 10006.54\n## [1] 10006.55\n## [1] 10006.55\n## [1] 10006.55\n## [1] 10006.55\n## [1] 10006.55\n## [1] 10006.55\n## [1] 10006.55\n## [1] 10006.55\n## [1] 10006.56\n## [1] 10006.56\n## [1] 10006.56\n## [1] 10006.56\n## [1] 10006.56\n## [1] 10006.56\n## [1] 10006.56\n## [1] 10006.57\n## [1] 10006.57\n## [1] 10006.57\n## [1] 10006.57\n## [1] 10006.57\n## [1] 10006.57\n## [1] 10006.57\n## [1] 10006.57\n## [1] 10006.58\n## [1] 10006.58\n## [1] 10006.58\n## [1] 10006.58\n## [1] 10006.58\n## [1] 10006.58\n## [1] 10006.58\n## [1] 10006.59\n## [1] 10006.59\n## [1] 10006.59\n## [1] 10006.59\n## [1] 10006.59\n## [1] 10006.59\n## [1] 10006.59\n## [1] 10006.59\n## [1] 10006.6\n## [1] 10006.6\n## [1] 10006.6\n## [1] 10006.6\n## [1] 10006.6\n## [1] 10006.6\n## [1] 10006.6\n## [1] 10006.6\n## [1] 10006.61\n## [1] 10006.61\n## [1] 10006.61\n## [1] 10006.61\n## [1] 10006.61\n## [1] 10006.61\n## [1] 10006.61\n## [1] 10006.62\n## [1] 10006.62\n## [1] 10006.62\n## [1] 10006.62\n## [1] 10006.62\n## [1] 10006.62\n## [1] 10006.62\n## [1] 10006.62\n## [1] 10006.63\n## [1] 10006.63\n## [1] 10006.63\n## [1] 10006.63\n## [1] 10006.63\n## [1] 10006.63\n## [1] 10006.63\n## [1] 10006.64\n## [1] 10006.64\n## [1] 10006.64\n## [1] 10006.64\n## [1] 10006.64\n## [1] 10006.64\n## [1] 10006.64\n## [1] 10006.64\n## [1] 10006.65\n## [1] 10006.65\n## [1] 10006.65\n## [1] 10006.65\n## [1] 10006.65\n## [1] 10006.65\n## [1] 10006.65\n## [1] 10006.65\n## [1] 10006.66\n## [1] 10006.66\n## [1] 10006.66\n## [1] 10006.66\n## [1] 10006.66\n## [1] 10006.66\n## [1] 10006.66\n## [1] 10006.67\n## [1] 10006.67\n## [1] 10006.67\n## [1] 10006.67\n## [1] 10006.67\n## [1] 10006.67\n## [1] 10006.67\n## [1] 10006.67\n## [1] 10006.68\n## [1] 10006.68\n## [1] 10006.68\n## [1] 10006.68\n## [1] 10006.68\n## [1] 10006.68\n## [1] 10006.68\n## [1] 10006.69\n## [1] 10006.69\n## [1] 10006.69\n## [1] 10006.69\n## [1] 10006.69\n## [1] 10006.69\n## [1] 10006.69\n## [1] 10006.69\n## [1] 10006.7\n## [1] 10006.7\n## [1] 10006.7\n## [1] 10006.7\n## [1] 10006.7\n## [1] 10006.7\n## [1] 10006.7\n## [1] 10006.7\n## [1] 10006.71\n## [1] 10006.71\n## [1] 10006.71\n## [1] 10006.71\n## [1] 10006.71\n## [1] 10006.71\n## [1] 10006.71\n## [1] 10006.72\n## [1] 10006.72\n## [1] 10006.72\n## [1] 10006.72\n## [1] 10006.72\n## [1] 10006.72\n## [1] 10006.72\n## [1] 10006.72\n## [1] 10006.73\n## [1] 10006.73\n## [1] 10006.73\n## [1] 10006.73\n## [1] 10006.73\n## [1] 10006.73\n## [1] 10006.73\n## [1] 10006.74\n## [1] 10006.74\n## [1] 10006.74\n## [1] 10006.74\n## [1] 10006.74\n## [1] 10006.74\n## [1] 10006.74\n## [1] 10006.74\n## [1] 10006.75\n## [1] 10006.75\n## [1] 10006.75\n## [1] 10006.75\n## [1] 10006.75\n## [1] 10006.75\n## [1] 10006.75\n## [1] 10006.75\n## [1] 10006.76\n## [1] 10006.76\n## [1] 10006.76\n## [1] 10006.76\n## [1] 10006.76\n## [1] 10006.76\n## [1] 10006.76\n## [1] 10006.77\n## [1] 10006.77\n## [1] 10006.77\n## [1] 10006.77\n## [1] 10006.77\n## [1] 10006.77\n## [1] 10006.77\n## [1] 10006.77\n## [1] 10006.78\n## [1] 10006.78\n## [1] 10006.78\n## [1] 10006.78\n## [1] 10006.78\n## [1] 10006.78\n## [1] 10006.78\n## [1] 10006.79\n## [1] 10006.79\n## [1] 10006.79\n## [1] 10006.79\n## [1] 10006.79\n## [1] 10006.79\n## [1] 10006.79\n## [1] 10006.79\n## [1] 10006.8\n## [1] 10006.8\n## [1] 10006.8\n## [1] 10006.8\n## [1] 10006.8\n## [1] 10006.8\n## [1] 10006.8\n## [1] 10006.8\n## [1] 10006.81\n## [1] 10006.81\n## [1] 10006.81\n## [1] 10006.81\n## [1] 10006.81\n## [1] 10006.81\n## [1] 10006.81\n## [1] 10006.82\n## [1] 10006.82\n## [1] 10006.82\n## [1] 10006.82\n## [1] 10006.82\n## [1] 10006.82\n## [1] 10006.82\n## [1] 10006.82\n## [1] 10006.83\n## [1] 10006.83\n## [1] 10006.83\n## [1] 10006.83\n## [1] 10006.83\n## [1] 10006.83\n## [1] 10006.83\n## [1] 10006.83\n## [1] 10006.84\n## [1] 10006.84\n## [1] 10006.84\n## [1] 10006.84\n## [1] 10006.84\n## [1] 10006.84\n## [1] 10006.84\n## [1] 10006.85\n## [1] 10006.85\n## [1] 10006.85\n## [1] 10006.85\n## [1] 10006.85\n## [1] 10006.85\n## [1] 10006.85\n## [1] 10006.85\n## [1] 10006.86\n## [1] 10006.86\n## [1] 10006.86\n## [1] 10006.86\n## [1] 10006.86\n## [1] 10006.86\n## [1] 10006.86\n## [1] 10006.87\n## [1] 10006.87\n## [1] 10006.87\n## [1] 10006.87\n## [1] 10006.87\n## [1] 10006.87\n## [1] 10006.87\n## [1] 10006.87\n## [1] 10006.88\n## [1] 10006.88\n## [1] 10006.88\n## [1] 10006.88\n## [1] 10006.88\n## [1] 10006.88\n## [1] 10006.88\n## [1] 10006.88\n## [1] 10006.89\n## [1] 10006.89\n## [1] 10006.89\n## [1] 10006.89\n## [1] 10006.89\n## [1] 10006.89\n## [1] 10006.89\n## [1] 10006.9\n## [1] 10006.9\n## [1] 10006.9\n## [1] 10006.9\n## [1] 10006.9\n## [1] 10006.9\n## [1] 10006.9\n## [1] 10006.9\n## [1] 10006.91\n## [1] 10006.91\n## [1] 10006.91\n## [1] 10006.91\n## [1] 10006.91\n## [1] 10006.91\n## [1] 10006.91\n## [1] 10006.92\n## [1] 10006.92\n## [1] 10006.92\n## [1] 10006.92\n## [1] 10006.92\n## [1] 10006.92\n## [1] 10006.92\n## [1] 10006.92\n## [1] 10006.93\n## [1] 10006.93\n## [1] 10006.93\n## [1] 10006.93\n## [1] 10006.93\n## [1] 10006.93\n## [1] 10006.93\n## [1] 10006.93\n## [1] 10006.94\n## [1] 10006.94\n## [1] 10006.94\n## [1] 10006.94\n## [1] 10006.94\n## [1] 10006.94\n## [1] 10006.94\n## [1] 10006.95\n## [1] 10006.95\n## [1] 10006.95\n## [1] 10006.95\n## [1] 10006.95\n## [1] 10006.95\n## [1] 10006.95\n## [1] 10006.95\n## [1] 10006.96\n## [1] 10006.96\n## [1] 10006.96\n## [1] 10006.96\n## [1] 10006.96\n## [1] 10006.96\n## [1] 10006.96\n## [1] 10006.97\n## [1] 10006.97\n## [1] 10006.97\n## [1] 10006.97\n## [1] 10006.97\n## [1] 10006.97\n## [1] 10006.97\n## [1] 10006.97\n## [1] 10006.98\n## [1] 10006.98\n## [1] 10006.98\n## [1] 10006.98\n## [1] 10006.98\n## [1] 10006.98\n## [1] 10006.98\n## [1] 10006.98\n## [1] 10006.99\n## [1] 10006.99\n## [1] 10006.99\n## [1] 10006.99\n## [1] 10006.99\n## [1] 10006.99\n## [1] 10006.99\n## [1] 10007\n## [1] 10007\n## [1] 10007\n## [1] 10007\n## [1] 10007\n## [1] 10007\n## [1] 10007\n## [1] 10007\n## [1] 10007.01\n## [1] 10007.01\n## [1] 10007.01\n## [1] 10007.01\n## [1] 10007.01\n## [1] 10007.01\n## [1] 10007.01\n## [1] 10007.02\n## [1] 10007.02\n## [1] 10007.02\n## [1] 10007.02\n## [1] 10007.02\n## [1] 10007.02\n## [1] 10007.02\n## [1] 10007.02\n## [1] 10007.03\n## [1] 10007.03\n## [1] 10007.03\n## [1] 10007.03\n## [1] 10007.03\n## [1] 10007.03\n## [1] 10007.03\n## [1] 10007.03\n## [1] 10007.04\n## [1] 10007.04\n## [1] 10007.04\n## [1] 10007.04\n## [1] 10007.04\n## [1] 10007.04\n## [1] 10007.04\n## [1] 10007.05\n## [1] 10007.05\n## [1] 10007.05\n## [1] 10007.05\n## [1] 10007.05\n## [1] 10007.05\n## [1] 10007.05\n## [1] 10007.05\n## [1] 10007.06\n## [1] 10007.06\n## [1] 10007.06\n## [1] 10007.06\n## [1] 10007.06\n## [1] 10007.06\n## [1] 10007.06\n## [1] 10007.07\n## [1] 10007.07\n## [1] 10007.07\n## [1] 10007.07\n## [1] 10007.07\n## [1] 10007.07\n## [1] 10007.07\n## [1] 10007.07\n## [1] 10007.08\n## [1] 10007.08\n## [1] 10007.08\n## [1] 10007.08\n## [1] 10007.08\n## [1] 10007.08\n## [1] 10007.08\n## [1] 10007.08\n## [1] 10007.09\n## [1] 10007.09\n## [1] 10007.09\n## [1] 10007.09\n## [1] 10007.09\n## [1] 10007.09\n## [1] 10007.09\n## [1] 10007.1\n## [1] 10007.1\n## [1] 10007.1\n## [1] 10007.1\n## [1] 10007.1\n## [1] 10007.1\n## [1] 10007.1\n## [1] 10007.1\n## [1] 10007.11\n## [1] 10007.11\n## [1] 10007.11\n## [1] 10007.11\n## [1] 10007.11\n## [1] 10007.11\n## [1] 10007.11\n## [1] 10007.12\n## [1] 10007.12\n## [1] 10007.12\n## [1] 10007.12\n## [1] 10007.12\n## [1] 10007.12\n## [1] 10007.12\n## [1] 10007.12\n## [1] 10007.13\n## [1] 10007.13\n## [1] 10007.13\n## [1] 10007.13\n## [1] 10007.13\n## [1] 10007.13\n## [1] 10007.13\n## [1] 10007.13\n## [1] 10007.14\n## [1] 10007.14\n## [1] 10007.14\n## [1] 10007.14\n## [1] 10007.14\n## [1] 10007.14\n## [1] 10007.14\n## [1] 10007.15\n## [1] 10007.15\n## [1] 10007.15\n## [1] 10007.15\n## [1] 10007.15\n## [1] 10007.15\n## [1] 10007.15\n## [1] 10007.15\n## [1] 10007.16\n## [1] 10007.16\n## [1] 10007.16\n## [1] 10007.16\n## [1] 10007.16\n## [1] 10007.16\n## [1] 10007.16\n## [1] 10007.17\n## [1] 10007.17\n## [1] 10007.17\n## [1] 10007.17\n## [1] 10007.17\n## [1] 10007.17\n## [1] 10007.17\n## [1] 10007.17\n## [1] 10007.18\n## [1] 10007.18\n## [1] 10007.18\n## [1] 10007.18\n## [1] 10007.18\n## [1] 10007.18\n## [1] 10007.18\n## [1] 10007.18\n## [1] 10007.19\n## [1] 10007.19\n## [1] 10007.19\n## [1] 10007.19\n## [1] 10007.19\n## [1] 10007.19\n## [1] 10007.19\n## [1] 10007.2\n## [1] 10007.2\n## [1] 10007.2\n## [1] 10007.2\n## [1] 10007.2\n## [1] 10007.2\n## [1] 10007.2\n## [1] 10007.2\n## [1] 10007.21\n## [1] 10007.21\n## [1] 10007.21\n## [1] 10007.21\n## [1] 10007.21\n## [1] 10007.21\n## [1] 10007.21\n## [1] 10007.21\n## [1] 10007.22\n## [1] 10007.22\n## [1] 10007.22\n## [1] 10007.22\n## [1] 10007.22\n## [1] 10007.22\n## [1] 10007.22\n## [1] 10007.23\n## [1] 10007.23\n## [1] 10007.23\n## [1] 10007.23\n## [1] 10007.23\n## [1] 10007.23\n## [1] 10007.23\n## [1] 10007.23\n## [1] 10007.24\n## [1] 10007.24\n## [1] 10007.24\n## [1] 10007.24\n## [1] 10007.24\n## [1] 10007.24\n## [1] 10007.24\n## [1] 10007.25\n## [1] 10007.25\n## [1] 10007.25\n## [1] 10007.25\n## [1] 10007.25\n## [1] 10007.25\n## [1] 10007.25\n## [1] 10007.25\n## [1] 10007.26\n## [1] 10007.26\n## [1] 10007.26\n## [1] 10007.26\n## [1] 10007.26\n## [1] 10007.26\n## [1] 10007.26\n## [1] 10007.26\n## [1] 10007.27\n## [1] 10007.27\n## [1] 10007.27\n## [1] 10007.27\n## [1] 10007.27\n## [1] 10007.27\n## [1] 10007.27\n## [1] 10007.28\n## [1] 10007.28\n## [1] 10007.28\n## [1] 10007.28\n## [1] 10007.28\n## [1] 10007.28\n## [1] 10007.28\n## [1] 10007.28\n## [1] 10007.29\n## [1] 10007.29\n## [1] 10007.29\n## [1] 10007.29\n## [1] 10007.29\n## [1] 10007.29\n## [1] 10007.29\n## [1] 10007.3\n## [1] 10007.3\n## [1] 10007.3\n## [1] 10007.3\n## [1] 10007.3\n## [1] 10007.3\n## [1] 10007.3\n## [1] 10007.3\n## [1] 10007.31\n## [1] 10007.31\n## [1] 10007.31\n## [1] 10007.31\n## [1] 10007.31\n## [1] 10007.31\n## [1] 10007.31\n## [1] 10007.31\n## [1] 10007.32\n## [1] 10007.32\n## [1] 10007.32\n## [1] 10007.32\n## [1] 10007.32\n## [1] 10007.32\n## [1] 10007.32\n## [1] 10007.33\n## [1] 10007.33\n## [1] 10007.33\n## [1] 10007.33\n## [1] 10007.33\n## [1] 10007.33\n## [1] 10007.33\n## [1] 10007.33\n## [1] 10007.34\n## [1] 10007.34\n## [1] 10007.34\n## [1] 10007.34\n## [1] 10007.34\n## [1] 10007.34\n## [1] 10007.34\n## [1] 10007.35\n## [1] 10007.35\n## [1] 10007.35\n## [1] 10007.35\n## [1] 10007.35\n## [1] 10007.35\n## [1] 10007.35\n## [1] 10007.35\n## [1] 10007.36\n## [1] 10007.36\n## [1] 10007.36\n## [1] 10007.36\n## [1] 10007.36\n## [1] 10007.36\n## [1] 10007.36\n## [1] 10007.36\n## [1] 10007.37\n## [1] 10007.37\n## [1] 10007.37\n## [1] 10007.37\n## [1] 10007.37\n## [1] 10007.37\n## [1] 10007.37\n## [1] 10007.38\n## [1] 10007.38\n## [1] 10007.38\n## [1] 10007.38\n## [1] 10007.38\n## [1] 10007.38\n## [1] 10007.38\n## [1] 10007.38\n## [1] 10007.39\n## [1] 10007.39\n## [1] 10007.39\n## [1] 10007.39\n## [1] 10007.39\n## [1] 10007.39\n## [1] 10007.39\n## [1] 10007.4\n## [1] 10007.4\n## [1] 10007.4\n## [1] 10007.4\n## [1] 10007.4\n## [1] 10007.4\n## [1] 10007.4\n## [1] 10007.4\n## [1] 10007.41\n## [1] 10007.41\n## [1] 10007.41\n## [1] 10007.41\n## [1] 10007.41\n## [1] 10007.41\n## [1] 10007.41\n## [1] 10007.41\n## [1] 10007.42\n## [1] 10007.42\n## [1] 10007.42\n## [1] 10007.42\n## [1] 10007.42\n## [1] 10007.42\n## [1] 10007.42\n## [1] 10007.43\n## [1] 10007.43\n## [1] 10007.43\n## [1] 10007.43\n## [1] 10007.43\n## [1] 10007.43\n## [1] 10007.43\n## [1] 10007.43\n## [1] 10007.44\n## [1] 10007.44\n## [1] 10007.44\n## [1] 10007.44\n## [1] 10007.44\n## [1] 10007.44\n## [1] 10007.44\n## [1] 10007.45\n## [1] 10007.45\n## [1] 10007.45\n## [1] 10007.45\n## [1] 10007.45\n## [1] 10007.45\n## [1] 10007.45\n## [1] 10007.45\n## [1] 10007.46\n## [1] 10007.46\n## [1] 10007.46\n## [1] 10007.46\n## [1] 10007.46\n## [1] 10007.46\n## [1] 10007.46\n## [1] 10007.46\n## [1] 10007.47\n## [1] 10007.47\n## [1] 10007.47\n## [1] 10007.47\n## [1] 10007.47\n## [1] 10007.47\n## [1] 10007.47\n## [1] 10007.48\n## [1] 10007.48\n## [1] 10007.48\n## [1] 10007.48\n## [1] 10007.48\n## [1] 10007.48\n## [1] 10007.48\n## [1] 10007.48\n## [1] 10007.49\n## [1] 10007.49\n## [1] 10007.49\n## [1] 10007.49\n## [1] 10007.49\n## [1] 10007.49\n## [1] 10007.49\n## [1] 10007.5\n## [1] 10007.5\n## [1] 10007.5\n## [1] 10007.5\n## [1] 10007.5\n## [1] 10007.5\n## [1] 10007.5\n## [1] 10007.5\n## [1] 10007.51\n## [1] 10007.51\n## [1] 10007.51\n## [1] 10007.51\n## [1] 10007.51\n## [1] 10007.51\n## [1] 10007.51\n## [1] 10007.51\n## [1] 10007.52\n## [1] 10007.52\n## [1] 10007.52\n## [1] 10007.52\n## [1] 10007.52\n## [1] 10007.52\n## [1] 10007.52\n## [1] 10007.53\n## [1] 10007.53\n## [1] 10007.53\n## [1] 10007.53\n## [1] 10007.53\n## [1] 10007.53\n## [1] 10007.53\n## [1] 10007.53\n## [1] 10007.54\n## [1] 10007.54\n## [1] 10007.54\n## [1] 10007.54\n## [1] 10007.54\n## [1] 10007.54\n## [1] 10007.54\n## [1] 10007.55\n## [1] 10007.55\n## [1] 10007.55\n## [1] 10007.55\n## [1] 10007.55\n## [1] 10007.55\n## [1] 10007.55\n## [1] 10007.55\n## [1] 10007.56\n## [1] 10007.56\n## [1] 10007.56\n## [1] 10007.56\n## [1] 10007.56\n## [1] 10007.56\n## [1] 10007.56\n## [1] 10007.56\n## [1] 10007.57\n## [1] 10007.57\n## [1] 10007.57\n## [1] 10007.57\n## [1] 10007.57\n## [1] 10007.57\n## [1] 10007.57\n## [1] 10007.58\n## [1] 10007.58\n## [1] 10007.58\n## [1] 10007.58\n## [1] 10007.58\n## [1] 10007.58\n## [1] 10007.58\n## [1] 10007.58\n## [1] 10007.59\n## [1] 10007.59\n## [1] 10007.59\n## [1] 10007.59\n## [1] 10007.59\n## [1] 10007.59\n## [1] 10007.59\n## [1] 10007.6\n## [1] 10007.6\n## [1] 10007.6\n## [1] 10007.6\n## [1] 10007.6\n## [1] 10007.6\n## [1] 10007.6\n## [1] 10007.6\n## [1] 10007.61\n## [1] 10007.61\n## [1] 10007.61\n## [1] 10007.61\n## [1] 10007.61\n## [1] 10007.61\n## [1] 10007.61\n## [1] 10007.61\n## [1] 10007.62\n## [1] 10007.62\n## [1] 10007.62\n## [1] 10007.62\n## [1] 10007.62\n## [1] 10007.62\n## [1] 10007.62\n## [1] 10007.63\n## [1] 10007.63\n## [1] 10007.63\n## [1] 10007.63\n## [1] 10007.63\n## [1] 10007.63\n## [1] 10007.63\n## [1] 10007.63\n## [1] 10007.64\n## [1] 10007.64\n## [1] 10007.64\n## [1] 10007.64\n## [1] 10007.64\n## [1] 10007.64\n## [1] 10007.64\n## [1] 10007.64\n## [1] 10007.65\n## [1] 10007.65\n## [1] 10007.65\n## [1] 10007.65\n## [1] 10007.65\n## [1] 10007.65\n## [1] 10007.65\n## [1] 10007.66\n## [1] 10007.66\n## [1] 10007.66\n## [1] 10007.66\n## [1] 10007.66\n## [1] 10007.66\n## [1] 10007.66\n## [1] 10007.66\n## [1] 10007.67\n## [1] 10007.67\n## [1] 10007.67\n## [1] 10007.67\n## [1] 10007.67\n## [1] 10007.67\n## [1] 10007.67\n## [1] 10007.68\n## [1] 10007.68\n## [1] 10007.68\n## [1] 10007.68\n## [1] 10007.68\n## [1] 10007.68\n## [1] 10007.68\n## [1] 10007.68\n## [1] 10007.69\n## [1] 10007.69\n## [1] 10007.69\n## [1] 10007.69\n## [1] 10007.69\n## [1] 10007.69\n## [1] 10007.69\n## [1] 10007.69\n## [1] 10007.7\n## [1] 10007.7\n## [1] 10007.7\n## [1] 10007.7\n## [1] 10007.7\n## [1] 10007.7\n## [1] 10007.7\n## [1] 10007.71\n## [1] 10007.71\n## [1] 10007.71\n## [1] 10007.71\n## [1] 10007.71\n## [1] 10007.71\n## [1] 10007.71\n## [1] 10007.71\n## [1] 10007.72\n## [1] 10007.72\n## [1] 10007.72\n## [1] 10007.72\n## [1] 10007.72\n## [1] 10007.72\n## [1] 10007.72\n## [1] 10007.73\n## [1] 10007.73\n## [1] 10007.73\n## [1] 10007.73\n## [1] 10007.73\n## [1] 10007.73\n## [1] 10007.73\n## [1] 10007.73\n## [1] 10007.74\n## [1] 10007.74\n## [1] 10007.74\n## [1] 10007.74\n## [1] 10007.74\n## [1] 10007.74\n## [1] 10007.74\n## [1] 10007.74\n## [1] 10007.75\n## [1] 10007.75\n## [1] 10007.75\n## [1] 10007.75\n## [1] 10007.75\n## [1] 10007.75\n## [1] 10007.75\n## [1] 10007.76\n## [1] 10007.76\n## [1] 10007.76\n## [1] 10007.76\n## [1] 10007.76\n## [1] 10007.76\n## [1] 10007.76\n## [1] 10007.76\n## [1] 10007.77\n## [1] 10007.77\n## [1] 10007.77\n## [1] 10007.77\n## [1] 10007.77\n## [1] 10007.77\n## [1] 10007.77\n## [1] 10007.78\n## [1] 10007.78\n## [1] 10007.78\n## [1] 10007.78\n## [1] 10007.78\n## [1] 10007.78\n## [1] 10007.78\n## [1] 10007.78\n## [1] 10007.79\n## [1] 10007.79\n## [1] 10007.79\n## [1] 10007.79\n## [1] 10007.79\n## [1] 10007.79\n## [1] 10007.79\n## [1] 10007.79\n## [1] 10007.8\n## [1] 10007.8\n## [1] 10007.8\n## [1] 10007.8\n## [1] 10007.8\n## [1] 10007.8\n## [1] 10007.8\n## [1] 10007.81\n## [1] 10007.81\n## [1] 10007.81\n## [1] 10007.81\n## [1] 10007.81\n## [1] 10007.81\n## [1] 10007.81\n## [1] 10007.81\n## [1] 10007.82\n## [1] 10007.82\n## [1] 10007.82\n## [1] 10007.82\n## [1] 10007.82\n## [1] 10007.82\n## [1] 10007.82\n## [1] 10007.83\n## [1] 10007.83\n## [1] 10007.83\n## [1] 10007.83\n## [1] 10007.83\n## [1] 10007.83\n## [1] 10007.83\n## [1] 10007.83\n## [1] 10007.84\n## [1] 10007.84\n## [1] 10007.84\n## [1] 10007.84\n## [1] 10007.84\n## [1] 10007.84\n## [1] 10007.84\n## [1] 10007.84\n## [1] 10007.85\n## [1] 10007.85\n## [1] 10007.85\n## [1] 10007.85\n## [1] 10007.85\n## [1] 10007.85\n## [1] 10007.85\n## [1] 10007.86\n## [1] 10007.86\n## [1] 10007.86\n## [1] 10007.86\n## [1] 10007.86\n## [1] 10007.86\n## [1] 10007.86\n## [1] 10007.86\n## [1] 10007.87\n## [1] 10007.87\n## [1] 10007.87\n## [1] 10007.87\n## [1] 10007.87\n## [1] 10007.87\n## [1] 10007.87\n## [1] 10007.88\n## [1] 10007.88\n## [1] 10007.88\n## [1] 10007.88\n## [1] 10007.88\n## [1] 10007.88\n## [1] 10007.88\n## [1] 10007.88\n## [1] 10007.89\n## [1] 10007.89\n## [1] 10007.89\n## [1] 10007.89\n## [1] 10007.89\n## [1] 10007.89\n## [1] 10007.89\n## [1] 10007.89\n## [1] 10007.9\n## [1] 10007.9\n## [1] 10007.9\n## [1] 10007.9\n## [1] 10007.9\n## [1] 10007.9\n## [1] 10007.9\n## [1] 10007.91\n## [1] 10007.91\n## [1] 10007.91\n## [1] 10007.91\n## [1] 10007.91\n## [1] 10007.91\n## [1] 10007.91\n## [1] 10007.91\n## [1] 10007.92\n## [1] 10007.92\n## [1] 10007.92\n## [1] 10007.92\n## [1] 10007.92\n## [1] 10007.92\n## [1] 10007.92\n## [1] 10007.93\n## [1] 10007.93\n## [1] 10007.93\n## [1] 10007.93\n## [1] 10007.93\n## [1] 10007.93\n## [1] 10007.93\n## [1] 10007.93\n## [1] 10007.94\n## [1] 10007.94\n## [1] 10007.94\n## [1] 10007.94\n## [1] 10007.94\n## [1] 10007.94\n## [1] 10007.94\n## [1] 10007.94\n## [1] 10007.95\n## [1] 10007.95\n## [1] 10007.95\n## [1] 10007.95\n## [1] 10007.95\n## [1] 10007.95\n## [1] 10007.95\n## [1] 10007.96\n## [1] 10007.96\n## [1] 10007.96\n## [1] 10007.96\n## [1] 10007.96\n## [1] 10007.96\n## [1] 10007.96\n## [1] 10007.96\n## [1] 10007.97\n## [1] 10007.97\n## [1] 10007.97\n## [1] 10007.97\n## [1] 10007.97\n## [1] 10007.97\n## [1] 10007.97\n## [1] 10007.98\n## [1] 10007.98\n## [1] 10007.98\n## [1] 10007.98\n## [1] 10007.98\n## [1] 10007.98\n## [1] 10007.98\n## [1] 10007.98\n## [1] 10007.99\n## [1] 10007.99\n## [1] 10007.99\n## [1] 10007.99\n## [1] 10007.99\n## [1] 10007.99\n## [1] 10007.99\n## [1] 10007.99\n## [1] 10008\n## [1] 10008\n## [1] 10008\n## [1] 10008\n## [1] 10008\n## [1] 10008\n## [1] 10008\n## [1] 10008.01\n## [1] 10008.01\n## [1] 10008.01\n## [1] 10008.01\n## [1] 10008.01\n## [1] 10008.01\n## [1] 10008.01\n## [1] 10008.01\n## [1] 10008.02\n## [1] 10008.02\n## [1] 10008.02\n## [1] 10008.02\n## [1] 10008.02\n## [1] 10008.02\n## [1] 10008.02\n## [1] 10008.02\n## [1] 10008.03\n## [1] 10008.03\n## [1] 10008.03\n## [1] 10008.03\n## [1] 10008.03\n## [1] 10008.03\n## [1] 10008.03\n## [1] 10008.04\n## [1] 10008.04\n## [1] 10008.04\n## [1] 10008.04\n## [1] 10008.04\n## [1] 10008.04\n## [1] 10008.04\n## [1] 10008.04\n## [1] 10008.05\n## [1] 10008.05\n## [1] 10008.05\n## [1] 10008.05\n## [1] 10008.05\n## [1] 10008.05\n## [1] 10008.05\n## [1] 10008.06\n## [1] 10008.06\n## [1] 10008.06\n## [1] 10008.06\n## [1] 10008.06\n## [1] 10008.06\n## [1] 10008.06\n## [1] 10008.06\n## [1] 10008.07\n## [1] 10008.07\n## [1] 10008.07\n## [1] 10008.07\n## [1] 10008.07\n## [1] 10008.07\n## [1] 10008.07\n## [1] 10008.07\n## [1] 10008.08\n## [1] 10008.08\n## [1] 10008.08\n## [1] 10008.08\n## [1] 10008.08\n## [1] 10008.08\n## [1] 10008.08\n## [1] 10008.09\n## [1] 10008.09\n## [1] 10008.09\n## [1] 10008.09\n## [1] 10008.09\n## [1] 10008.09\n## [1] 10008.09\n## [1] 10008.09\n## [1] 10008.1\n## [1] 10008.1\n## [1] 10008.1\n## [1] 10008.1\n## [1] 10008.1\n## [1] 10008.1\n## [1] 10008.1\n## [1] 10008.11\n## [1] 10008.11\n## [1] 10008.11\n## [1] 10008.11\n## [1] 10008.11\n## [1] 10008.11\n## [1] 10008.11\n## [1] 10008.11\n## [1] 10008.12\n## [1] 10008.12\n## [1] 10008.12\n## [1] 10008.12\n## [1] 10008.12\n## [1] 10008.12\n## [1] 10008.12\n## [1] 10008.12\n## [1] 10008.13\n## [1] 10008.13\n## [1] 10008.13\n## [1] 10008.13\n## [1] 10008.13\n## [1] 10008.13\n## [1] 10008.13\n## [1] 10008.14\n## [1] 10008.14\n## [1] 10008.14\n## [1] 10008.14\n## [1] 10008.14\n## [1] 10008.14\n## [1] 10008.14\n## [1] 10008.14\n## [1] 10008.15\n## [1] 10008.15\n## [1] 10008.15\n## [1] 10008.15\n## [1] 10008.15\n## [1] 10008.15\n## [1] 10008.15\n## [1] 10008.16\n## [1] 10008.16\n## [1] 10008.16\n## [1] 10008.16\n## [1] 10008.16\n## [1] 10008.16\n## [1] 10008.16\n## [1] 10008.16\n## [1] 10008.17\n## [1] 10008.17\n## [1] 10008.17\n## [1] 10008.17\n## [1] 10008.17\n## [1] 10008.17\n## [1] 10008.17\n## [1] 10008.17\n## [1] 10008.18\n## [1] 10008.18\n## [1] 10008.18\n## [1] 10008.18\n## [1] 10008.18\n## [1] 10008.18\n## [1] 10008.18\n## [1] 10008.19\n## [1] 10008.19\n## [1] 10008.19\n## [1] 10008.19\n## [1] 10008.19\n## [1] 10008.19\n## [1] 10008.19\n## [1] 10008.19\n## [1] 10008.2\n## [1] 10008.2\n## [1] 10008.2\n## [1] 10008.2\n## [1] 10008.2\n## [1] 10008.2\n## [1] 10008.2\n## [1] 10008.21\n## [1] 10008.21\n## [1] 10008.21\n## [1] 10008.21\n## [1] 10008.21\n## [1] 10008.21\n## [1] 10008.21\n## [1] 10008.21\n## [1] 10008.22\n## [1] 10008.22\n## [1] 10008.22\n## [1] 10008.22\n## [1] 10008.22\n## [1] 10008.22\n## [1] 10008.22\n## [1] 10008.22\n## [1] 10008.23\n## [1] 10008.23\n## [1] 10008.23\n## [1] 10008.23\n## [1] 10008.23\n## [1] 10008.23\n## [1] 10008.23\n## [1] 10008.24\n## [1] 10008.24\n## [1] 10008.24\n## [1] 10008.24\n## [1] 10008.24\n## [1] 10008.24\n## [1] 10008.24\n## [1] 10008.24\n## [1] 10008.25\n## [1] 10008.25\n## [1] 10008.25\n## [1] 10008.25\n## [1] 10008.25\n## [1] 10008.25\n## [1] 10008.25\n## [1] 10008.26\n## [1] 10008.26\n## [1] 10008.26\n## [1] 10008.26\n## [1] 10008.26\n## [1] 10008.26\n## [1] 10008.26\n## [1] 10008.26\n## [1] 10008.27\n## [1] 10008.27\n## [1] 10008.27\n## [1] 10008.27\n## [1] 10008.27\n## [1] 10008.27\n## [1] 10008.27\n## [1] 10008.27\n## [1] 10008.28\n## [1] 10008.28\n## [1] 10008.28\n## [1] 10008.28\n## [1] 10008.28\n## [1] 10008.28\n## [1] 10008.28\n## [1] 10008.29\n## [1] 10008.29\n## [1] 10008.29\n## [1] 10008.29\n## [1] 10008.29\n## [1] 10008.29\n## [1] 10008.29\n## [1] 10008.29\n## [1] 10008.3\n## [1] 10008.3\n## [1] 10008.3\n## [1] 10008.3\n## [1] 10008.3\n## [1] 10008.3\n## [1] 10008.3\n## [1] 10008.31\n## [1] 10008.31\n## [1] 10008.31\n## [1] 10008.31\n## [1] 10008.31\n## [1] 10008.31\n## [1] 10008.31\n## [1] 10008.31\n## [1] 10008.32\n## [1] 10008.32\n## [1] 10008.32\n## [1] 10008.32\n## [1] 10008.32\n## [1] 10008.32\n## [1] 10008.32\n## [1] 10008.32\n## [1] 10008.33\n## [1] 10008.33\n## [1] 10008.33\n## [1] 10008.33\n## [1] 10008.33\n## [1] 10008.33\n## [1] 10008.33\n## [1] 10008.34\n## [1] 10008.34\n## [1] 10008.34\n## [1] 10008.34\n## [1] 10008.34\n## [1] 10008.34\n## [1] 10008.34\n## [1] 10008.34\n## [1] 10008.35\n## [1] 10008.35\n## [1] 10008.35\n## [1] 10008.35\n## [1] 10008.35\n## [1] 10008.35\n## [1] 10008.35\n## [1] 10008.36\n## [1] 10008.36\n## [1] 10008.36\n## [1] 10008.36\n## [1] 10008.36\n## [1] 10008.36\n## [1] 10008.36\n## [1] 10008.36\n## [1] 10008.37\n## [1] 10008.37\n## [1] 10008.37\n## [1] 10008.37\n## [1] 10008.37\n## [1] 10008.37\n## [1] 10008.37\n## [1] 10008.37\n## [1] 10008.38\n## [1] 10008.38\n## [1] 10008.38\n## [1] 10008.38\n## [1] 10008.38\n## [1] 10008.38\n## [1] 10008.38\n## [1] 10008.39\n## [1] 10008.39\n## [1] 10008.39\n## [1] 10008.39\n## [1] 10008.39\n## [1] 10008.39\n## [1] 10008.39\n## [1] 10008.39\n## [1] 10008.4\n## [1] 10008.4\n## [1] 10008.4\n## [1] 10008.4\n## [1] 10008.4\n## [1] 10008.4\n## [1] 10008.4\n## [1] 10008.4\n## [1] 10008.41\n## [1] 10008.41\n## [1] 10008.41\n## [1] 10008.41\n## [1] 10008.41\n## [1] 10008.41\n## [1] 10008.41\n## [1] 10008.42\n## [1] 10008.42\n## [1] 10008.42\n## [1] 10008.42\n## [1] 10008.42\n## [1] 10008.42\n## [1] 10008.42\n## [1] 10008.42\n## [1] 10008.43\n## [1] 10008.43\n## [1] 10008.43\n## [1] 10008.43\n## [1] 10008.43\n## [1] 10008.43\n## [1] 10008.43\n## [1] 10008.44\n## [1] 10008.44\n## [1] 10008.44\n## [1] 10008.44\n## [1] 10008.44\n## [1] 10008.44\n## [1] 10008.44\n## [1] 10008.44\n## [1] 10008.45\n## [1] 10008.45\n## [1] 10008.45\n## [1] 10008.45\n## [1] 10008.45\n## [1] 10008.45\n## [1] 10008.45\n## [1] 10008.45\n## [1] 10008.46\n## [1] 10008.46\n## [1] 10008.46\n## [1] 10008.46\n## [1] 10008.46\n## [1] 10008.46\n## [1] 10008.46\n## [1] 10008.47\n## [1] 10008.47\n## [1] 10008.47\n## [1] 10008.47\n## [1] 10008.47\n## [1] 10008.47\n## [1] 10008.47\n## [1] 10008.47\n## [1] 10008.48\n## [1] 10008.48\n## [1] 10008.48\n## [1] 10008.48\n## [1] 10008.48\n## [1] 10008.48\n## [1] 10008.48\n## [1] 10008.49\n## [1] 10008.49\n## [1] 10008.49\n## [1] 10008.49\n## [1] 10008.49\n## [1] 10008.49\n## [1] 10008.49\n## [1] 10008.49\n## [1] 10008.5\n## [1] 10008.5\n## [1] 10008.5\n## [1] 10008.5\n## [1] 10008.5\n## [1] 10008.5\n## [1] 10008.5\n## [1] 10008.5\n## [1] 10008.51\n## [1] 10008.51\n## [1] 10008.51\n## [1] 10008.51\n## [1] 10008.51\n## [1] 10008.51\n## [1] 10008.51\n## [1] 10008.52\n## [1] 10008.52\n## [1] 10008.52\n## [1] 10008.52\n## [1] 10008.52\n## [1] 10008.52\n## [1] 10008.52\n## [1] 10008.52\n## [1] 10008.53\n## [1] 10008.53\n## [1] 10008.53\n## [1] 10008.53\n## [1] 10008.53\n## [1] 10008.53\n## [1] 10008.53\n## [1] 10008.54\n## [1] 10008.54\n## [1] 10008.54\n## [1] 10008.54\n## [1] 10008.54\n## [1] 10008.54\n## [1] 10008.54\n## [1] 10008.54\n## [1] 10008.55\n## [1] 10008.55\n## [1] 10008.55\n## [1] 10008.55\n## [1] 10008.55\n## [1] 10008.55\n## [1] 10008.55\n## [1] 10008.55\n## [1] 10008.56\n## [1] 10008.56\n## [1] 10008.56\n## [1] 10008.56\n## [1] 10008.56\n## [1] 10008.56\n## [1] 10008.56\n## [1] 10008.57\n## [1] 10008.57\n## [1] 10008.57\n## [1] 10008.57\n## [1] 10008.57\n## [1] 10008.57\n## [1] 10008.57\n## [1] 10008.57\n## [1] 10008.58\n## [1] 10008.58\n## [1] 10008.58\n## [1] 10008.58\n## [1] 10008.58\n## [1] 10008.58\n## [1] 10008.58\n## [1] 10008.59\n## [1] 10008.59\n## [1] 10008.59\n## [1] 10008.59\n## [1] 10008.59\n## [1] 10008.59\n## [1] 10008.59\n## [1] 10008.59\n## [1] 10008.6\n## [1] 10008.6\n## [1] 10008.6\n## [1] 10008.6\n## [1] 10008.6\n## [1] 10008.6\n## [1] 10008.6\n## [1] 10008.6\n## [1] 10008.61\n## [1] 10008.61\n## [1] 10008.61\n## [1] 10008.61\n## [1] 10008.61\n## [1] 10008.61\n## [1] 10008.61\n## [1] 10008.62\n## [1] 10008.62\n## [1] 10008.62\n## [1] 10008.62\n## [1] 10008.62\n## [1] 10008.62\n## [1] 10008.62\n## [1] 10008.62\n## [1] 10008.63\n## [1] 10008.63\n## [1] 10008.63\n## [1] 10008.63\n## [1] 10008.63\n## [1] 10008.63\n## [1] 10008.63\n## [1] 10008.64\n## [1] 10008.64\n## [1] 10008.64\n## [1] 10008.64\n## [1] 10008.64\n## [1] 10008.64\n## [1] 10008.64\n## [1] 10008.64\n## [1] 10008.65\n## [1] 10008.65\n## [1] 10008.65\n## [1] 10008.65\n## [1] 10008.65\n## [1] 10008.65\n## [1] 10008.65\n## [1] 10008.65\n## [1] 10008.66\n## [1] 10008.66\n## [1] 10008.66\n## [1] 10008.66\n## [1] 10008.66\n## [1] 10008.66\n## [1] 10008.66\n## [1] 10008.67\n## [1] 10008.67\n## [1] 10008.67\n## [1] 10008.67\n## [1] 10008.67\n## [1] 10008.67\n## [1] 10008.67\n## [1] 10008.67\n## [1] 10008.68\n## [1] 10008.68\n## [1] 10008.68\n## [1] 10008.68\n## [1] 10008.68\n## [1] 10008.68\n## [1] 10008.68\n## [1] 10008.69\n## [1] 10008.69\n## [1] 10008.69\n## [1] 10008.69\n## [1] 10008.69\n## [1] 10008.69\n## [1] 10008.69\n## [1] 10008.69\n## [1] 10008.7\n## [1] 10008.7\n## [1] 10008.7\n## [1] 10008.7\n## [1] 10008.7\n## [1] 10008.7\n## [1] 10008.7\n## [1] 10008.7\n## [1] 10008.71\n## [1] 10008.71\n## [1] 10008.71\n## [1] 10008.71\n## [1] 10008.71\n## [1] 10008.71\n## [1] 10008.71\n## [1] 10008.72\n## [1] 10008.72\n## [1] 10008.72\n## [1] 10008.72\n## [1] 10008.72\n## [1] 10008.72\n## [1] 10008.72\n## [1] 10008.72\n## [1] 10008.73\n## [1] 10008.73\n## [1] 10008.73\n## [1] 10008.73\n## [1] 10008.73\n## [1] 10008.73\n## [1] 10008.73\n## [1] 10008.74\n## [1] 10008.74\n## [1] 10008.74\n## [1] 10008.74\n## [1] 10008.74\n## [1] 10008.74\n## [1] 10008.74\n## [1] 10008.74\n## [1] 10008.75\n## [1] 10008.75\n## [1] 10008.75\n## [1] 10008.75\n## [1] 10008.75\n## [1] 10008.75\n## [1] 10008.75\n## [1] 10008.75\n## [1] 10008.76\n## [1] 10008.76\n## [1] 10008.76\n## [1] 10008.76\n## [1] 10008.76\n## [1] 10008.76\n## [1] 10008.76\n## [1] 10008.77\n## [1] 10008.77\n## [1] 10008.77\n## [1] 10008.77\n## [1] 10008.77\n## [1] 10008.77\n## [1] 10008.77\n## [1] 10008.77\n## [1] 10008.78\n## [1] 10008.78\n## [1] 10008.78\n## [1] 10008.78\n## [1] 10008.78\n## [1] 10008.78\n## [1] 10008.78\n## [1] 10008.79\n## [1] 10008.79\n## [1] 10008.79\n## [1] 10008.79\n## [1] 10008.79\n## [1] 10008.79\n## [1] 10008.79\n## [1] 10008.79\n## [1] 10008.8\n## [1] 10008.8\n## [1] 10008.8\n## [1] 10008.8\n## [1] 10008.8\n## [1] 10008.8\n## [1] 10008.8\n## [1] 10008.8\n## [1] 10008.81\n## [1] 10008.81\n## [1] 10008.81\n## [1] 10008.81\n## [1] 10008.81\n## [1] 10008.81\n## [1] 10008.81\n## [1] 10008.82\n## [1] 10008.82\n## [1] 10008.82\n## [1] 10008.82\n## [1] 10008.82\n## [1] 10008.82\n## [1] 10008.82\n## [1] 10008.82\n## [1] 10008.83\n## [1] 10008.83\n## [1] 10008.83\n## [1] 10008.83\n## [1] 10008.83\n## [1] 10008.83\n## [1] 10008.83\n## [1] 10008.83\n## [1] 10008.84\n## [1] 10008.84\n## [1] 10008.84\n## [1] 10008.84\n## [1] 10008.84\n## [1] 10008.84\n## [1] 10008.84\n## [1] 10008.85\n## [1] 10008.85\n## [1] 10008.85\n## [1] 10008.85\n## [1] 10008.85\n## [1] 10008.85\n## [1] 10008.85\n## [1] 10008.85\n## [1] 10008.86\n## [1] 10008.86\n## [1] 10008.86\n## [1] 10008.86\n## [1] 10008.86\n## [1] 10008.86\n## [1] 10008.86\n## [1] 10008.87\n## [1] 10008.87\n## [1] 10008.87\n## [1] 10008.87\n## [1] 10008.87\n## [1] 10008.87\n## [1] 10008.87\n## [1] 10008.87\n## [1] 10008.88\n## [1] 10008.88\n## [1] 10008.88\n## [1] 10008.88\n## [1] 10008.88\n## [1] 10008.88\n## [1] 10008.88\n## [1] 10008.88\n## [1] 10008.89\n## [1] 10008.89\n## [1] 10008.89\n## [1] 10008.89\n## [1] 10008.89\n## [1] 10008.89\n## [1] 10008.89\n## [1] 10008.9\n## [1] 10008.9\n## [1] 10008.9\n## [1] 10008.9\n## [1] 10008.9\n## [1] 10008.9\n## [1] 10008.9\n## [1] 10008.9\n## [1] 10008.91\n## [1] 10008.91\n## [1] 10008.91\n## [1] 10008.91\n## [1] 10008.91\n## [1] 10008.91\n## [1] 10008.91\n## [1] 10008.92\n## [1] 10008.92\n## [1] 10008.92\n## [1] 10008.92\n## [1] 10008.92\n## [1] 10008.92\n## [1] 10008.92\n## [1] 10008.92\n## [1] 10008.93\n## [1] 10008.93\n## [1] 10008.93\n## [1] 10008.93\n## [1] 10008.93\n## [1] 10008.93\n## [1] 10008.93\n## [1] 10008.93\n## [1] 10008.94\n## [1] 10008.94\n## [1] 10008.94\n## [1] 10008.94\n## [1] 10008.94\n## [1] 10008.94\n## [1] 10008.94\n## [1] 10008.95\n## [1] 10008.95\n## [1] 10008.95\n## [1] 10008.95\n## [1] 10008.95\n## [1] 10008.95\n## [1] 10008.95\n## [1] 10008.95\n## [1] 10008.96\n## [1] 10008.96\n## [1] 10008.96\n## [1] 10008.96\n## [1] 10008.96\n## [1] 10008.96\n## [1] 10008.96\n## [1] 10008.97\n## [1] 10008.97\n## [1] 10008.97\n## [1] 10008.97\n## [1] 10008.97\n## [1] 10008.97\n## [1] 10008.97\n## [1] 10008.97\n## [1] 10008.98\n## [1] 10008.98\n## [1] 10008.98\n## [1] 10008.98\n## [1] 10008.98\n## [1] 10008.98\n## [1] 10008.98\n## [1] 10008.98\n## [1] 10008.99\n## [1] 10008.99\n## [1] 10008.99\n## [1] 10008.99\n## [1] 10008.99\n## [1] 10008.99\n## [1] 10008.99\n## [1] 10009\n## [1] 10009\n## [1] 10009\n## [1] 10009\n## [1] 10009\n## [1] 10009\n## [1] 10009\n## [1] 10009\n## [1] 10009.01\n## [1] 10009.01\n## [1] 10009.01\n## [1] 10009.01\n## [1] 10009.01\n## [1] 10009.01\n## [1] 10009.01\n## [1] 10009.02\n## [1] 10009.02\n## [1] 10009.02\n## [1] 10009.02\n## [1] 10009.02\n## [1] 10009.02\n## [1] 10009.02\n## [1] 10009.02\n## [1] 10009.03\n## [1] 10009.03\n## [1] 10009.03\n## [1] 10009.03\n## [1] 10009.03\n## [1] 10009.03\n## [1] 10009.03\n## [1] 10009.03\n## [1] 10009.04\n## [1] 10009.04\n## [1] 10009.04\n## [1] 10009.04\n## [1] 10009.04\n## [1] 10009.04\n## [1] 10009.04\n## [1] 10009.05\n## [1] 10009.05\n## [1] 10009.05\n## [1] 10009.05\n## [1] 10009.05\n## [1] 10009.05\n## [1] 10009.05\n## [1] 10009.05\n## [1] 10009.06\n## [1] 10009.06\n## [1] 10009.06\n## [1] 10009.06\n## [1] 10009.06\n## [1] 10009.06\n## [1] 10009.06\n## [1] 10009.07\n## [1] 10009.07\n## [1] 10009.07\n## [1] 10009.07\n## [1] 10009.07\n## [1] 10009.07\n## [1] 10009.07\n## [1] 10009.07\n## [1] 10009.08\n## [1] 10009.08\n## [1] 10009.08\n## [1] 10009.08\n## [1] 10009.08\n## [1] 10009.08\n## [1] 10009.08\n## [1] 10009.08\n## [1] 10009.09\n## [1] 10009.09\n## [1] 10009.09\n## [1] 10009.09\n## [1] 10009.09\n## [1] 10009.09\n## [1] 10009.09\n## [1] 10009.1\n## [1] 10009.1\n## [1] 10009.1\n## [1] 10009.1\n## [1] 10009.1\n## [1] 10009.1\n## [1] 10009.1\n## [1] 10009.1\n## [1] 10009.11\n## [1] 10009.11\n## [1] 10009.11\n## [1] 10009.11\n## [1] 10009.11\n## [1] 10009.11\n## [1] 10009.11\n## [1] 10009.12\n## [1] 10009.12\n## [1] 10009.12\n## [1] 10009.12\n## [1] 10009.12\n## [1] 10009.12\n## [1] 10009.12\n## [1] 10009.12\n## [1] 10009.13\n## [1] 10009.13\n## [1] 10009.13\n## [1] 10009.13\n## [1] 10009.13\n## [1] 10009.13\n## [1] 10009.13\n## [1] 10009.13\n## [1] 10009.14\n## [1] 10009.14\n## [1] 10009.14\n## [1] 10009.14\n## [1] 10009.14\n## [1] 10009.14\n## [1] 10009.14\n## [1] 10009.15\n## [1] 10009.15\n## [1] 10009.15\n## [1] 10009.15\n## [1] 10009.15\n## [1] 10009.15\n## [1] 10009.15\n## [1] 10009.15\n## [1] 10009.16\n## [1] 10009.16\n## [1] 10009.16\n## [1] 10009.16\n## [1] 10009.16\n## [1] 10009.16\n## [1] 10009.16\n## [1] 10009.17\n## [1] 10009.17\n## [1] 10009.17\n## [1] 10009.17\n## [1] 10009.17\n## [1] 10009.17\n## [1] 10009.17\n## [1] 10009.17\n## [1] 10009.18\n## [1] 10009.18\n## [1] 10009.18\n## [1] 10009.18\n## [1] 10009.18\n## [1] 10009.18\n## [1] 10009.18\n## [1] 10009.18\n## [1] 10009.19\n## [1] 10009.19\n## [1] 10009.19\n## [1] 10009.19\n## [1] 10009.19\n## [1] 10009.19\n## [1] 10009.19\n## [1] 10009.2\n## [1] 10009.2\n## [1] 10009.2\n## [1] 10009.2\n## [1] 10009.2\n## [1] 10009.2\n## [1] 10009.2\n## [1] 10009.2\n## [1] 10009.21\n## [1] 10009.21\n## [1] 10009.21\n## [1] 10009.21\n## [1] 10009.21\n## [1] 10009.21\n## [1] 10009.21\n## [1] 10009.21\n## [1] 10009.22\n## [1] 10009.22\n## [1] 10009.22\n## [1] 10009.22\n## [1] 10009.22\n## [1] 10009.22\n## [1] 10009.22\n## [1] 10009.23\n## [1] 10009.23\n## [1] 10009.23\n## [1] 10009.23\n## [1] 10009.23\n## [1] 10009.23\n## [1] 10009.23\n## [1] 10009.23\n## [1] 10009.24\n## [1] 10009.24\n## [1] 10009.24\n## [1] 10009.24\n## [1] 10009.24\n## [1] 10009.24\n## [1] 10009.24\n## [1] 10009.25\n## [1] 10009.25\n## [1] 10009.25\n## [1] 10009.25\n## [1] 10009.25\n## [1] 10009.25\n## [1] 10009.25\n## [1] 10009.25\n## [1] 10009.26\n## [1] 10009.26\n## [1] 10009.26\n## [1] 10009.26\n## [1] 10009.26\n## [1] 10009.26\n## [1] 10009.26\n## [1] 10009.26\n## [1] 10009.27\n## [1] 10009.27\n## [1] 10009.27\n## [1] 10009.27\n## [1] 10009.27\n## [1] 10009.27\n## [1] 10009.27\n## [1] 10009.28\n## [1] 10009.28\n## [1] 10009.28\n## [1] 10009.28\n## [1] 10009.28\n## [1] 10009.28\n## [1] 10009.28\n## [1] 10009.28\n## [1] 10009.29\n## [1] 10009.29\n## [1] 10009.29\n## [1] 10009.29\n## [1] 10009.29\n## [1] 10009.29\n## [1] 10009.29\n## [1] 10009.3\n## [1] 10009.3\n## [1] 10009.3\n## [1] 10009.3\n## [1] 10009.3\n## [1] 10009.3\n## [1] 10009.3\n## [1] 10009.3\n## [1] 10009.31\n## [1] 10009.31\n## [1] 10009.31\n## [1] 10009.31\n## [1] 10009.31\n## [1] 10009.31\n## [1] 10009.31\n## [1] 10009.31\n## [1] 10009.32\n## [1] 10009.32\n## [1] 10009.32\n## [1] 10009.32\n## [1] 10009.32\n## [1] 10009.32\n## [1] 10009.32\n## [1] 10009.33\n## [1] 10009.33\n## [1] 10009.33\n## [1] 10009.33\n## [1] 10009.33\n## [1] 10009.33\n## [1] 10009.33\n## [1] 10009.33\n## [1] 10009.34\n## [1] 10009.34\n## [1] 10009.34\n## [1] 10009.34\n## [1] 10009.34\n## [1] 10009.34\n## [1] 10009.34\n## [1] 10009.35\n## [1] 10009.35\n## [1] 10009.35\n## [1] 10009.35\n## [1] 10009.35\n## [1] 10009.35\n## [1] 10009.35\n## [1] 10009.35\n## [1] 10009.36\n## [1] 10009.36\n## [1] 10009.36\n## [1] 10009.36\n## [1] 10009.36\n## [1] 10009.36\n## [1] 10009.36\n## [1] 10009.36\n## [1] 10009.37\n## [1] 10009.37\n## [1] 10009.37\n## [1] 10009.37\n## [1] 10009.37\n## [1] 10009.37\n## [1] 10009.37\n## [1] 10009.38\n## [1] 10009.38\n## [1] 10009.38\n## [1] 10009.38\n## [1] 10009.38\n## [1] 10009.38\n## [1] 10009.38\n## [1] 10009.38\n## [1] 10009.39\n## [1] 10009.39\n## [1] 10009.39\n## [1] 10009.39\n## [1] 10009.39\n## [1] 10009.39\n## [1] 10009.39\n## [1] 10009.4\n## [1] 10009.4\n## [1] 10009.4\n## [1] 10009.4\n## [1] 10009.4\n## [1] 10009.4\n## [1] 10009.4\n## [1] 10009.4\n## [1] 10009.41\n## [1] 10009.41\n## [1] 10009.41\n## [1] 10009.41\n## [1] 10009.41\n## [1] 10009.41\n## [1] 10009.41\n## [1] 10009.41\n## [1] 10009.42\n## [1] 10009.42\n## [1] 10009.42\n## [1] 10009.42\n## [1] 10009.42\n## [1] 10009.42\n## [1] 10009.42\n## [1] 10009.43\n## [1] 10009.43\n## [1] 10009.43\n## [1] 10009.43\n## [1] 10009.43\n## [1] 10009.43\n## [1] 10009.43\n## [1] 10009.43\n## [1] 10009.44\n## [1] 10009.44\n## [1] 10009.44\n## [1] 10009.44\n## [1] 10009.44\n## [1] 10009.44\n## [1] 10009.44\n## [1] 10009.45\n## [1] 10009.45\n## [1] 10009.45\n## [1] 10009.45\n## [1] 10009.45\n## [1] 10009.45\n## [1] 10009.45\n## [1] 10009.45\n## [1] 10009.46\n## [1] 10009.46\n## [1] 10009.46\n## [1] 10009.46\n## [1] 10009.46\n## [1] 10009.46\n## [1] 10009.46\n## [1] 10009.46\n## [1] 10009.47\n## [1] 10009.47\n## [1] 10009.47\n## [1] 10009.47\n## [1] 10009.47\n## [1] 10009.47\n## [1] 10009.47\n## [1] 10009.48\n## [1] 10009.48\n## [1] 10009.48\n## [1] 10009.48\n## [1] 10009.48\n## [1] 10009.48\n## [1] 10009.48\n## [1] 10009.48\n## [1] 10009.49\n## [1] 10009.49\n## [1] 10009.49\n## [1] 10009.49\n## [1] 10009.49\n## [1] 10009.49\n## [1] 10009.49\n## [1] 10009.5\n## [1] 10009.5\n## [1] 10009.5\n## [1] 10009.5\n## [1] 10009.5\n## [1] 10009.5\n## [1] 10009.5\n## [1] 10009.5\n## [1] 10009.51\n## [1] 10009.51\n## [1] 10009.51\n## [1] 10009.51\n## [1] 10009.51\n## [1] 10009.51\n## [1] 10009.51\n## [1] 10009.51\n## [1] 10009.52\n## [1] 10009.52\n## [1] 10009.52\n## [1] 10009.52\n## [1] 10009.52\n## [1] 10009.52\n## [1] 10009.52\n## [1] 10009.53\n## [1] 10009.53\n## [1] 10009.53\n## [1] 10009.53\n## [1] 10009.53\n## [1] 10009.53\n## [1] 10009.53\n## [1] 10009.53\n## [1] 10009.54\n## [1] 10009.54\n## [1] 10009.54\n## [1] 10009.54\n## [1] 10009.54\n## [1] 10009.54\n## [1] 10009.54\n## [1] 10009.55\n## [1] 10009.55\n## [1] 10009.55\n## [1] 10009.55\n## [1] 10009.55\n## [1] 10009.55\n## [1] 10009.55\n## [1] 10009.55\n## [1] 10009.56\n## [1] 10009.56\n## [1] 10009.56\n## [1] 10009.56\n## [1] 10009.56\n## [1] 10009.56\n## [1] 10009.56\n## [1] 10009.56\n## [1] 10009.57\n## [1] 10009.57\n## [1] 10009.57\n## [1] 10009.57\n## [1] 10009.57\n## [1] 10009.57\n## [1] 10009.57\n## [1] 10009.58\n## [1] 10009.58\n## [1] 10009.58\n## [1] 10009.58\n## [1] 10009.58\n## [1] 10009.58\n## [1] 10009.58\n## [1] 10009.58\n## [1] 10009.59\n## [1] 10009.59\n## [1] 10009.59\n## [1] 10009.59\n## [1] 10009.59\n## [1] 10009.59\n## [1] 10009.59\n## [1] 10009.6\n## [1] 10009.6\n## [1] 10009.6\n## [1] 10009.6\n## [1] 10009.6\n## [1] 10009.6\n## [1] 10009.6\n## [1] 10009.6\n## [1] 10009.61\n## [1] 10009.61\n## [1] 10009.61\n## [1] 10009.61\n## [1] 10009.61\n## [1] 10009.61\n## [1] 10009.61\n## [1] 10009.61\n## [1] 10009.62\n## [1] 10009.62\n## [1] 10009.62\n## [1] 10009.62\n## [1] 10009.62\n## [1] 10009.62\n## [1] 10009.62\n## [1] 10009.63\n## [1] 10009.63\n## [1] 10009.63\n## [1] 10009.63\n## [1] 10009.63\n## [1] 10009.63\n## [1] 10009.63\n## [1] 10009.63\n## [1] 10009.64\n## [1] 10009.64\n## [1] 10009.64\n## [1] 10009.64\n## [1] 10009.64\n## [1] 10009.64\n## [1] 10009.64\n## [1] 10009.64\n## [1] 10009.65\n## [1] 10009.65\n## [1] 10009.65\n## [1] 10009.65\n## [1] 10009.65\n## [1] 10009.65\n## [1] 10009.65\n## [1] 10009.66\n## [1] 10009.66\n## [1] 10009.66\n## [1] 10009.66\n## [1] 10009.66\n## [1] 10009.66\n## [1] 10009.66\n## [1] 10009.66\n## [1] 10009.67\n## [1] 10009.67\n## [1] 10009.67\n## [1] 10009.67\n## [1] 10009.67\n## [1] 10009.67\n## [1] 10009.67\n## [1] 10009.68\n## [1] 10009.68\n## [1] 10009.68\n## [1] 10009.68\n## [1] 10009.68\n## [1] 10009.68\n## [1] 10009.68\n## [1] 10009.68\n## [1] 10009.69\n## [1] 10009.69\n## [1] 10009.69\n## [1] 10009.69\n## [1] 10009.69\n## [1] 10009.69\n## [1] 10009.69\n## [1] 10009.69\n## [1] 10009.7\n## [1] 10009.7\n## [1] 10009.7\n## [1] 10009.7\n## [1] 10009.7\n## [1] 10009.7\n## [1] 10009.7\n## [1] 10009.71\n## [1] 10009.71\n## [1] 10009.71\n## [1] 10009.71\n## [1] 10009.71\n## [1] 10009.71\n## [1] 10009.71\n## [1] 10009.71\n## [1] 10009.72\n## [1] 10009.72\n## [1] 10009.72\n## [1] 10009.72\n## [1] 10009.72\n## [1] 10009.72\n## [1] 10009.72\n## [1] 10009.73\n## [1] 10009.73\n## [1] 10009.73\n## [1] 10009.73\n## [1] 10009.73\n## [1] 10009.73\n## [1] 10009.73\n## [1] 10009.73\n## [1] 10009.74\n## [1] 10009.74\n## [1] 10009.74\n## [1] 10009.74\n## [1] 10009.74\n## [1] 10009.74\n## [1] 10009.74\n## [1] 10009.74\n## [1] 10009.75\n## [1] 10009.75\n## [1] 10009.75\n## [1] 10009.75\n## [1] 10009.75\n## [1] 10009.75\n## [1] 10009.75\n## [1] 10009.76\n## [1] 10009.76\n## [1] 10009.76\n## [1] 10009.76\n## [1] 10009.76\n## [1] 10009.76\n## [1] 10009.76\n## [1] 10009.76\n## [1] 10009.77\n## [1] 10009.77\n## [1] 10009.77\n## [1] 10009.77\n## [1] 10009.77\n## [1] 10009.77\n## [1] 10009.77\n## [1] 10009.78\n## [1] 10009.78\n## [1] 10009.78\n## [1] 10009.78\n## [1] 10009.78\n## [1] 10009.78\n## [1] 10009.78\n## [1] 10009.78\n## [1] 10009.79\n## [1] 10009.79\n## [1] 10009.79\n## [1] 10009.79\n## [1] 10009.79\n## [1] 10009.79\n## [1] 10009.79\n## [1] 10009.79\n## [1] 10009.8\n## [1] 10009.8\n## [1] 10009.8\n## [1] 10009.8\n## [1] 10009.8\n## [1] 10009.8\n## [1] 10009.8\n## [1] 10009.81\n## [1] 10009.81\n## [1] 10009.81\n## [1] 10009.81\n## [1] 10009.81\n## [1] 10009.81\n## [1] 10009.81\n## [1] 10009.81\n## [1] 10009.82\n## [1] 10009.82\n## [1] 10009.82\n## [1] 10009.82\n## [1] 10009.82\n## [1] 10009.82\n## [1] 10009.82\n## [1] 10009.83\n## [1] 10009.83\n## [1] 10009.83\n## [1] 10009.83\n## [1] 10009.83\n## [1] 10009.83\n## [1] 10009.83\n## [1] 10009.83\n## [1] 10009.84\n## [1] 10009.84\n## [1] 10009.84\n## [1] 10009.84\n## [1] 10009.84\n## [1] 10009.84\n## [1] 10009.84\n## [1] 10009.84\n## [1] 10009.85\n## [1] 10009.85\n## [1] 10009.85\n## [1] 10009.85\n## [1] 10009.85\n## [1] 10009.85\n## [1] 10009.85\n## [1] 10009.86\n## [1] 10009.86\n## [1] 10009.86\n## [1] 10009.86\n## [1] 10009.86\n## [1] 10009.86\n## [1] 10009.86\n## [1] 10009.86\n## [1] 10009.87\n## [1] 10009.87\n## [1] 10009.87\n## [1] 10009.87\n## [1] 10009.87\n## [1] 10009.87\n## [1] 10009.87\n## [1] 10009.88\n## [1] 10009.88\n## [1] 10009.88\n## [1] 10009.88\n## [1] 10009.88\n## [1] 10009.88\n## [1] 10009.88\n## [1] 10009.88\n## [1] 10009.89\n## [1] 10009.89\n## [1] 10009.89\n## [1] 10009.89\n## [1] 10009.89\n## [1] 10009.89\n## [1] 10009.89\n## [1] 10009.89\n## [1] 10009.9\n## [1] 10009.9\n## [1] 10009.9\n## [1] 10009.9\n## [1] 10009.9\n## [1] 10009.9\n## [1] 10009.9\n## [1] 10009.91\n## [1] 10009.91\n## [1] 10009.91\n## [1] 10009.91\n## [1] 10009.91\n## [1] 10009.91\n## [1] 10009.91\n## [1] 10009.91\n## [1] 10009.92\n## [1] 10009.92\n## [1] 10009.92\n## [1] 10009.92\n## [1] 10009.92\n## [1] 10009.92\n## [1] 10009.92\n## [1] 10009.93\n## [1] 10009.93\n## [1] 10009.93\n## [1] 10009.93\n## [1] 10009.93\n## [1] 10009.93\n## [1] 10009.93\n## [1] 10009.93\n## [1] 10009.94\n## [1] 10009.94\n## [1] 10009.94\n## [1] 10009.94\n## [1] 10009.94\n## [1] 10009.94\n## [1] 10009.94\n## [1] 10009.94\n## [1] 10009.95\n## [1] 10009.95\n## [1] 10009.95\n## [1] 10009.95\n## [1] 10009.95\n## [1] 10009.95\n## [1] 10009.95\n## [1] 10009.96\n## [1] 10009.96\n## [1] 10009.96\n## [1] 10009.96\n## [1] 10009.96\n## [1] 10009.96\n## [1] 10009.96\n## [1] 10009.96\n## [1] 10009.97\n## [1] 10009.97\n## [1] 10009.97\n## [1] 10009.97\n## [1] 10009.97\n## [1] 10009.97\n## [1] 10009.97\n## [1] 10009.98\n## [1] 10009.98\n## [1] 10009.98\n## [1] 10009.98\n## [1] 10009.98\n## [1] 10009.98\n## [1] 10009.98\n## [1] 10009.98\n## [1] 10009.99\n## [1] 10009.99\n## [1] 10009.99\n## [1] 10009.99\n## [1] 10009.99\n## [1] 10009.99\n## [1] 10009.99\n## [1] 10009.99\n## [1] 10010\n## [1] 10010\n## [1] 10010\n## [1] 10010\n## [1] 10010\n## [1] 10010\n## [1] 10010\n## [1] 10010.01\n## [1] 10010.01\n## [1] 10010.01\n## [1] 10010.01\n## [1] 10010.01\n## [1] 10010.01\n## [1] 10010.01\n## [1] 10010.01\n## [1] 10010.02\n## [1] 10010.02\n## [1] 10010.02\n## [1] 10010.02\n## [1] 10010.02\n## [1] 10010.02\n## [1] 10010.02\n## [1] 10010.02\n## [1] 10010.03\n## [1] 10010.03\n## [1] 10010.03\n## [1] 10010.03\n## [1] 10010.03\n## [1] 10010.03\n## [1] 10010.03\n## [1] 10010.04\n## [1] 10010.04\n## [1] 10010.04\n## [1] 10010.04\n## [1] 10010.04\n## [1] 10010.04\n## [1] 10010.04\n## [1] 10010.04\n## [1] 10010.05\n## [1] 10010.05\n## [1] 10010.05\n## [1] 10010.05\n## [1] 10010.05\n## [1] 10010.05\n## [1] 10010.05\n## [1] 10010.06\n## [1] 10010.06\n## [1] 10010.06\n## [1] 10010.06\n## [1] 10010.06\n## [1] 10010.06\n## [1] 10010.06\n## [1] 10010.06\n## [1] 10010.07\n## [1] 10010.07\n## [1] 10010.07\n## [1] 10010.07\n## [1] 10010.07\n## [1] 10010.07\n## [1] 10010.07\n## [1] 10010.07\n## [1] 10010.08\n## [1] 10010.08\n## [1] 10010.08\n## [1] 10010.08\n## [1] 10010.08\n## [1] 10010.08\n## [1] 10010.08\n## [1] 10010.09\n## [1] 10010.09\n## [1] 10010.09\n## [1] 10010.09\n## [1] 10010.09\n## [1] 10010.09\n## [1] 10010.09\n## [1] 10010.09\n## [1] 10010.1\n## [1] 10010.1\n## [1] 10010.1\n## [1] 10010.1\n## [1] 10010.1\n## [1] 10010.1\n## [1] 10010.1\n## [1] 10010.11\n## [1] 10010.11\n## [1] 10010.11\n## [1] 10010.11\n## [1] 10010.11\n## [1] 10010.11\n## [1] 10010.11\n## [1] 10010.11\n## [1] 10010.12\n## [1] 10010.12\n## [1] 10010.12\n## [1] 10010.12\n## [1] 10010.12\n## [1] 10010.12\n## [1] 10010.12\n## [1] 10010.12\n## [1] 10010.13\n## [1] 10010.13\n## [1] 10010.13\n## [1] 10010.13\n## [1] 10010.13\n## [1] 10010.13\n## [1] 10010.13\n## [1] 10010.14\n## [1] 10010.14\n## [1] 10010.14\n## [1] 10010.14\n## [1] 10010.14\n## [1] 10010.14\n## [1] 10010.14\n## [1] 10010.14\n## [1] 10010.15\n## [1] 10010.15\n## [1] 10010.15\n## [1] 10010.15\n## [1] 10010.15\n## [1] 10010.15\n## [1] 10010.15\n## [1] 10010.16\n## [1] 10010.16\n## [1] 10010.16\n## [1] 10010.16\n## [1] 10010.16\n## [1] 10010.16\n## [1] 10010.16\n## [1] 10010.16\n## [1] 10010.17\n## [1] 10010.17\n## [1] 10010.17\n## [1] 10010.17\n## [1] 10010.17\n## [1] 10010.17\n## [1] 10010.17\n## [1] 10010.17\n## [1] 10010.18\n## [1] 10010.18\n## [1] 10010.18\n## [1] 10010.18\n## [1] 10010.18\n## [1] 10010.18\n## [1] 10010.18\n## [1] 10010.19\n## [1] 10010.19\n## [1] 10010.19\n## [1] 10010.19\n## [1] 10010.19\n## [1] 10010.19\n## [1] 10010.19\n## [1] 10010.19\n## [1] 10010.2\n## [1] 10010.2\n## [1] 10010.2\n## [1] 10010.2\n## [1] 10010.2\n## [1] 10010.2\n## [1] 10010.2\n## [1] 10010.21\n## [1] 10010.21\n## [1] 10010.21\n## [1] 10010.21\n## [1] 10010.21\n## [1] 10010.21\n## [1] 10010.21\n## [1] 10010.21\n## [1] 10010.22\n## [1] 10010.22\n## [1] 10010.22\n## [1] 10010.22\n## [1] 10010.22\n## [1] 10010.22\n## [1] 10010.22\n## [1] 10010.22\n## [1] 10010.23\n## [1] 10010.23\n## [1] 10010.23\n## [1] 10010.23\n## [1] 10010.23\n## [1] 10010.23\n## [1] 10010.23\n## [1] 10010.24\n## [1] 10010.24\n## [1] 10010.24\n## [1] 10010.24\n## [1] 10010.24\n## [1] 10010.24\n## [1] 10010.24\n## [1] 10010.24\n## [1] 10010.25\n## [1] 10010.25\n## [1] 10010.25\n## [1] 10010.25\n## [1] 10010.25\n## [1] 10010.25\n## [1] 10010.25\n## [1] 10010.26\n## [1] 10010.26\n## [1] 10010.26\n## [1] 10010.26\n## [1] 10010.26\n## [1] 10010.26\n## [1] 10010.26\n## [1] 10010.26\n## [1] 10010.27\n## [1] 10010.27\n## [1] 10010.27\n## [1] 10010.27\n## [1] 10010.27\n## [1] 10010.27\n## [1] 10010.27\n## [1] 10010.27\n## [1] 10010.28\n## [1] 10010.28\n## [1] 10010.28\n## [1] 10010.28\n## [1] 10010.28\n## [1] 10010.28\n## [1] 10010.28\n## [1] 10010.29\n## [1] 10010.29\n## [1] 10010.29\n## [1] 10010.29\n## [1] 10010.29\n## [1] 10010.29\n## [1] 10010.29\n## [1] 10010.29\n## [1] 10010.3\n## [1] 10010.3\n## [1] 10010.3\n## [1] 10010.3\n## [1] 10010.3\n## [1] 10010.3\n## [1] 10010.3\n## [1] 10010.31\n## [1] 10010.31\n## [1] 10010.31\n## [1] 10010.31\n## [1] 10010.31\n## [1] 10010.31\n## [1] 10010.31\n## [1] 10010.31\n## [1] 10010.32\n## [1] 10010.32\n## [1] 10010.32\n## [1] 10010.32\n## [1] 10010.32\n## [1] 10010.32\n## [1] 10010.32\n## [1] 10010.32\n## [1] 10010.33\n## [1] 10010.33\n## [1] 10010.33\n## [1] 10010.33\n## [1] 10010.33\n## [1] 10010.33\n## [1] 10010.33\n## [1] 10010.34\n## [1] 10010.34\n## [1] 10010.34\n## [1] 10010.34\n## [1] 10010.34\n## [1] 10010.34\n## [1] 10010.34\n## [1] 10010.34\n## [1] 10010.35\n## [1] 10010.35\n## [1] 10010.35\n## [1] 10010.35\n## [1] 10010.35\n## [1] 10010.35\n## [1] 10010.35\n## [1] 10010.36\n## [1] 10010.36\n## [1] 10010.36\n## [1] 10010.36\n## [1] 10010.36\n## [1] 10010.36\n## [1] 10010.36\n## [1] 10010.36\n## [1] 10010.37\n## [1] 10010.37\n## [1] 10010.37\n## [1] 10010.37\n## [1] 10010.37\n## [1] 10010.37\n## [1] 10010.37\n## [1] 10010.37\n## [1] 10010.38\n## [1] 10010.38\n## [1] 10010.38\n## [1] 10010.38\n## [1] 10010.38\n## [1] 10010.38\n## [1] 10010.38\n## [1] 10010.39\n## [1] 10010.39\n## [1] 10010.39\n## [1] 10010.39\n## [1] 10010.39\n## [1] 10010.39\n## [1] 10010.39\n## [1] 10010.39\n## [1] 10010.4\n## [1] 10010.4\n## [1] 10010.4\n## [1] 10010.4\n## [1] 10010.4\n## [1] 10010.4\n## [1] 10010.4\n## [1] 10010.4\n## [1] 10010.41\n## [1] 10010.41\n## [1] 10010.41\n## [1] 10010.41\n## [1] 10010.41\n## [1] 10010.41\n## [1] 10010.41\n## [1] 10010.42\n## [1] 10010.42\n## [1] 10010.42\n## [1] 10010.42\n## [1] 10010.42\n## [1] 10010.42\n## [1] 10010.42\n## [1] 10010.42\n## [1] 10010.43\n## [1] 10010.43\n## [1] 10010.43\n## [1] 10010.43\n## [1] 10010.43\n## [1] 10010.43\n## [1] 10010.43\n## [1] 10010.44\n## [1] 10010.44\n## [1] 10010.44\n## [1] 10010.44\n## [1] 10010.44\n## [1] 10010.44\n## [1] 10010.44\n## [1] 10010.44\n## [1] 10010.45\n## [1] 10010.45\n## [1] 10010.45\n## [1] 10010.45\n## [1] 10010.45\n## [1] 10010.45\n## [1] 10010.45\n## [1] 10010.45\n## [1] 10010.46\n## [1] 10010.46\n## [1] 10010.46\n## [1] 10010.46\n## [1] 10010.46\n## [1] 10010.46\n## [1] 10010.46\n## [1] 10010.47\n## [1] 10010.47\n## [1] 10010.47\n## [1] 10010.47\n## [1] 10010.47\n## [1] 10010.47\n## [1] 10010.47\n## [1] 10010.47\n## [1] 10010.48\n## [1] 10010.48\n## [1] 10010.48\n## [1] 10010.48\n## [1] 10010.48\n## [1] 10010.48\n## [1] 10010.48\n## [1] 10010.49\n## [1] 10010.49\n## [1] 10010.49\n## [1] 10010.49\n## [1] 10010.49\n## [1] 10010.49\n## [1] 10010.49\n## [1] 10010.49\n## [1] 10010.5\n## [1] 10010.5\n## [1] 10010.5\n## [1] 10010.5\n## [1] 10010.5\n## [1] 10010.5\n## [1] 10010.5\n## [1] 10010.5\n## [1] 10010.51\n## [1] 10010.51\n## [1] 10010.51\n## [1] 10010.51\n## [1] 10010.51\n## [1] 10010.51\n## [1] 10010.51\n## [1] 10010.52\n## [1] 10010.52\n## [1] 10010.52\n## [1] 10010.52\n## [1] 10010.52\n## [1] 10010.52\n## [1] 10010.52\n## [1] 10010.52\n## [1] 10010.53\n## [1] 10010.53\n## [1] 10010.53\n## [1] 10010.53\n## [1] 10010.53\n## [1] 10010.53\n## [1] 10010.53\n## [1] 10010.54\n## [1] 10010.54\n## [1] 10010.54\n## [1] 10010.54\n## [1] 10010.54\n## [1] 10010.54\n## [1] 10010.54\n## [1] 10010.54\n## [1] 10010.55\n## [1] 10010.55\n## [1] 10010.55\n## [1] 10010.55\n## [1] 10010.55\n## [1] 10010.55\n## [1] 10010.55\n## [1] 10010.55\n## [1] 10010.56\n## [1] 10010.56\n## [1] 10010.56\n## [1] 10010.56\n## [1] 10010.56\n## [1] 10010.56\n## [1] 10010.56\n## [1] 10010.57\n## [1] 10010.57\n## [1] 10010.57\n## [1] 10010.57\n## [1] 10010.57\n## [1] 10010.57\n## [1] 10010.57\n## [1] 10010.57\n## [1] 10010.58\n## [1] 10010.58\n## [1] 10010.58\n## [1] 10010.58\n## [1] 10010.58\n## [1] 10010.58\n## [1] 10010.58\n## [1] 10010.59\n## [1] 10010.59\n## [1] 10010.59\n## [1] 10010.59\n## [1] 10010.59\n## [1] 10010.59\n## [1] 10010.59\n## [1] 10010.59\n## [1] 10010.6\n## [1] 10010.6\n## [1] 10010.6\n## [1] 10010.6\n## [1] 10010.6\n## [1] 10010.6\n## [1] 10010.6\n## [1] 10010.6\n## [1] 10010.61\n## [1] 10010.61\n## [1] 10010.61\n## [1] 10010.61\n## [1] 10010.61\n## [1] 10010.61\n## [1] 10010.61\n## [1] 10010.62\n## [1] 10010.62\n## [1] 10010.62\n## [1] 10010.62\n## [1] 10010.62\n## [1] 10010.62\n## [1] 10010.62\n## [1] 10010.62\n## [1] 10010.63\n## [1] 10010.63\n## [1] 10010.63\n## [1] 10010.63\n## [1] 10010.63\n## [1] 10010.63\n## [1] 10010.63\n## [1] 10010.64\n## [1] 10010.64\n## [1] 10010.64\n## [1] 10010.64\n## [1] 10010.64\n## [1] 10010.64\n## [1] 10010.64\n## [1] 10010.64\n## [1] 10010.65\n## [1] 10010.65\n## [1] 10010.65\n## [1] 10010.65\n## [1] 10010.65\n## [1] 10010.65\n## [1] 10010.65\n## [1] 10010.65\n## [1] 10010.66\n## [1] 10010.66\n## [1] 10010.66\n## [1] 10010.66\n## [1] 10010.66\n## [1] 10010.66\n## [1] 10010.66\n## [1] 10010.67\n## [1] 10010.67\n## [1] 10010.67\n## [1] 10010.67\n## [1] 10010.67\n## [1] 10010.67\n## [1] 10010.67\n## [1] 10010.67\n## [1] 10010.68\n## [1] 10010.68\n## [1] 10010.68\n## [1] 10010.68\n## [1] 10010.68\n## [1] 10010.68\n## [1] 10010.68\n## [1] 10010.69\n## [1] 10010.69\n## [1] 10010.69\n## [1] 10010.69\n## [1] 10010.69\n## [1] 10010.69\n## [1] 10010.69\n## [1] 10010.69\n## [1] 10010.7\n## [1] 10010.7\n## [1] 10010.7\n## [1] 10010.7\n## [1] 10010.7\n## [1] 10010.7\n## [1] 10010.7\n## [1] 10010.7\n## [1] 10010.71\n## [1] 10010.71\n## [1] 10010.71\n## [1] 10010.71\n## [1] 10010.71\n## [1] 10010.71\n## [1] 10010.71\n## [1] 10010.72\n## [1] 10010.72\n## [1] 10010.72\n## [1] 10010.72\n## [1] 10010.72\n## [1] 10010.72\n## [1] 10010.72\n## [1] 10010.72\n## [1] 10010.73\n## [1] 10010.73\n## [1] 10010.73\n## [1] 10010.73\n## [1] 10010.73\n## [1] 10010.73\n## [1] 10010.73\n## [1] 10010.74\n## [1] 10010.74\n## [1] 10010.74\n## [1] 10010.74\n## [1] 10010.74\n## [1] 10010.74\n## [1] 10010.74\n## [1] 10010.74\n## [1] 10010.75\n## [1] 10010.75\n## [1] 10010.75\n## [1] 10010.75\n## [1] 10010.75\n## [1] 10010.75\n## [1] 10010.75\n## [1] 10010.75\n## [1] 10010.76\n## [1] 10010.76\n## [1] 10010.76\n## [1] 10010.76\n## [1] 10010.76\n## [1] 10010.76\n## [1] 10010.76\n## [1] 10010.77\n## [1] 10010.77\n## [1] 10010.77\n## [1] 10010.77\n## [1] 10010.77\n## [1] 10010.77\n## [1] 10010.77\n## [1] 10010.77\n## [1] 10010.78\n## [1] 10010.78\n## [1] 10010.78\n## [1] 10010.78\n## [1] 10010.78\n## [1] 10010.78\n## [1] 10010.78\n## [1] 10010.79\n## [1] 10010.79\n## [1] 10010.79\n## [1] 10010.79\n## [1] 10010.79\n## [1] 10010.79\n## [1] 10010.79\n## [1] 10010.79\n## [1] 10010.8\n## [1] 10010.8\n## [1] 10010.8\n## [1] 10010.8\n## [1] 10010.8\n## [1] 10010.8\n## [1] 10010.8\n## [1] 10010.8\n## [1] 10010.81\n## [1] 10010.81\n## [1] 10010.81\n## [1] 10010.81\n## [1] 10010.81\n## [1] 10010.81\n## [1] 10010.81\n## [1] 10010.82\n## [1] 10010.82\n## [1] 10010.82\n## [1] 10010.82\n## [1] 10010.82\n## [1] 10010.82\n## [1] 10010.82\n## [1] 10010.82\n## [1] 10010.83\n## [1] 10010.83\n## [1] 10010.83\n## [1] 10010.83\n## [1] 10010.83\n## [1] 10010.83\n## [1] 10010.83\n## [1] 10010.83\n## [1] 10010.84\n## [1] 10010.84\n## [1] 10010.84\n## [1] 10010.84\n## [1] 10010.84\n## [1] 10010.84\n## [1] 10010.84\n## [1] 10010.85\n## [1] 10010.85\n## [1] 10010.85\n## [1] 10010.85\n## [1] 10010.85\n## [1] 10010.85\n## [1] 10010.85\n## [1] 10010.85\n## [1] 10010.86\n## [1] 10010.86\n## [1] 10010.86\n## [1] 10010.86\n## [1] 10010.86\n## [1] 10010.86\n## [1] 10010.86\n## [1] 10010.87\n## [1] 10010.87\n## [1] 10010.87\n## [1] 10010.87\n## [1] 10010.87\n## [1] 10010.87\n## [1] 10010.87\n## [1] 10010.87\n## [1] 10010.88\n## [1] 10010.88\n## [1] 10010.88\n## [1] 10010.88\n## [1] 10010.88\n## [1] 10010.88\n## [1] 10010.88\n## [1] 10010.88\n## [1] 10010.89\n## [1] 10010.89\n## [1] 10010.89\n## [1] 10010.89\n## [1] 10010.89\n## [1] 10010.89\n## [1] 10010.89\n## [1] 10010.9\n## [1] 10010.9\n## [1] 10010.9\n## [1] 10010.9\n## [1] 10010.9\n## [1] 10010.9\n## [1] 10010.9\n## [1] 10010.9\n## [1] 10010.91\n## [1] 10010.91\n## [1] 10010.91\n## [1] 10010.91\n## [1] 10010.91\n## [1] 10010.91\n## [1] 10010.91\n## [1] 10010.92\n## [1] 10010.92\n## [1] 10010.92\n## [1] 10010.92\n## [1] 10010.92\n## [1] 10010.92\n## [1] 10010.92\n## [1] 10010.92\n## [1] 10010.93\n## [1] 10010.93\n## [1] 10010.93\n## [1] 10010.93\n## [1] 10010.93\n## [1] 10010.93\n## [1] 10010.93\n## [1] 10010.93\n## [1] 10010.94\n## [1] 10010.94\n## [1] 10010.94\n## [1] 10010.94\n## [1] 10010.94\n## [1] 10010.94\n## [1] 10010.94\n## [1] 10010.95\n## [1] 10010.95\n## [1] 10010.95\n## [1] 10010.95\n## [1] 10010.95\n## [1] 10010.95\n## [1] 10010.95\n## [1] 10010.95\n## [1] 10010.96\n## [1] 10010.96\n## [1] 10010.96\n## [1] 10010.96\n## [1] 10010.96\n## [1] 10010.96\n## [1] 10010.96\n## [1] 10010.97\n## [1] 10010.97\n## [1] 10010.97\n## [1] 10010.97\n## [1] 10010.97\n## [1] 10010.97\n## [1] 10010.97\n## [1] 10010.97\n## [1] 10010.98\n## [1] 10010.98\n## [1] 10010.98\n## [1] 10010.98\n## [1] 10010.98\n## [1] 10010.98\n## [1] 10010.98\n## [1] 10010.98\n## [1] 10010.99\n## [1] 10010.99\n## [1] 10010.99\n## [1] 10010.99\n## [1] 10010.99\n## [1] 10010.99\n## [1] 10010.99\n## [1] 10011\n## [1] 10011\n## [1] 10011\n## [1] 10011\n## [1] 10011\n## [1] 10011\n## [1] 10011\n## [1] 10011\n## [1] 10011.01\n## [1] 10011.01\n## [1] 10011.01\n## [1] 10011.01\n## [1] 10011.01\n## [1] 10011.01\n## [1] 10011.01\n## [1] 10011.02\n## [1] 10011.02\n## [1] 10011.02\n## [1] 10011.02\n## [1] 10011.02\n## [1] 10011.02\n## [1] 10011.02\n## [1] 10011.02\n## [1] 10011.03\n## [1] 10011.03\n## [1] 10011.03\n## [1] 10011.03\n## [1] 10011.03\n## [1] 10011.03\n## [1] 10011.03\n## [1] 10011.03\n## [1] 10011.04\n## [1] 10011.04\n## [1] 10011.04\n## [1] 10011.04\n## [1] 10011.04\n## [1] 10011.04\n## [1] 10011.04\n## [1] 10011.05\n## [1] 10011.05\n## [1] 10011.05\n## [1] 10011.05\n## [1] 10011.05\n## [1] 10011.05\n## [1] 10011.05\n## [1] 10011.05\n## [1] 10011.06\n## [1] 10011.06\n## [1] 10011.06\n## [1] 10011.06\n## [1] 10011.06\n## [1] 10011.06\n## [1] 10011.06\n## [1] 10011.07\n## [1] 10011.07\n## [1] 10011.07\n## [1] 10011.07\n## [1] 10011.07\n## [1] 10011.07\n## [1] 10011.07\n## [1] 10011.07\n## [1] 10011.08\n## [1] 10011.08\n## [1] 10011.08\n## [1] 10011.08\n## [1] 10011.08\n## [1] 10011.08\n## [1] 10011.08\n## [1] 10011.08\n## [1] 10011.09\n## [1] 10011.09\n## [1] 10011.09\n## [1] 10011.09\n## [1] 10011.09\n## [1] 10011.09\n## [1] 10011.09\n## [1] 10011.1\n## [1] 10011.1\n## [1] 10011.1\n## [1] 10011.1\n## [1] 10011.1\n## [1] 10011.1\n## [1] 10011.1\n## [1] 10011.1\n## [1] 10011.11\n## [1] 10011.11\n## [1] 10011.11\n## [1] 10011.11\n## [1] 10011.11\n## [1] 10011.11\n## [1] 10011.11\n## [1] 10011.12\n## [1] 10011.12\n## [1] 10011.12\n## [1] 10011.12\n## [1] 10011.12\n## [1] 10011.12\n## [1] 10011.12\n## [1] 10011.12\n## [1] 10011.13\n## [1] 10011.13\n## [1] 10011.13\n## [1] 10011.13\n## [1] 10011.13\n## [1] 10011.13\n## [1] 10011.13\n## [1] 10011.13\n## [1] 10011.14\n## [1] 10011.14\n## [1] 10011.14\n## [1] 10011.14\n## [1] 10011.14\n## [1] 10011.14\n## [1] 10011.14\n## [1] 10011.15\n## [1] 10011.15\n## [1] 10011.15\n## [1] 10011.15\n## [1] 10011.15\n## [1] 10011.15\n## [1] 10011.15\n## [1] 10011.15\n## [1] 10011.16\n## [1] 10011.16\n## [1] 10011.16\n## [1] 10011.16\n## [1] 10011.16\n## [1] 10011.16\n## [1] 10011.16\n## [1] 10011.17\n## [1] 10011.17\n## [1] 10011.17\n## [1] 10011.17\n## [1] 10011.17\n## [1] 10011.17\n## [1] 10011.17\n## [1] 10011.17\n## [1] 10011.18\n## [1] 10011.18\n## [1] 10011.18\n## [1] 10011.18\n## [1] 10011.18\n## [1] 10011.18\n## [1] 10011.18\n## [1] 10011.18\n## [1] 10011.19\n## [1] 10011.19\n## [1] 10011.19\n## [1] 10011.19\n## [1] 10011.19\n## [1] 10011.19\n## [1] 10011.19\n## [1] 10011.2\n## [1] 10011.2\n## [1] 10011.2\n## [1] 10011.2\n## [1] 10011.2\n## [1] 10011.2\n## [1] 10011.2\n## [1] 10011.2\n## [1] 10011.21\n## [1] 10011.21\n## [1] 10011.21\n## [1] 10011.21\n## [1] 10011.21\n## [1] 10011.21\n## [1] 10011.21\n## [1] 10011.21\n## [1] 10011.22\n## [1] 10011.22\n## [1] 10011.22\n## [1] 10011.22\n## [1] 10011.22\n## [1] 10011.22\n## [1] 10011.22\n## [1] 10011.23\n## [1] 10011.23\n## [1] 10011.23\n## [1] 10011.23\n## [1] 10011.23\n## [1] 10011.23\n## [1] 10011.23\n## [1] 10011.23\n## [1] 10011.24\n## [1] 10011.24\n## [1] 10011.24\n## [1] 10011.24\n## [1] 10011.24\n## [1] 10011.24\n## [1] 10011.24\n## [1] 10011.25\n## [1] 10011.25\n## [1] 10011.25\n## [1] 10011.25\n## [1] 10011.25\n## [1] 10011.25\n## [1] 10011.25\n## [1] 10011.25\n## [1] 10011.26\n## [1] 10011.26\n## [1] 10011.26\n## [1] 10011.26\n## [1] 10011.26\n## [1] 10011.26\n## [1] 10011.26\n## [1] 10011.26\n## [1] 10011.27\n## [1] 10011.27\n## [1] 10011.27\n## [1] 10011.27\n## [1] 10011.27\n## [1] 10011.27\n## [1] 10011.27\n## [1] 10011.28\n## [1] 10011.28\n## [1] 10011.28\n## [1] 10011.28\n## [1] 10011.28\n## [1] 10011.28\n## [1] 10011.28\n## [1] 10011.28\n## [1] 10011.29\n## [1] 10011.29\n## [1] 10011.29\n## [1] 10011.29\n## [1] 10011.29\n## [1] 10011.29\n## [1] 10011.29\n## [1] 10011.3\n## [1] 10011.3\n## [1] 10011.3\n## [1] 10011.3\n## [1] 10011.3\n## [1] 10011.3\n## [1] 10011.3\n## [1] 10011.3\n## [1] 10011.31\n## [1] 10011.31\n## [1] 10011.31\n## [1] 10011.31\n## [1] 10011.31\n## [1] 10011.31\n## [1] 10011.31\n## [1] 10011.31\n## [1] 10011.32\n## [1] 10011.32\n## [1] 10011.32\n## [1] 10011.32\n## [1] 10011.32\n## [1] 10011.32\n## [1] 10011.32\n## [1] 10011.33\n## [1] 10011.33\n## [1] 10011.33\n## [1] 10011.33\n## [1] 10011.33\n## [1] 10011.33\n## [1] 10011.33\n## [1] 10011.33\n## [1] 10011.34\n## [1] 10011.34\n## [1] 10011.34\n## [1] 10011.34\n## [1] 10011.34\n## [1] 10011.34\n## [1] 10011.34\n## [1] 10011.35\n## [1] 10011.35\n## [1] 10011.35\n## [1] 10011.35\n## [1] 10011.35\n## [1] 10011.35\n## [1] 10011.35\n## [1] 10011.35\n## [1] 10011.36\n## [1] 10011.36\n## [1] 10011.36\n## [1] 10011.36\n## [1] 10011.36\n## [1] 10011.36\n## [1] 10011.36\n## [1] 10011.36\n## [1] 10011.37\n## [1] 10011.37\n## [1] 10011.37\n## [1] 10011.37\n## [1] 10011.37\n## [1] 10011.37\n## [1] 10011.37\n## [1] 10011.38\n## [1] 10011.38\n## [1] 10011.38\n## [1] 10011.38\n## [1] 10011.38\n## [1] 10011.38\n## [1] 10011.38\n## [1] 10011.38\n## [1] 10011.39\n## [1] 10011.39\n## [1] 10011.39\n## [1] 10011.39\n## [1] 10011.39\n## [1] 10011.39\n## [1] 10011.39\n## [1] 10011.4\n## [1] 10011.4\n## [1] 10011.4\n## [1] 10011.4\n## [1] 10011.4\n## [1] 10011.4\n## [1] 10011.4\n## [1] 10011.4\n## [1] 10011.41\n## [1] 10011.41\n## [1] 10011.41\n## [1] 10011.41\n## [1] 10011.41\n## [1] 10011.41\n## [1] 10011.41\n## [1] 10011.41\n## [1] 10011.42\n## [1] 10011.42\n## [1] 10011.42\n## [1] 10011.42\n## [1] 10011.42\n## [1] 10011.42\n## [1] 10011.42\n## [1] 10011.43\n## [1] 10011.43\n## [1] 10011.43\n## [1] 10011.43\n## [1] 10011.43\n## [1] 10011.43\n## [1] 10011.43\n## [1] 10011.43\n## [1] 10011.44\n## [1] 10011.44\n## [1] 10011.44\n## [1] 10011.44\n## [1] 10011.44\n## [1] 10011.44\n## [1] 10011.44\n## [1] 10011.45\n## [1] 10011.45\n## [1] 10011.45\n## [1] 10011.45\n## [1] 10011.45\n## [1] 10011.45\n## [1] 10011.45\n## [1] 10011.45\n## [1] 10011.46\n## [1] 10011.46\n## [1] 10011.46\n## [1] 10011.46\n## [1] 10011.46\n## [1] 10011.46\n## [1] 10011.46\n## [1] 10011.46\n## [1] 10011.47\n## [1] 10011.47\n## [1] 10011.47\n## [1] 10011.47\n## [1] 10011.47\n## [1] 10011.47\n## [1] 10011.47\n## [1] 10011.48\n## [1] 10011.48\n## [1] 10011.48\n## [1] 10011.48\n## [1] 10011.48\n## [1] 10011.48\n## [1] 10011.48\n## [1] 10011.48\n## [1] 10011.49\n## [1] 10011.49\n## [1] 10011.49\n## [1] 10011.49\n## [1] 10011.49\n## [1] 10011.49\n## [1] 10011.49\n## [1] 10011.5\n## [1] 10011.5\n## [1] 10011.5\n## [1] 10011.5\n## [1] 10011.5\n## [1] 10011.5\n## [1] 10011.5\n## [1] 10011.5\n## [1] 10011.51\n## [1] 10011.51\n## [1] 10011.51\n## [1] 10011.51\n## [1] 10011.51\n## [1] 10011.51\n## [1] 10011.51\n## [1] 10011.51\n## [1] 10011.52\n## [1] 10011.52\n## [1] 10011.52\n## [1] 10011.52\n## [1] 10011.52\n## [1] 10011.52\n## [1] 10011.52\n## [1] 10011.53\n## [1] 10011.53\n## [1] 10011.53\n## [1] 10011.53\n## [1] 10011.53\n## [1] 10011.53\n## [1] 10011.53\n## [1] 10011.53\n## [1] 10011.54\n## [1] 10011.54\n## [1] 10011.54\n## [1] 10011.54\n## [1] 10011.54\n## [1] 10011.54\n## [1] 10011.54\n## [1] 10011.55\n## [1] 10011.55\n## [1] 10011.55\n## [1] 10011.55\n## [1] 10011.55\n## [1] 10011.55\n## [1] 10011.55\n## [1] 10011.55\n## [1] 10011.56\n## [1] 10011.56\n## [1] 10011.56\n## [1] 10011.56\n## [1] 10011.56\n## [1] 10011.56\n## [1] 10011.56\n## [1] 10011.56\n## [1] 10011.57\n## [1] 10011.57\n## [1] 10011.57\n## [1] 10011.57\n## [1] 10011.57\n## [1] 10011.57\n## [1] 10011.57\n## [1] 10011.58\n## [1] 10011.58\n## [1] 10011.58\n## [1] 10011.58\n## [1] 10011.58\n## [1] 10011.58\n## [1] 10011.58\n## [1] 10011.58\n## [1] 10011.59\n## [1] 10011.59\n## [1] 10011.59\n## [1] 10011.59\n## [1] 10011.59\n## [1] 10011.59\n## [1] 10011.59\n## [1] 10011.6\n## [1] 10011.6\n## [1] 10011.6\n## [1] 10011.6\n## [1] 10011.6\n## [1] 10011.6\n## [1] 10011.6\n## [1] 10011.6\n## [1] 10011.61\n## [1] 10011.61\n## [1] 10011.61\n## [1] 10011.61\n## [1] 10011.61\n## [1] 10011.61\n## [1] 10011.61\n## [1] 10011.61\n## [1] 10011.62\n## [1] 10011.62\n## [1] 10011.62\n## [1] 10011.62\n## [1] 10011.62\n## [1] 10011.62\n## [1] 10011.62\n## [1] 10011.63\n## [1] 10011.63\n## [1] 10011.63\n## [1] 10011.63\n## [1] 10011.63\n## [1] 10011.63\n## [1] 10011.63\n## [1] 10011.63\n## [1] 10011.64\n## [1] 10011.64\n## [1] 10011.64\n## [1] 10011.64\n## [1] 10011.64\n## [1] 10011.64\n## [1] 10011.64\n## [1] 10011.64\n## [1] 10011.65\n## [1] 10011.65\n## [1] 10011.65\n## [1] 10011.65\n## [1] 10011.65\n## [1] 10011.65\n## [1] 10011.65\n## [1] 10011.66\n## [1] 10011.66\n## [1] 10011.66\n## [1] 10011.66\n## [1] 10011.66\n## [1] 10011.66\n## [1] 10011.66\n## [1] 10011.66\n## [1] 10011.67\n## [1] 10011.67\n## [1] 10011.67\n## [1] 10011.67\n## [1] 10011.67\n## [1] 10011.67\n## [1] 10011.67\n## [1] 10011.68\n## [1] 10011.68\n## [1] 10011.68\n## [1] 10011.68\n## [1] 10011.68\n## [1] 10011.68\n## [1] 10011.68\n## [1] 10011.68\n## [1] 10011.69\n## [1] 10011.69\n## [1] 10011.69\n## [1] 10011.69\n## [1] 10011.69\n## [1] 10011.69\n## [1] 10011.69\n## [1] 10011.69\n## [1] 10011.7\n## [1] 10011.7\n## [1] 10011.7\n## [1] 10011.7\n## [1] 10011.7\n## [1] 10011.7\n## [1] 10011.7\n## [1] 10011.71\n## [1] 10011.71\n## [1] 10011.71\n## [1] 10011.71\n## [1] 10011.71\n## [1] 10011.71\n## [1] 10011.71\n## [1] 10011.71\n## [1] 10011.72\n## [1] 10011.72\n## [1] 10011.72\n## [1] 10011.72\n## [1] 10011.72\n## [1] 10011.72\n## [1] 10011.72\n## [1] 10011.73\n## [1] 10011.73\n## [1] 10011.73\n## [1] 10011.73\n## [1] 10011.73\n## [1] 10011.73\n## [1] 10011.73\n## [1] 10011.73\n## [1] 10011.74\n## [1] 10011.74\n## [1] 10011.74\n## [1] 10011.74\n## [1] 10011.74\n## [1] 10011.74\n## [1] 10011.74\n## [1] 10011.74\n## [1] 10011.75\n## [1] 10011.75\n## [1] 10011.75\n## [1] 10011.75\n## [1] 10011.75\n## [1] 10011.75\n## [1] 10011.75\n## [1] 10011.76\n## [1] 10011.76\n## [1] 10011.76\n## [1] 10011.76\n## [1] 10011.76\n## [1] 10011.76\n## [1] 10011.76\n## [1] 10011.76\n## [1] 10011.77\n## [1] 10011.77\n## [1] 10011.77\n## [1] 10011.77\n## [1] 10011.77\n## [1] 10011.77\n## [1] 10011.77\n## [1] 10011.78\n## [1] 10011.78\n## [1] 10011.78\n## [1] 10011.78\n## [1] 10011.78\n## [1] 10011.78\n## [1] 10011.78\n## [1] 10011.78\n## [1] 10011.79\n## [1] 10011.79\n## [1] 10011.79\n## [1] 10011.79\n## [1] 10011.79\n## [1] 10011.79\n## [1] 10011.79\n## [1] 10011.79\n## [1] 10011.8\n## [1] 10011.8\n## [1] 10011.8\n## [1] 10011.8\n## [1] 10011.8\n## [1] 10011.8\n## [1] 10011.8\n## [1] 10011.81\n## [1] 10011.81\n## [1] 10011.81\n## [1] 10011.81\n## [1] 10011.81\n## [1] 10011.81\n## [1] 10011.81\n## [1] 10011.81\n## [1] 10011.82\n## [1] 10011.82\n## [1] 10011.82\n## [1] 10011.82\n## [1] 10011.82\n## [1] 10011.82\n## [1] 10011.82\n## [1] 10011.83\n## [1] 10011.83\n## [1] 10011.83\n## [1] 10011.83\n## [1] 10011.83\n## [1] 10011.83\n## [1] 10011.83\n## [1] 10011.83\n## [1] 10011.84\n## [1] 10011.84\n## [1] 10011.84\n## [1] 10011.84\n## [1] 10011.84\n## [1] 10011.84\n## [1] 10011.84\n## [1] 10011.84\n## [1] 10011.85\n## [1] 10011.85\n## [1] 10011.85\n## [1] 10011.85\n## [1] 10011.85\n## [1] 10011.85\n## [1] 10011.85\n## [1] 10011.86\n## [1] 10011.86\n## [1] 10011.86\n## [1] 10011.86\n## [1] 10011.86\n## [1] 10011.86\n## [1] 10011.86\n## [1] 10011.86\n## [1] 10011.87\n## [1] 10011.87\n## [1] 10011.87\n## [1] 10011.87\n## [1] 10011.87\n## [1] 10011.87\n## [1] 10011.87\n## [1] 10011.88\n## [1] 10011.88\n## [1] 10011.88\n## [1] 10011.88\n## [1] 10011.88\n## [1] 10011.88\n## [1] 10011.88\n## [1] 10011.88\n## [1] 10011.89\n## [1] 10011.89\n## [1] 10011.89\n## [1] 10011.89\n## [1] 10011.89\n## [1] 10011.89\n## [1] 10011.89\n## [1] 10011.89\n## [1] 10011.9\n## [1] 10011.9\n## [1] 10011.9\n## [1] 10011.9\n## [1] 10011.9\n## [1] 10011.9\n## [1] 10011.9\n## [1] 10011.91\n## [1] 10011.91\n## [1] 10011.91\n## [1] 10011.91\n## [1] 10011.91\n## [1] 10011.91\n## [1] 10011.91\n## [1] 10011.91\n## [1] 10011.92\n## [1] 10011.92\n## [1] 10011.92\n## [1] 10011.92\n## [1] 10011.92\n## [1] 10011.92\n## [1] 10011.92\n## [1] 10011.93\n## [1] 10011.93\n## [1] 10011.93\n## [1] 10011.93\n## [1] 10011.93\n## [1] 10011.93\n## [1] 10011.93\n## [1] 10011.93\n## [1] 10011.94\n## [1] 10011.94\n## [1] 10011.94\n## [1] 10011.94\n## [1] 10011.94\n## [1] 10011.94\n## [1] 10011.94\n## [1] 10011.94\n## [1] 10011.95\n## [1] 10011.95\n## [1] 10011.95\n## [1] 10011.95\n## [1] 10011.95\n## [1] 10011.95\n## [1] 10011.95\n## [1] 10011.96\n## [1] 10011.96\n## [1] 10011.96\n## [1] 10011.96\n## [1] 10011.96\n## [1] 10011.96\n## [1] 10011.96\n## [1] 10011.96\n## [1] 10011.97\n## [1] 10011.97\n## [1] 10011.97\n## [1] 10011.97\n## [1] 10011.97\n## [1] 10011.97\n## [1] 10011.97\n## [1] 10011.98\n## [1] 10011.98\n## [1] 10011.98\n## [1] 10011.98\n## [1] 10011.98\n## [1] 10011.98\n## [1] 10011.98\n## [1] 10011.98\n## [1] 10011.99\n## [1] 10011.99\n## [1] 10011.99\n## [1] 10011.99\n## [1] 10011.99\n## [1] 10011.99\n## [1] 10011.99\n## [1] 10011.99\n## [1] 10012\n## [1] 10012\n## [1] 10012\n## [1] 10012\n## [1] 10012\n## [1] 10012\n## [1] 10012\n## [1] 10012.01\n## [1] 10012.01\n## [1] 10012.01\n## [1] 10012.01\n## [1] 10012.01\n## [1] 10012.01\n## [1] 10012.01\n## [1] 10012.01\n## [1] 10012.02\n## [1] 10012.02\n## [1] 10012.02\n## [1] 10012.02\n## [1] 10012.02\n## [1] 10012.02\n## [1] 10012.02\n## [1] 10012.02\n## [1] 10012.03\n## [1] 10012.03\n## [1] 10012.03\n## [1] 10012.03\n## [1] 10012.03\n## [1] 10012.03\n## [1] 10012.03\n## [1] 10012.04\n## [1] 10012.04\n## [1] 10012.04\n## [1] 10012.04\n## [1] 10012.04\n## [1] 10012.04\n## [1] 10012.04\n## [1] 10012.04\n## [1] 10012.05\n## [1] 10012.05\n## [1] 10012.05\n## [1] 10012.05\n## [1] 10012.05\n## [1] 10012.05\n## [1] 10012.05\n## [1] 10012.06\n## [1] 10012.06\n## [1] 10012.06\n## [1] 10012.06\n## [1] 10012.06\n## [1] 10012.06\n## [1] 10012.06\n## [1] 10012.06\n## [1] 10012.07\n## [1] 10012.07\n## [1] 10012.07\n## [1] 10012.07\n## [1] 10012.07\n## [1] 10012.07\n## [1] 10012.07\n## [1] 10012.07\n## [1] 10012.08\n## [1] 10012.08\n## [1] 10012.08\n## [1] 10012.08\n## [1] 10012.08\n## [1] 10012.08\n## [1] 10012.08\n## [1] 10012.09\n## [1] 10012.09\n## [1] 10012.09\n## [1] 10012.09\n## [1] 10012.09\n## [1] 10012.09\n## [1] 10012.09\n## [1] 10012.09\n## [1] 10012.1\n## [1] 10012.1\n## [1] 10012.1\n## [1] 10012.1\n## [1] 10012.1\n## [1] 10012.1\n## [1] 10012.1\n## [1] 10012.11\n## [1] 10012.11\n## [1] 10012.11\n## [1] 10012.11\n## [1] 10012.11\n## [1] 10012.11\n## [1] 10012.11\n## [1] 10012.11\n## [1] 10012.12\n## [1] 10012.12\n## [1] 10012.12\n## [1] 10012.12\n## [1] 10012.12\n## [1] 10012.12\n## [1] 10012.12\n## [1] 10012.12\n## [1] 10012.13\n## [1] 10012.13\n## [1] 10012.13\n## [1] 10012.13\n## [1] 10012.13\n## [1] 10012.13\n## [1] 10012.13\n## [1] 10012.14\n## [1] 10012.14\n## [1] 10012.14\n## [1] 10012.14\n## [1] 10012.14\n## [1] 10012.14\n## [1] 10012.14\n## [1] 10012.14\n## [1] 10012.15\n## [1] 10012.15\n## [1] 10012.15\n## [1] 10012.15\n## [1] 10012.15\n## [1] 10012.15\n## [1] 10012.15\n## [1] 10012.16\n## [1] 10012.16\n## [1] 10012.16\n## [1] 10012.16\n## [1] 10012.16\n## [1] 10012.16\n## [1] 10012.16\n## [1] 10012.16\n## [1] 10012.17\n## [1] 10012.17\n## [1] 10012.17\n## [1] 10012.17\n## [1] 10012.17\n## [1] 10012.17\n## [1] 10012.17\n## [1] 10012.17\n## [1] 10012.18\n## [1] 10012.18\n## [1] 10012.18\n## [1] 10012.18\n## [1] 10012.18\n## [1] 10012.18\n## [1] 10012.18\n## [1] 10012.19\n## [1] 10012.19\n## [1] 10012.19\n## [1] 10012.19\n## [1] 10012.19\n## [1] 10012.19\n## [1] 10012.19\n## [1] 10012.19\n## [1] 10012.2\n## [1] 10012.2\n## [1] 10012.2\n## [1] 10012.2\n## [1] 10012.2\n## [1] 10012.2\n## [1] 10012.2\n## [1] 10012.21\n## [1] 10012.21\n## [1] 10012.21\n## [1] 10012.21\n## [1] 10012.21\n## [1] 10012.21\n## [1] 10012.21\n## [1] 10012.21\n## [1] 10012.22\n## [1] 10012.22\n## [1] 10012.22\n## [1] 10012.22\n## [1] 10012.22\n## [1] 10012.22\n## [1] 10012.22\n## [1] 10012.22\n## [1] 10012.23\n## [1] 10012.23\n## [1] 10012.23\n## [1] 10012.23\n## [1] 10012.23\n## [1] 10012.23\n## [1] 10012.23\n## [1] 10012.24\n## [1] 10012.24\n## [1] 10012.24\n## [1] 10012.24\n## [1] 10012.24\n## [1] 10012.24\n## [1] 10012.24\n## [1] 10012.24\n## [1] 10012.25\n## [1] 10012.25\n## [1] 10012.25\n## [1] 10012.25\n## [1] 10012.25\n## [1] 10012.25\n## [1] 10012.25\n## [1] 10012.26\n## [1] 10012.26\n## [1] 10012.26\n## [1] 10012.26\n## [1] 10012.26\n## [1] 10012.26\n## [1] 10012.26\n## [1] 10012.26\n## [1] 10012.27\n## [1] 10012.27\n## [1] 10012.27\n## [1] 10012.27\n## [1] 10012.27\n## [1] 10012.27\n## [1] 10012.27\n## [1] 10012.27\n## [1] 10012.28\n## [1] 10012.28\n## [1] 10012.28\n## [1] 10012.28\n## [1] 10012.28\n## [1] 10012.28\n## [1] 10012.28\n## [1] 10012.29\n## [1] 10012.29\n## [1] 10012.29\n## [1] 10012.29\n## [1] 10012.29\n## [1] 10012.29\n## [1] 10012.29\n## [1] 10012.29\n## [1] 10012.3\n## [1] 10012.3\n## [1] 10012.3\n## [1] 10012.3\n## [1] 10012.3\n## [1] 10012.3\n## [1] 10012.3\n## [1] 10012.31\n## [1] 10012.31\n## [1] 10012.31\n## [1] 10012.31\n## [1] 10012.31\n## [1] 10012.31\n## [1] 10012.31\n## [1] 10012.31\n## [1] 10012.32\n## [1] 10012.32\n## [1] 10012.32\n## [1] 10012.32\n## [1] 10012.32\n## [1] 10012.32\n## [1] 10012.32\n## [1] 10012.32\n## [1] 10012.33\n## [1] 10012.33\n## [1] 10012.33\n## [1] 10012.33\n## [1] 10012.33\n## [1] 10012.33\n## [1] 10012.33\n## [1] 10012.34\n## [1] 10012.34\n## [1] 10012.34\n## [1] 10012.34\n## [1] 10012.34\n## [1] 10012.34\n## [1] 10012.34\n## [1] 10012.34\n## [1] 10012.35\n## [1] 10012.35\n## [1] 10012.35\n## [1] 10012.35\n## [1] 10012.35\n## [1] 10012.35\n## [1] 10012.35\n## [1] 10012.36\n## [1] 10012.36\n## [1] 10012.36\n## [1] 10012.36\n## [1] 10012.36\n## [1] 10012.36\n## [1] 10012.36\n## [1] 10012.36\n## [1] 10012.37\n## [1] 10012.37\n## [1] 10012.37\n## [1] 10012.37\n## [1] 10012.37\n## [1] 10012.37\n## [1] 10012.37\n## [1] 10012.37\n## [1] 10012.38\n## [1] 10012.38\n## [1] 10012.38\n## [1] 10012.38\n## [1] 10012.38\n## [1] 10012.38\n## [1] 10012.38\n## [1] 10012.39\n## [1] 10012.39\n## [1] 10012.39\n## [1] 10012.39\n## [1] 10012.39\n## [1] 10012.39\n## [1] 10012.39\n## [1] 10012.39\n## [1] 10012.4\n## [1] 10012.4\n## [1] 10012.4\n## [1] 10012.4\n## [1] 10012.4\n## [1] 10012.4\n## [1] 10012.4\n## [1] 10012.4\n## [1] 10012.41\n## [1] 10012.41\n## [1] 10012.41\n## [1] 10012.41\n## [1] 10012.41\n## [1] 10012.41\n## [1] 10012.41\n## [1] 10012.42\n## [1] 10012.42\n## [1] 10012.42\n## [1] 10012.42\n## [1] 10012.42\n## [1] 10012.42\n## [1] 10012.42\n## [1] 10012.42\n## [1] 10012.43\n## [1] 10012.43\n## [1] 10012.43\n## [1] 10012.43\n## [1] 10012.43\n## [1] 10012.43\n## [1] 10012.43\n## [1] 10012.44\n## [1] 10012.44\n## [1] 10012.44\n## [1] 10012.44\n## [1] 10012.44\n## [1] 10012.44\n## [1] 10012.44\n## [1] 10012.44\n## [1] 10012.45\n## [1] 10012.45\n## [1] 10012.45\n## [1] 10012.45\n## [1] 10012.45\n## [1] 10012.45\n## [1] 10012.45\n## [1] 10012.45\n## [1] 10012.46\n## [1] 10012.46\n## [1] 10012.46\n## [1] 10012.46\n## [1] 10012.46\n## [1] 10012.46\n## [1] 10012.46\n## [1] 10012.47\n## [1] 10012.47\n## [1] 10012.47\n## [1] 10012.47\n## [1] 10012.47\n## [1] 10012.47\n## [1] 10012.47\n## [1] 10012.47\n## [1] 10012.48\n## [1] 10012.48\n## [1] 10012.48\n## [1] 10012.48\n## [1] 10012.48\n## [1] 10012.48\n## [1] 10012.48\n## [1] 10012.49\n## [1] 10012.49\n## [1] 10012.49\n## [1] 10012.49\n## [1] 10012.49\n## [1] 10012.49\n## [1] 10012.49\n## [1] 10012.49\n## [1] 10012.5\n## [1] 10012.5\n## [1] 10012.5\n## [1] 10012.5\n## [1] 10012.5\n## [1] 10012.5\n## [1] 10012.5\n## [1] 10012.5\n## [1] 10012.51\n## [1] 10012.51\n## [1] 10012.51\n## [1] 10012.51\n## [1] 10012.51\n## [1] 10012.51\n## [1] 10012.51\n## [1] 10012.52\n## [1] 10012.52\n## [1] 10012.52\n## [1] 10012.52\n## [1] 10012.52\n## [1] 10012.52\n## [1] 10012.52\n## [1] 10012.52\n## [1] 10012.53\n## [1] 10012.53\n## [1] 10012.53\n## [1] 10012.53\n## [1] 10012.53\n## [1] 10012.53\n## [1] 10012.53\n## [1] 10012.54\n## [1] 10012.54\n## [1] 10012.54\n## [1] 10012.54\n## [1] 10012.54\n## [1] 10012.54\n## [1] 10012.54\n## [1] 10012.54\n## [1] 10012.55\n## [1] 10012.55\n## [1] 10012.55\n## [1] 10012.55\n## [1] 10012.55\n## [1] 10012.55\n## [1] 10012.55\n## [1] 10012.55\n## [1] 10012.56\n## [1] 10012.56\n## [1] 10012.56\n## [1] 10012.56\n## [1] 10012.56\n## [1] 10012.56\n## [1] 10012.56\n## [1] 10012.57\n## [1] 10012.57\n## [1] 10012.57\n## [1] 10012.57\n## [1] 10012.57\n## [1] 10012.57\n## [1] 10012.57\n## [1] 10012.57\n## [1] 10012.58\n## [1] 10012.58\n## [1] 10012.58\n## [1] 10012.58\n## [1] 10012.58\n## [1] 10012.58\n## [1] 10012.58\n## [1] 10012.59\n## [1] 10012.59\n## [1] 10012.59\n## [1] 10012.59\n## [1] 10012.59\n## [1] 10012.59\n## [1] 10012.59\n## [1] 10012.59\n## [1] 10012.6\n## [1] 10012.6\n## [1] 10012.6\n## [1] 10012.6\n## [1] 10012.6\n## [1] 10012.6\n## [1] 10012.6\n## [1] 10012.6\n## [1] 10012.61\n## [1] 10012.61\n## [1] 10012.61\n## [1] 10012.61\n## [1] 10012.61\n## [1] 10012.61\n## [1] 10012.61\n## [1] 10012.62\n## [1] 10012.62\n## [1] 10012.62\n## [1] 10012.62\n## [1] 10012.62\n## [1] 10012.62\n## [1] 10012.62\n## [1] 10012.62\n## [1] 10012.63\n## [1] 10012.63\n## [1] 10012.63\n## [1] 10012.63\n## [1] 10012.63\n## [1] 10012.63\n## [1] 10012.63\n## [1] 10012.64\n## [1] 10012.64\n## [1] 10012.64\n## [1] 10012.64\n## [1] 10012.64\n## [1] 10012.64\n## [1] 10012.64\n## [1] 10012.64\n## [1] 10012.65\n## [1] 10012.65\n## [1] 10012.65\n## [1] 10012.65\n## [1] 10012.65\n## [1] 10012.65\n## [1] 10012.65\n## [1] 10012.65\n## [1] 10012.66\n## [1] 10012.66\n## [1] 10012.66\n## [1] 10012.66\n## [1] 10012.66\n## [1] 10012.66\n## [1] 10012.66\n## [1] 10012.67\n## [1] 10012.67\n## [1] 10012.67\n## [1] 10012.67\n## [1] 10012.67\n## [1] 10012.67\n## [1] 10012.67\n## [1] 10012.67\n## [1] 10012.68\n## [1] 10012.68\n## [1] 10012.68\n## [1] 10012.68\n## [1] 10012.68\n## [1] 10012.68\n## [1] 10012.68\n## [1] 10012.69\n## [1] 10012.69\n## [1] 10012.69\n## [1] 10012.69\n## [1] 10012.69\n## [1] 10012.69\n## [1] 10012.69\n## [1] 10012.69\n## [1] 10012.7\n## [1] 10012.7\n## [1] 10012.7\n## [1] 10012.7\n## [1] 10012.7\n## [1] 10012.7\n## [1] 10012.7\n## [1] 10012.7\n## [1] 10012.71\n## [1] 10012.71\n## [1] 10012.71\n## [1] 10012.71\n## [1] 10012.71\n## [1] 10012.71\n## [1] 10012.71\n## [1] 10012.72\n## [1] 10012.72\n## [1] 10012.72\n## [1] 10012.72\n## [1] 10012.72\n## [1] 10012.72\n## [1] 10012.72\n## [1] 10012.72\n## [1] 10012.73\n## [1] 10012.73\n## [1] 10012.73\n## [1] 10012.73\n## [1] 10012.73\n## [1] 10012.73\n## [1] 10012.73\n## [1] 10012.74\n## [1] 10012.74\n## [1] 10012.74\n## [1] 10012.74\n## [1] 10012.74\n## [1] 10012.74\n## [1] 10012.74\n## [1] 10012.74\n## [1] 10012.75\n## [1] 10012.75\n## [1] 10012.75\n## [1] 10012.75\n## [1] 10012.75\n## [1] 10012.75\n## [1] 10012.75\n## [1] 10012.75\n## [1] 10012.76\n## [1] 10012.76\n## [1] 10012.76\n## [1] 10012.76\n## [1] 10012.76\n## [1] 10012.76\n## [1] 10012.76\n## [1] 10012.77\n## [1] 10012.77\n## [1] 10012.77\n## [1] 10012.77\n## [1] 10012.77\n## [1] 10012.77\n## [1] 10012.77\n## [1] 10012.77\n## [1] 10012.78\n## [1] 10012.78\n## [1] 10012.78\n## [1] 10012.78\n## [1] 10012.78\n## [1] 10012.78\n## [1] 10012.78\n## [1] 10012.79\n## [1] 10012.79\n## [1] 10012.79\n## [1] 10012.79\n## [1] 10012.79\n## [1] 10012.79\n## [1] 10012.79\n## [1] 10012.79\n## [1] 10012.8\n## [1] 10012.8\n## [1] 10012.8\n## [1] 10012.8\n## [1] 10012.8\n## [1] 10012.8\n## [1] 10012.8\n## [1] 10012.8\n## [1] 10012.81\n## [1] 10012.81\n## [1] 10012.81\n## [1] 10012.81\n## [1] 10012.81\n## [1] 10012.81\n## [1] 10012.81\n## [1] 10012.82\n## [1] 10012.82\n## [1] 10012.82\n## [1] 10012.82\n## [1] 10012.82\n## [1] 10012.82\n## [1] 10012.82\n## [1] 10012.82\n## [1] 10012.83\n## [1] 10012.83\n## [1] 10012.83\n## [1] 10012.83\n## [1] 10012.83\n## [1] 10012.83\n## [1] 10012.83\n## [1] 10012.83\n## [1] 10012.84\n## [1] 10012.84\n## [1] 10012.84\n## [1] 10012.84\n## [1] 10012.84\n## [1] 10012.84\n## [1] 10012.84\n## [1] 10012.85\n## [1] 10012.85\n## [1] 10012.85\n## [1] 10012.85\n## [1] 10012.85\n## [1] 10012.85\n## [1] 10012.85\n## [1] 10012.85\n## [1] 10012.86\n## [1] 10012.86\n## [1] 10012.86\n## [1] 10012.86\n## [1] 10012.86\n## [1] 10012.86\n## [1] 10012.86\n## [1] 10012.87\n## [1] 10012.87\n## [1] 10012.87\n## [1] 10012.87\n## [1] 10012.87\n## [1] 10012.87\n## [1] 10012.87\n## [1] 10012.87\n## [1] 10012.88\n## [1] 10012.88\n## [1] 10012.88\n## [1] 10012.88\n## [1] 10012.88\n## [1] 10012.88\n## [1] 10012.88\n## [1] 10012.88\n## [1] 10012.89\n## [1] 10012.89\n## [1] 10012.89\n## [1] 10012.89\n## [1] 10012.89\n## [1] 10012.89\n## [1] 10012.89\n## [1] 10012.9\n## [1] 10012.9\n## [1] 10012.9\n## [1] 10012.9\n## [1] 10012.9\n## [1] 10012.9\n## [1] 10012.9\n## [1] 10012.9\n## [1] 10012.91\n## [1] 10012.91\n## [1] 10012.91\n## [1] 10012.91\n## [1] 10012.91\n## [1] 10012.91\n## [1] 10012.91\n## [1] 10012.92\n## [1] 10012.92\n## [1] 10012.92\n## [1] 10012.92\n## [1] 10012.92\n## [1] 10012.92\n## [1] 10012.92\n## [1] 10012.92\n## [1] 10012.93\n## [1] 10012.93\n## [1] 10012.93\n## [1] 10012.93\n## [1] 10012.93\n## [1] 10012.93\n## [1] 10012.93\n## [1] 10012.93\n## [1] 10012.94\n## [1] 10012.94\n## [1] 10012.94\n## [1] 10012.94\n## [1] 10012.94\n## [1] 10012.94\n## [1] 10012.94\n## [1] 10012.95\n## [1] 10012.95\n## [1] 10012.95\n## [1] 10012.95\n## [1] 10012.95\n## [1] 10012.95\n## [1] 10012.95\n## [1] 10012.95\n## [1] 10012.96\n## [1] 10012.96\n## [1] 10012.96\n## [1] 10012.96\n## [1] 10012.96\n## [1] 10012.96\n## [1] 10012.96\n## [1] 10012.97\n## [1] 10012.97\n## [1] 10012.97\n## [1] 10012.97\n## [1] 10012.97\n## [1] 10012.97\n## [1] 10012.97\n## [1] 10012.97\n## [1] 10012.98\n## [1] 10012.98\n## [1] 10012.98\n## [1] 10012.98\n## [1] 10012.98\n## [1] 10012.98\n## [1] 10012.98\n## [1] 10012.98\n## [1] 10012.99\n## [1] 10012.99\n## [1] 10012.99\n## [1] 10012.99\n## [1] 10012.99\n## [1] 10012.99\n## [1] 10012.99\n## [1] 10013\n## [1] 10013\n## [1] 10013\n## [1] 10013\n## [1] 10013\n## [1] 10013\n## [1] 10013\n## [1] 10013\n## [1] 10013.01\n## [1] 10013.01\n## [1] 10013.01\n## [1] 10013.01\n## [1] 10013.01\n## [1] 10013.01\n## [1] 10013.01\n## [1] 10013.02\n## [1] 10013.02\n## [1] 10013.02\n## [1] 10013.02\n## [1] 10013.02\n## [1] 10013.02\n## [1] 10013.02\n## [1] 10013.02\n## [1] 10013.03\n## [1] 10013.03\n## [1] 10013.03\n## [1] 10013.03\n## [1] 10013.03\n## [1] 10013.03\n## [1] 10013.03\n## [1] 10013.03\n## [1] 10013.04\n## [1] 10013.04\n## [1] 10013.04\n## [1] 10013.04\n## [1] 10013.04\n## [1] 10013.04\n## [1] 10013.04\n## [1] 10013.05\n## [1] 10013.05\n## [1] 10013.05\n## [1] 10013.05\n## [1] 10013.05\n## [1] 10013.05\n## [1] 10013.05\n## [1] 10013.05\n## [1] 10013.06\n## [1] 10013.06\n## [1] 10013.06\n## [1] 10013.06\n## [1] 10013.06\n## [1] 10013.06\n## [1] 10013.06\n## [1] 10013.07\n## [1] 10013.07\n## [1] 10013.07\n## [1] 10013.07\n## [1] 10013.07\n## [1] 10013.07\n## [1] 10013.07\n## [1] 10013.07\n## [1] 10013.08\n## [1] 10013.08\n## [1] 10013.08\n## [1] 10013.08\n## [1] 10013.08\n## [1] 10013.08\n## [1] 10013.08\n## [1] 10013.08\n## [1] 10013.09\n## [1] 10013.09\n## [1] 10013.09\n## [1] 10013.09\n## [1] 10013.09\n## [1] 10013.09\n## [1] 10013.09\n## [1] 10013.1\n## [1] 10013.1\n## [1] 10013.1\n## [1] 10013.1\n## [1] 10013.1\n## [1] 10013.1\n## [1] 10013.1\n## [1] 10013.1\n## [1] 10013.11\n## [1] 10013.11\n## [1] 10013.11\n## [1] 10013.11\n## [1] 10013.11\n## [1] 10013.11\n## [1] 10013.11\n## [1] 10013.12\n## [1] 10013.12\n## [1] 10013.12\n## [1] 10013.12\n## [1] 10013.12\n## [1] 10013.12\n## [1] 10013.12\n## [1] 10013.12\n## [1] 10013.13\n## [1] 10013.13\n## [1] 10013.13\n## [1] 10013.13\n## [1] 10013.13\n## [1] 10013.13\n## [1] 10013.13\n## [1] 10013.13\n## [1] 10013.14\n## [1] 10013.14\n## [1] 10013.14\n## [1] 10013.14\n## [1] 10013.14\n## [1] 10013.14\n## [1] 10013.14\n## [1] 10013.15\n## [1] 10013.15\n## [1] 10013.15\n## [1] 10013.15\n\n\nfor (i in 6:10) {\n    print(i)\n}\n## [1] 6\n## [1] 7\n## [1] 8\n## [1] 9\n## [1] 10\n\n\nfor(i in 1:9) {\n    cat('2 *', i, '=', 2 * i, '\\n')\n}\n## 2 * 1 = 2 \n## 2 * 2 = 4 \n## 2 * 3 = 6 \n## 2 * 4 = 8 \n## 2 * 5 = 10 \n## 2 * 6 = 12 \n## 2 * 7 = 14 \n## 2 * 8 = 16 \n## 2 * 9 = 18\n\nfor (i in 1:9) {\n    cat('2 *', i, '=', 2 * i)\n}\n## 2 * 1 = 22 * 2 = 42 * 3 = 62 * 4 = 82 * 5 = 102 * 6 = 122 * 7 = 142 * 8 = 162 * 9 = 18\n\nfor (i in 1:9) {\n    j &lt;- i:10\n    print(j)\n}\n##  [1]  1  2  3  4  5  6  7  8  9 10\n## [1]  2  3  4  5  6  7  8  9 10\n## [1]  3  4  5  6  7  8  9 10\n## [1]  4  5  6  7  8  9 10\n## [1]  5  6  7  8  9 10\n## [1]  6  7  8  9 10\n## [1]  7  8  9 10\n## [1]  8  9 10\n## [1]  9 10\n\n\nfor(i in 1:20) {\n    if (i %% 2 == 0) {  # 짝수인지 확인\n        print(i)\n    }\n}\n## [1] 2\n## [1] 4\n## [1] 6\n## [1] 8\n## [1] 10\n## [1] 12\n## [1] 14\n## [1] 16\n## [1] 18\n## [1] 20\n\n\nsum &lt;- 0\nfor (i in 1:100) {\n    sum &lt;- sum + i  # sum에 i 값을 누적\n}\nprint(sum)\n## [1] 5050\n\nsum &lt;- 0\nfor (i in 1:100) {\n    sum &lt;- sum + i\n    print(c(sum, i))\n}\n## [1] 1 1\n## [1] 3 2\n## [1] 6 3\n## [1] 10  4\n## [1] 15  5\n## [1] 21  6\n## [1] 28  7\n## [1] 36  8\n## [1] 45  9\n## [1] 55 10\n## [1] 66 11\n## [1] 78 12\n## [1] 91 13\n## [1] 105  14\n## [1] 120  15\n## [1] 136  16\n## [1] 153  17\n## [1] 171  18\n## [1] 190  19\n## [1] 210  20\n## [1] 231  21\n## [1] 253  22\n## [1] 276  23\n## [1] 300  24\n## [1] 325  25\n## [1] 351  26\n## [1] 378  27\n## [1] 406  28\n## [1] 435  29\n## [1] 465  30\n## [1] 496  31\n## [1] 528  32\n## [1] 561  33\n## [1] 595  34\n## [1] 630  35\n## [1] 666  36\n## [1] 703  37\n## [1] 741  38\n## [1] 780  39\n## [1] 820  40\n## [1] 861  41\n## [1] 903  42\n## [1] 946  43\n## [1] 990  44\n## [1] 1035   45\n## [1] 1081   46\n## [1] 1128   47\n## [1] 1176   48\n## [1] 1225   49\n## [1] 1275   50\n## [1] 1326   51\n## [1] 1378   52\n## [1] 1431   53\n## [1] 1485   54\n## [1] 1540   55\n## [1] 1596   56\n## [1] 1653   57\n## [1] 1711   58\n## [1] 1770   59\n## [1] 1830   60\n## [1] 1891   61\n## [1] 1953   62\n## [1] 2016   63\n## [1] 2080   64\n## [1] 2145   65\n## [1] 2211   66\n## [1] 2278   67\n## [1] 2346   68\n## [1] 2415   69\n## [1] 2485   70\n## [1] 2556   71\n## [1] 2628   72\n## [1] 2701   73\n## [1] 2775   74\n## [1] 2850   75\n## [1] 2926   76\n## [1] 3003   77\n## [1] 3081   78\n## [1] 3160   79\n## [1] 3240   80\n## [1] 3321   81\n## [1] 3403   82\n## [1] 3486   83\n## [1] 3570   84\n## [1] 3655   85\n## [1] 3741   86\n## [1] 3828   87\n## [1] 3916   88\n## [1] 4005   89\n## [1] 4095   90\n## [1] 4186   91\n## [1] 4278   92\n## [1] 4371   93\n## [1] 4465   94\n## [1] 4560   95\n## [1] 4656   96\n## [1] 4753   97\n## [1] 4851   98\n## [1] 4950   99\n## [1] 5050  100\nprint(sum)\n## [1] 5050\n\nsum &lt;- 0\nfor (i in 1:100) {\n    print(c(sum, i))\n    sum &lt;- sum + i\n}\n## [1] 0 1\n## [1] 1 2\n## [1] 3 3\n## [1] 6 4\n## [1] 10  5\n## [1] 15  6\n## [1] 21  7\n## [1] 28  8\n## [1] 36  9\n## [1] 45 10\n## [1] 55 11\n## [1] 66 12\n## [1] 78 13\n## [1] 91 14\n## [1] 105  15\n## [1] 120  16\n## [1] 136  17\n## [1] 153  18\n## [1] 171  19\n## [1] 190  20\n## [1] 210  21\n## [1] 231  22\n## [1] 253  23\n## [1] 276  24\n## [1] 300  25\n## [1] 325  26\n## [1] 351  27\n## [1] 378  28\n## [1] 406  29\n## [1] 435  30\n## [1] 465  31\n## [1] 496  32\n## [1] 528  33\n## [1] 561  34\n## [1] 595  35\n## [1] 630  36\n## [1] 666  37\n## [1] 703  38\n## [1] 741  39\n## [1] 780  40\n## [1] 820  41\n## [1] 861  42\n## [1] 903  43\n## [1] 946  44\n## [1] 990  45\n## [1] 1035   46\n## [1] 1081   47\n## [1] 1128   48\n## [1] 1176   49\n## [1] 1225   50\n## [1] 1275   51\n## [1] 1326   52\n## [1] 1378   53\n## [1] 1431   54\n## [1] 1485   55\n## [1] 1540   56\n## [1] 1596   57\n## [1] 1653   58\n## [1] 1711   59\n## [1] 1770   60\n## [1] 1830   61\n## [1] 1891   62\n## [1] 1953   63\n## [1] 2016   64\n## [1] 2080   65\n## [1] 2145   66\n## [1] 2211   67\n## [1] 2278   68\n## [1] 2346   69\n## [1] 2415   70\n## [1] 2485   71\n## [1] 2556   72\n## [1] 2628   73\n## [1] 2701   74\n## [1] 2775   75\n## [1] 2850   76\n## [1] 2926   77\n## [1] 3003   78\n## [1] 3081   79\n## [1] 3160   80\n## [1] 3240   81\n## [1] 3321   82\n## [1] 3403   83\n## [1] 3486   84\n## [1] 3570   85\n## [1] 3655   86\n## [1] 3741   87\n## [1] 3828   88\n## [1] 3916   89\n## [1] 4005   90\n## [1] 4095   91\n## [1] 4186   92\n## [1] 4278   93\n## [1] 4371   94\n## [1] 4465   95\n## [1] 4560   96\n## [1] 4656   97\n## [1] 4753   98\n## [1] 4851   99\n## [1] 4950  100\nprint(sum)\n## [1] 5050\n\n\nnorow &lt;- nrow(iris)                             # iris의 행의 수\nmylabel &lt;- c()                                  # 비어 있는 벡터 선언\nfor (i in 1:norow) {\n    if (iris$Petal.Length[i] &lt;= 1.6) {          # 꽃잎의 길이에 따라 레이블 결정\n        mylabel[i] &lt;- 'L'\n    } else if (iris$Petal.Length[i] &gt;= 5.1) {\n        mylabel[i] &lt;- 'H'\n    } else {\n        mylabel[i] &lt;- 'M'\n    }\n    print(c(iris$Petal.Length[i], mylabel))\n}\n## [1] \"1.4\" \"L\"  \n## [1] \"1.4\" \"L\"   \"L\"  \n## [1] \"1.3\" \"L\"   \"L\"   \"L\"  \n## [1] \"1.5\" \"L\"   \"L\"   \"L\"   \"L\"  \n## [1] \"1.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [1] \"1.7\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"  \n## [1] \"1.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"  \n## [1] \"1.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [1] \"1.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"  \n##  [1] \"1.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"  \n##  [1] \"1.1\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"  \n##  [1] \"1.2\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.3\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.7\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"  \n##  [1] \"1.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"  \n##  [1] \"1.7\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"  \n##  [1] \"1.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"  \n##  [1] \"1\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n## [20] \"M\" \"L\" \"M\" \"L\" \"L\"\n##  [1] \"1.7\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"  \n##  [1] \"1.9\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"  \n##  [1] \"1.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"  \n##  [1] \"1.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"  \n##  [1] \"1.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.2\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"  \n##  [1] \"1.3\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"  \n##  [1] \"1.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"  \n##  [1] \"1.3\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.3\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.3\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.3\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [1] \"1.9\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"  \n##  [1] \"1.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"  \n##  [1] \"1.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [1] \"1.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"  \n##  [1] \"1.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"  \n##  [1] \"1.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"  \n##  [1] \"4.7\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"  \n##  [1] \"4.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"  \n##  [1] \"4.9\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n## [20] \"M\" \"L\" \"M\" \"L\" \"L\" \"M\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n## [39] \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"M\" \"M\" \"M\"\n##  [1] \"4.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4.7\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"3.3\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"3.9\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"  \n##  [1] \"3.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"  \n##  [1] \"4.2\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"  \n##  [1] \"4\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n## [20] \"M\" \"L\" \"M\" \"L\" \"L\" \"M\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n## [39] \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n## [58] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [1] \"4.7\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"3.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4.1\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"3.9\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4.8\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n## [20] \"M\" \"L\" \"M\" \"L\" \"L\" \"M\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n## [39] \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n## [58] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [1] \"4.9\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"  \n##  [1] \"4.7\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"  \n##  [1] \"4.3\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4.8\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"5\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n## [20] \"M\" \"L\" \"M\" \"L\" \"L\" \"M\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n## [39] \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n## [58] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n## [77] \"M\" \"M\" \"M\"\n##  [1] \"4.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"3.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"3.8\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"3.7\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"3.9\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"5.1\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [85] \"H\"  \n##  [1] \"4.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [85] \"H\"   \"M\"  \n##  [1] \"4.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [85] \"H\"   \"M\"   \"M\"  \n##  [1] \"4.7\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [85] \"H\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4.1\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n## [20] \"M\" \"L\" \"M\" \"L\" \"L\" \"M\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n## [39] \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n## [58] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n## [77] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"H\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [1] \"4.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n## [20] \"M\" \"L\" \"M\" \"L\" \"L\" \"M\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n## [39] \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n## [58] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n## [77] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"H\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [1] \"3.3\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4.2\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [1] \"4.2\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [97] \"M\"  \n##  [1] \"4.2\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [97] \"M\"   \"M\"  \n##  [1] \"4.3\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n## [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n## [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n## [97] \"M\"   \"M\"   \"M\"  \n##   [1] \"3\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n##  [19] \"L\" \"M\" \"L\" \"M\" \"L\" \"L\" \"M\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n##  [37] \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"M\" \"M\"\n##  [55] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [73] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"H\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [91] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##   [1] \"4.1\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##   [1] \"6\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n##  [19] \"L\" \"M\" \"L\" \"M\" \"L\" \"L\" \"M\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n##  [37] \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"M\" \"M\"\n##  [55] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [73] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"H\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [91] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"H\"\n##   [1] \"5.1\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"  \n##   [1] \"5.9\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n##   [1] \"5.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"  \n##   [1] \"5.8\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n##   [1] \"6.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n##   [1] \"4.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n##   [1] \"6.3\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"  \n##   [1] \"5.8\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"  \n##   [1] \"6.1\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"  \n##   [1] \"5.1\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"  \n##   [1] \"5.3\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n##   [1] \"5.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n##   [1] \"5\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n##  [19] \"L\" \"M\" \"L\" \"M\" \"L\" \"L\" \"M\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n##  [37] \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"M\" \"M\"\n##  [55] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [73] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"H\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [91] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"M\"\n## [109] \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"M\"\n##   [1] \"5.1\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"  \n##   [1] \"5.3\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"  \n##   [1] \"5.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"  \n##   [1] \"6.7\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"  \n##   [1] \"6.9\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n##   [1] \"5\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n##  [19] \"L\" \"M\" \"L\" \"M\" \"L\" \"L\" \"M\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n##  [37] \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"M\" \"M\"\n##  [55] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [73] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"H\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [91] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"M\"\n## [109] \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"M\" \"H\" \"H\" \"H\" \"H\" \"H\" \"M\"\n##   [1] \"5.7\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"  \n##   [1] \"4.9\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"  \n##   [1] \"6.7\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"  \n##   [1] \"4.9\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"  \n##   [1] \"5.7\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"  \n##   [1] \"6\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n##  [19] \"L\" \"M\" \"L\" \"M\" \"L\" \"L\" \"M\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n##  [37] \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"M\" \"M\"\n##  [55] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [73] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"H\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [91] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"M\"\n## [109] \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"M\" \"H\" \"H\" \"H\" \"H\" \"H\" \"M\" \"H\" \"M\" \"H\" \"M\" \"H\"\n## [127] \"H\"\n##   [1] \"4.8\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"  \n##   [1] \"4.9\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"  \n##   [1] \"5.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"  \n##   [1] \"5.8\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"  \n##   [1] \"6.1\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n##   [1] \"6.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"  \n##   [1] \"5.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"   \"H\"  \n##   [1] \"5.1\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"   \"H\"   \"H\"  \n##   [1] \"5.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"   \"H\"   \"H\"   \"H\"  \n##   [1] \"6.1\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n##   [1] \"5.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n##   [1] \"5.5\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n##   [1] \"4.8\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n##   [1] \"5.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"  \n##   [1] \"5.6\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"  \n##   [1] \"5.1\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"  \n##   [1] \"5.1\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"  \n##   [1] \"5.9\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [145] \"H\"  \n##   [1] \"5.7\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [145] \"H\"   \"H\"  \n##   [1] \"5.2\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [145] \"H\"   \"H\"   \"H\"  \n##   [1] \"5\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n##  [19] \"L\" \"M\" \"L\" \"M\" \"L\" \"L\" \"M\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n##  [37] \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"M\" \"M\"\n##  [55] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [73] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"H\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [91] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"M\"\n## [109] \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"M\" \"H\" \"H\" \"H\" \"H\" \"H\" \"M\" \"H\" \"M\" \"H\" \"M\" \"H\"\n## [127] \"H\" \"M\" \"M\" \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"M\" \"H\" \"H\" \"H\" \"H\"\n## [145] \"H\" \"H\" \"H\" \"M\"\n##   [1] \"5.2\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [145] \"H\"   \"H\"   \"H\"   \"M\"   \"H\"  \n##   [1] \"5.4\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [145] \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"  \n##   [1] \"5.1\" \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [13] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [25] \"M\"   \"M\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"  \n##  [37] \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"L\"   \"M\"   \"L\"   \"L\"  \n##  [49] \"L\"   \"L\"   \"L\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [61] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [73] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [85] \"H\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"M\"  \n##  [97] \"M\"   \"M\"   \"M\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"  \n## [109] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [121] \"M\"   \"H\"   \"M\"   \"H\"   \"M\"   \"H\"   \"H\"   \"M\"   \"M\"   \"H\"   \"H\"   \"H\"  \n## [133] \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"   \"H\"  \n## [145] \"H\"   \"H\"   \"H\"   \"M\"   \"H\"   \"H\"   \"H\"\nprint(mylabel)                                  # 레이블 출력\n##   [1] \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n##  [19] \"M\" \"L\" \"M\" \"L\" \"L\" \"M\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\"\n##  [37] \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"L\" \"L\" \"L\" \"L\" \"L\" \"M\" \"M\" \"M\" \"M\"\n##  [55] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [73] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"H\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\"\n##  [91] \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"M\" \"H\"\n## [109] \"H\" \"H\" \"H\" \"H\" \"H\" \"M\" \"H\" \"H\" \"H\" \"H\" \"H\" \"M\" \"H\" \"M\" \"H\" \"M\" \"H\" \"H\"\n## [127] \"M\" \"M\" \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"M\" \"H\" \"H\" \"H\" \"H\" \"H\"\n## [145] \"H\" \"H\" \"M\" \"H\" \"H\" \"H\"\nnewds &lt;- data.frame(iris$Petal.Length, mylabel) # 꽃잎의 길이와 레이블 결합\nhead(newds)                                     # 새로운 데이터셋 내용 출력\n##   iris.Petal.Length mylabel\n## 1               1.4       L\n## 2               1.4       L\n## 3               1.3       L\n## 4               1.5       L\n## 5               1.4       L\n## 6               1.7       M\n\n\nsum &lt;- 0\ni &lt;- 1\nwhile (i &lt;= 100) {\n    sum &lt;- sum + i      # sum에 i 값을 누적\n    i &lt;- i + 1          # i 값을 1 증가시킴\n    print(c(sum, i))\n}\n## [1] 1 2\n## [1] 3 3\n## [1] 6 4\n## [1] 10  5\n## [1] 15  6\n## [1] 21  7\n## [1] 28  8\n## [1] 36  9\n## [1] 45 10\n## [1] 55 11\n## [1] 66 12\n## [1] 78 13\n## [1] 91 14\n## [1] 105  15\n## [1] 120  16\n## [1] 136  17\n## [1] 153  18\n## [1] 171  19\n## [1] 190  20\n## [1] 210  21\n## [1] 231  22\n## [1] 253  23\n## [1] 276  24\n## [1] 300  25\n## [1] 325  26\n## [1] 351  27\n## [1] 378  28\n## [1] 406  29\n## [1] 435  30\n## [1] 465  31\n## [1] 496  32\n## [1] 528  33\n## [1] 561  34\n## [1] 595  35\n## [1] 630  36\n## [1] 666  37\n## [1] 703  38\n## [1] 741  39\n## [1] 780  40\n## [1] 820  41\n## [1] 861  42\n## [1] 903  43\n## [1] 946  44\n## [1] 990  45\n## [1] 1035   46\n## [1] 1081   47\n## [1] 1128   48\n## [1] 1176   49\n## [1] 1225   50\n## [1] 1275   51\n## [1] 1326   52\n## [1] 1378   53\n## [1] 1431   54\n## [1] 1485   55\n## [1] 1540   56\n## [1] 1596   57\n## [1] 1653   58\n## [1] 1711   59\n## [1] 1770   60\n## [1] 1830   61\n## [1] 1891   62\n## [1] 1953   63\n## [1] 2016   64\n## [1] 2080   65\n## [1] 2145   66\n## [1] 2211   67\n## [1] 2278   68\n## [1] 2346   69\n## [1] 2415   70\n## [1] 2485   71\n## [1] 2556   72\n## [1] 2628   73\n## [1] 2701   74\n## [1] 2775   75\n## [1] 2850   76\n## [1] 2926   77\n## [1] 3003   78\n## [1] 3081   79\n## [1] 3160   80\n## [1] 3240   81\n## [1] 3321   82\n## [1] 3403   83\n## [1] 3486   84\n## [1] 3570   85\n## [1] 3655   86\n## [1] 3741   87\n## [1] 3828   88\n## [1] 3916   89\n## [1] 4005   90\n## [1] 4095   91\n## [1] 4186   92\n## [1] 4278   93\n## [1] 4371   94\n## [1] 4465   95\n## [1] 4560   96\n## [1] 4656   97\n## [1] 4753   98\n## [1] 4851   99\n## [1] 4950  100\n## [1] 5050  101\nprint(sum)\n## [1] 5050\n\n#---------------------------------------#\n# 오류 없이 계속 실행됨\n# sum &lt;- 0\n# i &lt;- 1\n# while(i &gt;= 1) {\n#   sum &lt;- sum + i # sum에 i 값을 누적\n#   i &lt;- i + 1 # i 값을 1 증가시킴\n#   print(c(sum,i))\n# }\n# print(sum)\n#---------------------------------------#\n\n\nsum &lt;- 0\nfor (i in 1:10) {\n    sum &lt;- sum + i\n    print(c(sum, i))\n    if (i &gt;= 5)\n        break\n}\n## [1] 1 1\n## [1] 3 2\n## [1] 6 3\n## [1] 10  4\n## [1] 15  5\nsum\n## [1] 15\n\n\nsum &lt;- 0\nfor (i in 1:10) {\n    if (i %% 2 == 0)\n        next # %% = 나머지\n    sum &lt;- sum + i\n    print(c(sum, i))\n}\n## [1] 1 1\n## [1] 4 3\n## [1] 9 5\n## [1] 16  7\n## [1] 25  9\nsum\n## [1] 25\n\n\napply(iris[, 1:4], 1, mean) # row 방향으로 함수 적용\n##   [1] 2.550 2.375 2.350 2.350 2.550 2.850 2.425 2.525 2.225 2.400 2.700 2.500\n##  [13] 2.325 2.125 2.800 3.000 2.750 2.575 2.875 2.675 2.675 2.675 2.350 2.650\n##  [25] 2.575 2.450 2.600 2.600 2.550 2.425 2.425 2.675 2.725 2.825 2.425 2.400\n##  [37] 2.625 2.500 2.225 2.550 2.525 2.100 2.275 2.675 2.800 2.375 2.675 2.350\n##  [49] 2.675 2.475 4.075 3.900 4.100 3.275 3.850 3.575 3.975 2.900 3.850 3.300\n##  [61] 2.875 3.650 3.300 3.775 3.350 3.900 3.650 3.400 3.600 3.275 3.925 3.550\n##  [73] 3.800 3.700 3.725 3.850 3.950 4.100 3.725 3.200 3.200 3.150 3.400 3.850\n##  [85] 3.600 3.875 4.000 3.575 3.500 3.325 3.425 3.775 3.400 2.900 3.450 3.525\n##  [97] 3.525 3.675 2.925 3.475 4.525 3.875 4.525 4.150 4.375 4.825 3.400 4.575\n## [109] 4.200 4.850 4.200 4.075 4.350 3.800 4.025 4.300 4.200 5.100 4.875 3.675\n## [121] 4.525 3.825 4.800 3.925 4.450 4.550 3.900 3.950 4.225 4.400 4.550 5.025\n## [133] 4.250 3.925 3.925 4.775 4.425 4.200 3.900 4.375 4.450 4.350 3.875 4.550\n## [145] 4.550 4.300 3.925 4.175 4.325 3.950\napply(iris[, 1:4], 2, mean) # col 방향으로 함수 적용\n## Sepal.Length  Sepal.Width Petal.Length  Petal.Width \n##     5.843333     3.057333     3.758000     1.199333\n\nresult &lt;- c()\nfor (i in 1:4) {\n    iris_col &lt;- iris[, i]\n    iris_col_mean_temp &lt;- mean(iris_col)\n    result &lt;- c(result, iris_col_mean_temp)\n}\nresult\n## [1] 5.843333 3.057333 3.758000 1.199333\n\n\nmymax &lt;- function(x, y) {\n    num.max &lt;- x\n    if (y &gt; x) {\n        num.max &lt;- y\n    }\n    return(num.max)\n}\n\n\nmymax(10, 15)\n## [1] 15\na &lt;- mymax(20, 15)\nb &lt;- mymax(31, 45)\nprint(a + b)\n## [1] 65\n\n\nmydiv &lt;- function(x, y = 2) {\n    result &lt;- x / y\n    return(result)\n}\n\nmydiv(x = 10, y = 3) # 매개변수 이름과 매개변수값을 쌍으로 입력\n## [1] 3.333333\nmydiv(10, 3) # 매개변수값만 입력\n## [1] 3.333333\nmydiv(10) # x에 대한 값만 입력(y 값이 생략됨)\n## [1] 5\n\n\nmyfunc &lt;- function(x, y) {\n    val.sum &lt;- x + y\n    val.mul &lt;- x * y\n    return(list(sum = val.sum, mul = val.mul))\n}\n\nresult &lt;- myfunc(5, 8)\nresult\n## $sum\n## [1] 13\n## \n## $mul\n## [1] 40\ns &lt;- result$sum # 5, 8의 합\nm &lt;- result$mul # 5, 8의 곱\ncat('5+8=', s, '\\n')\n## 5+8= 13\ncat('5*8=', m, '\\n')\n## 5*8= 40\n\n\ngetwd()\n## [1] \"D:/Study-Blog\"\n# source(\"myfunc.R\") # myfunc.R 안에 있는 함수 실행\n\na &lt;- mydiv(20, 4) # 함수 호출\nb &lt;- mydiv(30, 4) # 함수 호출\na + b\n## [1] 12.5\nmydiv(mydiv(20, 2), 5) # 함수 호출\n## [1] 2\n\n\nscore &lt;- c(76, 84, 69, 50, 95, 60, 82, 71, 88, 84)\nwhich(score == 69) # 성적이 69인 학생은 몇 번째에 있나\n## [1] 3\nwhich(score &gt;= 85) # 성적이 85 이상인 학생은 몇 번째에 있나\n## [1] 5 9\n\nmax(score) # 최고 점수는 몇 점인가\n## [1] 95\nwhich.max(score) # 최고 점수는 몇 번째에 있나\n## [1] 5\nscore[which.max(score)] # 최고 점수는 몇 점인가\n## [1] 95\n\nmin(score) # 최저 점수는 몇 점인가\n## [1] 50\nwhich.min(score) # 최저 점수는 몇 번째에 있나\n## [1] 4\nscore[which.min(score)] # 최저 점수는 몇 점인가\n## [1] 50\n\n\nscore &lt;- c(76, 84, 69, 50, 95, 60, 82, 71, 88, 84)\nidx &lt;- which(score &lt;= 60) # 성적이 60 이하인 값들의 인덱스\nidx\n## [1] 4 6\nscore[idx]\n## [1] 50 60\nscore[idx] &lt;- 61 # 성적이 60 이하인 값들은 61점으로 성적 상향 조정\nscore # 상향 조정된 성적 확인\n##  [1] 76 84 69 61 95 61 82 71 88 84\n\nidx &lt;- which(score &gt;= 80) # 성적이 80 이상인 값들의 인덱스\nidx\n## [1]  2  5  7  9 10\nscore[idx]\n## [1] 84 95 82 88 84\nscore.high &lt;- score[idx] # 성적이 80 이상인 값들만 추출하여 저장\nscore.high # score.high의 내용 확인\n## [1] 84 95 82 88 84\n\n\niris\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 1            5.1         3.5          1.4         0.2     setosa\n## 2            4.9         3.0          1.4         0.2     setosa\n## 3            4.7         3.2          1.3         0.2     setosa\n## 4            4.6         3.1          1.5         0.2     setosa\n## 5            5.0         3.6          1.4         0.2     setosa\n## 6            5.4         3.9          1.7         0.4     setosa\n## 7            4.6         3.4          1.4         0.3     setosa\n## 8            5.0         3.4          1.5         0.2     setosa\n## 9            4.4         2.9          1.4         0.2     setosa\n## 10           4.9         3.1          1.5         0.1     setosa\n## 11           5.4         3.7          1.5         0.2     setosa\n## 12           4.8         3.4          1.6         0.2     setosa\n## 13           4.8         3.0          1.4         0.1     setosa\n## 14           4.3         3.0          1.1         0.1     setosa\n## 15           5.8         4.0          1.2         0.2     setosa\n## 16           5.7         4.4          1.5         0.4     setosa\n## 17           5.4         3.9          1.3         0.4     setosa\n## 18           5.1         3.5          1.4         0.3     setosa\n## 19           5.7         3.8          1.7         0.3     setosa\n## 20           5.1         3.8          1.5         0.3     setosa\n## 21           5.4         3.4          1.7         0.2     setosa\n## 22           5.1         3.7          1.5         0.4     setosa\n## 23           4.6         3.6          1.0         0.2     setosa\n## 24           5.1         3.3          1.7         0.5     setosa\n## 25           4.8         3.4          1.9         0.2     setosa\n## 26           5.0         3.0          1.6         0.2     setosa\n## 27           5.0         3.4          1.6         0.4     setosa\n## 28           5.2         3.5          1.5         0.2     setosa\n## 29           5.2         3.4          1.4         0.2     setosa\n## 30           4.7         3.2          1.6         0.2     setosa\n## 31           4.8         3.1          1.6         0.2     setosa\n## 32           5.4         3.4          1.5         0.4     setosa\n## 33           5.2         4.1          1.5         0.1     setosa\n## 34           5.5         4.2          1.4         0.2     setosa\n## 35           4.9         3.1          1.5         0.2     setosa\n## 36           5.0         3.2          1.2         0.2     setosa\n## 37           5.5         3.5          1.3         0.2     setosa\n## 38           4.9         3.6          1.4         0.1     setosa\n## 39           4.4         3.0          1.3         0.2     setosa\n## 40           5.1         3.4          1.5         0.2     setosa\n## 41           5.0         3.5          1.3         0.3     setosa\n## 42           4.5         2.3          1.3         0.3     setosa\n## 43           4.4         3.2          1.3         0.2     setosa\n## 44           5.0         3.5          1.6         0.6     setosa\n## 45           5.1         3.8          1.9         0.4     setosa\n## 46           4.8         3.0          1.4         0.3     setosa\n## 47           5.1         3.8          1.6         0.2     setosa\n## 48           4.6         3.2          1.4         0.2     setosa\n## 49           5.3         3.7          1.5         0.2     setosa\n## 50           5.0         3.3          1.4         0.2     setosa\n## 51           7.0         3.2          4.7         1.4 versicolor\n## 52           6.4         3.2          4.5         1.5 versicolor\n## 53           6.9         3.1          4.9         1.5 versicolor\n## 54           5.5         2.3          4.0         1.3 versicolor\n## 55           6.5         2.8          4.6         1.5 versicolor\n## 56           5.7         2.8          4.5         1.3 versicolor\n## 57           6.3         3.3          4.7         1.6 versicolor\n## 58           4.9         2.4          3.3         1.0 versicolor\n## 59           6.6         2.9          4.6         1.3 versicolor\n## 60           5.2         2.7          3.9         1.4 versicolor\n## 61           5.0         2.0          3.5         1.0 versicolor\n## 62           5.9         3.0          4.2         1.5 versicolor\n## 63           6.0         2.2          4.0         1.0 versicolor\n## 64           6.1         2.9          4.7         1.4 versicolor\n## 65           5.6         2.9          3.6         1.3 versicolor\n## 66           6.7         3.1          4.4         1.4 versicolor\n## 67           5.6         3.0          4.5         1.5 versicolor\n## 68           5.8         2.7          4.1         1.0 versicolor\n## 69           6.2         2.2          4.5         1.5 versicolor\n## 70           5.6         2.5          3.9         1.1 versicolor\n## 71           5.9         3.2          4.8         1.8 versicolor\n## 72           6.1         2.8          4.0         1.3 versicolor\n## 73           6.3         2.5          4.9         1.5 versicolor\n## 74           6.1         2.8          4.7         1.2 versicolor\n## 75           6.4         2.9          4.3         1.3 versicolor\n## 76           6.6         3.0          4.4         1.4 versicolor\n## 77           6.8         2.8          4.8         1.4 versicolor\n## 78           6.7         3.0          5.0         1.7 versicolor\n## 79           6.0         2.9          4.5         1.5 versicolor\n## 80           5.7         2.6          3.5         1.0 versicolor\n## 81           5.5         2.4          3.8         1.1 versicolor\n## 82           5.5         2.4          3.7         1.0 versicolor\n## 83           5.8         2.7          3.9         1.2 versicolor\n## 84           6.0         2.7          5.1         1.6 versicolor\n## 85           5.4         3.0          4.5         1.5 versicolor\n## 86           6.0         3.4          4.5         1.6 versicolor\n## 87           6.7         3.1          4.7         1.5 versicolor\n## 88           6.3         2.3          4.4         1.3 versicolor\n## 89           5.6         3.0          4.1         1.3 versicolor\n## 90           5.5         2.5          4.0         1.3 versicolor\n## 91           5.5         2.6          4.4         1.2 versicolor\n## 92           6.1         3.0          4.6         1.4 versicolor\n## 93           5.8         2.6          4.0         1.2 versicolor\n## 94           5.0         2.3          3.3         1.0 versicolor\n## 95           5.6         2.7          4.2         1.3 versicolor\n## 96           5.7         3.0          4.2         1.2 versicolor\n## 97           5.7         2.9          4.2         1.3 versicolor\n## 98           6.2         2.9          4.3         1.3 versicolor\n## 99           5.1         2.5          3.0         1.1 versicolor\n## 100          5.7         2.8          4.1         1.3 versicolor\n## 101          6.3         3.3          6.0         2.5  virginica\n## 102          5.8         2.7          5.1         1.9  virginica\n## 103          7.1         3.0          5.9         2.1  virginica\n## 104          6.3         2.9          5.6         1.8  virginica\n## 105          6.5         3.0          5.8         2.2  virginica\n## 106          7.6         3.0          6.6         2.1  virginica\n## 107          4.9         2.5          4.5         1.7  virginica\n## 108          7.3         2.9          6.3         1.8  virginica\n## 109          6.7         2.5          5.8         1.8  virginica\n## 110          7.2         3.6          6.1         2.5  virginica\n## 111          6.5         3.2          5.1         2.0  virginica\n## 112          6.4         2.7          5.3         1.9  virginica\n## 113          6.8         3.0          5.5         2.1  virginica\n## 114          5.7         2.5          5.0         2.0  virginica\n## 115          5.8         2.8          5.1         2.4  virginica\n## 116          6.4         3.2          5.3         2.3  virginica\n## 117          6.5         3.0          5.5         1.8  virginica\n## 118          7.7         3.8          6.7         2.2  virginica\n## 119          7.7         2.6          6.9         2.3  virginica\n## 120          6.0         2.2          5.0         1.5  virginica\n## 121          6.9         3.2          5.7         2.3  virginica\n## 122          5.6         2.8          4.9         2.0  virginica\n## 123          7.7         2.8          6.7         2.0  virginica\n## 124          6.3         2.7          4.9         1.8  virginica\n## 125          6.7         3.3          5.7         2.1  virginica\n## 126          7.2         3.2          6.0         1.8  virginica\n## 127          6.2         2.8          4.8         1.8  virginica\n## 128          6.1         3.0          4.9         1.8  virginica\n## 129          6.4         2.8          5.6         2.1  virginica\n## 130          7.2         3.0          5.8         1.6  virginica\n## 131          7.4         2.8          6.1         1.9  virginica\n## 132          7.9         3.8          6.4         2.0  virginica\n## 133          6.4         2.8          5.6         2.2  virginica\n## 134          6.3         2.8          5.1         1.5  virginica\n## 135          6.1         2.6          5.6         1.4  virginica\n## 136          7.7         3.0          6.1         2.3  virginica\n## 137          6.3         3.4          5.6         2.4  virginica\n## 138          6.4         3.1          5.5         1.8  virginica\n## 139          6.0         3.0          4.8         1.8  virginica\n## 140          6.9         3.1          5.4         2.1  virginica\n## 141          6.7         3.1          5.6         2.4  virginica\n## 142          6.9         3.1          5.1         2.3  virginica\n## 143          5.8         2.7          5.1         1.9  virginica\n## 144          6.8         3.2          5.9         2.3  virginica\n## 145          6.7         3.3          5.7         2.5  virginica\n## 146          6.7         3.0          5.2         2.3  virginica\n## 147          6.3         2.5          5.0         1.9  virginica\n## 148          6.5         3.0          5.2         2.0  virginica\n## 149          6.2         3.4          5.4         2.3  virginica\n## 150          5.9         3.0          5.1         1.8  virginica\niris$Petal.Length\n##   [1] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 1.5 1.6 1.4 1.1 1.2 1.5 1.3 1.4\n##  [19] 1.7 1.5 1.7 1.5 1.0 1.7 1.9 1.6 1.6 1.5 1.4 1.6 1.6 1.5 1.5 1.4 1.5 1.2\n##  [37] 1.3 1.4 1.3 1.5 1.3 1.3 1.3 1.6 1.9 1.4 1.6 1.4 1.5 1.4 4.7 4.5 4.9 4.0\n##  [55] 4.6 4.5 4.7 3.3 4.6 3.9 3.5 4.2 4.0 4.7 3.6 4.4 4.5 4.1 4.5 3.9 4.8 4.0\n##  [73] 4.9 4.7 4.3 4.4 4.8 5.0 4.5 3.5 3.8 3.7 3.9 5.1 4.5 4.5 4.7 4.4 4.1 4.0\n##  [91] 4.4 4.6 4.0 3.3 4.2 4.2 4.2 4.3 3.0 4.1 6.0 5.1 5.9 5.6 5.8 6.6 4.5 6.3\n## [109] 5.8 6.1 5.1 5.3 5.5 5.0 5.1 5.3 5.5 6.7 6.9 5.0 5.7 4.9 6.7 4.9 5.7 6.0\n## [127] 4.8 4.9 5.6 5.8 6.1 6.4 5.6 5.1 5.6 6.1 5.6 5.5 4.8 5.4 5.6 5.1 5.1 5.9\n## [145] 5.7 5.2 5.0 5.2 5.4 5.1\niris$Petal.Length &gt; 5.0\n##   [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [73] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE\n##  [85] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [97] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE\n## [109]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE\n## [121]  TRUE FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE\n## [133]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE\n## [145]  TRUE  TRUE FALSE  TRUE  TRUE  TRUE\nwhich(iris$Petal.Length &gt; 5.0)\n##  [1]  84 101 102 103 104 105 106 108 109 110 111 112 113 115 116 117 118 119 121\n## [20] 123 125 126 129 130 131 132 133 134 135 136 137 138 140 141 142 143 144 145\n## [39] 146 148 149 150\n\niris$Petal.Length[iris$Petal.Length &gt; 5.0]\n##  [1] 5.1 6.0 5.1 5.9 5.6 5.8 6.6 6.3 5.8 6.1 5.1 5.3 5.5 5.1 5.3 5.5 6.7 6.9 5.7\n## [20] 6.7 5.7 6.0 5.6 5.8 6.1 6.4 5.6 5.1 5.6 6.1 5.6 5.5 5.4 5.6 5.1 5.1 5.9 5.7\n## [39] 5.2 5.2 5.4 5.1\n\nidx &lt;- which(iris$Petal.Length &gt; 5.0) # 꽃잎의 길이가 5.0 이상인 값들의 인덱스\nidx\n##  [1]  84 101 102 103 104 105 106 108 109 110 111 112 113 115 116 117 118 119 121\n## [20] 123 125 126 129 130 131 132 133 134 135 136 137 138 140 141 142 143 144 145\n## [39] 146 148 149 150\niris.big &lt;- iris[idx, ] # 인덱스에 해당하는 값만 추출하여 저장\niris.big\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 84           6.0         2.7          5.1         1.6 versicolor\n## 101          6.3         3.3          6.0         2.5  virginica\n## 102          5.8         2.7          5.1         1.9  virginica\n## 103          7.1         3.0          5.9         2.1  virginica\n## 104          6.3         2.9          5.6         1.8  virginica\n## 105          6.5         3.0          5.8         2.2  virginica\n## 106          7.6         3.0          6.6         2.1  virginica\n## 108          7.3         2.9          6.3         1.8  virginica\n## 109          6.7         2.5          5.8         1.8  virginica\n## 110          7.2         3.6          6.1         2.5  virginica\n## 111          6.5         3.2          5.1         2.0  virginica\n## 112          6.4         2.7          5.3         1.9  virginica\n## 113          6.8         3.0          5.5         2.1  virginica\n## 115          5.8         2.8          5.1         2.4  virginica\n## 116          6.4         3.2          5.3         2.3  virginica\n## 117          6.5         3.0          5.5         1.8  virginica\n## 118          7.7         3.8          6.7         2.2  virginica\n## 119          7.7         2.6          6.9         2.3  virginica\n## 121          6.9         3.2          5.7         2.3  virginica\n## 123          7.7         2.8          6.7         2.0  virginica\n## 125          6.7         3.3          5.7         2.1  virginica\n## 126          7.2         3.2          6.0         1.8  virginica\n## 129          6.4         2.8          5.6         2.1  virginica\n## 130          7.2         3.0          5.8         1.6  virginica\n## 131          7.4         2.8          6.1         1.9  virginica\n## 132          7.9         3.8          6.4         2.0  virginica\n## 133          6.4         2.8          5.6         2.2  virginica\n## 134          6.3         2.8          5.1         1.5  virginica\n## 135          6.1         2.6          5.6         1.4  virginica\n## 136          7.7         3.0          6.1         2.3  virginica\n## 137          6.3         3.4          5.6         2.4  virginica\n## 138          6.4         3.1          5.5         1.8  virginica\n## 140          6.9         3.1          5.4         2.1  virginica\n## 141          6.7         3.1          5.6         2.4  virginica\n## 142          6.9         3.1          5.1         2.3  virginica\n## 143          5.8         2.7          5.1         1.9  virginica\n## 144          6.8         3.2          5.9         2.3  virginica\n## 145          6.7         3.3          5.7         2.5  virginica\n## 146          6.7         3.0          5.2         2.3  virginica\n## 148          6.5         3.0          5.2         2.0  virginica\n## 149          6.2         3.4          5.4         2.3  virginica\n## 150          5.9         3.0          5.1         1.8  virginica\n\n\n# 1~4열의 값 중 5보다 큰 값의 행과 열의 위치\nwhich(iris[, 1:4] &gt; 5.0)\n##   [1]   1   6  11  15  16  17  18  19  20  21  22  24  28  29  32  33  34  37\n##  [19]  40  45  47  49  51  52  53  54  55  56  57  59  60  62  63  64  65  66\n##  [37]  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84\n##  [55]  85  86  87  88  89  90  91  92  93  95  96  97  98  99 100 101 102 103\n##  [73] 104 105 106 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122\n##  [91] 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140\n## [109] 141 142 143 144 145 146 147 148 149 150 384 401 402 403 404 405 406 408\n## [127] 409 410 411 412 413 415 416 417 418 419 421 423 425 426 429 430 431 432\n## [145] 433 434 435 436 437 438 440 441 442 443 444 445 446 448 449 450\nwhich(iris[, 1:4] &gt; 5.0, arr.ind = TRUE) # arr.ind = TRUE : 조건에 맞는 인덱스까지 반환\n##        row col\n##   [1,]   1   1\n##   [2,]   6   1\n##   [3,]  11   1\n##   [4,]  15   1\n##   [5,]  16   1\n##   [6,]  17   1\n##   [7,]  18   1\n##   [8,]  19   1\n##   [9,]  20   1\n##  [10,]  21   1\n##  [11,]  22   1\n##  [12,]  24   1\n##  [13,]  28   1\n##  [14,]  29   1\n##  [15,]  32   1\n##  [16,]  33   1\n##  [17,]  34   1\n##  [18,]  37   1\n##  [19,]  40   1\n##  [20,]  45   1\n##  [21,]  47   1\n##  [22,]  49   1\n##  [23,]  51   1\n##  [24,]  52   1\n##  [25,]  53   1\n##  [26,]  54   1\n##  [27,]  55   1\n##  [28,]  56   1\n##  [29,]  57   1\n##  [30,]  59   1\n##  [31,]  60   1\n##  [32,]  62   1\n##  [33,]  63   1\n##  [34,]  64   1\n##  [35,]  65   1\n##  [36,]  66   1\n##  [37,]  67   1\n##  [38,]  68   1\n##  [39,]  69   1\n##  [40,]  70   1\n##  [41,]  71   1\n##  [42,]  72   1\n##  [43,]  73   1\n##  [44,]  74   1\n##  [45,]  75   1\n##  [46,]  76   1\n##  [47,]  77   1\n##  [48,]  78   1\n##  [49,]  79   1\n##  [50,]  80   1\n##  [51,]  81   1\n##  [52,]  82   1\n##  [53,]  83   1\n##  [54,]  84   1\n##  [55,]  85   1\n##  [56,]  86   1\n##  [57,]  87   1\n##  [58,]  88   1\n##  [59,]  89   1\n##  [60,]  90   1\n##  [61,]  91   1\n##  [62,]  92   1\n##  [63,]  93   1\n##  [64,]  95   1\n##  [65,]  96   1\n##  [66,]  97   1\n##  [67,]  98   1\n##  [68,]  99   1\n##  [69,] 100   1\n##  [70,] 101   1\n##  [71,] 102   1\n##  [72,] 103   1\n##  [73,] 104   1\n##  [74,] 105   1\n##  [75,] 106   1\n##  [76,] 108   1\n##  [77,] 109   1\n##  [78,] 110   1\n##  [79,] 111   1\n##  [80,] 112   1\n##  [81,] 113   1\n##  [82,] 114   1\n##  [83,] 115   1\n##  [84,] 116   1\n##  [85,] 117   1\n##  [86,] 118   1\n##  [87,] 119   1\n##  [88,] 120   1\n##  [89,] 121   1\n##  [90,] 122   1\n##  [91,] 123   1\n##  [92,] 124   1\n##  [93,] 125   1\n##  [94,] 126   1\n##  [95,] 127   1\n##  [96,] 128   1\n##  [97,] 129   1\n##  [98,] 130   1\n##  [99,] 131   1\n## [100,] 132   1\n## [101,] 133   1\n## [102,] 134   1\n## [103,] 135   1\n## [104,] 136   1\n## [105,] 137   1\n## [106,] 138   1\n## [107,] 139   1\n## [108,] 140   1\n## [109,] 141   1\n## [110,] 142   1\n## [111,] 143   1\n## [112,] 144   1\n## [113,] 145   1\n## [114,] 146   1\n## [115,] 147   1\n## [116,] 148   1\n## [117,] 149   1\n## [118,] 150   1\n## [119,]  84   3\n## [120,] 101   3\n## [121,] 102   3\n## [122,] 103   3\n## [123,] 104   3\n## [124,] 105   3\n## [125,] 106   3\n## [126,] 108   3\n## [127,] 109   3\n## [128,] 110   3\n## [129,] 111   3\n## [130,] 112   3\n## [131,] 113   3\n## [132,] 115   3\n## [133,] 116   3\n## [134,] 117   3\n## [135,] 118   3\n## [136,] 119   3\n## [137,] 121   3\n## [138,] 123   3\n## [139,] 125   3\n## [140,] 126   3\n## [141,] 129   3\n## [142,] 130   3\n## [143,] 131   3\n## [144,] 132   3\n## [145,] 133   3\n## [146,] 134   3\n## [147,] 135   3\n## [148,] 136   3\n## [149,] 137   3\n## [150,] 138   3\n## [151,] 140   3\n## [152,] 141   3\n## [153,] 142   3\n## [154,] 143   3\n## [155,] 144   3\n## [156,] 145   3\n## [157,] 146   3\n## [158,] 148   3\n## [159,] 149   3\n## [160,] 150   3\n\nidx &lt;- which(iris[, 1:4] &gt; 5.0, arr.ind = TRUE)\niris[idx[, 1], ]\n##       Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 1              5.1         3.5          1.4         0.2     setosa\n## 6              5.4         3.9          1.7         0.4     setosa\n## 11             5.4         3.7          1.5         0.2     setosa\n## 15             5.8         4.0          1.2         0.2     setosa\n## 16             5.7         4.4          1.5         0.4     setosa\n## 17             5.4         3.9          1.3         0.4     setosa\n## 18             5.1         3.5          1.4         0.3     setosa\n## 19             5.7         3.8          1.7         0.3     setosa\n## 20             5.1         3.8          1.5         0.3     setosa\n## 21             5.4         3.4          1.7         0.2     setosa\n## 22             5.1         3.7          1.5         0.4     setosa\n## 24             5.1         3.3          1.7         0.5     setosa\n## 28             5.2         3.5          1.5         0.2     setosa\n## 29             5.2         3.4          1.4         0.2     setosa\n## 32             5.4         3.4          1.5         0.4     setosa\n## 33             5.2         4.1          1.5         0.1     setosa\n## 34             5.5         4.2          1.4         0.2     setosa\n## 37             5.5         3.5          1.3         0.2     setosa\n## 40             5.1         3.4          1.5         0.2     setosa\n## 45             5.1         3.8          1.9         0.4     setosa\n## 47             5.1         3.8          1.6         0.2     setosa\n## 49             5.3         3.7          1.5         0.2     setosa\n## 51             7.0         3.2          4.7         1.4 versicolor\n## 52             6.4         3.2          4.5         1.5 versicolor\n## 53             6.9         3.1          4.9         1.5 versicolor\n## 54             5.5         2.3          4.0         1.3 versicolor\n## 55             6.5         2.8          4.6         1.5 versicolor\n## 56             5.7         2.8          4.5         1.3 versicolor\n## 57             6.3         3.3          4.7         1.6 versicolor\n## 59             6.6         2.9          4.6         1.3 versicolor\n## 60             5.2         2.7          3.9         1.4 versicolor\n## 62             5.9         3.0          4.2         1.5 versicolor\n## 63             6.0         2.2          4.0         1.0 versicolor\n## 64             6.1         2.9          4.7         1.4 versicolor\n## 65             5.6         2.9          3.6         1.3 versicolor\n## 66             6.7         3.1          4.4         1.4 versicolor\n## 67             5.6         3.0          4.5         1.5 versicolor\n## 68             5.8         2.7          4.1         1.0 versicolor\n## 69             6.2         2.2          4.5         1.5 versicolor\n## 70             5.6         2.5          3.9         1.1 versicolor\n## 71             5.9         3.2          4.8         1.8 versicolor\n## 72             6.1         2.8          4.0         1.3 versicolor\n## 73             6.3         2.5          4.9         1.5 versicolor\n## 74             6.1         2.8          4.7         1.2 versicolor\n## 75             6.4         2.9          4.3         1.3 versicolor\n## 76             6.6         3.0          4.4         1.4 versicolor\n## 77             6.8         2.8          4.8         1.4 versicolor\n## 78             6.7         3.0          5.0         1.7 versicolor\n## 79             6.0         2.9          4.5         1.5 versicolor\n## 80             5.7         2.6          3.5         1.0 versicolor\n## 81             5.5         2.4          3.8         1.1 versicolor\n## 82             5.5         2.4          3.7         1.0 versicolor\n## 83             5.8         2.7          3.9         1.2 versicolor\n## 84             6.0         2.7          5.1         1.6 versicolor\n## 85             5.4         3.0          4.5         1.5 versicolor\n## 86             6.0         3.4          4.5         1.6 versicolor\n## 87             6.7         3.1          4.7         1.5 versicolor\n## 88             6.3         2.3          4.4         1.3 versicolor\n## 89             5.6         3.0          4.1         1.3 versicolor\n## 90             5.5         2.5          4.0         1.3 versicolor\n## 91             5.5         2.6          4.4         1.2 versicolor\n## 92             6.1         3.0          4.6         1.4 versicolor\n## 93             5.8         2.6          4.0         1.2 versicolor\n## 95             5.6         2.7          4.2         1.3 versicolor\n## 96             5.7         3.0          4.2         1.2 versicolor\n## 97             5.7         2.9          4.2         1.3 versicolor\n## 98             6.2         2.9          4.3         1.3 versicolor\n## 99             5.1         2.5          3.0         1.1 versicolor\n## 100            5.7         2.8          4.1         1.3 versicolor\n## 101            6.3         3.3          6.0         2.5  virginica\n## 102            5.8         2.7          5.1         1.9  virginica\n## 103            7.1         3.0          5.9         2.1  virginica\n## 104            6.3         2.9          5.6         1.8  virginica\n## 105            6.5         3.0          5.8         2.2  virginica\n## 106            7.6         3.0          6.6         2.1  virginica\n## 108            7.3         2.9          6.3         1.8  virginica\n## 109            6.7         2.5          5.8         1.8  virginica\n## 110            7.2         3.6          6.1         2.5  virginica\n## 111            6.5         3.2          5.1         2.0  virginica\n## 112            6.4         2.7          5.3         1.9  virginica\n## 113            6.8         3.0          5.5         2.1  virginica\n## 114            5.7         2.5          5.0         2.0  virginica\n## 115            5.8         2.8          5.1         2.4  virginica\n## 116            6.4         3.2          5.3         2.3  virginica\n## 117            6.5         3.0          5.5         1.8  virginica\n## 118            7.7         3.8          6.7         2.2  virginica\n## 119            7.7         2.6          6.9         2.3  virginica\n## 120            6.0         2.2          5.0         1.5  virginica\n## 121            6.9         3.2          5.7         2.3  virginica\n## 122            5.6         2.8          4.9         2.0  virginica\n## 123            7.7         2.8          6.7         2.0  virginica\n## 124            6.3         2.7          4.9         1.8  virginica\n## 125            6.7         3.3          5.7         2.1  virginica\n## 126            7.2         3.2          6.0         1.8  virginica\n## 127            6.2         2.8          4.8         1.8  virginica\n## 128            6.1         3.0          4.9         1.8  virginica\n## 129            6.4         2.8          5.6         2.1  virginica\n## 130            7.2         3.0          5.8         1.6  virginica\n## 131            7.4         2.8          6.1         1.9  virginica\n## 132            7.9         3.8          6.4         2.0  virginica\n## 133            6.4         2.8          5.6         2.2  virginica\n## 134            6.3         2.8          5.1         1.5  virginica\n## 135            6.1         2.6          5.6         1.4  virginica\n## 136            7.7         3.0          6.1         2.3  virginica\n## 137            6.3         3.4          5.6         2.4  virginica\n## 138            6.4         3.1          5.5         1.8  virginica\n## 139            6.0         3.0          4.8         1.8  virginica\n## 140            6.9         3.1          5.4         2.1  virginica\n## 141            6.7         3.1          5.6         2.4  virginica\n## 142            6.9         3.1          5.1         2.3  virginica\n## 143            5.8         2.7          5.1         1.9  virginica\n## 144            6.8         3.2          5.9         2.3  virginica\n## 145            6.7         3.3          5.7         2.5  virginica\n## 146            6.7         3.0          5.2         2.3  virginica\n## 147            6.3         2.5          5.0         1.9  virginica\n## 148            6.5         3.0          5.2         2.0  virginica\n## 149            6.2         3.4          5.4         2.3  virginica\n## 150            5.9         3.0          5.1         1.8  virginica\n## 84.1           6.0         2.7          5.1         1.6 versicolor\n## 101.1          6.3         3.3          6.0         2.5  virginica\n## 102.1          5.8         2.7          5.1         1.9  virginica\n## 103.1          7.1         3.0          5.9         2.1  virginica\n## 104.1          6.3         2.9          5.6         1.8  virginica\n## 105.1          6.5         3.0          5.8         2.2  virginica\n## 106.1          7.6         3.0          6.6         2.1  virginica\n## 108.1          7.3         2.9          6.3         1.8  virginica\n## 109.1          6.7         2.5          5.8         1.8  virginica\n## 110.1          7.2         3.6          6.1         2.5  virginica\n## 111.1          6.5         3.2          5.1         2.0  virginica\n## 112.1          6.4         2.7          5.3         1.9  virginica\n## 113.1          6.8         3.0          5.5         2.1  virginica\n## 115.1          5.8         2.8          5.1         2.4  virginica\n## 116.1          6.4         3.2          5.3         2.3  virginica\n## 117.1          6.5         3.0          5.5         1.8  virginica\n## 118.1          7.7         3.8          6.7         2.2  virginica\n## 119.1          7.7         2.6          6.9         2.3  virginica\n## 121.1          6.9         3.2          5.7         2.3  virginica\n## 123.1          7.7         2.8          6.7         2.0  virginica\n## 125.1          6.7         3.3          5.7         2.1  virginica\n## 126.1          7.2         3.2          6.0         1.8  virginica\n## 129.1          6.4         2.8          5.6         2.1  virginica\n## 130.1          7.2         3.0          5.8         1.6  virginica\n## 131.1          7.4         2.8          6.1         1.9  virginica\n## 132.1          7.9         3.8          6.4         2.0  virginica\n## 133.1          6.4         2.8          5.6         2.2  virginica\n## 134.1          6.3         2.8          5.1         1.5  virginica\n## 135.1          6.1         2.6          5.6         1.4  virginica\n## 136.1          7.7         3.0          6.1         2.3  virginica\n## 137.1          6.3         3.4          5.6         2.4  virginica\n## 138.1          6.4         3.1          5.5         1.8  virginica\n## 140.1          6.9         3.1          5.4         2.1  virginica\n## 141.1          6.7         3.1          5.6         2.4  virginica\n## 142.1          6.9         3.1          5.1         2.3  virginica\n## 143.1          5.8         2.7          5.1         1.9  virginica\n## 144.1          6.8         3.2          5.9         2.3  virginica\n## 145.1          6.7         3.3          5.7         2.5  virginica\n## 146.1          6.7         3.0          5.2         2.3  virginica\n## 148.1          6.5         3.0          5.2         2.0  virginica\n## 149.1          6.2         3.4          5.4         2.3  virginica\n## 150.1          5.9         3.0          5.1         1.8  virginica\n\niris[, 1:4][idx]\n##   [1] 5.1 5.4 5.4 5.8 5.7 5.4 5.1 5.7 5.1 5.4 5.1 5.1 5.2 5.2 5.4 5.2 5.5 5.5\n##  [19] 5.1 5.1 5.1 5.3 7.0 6.4 6.9 5.5 6.5 5.7 6.3 6.6 5.2 5.9 6.0 6.1 5.6 6.7\n##  [37] 5.6 5.8 6.2 5.6 5.9 6.1 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0\n##  [55] 5.4 6.0 6.7 6.3 5.6 5.5 5.5 6.1 5.8 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1\n##  [73] 6.3 6.5 7.6 7.3 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6\n##  [91] 7.7 6.3 6.7 7.2 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9\n## [109] 6.7 6.9 5.8 6.8 6.7 6.7 6.3 6.5 6.2 5.9 5.1 6.0 5.1 5.9 5.6 5.8 6.6 6.3\n## [127] 5.8 6.1 5.1 5.3 5.5 5.1 5.3 5.5 6.7 6.9 5.7 6.7 5.7 6.0 5.6 5.8 6.1 6.4\n## [145] 5.6 5.1 5.6 6.1 5.6 5.5 5.4 5.6 5.1 5.1 5.9 5.7 5.2 5.2 5.4 5.1"
  },
  {
    "objectID": "R_Basic.html#장.-단일변수-자료의-탐색",
    "href": "R_Basic.html#장.-단일변수-자료의-탐색",
    "title": "R Basic",
    "section": "",
    "text": "favorite &lt;- c('WINTER', 'SUMMER', 'SPRING', 'SUMMER', 'SUMMER',\n              'FALL', 'FALL', 'SUMMER', 'SPRING', 'SPRING')\nfavorite # favorite의 내용 출력\n##  [1] \"WINTER\" \"SUMMER\" \"SPRING\" \"SUMMER\" \"SUMMER\" \"FALL\"   \"FALL\"   \"SUMMER\"\n##  [9] \"SPRING\" \"SPRING\"\ntable(favorite) # 도수분포표 계산\n## favorite\n##   FALL SPRING SUMMER WINTER \n##      2      3      4      1\nlength(favorite)\n## [1] 10\ntable(favorite) / length(favorite) # 비율 출력\n## favorite\n##   FALL SPRING SUMMER WINTER \n##    0.2    0.3    0.4    0.1\n\n\nds &lt;- table(favorite)\nds\n## favorite\n##   FALL SPRING SUMMER WINTER \n##      2      3      4      1\nbarplot(ds, main = 'favorite season')\n\n\n\n\n\nds &lt;- table(favorite)\nds\n## favorite\n##   FALL SPRING SUMMER WINTER \n##      2      3      4      1\npie(ds, main = 'favorite season')\n\n\n\n\n\nfavorite.color &lt;- c(2, 3, 2, 1, 1, 2, 2, 1, 3, 2, 1, 3, 2, 1, 2)\nds &lt;- table(favorite.color)\nds\n## favorite.color\n## 1 2 3 \n## 5 7 3\nbarplot(ds, main = 'favorite color')\n\n\n\ncolors &lt;- c('green', 'red', 'blue')\nnames(ds) &lt;- colors # 자료값 1, 2, 3을 green, red, blue로 변경\nds\n## green   red  blue \n##     5     7     3\nbarplot(ds, main = 'favorite color', col = colors) # 색 지정 막대그래프\n\n\n\nbarplot(ds, main = 'favorite color', col = c('green', 'red', 'blue'))\npie(ds, main = 'favorite color', col = colors) # 색 지정 원그래프\n\n\n\n\n\nweight &lt;- c(60, 62, 64, 65, 68, 69)\nweight.heavy &lt;- c(weight, 120)\nweight\n## [1] 60 62 64 65 68 69\nweight.heavy\n## [1]  60  62  64  65  68  69 120\n\nmean(weight) # 평균\n## [1] 64.66667\nmean(weight.heavy) # 평균\n## [1] 72.57143\n\nmedian(weight) # 중앙값\n## [1] 64.5\nmedian(weight.heavy) # 중앙값\n## [1] 65\n\nmean(weight, trim = 0.2) # 절사평균(상하위 20% 제외)\n## [1] 64.75\nmean(weight.heavy, trim = 0.2) # 절사평균(상하위 20% 제외)\n## [1] 65.6\n\n\nmydata &lt;- c(60, 62, 64, 65, 68, 69, 120)\nquantile(mydata)\n##    0%   25%   50%   75%  100% \n##  60.0  63.0  65.0  68.5 120.0\nquantile(mydata, (0:10) / 10) # 10% 단위로 구간을 나누어 계산\n##    0%   10%   20%   30%   40%   50%   60%   70%   80%   90%  100% \n##  60.0  61.2  62.4  63.6  64.4  65.0  66.8  68.2  68.8  89.4 120.0\nsummary(mydata) # 최소값, 중앙값, 평균값, 3분위 값, 최대값\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##   60.00   63.00   65.00   72.57   68.50  120.00\n\nmydata &lt;- 0:1000\nquantile(mydata)\n##   0%  25%  50%  75% 100% \n##    0  250  500  750 1000\nquantile(mydata, (0:10) / 10)\n##   0%  10%  20%  30%  40%  50%  60%  70%  80%  90% 100% \n##    0  100  200  300  400  500  600  700  800  900 1000\nsummary(mydata)\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##       0     250     500     500     750    1000\n?quantile\n## httpd 도움말 서버를 시작합니다 ... 완료\n\n\nmydata &lt;- c(60, 62, 64, 65, 68, 69, 120)\nvar(mydata) # 분산\n## [1] 447.2857\nsd(mydata) # 표준편차\n## [1] 21.14913\nrange(mydata) # 값의 범위\n## [1]  60 120\ndiff(range(mydata)) # 최대값, 최소값의 차이\n## [1] 60\n\n\ndist &lt;- cars[, 2] # 자동차 제동거리\nhist(dist,                            # 자료(data)\n     main = \"Histogram for 제동거리\", # 제목\n     xlab = \"제동거리\",               # x축 레이블\n     ylab = \"빈도수\",                 # y축 레이블\n     border = \"blue\",                 # 막대 테두리색\n     col = rainbow(10),               # 막대 색\n     las = 2,                         # x축 글씨 방향(0~3)\n     breaks = seq(0, 120, 10))        # 막대 개수 조절\n\n\n\n\n\ndist &lt;- cars[,2] # 자동차 제동거리(단위: 피트(ft))\nboxplot(dist, main = \"자동차 제동거리\") # ★★★★★\n\n\n\n\n\nboxplot.stats(dist)\n## $stats\n## [1]  2 26 36 56 93\n## \n## $n\n## [1] 50\n## \n## $conf\n## [1] 29.29663 42.70337\n## \n## $out\n## [1] 120\nboxplot.stats(dist)$stats\n## [1]  2 26 36 56 93\nboxplot.stats(dist)$stats[4]\n## [1] 56\n\n\nboxplot(Petal.Length ~ Species, data = iris, main = \"품종별 꽃잎의 길이\")\n\n\n\n\npar(mfrow = c(1, 3)) # 1*3 가상화면 분할\n\nbarplot(\n    table(mtcars$carb),\n    main = \"Barplot of Carburetors\",\n    xlab = \"#of carburetors\",\n    ylab = \"frequency\",\n    col = \"blue\"\n)\n\nbarplot(\n    table(mtcars$cyl),\n    main = \"Barplot of Cylender\",\n    xlab = \"#of cylender\",\n    ylab = \"frequency\",\n    col = \"red\"\n)\n\nbarplot(\n    table(mtcars$gear),\n    main = \"Barplot of Grar\",\n    xlab = \"#of gears\",\n    ylab = \"frequency\",\n    col = \"green\"\n)\n\n\n\n\npar(mfrow = c(1, 1)) # 가상화면 분할 해제"
  },
  {
    "objectID": "R_Basic.html#장.-다중변수-자료의-탐색",
    "href": "R_Basic.html#장.-다중변수-자료의-탐색",
    "title": "R Basic",
    "section": "",
    "text": "wt &lt;- mtcars$wt                 # 중량 자료\nmpg &lt;- mtcars$mpg               # 연비 자료\nplot(wt, mpg,                   # 2개 변수(x축, y축)\n     main = \"중량-연비 그래프\", # 제목\n     xlab = \"중량\",             # x축 레이블\n     ylab = \"연비(MPG)\",        # y축 레이블\n     col = \"red\",               # point의 color\n     pch = 11)                  # point의 종류\n\n\n\n\n\nvars &lt;- c(\"mpg\", \"disp\", \"drat\", \"wt\") # 대상 변수(연비, 배기량, 후방차측 비율, 중량)\ntarget &lt;- mtcars[, vars]\nhead(target)\n##                    mpg disp drat    wt\n## Mazda RX4         21.0  160 3.90 2.620\n## Mazda RX4 Wag     21.0  160 3.90 2.875\n## Datsun 710        22.8  108 3.85 2.320\n## Hornet 4 Drive    21.4  258 3.08 3.215\n## Hornet Sportabout 18.7  360 3.15 3.440\n## Valiant           18.1  225 2.76 3.460\npairs(target, main = \"Multi Plots\")    # 대상 데이터\n\n\n\n\n\niris.2 &lt;- iris[, 3:4]              # 데이터 준비\npoint &lt;- as.numeric(iris$Species)  # 점의 모양\npoint                              # point 내용 출력\n##   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n##  [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n##  [75] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3\n## [112] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n## [149] 3 3\ncolor &lt;- c(\"red\", \"green\", \"blue\") # 점의 컬러\nplot(iris.2,\n     main = \"Iris plot\",\n     pch = c(point),\n     col = color[point])\n\n\n\n\n\nbeers = c(5, 2, 9, 8, 3, 7, 3, 5, 3, 5) # 자료 입력\nbal &lt;- c(0.1, 0.03, 0.19, 0.12, 0.04, 0.0095, 0.07, 0.06, 0.02, 0.05)\ntbl &lt;- data.frame(beers, bal)           # 데이터프레임 생성\ntbl\n##    beers    bal\n## 1      5 0.1000\n## 2      2 0.0300\n## 3      9 0.1900\n## 4      8 0.1200\n## 5      3 0.0400\n## 6      7 0.0095\n## 7      3 0.0700\n## 8      5 0.0600\n## 9      3 0.0200\n## 10     5 0.0500\nplot(bal ~ beers, data = tbl)           # 산점도 plot(beers, bal)\nres &lt;- lm(bal ~ beers, data = tbl)      # 회귀식 도출\nabline(res)                             # 회귀선 그리기\n\n\n\ncor(beers, bal)                         # 상관계수 계산\n## [1] 0.6797025\n\n\ncor(iris[, 1:4]) # 4개 변수 간 상관성 분석\n##              Sepal.Length Sepal.Width Petal.Length Petal.Width\n## Sepal.Length    1.0000000  -0.1175698    0.8717538   0.8179411\n## Sepal.Width    -0.1175698   1.0000000   -0.4284401  -0.3661259\n## Petal.Length    0.8717538  -0.4284401    1.0000000   0.9628654\n## Petal.Width     0.8179411  -0.3661259    0.9628654   1.0000000\n\n\nmonth = 1:12 # 자료 입력\nlate = c(5, 8, 7, 9, 4, 6, 12, 13, 8, 6, 6, 4) # 자료 입력\nplot(month,                # x data\n     late,                 # y data\n     main = \"지각생 통계\", # 제목\n     type = \"l\",           # 그래프의 종류 선택(알파벳)\n     lty = 1,              # 선의 종류(line type) 선택\n     lwd = 1,              # 선의 굵기 선택\n     xlab = \"Month\",       # x축 레이블\n     ylab = \"Late cnt\")    # y축 레이블\n\n\n\n\n\nmonth = 1:12\nlate1 = c(5, 8, 7, 9, 4, 6, 12, 13, 8, 6, 6, 4)\nlate2 = c(4, 6, 5, 8, 7, 8, 10, 11, 6, 5, 7, 3)\nplot(month,                  # x data\n     late1,                  # y data\n     main = \"Late Students\",\n     type = \"b\",             # 그래프의 종류 선택(알파벳)\n     lty = 1,                # 선의 종류(line type) 선택\n     col = \"red\",            # 선의 색 선택\n     xlab = \"Month\",         # x축 레이블\n     ylab = \"Late cnt\",      # y축 레이블\n     ylim = c(1, 15))        # y축 값의 (하한, 상한)\n\nlines(month,                 # x data\n      late2,                 # y data\n      type = \"b\",            # 선의 종류(line type) 선택\n      col = \"blue\")          # 선의 색 선택\n\n\n\n\n\n## (1) 분석 대상 데이터셋 준비\n# install.packages(\"mlbench\")\nlibrary(mlbench)\ndata(\"BostonHousing\")\nmyds &lt;- BostonHousing[, c(\"crim\", \"rm\", \"dis\", \"tax\", \"medv\")]\n\n## (2) grp 변수 추가 ★★★★★\ngrp &lt;- c()\nfor (i in 1:nrow(myds)) {\n    # myds$medv 값에 따라 그룹 분류\n    if (myds$medv[i] &gt;= 25.0) {\n        grp[i] &lt;- \"H\"\n    } else if (myds$medv[i] &lt;= 17.0) {\n        grp[i] &lt;- \"L\"\n    } else {\n        grp[i] &lt;- \"M\"\n    }\n}\ngrp &lt;- factor(grp) # 문자 벡터를 팩터 타입으로 변경\ngrp &lt;- factor(grp, levels = c(\"H\", \"M\", \"L\")) # 레벨의 순서를 H, L, M -&gt; H, M, L\n\nmyds &lt;- data.frame(myds, grp) # myds에 grp 열 추가\n\n## (3) 데이터셋의 형태와 기본적인 내용 파악\nstr(myds)\n## 'data.frame':    506 obs. of  6 variables:\n##  $ crim: num  0.00632 0.02731 0.02729 0.03237 0.06905 ...\n##  $ rm  : num  6.58 6.42 7.18 7 7.15 ...\n##  $ dis : num  4.09 4.97 4.97 6.06 6.06 ...\n##  $ tax : num  296 242 242 222 222 222 311 311 311 311 ...\n##  $ medv: num  24 21.6 34.7 33.4 36.2 28.7 22.9 27.1 16.5 18.9 ...\n##  $ grp : Factor w/ 3 levels \"H\",\"M\",\"L\": 2 2 1 1 1 1 2 1 3 2 ...\nhead(myds)\n##      crim    rm    dis tax medv grp\n## 1 0.00632 6.575 4.0900 296 24.0   M\n## 2 0.02731 6.421 4.9671 242 21.6   M\n## 3 0.02729 7.185 4.9671 242 34.7   H\n## 4 0.03237 6.998 6.0622 222 33.4   H\n## 5 0.06905 7.147 6.0622 222 36.2   H\n## 6 0.02985 6.430 6.0622 222 28.7   H\ntable(myds$grp) # 주택 가격 그룹별 분포\n## \n##   H   M   L \n## 132 247 127\n\n## (4) 히스토그램에 의한 관측값의 분포 확인\npar(mfrow = c(2, 3)) # 2*3 가상화면 분할\nfor (i in 1:5) {\n    hist(myds[, i], main = colnames(myds)[i], col = \"yellow\")\n}\npar(mfrow = c(1, 1)) # 2*3 가상화면 분할 해제\n\n\n\n\n## (5) 상자그림에 의한 관측값의 분포 확인\npar(mfrow = c(2, 3)) # 2*3 가상화면 분할\nfor (i in 1:5) {\n    boxplot(myds[, i], main = colnames(myds)[i])\n}\npar(mfrow = c(1, 1)) # 2*3 가상화면 분할 해제\n\n\n\n\n## (6) 그룹별 관측값 분포의 확인\nboxplot(myds$crim ~ myds$grp, main = \"1인당 범죄율\")\n\n\n\nboxplot(myds$rm ~ myds$grp, main = \"방의 개수\")\n\n\n\nboxplot(myds$dis ~ myds$grp, main = \"직업 센터까지의 거리\")\n\n\n\nboxplot(myds$tax ~ myds$grp, main = \"재산세율\")\n\n\n\n\n## (7) 다중 산점도를 통한 변수 간 상관 관계의 확인\npairs(myds[, -6]) # 6번째 열 제거(grp)\npairs(myds[, 1:5])\n\n\n\n\n## (8) 그룹 정보를 포함한 변수 간 상관 관계의 확인\npoint &lt;- as.integer(myds$grp) # 점의 모양 지정\ncolor &lt;- c(\"red\", \"green\", \"blue\") # 점의 색 지정\npairs(myds[, -6], pch = point, col = color[point])\n\n\n\n\n## (9) 변수 간 상관계수의 확인\ncor(myds[, -6])\n##            crim         rm        dis        tax       medv\n## crim  1.0000000 -0.2192467 -0.3796701  0.5827643 -0.3883046\n## rm   -0.2192467  1.0000000  0.2052462 -0.2920478  0.6953599\n## dis  -0.3796701  0.2052462  1.0000000 -0.5344316  0.2499287\n## tax   0.5827643 -0.2920478 -0.5344316  1.0000000 -0.4685359\n## medv -0.3883046  0.6953599  0.2499287 -0.4685359  1.0000000\ncor(myds[1:5])\n##            crim         rm        dis        tax       medv\n## crim  1.0000000 -0.2192467 -0.3796701  0.5827643 -0.3883046\n## rm   -0.2192467  1.0000000  0.2052462 -0.2920478  0.6953599\n## dis  -0.3796701  0.2052462  1.0000000 -0.5344316  0.2499287\n## tax   0.5827643 -0.2920478 -0.5344316  1.0000000 -0.4685359\n## medv -0.3883046  0.6953599  0.2499287 -0.4685359  1.0000000"
  },
  {
    "objectID": "R_Basic.html#장.-데이터-전처리",
    "href": "R_Basic.html#장.-데이터-전처리",
    "title": "R Basic",
    "section": "",
    "text": "z &lt;- c(1, 2, 3, NA, 5, NA, 8)   # 결측값이 포함된 벡터 z\nsum(z)                          # 정상 계산이 안 됨\n## [1] NA\nis.na(z)                        # NA 여부 확인\n## [1] FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE\nsum(is.na(z))                   # NA의 개수 확인\n## [1] 2\nsum(z, na.rm = TRUE)            # NA를 제외하고 합계를 계산\n## [1] 19\n\n\nz1 &lt;- c(1, 2, 3, NA, 5, NA, 8)          # 결측값이 포함된 벡터 z1\nz2 &lt;- c(5, 8, 1, NA, 3, NA, 7)          # 결측값이 포함된 벡터 z2\nz1[is.na(z1)] &lt;- 0                      # NA를 0으로 치환\nz1\n## [1] 1 2 3 0 5 0 8\n\nz1[is.na(z1)] &lt;- mean(z1, na.rm = TRUE) # NA를 z1의 평균값으로 치환\nz1\n## [1] 1 2 3 0 5 0 8\n\nz3 &lt;- as.vector(na.omit(z2))            # NA를 제거하고 새로운 벡터 생성\nz3\n## [1] 5 8 1 3 7\n\n\n# NA를 포함하는 test 데이터 생성\nx &lt;- iris\nx[1, 2] &lt;- NA\nx[1, 3] &lt;- NA\nx[2, 3] &lt;- NA\nx[3, 4] &lt;- NA\nhead(x)\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1          5.1          NA           NA         0.2  setosa\n## 2          4.9         3.0           NA         0.2  setosa\n## 3          4.7         3.2          1.3          NA  setosa\n## 4          4.6         3.1          1.5         0.2  setosa\n## 5          5.0         3.6          1.4         0.2  setosa\n## 6          5.4         3.9          1.7         0.4  setosa\n\n\n# for문을 이용한 방법 ★★★★★\nfor (i in 1:ncol(x)) {\n    this.na &lt;- is.na(x[, i])\n    cat(colnames(x)[i], \"\\t\", sum(this.na), \"\\n\")\n}\n## Sepal.Length      0 \n## Sepal.Width   1 \n## Petal.Length      2 \n## Petal.Width   1 \n## Species   0\n\n# apply를 이용한 방법\ncol_na &lt;- function(y) {\n    return(sum(is.na(y)))\n}\n\nna_count &lt;- apply(x, 2, FUN = col_na)\nna_count\n## Sepal.Length  Sepal.Width Petal.Length  Petal.Width      Species \n##            0            1            2            1            0\n\n\nrowSums(is.na(x))           # 행별 NA의 개수\n##   [1] 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n##  [38] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n##  [75] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n## [112] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n## [149] 0 0\nsum(rowSums(is.na(x)) &gt; 0)  # NA가 포함된 행의 개수\n## [1] 3\n\nsum(is.na(x))               # 데이터셋 전체에서 NA 개수\n## [1] 4\n\n\nhead(x)\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1          5.1          NA           NA         0.2  setosa\n## 2          4.9         3.0           NA         0.2  setosa\n## 3          4.7         3.2          1.3          NA  setosa\n## 4          4.6         3.1          1.5         0.2  setosa\n## 5          5.0         3.6          1.4         0.2  setosa\n## 6          5.4         3.9          1.7         0.4  setosa\nx[!complete.cases(x), ]     # NA가 포함된 행들 출력\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1          5.1          NA           NA         0.2  setosa\n## 2          4.9         3.0           NA         0.2  setosa\n## 3          4.7         3.2          1.3          NA  setosa\ny &lt;- x[complete.cases(x), ] # NA가 포함된 행들 제거\nhead(y)                     # 새로운 데이터셋 y의 내용 확인\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 4          4.6         3.1          1.5         0.2  setosa\n## 5          5.0         3.6          1.4         0.2  setosa\n## 6          5.4         3.9          1.7         0.4  setosa\n## 7          4.6         3.4          1.4         0.3  setosa\n## 8          5.0         3.4          1.5         0.2  setosa\n## 9          4.4         2.9          1.4         0.2  setosa\n\n\nst &lt;- data.frame(state.x77)\nboxplot(st$Income)\n\n\n\nboxplot.stats(st$Income)\n## $stats\n## [1] 3098 3983 4519 4815 5348\n## \n## $n\n## [1] 50\n## \n## $conf\n## [1] 4333.093 4704.907\n## \n## $out\n## [1] 6315\n# stats (각 변수의 최소값, 1사분위수, 2사분위수, 3사분위수, 최대값이 저장되어 있는 행렬)\n# n (각 그룹마다의 관측값 수를 저장한 벡터)\n# conf (중앙값의 95% 신뢰구간, median+-1.58*IQR/(n)^0.5)\n# out (이상치)\nboxplot.stats(st$Income)$out\n## [1] 6315\n\n\nout.val &lt;- boxplot.stats(st$Income)$out     # 특이값 추출\n\nst$Income %in% out.val\n##  [1] FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [49] FALSE FALSE\nst$Income == out.val\n##  [1] FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [49] FALSE FALSE\n\nst$Income[st$Income %in% out.val] &lt;- NA     # 특이값을 NA로 대체\nst$Income[st$Income == out.val] &lt;- NA\n\nhead(st)\n##            Population Income Illiteracy Life.Exp Murder HS.Grad Frost   Area\n## Alabama          3615   3624        2.1    69.05   15.1    41.3    20  50708\n## Alaska            365     NA        1.5    69.31   11.3    66.7   152 566432\n## Arizona          2212   4530        1.8    70.55    7.8    58.1    15 113417\n## Arkansas         2110   3378        1.9    70.66   10.1    39.9    65  51945\n## California      21198   5114        1.1    71.71   10.3    62.6    20 156361\n## Colorado         2541   4884        0.7    72.06    6.8    63.9   166 103766\nnewdata &lt;- st[complete.cases(st), ]         # NA가 포함된 행 제거 ★★★★★\nhead(newdata)\n##             Population Income Illiteracy Life.Exp Murder HS.Grad Frost   Area\n## Alabama           3615   3624        2.1    69.05   15.1    41.3    20  50708\n## Arizona           2212   4530        1.8    70.55    7.8    58.1    15 113417\n## Arkansas          2110   3378        1.9    70.66   10.1    39.9    65  51945\n## California       21198   5114        1.1    71.71   10.3    62.6    20 156361\n## Colorado          2541   4884        0.7    72.06    6.8    63.9   166 103766\n## Connecticut       3100   5348        1.1    72.48    3.1    56.0   139   4862\n\n\nv1 &lt;- c(1, 7, 6, 8, 4, 2, 3)\norder(v1)\n## [1] 1 6 7 5 3 2 4\n\nv1 &lt;- sort(v1) # 오름차순\nv1\n## [1] 1 2 3 4 6 7 8\nv1[order(v1)]\n## [1] 1 2 3 4 6 7 8\n\nv2 &lt;- sort(v1, decreasing = T) # 내림차순\nv2\n## [1] 8 7 6 4 3 2 1\n\n\nhead(iris)\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1          5.1         3.5          1.4         0.2  setosa\n## 2          4.9         3.0          1.4         0.2  setosa\n## 3          4.7         3.2          1.3         0.2  setosa\n## 4          4.6         3.1          1.5         0.2  setosa\n## 5          5.0         3.6          1.4         0.2  setosa\n## 6          5.4         3.9          1.7         0.4  setosa\norder(iris$Sepal.Length)\n##   [1]  14   9  39  43  42   4   7  23  48   3  30  12  13  25  31  46   2  10\n##  [19]  35  38  58 107   5   8  26  27  36  41  44  50  61  94   1  18  20  22\n##  [37]  24  40  45  47  99  28  29  33  60  49   6  11  17  21  32  85  34  37\n##  [55]  54  81  82  90  91  65  67  70  89  95 122  16  19  56  80  96  97 100\n##  [73] 114  15  68  83  93 102 115 143  62  71 150  63  79  84  86 120 139  64\n##  [91]  72  74  92 128 135  69  98 127 149  57  73  88 101 104 124 134 137 147\n## [109]  52  75 112 116 129 133 138  55 105 111 117 148  59  76  66  78  87 109\n## [127] 125 141 145 146  77 113 144  53 121 140 142  51 103 110 126 130 108 131\n## [145] 106 118 119 123 136 132\niris[order(iris$Sepal.Length), ]                    # 오름차순으로 정렬\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 14           4.3         3.0          1.1         0.1     setosa\n## 9            4.4         2.9          1.4         0.2     setosa\n## 39           4.4         3.0          1.3         0.2     setosa\n## 43           4.4         3.2          1.3         0.2     setosa\n## 42           4.5         2.3          1.3         0.3     setosa\n## 4            4.6         3.1          1.5         0.2     setosa\n## 7            4.6         3.4          1.4         0.3     setosa\n## 23           4.6         3.6          1.0         0.2     setosa\n## 48           4.6         3.2          1.4         0.2     setosa\n## 3            4.7         3.2          1.3         0.2     setosa\n## 30           4.7         3.2          1.6         0.2     setosa\n## 12           4.8         3.4          1.6         0.2     setosa\n## 13           4.8         3.0          1.4         0.1     setosa\n## 25           4.8         3.4          1.9         0.2     setosa\n## 31           4.8         3.1          1.6         0.2     setosa\n## 46           4.8         3.0          1.4         0.3     setosa\n## 2            4.9         3.0          1.4         0.2     setosa\n## 10           4.9         3.1          1.5         0.1     setosa\n## 35           4.9         3.1          1.5         0.2     setosa\n## 38           4.9         3.6          1.4         0.1     setosa\n## 58           4.9         2.4          3.3         1.0 versicolor\n## 107          4.9         2.5          4.5         1.7  virginica\n## 5            5.0         3.6          1.4         0.2     setosa\n## 8            5.0         3.4          1.5         0.2     setosa\n## 26           5.0         3.0          1.6         0.2     setosa\n## 27           5.0         3.4          1.6         0.4     setosa\n## 36           5.0         3.2          1.2         0.2     setosa\n## 41           5.0         3.5          1.3         0.3     setosa\n## 44           5.0         3.5          1.6         0.6     setosa\n## 50           5.0         3.3          1.4         0.2     setosa\n## 61           5.0         2.0          3.5         1.0 versicolor\n## 94           5.0         2.3          3.3         1.0 versicolor\n## 1            5.1         3.5          1.4         0.2     setosa\n## 18           5.1         3.5          1.4         0.3     setosa\n## 20           5.1         3.8          1.5         0.3     setosa\n## 22           5.1         3.7          1.5         0.4     setosa\n## 24           5.1         3.3          1.7         0.5     setosa\n## 40           5.1         3.4          1.5         0.2     setosa\n## 45           5.1         3.8          1.9         0.4     setosa\n## 47           5.1         3.8          1.6         0.2     setosa\n## 99           5.1         2.5          3.0         1.1 versicolor\n## 28           5.2         3.5          1.5         0.2     setosa\n## 29           5.2         3.4          1.4         0.2     setosa\n## 33           5.2         4.1          1.5         0.1     setosa\n## 60           5.2         2.7          3.9         1.4 versicolor\n## 49           5.3         3.7          1.5         0.2     setosa\n## 6            5.4         3.9          1.7         0.4     setosa\n## 11           5.4         3.7          1.5         0.2     setosa\n## 17           5.4         3.9          1.3         0.4     setosa\n## 21           5.4         3.4          1.7         0.2     setosa\n## 32           5.4         3.4          1.5         0.4     setosa\n## 85           5.4         3.0          4.5         1.5 versicolor\n## 34           5.5         4.2          1.4         0.2     setosa\n## 37           5.5         3.5          1.3         0.2     setosa\n## 54           5.5         2.3          4.0         1.3 versicolor\n## 81           5.5         2.4          3.8         1.1 versicolor\n## 82           5.5         2.4          3.7         1.0 versicolor\n## 90           5.5         2.5          4.0         1.3 versicolor\n## 91           5.5         2.6          4.4         1.2 versicolor\n## 65           5.6         2.9          3.6         1.3 versicolor\n## 67           5.6         3.0          4.5         1.5 versicolor\n## 70           5.6         2.5          3.9         1.1 versicolor\n## 89           5.6         3.0          4.1         1.3 versicolor\n## 95           5.6         2.7          4.2         1.3 versicolor\n## 122          5.6         2.8          4.9         2.0  virginica\n## 16           5.7         4.4          1.5         0.4     setosa\n## 19           5.7         3.8          1.7         0.3     setosa\n## 56           5.7         2.8          4.5         1.3 versicolor\n## 80           5.7         2.6          3.5         1.0 versicolor\n## 96           5.7         3.0          4.2         1.2 versicolor\n## 97           5.7         2.9          4.2         1.3 versicolor\n## 100          5.7         2.8          4.1         1.3 versicolor\n## 114          5.7         2.5          5.0         2.0  virginica\n## 15           5.8         4.0          1.2         0.2     setosa\n## 68           5.8         2.7          4.1         1.0 versicolor\n## 83           5.8         2.7          3.9         1.2 versicolor\n## 93           5.8         2.6          4.0         1.2 versicolor\n## 102          5.8         2.7          5.1         1.9  virginica\n## 115          5.8         2.8          5.1         2.4  virginica\n## 143          5.8         2.7          5.1         1.9  virginica\n## 62           5.9         3.0          4.2         1.5 versicolor\n## 71           5.9         3.2          4.8         1.8 versicolor\n## 150          5.9         3.0          5.1         1.8  virginica\n## 63           6.0         2.2          4.0         1.0 versicolor\n## 79           6.0         2.9          4.5         1.5 versicolor\n## 84           6.0         2.7          5.1         1.6 versicolor\n## 86           6.0         3.4          4.5         1.6 versicolor\n## 120          6.0         2.2          5.0         1.5  virginica\n## 139          6.0         3.0          4.8         1.8  virginica\n## 64           6.1         2.9          4.7         1.4 versicolor\n## 72           6.1         2.8          4.0         1.3 versicolor\n## 74           6.1         2.8          4.7         1.2 versicolor\n## 92           6.1         3.0          4.6         1.4 versicolor\n## 128          6.1         3.0          4.9         1.8  virginica\n## 135          6.1         2.6          5.6         1.4  virginica\n## 69           6.2         2.2          4.5         1.5 versicolor\n## 98           6.2         2.9          4.3         1.3 versicolor\n## 127          6.2         2.8          4.8         1.8  virginica\n## 149          6.2         3.4          5.4         2.3  virginica\n## 57           6.3         3.3          4.7         1.6 versicolor\n## 73           6.3         2.5          4.9         1.5 versicolor\n## 88           6.3         2.3          4.4         1.3 versicolor\n## 101          6.3         3.3          6.0         2.5  virginica\n## 104          6.3         2.9          5.6         1.8  virginica\n## 124          6.3         2.7          4.9         1.8  virginica\n## 134          6.3         2.8          5.1         1.5  virginica\n## 137          6.3         3.4          5.6         2.4  virginica\n## 147          6.3         2.5          5.0         1.9  virginica\n## 52           6.4         3.2          4.5         1.5 versicolor\n## 75           6.4         2.9          4.3         1.3 versicolor\n## 112          6.4         2.7          5.3         1.9  virginica\n## 116          6.4         3.2          5.3         2.3  virginica\n## 129          6.4         2.8          5.6         2.1  virginica\n## 133          6.4         2.8          5.6         2.2  virginica\n## 138          6.4         3.1          5.5         1.8  virginica\n## 55           6.5         2.8          4.6         1.5 versicolor\n## 105          6.5         3.0          5.8         2.2  virginica\n## 111          6.5         3.2          5.1         2.0  virginica\n## 117          6.5         3.0          5.5         1.8  virginica\n## 148          6.5         3.0          5.2         2.0  virginica\n## 59           6.6         2.9          4.6         1.3 versicolor\n## 76           6.6         3.0          4.4         1.4 versicolor\n## 66           6.7         3.1          4.4         1.4 versicolor\n## 78           6.7         3.0          5.0         1.7 versicolor\n## 87           6.7         3.1          4.7         1.5 versicolor\n## 109          6.7         2.5          5.8         1.8  virginica\n## 125          6.7         3.3          5.7         2.1  virginica\n## 141          6.7         3.1          5.6         2.4  virginica\n## 145          6.7         3.3          5.7         2.5  virginica\n## 146          6.7         3.0          5.2         2.3  virginica\n## 77           6.8         2.8          4.8         1.4 versicolor\n## 113          6.8         3.0          5.5         2.1  virginica\n## 144          6.8         3.2          5.9         2.3  virginica\n## 53           6.9         3.1          4.9         1.5 versicolor\n## 121          6.9         3.2          5.7         2.3  virginica\n## 140          6.9         3.1          5.4         2.1  virginica\n## 142          6.9         3.1          5.1         2.3  virginica\n## 51           7.0         3.2          4.7         1.4 versicolor\n## 103          7.1         3.0          5.9         2.1  virginica\n## 110          7.2         3.6          6.1         2.5  virginica\n## 126          7.2         3.2          6.0         1.8  virginica\n## 130          7.2         3.0          5.8         1.6  virginica\n## 108          7.3         2.9          6.3         1.8  virginica\n## 131          7.4         2.8          6.1         1.9  virginica\n## 106          7.6         3.0          6.6         2.1  virginica\n## 118          7.7         3.8          6.7         2.2  virginica\n## 119          7.7         2.6          6.9         2.3  virginica\n## 123          7.7         2.8          6.7         2.0  virginica\n## 136          7.7         3.0          6.1         2.3  virginica\n## 132          7.9         3.8          6.4         2.0  virginica\niris[order(iris$Sepal.Length, decreasing = T), ]    # 내림차순으로 정렬\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 132          7.9         3.8          6.4         2.0  virginica\n## 118          7.7         3.8          6.7         2.2  virginica\n## 119          7.7         2.6          6.9         2.3  virginica\n## 123          7.7         2.8          6.7         2.0  virginica\n## 136          7.7         3.0          6.1         2.3  virginica\n## 106          7.6         3.0          6.6         2.1  virginica\n## 131          7.4         2.8          6.1         1.9  virginica\n## 108          7.3         2.9          6.3         1.8  virginica\n## 110          7.2         3.6          6.1         2.5  virginica\n## 126          7.2         3.2          6.0         1.8  virginica\n## 130          7.2         3.0          5.8         1.6  virginica\n## 103          7.1         3.0          5.9         2.1  virginica\n## 51           7.0         3.2          4.7         1.4 versicolor\n## 53           6.9         3.1          4.9         1.5 versicolor\n## 121          6.9         3.2          5.7         2.3  virginica\n## 140          6.9         3.1          5.4         2.1  virginica\n## 142          6.9         3.1          5.1         2.3  virginica\n## 77           6.8         2.8          4.8         1.4 versicolor\n## 113          6.8         3.0          5.5         2.1  virginica\n## 144          6.8         3.2          5.9         2.3  virginica\n## 66           6.7         3.1          4.4         1.4 versicolor\n## 78           6.7         3.0          5.0         1.7 versicolor\n## 87           6.7         3.1          4.7         1.5 versicolor\n## 109          6.7         2.5          5.8         1.8  virginica\n## 125          6.7         3.3          5.7         2.1  virginica\n## 141          6.7         3.1          5.6         2.4  virginica\n## 145          6.7         3.3          5.7         2.5  virginica\n## 146          6.7         3.0          5.2         2.3  virginica\n## 59           6.6         2.9          4.6         1.3 versicolor\n## 76           6.6         3.0          4.4         1.4 versicolor\n## 55           6.5         2.8          4.6         1.5 versicolor\n## 105          6.5         3.0          5.8         2.2  virginica\n## 111          6.5         3.2          5.1         2.0  virginica\n## 117          6.5         3.0          5.5         1.8  virginica\n## 148          6.5         3.0          5.2         2.0  virginica\n## 52           6.4         3.2          4.5         1.5 versicolor\n## 75           6.4         2.9          4.3         1.3 versicolor\n## 112          6.4         2.7          5.3         1.9  virginica\n## 116          6.4         3.2          5.3         2.3  virginica\n## 129          6.4         2.8          5.6         2.1  virginica\n## 133          6.4         2.8          5.6         2.2  virginica\n## 138          6.4         3.1          5.5         1.8  virginica\n## 57           6.3         3.3          4.7         1.6 versicolor\n## 73           6.3         2.5          4.9         1.5 versicolor\n## 88           6.3         2.3          4.4         1.3 versicolor\n## 101          6.3         3.3          6.0         2.5  virginica\n## 104          6.3         2.9          5.6         1.8  virginica\n## 124          6.3         2.7          4.9         1.8  virginica\n## 134          6.3         2.8          5.1         1.5  virginica\n## 137          6.3         3.4          5.6         2.4  virginica\n## 147          6.3         2.5          5.0         1.9  virginica\n## 69           6.2         2.2          4.5         1.5 versicolor\n## 98           6.2         2.9          4.3         1.3 versicolor\n## 127          6.2         2.8          4.8         1.8  virginica\n## 149          6.2         3.4          5.4         2.3  virginica\n## 64           6.1         2.9          4.7         1.4 versicolor\n## 72           6.1         2.8          4.0         1.3 versicolor\n## 74           6.1         2.8          4.7         1.2 versicolor\n## 92           6.1         3.0          4.6         1.4 versicolor\n## 128          6.1         3.0          4.9         1.8  virginica\n## 135          6.1         2.6          5.6         1.4  virginica\n## 63           6.0         2.2          4.0         1.0 versicolor\n## 79           6.0         2.9          4.5         1.5 versicolor\n## 84           6.0         2.7          5.1         1.6 versicolor\n## 86           6.0         3.4          4.5         1.6 versicolor\n## 120          6.0         2.2          5.0         1.5  virginica\n## 139          6.0         3.0          4.8         1.8  virginica\n## 62           5.9         3.0          4.2         1.5 versicolor\n## 71           5.9         3.2          4.8         1.8 versicolor\n## 150          5.9         3.0          5.1         1.8  virginica\n## 15           5.8         4.0          1.2         0.2     setosa\n## 68           5.8         2.7          4.1         1.0 versicolor\n## 83           5.8         2.7          3.9         1.2 versicolor\n## 93           5.8         2.6          4.0         1.2 versicolor\n## 102          5.8         2.7          5.1         1.9  virginica\n## 115          5.8         2.8          5.1         2.4  virginica\n## 143          5.8         2.7          5.1         1.9  virginica\n## 16           5.7         4.4          1.5         0.4     setosa\n## 19           5.7         3.8          1.7         0.3     setosa\n## 56           5.7         2.8          4.5         1.3 versicolor\n## 80           5.7         2.6          3.5         1.0 versicolor\n## 96           5.7         3.0          4.2         1.2 versicolor\n## 97           5.7         2.9          4.2         1.3 versicolor\n## 100          5.7         2.8          4.1         1.3 versicolor\n## 114          5.7         2.5          5.0         2.0  virginica\n## 65           5.6         2.9          3.6         1.3 versicolor\n## 67           5.6         3.0          4.5         1.5 versicolor\n## 70           5.6         2.5          3.9         1.1 versicolor\n## 89           5.6         3.0          4.1         1.3 versicolor\n## 95           5.6         2.7          4.2         1.3 versicolor\n## 122          5.6         2.8          4.9         2.0  virginica\n## 34           5.5         4.2          1.4         0.2     setosa\n## 37           5.5         3.5          1.3         0.2     setosa\n## 54           5.5         2.3          4.0         1.3 versicolor\n## 81           5.5         2.4          3.8         1.1 versicolor\n## 82           5.5         2.4          3.7         1.0 versicolor\n## 90           5.5         2.5          4.0         1.3 versicolor\n## 91           5.5         2.6          4.4         1.2 versicolor\n## 6            5.4         3.9          1.7         0.4     setosa\n## 11           5.4         3.7          1.5         0.2     setosa\n## 17           5.4         3.9          1.3         0.4     setosa\n## 21           5.4         3.4          1.7         0.2     setosa\n## 32           5.4         3.4          1.5         0.4     setosa\n## 85           5.4         3.0          4.5         1.5 versicolor\n## 49           5.3         3.7          1.5         0.2     setosa\n## 28           5.2         3.5          1.5         0.2     setosa\n## 29           5.2         3.4          1.4         0.2     setosa\n## 33           5.2         4.1          1.5         0.1     setosa\n## 60           5.2         2.7          3.9         1.4 versicolor\n## 1            5.1         3.5          1.4         0.2     setosa\n## 18           5.1         3.5          1.4         0.3     setosa\n## 20           5.1         3.8          1.5         0.3     setosa\n## 22           5.1         3.7          1.5         0.4     setosa\n## 24           5.1         3.3          1.7         0.5     setosa\n## 40           5.1         3.4          1.5         0.2     setosa\n## 45           5.1         3.8          1.9         0.4     setosa\n## 47           5.1         3.8          1.6         0.2     setosa\n## 99           5.1         2.5          3.0         1.1 versicolor\n## 5            5.0         3.6          1.4         0.2     setosa\n## 8            5.0         3.4          1.5         0.2     setosa\n## 26           5.0         3.0          1.6         0.2     setosa\n## 27           5.0         3.4          1.6         0.4     setosa\n## 36           5.0         3.2          1.2         0.2     setosa\n## 41           5.0         3.5          1.3         0.3     setosa\n## 44           5.0         3.5          1.6         0.6     setosa\n## 50           5.0         3.3          1.4         0.2     setosa\n## 61           5.0         2.0          3.5         1.0 versicolor\n## 94           5.0         2.3          3.3         1.0 versicolor\n## 2            4.9         3.0          1.4         0.2     setosa\n## 10           4.9         3.1          1.5         0.1     setosa\n## 35           4.9         3.1          1.5         0.2     setosa\n## 38           4.9         3.6          1.4         0.1     setosa\n## 58           4.9         2.4          3.3         1.0 versicolor\n## 107          4.9         2.5          4.5         1.7  virginica\n## 12           4.8         3.4          1.6         0.2     setosa\n## 13           4.8         3.0          1.4         0.1     setosa\n## 25           4.8         3.4          1.9         0.2     setosa\n## 31           4.8         3.1          1.6         0.2     setosa\n## 46           4.8         3.0          1.4         0.3     setosa\n## 3            4.7         3.2          1.3         0.2     setosa\n## 30           4.7         3.2          1.6         0.2     setosa\n## 4            4.6         3.1          1.5         0.2     setosa\n## 7            4.6         3.4          1.4         0.3     setosa\n## 23           4.6         3.6          1.0         0.2     setosa\n## 48           4.6         3.2          1.4         0.2     setosa\n## 42           4.5         2.3          1.3         0.3     setosa\n## 9            4.4         2.9          1.4         0.2     setosa\n## 39           4.4         3.0          1.3         0.2     setosa\n## 43           4.4         3.2          1.3         0.2     setosa\n## 14           4.3         3.0          1.1         0.1     setosa\n\niris.new &lt;- iris[order(iris$Sepal.Length), ]        # 정렬된 데이터를 저장\nhead(iris.new)\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 14          4.3         3.0          1.1         0.1  setosa\n## 9           4.4         2.9          1.4         0.2  setosa\n## 39          4.4         3.0          1.3         0.2  setosa\n## 43          4.4         3.2          1.3         0.2  setosa\n## 42          4.5         2.3          1.3         0.3  setosa\n## 4           4.6         3.1          1.5         0.2  setosa\niris[order(iris$Species,-iris$Petal.Length, decreasing = T), ] # 정렬 기준이 2개\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 107          4.9         2.5          4.5         1.7  virginica\n## 127          6.2         2.8          4.8         1.8  virginica\n## 139          6.0         3.0          4.8         1.8  virginica\n## 122          5.6         2.8          4.9         2.0  virginica\n## 124          6.3         2.7          4.9         1.8  virginica\n## 128          6.1         3.0          4.9         1.8  virginica\n## 114          5.7         2.5          5.0         2.0  virginica\n## 120          6.0         2.2          5.0         1.5  virginica\n## 147          6.3         2.5          5.0         1.9  virginica\n## 102          5.8         2.7          5.1         1.9  virginica\n## 111          6.5         3.2          5.1         2.0  virginica\n## 115          5.8         2.8          5.1         2.4  virginica\n## 134          6.3         2.8          5.1         1.5  virginica\n## 142          6.9         3.1          5.1         2.3  virginica\n## 143          5.8         2.7          5.1         1.9  virginica\n## 150          5.9         3.0          5.1         1.8  virginica\n## 146          6.7         3.0          5.2         2.3  virginica\n## 148          6.5         3.0          5.2         2.0  virginica\n## 112          6.4         2.7          5.3         1.9  virginica\n## 116          6.4         3.2          5.3         2.3  virginica\n## 140          6.9         3.1          5.4         2.1  virginica\n## 149          6.2         3.4          5.4         2.3  virginica\n## 113          6.8         3.0          5.5         2.1  virginica\n## 117          6.5         3.0          5.5         1.8  virginica\n## 138          6.4         3.1          5.5         1.8  virginica\n## 104          6.3         2.9          5.6         1.8  virginica\n## 129          6.4         2.8          5.6         2.1  virginica\n## 133          6.4         2.8          5.6         2.2  virginica\n## 135          6.1         2.6          5.6         1.4  virginica\n## 137          6.3         3.4          5.6         2.4  virginica\n## 141          6.7         3.1          5.6         2.4  virginica\n## 121          6.9         3.2          5.7         2.3  virginica\n## 125          6.7         3.3          5.7         2.1  virginica\n## 145          6.7         3.3          5.7         2.5  virginica\n## 105          6.5         3.0          5.8         2.2  virginica\n## 109          6.7         2.5          5.8         1.8  virginica\n## 130          7.2         3.0          5.8         1.6  virginica\n## 103          7.1         3.0          5.9         2.1  virginica\n## 144          6.8         3.2          5.9         2.3  virginica\n## 101          6.3         3.3          6.0         2.5  virginica\n## 126          7.2         3.2          6.0         1.8  virginica\n## 110          7.2         3.6          6.1         2.5  virginica\n## 131          7.4         2.8          6.1         1.9  virginica\n## 136          7.7         3.0          6.1         2.3  virginica\n## 108          7.3         2.9          6.3         1.8  virginica\n## 132          7.9         3.8          6.4         2.0  virginica\n## 106          7.6         3.0          6.6         2.1  virginica\n## 118          7.7         3.8          6.7         2.2  virginica\n## 123          7.7         2.8          6.7         2.0  virginica\n## 119          7.7         2.6          6.9         2.3  virginica\n## 99           5.1         2.5          3.0         1.1 versicolor\n## 58           4.9         2.4          3.3         1.0 versicolor\n## 94           5.0         2.3          3.3         1.0 versicolor\n## 61           5.0         2.0          3.5         1.0 versicolor\n## 80           5.7         2.6          3.5         1.0 versicolor\n## 65           5.6         2.9          3.6         1.3 versicolor\n## 82           5.5         2.4          3.7         1.0 versicolor\n## 81           5.5         2.4          3.8         1.1 versicolor\n## 60           5.2         2.7          3.9         1.4 versicolor\n## 70           5.6         2.5          3.9         1.1 versicolor\n## 83           5.8         2.7          3.9         1.2 versicolor\n## 54           5.5         2.3          4.0         1.3 versicolor\n## 63           6.0         2.2          4.0         1.0 versicolor\n## 72           6.1         2.8          4.0         1.3 versicolor\n## 90           5.5         2.5          4.0         1.3 versicolor\n## 93           5.8         2.6          4.0         1.2 versicolor\n## 68           5.8         2.7          4.1         1.0 versicolor\n## 89           5.6         3.0          4.1         1.3 versicolor\n## 100          5.7         2.8          4.1         1.3 versicolor\n## 62           5.9         3.0          4.2         1.5 versicolor\n## 95           5.6         2.7          4.2         1.3 versicolor\n## 96           5.7         3.0          4.2         1.2 versicolor\n## 97           5.7         2.9          4.2         1.3 versicolor\n## 75           6.4         2.9          4.3         1.3 versicolor\n## 98           6.2         2.9          4.3         1.3 versicolor\n## 66           6.7         3.1          4.4         1.4 versicolor\n## 76           6.6         3.0          4.4         1.4 versicolor\n## 88           6.3         2.3          4.4         1.3 versicolor\n## 91           5.5         2.6          4.4         1.2 versicolor\n## 52           6.4         3.2          4.5         1.5 versicolor\n## 56           5.7         2.8          4.5         1.3 versicolor\n## 67           5.6         3.0          4.5         1.5 versicolor\n## 69           6.2         2.2          4.5         1.5 versicolor\n## 79           6.0         2.9          4.5         1.5 versicolor\n## 85           5.4         3.0          4.5         1.5 versicolor\n## 86           6.0         3.4          4.5         1.6 versicolor\n## 55           6.5         2.8          4.6         1.5 versicolor\n## 59           6.6         2.9          4.6         1.3 versicolor\n## 92           6.1         3.0          4.6         1.4 versicolor\n## 51           7.0         3.2          4.7         1.4 versicolor\n## 57           6.3         3.3          4.7         1.6 versicolor\n## 64           6.1         2.9          4.7         1.4 versicolor\n## 74           6.1         2.8          4.7         1.2 versicolor\n## 87           6.7         3.1          4.7         1.5 versicolor\n## 71           5.9         3.2          4.8         1.8 versicolor\n## 77           6.8         2.8          4.8         1.4 versicolor\n## 53           6.9         3.1          4.9         1.5 versicolor\n## 73           6.3         2.5          4.9         1.5 versicolor\n## 78           6.7         3.0          5.0         1.7 versicolor\n## 84           6.0         2.7          5.1         1.6 versicolor\n## 23           4.6         3.6          1.0         0.2     setosa\n## 14           4.3         3.0          1.1         0.1     setosa\n## 15           5.8         4.0          1.2         0.2     setosa\n## 36           5.0         3.2          1.2         0.2     setosa\n## 3            4.7         3.2          1.3         0.2     setosa\n## 17           5.4         3.9          1.3         0.4     setosa\n## 37           5.5         3.5          1.3         0.2     setosa\n## 39           4.4         3.0          1.3         0.2     setosa\n## 41           5.0         3.5          1.3         0.3     setosa\n## 42           4.5         2.3          1.3         0.3     setosa\n## 43           4.4         3.2          1.3         0.2     setosa\n## 1            5.1         3.5          1.4         0.2     setosa\n## 2            4.9         3.0          1.4         0.2     setosa\n## 5            5.0         3.6          1.4         0.2     setosa\n## 7            4.6         3.4          1.4         0.3     setosa\n## 9            4.4         2.9          1.4         0.2     setosa\n## 13           4.8         3.0          1.4         0.1     setosa\n## 18           5.1         3.5          1.4         0.3     setosa\n## 29           5.2         3.4          1.4         0.2     setosa\n## 34           5.5         4.2          1.4         0.2     setosa\n## 38           4.9         3.6          1.4         0.1     setosa\n## 46           4.8         3.0          1.4         0.3     setosa\n## 48           4.6         3.2          1.4         0.2     setosa\n## 50           5.0         3.3          1.4         0.2     setosa\n## 4            4.6         3.1          1.5         0.2     setosa\n## 8            5.0         3.4          1.5         0.2     setosa\n## 10           4.9         3.1          1.5         0.1     setosa\n## 11           5.4         3.7          1.5         0.2     setosa\n## 16           5.7         4.4          1.5         0.4     setosa\n## 20           5.1         3.8          1.5         0.3     setosa\n## 22           5.1         3.7          1.5         0.4     setosa\n## 28           5.2         3.5          1.5         0.2     setosa\n## 32           5.4         3.4          1.5         0.4     setosa\n## 33           5.2         4.1          1.5         0.1     setosa\n## 35           4.9         3.1          1.5         0.2     setosa\n## 40           5.1         3.4          1.5         0.2     setosa\n## 49           5.3         3.7          1.5         0.2     setosa\n## 12           4.8         3.4          1.6         0.2     setosa\n## 26           5.0         3.0          1.6         0.2     setosa\n## 27           5.0         3.4          1.6         0.4     setosa\n## 30           4.7         3.2          1.6         0.2     setosa\n## 31           4.8         3.1          1.6         0.2     setosa\n## 44           5.0         3.5          1.6         0.6     setosa\n## 47           5.1         3.8          1.6         0.2     setosa\n## 6            5.4         3.9          1.7         0.4     setosa\n## 19           5.7         3.8          1.7         0.3     setosa\n## 21           5.4         3.4          1.7         0.2     setosa\n## 24           5.1         3.3          1.7         0.5     setosa\n## 25           4.8         3.4          1.9         0.2     setosa\n## 45           5.1         3.8          1.9         0.4     setosa\niris[order(iris$Species, decreasing = T, iris$Petal.Length), ]\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 119          7.7         2.6          6.9         2.3  virginica\n## 118          7.7         3.8          6.7         2.2  virginica\n## 123          7.7         2.8          6.7         2.0  virginica\n## 106          7.6         3.0          6.6         2.1  virginica\n## 132          7.9         3.8          6.4         2.0  virginica\n## 108          7.3         2.9          6.3         1.8  virginica\n## 110          7.2         3.6          6.1         2.5  virginica\n## 131          7.4         2.8          6.1         1.9  virginica\n## 136          7.7         3.0          6.1         2.3  virginica\n## 101          6.3         3.3          6.0         2.5  virginica\n## 126          7.2         3.2          6.0         1.8  virginica\n## 103          7.1         3.0          5.9         2.1  virginica\n## 144          6.8         3.2          5.9         2.3  virginica\n## 105          6.5         3.0          5.8         2.2  virginica\n## 109          6.7         2.5          5.8         1.8  virginica\n## 130          7.2         3.0          5.8         1.6  virginica\n## 121          6.9         3.2          5.7         2.3  virginica\n## 125          6.7         3.3          5.7         2.1  virginica\n## 145          6.7         3.3          5.7         2.5  virginica\n## 104          6.3         2.9          5.6         1.8  virginica\n## 129          6.4         2.8          5.6         2.1  virginica\n## 133          6.4         2.8          5.6         2.2  virginica\n## 135          6.1         2.6          5.6         1.4  virginica\n## 137          6.3         3.4          5.6         2.4  virginica\n## 141          6.7         3.1          5.6         2.4  virginica\n## 113          6.8         3.0          5.5         2.1  virginica\n## 117          6.5         3.0          5.5         1.8  virginica\n## 138          6.4         3.1          5.5         1.8  virginica\n## 140          6.9         3.1          5.4         2.1  virginica\n## 149          6.2         3.4          5.4         2.3  virginica\n## 112          6.4         2.7          5.3         1.9  virginica\n## 116          6.4         3.2          5.3         2.3  virginica\n## 146          6.7         3.0          5.2         2.3  virginica\n## 148          6.5         3.0          5.2         2.0  virginica\n## 102          5.8         2.7          5.1         1.9  virginica\n## 111          6.5         3.2          5.1         2.0  virginica\n## 115          5.8         2.8          5.1         2.4  virginica\n## 134          6.3         2.8          5.1         1.5  virginica\n## 142          6.9         3.1          5.1         2.3  virginica\n## 143          5.8         2.7          5.1         1.9  virginica\n## 150          5.9         3.0          5.1         1.8  virginica\n## 114          5.7         2.5          5.0         2.0  virginica\n## 120          6.0         2.2          5.0         1.5  virginica\n## 147          6.3         2.5          5.0         1.9  virginica\n## 122          5.6         2.8          4.9         2.0  virginica\n## 124          6.3         2.7          4.9         1.8  virginica\n## 128          6.1         3.0          4.9         1.8  virginica\n## 127          6.2         2.8          4.8         1.8  virginica\n## 139          6.0         3.0          4.8         1.8  virginica\n## 107          4.9         2.5          4.5         1.7  virginica\n## 84           6.0         2.7          5.1         1.6 versicolor\n## 78           6.7         3.0          5.0         1.7 versicolor\n## 53           6.9         3.1          4.9         1.5 versicolor\n## 73           6.3         2.5          4.9         1.5 versicolor\n## 71           5.9         3.2          4.8         1.8 versicolor\n## 77           6.8         2.8          4.8         1.4 versicolor\n## 51           7.0         3.2          4.7         1.4 versicolor\n## 57           6.3         3.3          4.7         1.6 versicolor\n## 64           6.1         2.9          4.7         1.4 versicolor\n## 74           6.1         2.8          4.7         1.2 versicolor\n## 87           6.7         3.1          4.7         1.5 versicolor\n## 55           6.5         2.8          4.6         1.5 versicolor\n## 59           6.6         2.9          4.6         1.3 versicolor\n## 92           6.1         3.0          4.6         1.4 versicolor\n## 52           6.4         3.2          4.5         1.5 versicolor\n## 56           5.7         2.8          4.5         1.3 versicolor\n## 67           5.6         3.0          4.5         1.5 versicolor\n## 69           6.2         2.2          4.5         1.5 versicolor\n## 79           6.0         2.9          4.5         1.5 versicolor\n## 85           5.4         3.0          4.5         1.5 versicolor\n## 86           6.0         3.4          4.5         1.6 versicolor\n## 66           6.7         3.1          4.4         1.4 versicolor\n## 76           6.6         3.0          4.4         1.4 versicolor\n## 88           6.3         2.3          4.4         1.3 versicolor\n## 91           5.5         2.6          4.4         1.2 versicolor\n## 75           6.4         2.9          4.3         1.3 versicolor\n## 98           6.2         2.9          4.3         1.3 versicolor\n## 62           5.9         3.0          4.2         1.5 versicolor\n## 95           5.6         2.7          4.2         1.3 versicolor\n## 96           5.7         3.0          4.2         1.2 versicolor\n## 97           5.7         2.9          4.2         1.3 versicolor\n## 68           5.8         2.7          4.1         1.0 versicolor\n## 89           5.6         3.0          4.1         1.3 versicolor\n## 100          5.7         2.8          4.1         1.3 versicolor\n## 54           5.5         2.3          4.0         1.3 versicolor\n## 63           6.0         2.2          4.0         1.0 versicolor\n## 72           6.1         2.8          4.0         1.3 versicolor\n## 90           5.5         2.5          4.0         1.3 versicolor\n## 93           5.8         2.6          4.0         1.2 versicolor\n## 60           5.2         2.7          3.9         1.4 versicolor\n## 70           5.6         2.5          3.9         1.1 versicolor\n## 83           5.8         2.7          3.9         1.2 versicolor\n## 81           5.5         2.4          3.8         1.1 versicolor\n## 82           5.5         2.4          3.7         1.0 versicolor\n## 65           5.6         2.9          3.6         1.3 versicolor\n## 61           5.0         2.0          3.5         1.0 versicolor\n## 80           5.7         2.6          3.5         1.0 versicolor\n## 58           4.9         2.4          3.3         1.0 versicolor\n## 94           5.0         2.3          3.3         1.0 versicolor\n## 99           5.1         2.5          3.0         1.1 versicolor\n## 25           4.8         3.4          1.9         0.2     setosa\n## 45           5.1         3.8          1.9         0.4     setosa\n## 6            5.4         3.9          1.7         0.4     setosa\n## 19           5.7         3.8          1.7         0.3     setosa\n## 21           5.4         3.4          1.7         0.2     setosa\n## 24           5.1         3.3          1.7         0.5     setosa\n## 12           4.8         3.4          1.6         0.2     setosa\n## 26           5.0         3.0          1.6         0.2     setosa\n## 27           5.0         3.4          1.6         0.4     setosa\n## 30           4.7         3.2          1.6         0.2     setosa\n## 31           4.8         3.1          1.6         0.2     setosa\n## 44           5.0         3.5          1.6         0.6     setosa\n## 47           5.1         3.8          1.6         0.2     setosa\n## 4            4.6         3.1          1.5         0.2     setosa\n## 8            5.0         3.4          1.5         0.2     setosa\n## 10           4.9         3.1          1.5         0.1     setosa\n## 11           5.4         3.7          1.5         0.2     setosa\n## 16           5.7         4.4          1.5         0.4     setosa\n## 20           5.1         3.8          1.5         0.3     setosa\n## 22           5.1         3.7          1.5         0.4     setosa\n## 28           5.2         3.5          1.5         0.2     setosa\n## 32           5.4         3.4          1.5         0.4     setosa\n## 33           5.2         4.1          1.5         0.1     setosa\n## 35           4.9         3.1          1.5         0.2     setosa\n## 40           5.1         3.4          1.5         0.2     setosa\n## 49           5.3         3.7          1.5         0.2     setosa\n## 1            5.1         3.5          1.4         0.2     setosa\n## 2            4.9         3.0          1.4         0.2     setosa\n## 5            5.0         3.6          1.4         0.2     setosa\n## 7            4.6         3.4          1.4         0.3     setosa\n## 9            4.4         2.9          1.4         0.2     setosa\n## 13           4.8         3.0          1.4         0.1     setosa\n## 18           5.1         3.5          1.4         0.3     setosa\n## 29           5.2         3.4          1.4         0.2     setosa\n## 34           5.5         4.2          1.4         0.2     setosa\n## 38           4.9         3.6          1.4         0.1     setosa\n## 46           4.8         3.0          1.4         0.3     setosa\n## 48           4.6         3.2          1.4         0.2     setosa\n## 50           5.0         3.3          1.4         0.2     setosa\n## 3            4.7         3.2          1.3         0.2     setosa\n## 17           5.4         3.9          1.3         0.4     setosa\n## 37           5.5         3.5          1.3         0.2     setosa\n## 39           4.4         3.0          1.3         0.2     setosa\n## 41           5.0         3.5          1.3         0.3     setosa\n## 42           4.5         2.3          1.3         0.3     setosa\n## 43           4.4         3.2          1.3         0.2     setosa\n## 15           5.8         4.0          1.2         0.2     setosa\n## 36           5.0         3.2          1.2         0.2     setosa\n## 14           4.3         3.0          1.1         0.1     setosa\n## 23           4.6         3.6          1.0         0.2     setosa\n\n\nsp &lt;- split(iris, iris$Species) # 품종별로 데이터 분리\nsp                              # 분리 결과 확인\n## $setosa\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1           5.1         3.5          1.4         0.2  setosa\n## 2           4.9         3.0          1.4         0.2  setosa\n## 3           4.7         3.2          1.3         0.2  setosa\n## 4           4.6         3.1          1.5         0.2  setosa\n## 5           5.0         3.6          1.4         0.2  setosa\n## 6           5.4         3.9          1.7         0.4  setosa\n## 7           4.6         3.4          1.4         0.3  setosa\n## 8           5.0         3.4          1.5         0.2  setosa\n## 9           4.4         2.9          1.4         0.2  setosa\n## 10          4.9         3.1          1.5         0.1  setosa\n## 11          5.4         3.7          1.5         0.2  setosa\n## 12          4.8         3.4          1.6         0.2  setosa\n## 13          4.8         3.0          1.4         0.1  setosa\n## 14          4.3         3.0          1.1         0.1  setosa\n## 15          5.8         4.0          1.2         0.2  setosa\n## 16          5.7         4.4          1.5         0.4  setosa\n## 17          5.4         3.9          1.3         0.4  setosa\n## 18          5.1         3.5          1.4         0.3  setosa\n## 19          5.7         3.8          1.7         0.3  setosa\n## 20          5.1         3.8          1.5         0.3  setosa\n## 21          5.4         3.4          1.7         0.2  setosa\n## 22          5.1         3.7          1.5         0.4  setosa\n## 23          4.6         3.6          1.0         0.2  setosa\n## 24          5.1         3.3          1.7         0.5  setosa\n## 25          4.8         3.4          1.9         0.2  setosa\n## 26          5.0         3.0          1.6         0.2  setosa\n## 27          5.0         3.4          1.6         0.4  setosa\n## 28          5.2         3.5          1.5         0.2  setosa\n## 29          5.2         3.4          1.4         0.2  setosa\n## 30          4.7         3.2          1.6         0.2  setosa\n## 31          4.8         3.1          1.6         0.2  setosa\n## 32          5.4         3.4          1.5         0.4  setosa\n## 33          5.2         4.1          1.5         0.1  setosa\n## 34          5.5         4.2          1.4         0.2  setosa\n## 35          4.9         3.1          1.5         0.2  setosa\n## 36          5.0         3.2          1.2         0.2  setosa\n## 37          5.5         3.5          1.3         0.2  setosa\n## 38          4.9         3.6          1.4         0.1  setosa\n## 39          4.4         3.0          1.3         0.2  setosa\n## 40          5.1         3.4          1.5         0.2  setosa\n## 41          5.0         3.5          1.3         0.3  setosa\n## 42          4.5         2.3          1.3         0.3  setosa\n## 43          4.4         3.2          1.3         0.2  setosa\n## 44          5.0         3.5          1.6         0.6  setosa\n## 45          5.1         3.8          1.9         0.4  setosa\n## 46          4.8         3.0          1.4         0.3  setosa\n## 47          5.1         3.8          1.6         0.2  setosa\n## 48          4.6         3.2          1.4         0.2  setosa\n## 49          5.3         3.7          1.5         0.2  setosa\n## 50          5.0         3.3          1.4         0.2  setosa\n## \n## $versicolor\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 51           7.0         3.2          4.7         1.4 versicolor\n## 52           6.4         3.2          4.5         1.5 versicolor\n## 53           6.9         3.1          4.9         1.5 versicolor\n## 54           5.5         2.3          4.0         1.3 versicolor\n## 55           6.5         2.8          4.6         1.5 versicolor\n## 56           5.7         2.8          4.5         1.3 versicolor\n## 57           6.3         3.3          4.7         1.6 versicolor\n## 58           4.9         2.4          3.3         1.0 versicolor\n## 59           6.6         2.9          4.6         1.3 versicolor\n## 60           5.2         2.7          3.9         1.4 versicolor\n## 61           5.0         2.0          3.5         1.0 versicolor\n## 62           5.9         3.0          4.2         1.5 versicolor\n## 63           6.0         2.2          4.0         1.0 versicolor\n## 64           6.1         2.9          4.7         1.4 versicolor\n## 65           5.6         2.9          3.6         1.3 versicolor\n## 66           6.7         3.1          4.4         1.4 versicolor\n## 67           5.6         3.0          4.5         1.5 versicolor\n## 68           5.8         2.7          4.1         1.0 versicolor\n## 69           6.2         2.2          4.5         1.5 versicolor\n## 70           5.6         2.5          3.9         1.1 versicolor\n## 71           5.9         3.2          4.8         1.8 versicolor\n## 72           6.1         2.8          4.0         1.3 versicolor\n## 73           6.3         2.5          4.9         1.5 versicolor\n## 74           6.1         2.8          4.7         1.2 versicolor\n## 75           6.4         2.9          4.3         1.3 versicolor\n## 76           6.6         3.0          4.4         1.4 versicolor\n## 77           6.8         2.8          4.8         1.4 versicolor\n## 78           6.7         3.0          5.0         1.7 versicolor\n## 79           6.0         2.9          4.5         1.5 versicolor\n## 80           5.7         2.6          3.5         1.0 versicolor\n## 81           5.5         2.4          3.8         1.1 versicolor\n## 82           5.5         2.4          3.7         1.0 versicolor\n## 83           5.8         2.7          3.9         1.2 versicolor\n## 84           6.0         2.7          5.1         1.6 versicolor\n## 85           5.4         3.0          4.5         1.5 versicolor\n## 86           6.0         3.4          4.5         1.6 versicolor\n## 87           6.7         3.1          4.7         1.5 versicolor\n## 88           6.3         2.3          4.4         1.3 versicolor\n## 89           5.6         3.0          4.1         1.3 versicolor\n## 90           5.5         2.5          4.0         1.3 versicolor\n## 91           5.5         2.6          4.4         1.2 versicolor\n## 92           6.1         3.0          4.6         1.4 versicolor\n## 93           5.8         2.6          4.0         1.2 versicolor\n## 94           5.0         2.3          3.3         1.0 versicolor\n## 95           5.6         2.7          4.2         1.3 versicolor\n## 96           5.7         3.0          4.2         1.2 versicolor\n## 97           5.7         2.9          4.2         1.3 versicolor\n## 98           6.2         2.9          4.3         1.3 versicolor\n## 99           5.1         2.5          3.0         1.1 versicolor\n## 100          5.7         2.8          4.1         1.3 versicolor\n## \n## $virginica\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n## 101          6.3         3.3          6.0         2.5 virginica\n## 102          5.8         2.7          5.1         1.9 virginica\n## 103          7.1         3.0          5.9         2.1 virginica\n## 104          6.3         2.9          5.6         1.8 virginica\n## 105          6.5         3.0          5.8         2.2 virginica\n## 106          7.6         3.0          6.6         2.1 virginica\n## 107          4.9         2.5          4.5         1.7 virginica\n## 108          7.3         2.9          6.3         1.8 virginica\n## 109          6.7         2.5          5.8         1.8 virginica\n## 110          7.2         3.6          6.1         2.5 virginica\n## 111          6.5         3.2          5.1         2.0 virginica\n## 112          6.4         2.7          5.3         1.9 virginica\n## 113          6.8         3.0          5.5         2.1 virginica\n## 114          5.7         2.5          5.0         2.0 virginica\n## 115          5.8         2.8          5.1         2.4 virginica\n## 116          6.4         3.2          5.3         2.3 virginica\n## 117          6.5         3.0          5.5         1.8 virginica\n## 118          7.7         3.8          6.7         2.2 virginica\n## 119          7.7         2.6          6.9         2.3 virginica\n## 120          6.0         2.2          5.0         1.5 virginica\n## 121          6.9         3.2          5.7         2.3 virginica\n## 122          5.6         2.8          4.9         2.0 virginica\n## 123          7.7         2.8          6.7         2.0 virginica\n## 124          6.3         2.7          4.9         1.8 virginica\n## 125          6.7         3.3          5.7         2.1 virginica\n## 126          7.2         3.2          6.0         1.8 virginica\n## 127          6.2         2.8          4.8         1.8 virginica\n## 128          6.1         3.0          4.9         1.8 virginica\n## 129          6.4         2.8          5.6         2.1 virginica\n## 130          7.2         3.0          5.8         1.6 virginica\n## 131          7.4         2.8          6.1         1.9 virginica\n## 132          7.9         3.8          6.4         2.0 virginica\n## 133          6.4         2.8          5.6         2.2 virginica\n## 134          6.3         2.8          5.1         1.5 virginica\n## 135          6.1         2.6          5.6         1.4 virginica\n## 136          7.7         3.0          6.1         2.3 virginica\n## 137          6.3         3.4          5.6         2.4 virginica\n## 138          6.4         3.1          5.5         1.8 virginica\n## 139          6.0         3.0          4.8         1.8 virginica\n## 140          6.9         3.1          5.4         2.1 virginica\n## 141          6.7         3.1          5.6         2.4 virginica\n## 142          6.9         3.1          5.1         2.3 virginica\n## 143          5.8         2.7          5.1         1.9 virginica\n## 144          6.8         3.2          5.9         2.3 virginica\n## 145          6.7         3.3          5.7         2.5 virginica\n## 146          6.7         3.0          5.2         2.3 virginica\n## 147          6.3         2.5          5.0         1.9 virginica\n## 148          6.5         3.0          5.2         2.0 virginica\n## 149          6.2         3.4          5.4         2.3 virginica\n## 150          5.9         3.0          5.1         1.8 virginica\nsummary(sp)                     # 분리 결과 요약\n##            Length Class      Mode\n## setosa     5      data.frame list\n## versicolor 5      data.frame list\n## virginica  5      data.frame list\nsp$setosa                       # setosa 품종의 데이터 확인\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1           5.1         3.5          1.4         0.2  setosa\n## 2           4.9         3.0          1.4         0.2  setosa\n## 3           4.7         3.2          1.3         0.2  setosa\n## 4           4.6         3.1          1.5         0.2  setosa\n## 5           5.0         3.6          1.4         0.2  setosa\n## 6           5.4         3.9          1.7         0.4  setosa\n## 7           4.6         3.4          1.4         0.3  setosa\n## 8           5.0         3.4          1.5         0.2  setosa\n## 9           4.4         2.9          1.4         0.2  setosa\n## 10          4.9         3.1          1.5         0.1  setosa\n## 11          5.4         3.7          1.5         0.2  setosa\n## 12          4.8         3.4          1.6         0.2  setosa\n## 13          4.8         3.0          1.4         0.1  setosa\n## 14          4.3         3.0          1.1         0.1  setosa\n## 15          5.8         4.0          1.2         0.2  setosa\n## 16          5.7         4.4          1.5         0.4  setosa\n## 17          5.4         3.9          1.3         0.4  setosa\n## 18          5.1         3.5          1.4         0.3  setosa\n## 19          5.7         3.8          1.7         0.3  setosa\n## 20          5.1         3.8          1.5         0.3  setosa\n## 21          5.4         3.4          1.7         0.2  setosa\n## 22          5.1         3.7          1.5         0.4  setosa\n## 23          4.6         3.6          1.0         0.2  setosa\n## 24          5.1         3.3          1.7         0.5  setosa\n## 25          4.8         3.4          1.9         0.2  setosa\n## 26          5.0         3.0          1.6         0.2  setosa\n## 27          5.0         3.4          1.6         0.4  setosa\n## 28          5.2         3.5          1.5         0.2  setosa\n## 29          5.2         3.4          1.4         0.2  setosa\n## 30          4.7         3.2          1.6         0.2  setosa\n## 31          4.8         3.1          1.6         0.2  setosa\n## 32          5.4         3.4          1.5         0.4  setosa\n## 33          5.2         4.1          1.5         0.1  setosa\n## 34          5.5         4.2          1.4         0.2  setosa\n## 35          4.9         3.1          1.5         0.2  setosa\n## 36          5.0         3.2          1.2         0.2  setosa\n## 37          5.5         3.5          1.3         0.2  setosa\n## 38          4.9         3.6          1.4         0.1  setosa\n## 39          4.4         3.0          1.3         0.2  setosa\n## 40          5.1         3.4          1.5         0.2  setosa\n## 41          5.0         3.5          1.3         0.3  setosa\n## 42          4.5         2.3          1.3         0.3  setosa\n## 43          4.4         3.2          1.3         0.2  setosa\n## 44          5.0         3.5          1.6         0.6  setosa\n## 45          5.1         3.8          1.9         0.4  setosa\n## 46          4.8         3.0          1.4         0.3  setosa\n## 47          5.1         3.8          1.6         0.2  setosa\n## 48          4.6         3.2          1.4         0.2  setosa\n## 49          5.3         3.7          1.5         0.2  setosa\n## 50          5.0         3.3          1.4         0.2  setosa\nsetosa &lt;- sp$setosa\n\n\nsubset(iris, Species == \"setosa\")\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1           5.1         3.5          1.4         0.2  setosa\n## 2           4.9         3.0          1.4         0.2  setosa\n## 3           4.7         3.2          1.3         0.2  setosa\n## 4           4.6         3.1          1.5         0.2  setosa\n## 5           5.0         3.6          1.4         0.2  setosa\n## 6           5.4         3.9          1.7         0.4  setosa\n## 7           4.6         3.4          1.4         0.3  setosa\n## 8           5.0         3.4          1.5         0.2  setosa\n## 9           4.4         2.9          1.4         0.2  setosa\n## 10          4.9         3.1          1.5         0.1  setosa\n## 11          5.4         3.7          1.5         0.2  setosa\n## 12          4.8         3.4          1.6         0.2  setosa\n## 13          4.8         3.0          1.4         0.1  setosa\n## 14          4.3         3.0          1.1         0.1  setosa\n## 15          5.8         4.0          1.2         0.2  setosa\n## 16          5.7         4.4          1.5         0.4  setosa\n## 17          5.4         3.9          1.3         0.4  setosa\n## 18          5.1         3.5          1.4         0.3  setosa\n## 19          5.7         3.8          1.7         0.3  setosa\n## 20          5.1         3.8          1.5         0.3  setosa\n## 21          5.4         3.4          1.7         0.2  setosa\n## 22          5.1         3.7          1.5         0.4  setosa\n## 23          4.6         3.6          1.0         0.2  setosa\n## 24          5.1         3.3          1.7         0.5  setosa\n## 25          4.8         3.4          1.9         0.2  setosa\n## 26          5.0         3.0          1.6         0.2  setosa\n## 27          5.0         3.4          1.6         0.4  setosa\n## 28          5.2         3.5          1.5         0.2  setosa\n## 29          5.2         3.4          1.4         0.2  setosa\n## 30          4.7         3.2          1.6         0.2  setosa\n## 31          4.8         3.1          1.6         0.2  setosa\n## 32          5.4         3.4          1.5         0.4  setosa\n## 33          5.2         4.1          1.5         0.1  setosa\n## 34          5.5         4.2          1.4         0.2  setosa\n## 35          4.9         3.1          1.5         0.2  setosa\n## 36          5.0         3.2          1.2         0.2  setosa\n## 37          5.5         3.5          1.3         0.2  setosa\n## 38          4.9         3.6          1.4         0.1  setosa\n## 39          4.4         3.0          1.3         0.2  setosa\n## 40          5.1         3.4          1.5         0.2  setosa\n## 41          5.0         3.5          1.3         0.3  setosa\n## 42          4.5         2.3          1.3         0.3  setosa\n## 43          4.4         3.2          1.3         0.2  setosa\n## 44          5.0         3.5          1.6         0.6  setosa\n## 45          5.1         3.8          1.9         0.4  setosa\n## 46          4.8         3.0          1.4         0.3  setosa\n## 47          5.1         3.8          1.6         0.2  setosa\n## 48          4.6         3.2          1.4         0.2  setosa\n## 49          5.3         3.7          1.5         0.2  setosa\n## 50          5.0         3.3          1.4         0.2  setosa\nsubset(iris, Sepal.Length &gt; 7.5)\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n## 106          7.6         3.0          6.6         2.1 virginica\n## 118          7.7         3.8          6.7         2.2 virginica\n## 119          7.7         2.6          6.9         2.3 virginica\n## 123          7.7         2.8          6.7         2.0 virginica\n## 132          7.9         3.8          6.4         2.0 virginica\n## 136          7.7         3.0          6.1         2.3 virginica\nsubset(iris, Sepal.Length &gt; 5.1 &\n           Sepal.Width &gt; 3.9)\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 15          5.8         4.0          1.2         0.2  setosa\n## 16          5.7         4.4          1.5         0.4  setosa\n## 33          5.2         4.1          1.5         0.1  setosa\n## 34          5.5         4.2          1.4         0.2  setosa\nsubset(iris, Sepal.Length &gt; 5.1 |\n           Sepal.Width &gt; 3.9)\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 6            5.4         3.9          1.7         0.4     setosa\n## 11           5.4         3.7          1.5         0.2     setosa\n## 15           5.8         4.0          1.2         0.2     setosa\n## 16           5.7         4.4          1.5         0.4     setosa\n## 17           5.4         3.9          1.3         0.4     setosa\n## 19           5.7         3.8          1.7         0.3     setosa\n## 21           5.4         3.4          1.7         0.2     setosa\n## 28           5.2         3.5          1.5         0.2     setosa\n## 29           5.2         3.4          1.4         0.2     setosa\n## 32           5.4         3.4          1.5         0.4     setosa\n## 33           5.2         4.1          1.5         0.1     setosa\n## 34           5.5         4.2          1.4         0.2     setosa\n## 37           5.5         3.5          1.3         0.2     setosa\n## 49           5.3         3.7          1.5         0.2     setosa\n## 51           7.0         3.2          4.7         1.4 versicolor\n## 52           6.4         3.2          4.5         1.5 versicolor\n## 53           6.9         3.1          4.9         1.5 versicolor\n## 54           5.5         2.3          4.0         1.3 versicolor\n## 55           6.5         2.8          4.6         1.5 versicolor\n## 56           5.7         2.8          4.5         1.3 versicolor\n## 57           6.3         3.3          4.7         1.6 versicolor\n## 59           6.6         2.9          4.6         1.3 versicolor\n## 60           5.2         2.7          3.9         1.4 versicolor\n## 62           5.9         3.0          4.2         1.5 versicolor\n## 63           6.0         2.2          4.0         1.0 versicolor\n## 64           6.1         2.9          4.7         1.4 versicolor\n## 65           5.6         2.9          3.6         1.3 versicolor\n## 66           6.7         3.1          4.4         1.4 versicolor\n## 67           5.6         3.0          4.5         1.5 versicolor\n## 68           5.8         2.7          4.1         1.0 versicolor\n## 69           6.2         2.2          4.5         1.5 versicolor\n## 70           5.6         2.5          3.9         1.1 versicolor\n## 71           5.9         3.2          4.8         1.8 versicolor\n## 72           6.1         2.8          4.0         1.3 versicolor\n## 73           6.3         2.5          4.9         1.5 versicolor\n## 74           6.1         2.8          4.7         1.2 versicolor\n## 75           6.4         2.9          4.3         1.3 versicolor\n## 76           6.6         3.0          4.4         1.4 versicolor\n## 77           6.8         2.8          4.8         1.4 versicolor\n## 78           6.7         3.0          5.0         1.7 versicolor\n## 79           6.0         2.9          4.5         1.5 versicolor\n## 80           5.7         2.6          3.5         1.0 versicolor\n## 81           5.5         2.4          3.8         1.1 versicolor\n## 82           5.5         2.4          3.7         1.0 versicolor\n## 83           5.8         2.7          3.9         1.2 versicolor\n## 84           6.0         2.7          5.1         1.6 versicolor\n## 85           5.4         3.0          4.5         1.5 versicolor\n## 86           6.0         3.4          4.5         1.6 versicolor\n## 87           6.7         3.1          4.7         1.5 versicolor\n## 88           6.3         2.3          4.4         1.3 versicolor\n## 89           5.6         3.0          4.1         1.3 versicolor\n## 90           5.5         2.5          4.0         1.3 versicolor\n## 91           5.5         2.6          4.4         1.2 versicolor\n## 92           6.1         3.0          4.6         1.4 versicolor\n## 93           5.8         2.6          4.0         1.2 versicolor\n## 95           5.6         2.7          4.2         1.3 versicolor\n## 96           5.7         3.0          4.2         1.2 versicolor\n## 97           5.7         2.9          4.2         1.3 versicolor\n## 98           6.2         2.9          4.3         1.3 versicolor\n## 100          5.7         2.8          4.1         1.3 versicolor\n## 101          6.3         3.3          6.0         2.5  virginica\n## 102          5.8         2.7          5.1         1.9  virginica\n## 103          7.1         3.0          5.9         2.1  virginica\n## 104          6.3         2.9          5.6         1.8  virginica\n## 105          6.5         3.0          5.8         2.2  virginica\n## 106          7.6         3.0          6.6         2.1  virginica\n## 108          7.3         2.9          6.3         1.8  virginica\n## 109          6.7         2.5          5.8         1.8  virginica\n## 110          7.2         3.6          6.1         2.5  virginica\n## 111          6.5         3.2          5.1         2.0  virginica\n## 112          6.4         2.7          5.3         1.9  virginica\n## 113          6.8         3.0          5.5         2.1  virginica\n## 114          5.7         2.5          5.0         2.0  virginica\n## 115          5.8         2.8          5.1         2.4  virginica\n## 116          6.4         3.2          5.3         2.3  virginica\n## 117          6.5         3.0          5.5         1.8  virginica\n## 118          7.7         3.8          6.7         2.2  virginica\n## 119          7.7         2.6          6.9         2.3  virginica\n## 120          6.0         2.2          5.0         1.5  virginica\n## 121          6.9         3.2          5.7         2.3  virginica\n## 122          5.6         2.8          4.9         2.0  virginica\n## 123          7.7         2.8          6.7         2.0  virginica\n## 124          6.3         2.7          4.9         1.8  virginica\n## 125          6.7         3.3          5.7         2.1  virginica\n## 126          7.2         3.2          6.0         1.8  virginica\n## 127          6.2         2.8          4.8         1.8  virginica\n## 128          6.1         3.0          4.9         1.8  virginica\n## 129          6.4         2.8          5.6         2.1  virginica\n## 130          7.2         3.0          5.8         1.6  virginica\n## 131          7.4         2.8          6.1         1.9  virginica\n## 132          7.9         3.8          6.4         2.0  virginica\n## 133          6.4         2.8          5.6         2.2  virginica\n## 134          6.3         2.8          5.1         1.5  virginica\n## 135          6.1         2.6          5.6         1.4  virginica\n## 136          7.7         3.0          6.1         2.3  virginica\n## 137          6.3         3.4          5.6         2.4  virginica\n## 138          6.4         3.1          5.5         1.8  virginica\n## 139          6.0         3.0          4.8         1.8  virginica\n## 140          6.9         3.1          5.4         2.1  virginica\n## 141          6.7         3.1          5.6         2.4  virginica\n## 142          6.9         3.1          5.1         2.3  virginica\n## 143          5.8         2.7          5.1         1.9  virginica\n## 144          6.8         3.2          5.9         2.3  virginica\n## 145          6.7         3.3          5.7         2.5  virginica\n## 146          6.7         3.0          5.2         2.3  virginica\n## 147          6.3         2.5          5.0         1.9  virginica\n## 148          6.5         3.0          5.2         2.0  virginica\n## 149          6.2         3.4          5.4         2.3  virginica\n## 150          5.9         3.0          5.1         1.8  virginica\nsubset(iris, Sepal.Length &gt; 7.6,\n       select = c(Petal.Length, Petal.Width))\n##     Petal.Length Petal.Width\n## 118          6.7         2.2\n## 119          6.9         2.3\n## 123          6.7         2.0\n## 132          6.4         2.0\n## 136          6.1         2.3\n\n\nx &lt;- 1:10\nsample(x, size = 5, replace = FALSE) # 비복원추출\n## [1] 9 2 4 6 7\nsample(x, size = 5, replace = TRUE)\n## [1] 10  2  5  1  8\n\nx &lt;- 1:45\nsample(x, size = 6, replace = FALSE)\n## [1] 28 41  3 35  5 42\n\n\nidx &lt;- sample(1:nrow(iris), size = 50,\n              replace = FALSE)\niris.50 &lt;- iris[idx, ]  # 50개의 행 추출\ndim(iris.50)            # 행과 열의 개수 확인\n## [1] 50  5\nhead(iris.50)\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 137          6.3         3.4          5.6         2.4  virginica\n## 56           5.7         2.8          4.5         1.3 versicolor\n## 79           6.0         2.9          4.5         1.5 versicolor\n## 107          4.9         2.5          4.5         1.7  virginica\n## 134          6.3         2.8          5.1         1.5  virginica\n## 136          7.7         3.0          6.1         2.3  virginica\n\n\nsample(1:20, size = 5)\n## [1]  2  1  6 10  5\nsample(1:20, size = 5)\n## [1] 20 17 13 18  4\nsample(1:20, size = 5)\n## [1] 13 17  7 18  3\n\n# 같은 값이 추출되도록 고정시키고 싶다면\n# set.seed() 함수를 이용하여 seed값을 지정해주면 된다.\nset.seed(100)\nsample(1:20, size = 5)\n## [1] 10  6 16 14 12\nset.seed(100)\nsample(1:20, size = 5)\n## [1] 10  6 16 14 12\nset.seed(100)\nsample(1:20, size = 5)\n## [1] 10  6 16 14 12\n\n\ncombn(1:5, 3) # 1~5에서 3개를 뽑는 조합\n##      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n## [1,]    1    1    1    1    1    1    2    2    2     3\n## [2,]    2    2    2    3    3    4    3    3    4     4\n## [3,]    3    4    5    4    5    5    4    5    5     5\n\nx = c(\"red\", \"green\", \"blue\", \"black\", \"white\")\ncom &lt;- combn(x, 2) # x의 원소를 2개씩 뽑는 조합\ncom\n##      [,1]    [,2]   [,3]    [,4]    [,5]    [,6]    [,7]    [,8]    [,9]   \n## [1,] \"red\"   \"red\"  \"red\"   \"red\"   \"green\" \"green\" \"green\" \"blue\"  \"blue\" \n## [2,] \"green\" \"blue\" \"black\" \"white\" \"blue\"  \"black\" \"white\" \"black\" \"white\"\n##      [,10]  \n## [1,] \"black\"\n## [2,] \"white\"\n\nfor (i in 1:ncol(com)) {\n    # 조합을 출력\n    cat(com[, i], \"\\n\")\n}\n## red green \n## red blue \n## red black \n## red white \n## green blue \n## green black \n## green white \n## blue black \n## blue white \n## black white\n\n\n# aggregate(data, by = '기준이 되는 컬럼', FUN)\nagg &lt;- aggregate(iris[, -5], by = list(iris$Species), FUN = mean)\nagg\n##      Group.1 Sepal.Length Sepal.Width Petal.Length Petal.Width\n## 1     setosa        5.006       3.428        1.462       0.246\n## 2 versicolor        5.936       2.770        4.260       1.326\n## 3  virginica        6.588       2.974        5.552       2.026\n\n\n# aggregate는 데이터의 특정 컬럼을 기준으로 통계량을 구해주는 함수\nagg &lt;- aggregate(iris[, -5], by = list(표준편차 = iris$Species), FUN = sd)\nagg\n##     표준편차 Sepal.Length Sepal.Width Petal.Length Petal.Width\n## 1     setosa    0.3524897   0.3790644    0.1736640   0.1053856\n## 2 versicolor    0.5161711   0.3137983    0.4699110   0.1977527\n## 3  virginica    0.6358796   0.3224966    0.5518947   0.2746501\n\n\nhead(mtcars)\n##                    mpg cyl disp  hp drat    wt  qsec vs am gear carb\n## Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n## Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n## Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n## Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n## Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n## Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\nagg &lt;- aggregate(mtcars, by = list(cyl = mtcars$cyl, vs = mtcars$vs), FUN = max)\nagg\n##   cyl vs  mpg cyl  disp  hp drat    wt  qsec vs am gear carb\n## 1   4  0 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\n## 2   6  0 21.0   6 160.0 175 3.90 2.875 17.02  0  1    5    6\n## 3   8  0 19.2   8 472.0 335 4.22 5.424 18.00  0  1    5    8\n## 4   4  1 33.9   4 146.7 113 4.93 3.190 22.90  1  1    5    2\n## 5   6  1 21.4   6 258.0 123 3.92 3.460 20.22  1  0    4    4\n\nagg &lt;- aggregate(mtcars, by = list(cyl = mtcars$cyl, vs = mtcars$vs), FUN = mean)\nagg\n##   cyl vs      mpg cyl   disp       hp     drat       wt     qsec vs        am\n## 1   4  0 26.00000   4 120.30  91.0000 4.430000 2.140000 16.70000  0 1.0000000\n## 2   6  0 20.56667   6 155.00 131.6667 3.806667 2.755000 16.32667  0 1.0000000\n## 3   8  0 15.10000   8 353.10 209.2143 3.229286 3.999214 16.77214  0 0.1428571\n## 4   4  1 26.73000   4 103.62  81.8000 4.035000 2.300300 19.38100  1 0.7000000\n## 5   6  1 19.12500   6 204.55 115.2500 3.420000 3.388750 19.21500  1 0.0000000\n##       gear     carb\n## 1 5.000000 2.000000\n## 2 4.333333 4.666667\n## 3 3.285714 3.500000\n## 4 4.000000 1.500000\n## 5 3.500000 2.500000\n\n\nx &lt;- data.frame(name = c(\"a\", \"b\", \"c\"), math = c(90, 80, 40))\ny &lt;- data.frame(name = c(\"a\", \"b\", \"d\"), korean = c(75, 60, 90))\nx ; y\n##   name math\n## 1    a   90\n## 2    b   80\n## 3    c   40\n##   name korean\n## 1    a     75\n## 2    b     60\n## 3    d     90\n\n\nz &lt;- merge(x, y, by = c(\"name\"))\nz\n##   name math korean\n## 1    a   90     75\n## 2    b   80     60\n\n\nmerge(x, y, all.x = T)  # 첫 번째 데이터셋의 행들은 모두 표시되도록\n##   name math korean\n## 1    a   90     75\n## 2    b   80     60\n## 3    c   40     NA\nmerge(x, y, all.y = T)  # 두 번째 데이터셋의 행들은 모두 표시되도록\n##   name math korean\n## 1    a   90     75\n## 2    b   80     60\n## 3    d   NA     90\nmerge(x, y, all = T)    # 두 데이터셋의 모든 행들이 표시되도록\n##   name math korean\n## 1    a   90     75\n## 2    b   80     60\n## 3    c   40     NA\n## 4    d   NA     90\n\n\nx &lt;- data.frame(name = c(\"a\", \"b\", \"c\"), math = c(90, 80, 40))\ny &lt;- data.frame(sname = c(\"a\", \"b\", \"d\"), korean = c(75, 60, 90))\nx # 병합 기준 열의 이름이 name\n##   name math\n## 1    a   90\n## 2    b   80\n## 3    c   40\ny # 병합 기준 열의 이름이 sname\n##   sname korean\n## 1     a     75\n## 2     b     60\n## 3     d     90\nmerge(x, y, by.x = c(\"name\"), by.y = c(\"sname\"))\n##   name math korean\n## 1    a   90     75\n## 2    b   80     60"
  }
]